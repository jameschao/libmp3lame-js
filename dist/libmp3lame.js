// libmp3lame.js - port of libmp3lame to JavaScript using emscripten
// by Andreas Krennmair <ak@synflood.at>

var Lame = (function() {

// The Module object: Our interface to the outside world. We import
// and export values on it, and do the work to get that through
// closure compiler if necessary. There are various ways Module can be used:
// 1. Not defined. We create it here
// 2. A function parameter, function(Module) { ..generated code.. }
// 3. pre-run appended it, var Module = {}; ..generated code..
// 4. External script tag defines var Module.
// We need to do an eval in order to handle the closure compiler
// case, where this code here is minified but Module was defined
// elsewhere (e.g. case 4 above). We also need to check if Module
// already exists (e.g. case 3 above).
// Note that if you want to run closure, and also to use Module
// after the generated code, you will need to define   var Module = {};
// before the code. Then that object will be used in the code, and you
// can continue to use Module afterwards as well.
var Module;
if (!Module) Module = (typeof Module !== 'undefined' ? Module : null) || {};

// Sometimes an existing Module object exists with properties
// meant to overwrite the default module functionality. Here
// we collect those properties and reapply _after_ we configure
// the current environment's defaults to avoid having to be so
// defensive during initialization.
var moduleOverrides = {};
for (var key in Module) {
  if (Module.hasOwnProperty(key)) {
    moduleOverrides[key] = Module[key];
  }
}

// The environment setup code below is customized to use Module.
// *** Environment setup code ***
var ENVIRONMENT_IS_NODE = typeof process === 'object' && typeof require === 'function';
var ENVIRONMENT_IS_WEB = typeof window === 'object';
var ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
var ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;

if (ENVIRONMENT_IS_NODE) {
  // Expose functionality in the same simple way that the shells work
  // Note that we pollute the global namespace here, otherwise we break in node
  if (!Module['print']) Module['print'] = function print(x) {
    process['stdout'].write(x + '\n');
  };
  if (!Module['printErr']) Module['printErr'] = function printErr(x) {
    process['stderr'].write(x + '\n');
  };

  var nodeFS = require('fs');
  var nodePath = require('path');

  Module['read'] = function read(filename, binary) {
    filename = nodePath['normalize'](filename);
    var ret = nodeFS['readFileSync'](filename);
    // The path is absolute if the normalized version is the same as the resolved.
    if (!ret && filename != nodePath['resolve'](filename)) {
      filename = path.join(__dirname, '..', 'src', filename);
      ret = nodeFS['readFileSync'](filename);
    }
    if (ret && !binary) ret = ret.toString();
    return ret;
  };

  Module['readBinary'] = function readBinary(filename) { return Module['read'](filename, true) };

  Module['load'] = function load(f) {
    globalEval(read(f));
  };

  Module['thisProgram'] = process['argv'][1].replace(/\\/g, '/');
  Module['arguments'] = process['argv'].slice(2);

  if (typeof module !== 'undefined') {
    module['exports'] = Module;
  }

  process['on']('uncaughtException', function(ex) {
    // suppress ExitStatus exceptions from showing an error
    if (!(ex instanceof ExitStatus)) {
      throw ex;
    }
  });
}
else if (ENVIRONMENT_IS_SHELL) {
  if (!Module['print']) Module['print'] = print;
  if (typeof printErr != 'undefined') Module['printErr'] = printErr; // not present in v8 or older sm

  if (typeof read != 'undefined') {
    Module['read'] = read;
  } else {
    Module['read'] = function read() { throw 'no read() available (jsc?)' };
  }

  Module['readBinary'] = function readBinary(f) {
    return read(f, 'binary');
  };

  if (typeof scriptArgs != 'undefined') {
    Module['arguments'] = scriptArgs;
  } else if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  this['Module'] = Module;

}
else if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  Module['read'] = function read(url) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, false);
    xhr.send(null);
    return xhr.responseText;
  };

  if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  if (typeof console !== 'undefined') {
    if (!Module['print']) Module['print'] = function print(x) {
      console.log(x);
    };
    if (!Module['printErr']) Module['printErr'] = function printErr(x) {
      console.log(x);
    };
  } else {
    // Probably a worker, and without console.log. We can do very little here...
    var TRY_USE_DUMP = false;
    if (!Module['print']) Module['print'] = (TRY_USE_DUMP && (typeof(dump) !== "undefined") ? (function(x) {
      dump(x);
    }) : (function(x) {
      // self.postMessage(x); // enable this if you want stdout to be sent as messages
    }));
  }

  if (ENVIRONMENT_IS_WEB) {
    window['Module'] = Module;
  } else {
    Module['load'] = importScripts;
  }
}
else {
  // Unreachable because SHELL is dependant on the others
  throw 'Unknown runtime environment. Where are we?';
}

function globalEval(x) {
  eval.call(null, x);
}
if (!Module['load'] == 'undefined' && Module['read']) {
  Module['load'] = function load(f) {
    globalEval(Module['read'](f));
  };
}
if (!Module['print']) {
  Module['print'] = function(){};
}
if (!Module['printErr']) {
  Module['printErr'] = Module['print'];
}
if (!Module['arguments']) {
  Module['arguments'] = [];
}
if (!Module['thisProgram']) {
  Module['thisProgram'] = './this.program';
}

// *** Environment setup code ***

// Closure helpers
Module.print = Module['print'];
Module.printErr = Module['printErr'];

// Callbacks
Module['preRun'] = [];
Module['postRun'] = [];

// Merge back in the overrides
for (var key in moduleOverrides) {
  if (moduleOverrides.hasOwnProperty(key)) {
    Module[key] = moduleOverrides[key];
  }
}



// === Preamble library stuff ===

// Documentation for the public APIs defined in this file must be updated in: 
//    site/source/docs/api_reference/preamble.js.rst
// A prebuilt local version of the documentation is available at: 
//    site/build/text/docs/api_reference/preamble.js.txt
// You can also build docs locally as HTML or other formats in site/
// An online HTML version (which may be of a different version of Emscripten)
//    is up at http://kripken.github.io/emscripten-site/docs/api_reference/preamble.js.html

//========================================
// Runtime code shared with compiler
//========================================

var Runtime = {
  setTempRet0: function (value) {
    tempRet0 = value;
  },
  getTempRet0: function () {
    return tempRet0;
  },
  stackSave: function () {
    return STACKTOP;
  },
  stackRestore: function (stackTop) {
    STACKTOP = stackTop;
  },
  forceAlign: function (target, quantum) {
    quantum = quantum || 4;
    if (quantum == 1) return target;
    if (isNumber(target) && isNumber(quantum)) {
      return Math.ceil(target/quantum)*quantum;
    } else if (isNumber(quantum) && isPowerOfTwo(quantum)) {
      return '(((' +target + ')+' + (quantum-1) + ')&' + -quantum + ')';
    }
    return 'Math.ceil((' + target + ')/' + quantum + ')*' + quantum;
  },
  isNumberType: function (type) {
    return type in Runtime.INT_TYPES || type in Runtime.FLOAT_TYPES;
  },
  isPointerType: function isPointerType(type) {
  return type[type.length-1] == '*';
},
  isStructType: function isStructType(type) {
  if (isPointerType(type)) return false;
  if (isArrayType(type)) return true;
  if (/<?\{ ?[^}]* ?\}>?/.test(type)) return true; // { i32, i8 } etc. - anonymous struct types
  // See comment in isStructPointerType()
  return type[0] == '%';
},
  INT_TYPES: {"i1":0,"i8":0,"i16":0,"i32":0,"i64":0},
  FLOAT_TYPES: {"float":0,"double":0},
  or64: function (x, y) {
    var l = (x | 0) | (y | 0);
    var h = (Math.round(x / 4294967296) | Math.round(y / 4294967296)) * 4294967296;
    return l + h;
  },
  and64: function (x, y) {
    var l = (x | 0) & (y | 0);
    var h = (Math.round(x / 4294967296) & Math.round(y / 4294967296)) * 4294967296;
    return l + h;
  },
  xor64: function (x, y) {
    var l = (x | 0) ^ (y | 0);
    var h = (Math.round(x / 4294967296) ^ Math.round(y / 4294967296)) * 4294967296;
    return l + h;
  },
  getNativeTypeSize: function (type) {
    switch (type) {
      case 'i1': case 'i8': return 1;
      case 'i16': return 2;
      case 'i32': return 4;
      case 'i64': return 8;
      case 'float': return 4;
      case 'double': return 8;
      default: {
        if (type[type.length-1] === '*') {
          return Runtime.QUANTUM_SIZE; // A pointer
        } else if (type[0] === 'i') {
          var bits = parseInt(type.substr(1));
          assert(bits % 8 === 0);
          return bits/8;
        } else {
          return 0;
        }
      }
    }
  },
  getNativeFieldSize: function (type) {
    return Math.max(Runtime.getNativeTypeSize(type), Runtime.QUANTUM_SIZE);
  },
  dedup: function dedup(items, ident) {
  var seen = {};
  if (ident) {
    return items.filter(function(item) {
      if (seen[item[ident]]) return false;
      seen[item[ident]] = true;
      return true;
    });
  } else {
    return items.filter(function(item) {
      if (seen[item]) return false;
      seen[item] = true;
      return true;
    });
  }
},
  set: function set() {
  var args = typeof arguments[0] === 'object' ? arguments[0] : arguments;
  var ret = {};
  for (var i = 0; i < args.length; i++) {
    ret[args[i]] = 0;
  }
  return ret;
},
  STACK_ALIGN: 8,
  getAlignSize: function (type, size, vararg) {
    // we align i64s and doubles on 64-bit boundaries, unlike x86
    if (!vararg && (type == 'i64' || type == 'double')) return 8;
    if (!type) return Math.min(size, 8); // align structures internally to 64 bits
    return Math.min(size || (type ? Runtime.getNativeFieldSize(type) : 0), Runtime.QUANTUM_SIZE);
  },
  calculateStructAlignment: function calculateStructAlignment(type) {
    type.flatSize = 0;
    type.alignSize = 0;
    var diffs = [];
    var prev = -1;
    var index = 0;
    type.flatIndexes = type.fields.map(function(field) {
      index++;
      var size, alignSize;
      if (Runtime.isNumberType(field) || Runtime.isPointerType(field)) {
        size = Runtime.getNativeTypeSize(field); // pack char; char; in structs, also char[X]s.
        alignSize = Runtime.getAlignSize(field, size);
      } else if (Runtime.isStructType(field)) {
        if (field[1] === '0') {
          // this is [0 x something]. When inside another structure like here, it must be at the end,
          // and it adds no size
          // XXX this happens in java-nbody for example... assert(index === type.fields.length, 'zero-length in the middle!');
          size = 0;
          if (Types.types[field]) {
            alignSize = Runtime.getAlignSize(null, Types.types[field].alignSize);
          } else {
            alignSize = type.alignSize || QUANTUM_SIZE;
          }
        } else {
          size = Types.types[field].flatSize;
          alignSize = Runtime.getAlignSize(null, Types.types[field].alignSize);
        }
      } else if (field[0] == 'b') {
        // bN, large number field, like a [N x i8]
        size = field.substr(1)|0;
        alignSize = 1;
      } else if (field[0] === '<') {
        // vector type
        size = alignSize = Types.types[field].flatSize; // fully aligned
      } else if (field[0] === 'i') {
        // illegal integer field, that could not be legalized because it is an internal structure field
        // it is ok to have such fields, if we just use them as markers of field size and nothing more complex
        size = alignSize = parseInt(field.substr(1))/8;
        assert(size % 1 === 0, 'cannot handle non-byte-size field ' + field);
      } else {
        assert(false, 'invalid type for calculateStructAlignment');
      }
      if (type.packed) alignSize = 1;
      type.alignSize = Math.max(type.alignSize, alignSize);
      var curr = Runtime.alignMemory(type.flatSize, alignSize); // if necessary, place this on aligned memory
      type.flatSize = curr + size;
      if (prev >= 0) {
        diffs.push(curr-prev);
      }
      prev = curr;
      return curr;
    });
    if (type.name_ && type.name_[0] === '[') {
      // arrays have 2 elements, so we get the proper difference. then we scale here. that way we avoid
      // allocating a potentially huge array for [999999 x i8] etc.
      type.flatSize = parseInt(type.name_.substr(1))*type.flatSize/2;
    }
    type.flatSize = Runtime.alignMemory(type.flatSize, type.alignSize);
    if (diffs.length == 0) {
      type.flatFactor = type.flatSize;
    } else if (Runtime.dedup(diffs).length == 1) {
      type.flatFactor = diffs[0];
    }
    type.needsFlattening = (type.flatFactor != 1);
    return type.flatIndexes;
  },
  generateStructInfo: function (struct, typeName, offset) {
    var type, alignment;
    if (typeName) {
      offset = offset || 0;
      type = (typeof Types === 'undefined' ? Runtime.typeInfo : Types.types)[typeName];
      if (!type) return null;
      if (type.fields.length != struct.length) {
        printErr('Number of named fields must match the type for ' + typeName + ': possibly duplicate struct names. Cannot return structInfo');
        return null;
      }
      alignment = type.flatIndexes;
    } else {
      var type = { fields: struct.map(function(item) { return item[0] }) };
      alignment = Runtime.calculateStructAlignment(type);
    }
    var ret = {
      __size__: type.flatSize
    };
    if (typeName) {
      struct.forEach(function(item, i) {
        if (typeof item === 'string') {
          ret[item] = alignment[i] + offset;
        } else {
          // embedded struct
          var key;
          for (var k in item) key = k;
          ret[key] = Runtime.generateStructInfo(item[key], type.fields[i], alignment[i]);
        }
      });
    } else {
      struct.forEach(function(item, i) {
        ret[item[1]] = alignment[i];
      });
    }
    return ret;
  },
  dynCall: function (sig, ptr, args) {
    if (args && args.length) {
      if (!args.splice) args = Array.prototype.slice.call(args);
      args.splice(0, 0, ptr);
      return Module['dynCall_' + sig].apply(null, args);
    } else {
      return Module['dynCall_' + sig].call(null, ptr);
    }
  },
  functionPointers: [],
  addFunction: function (func) {
    for (var i = 0; i < Runtime.functionPointers.length; i++) {
      if (!Runtime.functionPointers[i]) {
        Runtime.functionPointers[i] = func;
        return 2*(1 + i);
      }
    }
    throw 'Finished up all reserved function pointers. Use a higher value for RESERVED_FUNCTION_POINTERS.';
  },
  removeFunction: function (index) {
    Runtime.functionPointers[(index-2)/2] = null;
  },
  getAsmConst: function (code, numArgs) {
    // code is a constant string on the heap, so we can cache these
    if (!Runtime.asmConstCache) Runtime.asmConstCache = {};
    var func = Runtime.asmConstCache[code];
    if (func) return func;
    var args = [];
    for (var i = 0; i < numArgs; i++) {
      args.push(String.fromCharCode(36) + i); // $0, $1 etc
    }
    var source = Pointer_stringify(code);
    if (source[0] === '"') {
      // tolerate EM_ASM("..code..") even though EM_ASM(..code..) is correct
      if (source.indexOf('"', 1) === source.length-1) {
        source = source.substr(1, source.length-2);
      } else {
        // something invalid happened, e.g. EM_ASM("..code($0)..", input)
        abort('invalid EM_ASM input |' + source + '|. Please use EM_ASM(..code..) (no quotes) or EM_ASM({ ..code($0).. }, input) (to input values)');
      }
    }
    try {
      // Module is the only 'upvar', which we provide directly. We also provide FS for legacy support.
      var evalled = eval('(function(Module, FS) { return function(' + args.join(',') + '){ ' + source + ' } })')(Module, typeof FS !== 'undefined' ? FS : null);
    } catch(e) {
      Module.printErr('error in executing inline EM_ASM code: ' + e + ' on: \n\n' + source + '\n\nwith args |' + args + '| (make sure to use the right one out of EM_ASM, EM_ASM_ARGS, etc.)');
      throw e;
    }
    return Runtime.asmConstCache[code] = evalled;
  },
  warnOnce: function (text) {
    if (!Runtime.warnOnce.shown) Runtime.warnOnce.shown = {};
    if (!Runtime.warnOnce.shown[text]) {
      Runtime.warnOnce.shown[text] = 1;
      Module.printErr(text);
    }
  },
  funcWrappers: {},
  getFuncWrapper: function (func, sig) {
    assert(sig);
    if (!Runtime.funcWrappers[sig]) {
      Runtime.funcWrappers[sig] = {};
    }
    var sigCache = Runtime.funcWrappers[sig];
    if (!sigCache[func]) {
      sigCache[func] = function dynCall_wrapper() {
        return Runtime.dynCall(sig, func, arguments);
      };
    }
    return sigCache[func];
  },
  UTF8Processor: function () {
    var buffer = [];
    var needed = 0;
    this.processCChar = function (code) {
      code = code & 0xFF;

      if (buffer.length == 0) {
        if ((code & 0x80) == 0x00) {        // 0xxxxxxx
          return String.fromCharCode(code);
        }
        buffer.push(code);
        if ((code & 0xE0) == 0xC0) {        // 110xxxxx
          needed = 1;
        } else if ((code & 0xF0) == 0xE0) { // 1110xxxx
          needed = 2;
        } else {                            // 11110xxx
          needed = 3;
        }
        return '';
      }

      if (needed) {
        buffer.push(code);
        needed--;
        if (needed > 0) return '';
      }

      var c1 = buffer[0];
      var c2 = buffer[1];
      var c3 = buffer[2];
      var c4 = buffer[3];
      var ret;
      if (buffer.length == 2) {
        ret = String.fromCharCode(((c1 & 0x1F) << 6)  | (c2 & 0x3F));
      } else if (buffer.length == 3) {
        ret = String.fromCharCode(((c1 & 0x0F) << 12) | ((c2 & 0x3F) << 6)  | (c3 & 0x3F));
      } else {
        // http://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae
        var codePoint = ((c1 & 0x07) << 18) | ((c2 & 0x3F) << 12) |
                        ((c3 & 0x3F) << 6)  | (c4 & 0x3F);
        ret = String.fromCharCode(
          (((codePoint - 0x10000) / 0x400)|0) + 0xD800,
          (codePoint - 0x10000) % 0x400 + 0xDC00);
      }
      buffer.length = 0;
      return ret;
    }
    this.processJSString = function processJSString(string) {
      /* TODO: use TextEncoder when present,
        var encoder = new TextEncoder();
        encoder['encoding'] = "utf-8";
        var utf8Array = encoder['encode'](aMsg.data);
      */
      string = unescape(encodeURIComponent(string));
      var ret = [];
      for (var i = 0; i < string.length; i++) {
        ret.push(string.charCodeAt(i));
      }
      return ret;
    }
  },
  getCompilerSetting: function (name) {
    throw 'You must build with -s RETAIN_COMPILER_SETTINGS=1 for Runtime.getCompilerSetting or emscripten_get_compiler_setting to work';
  },
  stackAlloc: function (size) { var ret = STACKTOP;STACKTOP = (STACKTOP + size)|0;STACKTOP = (((STACKTOP)+7)&-8); return ret; },
  staticAlloc: function (size) { var ret = STATICTOP;STATICTOP = (STATICTOP + size)|0;STATICTOP = (((STATICTOP)+7)&-8); return ret; },
  dynamicAlloc: function (size) { var ret = DYNAMICTOP;DYNAMICTOP = (DYNAMICTOP + size)|0;DYNAMICTOP = (((DYNAMICTOP)+7)&-8); if (DYNAMICTOP >= TOTAL_MEMORY) enlargeMemory();; return ret; },
  alignMemory: function (size,quantum) { var ret = size = Math.ceil((size)/(quantum ? quantum : 8))*(quantum ? quantum : 8); return ret; },
  makeBigInt: function (low,high,unsigned) { var ret = (unsigned ? ((+((low>>>0)))+((+((high>>>0)))*4294967296.0)) : ((+((low>>>0)))+((+((high|0)))*4294967296.0))); return ret; },
  GLOBAL_BASE: 8,
  QUANTUM_SIZE: 4,
  __dummy__: 0
}


Module['Runtime'] = Runtime;









//========================================
// Runtime essentials
//========================================

var __THREW__ = 0; // Used in checking for thrown exceptions.

var ABORT = false; // whether we are quitting the application. no code should run after this. set in exit() and abort()
var EXITSTATUS = 0;

var undef = 0;
// tempInt is used for 32-bit signed values or smaller. tempBigInt is used
// for 32-bit unsigned values or more than 32 bits. TODO: audit all uses of tempInt
var tempValue, tempInt, tempBigInt, tempInt2, tempBigInt2, tempPair, tempBigIntI, tempBigIntR, tempBigIntS, tempBigIntP, tempBigIntD, tempDouble, tempFloat;
var tempI64, tempI64b;
var tempRet0, tempRet1, tempRet2, tempRet3, tempRet4, tempRet5, tempRet6, tempRet7, tempRet8, tempRet9;

function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text);
  }
}

var globalScope = this;

// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
function getCFunc(ident) {
  var func = Module['_' + ident]; // closure exported function
  if (!func) {
    try {
      func = eval('_' + ident); // explicit lookup
    } catch(e) {}
  }
  assert(func, 'Cannot call unknown function ' + ident + ' (perhaps LLVM optimizations or closure removed it?)');
  return func;
}

var cwrap, ccall;
(function(){
  var stack = 0;
  var JSfuncs = {
    'stackSave' : function() {
      stack = Runtime.stackSave();
    },
    'stackRestore' : function() {
      Runtime.stackRestore(stack);
    },
    // type conversion from js to c
    'arrayToC' : function(arr) {
      var ret = Runtime.stackAlloc(arr.length);
      writeArrayToMemory(arr, ret);
      return ret;
    },
    'stringToC' : function(str) {
      var ret = 0;
      if (str !== null && str !== undefined && str !== 0) { // null string
        ret = Runtime.stackAlloc(str.length + 1); // +1 for the trailing '\0'
        writeStringToMemory(str, ret);
      }
      return ret;
    }
  };
  // For fast lookup of conversion functions
  var toC = {'string' : JSfuncs['stringToC'], 'array' : JSfuncs['arrayToC']};

  // C calling interface. 
  ccall = function ccallFunc(ident, returnType, argTypes, args) {
    var func = getCFunc(ident);
    var cArgs = [];
    if (args) {
      for (var i = 0; i < args.length; i++) {
        var converter = toC[argTypes[i]];
        if (converter) {
          if (stack === 0) stack = Runtime.stackSave();
          cArgs[i] = converter(args[i]);
        } else {
          cArgs[i] = args[i];
        }
      }
    }
    var ret = func.apply(null, cArgs);
    if (returnType === 'string') ret = Pointer_stringify(ret);
    if (stack !== 0) JSfuncs['stackRestore']();
    return ret;
  }

  var sourceRegex = /^function\s*\(([^)]*)\)\s*{\s*([^*]*?)[\s;]*(?:return\s*(.*?)[;\s]*)?}$/;
  function parseJSFunc(jsfunc) {
    // Match the body and the return value of a javascript function source
    var parsed = jsfunc.toString().match(sourceRegex).slice(1);
    return {arguments : parsed[0], body : parsed[1], returnValue: parsed[2]}
  }
  var JSsource = {};
  for (var fun in JSfuncs) {
    if (JSfuncs.hasOwnProperty(fun)) {
      // Elements of toCsource are arrays of three items:
      // the code, and the return value
      JSsource[fun] = parseJSFunc(JSfuncs[fun]);
    }
  }

  
  cwrap = function cwrap(ident, returnType, argTypes) {
    argTypes = argTypes || [];
    var cfunc = getCFunc(ident);
    // When the function takes numbers and returns a number, we can just return
    // the original function
    var numericArgs = argTypes.every(function(type){ return type === 'number'});
    var numericRet = (returnType !== 'string');
    if ( numericRet && numericArgs) {
      return cfunc;
    }
    // Creation of the arguments list (["$1","$2",...,"$nargs"])
    var argNames = argTypes.map(function(x,i){return '$'+i});
    var funcstr = "(function(" + argNames.join(',') + ") {";
    var nargs = argTypes.length;
    if (!numericArgs) {
      // Generate the code needed to convert the arguments from javascript
      // values to pointers
      funcstr += JSsource['stackSave'].body + ';';
      for (var i = 0; i < nargs; i++) {
        var arg = argNames[i], type = argTypes[i];
        if (type === 'number') continue;
        var convertCode = JSsource[type + 'ToC']; // [code, return]
        funcstr += 'var ' + convertCode.arguments + ' = ' + arg + ';';
        funcstr += convertCode.body + ';';
        funcstr += arg + '=' + convertCode.returnValue + ';';
      }
    }

    // When the code is compressed, the name of cfunc is not literally 'cfunc' anymore
    var cfuncname = parseJSFunc(function(){return cfunc}).returnValue;
    // Call the function
    funcstr += 'var ret = ' + cfuncname + '(' + argNames.join(',') + ');';
    if (!numericRet) { // Return type can only by 'string' or 'number'
      // Convert the result to a string
      var strgfy = parseJSFunc(function(){return Pointer_stringify}).returnValue;
      funcstr += 'ret = ' + strgfy + '(ret);';
    }
    if (!numericArgs) {
      // If we had a stack, restore it
      funcstr += JSsource['stackRestore'].body + ';';
    }
    funcstr += 'return ret})';
    return eval(funcstr);
  };
})();
Module["cwrap"] = cwrap;
Module["ccall"] = ccall;


function setValue(ptr, value, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': HEAP8[((ptr)>>0)]=value; break;
      case 'i8': HEAP8[((ptr)>>0)]=value; break;
      case 'i16': HEAP16[((ptr)>>1)]=value; break;
      case 'i32': HEAP32[((ptr)>>2)]=value; break;
      case 'i64': (tempI64 = [value>>>0,(tempDouble=value,(+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[((ptr)>>2)]=tempI64[0],HEAP32[(((ptr)+(4))>>2)]=tempI64[1]); break;
      case 'float': HEAPF32[((ptr)>>2)]=value; break;
      case 'double': HEAPF64[((ptr)>>3)]=value; break;
      default: abort('invalid type for setValue: ' + type);
    }
}
Module['setValue'] = setValue;


function getValue(ptr, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': return HEAP8[((ptr)>>0)];
      case 'i8': return HEAP8[((ptr)>>0)];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': return HEAP32[((ptr)>>2)];
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return HEAPF64[((ptr)>>3)];
      default: abort('invalid type for setValue: ' + type);
    }
  return null;
}
Module['getValue'] = getValue;

var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call
var ALLOC_STATIC = 2; // Cannot be freed
var ALLOC_DYNAMIC = 3; // Cannot be freed except through sbrk
var ALLOC_NONE = 4; // Do not allocate
Module['ALLOC_NORMAL'] = ALLOC_NORMAL;
Module['ALLOC_STACK'] = ALLOC_STACK;
Module['ALLOC_STATIC'] = ALLOC_STATIC;
Module['ALLOC_DYNAMIC'] = ALLOC_DYNAMIC;
Module['ALLOC_NONE'] = ALLOC_NONE;

// allocate(): This is for internal use. You can use it yourself as well, but the interface
//             is a little tricky (see docs right below). The reason is that it is optimized
//             for multiple syntaxes to save space in generated code. So you should
//             normally not use allocate(), and instead allocate memory using _malloc(),
//             initialize it with setValue(), and so forth.
// @slab: An array of data, or a number. If a number, then the size of the block to allocate,
//        in *bytes* (note that this is sometimes confusing: the next parameter does not
//        affect this!)
// @types: Either an array of types, one for each byte (or 0 if no type at that position),
//         or a single type which is used for the entire block. This only matters if there
//         is initial data - if @slab is a number, then this does not matter at all and is
//         ignored.
// @allocator: How to allocate memory, see ALLOC_*
function allocate(slab, types, allocator, ptr) {
  var zeroinit, size;
  if (typeof slab === 'number') {
    zeroinit = true;
    size = slab;
  } else {
    zeroinit = false;
    size = slab.length;
  }

  var singleType = typeof types === 'string' ? types : null;

  var ret;
  if (allocator == ALLOC_NONE) {
    ret = ptr;
  } else {
    ret = [_malloc, Runtime.stackAlloc, Runtime.staticAlloc, Runtime.dynamicAlloc][allocator === undefined ? ALLOC_STATIC : allocator](Math.max(size, singleType ? 1 : types.length));
  }

  if (zeroinit) {
    var ptr = ret, stop;
    assert((ret & 3) == 0);
    stop = ret + (size & ~3);
    for (; ptr < stop; ptr += 4) {
      HEAP32[((ptr)>>2)]=0;
    }
    stop = ret + size;
    while (ptr < stop) {
      HEAP8[((ptr++)>>0)]=0;
    }
    return ret;
  }

  if (singleType === 'i8') {
    if (slab.subarray || slab.slice) {
      HEAPU8.set(slab, ret);
    } else {
      HEAPU8.set(new Uint8Array(slab), ret);
    }
    return ret;
  }

  var i = 0, type, typeSize, previousType;
  while (i < size) {
    var curr = slab[i];

    if (typeof curr === 'function') {
      curr = Runtime.getFunctionIndex(curr);
    }

    type = singleType || types[i];
    if (type === 0) {
      i++;
      continue;
    }

    if (type == 'i64') type = 'i32'; // special case: we have one i32 here, and one i32 later

    setValue(ret+i, curr, type);

    // no need to look up size unless type changes, so cache it
    if (previousType !== type) {
      typeSize = Runtime.getNativeTypeSize(type);
      previousType = type;
    }
    i += typeSize;
  }

  return ret;
}
Module['allocate'] = allocate;

function Pointer_stringify(ptr, /* optional */ length) {
  // TODO: use TextDecoder
  // Find the length, and check for UTF while doing so
  var hasUtf = false;
  var t;
  var i = 0;
  while (1) {
    t = HEAPU8[(((ptr)+(i))>>0)];
    if (t >= 128) hasUtf = true;
    else if (t == 0 && !length) break;
    i++;
    if (length && i == length) break;
  }
  if (!length) length = i;

  var ret = '';

  if (!hasUtf) {
    var MAX_CHUNK = 1024; // split up into chunks, because .apply on a huge string can overflow the stack
    var curr;
    while (length > 0) {
      curr = String.fromCharCode.apply(String, HEAPU8.subarray(ptr, ptr + Math.min(length, MAX_CHUNK)));
      ret = ret ? ret + curr : curr;
      ptr += MAX_CHUNK;
      length -= MAX_CHUNK;
    }
    return ret;
  }

  var utf8 = new Runtime.UTF8Processor();
  for (i = 0; i < length; i++) {
    t = HEAPU8[(((ptr)+(i))>>0)];
    ret += utf8.processCChar(t);
  }
  return ret;
}
Module['Pointer_stringify'] = Pointer_stringify;

function UTF16ToString(ptr) {
  var i = 0;

  var str = '';
  while (1) {
    var codeUnit = HEAP16[(((ptr)+(i*2))>>1)];
    if (codeUnit == 0)
      return str;
    ++i;
    // fromCharCode constructs a character from a UTF-16 code unit, so we can pass the UTF16 string right through.
    str += String.fromCharCode(codeUnit);
  }
}
Module['UTF16ToString'] = UTF16ToString;


function stringToUTF16(str, outPtr) {
  for(var i = 0; i < str.length; ++i) {
    // charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    HEAP16[(((outPtr)+(i*2))>>1)]=codeUnit;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP16[(((outPtr)+(str.length*2))>>1)]=0;
}
Module['stringToUTF16'] = stringToUTF16;


function UTF32ToString(ptr) {
  var i = 0;

  var str = '';
  while (1) {
    var utf32 = HEAP32[(((ptr)+(i*4))>>2)];
    if (utf32 == 0)
      return str;
    ++i;
    // Gotcha: fromCharCode constructs a character from a UTF-16 encoded code (pair), not from a Unicode code point! So encode the code point to UTF-16 for constructing.
    if (utf32 >= 0x10000) {
      var ch = utf32 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    } else {
      str += String.fromCharCode(utf32);
    }
  }
}
Module['UTF32ToString'] = UTF32ToString;


function stringToUTF32(str, outPtr) {
  var iChar = 0;
  for(var iCodeUnit = 0; iCodeUnit < str.length; ++iCodeUnit) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    var codeUnit = str.charCodeAt(iCodeUnit); // possibly a lead surrogate
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) {
      var trailSurrogate = str.charCodeAt(++iCodeUnit);
      codeUnit = 0x10000 + ((codeUnit & 0x3FF) << 10) | (trailSurrogate & 0x3FF);
    }
    HEAP32[(((outPtr)+(iChar*4))>>2)]=codeUnit;
    ++iChar;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP32[(((outPtr)+(iChar*4))>>2)]=0;
}
Module['stringToUTF32'] = stringToUTF32;

function demangle(func) {
  var hasLibcxxabi = !!Module['___cxa_demangle'];
  if (hasLibcxxabi) {
    try {
      var buf = _malloc(func.length);
      writeStringToMemory(func.substr(1), buf);
      var status = _malloc(4);
      var ret = Module['___cxa_demangle'](buf, 0, 0, status);
      if (getValue(status, 'i32') === 0 && ret) {
        return Pointer_stringify(ret);
      }
      // otherwise, libcxxabi failed, we can try ours which may return a partial result
    } catch(e) {
      // failure when using libcxxabi, we can try ours which may return a partial result
    } finally {
      if (buf) _free(buf);
      if (status) _free(status);
      if (ret) _free(ret);
    }
  }
  var i = 3;
  // params, etc.
  var basicTypes = {
    'v': 'void',
    'b': 'bool',
    'c': 'char',
    's': 'short',
    'i': 'int',
    'l': 'long',
    'f': 'float',
    'd': 'double',
    'w': 'wchar_t',
    'a': 'signed char',
    'h': 'unsigned char',
    't': 'unsigned short',
    'j': 'unsigned int',
    'm': 'unsigned long',
    'x': 'long long',
    'y': 'unsigned long long',
    'z': '...'
  };
  var subs = [];
  var first = true;
  function dump(x) {
    //return;
    if (x) Module.print(x);
    Module.print(func);
    var pre = '';
    for (var a = 0; a < i; a++) pre += ' ';
    Module.print (pre + '^');
  }
  function parseNested() {
    i++;
    if (func[i] === 'K') i++; // ignore const
    var parts = [];
    while (func[i] !== 'E') {
      if (func[i] === 'S') { // substitution
        i++;
        var next = func.indexOf('_', i);
        var num = func.substring(i, next) || 0;
        parts.push(subs[num] || '?');
        i = next+1;
        continue;
      }
      if (func[i] === 'C') { // constructor
        parts.push(parts[parts.length-1]);
        i += 2;
        continue;
      }
      var size = parseInt(func.substr(i));
      var pre = size.toString().length;
      if (!size || !pre) { i--; break; } // counter i++ below us
      var curr = func.substr(i + pre, size);
      parts.push(curr);
      subs.push(curr);
      i += pre + size;
    }
    i++; // skip E
    return parts;
  }
  function parse(rawList, limit, allowVoid) { // main parser
    limit = limit || Infinity;
    var ret = '', list = [];
    function flushList() {
      return '(' + list.join(', ') + ')';
    }
    var name;
    if (func[i] === 'N') {
      // namespaced N-E
      name = parseNested().join('::');
      limit--;
      if (limit === 0) return rawList ? [name] : name;
    } else {
      // not namespaced
      if (func[i] === 'K' || (first && func[i] === 'L')) i++; // ignore const and first 'L'
      var size = parseInt(func.substr(i));
      if (size) {
        var pre = size.toString().length;
        name = func.substr(i + pre, size);
        i += pre + size;
      }
    }
    first = false;
    if (func[i] === 'I') {
      i++;
      var iList = parse(true);
      var iRet = parse(true, 1, true);
      ret += iRet[0] + ' ' + name + '<' + iList.join(', ') + '>';
    } else {
      ret = name;
    }
    paramLoop: while (i < func.length && limit-- > 0) {
      //dump('paramLoop');
      var c = func[i++];
      if (c in basicTypes) {
        list.push(basicTypes[c]);
      } else {
        switch (c) {
          case 'P': list.push(parse(true, 1, true)[0] + '*'); break; // pointer
          case 'R': list.push(parse(true, 1, true)[0] + '&'); break; // reference
          case 'L': { // literal
            i++; // skip basic type
            var end = func.indexOf('E', i);
            var size = end - i;
            list.push(func.substr(i, size));
            i += size + 2; // size + 'EE'
            break;
          }
          case 'A': { // array
            var size = parseInt(func.substr(i));
            i += size.toString().length;
            if (func[i] !== '_') throw '?';
            i++; // skip _
            list.push(parse(true, 1, true)[0] + ' [' + size + ']');
            break;
          }
          case 'E': break paramLoop;
          default: ret += '?' + c; break paramLoop;
        }
      }
    }
    if (!allowVoid && list.length === 1 && list[0] === 'void') list = []; // avoid (void)
    if (rawList) {
      if (ret) {
        list.push(ret + '?');
      }
      return list;
    } else {
      return ret + flushList();
    }
  }
  var final = func;
  try {
    // Special-case the entry point, since its name differs from other name mangling.
    if (func == 'Object._main' || func == '_main') {
      return 'main()';
    }
    if (typeof func === 'number') func = Pointer_stringify(func);
    if (func[0] !== '_') return func;
    if (func[1] !== '_') return func; // C function
    if (func[2] !== 'Z') return func;
    switch (func[3]) {
      case 'n': return 'operator new()';
      case 'd': return 'operator delete()';
    }
    final = parse();
  } catch(e) {
    final += '?';
  }
  if (final.indexOf('?') >= 0 && !hasLibcxxabi) {
    Runtime.warnOnce('warning: a problem occurred in builtin C++ name demangling; build with  -s DEMANGLE_SUPPORT=1  to link in libcxxabi demangling');
  }
  return final;
}

function demangleAll(text) {
  return text.replace(/__Z[\w\d_]+/g, function(x) { var y = demangle(x); return x === y ? x : (x + ' [' + y + ']') });
}

function jsStackTrace() {
  var err = new Error();
  if (!err.stack) {
    // IE10+ special cases: It does have callstack info, but it is only populated if an Error object is thrown,
    // so try that as a special-case.
    try {
      throw new Error(0);
    } catch(e) {
      err = e;
    }
    if (!err.stack) {
      return '(no stack trace available)';
    }
  }
  return err.stack.toString();
}

function stackTrace() {
  return demangleAll(jsStackTrace());
}
Module['stackTrace'] = stackTrace;

// Memory management

var PAGE_SIZE = 4096;
function alignMemoryPage(x) {
  return (x+4095)&-4096;
}

var HEAP;
var HEAP8, HEAPU8, HEAP16, HEAPU16, HEAP32, HEAPU32, HEAPF32, HEAPF64;

var STATIC_BASE = 0, STATICTOP = 0, staticSealed = false; // static area
var STACK_BASE = 0, STACKTOP = 0, STACK_MAX = 0; // stack area
var DYNAMIC_BASE = 0, DYNAMICTOP = 0; // dynamic area handled by sbrk

function enlargeMemory() {
  abort('Cannot enlarge memory arrays. Either (1) compile with -s TOTAL_MEMORY=X with X higher than the current value ' + TOTAL_MEMORY + ', (2) compile with ALLOW_MEMORY_GROWTH which adjusts the size at runtime but prevents some optimizations, or (3) set Module.TOTAL_MEMORY before the program runs.');
}

var TOTAL_STACK = Module['TOTAL_STACK'] || 5242880;
var TOTAL_MEMORY = Module['TOTAL_MEMORY'] || 16777216;
var FAST_MEMORY = Module['FAST_MEMORY'] || 2097152;

var totalMemory = 64*1024;
while (totalMemory < TOTAL_MEMORY || totalMemory < 2*TOTAL_STACK) {
  if (totalMemory < 16*1024*1024) {
    totalMemory *= 2;
  } else {
    totalMemory += 16*1024*1024
  }
}
if (totalMemory !== TOTAL_MEMORY) {
  Module.printErr('increasing TOTAL_MEMORY to ' + totalMemory + ' to be more reasonable');
  TOTAL_MEMORY = totalMemory;
}

// Initialize the runtime's memory
// check for full engine support (use string 'subarray' to avoid closure compiler confusion)
assert(typeof Int32Array !== 'undefined' && typeof Float64Array !== 'undefined' && !!(new Int32Array(1)['subarray']) && !!(new Int32Array(1)['set']),
       'JS engine does not provide full typed array support');

var buffer = new ArrayBuffer(TOTAL_MEMORY);
HEAP8 = new Int8Array(buffer);
HEAP16 = new Int16Array(buffer);
HEAP32 = new Int32Array(buffer);
HEAPU8 = new Uint8Array(buffer);
HEAPU16 = new Uint16Array(buffer);
HEAPU32 = new Uint32Array(buffer);
HEAPF32 = new Float32Array(buffer);
HEAPF64 = new Float64Array(buffer);

// Endianness check (note: assumes compiler arch was little-endian)
HEAP32[0] = 255;
assert(HEAPU8[0] === 255 && HEAPU8[3] === 0, 'Typed arrays 2 must be run on a little-endian system');

Module['HEAP'] = HEAP;
Module['HEAP8'] = HEAP8;
Module['HEAP16'] = HEAP16;
Module['HEAP32'] = HEAP32;
Module['HEAPU8'] = HEAPU8;
Module['HEAPU16'] = HEAPU16;
Module['HEAPU32'] = HEAPU32;
Module['HEAPF32'] = HEAPF32;
Module['HEAPF64'] = HEAPF64;

function callRuntimeCallbacks(callbacks) {
  while(callbacks.length > 0) {
    var callback = callbacks.shift();
    if (typeof callback == 'function') {
      callback();
      continue;
    }
    var func = callback.func;
    if (typeof func === 'number') {
      if (callback.arg === undefined) {
        Runtime.dynCall('v', func);
      } else {
        Runtime.dynCall('vi', func, [callback.arg]);
      }
    } else {
      func(callback.arg === undefined ? null : callback.arg);
    }
  }
}

var __ATPRERUN__  = []; // functions called before the runtime is initialized
var __ATINIT__    = []; // functions called during startup
var __ATMAIN__    = []; // functions called when main() is to be run
var __ATEXIT__    = []; // functions called during shutdown
var __ATPOSTRUN__ = []; // functions called after the runtime has exited

var runtimeInitialized = false;
var runtimeExited = false;

function preRun() {
  // compatibility - merge in anything from Module['preRun'] at this time
  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    while (Module['preRun'].length) {
      addOnPreRun(Module['preRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPRERUN__);
}

function ensureInitRuntime() {
  if (runtimeInitialized) return;
  runtimeInitialized = true;
  callRuntimeCallbacks(__ATINIT__);
}

function preMain() {
  callRuntimeCallbacks(__ATMAIN__);
}

function exitRuntime() {
  callRuntimeCallbacks(__ATEXIT__);
  runtimeExited = true;
}

function postRun() {
  // compatibility - merge in anything from Module['postRun'] at this time
  if (Module['postRun']) {
    if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
    while (Module['postRun'].length) {
      addOnPostRun(Module['postRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPOSTRUN__);
}

function addOnPreRun(cb) {
  __ATPRERUN__.unshift(cb);
}
Module['addOnPreRun'] = Module.addOnPreRun = addOnPreRun;

function addOnInit(cb) {
  __ATINIT__.unshift(cb);
}
Module['addOnInit'] = Module.addOnInit = addOnInit;

function addOnPreMain(cb) {
  __ATMAIN__.unshift(cb);
}
Module['addOnPreMain'] = Module.addOnPreMain = addOnPreMain;

function addOnExit(cb) {
  __ATEXIT__.unshift(cb);
}
Module['addOnExit'] = Module.addOnExit = addOnExit;

function addOnPostRun(cb) {
  __ATPOSTRUN__.unshift(cb);
}
Module['addOnPostRun'] = Module.addOnPostRun = addOnPostRun;

// Tools


function intArrayFromString(stringy, dontAddNull, length /* optional */) {
  var ret = (new Runtime.UTF8Processor()).processJSString(stringy);
  if (length) {
    ret.length = length;
  }
  if (!dontAddNull) {
    ret.push(0);
  }
  return ret;
}
Module['intArrayFromString'] = intArrayFromString;

function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}
Module['intArrayToString'] = intArrayToString;

function writeStringToMemory(string, buffer, dontAddNull) {
  var array = intArrayFromString(string, dontAddNull);
  var i = 0;
  while (i < array.length) {
    var chr = array[i];
    HEAP8[(((buffer)+(i))>>0)]=chr;
    i = i + 1;
  }
}
Module['writeStringToMemory'] = writeStringToMemory;

function writeArrayToMemory(array, buffer) {
  for (var i = 0; i < array.length; i++) {
    HEAP8[(((buffer)+(i))>>0)]=array[i];
  }
}
Module['writeArrayToMemory'] = writeArrayToMemory;

function writeAsciiToMemory(str, buffer, dontAddNull) {
  for (var i = 0; i < str.length; i++) {
    HEAP8[(((buffer)+(i))>>0)]=str.charCodeAt(i);
  }
  if (!dontAddNull) HEAP8[(((buffer)+(str.length))>>0)]=0;
}
Module['writeAsciiToMemory'] = writeAsciiToMemory;

function unSign(value, bits, ignore) {
  if (value >= 0) {
    return value;
  }
  return bits <= 32 ? 2*Math.abs(1 << (bits-1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts
                    : Math.pow(2, bits)         + value;
}
function reSign(value, bits, ignore) {
  if (value <= 0) {
    return value;
  }
  var half = bits <= 32 ? Math.abs(1 << (bits-1)) // abs is needed if bits == 32
                        : Math.pow(2, bits-1);
  if (value >= half && (bits <= 32 || value > half)) { // for huge values, we can hit the precision limit and always get true here. so don't do that
                                                       // but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors
                                                       // TODO: In i64 mode 1, resign the two parts separately and safely
    value = -2*half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts
  }
  return value;
}

// check for imul support, and also for correctness ( https://bugs.webkit.org/show_bug.cgi?id=126345 )
if (!Math['imul'] || Math['imul'](0xffffffff, 5) !== -5) Math['imul'] = function imul(a, b) {
  var ah  = a >>> 16;
  var al = a & 0xffff;
  var bh  = b >>> 16;
  var bl = b & 0xffff;
  return (al*bl + ((ah*bl + al*bh) << 16))|0;
};
Math.imul = Math['imul'];


var Math_abs = Math.abs;
var Math_cos = Math.cos;
var Math_sin = Math.sin;
var Math_tan = Math.tan;
var Math_acos = Math.acos;
var Math_asin = Math.asin;
var Math_atan = Math.atan;
var Math_atan2 = Math.atan2;
var Math_exp = Math.exp;
var Math_log = Math.log;
var Math_sqrt = Math.sqrt;
var Math_ceil = Math.ceil;
var Math_floor = Math.floor;
var Math_pow = Math.pow;
var Math_imul = Math.imul;
var Math_fround = Math.fround;
var Math_min = Math.min;

// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// PRE_RUN_ADDITIONS (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyWatcher = null;
var dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled

function addRunDependency(id) {
  runDependencies++;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
}
Module['addRunDependency'] = addRunDependency;
function removeRunDependency(id) {
  runDependencies--;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    }
    if (dependenciesFulfilled) {
      var callback = dependenciesFulfilled;
      dependenciesFulfilled = null;
      callback(); // can add another dependenciesFulfilled
    }
  }
}
Module['removeRunDependency'] = removeRunDependency;

Module["preloadedImages"] = {}; // maps url to image data
Module["preloadedAudios"] = {}; // maps url to audio data


var memoryInitializer = null;

// === Body ===





STATIC_BASE = 8;

STATICTOP = STATIC_BASE + Runtime.alignMemory(103595);
  /* global initializers */ __ATINIT__.push();
  

/* memory initializer */ allocate([115,116,114,97,110,103,101,32,101,114,114,111,114,32,102,108,117,115,104,105,110,103,32,98,117,102,102,101,114,32,46,46,46,32,10,0,0,0,0,0,73,110,116,101,114,110,97,108,32,98,117,102,102,101,114,32,105,110,99,111,110,115,105,115,116,101,110,99,121,46,32,102,108,117,115,104,98,105,116,115,32,60,62,32,82,101,115,118,83,105,122,101,0,0,0,0,98,105,116,32,114,101,115,101,114,118,111,105,114,32,101,114,114,111,114,58,32,10,108,51,95,115,105,100,101,45,62,109,97,105,110,95,100,97,116,97,95,98,101,103,105,110,58,32,37,105,32,10,82,101,115,118,111,105,114,32,115,105,122,101,58,32,32,32,32,32,32,32,32,32,32,32,32,32,37,105,32,10,114,101,115,118,32,100,114,97,105,110,32,40,112,111,115,116,41,32,32,32,32,32,32,32,32,32,37,105,32,10,114,101,115,118,32,100,114,97,105,110,32,40,112,114,101,41,32,32,32,32,32,32,32,32,32,32,37,105,32,10,104,101,97,100,101,114,32,97,110,100,32,115,105,100,101,105,110,102,111,58,32,32,32,32,32,32,37,105,32,10,100,97,116,97,32,98,105,116,115,58,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,37,105,32,10,116,111,116,97,108,32,98,105,116,115,58,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,37,105,32,40,114,101,109,97,105,110,100,101,114,58,32,37,105,41,32,10,98,105,116,115,112,101,114,102,114,97,109,101,58,32,32,32,32,32,32,32,32,32,32,32,32,32,37,105,32,10,0,0,84,104,105,115,32,105,115,32,97,32,102,97,116,97,108,32,101,114,114,111,114,46,32,32,73,116,32,104,97,115,32,115,101,118,101,114,97,108,32,112,111,115,115,105,98,108,101,32,99,97,117,115,101,115,58,0,57,48,37,37,32,32,76,65,77,69,32,99,111,109,112,105,108,101,100,32,119,105,116,104,32,98,117,103,103,121,32,118,101,114,115,105,111,110,32,111,102,32,103,99,99,32,117,115,105,110,103,32,97,100,118,97,110,99,101,100,32,111,112,116,105,109,105,122,97,116,105,111,110,115,0,0,0,0,0,0,32,57,37,37,32,32,89,111,117,114,32,115,121,115,116,101,109,32,105,115,32,111,118,101,114,99,108,111,99,107,101,100,0,0,0,0,0,0,0,0,32,49,37,37,32,32,98,117,103,32,105,110,32,76,65,77,69,32,101,110,99,111,100,105,110,103,32,108,105,98,114,97,114,121,0,0,0,0,0,0,69,114,114,111,114,58,32,77,65,88,95,72,69,65,68,69,82,95,66,85,70,32,116,111,111,32,115,109,97,108,108,32,105,110,32,98,105,116,115,116,114,101,97,109,46,99,32,10,0,0,0,0,0,0,0,0,0,0,0,63,0,0,0,63,84,224,212,189,89,191,65,190,248,108,93,190,47,168,31,190,254,195,51,36,70,124,111,62,48,42,1,63,72,191,65,63,70,124,111,63,0,0,0,0,0,128,64,192,32,160,96,224,16,144,80,208,48,176,112,240,8,136,72,200,40,168,104,232,24,152,88,216,56,184,120,248,4,132,68,196,36,164,100,228,20,148,84,212,52,180,116,244,12,140,76,204,44,172,108,236,28,156,92,220,60,188,124,252,2,130,66,194,34,162,98,226,18,146,82,210,50,178,114,242,10,138,74,202,42,170,106,234,26,154,90,218,58,186,122,250,6,134,70,198,38,166,102,230,22,150,86,214,54,182,118,246,14,142,78,206,46,174,110,238,30,158,94,222,62,190,126,254], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE);
/* memory initializer */ allocate([94,131,108,63,21,239,195,62,109,196,126,63,54,189,200,61,67,236,127,63,176,10,201,60,196,254,127,63,136,15,201,59,221,1,30,61,115,47,118,192,47,250,176,188,158,20,250,64,153,188,161,186,158,119,53,193,81,220,194,184,116,225,80,65,83,153,135,188,1,154,68,193,129,18,177,60,29,186,23,65,225,231,169,188,42,236,187,192,86,189,194,59,84,76,48,64,23,210,72,59,21,174,94,191,117,48,252,56,166,136,14,62,45,12,61,59,187,242,93,61,21,159,94,192,66,120,238,188,39,159,203,64,116,13,11,188,159,194,8,193,122,116,11,188,136,161,23,65,15,206,8,188,48,10,13,193,54,239,183,60,24,84,219,64,42,177,212,188,119,161,140,192,227,27,133,60,46,141,12,64,204,220,29,187,91,68,64,191,179,14,221,59,38,166,6,62,18,27,246,186,98,72,30,62,88,65,24,192,146,25,191,189,204,80,54,64,198,233,127,189,83,84,41,192,195,60,177,60,160,42,15,64,141,230,100,189,27,243,213,191,107,217,67,61,72,195,128,63,221,177,17,59,30,72,235,190,198,2,2,61,96,182,39,62,140,213,99,188,41,29,78,189,32,117,213,59,250,86,192,60,8,103,16,188,195,30,155,62,254,109,206,191,55,145,103,190,17,54,138,63,79,222,175,189,44,92,131,190,5,120,6,61,113,172,38,190,93,7,22,188,128,210,103,190,162,171,193,188,106,76,200,62,186,131,191,187,206,177,98,190,217,136,128,61,99,84,56,61,14,238,10,183,195,81,164,60,229,233,6,59,220,52,70,59,209,172,241,188,164,63,172,62,202,209,191,191,12,238,130,190,224,157,95,63,198,63,242,189,120,245,249,61,39,37,244,61,171,200,78,191,74,115,160,189,61,4,245,62,155,0,154,187,253,11,255,189,221,42,193,187,240,154,38,189,226,118,106,61,225,172,170,61,116,82,8,60,208,143,45,189,111,248,133,188,144,228,243,60,148,49,144,188,83,247,229,62,31,210,32,191,69,246,18,190,75,222,151,62,236,79,105,190,172,192,190,190,13,131,104,188,76,24,12,59,175,11,39,61,83,49,215,190,21,234,253,189,13,83,99,62,22,214,39,61,196,1,201,59,137,153,214,61,247,48,138,61,143,176,152,188,61,242,108,61,134,205,2,189,7,1,4,61,132,146,177,59,35,242,16,63,249,36,134,191,99,48,65,191,195,71,149,62,202,81,38,62,41,63,137,190,8,118,43,62,71,89,6,60,108,141,65,190,36,174,230,62,232,94,158,62,59,32,169,190,83,31,141,190,179,5,138,61,91,28,212,59,139,246,67,189,211,25,177,61,92,87,134,60,98,50,27,189,45,15,148,60,22,191,192,187,190,188,20,63,131,166,2,191,181,32,8,191,54,36,163,190,218,83,18,190,249,108,79,190,122,105,51,62,249,208,22,62,32,205,194,60,1,112,199,62,138,81,31,62,88,186,110,190,236,195,129,190,127,224,86,189,85,103,133,60,212,73,205,188,47,187,141,61,242,19,200,60,237,111,24,189,6,255,148,60,149,162,245,187,69,87,9,63,94,65,128,190,239,223,215,190,42,39,221,190,85,217,52,187,98,70,12,189,146,207,46,61,213,159,63,189,79,51,209,189,227,53,135,62,214,104,21,62,42,194,26,62,27,131,201,188,75,199,51,190,101,108,229,189,100,191,64,190,139,76,38,189,16,94,96,61,204,36,68,61,80,177,64,61,130,177,181,188,0,0,0,0,98,120,124,63,40,114,252,191,98,120,252,191,59,253,120,63,98,120,124,63,19,41,124,63,180,33,252,191,19,41,252,191,229,96,120,63,19,41,124,63,66,185,122,63,86,171,250,191,66,185,250,191,92,142,117,63,66,185,122,63,120,174,121,63,129,154,249,191,120,174,249,191,222,132,115,63,120,174,121,63,91,33,121,63,194,9,249,191,91,33,249,191,234,113,114,63,91,33,121,63,110,236,118,63,58,195,246,191,110,236,246,191,69,43,110,63,110,236,118,63,141,200,117,63,87,148,245,191,141,200,245,191,134,249,107,63,141,200,117,63,202,100,117,63,133,44,245,191,202,100,245,191,31,58,107,63,202,100,117,63,138,43,114,63,214,203,241,191,138,43,242,191,124,22,101,63,138,43,114,63,0,0,0,0,88,88,88,0,0,0,0,0,32,25,0,0,0,0,0,0,105,109,97,103,101,47,106,112,101,103,0,0,0,0,0,0,56,25,0,0,0,0,0,0,105,109,97,103,101,47,112,110,103,0,0,0,0,0,0,0,80,25,0,0,0,0,0,0,105,109,97,103,101,47,103,105,102,0,0,0,0,0,0,0,37,100,0,0,0,0,0,0,37,108,117,0,0,0,0,0,128,187,0,0,0,0,0,0,0,0,208,64,0,0,0,0,0,0,208,64,148,92,0,0,68,172,0,0,0,0,0,0,0,0,208,64,0,0,0,0,0,0,208,64,20,85,0,0,0,125,0,0,0,0,208,64,0,0,0,65,102,102,166,64,0,0,208,64,184,61,0,0,192,93,0,0,0,0,0,65,0,0,8,65,102,102,166,64,0,0,192,64,74,46,0,0,34,86,0,0,0,0,8,65,246,40,16,65,102,102,166,64,0,0,208,64,140,42,0,0,128,62,0,0,246,40,16,65,102,102,22,65,205,204,156,64,0,0,208,64,223,30,0,0,224,46,0,0,102,102,22,65,154,153,25,65,0,0,144,64,0,0,192,64,40,23,0,0,17,43,0,0,154,153,25,65,102,102,30,65,51,51,163,64,0,0,208,64,70,21,0,0,64,31,0,0,102,102,30,65,0,0,32,65,205,204,156,64,0,0,208,64,112,15,0,0,44,76,0,0,56,74,0,0,168,72,0,0,80,70,0,0,92,68,0,0,128,62,0,0,240,60,0,0,52,58,0,0,212,48,0,0,16,39,0,0,110,15,0,0,0,0,0,0,192,93,0,0,44,76,0,0,68,72,0,0,80,70,0,0,92,68,0,0,104,66,0,0,116,64,0,0,240,60,0,0,96,59,0,0,62,28,0,0,110,15,0,0,0,0,0,0,44,76,0,0,56,74,0,0,68,72,0,0,80,70,0,0,92,68,0,0,116,64,0,0,140,60,0,0,164,56,0,0,212,48,0,0,28,37,0,0,110,15,0,0,0,0,0,0,102,102,182,64,0,0,208,64,154,153,233,64,51,51,3,65,0,0,32,65,102,102,62,65,0,0,80,65,0,0,96,65,0,0,112,65,0,0,132,65,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,69,114,114,111,114,58,32,99,97,110,39,116,32,97,108,108,111,99,97,116,101,32,105,110,95,98,117,102,102,101,114,32,98,117,102,102,101,114,10,0,87,97,114,110,105,110,103,58,32,104,105,103,104,112,97,115,115,32,102,105,108,116,101,114,32,100,105,115,97,98,108,101,100,46,32,32,104,105,103,104,112,97,115,115,32,102,114,101,113,117,101,110,99,121,32,116,111,111,32,115,109,97,108,108,10,0,0,0,0,0,0,0,8,0,0,0,208,7,0,0,16,0,0,0,116,14,0,0,24,0,0,0,60,15,0,0,32,0,0,0,124,21,0,0,40,0,0,0,88,27,0,0,48,0,0,0,76,29,0,0,56,0,0,0,16,39,0,0,64,0,0,0,248,42,0,0,80,0,0,0,188,52,0,0,96,0,0,0,252,58,0,0,112,0,0,0,240,60,0,0,128,0,0,0,104,66,0,0,160,0,0,0,92,68,0,0,192,0,0,0,168,72,0,0,224,0,0,0,200,75,0,0,0,1,0,0,244,76,0,0,64,1,0,0,20,80], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+5432);
/* memory initializer */ allocate([128,1,0,0,128,4,0,0,128,4,0,0,0,0,0,0,128,1,0,0,128,4,0,0,64,2,0,0,0,0,0,0,1,0,0,0,16,0,0,0,17,0,0,0,8,0,0,0,9,0,0,0,24,0,0,0,25,0,0,0,4,0,0,0,5,0,0,0,20,0,0,0,21,0,0,0,12,0,0,0,13,0,0,0,28,0,0,0,29,0,0,0,2,0,0,0,3,0,0,0,18,0,0,0,19,0,0,0,10,0,0,0,11,0,0,0,26,0,0,0,27,0,0,0,6,0,0,0,7,0,0,0,22,0,0,0,23,0,0,0,14,0,0,0,15,0,0,0,30,0,0,0,31,0,0,0,0,27,134,42,204,204,52,43,33,78,132,43,252,247,157,43,88,156,166,43,252,247,157,43,33,78,132,43,204,204,52,43,0,27,134,42,83,248,191,44,254,169,171,44,146,50,149,44,159,129,122,44,239,29,73,44,62,186,23,44,116,173,207,43,133,159,107,43,183,89,146,42,83,248,191,172,254,169,171,172,146,50,149,172,159,129,122,172,239,29,73,172,62,186,23,172,116,173,207,171,133,159,107,171,183,89,146,170,0,27,134,170,204,204,52,171,33,78,132,171,252,247,157,171,88,156,166,171,252,247,157,171,33,78,132,171,204,204,52,171,0,27,134,170,0,27,134,42,204,204,52,43,33,78,132,43,252,247,157,43,88,156,166,43,252,247,157,43,33,78,132,43,204,204,52,43,0,27,134,42,83,248,191,44,254,169,171,44,146,50,149,44,159,129,122,44,239,29,73,44,62,186,23,44,116,173,207,43,133,159,107,43,183,89,146,42,37,39,192,172,51,37,173,172,234,209,152,172,227,84,131,172,249,175,89,172,11,14,43,172,102,34,244,171,201,49,137,171,74,123,157,170,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,72,144,128,170,174,79,227,170,5,174,113,170,234,207,6,62,205,19,212,62,139,111,68,63,255,175,139,63,23,208,166,63,117,235,200,63,190,226,245,63,122,130,26,64,105,251,74,64,185,87,144,64,107,16,243,64,233,58,183,65,92,28,124,63,187,141,36,63,68,29,175,62,178,143,112,63,212,208,49,190,125,27,68,191,215,179,93,63,0,0,0,63,254,181,3,191,218,134,241,190,2,115,160,190,116,71,58,190,29,176,193,189,135,203,39,189,29,161,104,188,70,123,114,187,168,132,91,63,216,185,97,63,221,26,115,63,129,186,123,63,65,218,126,63,253,200,127,63,101,249,127,63,141,255,127,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,72,144,128,42,174,79,227,42,5,174,113,42,37,39,192,44,51,37,173,44,234,209,152,44,227,84,131,44,249,175,89,44,11,14,43,44,102,34,244,43,201,49,137,43,74,123,157,42,83,248,191,172,254,169,171,172,146,50,149,172,159,129,122,172,239,29,73,172,62,186,23,172,116,173,207,171,133,159,107,171,183,89,146,170,0,27,134,170,204,204,52,171,33,78,132,171,252,247,157,171,88,156,166,171,252,247,157,171,33,78,132,171,204,204,52,171,0,27,134,170,121,207,23,190,138,59,1,66,164,51,148,67,155,200,92,68,202,167,45,70,175,40,132,68,192,222,152,67,129,155,246,65,199,156,118,64,77,183,109,66,194,101,49,68,74,15,165,69,82,45,182,197,71,104,76,196,73,213,153,194,66,4,147,192,94,6,104,63,54,189,72,62,3,97,30,190,44,76,9,66,68,231,150,67,96,102,76,68,47,215,52,70,17,168,147,68,117,204,160,67,46,219,249,65,68,124,109,64,146,154,86,66,183,10,43,68,136,68,163,69,35,243,198,197,129,62,99,196,80,169,179,194,43,42,173,192,1,24,82,63,194,197,199,62,223,144,36,190,144,150,16,66,32,15,152,67,140,47,55,68,113,86,59,70,101,128,162,68,120,164,167,67,193,231,251,65,149,237,87,64,209,237,60,66,46,47,35,68,80,99,160,69,178,232,215,197,240,127,122,196,100,62,207,194,121,91,195,192,207,220,61,63,49,160,20,63,61,91,42,190,177,1,23,66,106,129,151,67,98,254,28,68,14,27,65,70,229,136,176,68,246,95,173,67,75,201,252,65,52,59,74,64,173,80,34,66,178,10,26,68,170,126,156,69,83,240,232,197,121,249,136,196,253,124,236,194,231,48,218,192,193,13,43,63,21,239,67,63,139,188,47,190,75,118,28,66,177,43,149,67,81,195,251,67,92,30,70,70,161,146,189,68,23,254,177,67,116,41,251,65,165,166,58,64,77,48,7,66,62,185,15,68,225,169,151,69,144,236,249,197,102,184,148,196,253,164,5,195,130,12,247,192,196,112,25,63,234,90,113,63,120,177,52,190,11,224,32,66,197,255,144,67,75,169,179,67,9,89,74,70,63,131,201,68,227,108,181,67,12,94,248,65,73,159,52,64,49,233,215,65,148,121,4,68,250,250,145,69,153,95,5,198,224,82,160,196,230,149,21,195,193,75,10,193,185,213,8,63,218,57,142,63,244,54,185,190,93,45,36,66,238,197,138,67,123,163,67,67,193,197,77,70,150,52,212,68,118,180,183,67,208,116,244,65,169,3,34,64,173,143,160,65,68,192,240,67,195,135,139,69,122,165,13,198,28,180,171,196,130,42,38,195,136,83,25,193,112,40,242,62,153,103,162,63,55,74,189,190,167,146,37,66,148,165,130,67,182,247,78,65,135,96,80,70,71,144,221,68,247,225,184,67,182,2,238,65,153,191,25,64,113,224,84,65,226,71,215,67,116,104,132,69,186,183,21,198,32,182,182,196,153,32,55,195,248,124,43,193,205,19,212,62,243,4,181,63,187,232,192,190,91,122,38,66,227,13,113,67,88,242,59,195,65,40,82,70,237,132,229,68,213,190,184,67,201,3,232,65,16,147,4,64,105,242,216,64,110,227,188,67,47,102,121,69,214,134,29,198,81,62,193,196,85,96,72,195,235,212,61,193,80,50,183,62,3,228,197,63,71,16,196,190,73,155,36,66,18,122,88,67,23,20,203,195,140,28,83,70,216,249,235,68,185,166,183,67,247,22,225,65,11,250,244,63,71,16,196,62,69,237,161,67,91,2,105,69,239,4,37,198,124,38,203,196,16,160,89,195,54,63,80,193,66,80,155,62,49,219,212,63,46,15,21,191,242,108,33,66,98,51,60,67,83,17,32,196,220,60,83,70,70,243,240,68,238,104,181,67,38,192,215,65,112,137,223,63,88,12,180,192,157,166,134,67,47,214,87,69,149,32,44,198,6,85,212,196,16,196,106,195,193,157,98,193,212,63,128,62,152,197,225,63,57,182,22,191,234,239,28,66,206,194,27,67,244,79,94,196,226,141,82,70,182,97,244,68,249,56,178,67,221,40,207,65,124,229,200,63,57,233,50,193,16,207,86,67,160,18,70,69,73,205,50,198,21,165,220,196,104,176,123,195,1,246,119,193,175,175,75,62,94,131,236,63,230,143,74,191,36,147,21,66,35,102,239,66,16,227,143,196,201,17,81,70,166,76,246,68,130,2,174,67,22,218,197,65,28,72,177,63,12,95,131,193,224,12,33,67,81,229,51,69,247,251,56,198,140,255,227,196,139,36,134,195,184,137,134,193,100,229,23,62,11,250,244,63,223,202,75,191,201,237,12,66,223,9,160,66,174,0,178,196,45,207,78,70,187,185,246,68,213,254,168,67,51,80,186,65,197,91,178,63,32,204,168,193,139,247,216,66,54,123,33,69,232,158,62,198,230,72,234,196,148,31,142,195,218,232,144,193,220,181,201,61,190,20,251,63,15,177,127,191,152,64,2,66,94,213,19,66,106,66,213,196,38,205,75,70,66,172,245,68,70,55,163,67,112,102,177,65,251,108,153,63,81,248,202,193,231,35,102,66,180,6,15,69,179,170,67,198,226,90,239,196,151,161,149,195,66,6,155,193,60,57,73,61,109,196,254,63,54,211,37,70,68,177,165,69,175,113,104,68,69,51,54,68,128,12,144,67,180,213,129,66,2,0,241,65,34,63,131,64,49,19,72,70,167,49,243,68,86,182,156,67,170,105,166,65,251,100,249,68,112,3,16,65,17,158,233,193,0,0,0,0,0,0,0,0,9,0,0,0,9,0,0,0,0,0,0,0,102,102,134,64,0,0,200,65,154,153,217,192,154,153,217,192,51,51,227,64,0,0,128,63,0,0,0,0,0,0,0,0,2,0,0,0,31,0,0,0,0,0,128,63,0,0,160,64,0,0,200,66,1,0,0,0,9,0,0,0,9,0,0,0,0,0,0,0,102,102,134,64,0,0,200,65,154,153,153,192,154,153,153,192,205,204,172,64,51,51,179,63,0,0,128,191,0,0,0,0,2,0,0,0,27,0,0,0,178,157,143,63,0,0,160,64,0,0,196,66,2,0,0,0,9,0,0,0,9,0,0,0,0,0,0,0,102,102,134,64,0,0,200,65,102,102,38,192,102,102,38,192,205,204,108,64,0,0,0,64,0,0,64,192,0,0,0,0,2,0,0,0,23,0,0,0,47,221,164,63,0,0,160,64,0,0,194,66,3,0,0,0,9,0,0,0,9,0,0,0,1,0,0,0,102,102,134,64,0,0,200,65,205,204,204,191,205,204,204,191,0,0,0,64,0,0,0,64,0,0,160,192,0,0,0,0,2,0,0,0,18,0,0,0,223,79,189,63,0,0,160,64,0,0,192,66,4,0,0,0,9,0,0,0,9,0,0,0,1,0,0,0,102,102,134,64,0,0,200,65,0,0,0,128,0,0,0,128,0,0,0,0,0,0,0,64,0,0,0,193,0,0,0,0,2,0,0,0,12,0,0,0,16,88,217,63,0,0,160,64,0,0,190,66,5,0,0,0,9,0,0,0,9,0,0,0,1,0,0,0,102,102,134,64,0,0,200,65,102,102,166,63,102,102,166,63,0,0,192,192,0,0,96,64,0,0,48,193,0,0,0,0,2,0,0,0,8,0,0,0,154,153,249,63,0,0,160,64,102,102,188,66,6,0,0,0,9,0,0,0,9,0,0,0,1,0,0,0,0,0,144,64,0,0,200,66,205,204,12,64,51,51,19,64,0,0,64,193,0,0,192,64,0,0,96,193,0,0,0,0,2,0,0,0,4,0,0,0,199,75,15,64,0,0,64,64,205,204,187,66,7,0,0,0,9,0,0,0,9,0,0,0,1,0,0,0,154,153,153,64,0,0,72,67,205,204,44,64,205,204,44,64,0,0,144,193,0,0,16,65,0,0,136,193,0,0,0,0,2,0,0,0,0,0,0,0,225,122,36,64,0,0,128,63,51,51,187,66,8,0,0,0,9,0,0,0,9,0,0,0,1,0,0,0,154,153,169,64,0,0,150,67,51,51,51,64,51,51,51,64,0,0,168,193,0,0,32,65,0,0,184,193,23,183,81,57,0,0,0,0,0,0,0,0,47,221,60,64,0,0,0,0,154,153,186,66,9,0,0,0,9,0,0,0,9,0,0,0,1,0,0,0,51,51,211,64,0,0,150,67,51,51,51,64,51,51,51,64,0,0,184,193,0,0,48,65,0,0,200,193,82,73,29,58,0,0,0,0,0,0,0,0,254,212,88,64,0,0,0,0,154,153,186,66,10,0,0,0,9,0,0,0,9,0,0,0,1,0,0,0,0,0,200,65,0,0,150,67,51,51,51,64,51,51,51,64,0,0,200,193,0,0,64,65,0,0,216,193,10,215,35,59,0,0,0,0,0,0,0,0,0,0,96,64,0,0,0,0,154,153,186,66,0,0,0,0,0,0,0,0,9,0,0,0,9,0,0,0,0,0,0,0,102,102,166,64,0,0,250,66,102,102,134,192,154,153,201,192,154,153,153,64,0,0,128,63,0,0,0,0,0,0,0,0,2,0,0,0,21,0,0,0,236,81,120,63,0,0,160,64,0,0,200,66,1,0,0,0,9,0,0,0,9,0,0,0,0,0,0,0,154,153,169,64,0,0,250,66,102,102,102,192,51,51,179,192,0,0,144,64,0,0,192,63,0,0,0,0,0,0,0,0,2,0,0,0,21,0,0,0,205,204,172,63,0,0,160,64,0,0,200,66,2,0,0,0,9,0,0,0,9,0,0,0,0,0,0,0,51,51,179,64,0,0,250,66,205,204,12,192,0,0,96,192,51,51,51,64,0,0,0,64,0,0,0,0,0,0,0,0,2,0,0,0,21,0,0,0,82,184,190,63,0,0,160,64,0,0,200,66,3,0,0,0,9,0,0,0,9,0,0,0,1,0,0,0,154,153,185,64,0,0,2,67,102,102,230,191,51,51,51,192,102,102,38,64,0,0,64,64,0,0,128,192,0,0,0,0,2,0,0,0,20,0,0,0,133,235,209,63,0,0,160,64,0,0,200,66,4,0,0,0,9,0,0,0,9,0,0,0,1,0,0,0,0,0,192,64,0,0,7,67,51,51,51,191,205,204,140,191,205,204,140,63,0,0,96,64,0,0,0,193,0,0,0,0,2,0,0,0,0,0,0,0,184,30,229,63,0,0,160,64,0,0,200,66,5,0,0,0,9,0,0,0,9,0,0,0,1,0,0,0,205,204,204,64,0,0,12,67,0,0,0,63,205,204,204,62,0,0,240,192,0,0,128,64,0,0,64,193,23,183,81,57,0,0,0,0,0,0,0,0,154,153,249,63,0,0,160,64,0,0,200,66,6,0,0,0,9,0,0,0,9,0,0,0,1,0,0,0,51,51,211,64,0,0,17,67,31,133,43,63,102,102,38,63,51,51,107,193,0,0,208,64,0,0,152,193,23,183,209,57,0,0,0,0,0,0,0,0,51,51,19,64,0,0,160,64,0,0,200,66,7,0,0,0,9,0,0,0,9,0,0,0,1,0,0,0,51,51,211,64,0,0,17,67,205,204,76,63,0,0,64,63,154,153,157,193,0,0,0,65,0,0,176,193,82,73,29,58,0,0,0,0,0,0,0,0,205,204,44,64,0,0,160,64,0,0,200,66,8,0,0,0,9,0,0,0,9,0,0,0,1,0,0,0,51,51,211,64,0,0,17,67,154,153,153,63,51,51,147,63,0,0,220,193,0,0,32,65,0,0,184,193,52,128,55,58,0,0,0,0,0,0,0,0,0,0,0,0,0,0,160,64,0,0,200,66,9,0,0,0,9,0,0,0,9,0,0,0,1,0,0,0,51,51,211,64,0,0,17,67,205,204,204,63,205,204,204,63,0,0,16,194,0,0,48,65,0,0,200,193,23,183,81,58,0,0,0,0,0,0,0,0,0,0,0,0,0,0,160,64,0,0,200,66,10,0,0,0,9,0,0,0,9,0,0,0,1,0,0,0,51,51,211,64,0,0,17,67,0,0,0,64,0,0,0,64,0,0,16,194,0,0,64,65,0,0,200,193,23,183,81,58,0,0,0,0,0,0,0,0,0,0,0,0,0,0,160,64,0,0,200,66,0,0,0,0,8,0,0,0,9,0,0,0,9,0,0,0,0,0,0,0,0,0,0,0,51,51,211,64,0,0,17,67,51,51,115,63,0,0,0,0,0,0,240,193,0,0,48,65,82,73,157,58,1,0,0,0,16,0,0,0,9,0,0,0,9,0,0,0,0,0,0,0,0,0,0,0,51,51,211,64,0,0,17,67,51,51,115,63,0,0,0,0,0,0,200,193,0,0,48,65,111,18,131,58,1,0,0,0,24,0,0,0,9,0,0,0,9,0,0,0,0,0,0,0,0,0,0,0,51,51,211,64,0,0,17,67,51,51,115,63,0,0,0,0,0,0,160,193,0,0,48,65,111,18,131,58,1,0,0,0,32,0,0,0,9,0,0,0,9,0,0,0,0,0,0,0,0,0,0,0,51,51,211,64,0,0,17,67,51,51,115,63,0,0,0,0,0,0,112,193,0,0,48,65,111,18,131,58,1,0,0,0,40,0,0,0,9,0,0,0,9,0,0,0,0,0,0,0,0,0,0,0,51,51,211,64,0,0,17,67,51,51,115,63,0,0,0,0,0,0,32,193,0,0,48,65,250,237,107,58,1,0,0,0,48,0,0,0,9,0,0,0,9,0,0,0,0,0,0,0,0,0,0,0,51,51,211,64,0,0,17,67,51,51,115,63,0,0,0,0,0,0,32,193,0,0,48,65,250,237,107,58,1,0,0,0,56,0,0,0,9,0,0,0,9,0,0,0,0,0,0,0,0,0,0,0,51,51,211,64,0,0,17,67,51,51,115,63,0,0,0,0,0,0,192,192,0,0,48,65,23,183,81,58,1,0,0,0,64,0,0,0,9,0,0,0,9,0,0,0,0,0,0,0,0,0,0,0,51,51,211,64,0,0,17,67,51,51,115,63,0,0,0,0,0,0,0,192,0,0,48,65,23,183,81,58,1,0,0,0,80,0,0,0,9,0,0,0,9,0,0,0,0,0,0,0,0,0,0,0,51,51,211,64,0,0,17,67,51,51,115,63,0,0,0,0,0,0,0,0,0,0,0,65,52,128,55,58,1,0,0,0,96,0,0,0,9,0,0,0,9,0,0,0,0,0,0,0,0,0,32,64,51,51,211,64,0,0,17,67,51,51,115,63,0,0,0,0,0,0,128,63,0,0,176,64,82,73,29,58,1,0,0,0,112,0,0,0,9,0,0,0,9,0,0,0,0,0,0,0,0,0,16,64,51,51,211,64,0,0,17,67,51,51,115,63,0,0,0,0,0,0,0,64,0,0,144,64,111,18,3,58,1,0,0,0,128,0,0,0,9,0,0,0,9,0,0,0,0,0,0,0,154,153,249,63,205,204,204,64,0,0,12,67,51,51,115,63,0,0,0,0,0,0,64,64,0,0,128,64,23,183,81,57,1,0,0,0,160,0,0,0,9,0,0,0,9,0,0,0,1,0,0,0,184,30,229,63,0,0,192,64,0,0,7,67,51,51,115,63,0,0,0,192,0,0,160,64,0,0,96,64,0,0,0,0,1,0,0,0,192,0,0,0,9,0,0,0,9,0,0,0,1,0,0,0,82,184,190,63,51,51,179,64,0,0,250,66,236,81,120,63,0,0,128,192,0,0,224,64,0,0,64,64,0,0,0,0,0,0,0,0,224,0,0,0,9,0,0,0,9,0,0,0,1,0,0,0,0,0,160,63,102,102,166,64,0,0,250,66,72,225,122,63,0,0,192,192,0,0,16,65,0,0,0,64,0,0,0,0,0,0,0,0,0,1,0,0,9,0,0,0,9,0,0,0,1,0,0,0,236,81,120,63,102,102,166,64,0,0,250,66,0,0,128,63,0,0,0,193,0,0,32,65,0,0,128,63,0,0,0,0,0,0,0,0,64,1,0,0,9,0,0,0,9,0,0,0,1,0,0,0,102,102,102,63,102,102,166,64,0,0,250,66,0,0,128,63,0,0,32,193,0,0,64,65,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,205,204,236,192,205,204,236,192,205,204,236,192,0,0,24,193,205,204,236,192,51,51,195,192,0,0,176,192,102,102,150,192,102,102,150,192,102,102,150,192,102,102,150,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,154,153,217,64,154,153,185,64,154,153,185,64,205,204,204,64,0,0,208,64,102,102,30,65,154,153,65,65,102,102,102,65,0,0,112,65,51,51,151,65,205,204,172,65,51,51,215,65,205,204,8,66,205,204,32,66,51,51,59,66,0,0,98,66,205,204,114,66,205,204,147,66,102,102,171,66,205,204,186,66,51,51,252,66,0,0,0,0,205,204,60,65,154,153,89,65,154,153,137,65,0,0,0,66,0,0,58,66,51,51,77,66,0,0,102,66,51,51,134,66,0,0,143,66,51,51,169,66,51,51,195,66,0,0,2,67,0,0,128,63,54,89,75,63,152,134,33,63,152,134,33,63,152,134,33,63,152,134,33,63,152,134,33,63,250,155,128,62,153,158,240,61,0,0,0,0,137,158,227,63,229,83,236,63,167,94,245,63,155,20,249,63,14,217,252,63,123,143,234,63,218,151,217,63,226,132,191,63,124,145,168,63,0,0,128,63,2,0,0,0,2,0,0,0,2,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,43,152,159,163,27,134,139,188,168,241,120,163,7,62,43,61,81,63,155,164,158,120,179,189,139,51,14,164,232,209,62,62,176,169,254,164,226,172,32,191,73,78,84,69,82,78,65,76,32,69,82,82,79,82,32,73,78,32,86,66,82,32,78,69,87,32,67,79,68,69,44,32,112,108,101,97,115,101,32,115,101,110,100,32,98,117,103,32,114,101,112,111,114,116,10,0,6,0,0,0,5,0,0,0,5,0,0,0,5,0,0,0,9,0,0,0,9,0,0,0,9,0,0,0,9,0,0,0,6,0,0,0,9,0,0,0,9,0,0,0,9,0,0,0,6,0,0,0,5,0,0,0,7,0,0,0,3,0,0,0,9,0,0,0,9,0,0,0,12,0,0,0,6,0,0,0,6,0,0,0,9,0,0,0,12,0,0,0,6,0,0,0,11,0,0,0,10,0,0,0,0,0,0,0,0,0,0,0,18,0,0,0,18,0,0,0,0,0,0,0,0,0,0,0,15,0,0,0,18,0,0,0,0,0,0,0,0,0,0,0,7,0,0,0,7,0,0,0,7,0,0,0,0,0,0,0,12,0,0,0,12,0,0,0,12,0,0,0,0,0,0,0,6,0,0,0,15,0,0,0,12,0,0,0,0,0,0,0,6,0,0,0,6,0,0,0,6,0,0,0,3,0,0,0,12,0,0,0,9,0,0,0,9,0,0,0,6,0,0,0,6,0,0,0,12,0,0,0,9,0,0,0,6,0,0,0,8,0,0,0,8,0,0,0,5,0,0,0,0,0,0,0,15,0,0,0,12,0,0,0,9,0,0,0,0,0,0,0,6,0,0,0,18,0,0,0,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,2,0,0,0,2,0,0,0,3,0,0,0,3,0,0,0,3,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,12,0,0,0,18,0,0,0,24,0,0,0,30,0,0,0,36,0,0,0,44,0,0,0,54,0,0,0,66,0,0,0,80,0,0,0,96,0,0,0,116,0,0,0,140,0,0,0,168,0,0,0,200,0,0,0,238,0,0,0,28,1,0,0,80,1,0,0,140,1,0,0,208,1,0,0,10,2,0,0,64,2,0,0,0,0,0,0,4,0,0,0,8,0,0,0,12,0,0,0,18,0,0,0,24,0,0,0,32,0,0,0,42,0,0,0,56,0,0,0,74,0,0,0,100,0,0,0,132,0,0,0,174,0,0,0,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,12,0,0,0,18,0,0,0,24,0,0,0,30,0,0,0,36,0,0,0,44,0,0,0,54,0,0,0,66,0,0,0,80,0,0,0,96,0,0,0,114,0,0,0,136,0,0,0,162,0,0,0,194,0,0,0,232,0,0,0,22,1,0,0,76,1,0,0,138,1,0,0,208,1,0,0,28,2,0,0,64,2,0,0,0,0,0,0,4,0,0,0,8,0,0,0,12,0,0,0,18,0,0,0,26,0,0,0,36,0,0,0,48,0,0,0,62,0,0,0,80,0,0,0,104,0,0,0,136,0,0,0,180,0,0,0,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,12,0,0,0,18,0,0,0,24,0,0,0,30,0,0,0,36,0,0,0,44,0,0,0,54,0,0,0,66,0,0,0,80,0,0,0,96,0,0,0,116,0,0,0,140,0,0,0,168,0,0,0,200,0,0,0,238,0,0,0,28,1,0,0,80,1,0,0,140,1,0,0,208,1,0,0,10,2,0,0,64,2,0,0,0,0,0,0,4,0,0,0,8,0,0,0,12,0,0,0,18,0,0,0,26,0,0,0,36,0,0,0,48,0,0,0,62,0,0,0,80,0,0,0,104,0,0,0,134,0,0,0,174,0,0,0,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,8,0,0,0,12,0,0,0,16,0,0,0,20,0,0,0,24,0,0,0,30,0,0,0,36,0,0,0,44,0,0,0,52,0,0,0,62,0,0,0,74,0,0,0,90,0,0,0,110,0,0,0,134,0,0,0,162,0,0,0,196,0,0,0,238,0,0,0,32,1,0,0,86,1,0,0,162,1,0,0,64,2,0,0,0,0,0,0,4,0,0,0,8,0,0,0,12,0,0,0,16,0,0,0,22,0,0,0,30,0,0,0,40,0,0,0,52,0,0,0,66,0,0,0,84,0,0,0,106,0,0,0,136,0,0,0,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,8,0,0,0,12,0,0,0,16,0,0,0,20,0,0,0,24,0,0,0,30,0,0,0,36,0,0,0,42,0,0,0,50,0,0,0,60,0,0,0,72,0,0,0,88,0,0,0,106,0,0,0,128,0,0,0,156,0,0,0,190,0,0,0,230,0,0,0,20,1,0,0,74,1,0,0,128,1,0,0,64,2,0,0,0,0,0,0,4,0,0,0,8,0,0,0,12,0,0,0,16,0,0,0,22,0,0,0,28,0,0,0,38,0,0,0,50,0,0,0,64,0,0,0,80,0,0,0,100,0,0,0,126,0,0,0,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,8,0,0,0,12,0,0,0,16,0,0,0,20,0,0,0,24,0,0,0,30,0,0,0,36,0,0,0,44,0,0,0,54,0,0,0,66,0,0,0,82,0,0,0,102,0,0,0,126,0,0,0,156,0,0,0,194,0,0,0,240,0,0,0,40,1,0,0,108,1,0,0,192,1,0,0,38,2,0,0,64,2,0,0,0,0,0,0,4,0,0,0,8,0,0,0,12,0,0,0,16,0,0,0,22,0,0,0,30,0,0,0,42,0,0,0,58,0,0,0,78,0,0,0,104,0,0,0,138,0,0,0,180,0,0,0,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,12,0,0,0,18,0,0,0,24,0,0,0,30,0,0,0,36,0,0,0,44,0,0,0,54,0,0,0,66,0,0,0,80,0,0,0,96,0,0,0,116,0,0,0,140,0,0,0,168,0,0,0,200,0,0,0,238,0,0,0,28,1,0,0,80,1,0,0,140,1,0,0,208,1,0,0,10,2,0,0,64,2,0,0,0,0,0,0,4,0,0,0,8,0,0,0,12,0,0,0,18,0,0,0,26,0,0,0,36,0,0,0,48,0,0,0,62,0,0,0,80,0,0,0,104,0,0,0,134,0,0,0,174,0,0,0,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,12,0,0,0,18,0,0,0,24,0,0,0,30,0,0,0,36,0,0,0,44,0,0,0,54,0,0,0,66,0,0,0,80,0,0,0,96,0,0,0,116,0,0,0,140,0,0,0,168,0,0,0,200,0,0,0,238,0,0,0,28,1,0,0,80,1,0,0,140,1,0,0,208,1,0,0,10,2,0,0,64,2,0,0,0,0,0,0,4,0,0,0,8,0,0,0,12,0,0,0,18,0,0,0,26,0,0,0,36,0,0,0,48,0,0,0,62,0,0,0,80,0,0,0,104,0,0,0,134,0,0,0,174,0,0,0,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,24,0,0,0,36,0,0,0,48,0,0,0,60,0,0,0,72,0,0,0,88,0,0,0,108,0,0,0,132,0,0,0,160,0,0,0,192,0,0,0,232,0,0,0,24,1,0,0,80,1,0,0,144,1,0,0,220,1,0,0,54,2,0,0,56,2,0,0,58,2,0,0,60,2,0,0,62,2,0,0,64,2,0,0,0,0,0,0,8,0,0,0,16,0,0,0,24,0,0,0,36,0,0,0,52,0,0,0,72,0,0,0,96,0,0,0,124,0,0,0,160,0,0,0,162,0,0,0,164,0,0,0,166,0,0,0,192], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+16388);
/* memory initializer */ allocate([128,0,0,0,128,0,0,0,128,0,0,0,0,0,0,0,191,0,0,128,190,205,204,204,188,0,0,0,63,0,0,0,128,0,0,0,128,0,0,0,128,0,0,0,0,0,0,0,192,0,0,128,191,205,204,76,189,0,0,0,63,1,4,3,5,0,0,0,0,1,5,5,7,5,8,7,9,5,7,7,9,7,9,9,10,4,5,5,6,5,6,6,7,5,6,6,7,6,7,7,8,1,0,1,0,1,0,0,0,1,0,2,0,1,0,3,0,1,0,1,0,3,0,2,0,0,0,0,0,0,0,0,0,1,4,7,4,5,7,6,7,8,0,0,0,0,0,0,0,3,0,2,0,1,0,1,0,1,0,1,0,3,0,2,0,0,0,0,0,0,0,0,0,2,3,7,4,4,7,6,7,8,0,0,0,0,0,0,0,1,0,2,0,6,0,5,0,3,0,1,0,4,0,4,0,7,0,5,0,7,0,1,0,6,0,1,0,1,0,0,0,1,4,7,8,4,5,8,9,7,8,9,10,8,8,9,10,7,0,3,0,5,0,1,0,6,0,2,0,3,0,2,0,5,0,4,0,4,0,1,0,3,0,3,0,2,0,0,0,3,4,6,8,4,4,6,7,5,6,7,8,7,7,8,9,1,0,2,0,10,0,19,0,16,0,10,0,3,0,3,0,7,0,10,0,5,0,3,0,11,0,4,0,13,0,17,0,8,0,4,0,12,0,11,0,18,0,15,0,11,0,2,0,7,0,6,0,9,0,14,0,3,0,1,0,6,0,4,0,5,0,3,0,2,0,0,0,1,4,7,9,9,10,4,6,8,9,9,10,7,7,9,10,10,11,8,9,10,11,11,11,8,9,10,11,11,12,9,10,11,12,12,12,0,0,0,0,3,0,4,0,6,0,18,0,12,0,5,0,5,0,1,0,2,0,16,0,9,0,3,0,7,0,3,0,5,0,14,0,7,0,3,0,19,0,17,0,15,0,13,0,10,0,4,0,13,0,5,0,8,0,11,0,5,0,1,0,12,0,4,0,4,0,1,0,1,0,0,0,2,4,7,9,9,10,4,4,6,10,10,10,7,6,8,10,10,11,9,10,10,11,11,12,9,9,10,11,12,12,10,10,11,11,13,13,0,0,0,0,7,0,5,0,9,0,14,0,15,0,7,0,6,0,4,0,5,0,5,0,6,0,7,0,7,0,6,0,8,0,8,0,8,0,5,0,15,0,6,0,9,0,10,0,5,0,1,0,11,0,7,0,9,0,6,0,4,0,1,0,14,0,4,0,6,0,2,0,6,0,0,0,3,4,6,7,9,10,4,5,6,7,8,10,5,6,7,8,9,10,7,7,8,9,9,10,8,8,9,9,10,11,9,9,10,10,11,11,0,0,0,0,1,0,2,0,10,0,23,0,35,0,30,0,12,0,17,0,3,0,3,0,8,0,12,0,18,0,21,0,12,0,7,0,11,0,9,0,15,0,21,0,32,0,40,0,19,0,6,0,14,0,13,0,22,0,34,0,46,0,23,0,18,0,7,0,20,0,19,0,33,0,47,0,27,0,22,0,9,0,3,0,31,0,22,0,41,0,26,0,21,0,20,0,5,0,3,0,14,0,13,0,10,0,11,0,16,0,6,0,5,0,1,0,9,0,8,0,7,0,8,0,4,0,4,0,2,0,0,0,1,4,7,9,10,10,10,11,4,6,8,9,10,11,10,10,7,8,9,10,11,12,11,11,8,9,10,11,12,12,11,12,9,10,11,12,12,12,12,12,10,11,12,12,13,13,12,13,9,10,11,12,12,12,13,13,10,10,11,12,12,13,13,13,3,0,4,0,10,0,24,0,34,0,33,0,21,0,15,0,5,0,3,0,4,0,10,0,32,0,17,0,11,0,10,0,11,0,7,0,13,0,18,0,30,0,31,0,20,0,5,0,25,0,11,0,19,0,59,0,27,0,18,0,12,0,5,0,35,0,33,0,31,0,58,0,30,0,16,0,7,0,5,0,28,0,26,0,32,0,19,0,17,0,15,0,8,0,14,0,14,0,12,0,9,0,13,0,14,0,9,0,4,0,1,0,11,0,4,0,6,0,6,0,6,0,3,0,2,0,0,0,2,4,6,8,9,10,9,10,4,5,6,8,10,10,9,10,6,7,8,9,10,11,10,10,8,8,9,11,10,12,10,11,9,10,10,11,11,12,11,12,9,10,11,12,12,13,12,13,9,9,9,10,11,12,12,12,9,9,10,11,12,12,12,12,9,0,6,0,16,0,33,0,41,0,39,0,38,0,26,0,7,0,5,0,6,0,9,0,23,0,16,0,26,0,11,0,17,0,7,0,11,0,14,0,21,0,30,0,10,0,7,0,17,0,10,0,15,0,12,0,18,0,28,0,14,0,5,0,32,0,13,0,22,0,19,0,18,0,16,0,9,0,5,0,40,0,17,0,31,0,29,0,17,0,13,0,4,0,2,0,27,0,12,0,11,0,15,0,10,0,7,0,4,0,1,0,27,0,12,0,8,0,12,0,6,0,3,0,1,0,0,0,4,4,6,8,9,10,10,10,4,5,6,7,9,9,10,10,6,6,7,8,9,10,9,10,7,7,8,8,9,10,10,10,8,8,9,9,10,10,10,11,9,9,10,10,10,11,10,11,9,9,9,10,10,11,11,12,10,10,10,11,11,11,11,12,1,0,5,0,14,0,21,0,34,0,51,0,46,0,71,0,42,0,52,0,68,0,52,0,67,0,44,0,43,0,19,0,3,0,4,0,12,0,19,0,31,0,26,0,44,0,33,0,31,0,24,0,32,0,24,0,31,0,35,0,22,0,14,0,15,0,13,0,23,0,36,0,59,0,49,0,77,0,65,0,29,0,40,0,30,0,40,0,27,0,33,0,42,0,16,0,22,0,20,0,37,0,61,0,56,0,79,0,73,0,64,0,43,0,76,0,56,0,37,0,26,0,31,0,25,0,14,0,35,0,16,0,60,0,57,0,97,0,75,0,114,0,91,0,54,0,73,0,55,0,41,0,48,0,53,0,23,0,24,0,58,0,27,0,50,0,96,0,76,0,70,0,93,0,84,0,77,0,58,0,79,0,29,0,74,0,49,0,41,0,17,0,47,0,45,0,78,0,74,0,115,0,94,0,90,0,79,0,69,0,83,0,71,0,50,0,59,0,38,0,36,0,15,0,72,0,34,0,56,0,95,0,92,0,85,0,91,0,90,0,86,0,73,0,77,0,65,0,51,0,44,0,43,0,42,0,43,0,20,0,30,0,44,0,55,0,78,0,72,0,87,0,78,0,61,0,46,0,54,0,37,0,30,0,20,0,16,0,53,0,25,0,41,0,37,0,44,0,59,0,54,0,81,0,66,0,76,0,57,0,54,0,37,0,18,0,39,0,11,0,35,0,33,0,31,0,57,0,42,0,82,0,72,0,80,0,47,0,58,0,55,0,21,0,22,0,26,0,38,0,22,0,53,0,25,0,23,0,38,0,70,0,60,0,51,0,36,0,55,0,26,0,34,0,23,0,27,0,14,0,9,0,7,0,34,0,32,0,28,0,39,0,49,0,75,0,30,0,52,0,48,0,40,0,52,0,28,0,18,0,17,0,9,0,5,0,45,0,21,0,34,0,64,0,56,0,50,0,49,0,45,0,31,0,19,0,12,0,15,0,10,0,7,0,6,0,3,0,48,0,23,0,20,0,39,0,36,0,35,0,53,0,21,0,16,0,23,0,13,0,10,0,6,0,1,0,4,0,2,0,16,0,15,0,17,0,27,0,25,0,20,0,29,0,11,0,17,0,12,0,16,0,8,0,1,0,1,0,0,0,1,0,1,5,7,8,9,10,10,11,10,11,12,12,13,13,14,14,4,6,8,9,10,10,11,11,11,11,12,12,13,14,14,14,7,8,9,10,11,11,12,12,11,12,12,13,13,14,15,15,8,9,10,11,11,12,12,12,12,13,13,13,13,14,15,15,9,9,11,11,12,12,13,13,12,13,13,14,14,15,15,16,10,10,11,12,12,12,13,13,13,13,14,13,15,15,16,16,10,11,12,12,13,13,13,13,13,14,14,14,15,15,16,16,11,11,12,13,13,13,14,14,14,14,15,15,15,16,18,18,10,10,11,12,12,13,13,14,14,14,14,15,15,16,17,17,11,11,12,12,13,13,13,15,14,15,15,16,16,16,18,17,11,12,12,13,13,14,14,15,14,15,16,15,16,17,18,19,12,12,12,13,14,14,14,14,15,15,15,16,17,17,17,18,12,13,13,14,14,15,14,15,16,16,17,17,17,18,18,18,13,13,14,15,15,15,16,16,16,16,16,17,18,17,18,18,14,14,14,15,15,15,17,16,16,19,17,17,17,19,18,18,13,14,15,16,16,16,17,16,17,17,18,18,21,20,21,18,1,5,7,9,10,10,11,11,12,12,12,13,13,13,14,11,4,6,8,9,10,11,11,11,12,12,12,13,14,13,14,11,7,8,9,10,11,11,12,12,13,12,13,13,13,14,14,12,9,9,10,11,11,12,12,12,13,13,14,14,14,15,15,13,10,10,11,11,12,12,13,13,13,14,14,14,15,15,15,12,10,10,11,11,12,13,13,14,13,14,14,15,15,15,16,13,11,11,11,12,13,13,13,13,14,14,14,14,15,15,16,13,11,11,12,12,13,13,13,14,14,15,15,15,15,17,17,13,11,12,12,13,13,13,14,14,15,15,15,15,16,16,16,13,12,12,12,13,13,14,14,15,15,15,15,16,15,16,15,14,12,13,12,13,14,14,14,14,15,16,16,16,17,17,16,13,13,13,13,13,14,14,15,16,16,16,16,16,16,15,16,14,13,14,14,14,14,15,15,15,15,17,16,16,16,16,18,14,15,14,14,14,15,15,16,16,16,18,17,17,17,19,17,14,14,15,13,14,16,16,15,16,16,17,18,17,19,17,16,14,11,11,11,12,12,13,13,13,14,14,14,14,14,14,14,12,7,0,12,0,18,0,53,0,47,0,76,0,124,0,108,0,89,0,123,0,108,0,119,0,107,0,81,0,122,0,63,0,13,0,5,0,16,0,27,0,46,0,36,0,61,0,51,0,42,0,70,0,52,0,83,0,65,0,41,0,59,0,36,0,19,0,17,0,15,0,24,0,41,0,34,0,59,0,48,0,40,0,64,0,50,0,78,0,62,0,80,0,56,0,33,0,29,0,28,0,25,0,43,0,39,0,63,0,55,0,93,0,76,0,59,0,93,0,72,0,54,0,75,0,50,0,29,0,52,0,22,0,42,0,40,0,67,0,57,0,95,0,79,0,72,0,57,0,89,0,69,0,49,0,66,0,46,0,27,0,77,0,37,0,35,0,66,0,58,0,52,0,91,0,74,0,62,0,48,0,79,0,63,0,90,0,62,0,40,0,38,0,125,0,32,0,60,0,56,0,50,0,92,0,78,0,65,0,55,0,87,0,71,0,51,0,73,0,51,0,70,0,30,0,109,0,53,0,49,0,94,0,88,0,75,0,66,0,122,0,91,0,73,0,56,0,42,0,64,0,44,0,21,0,25,0,90,0,43,0,41,0,77,0,73,0,63,0,56,0,92,0,77,0,66,0,47,0,67,0,48,0,53,0,36,0,20,0,71,0,34,0,67,0,60,0,58,0,49,0,88,0,76,0,67,0,106,0,71,0,54,0,38,0,39,0,23,0,15,0,109,0,53,0,51,0,47,0,90,0,82,0,58,0,57,0,48,0,72,0,57,0,41,0,23,0,27,0,62,0,9,0,86,0,42,0,40,0,37,0,70,0,64,0,52,0,43,0,70,0,55,0,42,0,25,0,29,0,18,0,11,0,11,0,118,0,68,0,30,0,55,0,50,0,46,0,74,0,65,0,49,0,39,0,24,0,16,0,22,0,13,0,14,0,7,0,91,0,44,0,39,0,38,0,34,0,63,0,52,0,45,0,31,0,52,0,28,0,19,0,14,0,8,0,9,0,3,0,123,0,60,0,58,0,53,0,47,0,43,0,32,0,22,0,37,0,24,0,17,0,12,0,15,0,10,0,2,0,1,0,71,0,37,0,34,0,30,0,28,0,20,0,17,0,26,0,21,0,16,0,10,0,6,0,8,0,6,0,2,0,0,0,3,5,6,8,8,9,10,10,10,11,11,12,12,12,13,14,5,5,7,8,9,9,10,10,10,11,11,12,12,12,13,13,6,7,7,8,9,9,10,10,10,11,11,12,12,13,13,13,7,8,8,9,9,10,10,11,11,11,12,12,12,13,13,13,8,8,9,9,10,10,11,11,11,11,12,12,12,13,13,13,9,9,9,10,10,10,11,11,11,11,12,12,13,13,13,14,10,9,10,10,10,11,11,11,11,12,12,12,13,13,14,14,10,10,10,11,11,11,11,12,12,12,12,12,13,13,13,14,10,10,10,11,11,11,11,12,12,12,12,13,13,14,14,14,10,10,11,11,11,11,12,12,12,13,13,13,13,14,14,14,11,11,11,11,12,12,12,12,12,13,13,13,13,14,15,14,11,11,11,11,12,12,12,12,13,13,13,13,14,14,14,15,12,12,11,12,12,12,13,13,13,13,13,13,14,14,15,15,12,12,12,12,12,13,13,13,13,14,14,14,14,14,15,15,13,13,13,13,13,13,13,13,14,14,14,14,15,15,14,15,13,13,13,13,13,13,13,14,14,14,14,14,15,15,15,15,1,0,5,0,14,0,44,0,74,0,63,0,110,0,93,0,172,0,149,0,138,0,242,0,225,0,195,0,120,1,17,0,3,0,4,0,12,0,20,0,35,0,62,0,53,0,47,0,83,0,75,0,68,0,119,0,201,0,107,0,207,0,9,0,15,0,13,0,23,0,38,0,67,0,58,0,103,0,90,0,161,0,72,0,127,0,117,0,110,0,209,0,206,0,16,0,45,0,21,0,39,0,69,0,64,0,114,0,99,0,87,0,158,0,140,0,252,0,212,0,199,0,131,1,109,1,26,0,75,0,36,0,68,0,65,0,115,0,101,0,179,0,164,0,155,0,8,1,246,0,226,0,139,1,126,1,106,1,9,0,66,0,30,0,59,0,56,0,102,0,185,0,173,0,9,1,142,0,253,0,232,0,144,1,132,1,122,1,189,1,16,0,111,0,54,0,52,0,100,0,184,0,178,0,160,0,133,0,1,1,244,0,228,0,217,0,129,1,110,1,203,2,10,0,98,0,48,0,91,0,88,0,165,0,157,0,148,0,5,1,248,0,151,1,141,1,116,1,124,1,121,3,116,3,8,0,85,0,84,0,81,0,159,0,156,0,143,0,4,1,249,0,171,1,145,1,136,1,127,1,215,2,201,2,196,2,7,0,154,0,76,0,73,0,141,0,131,0,0,1,245,0,170,1,150,1,138,1,128,1,223,2,103,1,198,2,96,1,11,0,139,0,129,0,67,0,125,0,247,0,233,0,229,0,219,0,137,1,231,2,225,2,208,2,117,3,114,3,183,1,4,0,243,0,120,0,118,0,115,0,227,0,223,0,140,1,234,2,230,2,224,2,209,2,200,2,194,2,223,0,180,1,6,0,202,0,224,0,222,0,218,0,216,0,133,1,130,1,125,1,108,1,120,3,187,1,195,2,184,1,181,1,192,6,4,0,235,2,211,0,210,0,208,0,114,1,123,1,222,2,211,2,202,2,199,6,115,3,109,3,108,3,131,13,97,3,2,0,121,1,113,1,102,0,187,0,214,2,210,2,102,1,199,2,197,2,98,3,198,6,103,3,130,13,102,3,178,1,0,0,12,0,10,0,7,0,11,0,10,0,17,0,11,0,9,0,13,0,12,0,10,0,7,0,5,0,3,0,1,0,3,0,1,5,7,9,10,10,11,11,12,12,12,13,13,13,14,10,4,6,8,9,10,11,11,11,12,12,12,13,14,13,14,10,7,8,9,10,11,11,12,12,13,12,13,13,13,14,14,11,9,9,10,11,11,12,12,12,13,13,14,14,14,15,15,12,10,10,11,11,12,12,13,13,13,14,14,14,15,15,15,11,10,10,11,11,12,13,13,14,13,14,14,15,15,15,16,12,11,11,11,12,13,13,13,13,14,14,14,14,15,15,16,12,11,11,12,12,13,13,13,14,14,15,15,15,15,17,17,12,11,12,12,13,13,13,14,14,15,15,15,15,16,16,16,12,12,12,12,13,13,14,14,15,15,15,15,16,15,16,15,13,12,13,12,13,14,14,14,14,15,16,16,16,17,17,16,12,13,13,13,13,14,14,15,16,16,16,16,16,16,15,16,13,13,14,14,14,14,15,15,15,15,17,16,16,16,16,18,13,15,14,14,14,15,15,16,16,16,18,17,17,17,19,17,13,14,15,13,14,16,16,15,16,16,17,18,17,19,17,16,13,10,10,10,11,11,12,12,12,13,13,13,13,13,13,13,10,15,0,13,0,46,0,80,0,146,0,6,1,248,0,178,1,170,1,157,2,141,2,137,2,109,2,5,2,8,4,88,0,14,0,12,0,21,0,38,0,71,0,130,0,122,0,216,0,209,0,198,0,71,1,89,1,63,1,41,1,23,1,42,0,47,0,22,0,41,0,74,0,68,0,128,0,120,0,221,0,207,0,194,0,182,0,84,1,59,1,39,1,29,2,18,0,81,0,39,0,75,0,70,0,134,0,125,0,116,0,220,0,204,0,190,0,178,0,69,1,55,1,37,1,15,1,16,0,147,0,72,0,69,0,135,0,127,0,118,0,112,0,210,0,200,0,188,0,96,1,67,1,50,1,29,1,28,2,14,0,7,1,66,0,129,0,126,0,119,0,114,0,214,0,202,0,192,0,180,0,85,1,61,1,45,1,25,1,6,1,12,0,249,0,123,0,121,0,117,0,113,0,215,0,206,0,195,0,185,0,91,1,74,1,52,1,35,1,16,1,8,2,10,0,179,1,115,0,111,0,109,0,211,0,203,0,196,0,187,0,97,1,76,1,57,1,42,1,27,1,19,2,125,1,17,0,171,1,212,0,208,0,205,0,201,0,193,0,186,0,177,0,169,0,64,1,47,1,30,1,12,1,2,2,121,1,16,0,79,1,199,0,197,0,191,0,189,0,181,0,174,0,77,1,65,1,49,1,33,1,19,1,9,2,123,1,115,1,11,0,156,2,184,0,183,0,179,0,175,0,88,1,75,1,58,1,48,1,34,1,21,1,18,2,127,1,117,1,110,1,10,0,140,2,90,1,171,0,168,0,164,0,62,1,53,1,43,1,31,1,20,1,7,1,1,2,119,1,112,1,106,1,6,0,136,2,66,1,60,1,56,1,51,1,46,1,36,1,28,1,13,1,5,1,0,2,120,1,114,1,108,1,103,1,4,0,108,2,44,1,40,1,38,1,32,1,26,1,17,1,10,1,3,2,124,1,118,1,113,1,109,1,105,1,101,1,2,0,9,4,24,1,22,1,18,1,11,1,8,1,3,1,126,1,122,1,116,1,111,1,107,1,104,1,102,1,100,1,0,0,43,0,20,0,19,0,17,0,15,0,13,0,11,0,9,0,7,0,6,0,4,0,7,0,5,0,3,0,1,0,3,0,4,5,7,8,9,10,10,11,11,12,12,12,12,12,13,10,5,6,7,8,9,10,10,11,11,11,12,12,12,12,12,10,7,7,8,9,9,10,10,11,11,11,11,12,12,12,13,9,8,8,9,9,10,10,10,11,11,11,11,12,12,12,12,9,9,9,9,10,10,10,10,11,11,11,12,12,12,12,13,9,10,9,10,10,10,10,11,11,11,11,12,12,12,12,12,9,10,10,10,10,10,11,11,11,11,12,12,12,12,12,13,9,11,10,10,10,11,11,11,11,12,12,12,12,12,13,13,10,11,11,11,11,11,11,11,11,11,12,12,12,12,13,13,10,11,11,11,11,11,11,11,12,12,12,12,12,13,13,13,10,12,11,11,11,11,12,12,12,12,12,12,13,13,13,13,10,12,12,11,11,11,12,12,12,12,12,12,13,13,13,13,10,12,12,12,12,12,12,12,12,12,12,13,13,13,13,13,10,12,12,12,12,12,12,12,12,13,13,13,13,13,13,13,10,13,12,12,12,12,12,12,13,13,13,13,13,13,13,13,10,9,9,9,9,9,9,9,9,9,9,9,10,10,10,10,6,1,0,10,0,8,0,20,0,12,0,20,0,16,0,32,0,14,0,12,0,24,0,0,0,28,0,16,0,24,0,16,0,15,0,28,0,26,0,48,0,22,0,40,0,36,0,64,0,14,0,24,0,20,0,32,0,12,0,16,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,208,101,1,0,168,101,1,0,3,0,0,0,0,0,0,0,216,101,1,0,240,101,1,0,3,0,0,0,0,0,0,0,0,102,1,0,24,102,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,40,102,1,0,72,102,1,0,4,0,0,0,0,0,0,0,88,102,1,0,120,102,1,0,6,0,0,0,0,0,0,0,136,102,1,0,208,102,1,0,6,0,0,0,0,0,0,0,248,102,1,0,64,103,1,0,6,0,0,0,0,0,0,0,104,103,1,0,176,103,1,0,8,0,0,0,0,0,0,0,216,103,1,0,88,104,1,0,8,0,0,0,0,0,0,0,152,104,1,0,24,105,1,0,8,0,0,0,0,0,0,0,88,105,1,0,216,105,1,0,16,0,0,0,0,0,0,0,24,106,1,0,24,108,1,0,0,0,0,0,0,0,0,0,0,0,0,0,24,109,1,0,16,0,0,0,0,0,0,0,24,110,1,0,24,112,1,0,1,0,0,0,1,0,0,0,24,113,1,0,24,115,1,0,2,0,0,0,3,0,0,0,24,113,1,0,24,115,1,0,3,0,0,0,7,0,0,0,24,113,1,0,24,115,1,0,4,0,0,0,15,0,0,0,24,113,1,0,24,115,1,0,6,0,0,0,63,0,0,0,24,113,1,0,24,115,1,0,8,0,0,0,255,0,0,0,24,113,1,0,24,115,1,0,10,0,0,0,255,3,0,0,24,113,1,0,24,115,1,0,13,0,0,0,255,31,0,0,24,113,1,0,24,115,1,0,4,0,0,0,15,0,0,0,24,116,1,0,24,118,1,0,5,0,0,0,31,0,0,0,24,116,1,0,24,118,1,0,6,0,0,0,63,0,0,0,24,116,1,0,24,118,1,0,7,0,0,0,127,0,0,0,24,116,1,0,24,118,1,0,8,0,0,0,255,0,0,0,24,116,1,0,24,118,1,0,9,0,0,0,255,1,0,0,24,116,1,0,24,118,1,0,11,0,0,0,255,7,0,0,24,116,1,0,24,118,1,0,13,0,0,0,255,31,0,0,24,116,1,0,24,118,1,0,0,0,0,0,0,0,0,0,24,119,1,0,176,101,1,0,0,0,0,0,0,0,0,0,56,119,1,0,192,101,1,0,4,0,1,0,5,0,5,0,7,0,7,0,8,0,9,0,9,0,10,0,10,0,10,0,10,0,11,0,11,0,11,0,11,0,12,0,12,0,12,0,12,0,12,0,12,0,13,0,12,0,13,0,12,0,13,0,13,0,14,0,10,0,10,0,5,0,4,0,6,0,6,0,7,0,8,0,8,0,9,0,9,0,10,0,10,0,11,0,10,0,11,0,11,0,11,0,11,0,12,0,11,0,12,0,12,0,12,0,12,0,13,0,12,0,14,0,12,0,13,0,12,0,14,0,10,0,10,0,7,0,7,0,7,0,8,0,8,0,9,0,9,0,10,0,9,0,11,0,10,0,11,0,10,0,12,0,11,0,12,0,11,0,13,0,11,0,12,0,11,0,13,0,12,0,13,0,12,0,13,0,12,0,14,0,13,0,14,0,9,0,11,0,8,0,9,0,8,0,9,0,9,0,10,0,9,0,11,0,10,0,11,0,10,0,12,0,10,0,12,0,11,0,12,0,11,0,13,0,11,0,13,0,11,0,14,0,12,0,14,0,12,0,14,0,12,0,15,0,12,0,15,0,9,0,12,0,9,0,10,0,9,0,10,0,9,0,11,0,10,0,11,0,10,0,12,0,10,0,12,0,10,0,13,0,11,0,13,0,11,0,13,0,11,0,14,0,12,0,14,0,12,0,14,0,12,0,15,0,12,0,15,0,13,0,15,0,9,0,11,0,10,0,10,0,9,0,10,0,10,0,11,0,10,0,11,0,10,0,12,0,10,0,13,0,11,0,13,0,11,0,14,0,11,0,13,0,11,0,14,0,12,0,14,0,12,0,15,0,12,0,15,0,12,0,15,0,12,0,16,0,9,0,12,0,10,0,11,0,10,0,11,0,10,0,11,0,10,0,12,0,10,0,13,0,11,0,13,0,11,0,13,0,11,0,13,0,11,0,14,0,12,0,14,0,12,0,14,0,12,0,14,0,12,0,15,0,12,0,15,0,13,0,16,0,9,0,12,0,11,0,11,0,10,0,11,0,10,0,12,0,10,0,12,0,11,0,13,0,11,0,13,0,11,0,13,0,11,0,14,0,12,0,14,0,12,0,15,0,12,0,15,0,12,0,15,0,12,0,15,0,13,0,17,0,13,0,17,0,10,0,12,0,11,0,11,0,11,0,12,0,11,0,12,0,11,0,13,0,11,0,13,0,11,0,13,0,11,0,14,0,11,0,14,0,11,0,15,0,12,0,15,0,12,0,15,0,12,0,15,0,12,0,16,0,13,0,16,0,13,0,16,0,10,0,12,0,11,0,12,0,11,0,12,0,11,0,12,0,11,0,13,0,11,0,13,0,11,0,14,0,11,0,14,0,12,0,15,0,12,0,15,0,12,0,15,0,12,0,15,0,12,0,16,0,13,0,15,0,13,0,16,0,13,0,15,0,10,0,13,0,12,0,12,0,11,0,13,0,11,0,12,0,11,0,13,0,11,0,14,0,12,0,14,0,12,0,14,0,12,0,14,0,12,0,15,0,12,0,16,0,12,0,16,0,13,0,16,0,13,0,17,0,13,0,17,0,13,0,16,0,10,0,12,0,12,0,13,0,12,0,13,0,11,0,13,0,11,0,13,0,11,0,14,0,12,0,14,0,12,0,15,0,12,0,16,0,12,0,16,0,12,0,16,0,12,0,16,0,13,0,16,0,13,0,16,0,13,0,15,0,13,0,16,0,10,0,13,0,12,0,13,0,12,0,14,0,12,0,14,0,12,0,14,0,12,0,14,0,12,0,15,0,12,0,15,0,12,0,15,0,12,0,15,0,12,0,17,0,13,0,16,0,13,0,16,0,13,0,16,0,13,0,16,0,13,0,18,0,10,0,13,0,12,0,15,0,12,0,14,0,12,0,14,0,12,0,14,0,12,0,15,0,12,0,15,0,12,0,16,0,12,0,16,0,13,0,16,0,13,0,18,0,13,0,17,0,13,0,17,0,13,0,17,0,13,0,19,0,13,0,17,0,10,0,13,0,13,0,14,0,12,0,15,0,12,0,13,0,12,0,14,0,12,0,16,0,12,0,16,0,12,0,15,0,13,0,16,0,13,0,16,0,13,0,17,0,13,0,18,0,13,0,17,0,13,0,19,0,13,0,17,0,13,0,16,0,10,0,13,0,9,0,10,0,9,0,10,0,9,0,10,0,9,0,11,0,9,0,11,0,9,0,12,0,9,0,12,0,9,0,12,0,9,0,13,0,9,0,13,0,9,0,13,0,10,0,13,0,10,0,13,0,10,0,13,0,10,0,13,0,6,0,10,0,2,0,1,0,3,0,4,0,7,0,7,0,4,0,4,0,4,0,5,0,7,0,7,0,6,0,6,0,7,0,7,0,8,0,8,0,0,0,0,0,3,0,1,0,4,0,4,0,6,0,7,0,8,0,8,0,4,0,4,0,4,0,5,0,6,0,8,0,7,0,9,0,5,0,7,0,6,0,8,0,7,0,9,0,8,0,10,0,7,0,8,0,7,0,8,0,8,0,9,0,9,0,10,0,0,0,0,0,8,0,0,0,16,0,0,0,24,0,0,0,32,0,0,0,40,0,0,0,48,0,0,0,56,0,0,0,64,0,0,0,80,0,0,0,96,0,0,0,112,0,0,0,128,0,0,0,144,0,0,0,160,0,0,0,255,255,255,255,0,0,0,0,32,0,0,0,40,0,0,0,48,0,0,0,56,0,0,0,64,0,0,0,80,0,0,0,96,0,0,0,112,0,0,0,128,0,0,0,160,0,0,0,192,0,0,0,224,0,0,0,0,1,0,0,64,1,0,0,255,255,255,255,0,0,0,0,8,0,0,0,16,0,0,0,24,0,0,0,32,0,0,0,40,0,0,0,48,0,0,0,56,0,0,0,64,0,0,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,0,0,0,0,6,0,0,0,11,0,0,0,16,0,0,0,21,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,2,0,0,0,2,0,0,0,2,0,0,0,3,0,0,0,3,0,0,0,3,0,0,0,4,0,0,0,4,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,2,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,2,0,0,0,2,0,0,0,2,0,0,0,2,0,0,0,3,0,0,0,2,0,0,0,3,0,0,0,3,0,0,0,4,0,0,0,3,0,0,0,4,0,0,0,3,0,0,0,4,0,0,0,4,0,0,0,5,0,0,0,4,0,0,0,5,0,0,0,4,0,0,0,6,0,0,0,5,0,0,0,6,0,0,0,5,0,0,0,6,0,0,0,5,0,0,0,7,0,0,0,6,0,0,0,7,0,0,0,6,0,0,0,7,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,3,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,1,0,0,0,2,0,0,0,5,0,0,0,7,0,0,0,7,0,0,0,10,0,0,0,10,0,0,0,13,0,0,0,13,0,0,0,13,0,0,0,13,0,0,0,13,0,0,0,13,0,0,0,13,0,0,0,13,0,0,0,0,0,0,0,15,0,0,0,15,0,0,0,7,0,0,0,7,0,0,0,15,0,0,0,15,0,0,0,7,0,0,0,0,0,0,0,7,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,15,0,0,0,31,0,0,0,31,0,0,0,0,0,0,0,7,0,0,0,7,0,0,0,7,0,0,0,0,0,0,0,3,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,2,0,0,0,3,0,0,0,3,0,0,0,3,0,0,0,3,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,105,110,116,101,110,115,105,116,121,32,115,116,101,114,101,111,32,110,111,116,32,105,109,112,108,101,109,101,110,116,101,100,32,121,101,116,10,0,0,0,0,0,0,0,18,0,0,0,36,0,0,0,54,0,0,0,54,0,0,0,36,0,0,0,54,0,0,0,72,0,0,0,54,0,0,0,72,0,0,0,90,0,0,0,72,0,0,0,90,0,0,0,108,0,0,0,108,0,0,0,126,0,0,0,0,0,0,0,18,0,0,0,36,0,0,0,54,0,0,0,51,0,0,0,35,0,0,0,53,0,0,0,71,0,0,0,52,0,0,0,70,0,0,0,88,0,0,0,69,0,0,0,87,0,0,0,105,0,0,0,104,0,0,0,122,0,0,0,0,0,0,0,10,0,0,0,20,0,0,0,30,0,0,0,33,0,0,0,21,0,0,0,31,0,0,0,41,0,0,0,32,0,0,0,42,0,0,0,52,0,0,0,43,0,0,0,53,0,0,0,63,0,0,0,64,0,0,0,74,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,8,0,0,0,2,0,0,0,2,0,0,0,2,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,8,0,0,0,8,0,0,0,8,0,0,0,16,0,0,0,16,0,0,0,1,0,0,0,2,0,0,0,4,0,0,0,8,0,0,0,1,0,0,0,2,0,0,0,4,0,0,0,8,0,0,0,2,0,0,0,4,0,0,0,8,0,0,0,2,0,0,0,4,0,0,0,8,0,0,0,4,0,0,0,8,0,0,0,8,0,0,0,16,0,0,0,24,0,0,0,32,0,0,0,40,0,0,0,48,0,0,0,56,0,0,0,64,0,0,0,80,0,0,0,96,0,0,0,112,0,0,0,128,0,0,0,160,0,0,0,192,0,0,0,224,0,0,0,0,1,0,0,64,1], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+91491);
/* memory initializer */ allocate([16,0,0,0,16,0,0,0,16,0,0,0,16,0,0,1,30,0,0,1,30,0,0,73,78,84,69,82,78,65,76,32,69,82,82,79,82,32,73,78,32,86,66,82,32,78,69,87,32,67,79,68,69,32,40,49,51,49,51,41,44,32,112,108,101,97,115,101,32,115,101,110,100,32,98,117,103,32,114,101,112,111,114,116,10,109,97,120,98,105,116,115,61,37,100,32,117,115,101,100,98,105,116,115,61,37,100,10,0,0,0,73,78,84,69,82,78,65,76,32,69,82,82,79,82,32,73,78,32,86,66,82,32,78,69,87,32,67,79,68,69,32,40,57,56,54,41,44,32,112,108,101,97,115,101,32,115,101,110,100,32,98,117,103,32,114,101,112,111,114,116,10,0,0,0,15,15,15,15,15,15,15,15,15,15,15,7,7,7,7,7,7,7,7,7,7,0,0,0,7,7,7,7,7,7,3,3,3,3,3,0,0,0,0,0,0,0,0,0,0,0,0,0,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,69,114,114,111,114,58,32,99,97,110,39,116,32,97,108,108,111,99,97,116,101,32,86,98,114,70,114,97,109,101,115,32,98,117,102,102,101,114,10,0,0,0,0,0,193,192,0,0,129,193,0,0,64,1,0,0,1,195,0,0,192,3,0,0,128,2,0,0,65,194,0,0,1,198,0,0,192,6,0,0,128,7,0,0,65,199,0,0,0,5,0,0,193,197,0,0,129,196,0,0,64,4,0,0,1,204,0,0,192,12,0,0,128,13,0,0,65,205,0,0,0,15,0,0,193,207,0,0,129,206,0,0,64,14,0,0,0,10,0,0,193,202,0,0,129,203,0,0,64,11,0,0,1,201,0,0,192,9,0,0,128,8,0,0,65,200,0,0,1,216,0,0,192,24,0,0,128,25,0,0,65,217,0,0,0,27,0,0,193,219,0,0,129,218,0,0,64,26,0,0,0,30,0,0,193,222,0,0,129,223,0,0,64,31,0,0,1,221,0,0,192,29,0,0,128,28,0,0,65,220,0,0,0,20,0,0,193,212,0,0,129,213,0,0,64,21,0,0,1,215,0,0,192,23,0,0,128,22,0,0,65,214,0,0,1,210,0,0,192,18,0,0,128,19,0,0,65,211,0,0,0,17,0,0,193,209,0,0,129,208,0,0,64,16,0,0,1,240,0,0,192,48,0,0,128,49,0,0,65,241,0,0,0,51,0,0,193,243,0,0,129,242,0,0,64,50,0,0,0,54,0,0,193,246,0,0,129,247,0,0,64,55,0,0,1,245,0,0,192,53,0,0,128,52,0,0,65,244,0,0,0,60,0,0,193,252,0,0,129,253,0,0,64,61,0,0,1,255,0,0,192,63,0,0,128,62,0,0,65,254,0,0,1,250,0,0,192,58,0,0,128,59,0,0,65,251,0,0,0,57,0,0,193,249,0,0,129,248,0,0,64,56,0,0,0,40,0,0,193,232,0,0,129,233,0,0,64,41,0,0,1,235,0,0,192,43,0,0,128,42,0,0,65,234,0,0,1,238,0,0,192,46,0,0,128,47,0,0,65,239,0,0,0,45,0,0,193,237,0,0,129,236,0,0,64,44,0,0,1,228,0,0,192,36,0,0,128,37,0,0,65,229,0,0,0,39,0,0,193,231,0,0,129,230,0,0,64,38,0,0,0,34,0,0,193,226,0,0,129,227,0,0,64,35,0,0,1,225,0,0,192,33,0,0,128,32,0,0,65,224,0,0,1,160,0,0,192,96,0,0,128,97,0,0,65,161,0,0,0,99,0,0,193,163,0,0,129,162,0,0,64,98,0,0,0,102,0,0,193,166,0,0,129,167,0,0,64,103,0,0,1,165,0,0,192,101,0,0,128,100,0,0,65,164,0,0,0,108,0,0,193,172,0,0,129,173,0,0,64,109,0,0,1,175,0,0,192,111,0,0,128,110,0,0,65,174,0,0,1,170,0,0,192,106,0,0,128,107,0,0,65,171,0,0,0,105,0,0,193,169,0,0,129,168,0,0,64,104,0,0,0,120,0,0,193,184,0,0,129,185,0,0,64,121,0,0,1,187,0,0,192,123,0,0,128,122,0,0,65,186,0,0,1,190,0,0,192,126,0,0,128,127,0,0,65,191,0,0,0,125,0,0,193,189,0,0,129,188,0,0,64,124,0,0,1,180,0,0,192,116,0,0,128,117,0,0,65,181,0,0,0,119,0,0,193,183,0,0,129,182,0,0,64,118,0,0,0,114,0,0,193,178,0,0,129,179,0,0,64,115,0,0,1,177,0,0,192,113,0,0,128,112,0,0,65,176,0,0,0,80,0,0,193,144,0,0,129,145,0,0,64,81,0,0,1,147,0,0,192,83,0,0,128,82,0,0,65,146,0,0,1,150,0,0,192,86,0,0,128,87,0,0,65,151,0,0,0,85,0,0,193,149,0,0,129,148,0,0,64,84,0,0,1,156,0,0,192,92,0,0,128,93,0,0,65,157,0,0,0,95,0,0,193,159,0,0,129,158,0,0,64,94,0,0,0,90,0,0,193,154,0,0,129,155,0,0,64,91,0,0,1,153,0,0,192,89,0,0,128,88,0,0,65,152,0,0,1,136,0,0,192,72,0,0,128,73,0,0,65,137,0,0,0,75,0,0,193,139,0,0,129,138,0,0,64,74,0,0,0,78,0,0,193,142,0,0,129,143,0,0,64,79,0,0,1,141,0,0,192,77,0,0,128,76,0,0,65,140,0,0,0,68,0,0,193,132,0,0,129,133,0,0,64,69,0,0,1,135,0,0,192,71,0,0,128,70,0,0,65,134,0,0,1,130,0,0,192,66,0,0,128,67,0,0,65,131,0,0,0,65,0,0,193,129,0,0,129,128,0,0,64,64,0,0,8,144,1,0,0,0,0,0,51,46,57,57,46,53,0,0,8,144,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,17,0,10,0,17,17,17,0,0,0,0,5,0,0,0,0,0,0,9,0,0,0,0,11,0,0,0,0,0,0,0,0,17,0,15,10,17,17,17,3,10,7,0,1,19,9,11,11,0,0,9,6,11,0,0,11,0,6,17,0,0,0,17,17,17,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,17,0,10,10,17,17,17,0,10,0,0,2,0,9,11,0,0,0,9,0,11,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,12,0,0,0,0,9,12,0,0,0,0,0,12,0,0,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,14,0,0,0,0,0,0,0,0,0,0,0,13,0,0,0,4,13,0,0,0,0,9,14,0,0,0,0,0,14,0,0,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,0,0,0,0,0,0,0,0,0,0,0,15,0,0,0,0,15,0,0,0,0,9,16,0,0,0,0,0,16,0,0,16,0,0,18,0,0,0,18,18,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,18,0,0,0,18,18,18,0,0,0,0,0,0,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,0,0,0,10,0,0,0,0,10,0,0,0,0,9,11,0,0,0,0,0,11,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,12,0,0,0,0,9,12,0,0,0,0,0,12,0,0,12,0,0,45,43,32,32,32,48,88,48,120,0,0,0,0,0,0,0,40,110,117,108,108,41,0,0,45,48,88,43,48,88,32,48,88,45,48,120,43,48,120,32,48,120,0,0,0,0,0,0,105,110,102,0,0,0,0,0,73,78,70,0,0,0,0,0,110,97,110,0,0,0,0,0,78,65,78,0,0,0,0,0,48,49,50,51,52,53,54,55,56,57,65,66,67,68,69,70,46,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+101065);




var tempDoublePtr = Runtime.alignMemory(allocate(12, "i8", ALLOC_STATIC), 8);

assert(tempDoublePtr % 8 == 0);

function copyTempFloat(ptr) { // functions, because inlining this code increases code size too much

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

}

function copyTempDouble(ptr) {

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

  HEAP8[tempDoublePtr+4] = HEAP8[ptr+4];

  HEAP8[tempDoublePtr+5] = HEAP8[ptr+5];

  HEAP8[tempDoublePtr+6] = HEAP8[ptr+6];

  HEAP8[tempDoublePtr+7] = HEAP8[ptr+7];

}


   
  Module["_i64Subtract"] = _i64Subtract;

  var _fabsf=Math_abs;

  
  
  var ___errno_state=0;function ___setErrNo(value) {
      // For convenient setting and returning of errno.
      HEAP32[((___errno_state)>>2)]=value;
      return value;
    }
  
  var ERRNO_CODES={EPERM:1,ENOENT:2,ESRCH:3,EINTR:4,EIO:5,ENXIO:6,E2BIG:7,ENOEXEC:8,EBADF:9,ECHILD:10,EAGAIN:11,EWOULDBLOCK:11,ENOMEM:12,EACCES:13,EFAULT:14,ENOTBLK:15,EBUSY:16,EEXIST:17,EXDEV:18,ENODEV:19,ENOTDIR:20,EISDIR:21,EINVAL:22,ENFILE:23,EMFILE:24,ENOTTY:25,ETXTBSY:26,EFBIG:27,ENOSPC:28,ESPIPE:29,EROFS:30,EMLINK:31,EPIPE:32,EDOM:33,ERANGE:34,ENOMSG:42,EIDRM:43,ECHRNG:44,EL2NSYNC:45,EL3HLT:46,EL3RST:47,ELNRNG:48,EUNATCH:49,ENOCSI:50,EL2HLT:51,EDEADLK:35,ENOLCK:37,EBADE:52,EBADR:53,EXFULL:54,ENOANO:55,EBADRQC:56,EBADSLT:57,EDEADLOCK:35,EBFONT:59,ENOSTR:60,ENODATA:61,ETIME:62,ENOSR:63,ENONET:64,ENOPKG:65,EREMOTE:66,ENOLINK:67,EADV:68,ESRMNT:69,ECOMM:70,EPROTO:71,EMULTIHOP:72,EDOTDOT:73,EBADMSG:74,ENOTUNIQ:76,EBADFD:77,EREMCHG:78,ELIBACC:79,ELIBBAD:80,ELIBSCN:81,ELIBMAX:82,ELIBEXEC:83,ENOSYS:38,ENOTEMPTY:39,ENAMETOOLONG:36,ELOOP:40,EOPNOTSUPP:95,EPFNOSUPPORT:96,ECONNRESET:104,ENOBUFS:105,EAFNOSUPPORT:97,EPROTOTYPE:91,ENOTSOCK:88,ENOPROTOOPT:92,ESHUTDOWN:108,ECONNREFUSED:111,EADDRINUSE:98,ECONNABORTED:103,ENETUNREACH:101,ENETDOWN:100,ETIMEDOUT:110,EHOSTDOWN:112,EHOSTUNREACH:113,EINPROGRESS:115,EALREADY:114,EDESTADDRREQ:89,EMSGSIZE:90,EPROTONOSUPPORT:93,ESOCKTNOSUPPORT:94,EADDRNOTAVAIL:99,ENETRESET:102,EISCONN:106,ENOTCONN:107,ETOOMANYREFS:109,EUSERS:87,EDQUOT:122,ESTALE:116,ENOTSUP:95,ENOMEDIUM:123,EILSEQ:84,EOVERFLOW:75,ECANCELED:125,ENOTRECOVERABLE:131,EOWNERDEAD:130,ESTRPIPE:86};function _sysconf(name) {
      // long sysconf(int name);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/sysconf.html
      switch(name) {
        case 30: return PAGE_SIZE;
        case 132:
        case 133:
        case 12:
        case 137:
        case 138:
        case 15:
        case 235:
        case 16:
        case 17:
        case 18:
        case 19:
        case 20:
        case 149:
        case 13:
        case 10:
        case 236:
        case 153:
        case 9:
        case 21:
        case 22:
        case 159:
        case 154:
        case 14:
        case 77:
        case 78:
        case 139:
        case 80:
        case 81:
        case 79:
        case 82:
        case 68:
        case 67:
        case 164:
        case 11:
        case 29:
        case 47:
        case 48:
        case 95:
        case 52:
        case 51:
        case 46:
          return 200809;
        case 27:
        case 246:
        case 127:
        case 128:
        case 23:
        case 24:
        case 160:
        case 161:
        case 181:
        case 182:
        case 242:
        case 183:
        case 184:
        case 243:
        case 244:
        case 245:
        case 165:
        case 178:
        case 179:
        case 49:
        case 50:
        case 168:
        case 169:
        case 175:
        case 170:
        case 171:
        case 172:
        case 97:
        case 76:
        case 32:
        case 173:
        case 35:
          return -1;
        case 176:
        case 177:
        case 7:
        case 155:
        case 8:
        case 157:
        case 125:
        case 126:
        case 92:
        case 93:
        case 129:
        case 130:
        case 131:
        case 94:
        case 91:
          return 1;
        case 74:
        case 60:
        case 69:
        case 70:
        case 4:
          return 1024;
        case 31:
        case 42:
        case 72:
          return 32;
        case 87:
        case 26:
        case 33:
          return 2147483647;
        case 34:
        case 1:
          return 47839;
        case 38:
        case 36:
          return 99;
        case 43:
        case 37:
          return 2048;
        case 0: return 2097152;
        case 3: return 65536;
        case 28: return 32768;
        case 44: return 32767;
        case 75: return 16384;
        case 39: return 1000;
        case 89: return 700;
        case 71: return 256;
        case 40: return 255;
        case 2: return 100;
        case 180: return 64;
        case 25: return 20;
        case 5: return 16;
        case 6: return 6;
        case 73: return 4;
        case 84: {
          if (typeof navigator === 'object') return navigator['hardwareConcurrency'] || 1;
          return 1;
        }
      }
      ___setErrNo(ERRNO_CODES.EINVAL);
      return -1;
    }

   
  Module["_memset"] = _memset;

  var _BDtoILow=true;

  
  
  var ERRNO_MESSAGES={0:"Success",1:"Not super-user",2:"No such file or directory",3:"No such process",4:"Interrupted system call",5:"I/O error",6:"No such device or address",7:"Arg list too long",8:"Exec format error",9:"Bad file number",10:"No children",11:"No more processes",12:"Not enough core",13:"Permission denied",14:"Bad address",15:"Block device required",16:"Mount device busy",17:"File exists",18:"Cross-device link",19:"No such device",20:"Not a directory",21:"Is a directory",22:"Invalid argument",23:"Too many open files in system",24:"Too many open files",25:"Not a typewriter",26:"Text file busy",27:"File too large",28:"No space left on device",29:"Illegal seek",30:"Read only file system",31:"Too many links",32:"Broken pipe",33:"Math arg out of domain of func",34:"Math result not representable",35:"File locking deadlock error",36:"File or path name too long",37:"No record locks available",38:"Function not implemented",39:"Directory not empty",40:"Too many symbolic links",42:"No message of desired type",43:"Identifier removed",44:"Channel number out of range",45:"Level 2 not synchronized",46:"Level 3 halted",47:"Level 3 reset",48:"Link number out of range",49:"Protocol driver not attached",50:"No CSI structure available",51:"Level 2 halted",52:"Invalid exchange",53:"Invalid request descriptor",54:"Exchange full",55:"No anode",56:"Invalid request code",57:"Invalid slot",59:"Bad font file fmt",60:"Device not a stream",61:"No data (for no delay io)",62:"Timer expired",63:"Out of streams resources",64:"Machine is not on the network",65:"Package not installed",66:"The object is remote",67:"The link has been severed",68:"Advertise error",69:"Srmount error",70:"Communication error on send",71:"Protocol error",72:"Multihop attempted",73:"Cross mount point (not really error)",74:"Trying to read unreadable message",75:"Value too large for defined data type",76:"Given log. name not unique",77:"f.d. invalid for this operation",78:"Remote address changed",79:"Can   access a needed shared lib",80:"Accessing a corrupted shared lib",81:".lib section in a.out corrupted",82:"Attempting to link in too many libs",83:"Attempting to exec a shared library",84:"Illegal byte sequence",86:"Streams pipe error",87:"Too many users",88:"Socket operation on non-socket",89:"Destination address required",90:"Message too long",91:"Protocol wrong type for socket",92:"Protocol not available",93:"Unknown protocol",94:"Socket type not supported",95:"Not supported",96:"Protocol family not supported",97:"Address family not supported by protocol family",98:"Address already in use",99:"Address not available",100:"Network interface is not configured",101:"Network is unreachable",102:"Connection reset by network",103:"Connection aborted",104:"Connection reset by peer",105:"No buffer space available",106:"Socket is already connected",107:"Socket is not connected",108:"Can't send after socket shutdown",109:"Too many references",110:"Connection timed out",111:"Connection refused",112:"Host is down",113:"Host is unreachable",114:"Socket already connected",115:"Connection already in progress",116:"Stale file handle",122:"Quota exceeded",123:"No medium (in tape drive)",125:"Operation canceled",130:"Previous owner died",131:"State not recoverable"};function _strerror_r(errnum, strerrbuf, buflen) {
      if (errnum in ERRNO_MESSAGES) {
        if (ERRNO_MESSAGES[errnum].length > buflen - 1) {
          return ___setErrNo(ERRNO_CODES.ERANGE);
        } else {
          var msg = ERRNO_MESSAGES[errnum];
          writeAsciiToMemory(msg, strerrbuf);
          return 0;
        }
      } else {
        return ___setErrNo(ERRNO_CODES.EINVAL);
      }
    }function _strerror(errnum) {
      if (!_strerror.buffer) _strerror.buffer = _malloc(256);
      _strerror_r(errnum, _strerror.buffer, 256);
      return _strerror.buffer;
    }

   
  Module["_bitshift64Shl"] = _bitshift64Shl;

  function _abort() {
      Module['abort']();
    }

  
  
  var PATH={splitPath:function (filename) {
        var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
        return splitPathRe.exec(filename).slice(1);
      },normalizeArray:function (parts, allowAboveRoot) {
        // if the path tries to go above the root, `up` ends up > 0
        var up = 0;
        for (var i = parts.length - 1; i >= 0; i--) {
          var last = parts[i];
          if (last === '.') {
            parts.splice(i, 1);
          } else if (last === '..') {
            parts.splice(i, 1);
            up++;
          } else if (up) {
            parts.splice(i, 1);
            up--;
          }
        }
        // if the path is allowed to go above the root, restore leading ..s
        if (allowAboveRoot) {
          for (; up--; up) {
            parts.unshift('..');
          }
        }
        return parts;
      },normalize:function (path) {
        var isAbsolute = path.charAt(0) === '/',
            trailingSlash = path.substr(-1) === '/';
        // Normalize the path
        path = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), !isAbsolute).join('/');
        if (!path && !isAbsolute) {
          path = '.';
        }
        if (path && trailingSlash) {
          path += '/';
        }
        return (isAbsolute ? '/' : '') + path;
      },dirname:function (path) {
        var result = PATH.splitPath(path),
            root = result[0],
            dir = result[1];
        if (!root && !dir) {
          // No dirname whatsoever
          return '.';
        }
        if (dir) {
          // It has a dirname, strip trailing slash
          dir = dir.substr(0, dir.length - 1);
        }
        return root + dir;
      },basename:function (path) {
        // EMSCRIPTEN return '/'' for '/', not an empty string
        if (path === '/') return '/';
        var lastSlash = path.lastIndexOf('/');
        if (lastSlash === -1) return path;
        return path.substr(lastSlash+1);
      },extname:function (path) {
        return PATH.splitPath(path)[3];
      },join:function () {
        var paths = Array.prototype.slice.call(arguments, 0);
        return PATH.normalize(paths.join('/'));
      },join2:function (l, r) {
        return PATH.normalize(l + '/' + r);
      },resolve:function () {
        var resolvedPath = '',
          resolvedAbsolute = false;
        for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
          var path = (i >= 0) ? arguments[i] : FS.cwd();
          // Skip empty and invalid entries
          if (typeof path !== 'string') {
            throw new TypeError('Arguments to path.resolve must be strings');
          } else if (!path) {
            return ''; // an invalid portion invalidates the whole thing
          }
          resolvedPath = path + '/' + resolvedPath;
          resolvedAbsolute = path.charAt(0) === '/';
        }
        // At this point the path should be resolved to a full absolute path, but
        // handle relative paths to be safe (might happen when process.cwd() fails)
        resolvedPath = PATH.normalizeArray(resolvedPath.split('/').filter(function(p) {
          return !!p;
        }), !resolvedAbsolute).join('/');
        return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
      },relative:function (from, to) {
        from = PATH.resolve(from).substr(1);
        to = PATH.resolve(to).substr(1);
        function trim(arr) {
          var start = 0;
          for (; start < arr.length; start++) {
            if (arr[start] !== '') break;
          }
          var end = arr.length - 1;
          for (; end >= 0; end--) {
            if (arr[end] !== '') break;
          }
          if (start > end) return [];
          return arr.slice(start, end - start + 1);
        }
        var fromParts = trim(from.split('/'));
        var toParts = trim(to.split('/'));
        var length = Math.min(fromParts.length, toParts.length);
        var samePartsLength = length;
        for (var i = 0; i < length; i++) {
          if (fromParts[i] !== toParts[i]) {
            samePartsLength = i;
            break;
          }
        }
        var outputParts = [];
        for (var i = samePartsLength; i < fromParts.length; i++) {
          outputParts.push('..');
        }
        outputParts = outputParts.concat(toParts.slice(samePartsLength));
        return outputParts.join('/');
      }};
  
  var TTY={ttys:[],init:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // currently, FS.init does not distinguish if process.stdin is a file or TTY
        //   // device, it always assumes it's a TTY device. because of this, we're forcing
        //   // process.stdin to UTF8 encoding to at least make stdin reading compatible
        //   // with text files until FS.init can be refactored.
        //   process['stdin']['setEncoding']('utf8');
        // }
      },shutdown:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // inolen: any idea as to why node -e 'process.stdin.read()' wouldn't exit immediately (with process.stdin being a tty)?
        //   // isaacs: because now it's reading from the stream, you've expressed interest in it, so that read() kicks off a _read() which creates a ReadReq operation
        //   // inolen: I thought read() in that case was a synchronous operation that just grabbed some amount of buffered data if it exists?
        //   // isaacs: it is. but it also triggers a _read() call, which calls readStart() on the handle
        //   // isaacs: do process.stdin.pause() and i'd think it'd probably close the pending call
        //   process['stdin']['pause']();
        // }
      },register:function (dev, ops) {
        TTY.ttys[dev] = { input: [], output: [], ops: ops };
        FS.registerDevice(dev, TTY.stream_ops);
      },stream_ops:{open:function (stream) {
          var tty = TTY.ttys[stream.node.rdev];
          if (!tty) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          stream.tty = tty;
          stream.seekable = false;
        },close:function (stream) {
          // flush any pending line data
          if (stream.tty.output.length) {
            stream.tty.ops.put_char(stream.tty, 10);
          }
        },read:function (stream, buffer, offset, length, pos /* ignored */) {
          if (!stream.tty || !stream.tty.ops.get_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          var bytesRead = 0;
          for (var i = 0; i < length; i++) {
            var result;
            try {
              result = stream.tty.ops.get_char(stream.tty);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            if (result === undefined && bytesRead === 0) {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
            if (result === null || result === undefined) break;
            bytesRead++;
            buffer[offset+i] = result;
          }
          if (bytesRead) {
            stream.node.timestamp = Date.now();
          }
          return bytesRead;
        },write:function (stream, buffer, offset, length, pos) {
          if (!stream.tty || !stream.tty.ops.put_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          for (var i = 0; i < length; i++) {
            try {
              stream.tty.ops.put_char(stream.tty, buffer[offset+i]);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
          }
          if (length) {
            stream.node.timestamp = Date.now();
          }
          return i;
        }},default_tty_ops:{get_char:function (tty) {
          if (!tty.input.length) {
            var result = null;
            if (ENVIRONMENT_IS_NODE) {
              result = process['stdin']['read']();
              if (!result) {
                if (process['stdin']['_readableState'] && process['stdin']['_readableState']['ended']) {
                  return null;  // EOF
                }
                return undefined;  // no data available
              }
            } else if (typeof window != 'undefined' &&
              typeof window.prompt == 'function') {
              // Browser.
              result = window.prompt('Input: ');  // returns null on cancel
              if (result !== null) {
                result += '\n';
              }
            } else if (typeof readline == 'function') {
              // Command line.
              result = readline();
              if (result !== null) {
                result += '\n';
              }
            }
            if (!result) {
              return null;
            }
            tty.input = intArrayFromString(result, true);
          }
          return tty.input.shift();
        },put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['print'](tty.output.join(''));
            tty.output = [];
          } else {
            tty.output.push(TTY.utf8.processCChar(val));
          }
        }},default_tty1_ops:{put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['printErr'](tty.output.join(''));
            tty.output = [];
          } else {
            tty.output.push(TTY.utf8.processCChar(val));
          }
        }}};
  
  var MEMFS={ops_table:null,mount:function (mount) {
        return MEMFS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);
      },createNode:function (parent, name, mode, dev) {
        if (FS.isBlkdev(mode) || FS.isFIFO(mode)) {
          // no supported
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (!MEMFS.ops_table) {
          MEMFS.ops_table = {
            dir: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                lookup: MEMFS.node_ops.lookup,
                mknod: MEMFS.node_ops.mknod,
                rename: MEMFS.node_ops.rename,
                unlink: MEMFS.node_ops.unlink,
                rmdir: MEMFS.node_ops.rmdir,
                readdir: MEMFS.node_ops.readdir,
                symlink: MEMFS.node_ops.symlink
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek
              }
            },
            file: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek,
                read: MEMFS.stream_ops.read,
                write: MEMFS.stream_ops.write,
                allocate: MEMFS.stream_ops.allocate,
                mmap: MEMFS.stream_ops.mmap
              }
            },
            link: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                readlink: MEMFS.node_ops.readlink
              },
              stream: {}
            },
            chrdev: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: FS.chrdev_stream_ops
            },
          };
        }
        var node = FS.createNode(parent, name, mode, dev);
        if (FS.isDir(node.mode)) {
          node.node_ops = MEMFS.ops_table.dir.node;
          node.stream_ops = MEMFS.ops_table.dir.stream;
          node.contents = {};
        } else if (FS.isFile(node.mode)) {
          node.node_ops = MEMFS.ops_table.file.node;
          node.stream_ops = MEMFS.ops_table.file.stream;
          node.usedBytes = 0; // The actual number of bytes used in the typed array, as opposed to contents.buffer.byteLength which gives the whole capacity.
          // When the byte data of the file is populated, this will point to either a typed array, or a normal JS array. Typed arrays are preferred
          // for performance, and used by default. However, typed arrays are not resizable like normal JS arrays are, so there is a small disk size
          // penalty involved for appending file writes that continuously grow a file similar to std::vector capacity vs used -scheme.
          node.contents = null; 
        } else if (FS.isLink(node.mode)) {
          node.node_ops = MEMFS.ops_table.link.node;
          node.stream_ops = MEMFS.ops_table.link.stream;
        } else if (FS.isChrdev(node.mode)) {
          node.node_ops = MEMFS.ops_table.chrdev.node;
          node.stream_ops = MEMFS.ops_table.chrdev.stream;
        }
        node.timestamp = Date.now();
        // add the new node to the parent
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },getFileDataAsRegularArray:function (node) {
        if (node.contents && node.contents.subarray) {
          var arr = [];
          for (var i = 0; i < node.usedBytes; ++i) arr.push(node.contents[i]);
          return arr; // Returns a copy of the original data.
        }
        return node.contents; // No-op, the file contents are already in a JS array. Return as-is.
      },getFileDataAsTypedArray:function (node) {
        if (node.contents && node.contents.subarray) return node.contents.subarray(0, node.usedBytes); // Make sure to not return excess unused bytes.
        return new Uint8Array(node.contents);
      },expandFileStorage:function (node, newCapacity) {
  
        // If we are asked to expand the size of a file that already exists, revert to using a standard JS array to store the file
        // instead of a typed array. This makes resizing the array more flexible because we can just .push() elements at the back to
        // increase the size.
        if (node.contents && node.contents.subarray && newCapacity > node.contents.length) {
          node.contents = MEMFS.getFileDataAsRegularArray(node);
          node.usedBytes = node.contents.length; // We might be writing to a lazy-loaded file which had overridden this property, so force-reset it.
        }
  
        if (!node.contents || node.contents.subarray) { // Keep using a typed array if creating a new storage, or if old one was a typed array as well.
          var prevCapacity = node.contents ? node.contents.buffer.byteLength : 0;
          if (prevCapacity >= newCapacity) return; // No need to expand, the storage was already large enough.
          // Don't expand strictly to the given requested limit if it's only a very small increase, but instead geometrically grow capacity.
          // For small filesizes (<1MB), perform size*2 geometric increase, but for large sizes, do a much more conservative size*1.125 increase to
          // avoid overshooting the allocation cap by a very large margin.
          var CAPACITY_DOUBLING_MAX = 1024 * 1024;
          newCapacity = Math.max(newCapacity, (prevCapacity * (prevCapacity < CAPACITY_DOUBLING_MAX ? 2.0 : 1.125)) | 0);
          if (prevCapacity != 0) newCapacity = Math.max(newCapacity, 256); // At minimum allocate 256b for each file when expanding.
          var oldContents = node.contents;
          node.contents = new Uint8Array(newCapacity); // Allocate new storage.
          if (node.usedBytes > 0) node.contents.set(oldContents.subarray(0, node.usedBytes), 0); // Copy old data over to the new storage.
          return;
        }
        // Not using a typed array to back the file storage. Use a standard JS array instead.
        if (!node.contents && newCapacity > 0) node.contents = [];
        while (node.contents.length < newCapacity) node.contents.push(0);
      },resizeFileStorage:function (node, newSize) {
        if (node.usedBytes == newSize) return;
        if (newSize == 0) {
          node.contents = null; // Fully decommit when requesting a resize to zero.
          node.usedBytes = 0;
          return;
        }
  
        if (!node.contents || node.contents.subarray) { // Resize a typed array if that is being used as the backing store.
          var oldContents = node.contents;
          node.contents = new Uint8Array(new ArrayBuffer(newSize)); // Allocate new storage.
          if (oldContents) {
            node.contents.set(oldContents.subarray(0, Math.min(newSize, node.usedBytes))); // Copy old data over to the new storage.
          }
          node.usedBytes = newSize;
          return;
        }
        // Backing with a JS array.
        if (!node.contents) node.contents = [];
        if (node.contents.length > newSize) node.contents.length = newSize;
        else while (node.contents.length < newSize) node.contents.push(0);
        node.usedBytes = newSize;
      },node_ops:{getattr:function (node) {
          var attr = {};
          // device numbers reuse inode numbers.
          attr.dev = FS.isChrdev(node.mode) ? node.id : 1;
          attr.ino = node.id;
          attr.mode = node.mode;
          attr.nlink = 1;
          attr.uid = 0;
          attr.gid = 0;
          attr.rdev = node.rdev;
          if (FS.isDir(node.mode)) {
            attr.size = 4096;
          } else if (FS.isFile(node.mode)) {
            attr.size = node.usedBytes;
          } else if (FS.isLink(node.mode)) {
            attr.size = node.link.length;
          } else {
            attr.size = 0;
          }
          attr.atime = new Date(node.timestamp);
          attr.mtime = new Date(node.timestamp);
          attr.ctime = new Date(node.timestamp);
          // NOTE: In our implementation, st_blocks = Math.ceil(st_size/st_blksize),
          //       but this is not required by the standard.
          attr.blksize = 4096;
          attr.blocks = Math.ceil(attr.size / attr.blksize);
          return attr;
        },setattr:function (node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
          if (attr.size !== undefined) {
            MEMFS.resizeFileStorage(node, attr.size);
          }
        },lookup:function (parent, name) {
          throw FS.genericErrors[ERRNO_CODES.ENOENT];
        },mknod:function (parent, name, mode, dev) {
          return MEMFS.createNode(parent, name, mode, dev);
        },rename:function (old_node, new_dir, new_name) {
          // if we're overwriting a directory at new_name, make sure it's empty.
          if (FS.isDir(old_node.mode)) {
            var new_node;
            try {
              new_node = FS.lookupNode(new_dir, new_name);
            } catch (e) {
            }
            if (new_node) {
              for (var i in new_node.contents) {
                throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
              }
            }
          }
          // do the internal rewiring
          delete old_node.parent.contents[old_node.name];
          old_node.name = new_name;
          new_dir.contents[new_name] = old_node;
          old_node.parent = new_dir;
        },unlink:function (parent, name) {
          delete parent.contents[name];
        },rmdir:function (parent, name) {
          var node = FS.lookupNode(parent, name);
          for (var i in node.contents) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
          }
          delete parent.contents[name];
        },readdir:function (node) {
          var entries = ['.', '..']
          for (var key in node.contents) {
            if (!node.contents.hasOwnProperty(key)) {
              continue;
            }
            entries.push(key);
          }
          return entries;
        },symlink:function (parent, newname, oldpath) {
          var node = MEMFS.createNode(parent, newname, 511 /* 0777 */ | 40960, 0);
          node.link = oldpath;
          return node;
        },readlink:function (node) {
          if (!FS.isLink(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return node.link;
        }},stream_ops:{read:function (stream, buffer, offset, length, position) {
          var contents = stream.node.contents;
          if (position >= stream.node.usedBytes) return 0;
          var size = Math.min(stream.node.usedBytes - position, length);
          assert(size >= 0);
          if (size > 8 && contents.subarray) { // non-trivial, and typed array
            buffer.set(contents.subarray(position, position + size), offset);
          } else
          {
            for (var i = 0; i < size; i++) buffer[offset + i] = contents[position + i];
          }
          return size;
        },write:function (stream, buffer, offset, length, position, canOwn) {
          if (!length) return 0;
          var node = stream.node;
          node.timestamp = Date.now();
  
          if (buffer.subarray && (!node.contents || node.contents.subarray)) { // This write is from a typed array to a typed array?
            if (canOwn) { // Can we just reuse the buffer we are given?
              node.contents = buffer.subarray(offset, offset + length);
              node.usedBytes = length;
              return length;
            } else if (node.usedBytes === 0 && position === 0) { // If this is a simple first write to an empty file, do a fast set since we don't need to care about old data.
              node.contents = new Uint8Array(buffer.subarray(offset, offset + length));
              node.usedBytes = length;
              return length;
            } else if (position + length <= node.usedBytes) { // Writing to an already allocated and used subrange of the file?
              node.contents.set(buffer.subarray(offset, offset + length), position);
              return length;
            }
          }
          // Appending to an existing file and we need to reallocate, or source data did not come as a typed array.
          MEMFS.expandFileStorage(node, position+length);
          if (node.contents.subarray && buffer.subarray) node.contents.set(buffer.subarray(offset, offset + length), position); // Use typed array write if available.
          else
            for (var i = 0; i < length; i++) {
             node.contents[position + i] = buffer[offset + i]; // Or fall back to manual write if not.
            }
          node.usedBytes = Math.max(node.usedBytes, position+length);
          return length;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.usedBytes;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          stream.ungotten = [];
          stream.position = position;
          return position;
        },allocate:function (stream, offset, length) {
          MEMFS.expandFileStorage(stream.node, offset + length);
          stream.node.usedBytes = Math.max(stream.node.usedBytes, offset + length);
        },mmap:function (stream, buffer, offset, length, position, prot, flags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          var ptr;
          var allocated;
          var contents = stream.node.contents;
          // Only make a new copy when MAP_PRIVATE is specified.
          if ( !(flags & 2) &&
                (contents.buffer === buffer || contents.buffer === buffer.buffer) ) {
            // We can't emulate MAP_SHARED when the file is not backed by the buffer
            // we're mapping to (e.g. the HEAP buffer).
            allocated = false;
            ptr = contents.byteOffset;
          } else {
            // Try to avoid unnecessary slices.
            if (position > 0 || position + length < stream.node.usedBytes) {
              if (contents.subarray) {
                contents = contents.subarray(position, position + length);
              } else {
                contents = Array.prototype.slice.call(contents, position, position + length);
              }
            }
            allocated = true;
            ptr = _malloc(length);
            if (!ptr) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOMEM);
            }
            buffer.set(contents, ptr);
          }
          return { ptr: ptr, allocated: allocated };
        }}};
  
  var IDBFS={dbs:{},indexedDB:function () {
        if (typeof indexedDB !== 'undefined') return indexedDB;
        var ret = null;
        if (typeof window === 'object') ret = window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
        assert(ret, 'IDBFS used, but indexedDB not supported');
        return ret;
      },DB_VERSION:21,DB_STORE_NAME:"FILE_DATA",mount:function (mount) {
        // reuse all of the core MEMFS functionality
        return MEMFS.mount.apply(null, arguments);
      },syncfs:function (mount, populate, callback) {
        IDBFS.getLocalSet(mount, function(err, local) {
          if (err) return callback(err);
  
          IDBFS.getRemoteSet(mount, function(err, remote) {
            if (err) return callback(err);
  
            var src = populate ? remote : local;
            var dst = populate ? local : remote;
  
            IDBFS.reconcile(src, dst, callback);
          });
        });
      },getDB:function (name, callback) {
        // check the cache first
        var db = IDBFS.dbs[name];
        if (db) {
          return callback(null, db);
        }
  
        var req;
        try {
          req = IDBFS.indexedDB().open(name, IDBFS.DB_VERSION);
        } catch (e) {
          return callback(e);
        }
        req.onupgradeneeded = function(e) {
          var db = e.target.result;
          var transaction = e.target.transaction;
  
          var fileStore;
  
          if (db.objectStoreNames.contains(IDBFS.DB_STORE_NAME)) {
            fileStore = transaction.objectStore(IDBFS.DB_STORE_NAME);
          } else {
            fileStore = db.createObjectStore(IDBFS.DB_STORE_NAME);
          }
  
          fileStore.createIndex('timestamp', 'timestamp', { unique: false });
        };
        req.onsuccess = function() {
          db = req.result;
  
          // add to the cache
          IDBFS.dbs[name] = db;
          callback(null, db);
        };
        req.onerror = function() {
          callback(this.error);
        };
      },getLocalSet:function (mount, callback) {
        var entries = {};
  
        function isRealDir(p) {
          return p !== '.' && p !== '..';
        };
        function toAbsolute(root) {
          return function(p) {
            return PATH.join2(root, p);
          }
        };
  
        var check = FS.readdir(mount.mountpoint).filter(isRealDir).map(toAbsolute(mount.mountpoint));
  
        while (check.length) {
          var path = check.pop();
          var stat;
  
          try {
            stat = FS.stat(path);
          } catch (e) {
            return callback(e);
          }
  
          if (FS.isDir(stat.mode)) {
            check.push.apply(check, FS.readdir(path).filter(isRealDir).map(toAbsolute(path)));
          }
  
          entries[path] = { timestamp: stat.mtime };
        }
  
        return callback(null, { type: 'local', entries: entries });
      },getRemoteSet:function (mount, callback) {
        var entries = {};
  
        IDBFS.getDB(mount.mountpoint, function(err, db) {
          if (err) return callback(err);
  
          var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readonly');
          transaction.onerror = function() { callback(this.error); };
  
          var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
          var index = store.index('timestamp');
  
          index.openKeyCursor().onsuccess = function(event) {
            var cursor = event.target.result;
  
            if (!cursor) {
              return callback(null, { type: 'remote', db: db, entries: entries });
            }
  
            entries[cursor.primaryKey] = { timestamp: cursor.key };
  
            cursor.continue();
          };
        });
      },loadLocalEntry:function (path, callback) {
        var stat, node;
  
        try {
          var lookup = FS.lookupPath(path);
          node = lookup.node;
          stat = FS.stat(path);
        } catch (e) {
          return callback(e);
        }
  
        if (FS.isDir(stat.mode)) {
          return callback(null, { timestamp: stat.mtime, mode: stat.mode });
        } else if (FS.isFile(stat.mode)) {
          // Performance consideration: storing a normal JavaScript array to a IndexedDB is much slower than storing a typed array.
          // Therefore always convert the file contents to a typed array first before writing the data to IndexedDB.
          node.contents = MEMFS.getFileDataAsTypedArray(node);
          return callback(null, { timestamp: stat.mtime, mode: stat.mode, contents: node.contents });
        } else {
          return callback(new Error('node type not supported'));
        }
      },storeLocalEntry:function (path, entry, callback) {
        try {
          if (FS.isDir(entry.mode)) {
            FS.mkdir(path, entry.mode);
          } else if (FS.isFile(entry.mode)) {
            FS.writeFile(path, entry.contents, { encoding: 'binary', canOwn: true });
          } else {
            return callback(new Error('node type not supported'));
          }
  
          FS.utime(path, entry.timestamp, entry.timestamp);
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },removeLocalEntry:function (path, callback) {
        try {
          var lookup = FS.lookupPath(path);
          var stat = FS.stat(path);
  
          if (FS.isDir(stat.mode)) {
            FS.rmdir(path);
          } else if (FS.isFile(stat.mode)) {
            FS.unlink(path);
          }
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },loadRemoteEntry:function (store, path, callback) {
        var req = store.get(path);
        req.onsuccess = function(event) { callback(null, event.target.result); };
        req.onerror = function() { callback(this.error); };
      },storeRemoteEntry:function (store, path, entry, callback) {
        var req = store.put(entry, path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function() { callback(this.error); };
      },removeRemoteEntry:function (store, path, callback) {
        var req = store.delete(path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function() { callback(this.error); };
      },reconcile:function (src, dst, callback) {
        var total = 0;
  
        var create = [];
        Object.keys(src.entries).forEach(function (key) {
          var e = src.entries[key];
          var e2 = dst.entries[key];
          if (!e2 || e.timestamp > e2.timestamp) {
            create.push(key);
            total++;
          }
        });
  
        var remove = [];
        Object.keys(dst.entries).forEach(function (key) {
          var e = dst.entries[key];
          var e2 = src.entries[key];
          if (!e2) {
            remove.push(key);
            total++;
          }
        });
  
        if (!total) {
          return callback(null);
        }
  
        var errored = false;
        var completed = 0;
        var db = src.type === 'remote' ? src.db : dst.db;
        var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readwrite');
        var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return callback(err);
            }
            return;
          }
          if (++completed >= total) {
            return callback(null);
          }
        };
  
        transaction.onerror = function() { done(this.error); };
  
        // sort paths in ascending order so directory entries are created
        // before the files inside them
        create.sort().forEach(function (path) {
          if (dst.type === 'local') {
            IDBFS.loadRemoteEntry(store, path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeLocalEntry(path, entry, done);
            });
          } else {
            IDBFS.loadLocalEntry(path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeRemoteEntry(store, path, entry, done);
            });
          }
        });
  
        // sort paths in descending order so files are deleted before their
        // parent directories
        remove.sort().reverse().forEach(function(path) {
          if (dst.type === 'local') {
            IDBFS.removeLocalEntry(path, done);
          } else {
            IDBFS.removeRemoteEntry(store, path, done);
          }
        });
      }};
  
  var NODEFS={isWindows:false,staticInit:function () {
        NODEFS.isWindows = !!process.platform.match(/^win/);
      },mount:function (mount) {
        assert(ENVIRONMENT_IS_NODE);
        return NODEFS.createNode(null, '/', NODEFS.getMode(mount.opts.root), 0);
      },createNode:function (parent, name, mode, dev) {
        if (!FS.isDir(mode) && !FS.isFile(mode) && !FS.isLink(mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node = FS.createNode(parent, name, mode);
        node.node_ops = NODEFS.node_ops;
        node.stream_ops = NODEFS.stream_ops;
        return node;
      },getMode:function (path) {
        var stat;
        try {
          stat = fs.lstatSync(path);
          if (NODEFS.isWindows) {
            // On Windows, directories return permission bits 'rw-rw-rw-', even though they have 'rwxrwxrwx', so 
            // propagate write bits to execute bits.
            stat.mode = stat.mode | ((stat.mode & 146) >> 1);
          }
        } catch (e) {
          if (!e.code) throw e;
          throw new FS.ErrnoError(ERRNO_CODES[e.code]);
        }
        return stat.mode;
      },realPath:function (node) {
        var parts = [];
        while (node.parent !== node) {
          parts.push(node.name);
          node = node.parent;
        }
        parts.push(node.mount.opts.root);
        parts.reverse();
        return PATH.join.apply(null, parts);
      },flagsToPermissionStringMap:{0:"r",1:"r+",2:"r+",64:"r",65:"r+",66:"r+",129:"rx+",193:"rx+",514:"w+",577:"w",578:"w+",705:"wx",706:"wx+",1024:"a",1025:"a",1026:"a+",1089:"a",1090:"a+",1153:"ax",1154:"ax+",1217:"ax",1218:"ax+",4096:"rs",4098:"rs+"},flagsToPermissionString:function (flags) {
        if (flags in NODEFS.flagsToPermissionStringMap) {
          return NODEFS.flagsToPermissionStringMap[flags];
        } else {
          return flags;
        }
      },node_ops:{getattr:function (node) {
          var path = NODEFS.realPath(node);
          var stat;
          try {
            stat = fs.lstatSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          // node.js v0.10.20 doesn't report blksize and blocks on Windows. Fake them with default blksize of 4096.
          // See http://support.microsoft.com/kb/140365
          if (NODEFS.isWindows && !stat.blksize) {
            stat.blksize = 4096;
          }
          if (NODEFS.isWindows && !stat.blocks) {
            stat.blocks = (stat.size+stat.blksize-1)/stat.blksize|0;
          }
          return {
            dev: stat.dev,
            ino: stat.ino,
            mode: stat.mode,
            nlink: stat.nlink,
            uid: stat.uid,
            gid: stat.gid,
            rdev: stat.rdev,
            size: stat.size,
            atime: stat.atime,
            mtime: stat.mtime,
            ctime: stat.ctime,
            blksize: stat.blksize,
            blocks: stat.blocks
          };
        },setattr:function (node, attr) {
          var path = NODEFS.realPath(node);
          try {
            if (attr.mode !== undefined) {
              fs.chmodSync(path, attr.mode);
              // update the common node structure mode as well
              node.mode = attr.mode;
            }
            if (attr.timestamp !== undefined) {
              var date = new Date(attr.timestamp);
              fs.utimesSync(path, date, date);
            }
            if (attr.size !== undefined) {
              fs.truncateSync(path, attr.size);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },lookup:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          var mode = NODEFS.getMode(path);
          return NODEFS.createNode(parent, name, mode);
        },mknod:function (parent, name, mode, dev) {
          var node = NODEFS.createNode(parent, name, mode, dev);
          // create the backing node for this in the fs root as well
          var path = NODEFS.realPath(node);
          try {
            if (FS.isDir(node.mode)) {
              fs.mkdirSync(path, node.mode);
            } else {
              fs.writeFileSync(path, '', { mode: node.mode });
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return node;
        },rename:function (oldNode, newDir, newName) {
          var oldPath = NODEFS.realPath(oldNode);
          var newPath = PATH.join2(NODEFS.realPath(newDir), newName);
          try {
            fs.renameSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },unlink:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.unlinkSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },rmdir:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.rmdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readdir:function (node) {
          var path = NODEFS.realPath(node);
          try {
            return fs.readdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },symlink:function (parent, newName, oldPath) {
          var newPath = PATH.join2(NODEFS.realPath(parent), newName);
          try {
            fs.symlinkSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readlink:function (node) {
          var path = NODEFS.realPath(node);
          try {
            return fs.readlinkSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        }},stream_ops:{open:function (stream) {
          var path = NODEFS.realPath(stream.node);
          try {
            if (FS.isFile(stream.node.mode)) {
              stream.nfd = fs.openSync(path, NODEFS.flagsToPermissionString(stream.flags));
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },close:function (stream) {
          try {
            if (FS.isFile(stream.node.mode) && stream.nfd) {
              fs.closeSync(stream.nfd);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },read:function (stream, buffer, offset, length, position) {
          // FIXME this is terrible.
          var nbuffer = new Buffer(length);
          var res;
          try {
            res = fs.readSync(stream.nfd, nbuffer, 0, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          if (res > 0) {
            for (var i = 0; i < res; i++) {
              buffer[offset + i] = nbuffer[i];
            }
          }
          return res;
        },write:function (stream, buffer, offset, length, position) {
          // FIXME this is terrible.
          var nbuffer = new Buffer(buffer.subarray(offset, offset + length));
          var res;
          try {
            res = fs.writeSync(stream.nfd, nbuffer, 0, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return res;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              try {
                var stat = fs.fstatSync(stream.nfd);
                position += stat.size;
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES[e.code]);
              }
            }
          }
  
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
  
          stream.position = position;
          return position;
        }}};
  
  var _stdin=allocate(1, "i32*", ALLOC_STATIC);
  
  var _stdout=allocate(1, "i32*", ALLOC_STATIC);
  
  var _stderr=allocate(1, "i32*", ALLOC_STATIC);var FS={root:null,mounts:[],devices:[null],streams:[],nextInode:1,nameTable:null,currentPath:"/",initialized:false,ignorePermissions:true,trackingDelegate:{},tracking:{openFlags:{READ:1,WRITE:2}},ErrnoError:null,genericErrors:{},handleFSError:function (e) {
        if (!(e instanceof FS.ErrnoError)) throw e + ' : ' + stackTrace();
        return ___setErrNo(e.errno);
      },lookupPath:function (path, opts) {
        path = PATH.resolve(FS.cwd(), path);
        opts = opts || {};
  
        if (!path) return { path: '', node: null };
  
        var defaults = {
          follow_mount: true,
          recurse_count: 0
        };
        for (var key in defaults) {
          if (opts[key] === undefined) {
            opts[key] = defaults[key];
          }
        }
  
        if (opts.recurse_count > 8) {  // max recursive lookup of 8
          throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
        }
  
        // split the path
        var parts = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), false);
  
        // start at the root
        var current = FS.root;
        var current_path = '/';
  
        for (var i = 0; i < parts.length; i++) {
          var islast = (i === parts.length-1);
          if (islast && opts.parent) {
            // stop resolving
            break;
          }
  
          current = FS.lookupNode(current, parts[i]);
          current_path = PATH.join2(current_path, parts[i]);
  
          // jump to the mount's root node if this is a mountpoint
          if (FS.isMountpoint(current)) {
            if (!islast || (islast && opts.follow_mount)) {
              current = current.mounted.root;
            }
          }
  
          // by default, lookupPath will not follow a symlink if it is the final path component.
          // setting opts.follow = true will override this behavior.
          if (!islast || opts.follow) {
            var count = 0;
            while (FS.isLink(current.mode)) {
              var link = FS.readlink(current_path);
              current_path = PATH.resolve(PATH.dirname(current_path), link);
              
              var lookup = FS.lookupPath(current_path, { recurse_count: opts.recurse_count });
              current = lookup.node;
  
              if (count++ > 40) {  // limit max consecutive symlinks to 40 (SYMLOOP_MAX).
                throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
              }
            }
          }
        }
  
        return { path: current_path, node: current };
      },getPath:function (node) {
        var path;
        while (true) {
          if (FS.isRoot(node)) {
            var mount = node.mount.mountpoint;
            if (!path) return mount;
            return mount[mount.length-1] !== '/' ? mount + '/' + path : mount + path;
          }
          path = path ? node.name + '/' + path : node.name;
          node = node.parent;
        }
      },hashName:function (parentid, name) {
        var hash = 0;
  
  
        for (var i = 0; i < name.length; i++) {
          hash = ((hash << 5) - hash + name.charCodeAt(i)) | 0;
        }
        return ((parentid + hash) >>> 0) % FS.nameTable.length;
      },hashAddNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        node.name_next = FS.nameTable[hash];
        FS.nameTable[hash] = node;
      },hashRemoveNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        if (FS.nameTable[hash] === node) {
          FS.nameTable[hash] = node.name_next;
        } else {
          var current = FS.nameTable[hash];
          while (current) {
            if (current.name_next === node) {
              current.name_next = node.name_next;
              break;
            }
            current = current.name_next;
          }
        }
      },lookupNode:function (parent, name) {
        var err = FS.mayLookup(parent);
        if (err) {
          throw new FS.ErrnoError(err, parent);
        }
        var hash = FS.hashName(parent.id, name);
        for (var node = FS.nameTable[hash]; node; node = node.name_next) {
          var nodeName = node.name;
          if (node.parent.id === parent.id && nodeName === name) {
            return node;
          }
        }
        // if we failed to find it in the cache, call into the VFS
        return FS.lookup(parent, name);
      },createNode:function (parent, name, mode, rdev) {
        if (!FS.FSNode) {
          FS.FSNode = function(parent, name, mode, rdev) {
            if (!parent) {
              parent = this;  // root node sets parent to itself
            }
            this.parent = parent;
            this.mount = parent.mount;
            this.mounted = null;
            this.id = FS.nextInode++;
            this.name = name;
            this.mode = mode;
            this.node_ops = {};
            this.stream_ops = {};
            this.rdev = rdev;
          };
  
          FS.FSNode.prototype = {};
  
          // compatibility
          var readMode = 292 | 73;
          var writeMode = 146;
  
          // NOTE we must use Object.defineProperties instead of individual calls to
          // Object.defineProperty in order to make closure compiler happy
          Object.defineProperties(FS.FSNode.prototype, {
            read: {
              get: function() { return (this.mode & readMode) === readMode; },
              set: function(val) { val ? this.mode |= readMode : this.mode &= ~readMode; }
            },
            write: {
              get: function() { return (this.mode & writeMode) === writeMode; },
              set: function(val) { val ? this.mode |= writeMode : this.mode &= ~writeMode; }
            },
            isFolder: {
              get: function() { return FS.isDir(this.mode); },
            },
            isDevice: {
              get: function() { return FS.isChrdev(this.mode); },
            },
          });
        }
  
        var node = new FS.FSNode(parent, name, mode, rdev);
  
        FS.hashAddNode(node);
  
        return node;
      },destroyNode:function (node) {
        FS.hashRemoveNode(node);
      },isRoot:function (node) {
        return node === node.parent;
      },isMountpoint:function (node) {
        return !!node.mounted;
      },isFile:function (mode) {
        return (mode & 61440) === 32768;
      },isDir:function (mode) {
        return (mode & 61440) === 16384;
      },isLink:function (mode) {
        return (mode & 61440) === 40960;
      },isChrdev:function (mode) {
        return (mode & 61440) === 8192;
      },isBlkdev:function (mode) {
        return (mode & 61440) === 24576;
      },isFIFO:function (mode) {
        return (mode & 61440) === 4096;
      },isSocket:function (mode) {
        return (mode & 49152) === 49152;
      },flagModes:{"r":0,"rs":1052672,"r+":2,"w":577,"wx":705,"xw":705,"w+":578,"wx+":706,"xw+":706,"a":1089,"ax":1217,"xa":1217,"a+":1090,"ax+":1218,"xa+":1218},modeStringToFlags:function (str) {
        var flags = FS.flagModes[str];
        if (typeof flags === 'undefined') {
          throw new Error('Unknown file open mode: ' + str);
        }
        return flags;
      },flagsToPermissionString:function (flag) {
        var accmode = flag & 2097155;
        var perms = ['r', 'w', 'rw'][accmode];
        if ((flag & 512)) {
          perms += 'w';
        }
        return perms;
      },nodePermissions:function (node, perms) {
        if (FS.ignorePermissions) {
          return 0;
        }
        // return 0 if any user, group or owner bits are set.
        if (perms.indexOf('r') !== -1 && !(node.mode & 292)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('w') !== -1 && !(node.mode & 146)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('x') !== -1 && !(node.mode & 73)) {
          return ERRNO_CODES.EACCES;
        }
        return 0;
      },mayLookup:function (dir) {
        var err = FS.nodePermissions(dir, 'x');
        if (err) return err;
        if (!dir.node_ops.lookup) return ERRNO_CODES.EACCES;
        return 0;
      },mayCreate:function (dir, name) {
        try {
          var node = FS.lookupNode(dir, name);
          return ERRNO_CODES.EEXIST;
        } catch (e) {
        }
        return FS.nodePermissions(dir, 'wx');
      },mayDelete:function (dir, name, isdir) {
        var node;
        try {
          node = FS.lookupNode(dir, name);
        } catch (e) {
          return e.errno;
        }
        var err = FS.nodePermissions(dir, 'wx');
        if (err) {
          return err;
        }
        if (isdir) {
          if (!FS.isDir(node.mode)) {
            return ERRNO_CODES.ENOTDIR;
          }
          if (FS.isRoot(node) || FS.getPath(node) === FS.cwd()) {
            return ERRNO_CODES.EBUSY;
          }
        } else {
          if (FS.isDir(node.mode)) {
            return ERRNO_CODES.EISDIR;
          }
        }
        return 0;
      },mayOpen:function (node, flags) {
        if (!node) {
          return ERRNO_CODES.ENOENT;
        }
        if (FS.isLink(node.mode)) {
          return ERRNO_CODES.ELOOP;
        } else if (FS.isDir(node.mode)) {
          if ((flags & 2097155) !== 0 ||  // opening for write
              (flags & 512)) {
            return ERRNO_CODES.EISDIR;
          }
        }
        return FS.nodePermissions(node, FS.flagsToPermissionString(flags));
      },MAX_OPEN_FDS:4096,nextfd:function (fd_start, fd_end) {
        fd_start = fd_start || 0;
        fd_end = fd_end || FS.MAX_OPEN_FDS;
        for (var fd = fd_start; fd <= fd_end; fd++) {
          if (!FS.streams[fd]) {
            return fd;
          }
        }
        throw new FS.ErrnoError(ERRNO_CODES.EMFILE);
      },getStream:function (fd) {
        return FS.streams[fd];
      },createStream:function (stream, fd_start, fd_end) {
        if (!FS.FSStream) {
          FS.FSStream = function(){};
          FS.FSStream.prototype = {};
          // compatibility
          Object.defineProperties(FS.FSStream.prototype, {
            object: {
              get: function() { return this.node; },
              set: function(val) { this.node = val; }
            },
            isRead: {
              get: function() { return (this.flags & 2097155) !== 1; }
            },
            isWrite: {
              get: function() { return (this.flags & 2097155) !== 0; }
            },
            isAppend: {
              get: function() { return (this.flags & 1024); }
            }
          });
        }
        // clone it, so we can return an instance of FSStream
        var newStream = new FS.FSStream();
        for (var p in stream) {
          newStream[p] = stream[p];
        }
        stream = newStream;
        var fd = FS.nextfd(fd_start, fd_end);
        stream.fd = fd;
        FS.streams[fd] = stream;
        return stream;
      },closeStream:function (fd) {
        FS.streams[fd] = null;
      },getStreamFromPtr:function (ptr) {
        return FS.streams[ptr - 1];
      },getPtrForStream:function (stream) {
        return stream ? stream.fd + 1 : 0;
      },chrdev_stream_ops:{open:function (stream) {
          var device = FS.getDevice(stream.node.rdev);
          // override node's stream ops with the device's
          stream.stream_ops = device.stream_ops;
          // forward the open call
          if (stream.stream_ops.open) {
            stream.stream_ops.open(stream);
          }
        },llseek:function () {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }},major:function (dev) {
        return ((dev) >> 8);
      },minor:function (dev) {
        return ((dev) & 0xff);
      },makedev:function (ma, mi) {
        return ((ma) << 8 | (mi));
      },registerDevice:function (dev, ops) {
        FS.devices[dev] = { stream_ops: ops };
      },getDevice:function (dev) {
        return FS.devices[dev];
      },getMounts:function (mount) {
        var mounts = [];
        var check = [mount];
  
        while (check.length) {
          var m = check.pop();
  
          mounts.push(m);
  
          check.push.apply(check, m.mounts);
        }
  
        return mounts;
      },syncfs:function (populate, callback) {
        if (typeof(populate) === 'function') {
          callback = populate;
          populate = false;
        }
  
        var mounts = FS.getMounts(FS.root.mount);
        var completed = 0;
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return callback(err);
            }
            return;
          }
          if (++completed >= mounts.length) {
            callback(null);
          }
        };
  
        // sync all mounts
        mounts.forEach(function (mount) {
          if (!mount.type.syncfs) {
            return done(null);
          }
          mount.type.syncfs(mount, populate, done);
        });
      },mount:function (type, opts, mountpoint) {
        var root = mountpoint === '/';
        var pseudo = !mountpoint;
        var node;
  
        if (root && FS.root) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        } else if (!root && !pseudo) {
          var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
          mountpoint = lookup.path;  // use the absolute path
          node = lookup.node;
  
          if (FS.isMountpoint(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
          }
  
          if (!FS.isDir(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
          }
        }
  
        var mount = {
          type: type,
          opts: opts,
          mountpoint: mountpoint,
          mounts: []
        };
  
        // create a root node for the fs
        var mountRoot = type.mount(mount);
        mountRoot.mount = mount;
        mount.root = mountRoot;
  
        if (root) {
          FS.root = mountRoot;
        } else if (node) {
          // set as a mountpoint
          node.mounted = mount;
  
          // add the new mount to the current mount's children
          if (node.mount) {
            node.mount.mounts.push(mount);
          }
        }
  
        return mountRoot;
      },unmount:function (mountpoint) {
        var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
        if (!FS.isMountpoint(lookup.node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
  
        // destroy the nodes for this mount, and all its child mounts
        var node = lookup.node;
        var mount = node.mounted;
        var mounts = FS.getMounts(mount);
  
        Object.keys(FS.nameTable).forEach(function (hash) {
          var current = FS.nameTable[hash];
  
          while (current) {
            var next = current.name_next;
  
            if (mounts.indexOf(current.mount) !== -1) {
              FS.destroyNode(current);
            }
  
            current = next;
          }
        });
  
        // no longer a mountpoint
        node.mounted = null;
  
        // remove this mount from the child mounts
        var idx = node.mount.mounts.indexOf(mount);
        assert(idx !== -1);
        node.mount.mounts.splice(idx, 1);
      },lookup:function (parent, name) {
        return parent.node_ops.lookup(parent, name);
      },mknod:function (path, mode, dev) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        if (!name || name === '.' || name === '..') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.mayCreate(parent, name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.mknod) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.mknod(parent, name, mode, dev);
      },create:function (path, mode) {
        mode = mode !== undefined ? mode : 438 /* 0666 */;
        mode &= 4095;
        mode |= 32768;
        return FS.mknod(path, mode, 0);
      },mkdir:function (path, mode) {
        mode = mode !== undefined ? mode : 511 /* 0777 */;
        mode &= 511 | 512;
        mode |= 16384;
        return FS.mknod(path, mode, 0);
      },mkdev:function (path, mode, dev) {
        if (typeof(dev) === 'undefined') {
          dev = mode;
          mode = 438 /* 0666 */;
        }
        mode |= 8192;
        return FS.mknod(path, mode, dev);
      },symlink:function (oldpath, newpath) {
        if (!PATH.resolve(oldpath)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        var lookup = FS.lookupPath(newpath, { parent: true });
        var parent = lookup.node;
        if (!parent) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        var newname = PATH.basename(newpath);
        var err = FS.mayCreate(parent, newname);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.symlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.symlink(parent, newname, oldpath);
      },rename:function (old_path, new_path) {
        var old_dirname = PATH.dirname(old_path);
        var new_dirname = PATH.dirname(new_path);
        var old_name = PATH.basename(old_path);
        var new_name = PATH.basename(new_path);
        // parents must exist
        var lookup, old_dir, new_dir;
        try {
          lookup = FS.lookupPath(old_path, { parent: true });
          old_dir = lookup.node;
          lookup = FS.lookupPath(new_path, { parent: true });
          new_dir = lookup.node;
        } catch (e) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        if (!old_dir || !new_dir) throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        // need to be part of the same mount
        if (old_dir.mount !== new_dir.mount) {
          throw new FS.ErrnoError(ERRNO_CODES.EXDEV);
        }
        // source must exist
        var old_node = FS.lookupNode(old_dir, old_name);
        // old path should not be an ancestor of the new path
        var relative = PATH.relative(old_path, new_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        // new path should not be an ancestor of the old path
        relative = PATH.relative(new_path, old_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
        }
        // see if the new path already exists
        var new_node;
        try {
          new_node = FS.lookupNode(new_dir, new_name);
        } catch (e) {
          // not fatal
        }
        // early out if nothing needs to change
        if (old_node === new_node) {
          return;
        }
        // we'll need to delete the old entry
        var isdir = FS.isDir(old_node.mode);
        var err = FS.mayDelete(old_dir, old_name, isdir);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        // need delete permissions if we'll be overwriting.
        // need create permissions if new doesn't already exist.
        err = new_node ?
          FS.mayDelete(new_dir, new_name, isdir) :
          FS.mayCreate(new_dir, new_name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!old_dir.node_ops.rename) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(old_node) || (new_node && FS.isMountpoint(new_node))) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        // if we are going to change the parent, check write permissions
        if (new_dir !== old_dir) {
          err = FS.nodePermissions(old_dir, 'w');
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        try {
          if (FS.trackingDelegate['willMovePath']) {
            FS.trackingDelegate['willMovePath'](old_path, new_path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
        // remove the node from the lookup hash
        FS.hashRemoveNode(old_node);
        // do the underlying fs rename
        try {
          old_dir.node_ops.rename(old_node, new_dir, new_name);
        } catch (e) {
          throw e;
        } finally {
          // add the node back to the hash (in case node_ops.rename
          // changed its name)
          FS.hashAddNode(old_node);
        }
        try {
          if (FS.trackingDelegate['onMovePath']) FS.trackingDelegate['onMovePath'](old_path, new_path);
        } catch(e) {
          console.log("FS.trackingDelegate['onMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
      },rmdir:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, true);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.rmdir) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.rmdir(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        if (!node.node_ops.readdir) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        return node.node_ops.readdir(node);
      },unlink:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, false);
        if (err) {
          // POSIX says unlink should set EPERM, not EISDIR
          if (err === ERRNO_CODES.EISDIR) err = ERRNO_CODES.EPERM;
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.unlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.unlink(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readlink:function (path) {
        var lookup = FS.lookupPath(path);
        var link = lookup.node;
        if (!link) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!link.node_ops.readlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        return link.node_ops.readlink(link);
      },stat:function (path, dontFollow) {
        var lookup = FS.lookupPath(path, { follow: !dontFollow });
        var node = lookup.node;
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!node.node_ops.getattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return node.node_ops.getattr(node);
      },lstat:function (path) {
        return FS.stat(path, true);
      },chmod:function (path, mode, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          mode: (mode & 4095) | (node.mode & ~4095),
          timestamp: Date.now()
        });
      },lchmod:function (path, mode) {
        FS.chmod(path, mode, true);
      },fchmod:function (fd, mode) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chmod(stream.node, mode);
      },chown:function (path, uid, gid, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          timestamp: Date.now()
          // we ignore the uid / gid for now
        });
      },lchown:function (path, uid, gid) {
        FS.chown(path, uid, gid, true);
      },fchown:function (fd, uid, gid) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chown(stream.node, uid, gid);
      },truncate:function (path, len) {
        if (len < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: true });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!FS.isFile(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.nodePermissions(node, 'w');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        node.node_ops.setattr(node, {
          size: len,
          timestamp: Date.now()
        });
      },ftruncate:function (fd, len) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        FS.truncate(stream.node, len);
      },utime:function (path, atime, mtime) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        node.node_ops.setattr(node, {
          timestamp: Math.max(atime, mtime)
        });
      },open:function (path, flags, mode, fd_start, fd_end) {
        if (path === "") {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        flags = typeof flags === 'string' ? FS.modeStringToFlags(flags) : flags;
        mode = typeof mode === 'undefined' ? 438 /* 0666 */ : mode;
        if ((flags & 64)) {
          mode = (mode & 4095) | 32768;
        } else {
          mode = 0;
        }
        var node;
        if (typeof path === 'object') {
          node = path;
        } else {
          path = PATH.normalize(path);
          try {
            var lookup = FS.lookupPath(path, {
              follow: !(flags & 131072)
            });
            node = lookup.node;
          } catch (e) {
            // ignore
          }
        }
        // perhaps we need to create the node
        var created = false;
        if ((flags & 64)) {
          if (node) {
            // if O_CREAT and O_EXCL are set, error out if the node already exists
            if ((flags & 128)) {
              throw new FS.ErrnoError(ERRNO_CODES.EEXIST);
            }
          } else {
            // node doesn't exist, try to create it
            node = FS.mknod(path, mode, 0);
            created = true;
          }
        }
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        // can't truncate a device
        if (FS.isChrdev(node.mode)) {
          flags &= ~512;
        }
        // check permissions, if this is not a file we just created now (it is ok to
        // create and write to a file with read-only permissions; it is read-only
        // for later use)
        if (!created) {
          var err = FS.mayOpen(node, flags);
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        // do truncation if necessary
        if ((flags & 512)) {
          FS.truncate(node, 0);
        }
        // we've already handled these, don't pass down to the underlying vfs
        flags &= ~(128 | 512);
  
        // register the stream with the filesystem
        var stream = FS.createStream({
          node: node,
          path: FS.getPath(node),  // we want the absolute path to the node
          flags: flags,
          seekable: true,
          position: 0,
          stream_ops: node.stream_ops,
          // used by the file family libc calls (fopen, fwrite, ferror, etc.)
          ungotten: [],
          error: false
        }, fd_start, fd_end);
        // call the new stream's open function
        if (stream.stream_ops.open) {
          stream.stream_ops.open(stream);
        }
        if (Module['logReadFiles'] && !(flags & 1)) {
          if (!FS.readFiles) FS.readFiles = {};
          if (!(path in FS.readFiles)) {
            FS.readFiles[path] = 1;
            Module['printErr']('read file: ' + path);
          }
        }
        try {
          if (FS.trackingDelegate['onOpenFile']) {
            var trackingFlags = 0;
            if ((flags & 2097155) !== 1) {
              trackingFlags |= FS.tracking.openFlags.READ;
            }
            if ((flags & 2097155) !== 0) {
              trackingFlags |= FS.tracking.openFlags.WRITE;
            }
            FS.trackingDelegate['onOpenFile'](path, trackingFlags);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['onOpenFile']('"+path+"', flags) threw an exception: " + e.message);
        }
        return stream;
      },close:function (stream) {
        try {
          if (stream.stream_ops.close) {
            stream.stream_ops.close(stream);
          }
        } catch (e) {
          throw e;
        } finally {
          FS.closeStream(stream.fd);
        }
      },llseek:function (stream, offset, whence) {
        if (!stream.seekable || !stream.stream_ops.llseek) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        return stream.stream_ops.llseek(stream, offset, whence);
      },read:function (stream, buffer, offset, length, position) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.read) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesRead = stream.stream_ops.read(stream, buffer, offset, length, position);
        if (!seeking) stream.position += bytesRead;
        return bytesRead;
      },write:function (stream, buffer, offset, length, position, canOwn) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.write) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if (stream.flags & 1024) {
          // seek to the end before writing in append mode
          FS.llseek(stream, 0, 2);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesWritten = stream.stream_ops.write(stream, buffer, offset, length, position, canOwn);
        if (!seeking) stream.position += bytesWritten;
        try {
          if (stream.path && FS.trackingDelegate['onWriteToFile']) FS.trackingDelegate['onWriteToFile'](stream.path);
        } catch(e) {
          console.log("FS.trackingDelegate['onWriteToFile']('"+path+"') threw an exception: " + e.message);
        }
        return bytesWritten;
      },allocate:function (stream, offset, length) {
        if (offset < 0 || length <= 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (!FS.isFile(stream.node.mode) && !FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        if (!stream.stream_ops.allocate) {
          throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
        }
        stream.stream_ops.allocate(stream, offset, length);
      },mmap:function (stream, buffer, offset, length, position, prot, flags) {
        // TODO if PROT is PROT_WRITE, make sure we have write access
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EACCES);
        }
        if (!stream.stream_ops.mmap) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        return stream.stream_ops.mmap(stream, buffer, offset, length, position, prot, flags);
      },ioctl:function (stream, cmd, arg) {
        if (!stream.stream_ops.ioctl) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTTY);
        }
        return stream.stream_ops.ioctl(stream, cmd, arg);
      },readFile:function (path, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'r';
        opts.encoding = opts.encoding || 'binary';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var ret;
        var stream = FS.open(path, opts.flags);
        var stat = FS.stat(path);
        var length = stat.size;
        var buf = new Uint8Array(length);
        FS.read(stream, buf, 0, length, 0);
        if (opts.encoding === 'utf8') {
          ret = '';
          var utf8 = new Runtime.UTF8Processor();
          for (var i = 0; i < length; i++) {
            ret += utf8.processCChar(buf[i]);
          }
        } else if (opts.encoding === 'binary') {
          ret = buf;
        }
        FS.close(stream);
        return ret;
      },writeFile:function (path, data, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'w';
        opts.encoding = opts.encoding || 'utf8';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var stream = FS.open(path, opts.flags, opts.mode);
        if (opts.encoding === 'utf8') {
          var utf8 = new Runtime.UTF8Processor();
          var buf = new Uint8Array(utf8.processJSString(data));
          FS.write(stream, buf, 0, buf.length, 0, opts.canOwn);
        } else if (opts.encoding === 'binary') {
          FS.write(stream, data, 0, data.length, 0, opts.canOwn);
        }
        FS.close(stream);
      },cwd:function () {
        return FS.currentPath;
      },chdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        if (!FS.isDir(lookup.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        var err = FS.nodePermissions(lookup.node, 'x');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        FS.currentPath = lookup.path;
      },createDefaultDirectories:function () {
        FS.mkdir('/tmp');
        FS.mkdir('/home');
        FS.mkdir('/home/web_user');
      },createDefaultDevices:function () {
        // create /dev
        FS.mkdir('/dev');
        // setup /dev/null
        FS.registerDevice(FS.makedev(1, 3), {
          read: function() { return 0; },
          write: function() { return 0; }
        });
        FS.mkdev('/dev/null', FS.makedev(1, 3));
        // setup /dev/tty and /dev/tty1
        // stderr needs to print output using Module['printErr']
        // so we register a second tty just for it.
        TTY.register(FS.makedev(5, 0), TTY.default_tty_ops);
        TTY.register(FS.makedev(6, 0), TTY.default_tty1_ops);
        FS.mkdev('/dev/tty', FS.makedev(5, 0));
        FS.mkdev('/dev/tty1', FS.makedev(6, 0));
        // setup /dev/[u]random
        var random_device;
        if (typeof crypto !== 'undefined') {
          // for modern web browsers
          var randomBuffer = new Uint8Array(1);
          random_device = function() { crypto.getRandomValues(randomBuffer); return randomBuffer[0]; };
        } else if (ENVIRONMENT_IS_NODE) {
          // for nodejs
          random_device = function() { return require('crypto').randomBytes(1)[0]; };
        } else {
          // default for ES5 platforms
          random_device = function() { return (Math.random()*256)|0; };
        }
        FS.createDevice('/dev', 'random', random_device);
        FS.createDevice('/dev', 'urandom', random_device);
        // we're not going to emulate the actual shm device,
        // just create the tmp dirs that reside in it commonly
        FS.mkdir('/dev/shm');
        FS.mkdir('/dev/shm/tmp');
      },createStandardStreams:function () {
        // TODO deprecate the old functionality of a single
        // input / output callback and that utilizes FS.createDevice
        // and instead require a unique set of stream ops
  
        // by default, we symlink the standard streams to the
        // default tty devices. however, if the standard streams
        // have been overwritten we create a unique device for
        // them instead.
        if (Module['stdin']) {
          FS.createDevice('/dev', 'stdin', Module['stdin']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdin');
        }
        if (Module['stdout']) {
          FS.createDevice('/dev', 'stdout', null, Module['stdout']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdout');
        }
        if (Module['stderr']) {
          FS.createDevice('/dev', 'stderr', null, Module['stderr']);
        } else {
          FS.symlink('/dev/tty1', '/dev/stderr');
        }
  
        // open default streams for the stdin, stdout and stderr devices
        var stdin = FS.open('/dev/stdin', 'r');
        HEAP32[((_stdin)>>2)]=FS.getPtrForStream(stdin);
        assert(stdin.fd === 0, 'invalid handle for stdin (' + stdin.fd + ')');
  
        var stdout = FS.open('/dev/stdout', 'w');
        HEAP32[((_stdout)>>2)]=FS.getPtrForStream(stdout);
        assert(stdout.fd === 1, 'invalid handle for stdout (' + stdout.fd + ')');
  
        var stderr = FS.open('/dev/stderr', 'w');
        HEAP32[((_stderr)>>2)]=FS.getPtrForStream(stderr);
        assert(stderr.fd === 2, 'invalid handle for stderr (' + stderr.fd + ')');
      },ensureErrnoError:function () {
        if (FS.ErrnoError) return;
        FS.ErrnoError = function ErrnoError(errno, node) {
          this.node = node;
          this.setErrno = function(errno) {
            this.errno = errno;
            for (var key in ERRNO_CODES) {
              if (ERRNO_CODES[key] === errno) {
                this.code = key;
                break;
              }
            }
          };
          this.setErrno(errno);
          this.message = ERRNO_MESSAGES[errno];
        };
        FS.ErrnoError.prototype = new Error();
        FS.ErrnoError.prototype.constructor = FS.ErrnoError;
        // Some errors may happen quite a bit, to avoid overhead we reuse them (and suffer a lack of stack info)
        [ERRNO_CODES.ENOENT].forEach(function(code) {
          FS.genericErrors[code] = new FS.ErrnoError(code);
          FS.genericErrors[code].stack = '<generic error, no stack>';
        });
      },staticInit:function () {
        FS.ensureErrnoError();
  
        FS.nameTable = new Array(4096);
  
        FS.mount(MEMFS, {}, '/');
  
        FS.createDefaultDirectories();
        FS.createDefaultDevices();
      },init:function (input, output, error) {
        assert(!FS.init.initialized, 'FS.init was previously called. If you want to initialize later with custom parameters, remove any earlier calls (note that one is automatically added to the generated code)');
        FS.init.initialized = true;
  
        FS.ensureErrnoError();
  
        // Allow Module.stdin etc. to provide defaults, if none explicitly passed to us here
        Module['stdin'] = input || Module['stdin'];
        Module['stdout'] = output || Module['stdout'];
        Module['stderr'] = error || Module['stderr'];
  
        FS.createStandardStreams();
      },quit:function () {
        FS.init.initialized = false;
        for (var i = 0; i < FS.streams.length; i++) {
          var stream = FS.streams[i];
          if (!stream) {
            continue;
          }
          FS.close(stream);
        }
      },getMode:function (canRead, canWrite) {
        var mode = 0;
        if (canRead) mode |= 292 | 73;
        if (canWrite) mode |= 146;
        return mode;
      },joinPath:function (parts, forceRelative) {
        var path = PATH.join.apply(null, parts);
        if (forceRelative && path[0] == '/') path = path.substr(1);
        return path;
      },absolutePath:function (relative, base) {
        return PATH.resolve(base, relative);
      },standardizePath:function (path) {
        return PATH.normalize(path);
      },findObject:function (path, dontResolveLastLink) {
        var ret = FS.analyzePath(path, dontResolveLastLink);
        if (ret.exists) {
          return ret.object;
        } else {
          ___setErrNo(ret.error);
          return null;
        }
      },analyzePath:function (path, dontResolveLastLink) {
        // operate from within the context of the symlink's target
        try {
          var lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          path = lookup.path;
        } catch (e) {
        }
        var ret = {
          isRoot: false, exists: false, error: 0, name: null, path: null, object: null,
          parentExists: false, parentPath: null, parentObject: null
        };
        try {
          var lookup = FS.lookupPath(path, { parent: true });
          ret.parentExists = true;
          ret.parentPath = lookup.path;
          ret.parentObject = lookup.node;
          ret.name = PATH.basename(path);
          lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          ret.exists = true;
          ret.path = lookup.path;
          ret.object = lookup.node;
          ret.name = lookup.node.name;
          ret.isRoot = lookup.path === '/';
        } catch (e) {
          ret.error = e.errno;
        };
        return ret;
      },createFolder:function (parent, name, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.mkdir(path, mode);
      },createPath:function (parent, path, canRead, canWrite) {
        parent = typeof parent === 'string' ? parent : FS.getPath(parent);
        var parts = path.split('/').reverse();
        while (parts.length) {
          var part = parts.pop();
          if (!part) continue;
          var current = PATH.join2(parent, part);
          try {
            FS.mkdir(current);
          } catch (e) {
            // ignore EEXIST
          }
          parent = current;
        }
        return current;
      },createFile:function (parent, name, properties, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.create(path, mode);
      },createDataFile:function (parent, name, data, canRead, canWrite, canOwn) {
        var path = name ? PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name) : parent;
        var mode = FS.getMode(canRead, canWrite);
        var node = FS.create(path, mode);
        if (data) {
          if (typeof data === 'string') {
            var arr = new Array(data.length);
            for (var i = 0, len = data.length; i < len; ++i) arr[i] = data.charCodeAt(i);
            data = arr;
          }
          // make sure we can write to the file
          FS.chmod(node, mode | 146);
          var stream = FS.open(node, 'w');
          FS.write(stream, data, 0, data.length, 0, canOwn);
          FS.close(stream);
          FS.chmod(node, mode);
        }
        return node;
      },createDevice:function (parent, name, input, output) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(!!input, !!output);
        if (!FS.createDevice.major) FS.createDevice.major = 64;
        var dev = FS.makedev(FS.createDevice.major++, 0);
        // Create a fake device that a set of stream ops to emulate
        // the old behavior.
        FS.registerDevice(dev, {
          open: function(stream) {
            stream.seekable = false;
          },
          close: function(stream) {
            // flush any pending line data
            if (output && output.buffer && output.buffer.length) {
              output(10);
            }
          },
          read: function(stream, buffer, offset, length, pos /* ignored */) {
            var bytesRead = 0;
            for (var i = 0; i < length; i++) {
              var result;
              try {
                result = input();
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
              if (result === undefined && bytesRead === 0) {
                throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
              }
              if (result === null || result === undefined) break;
              bytesRead++;
              buffer[offset+i] = result;
            }
            if (bytesRead) {
              stream.node.timestamp = Date.now();
            }
            return bytesRead;
          },
          write: function(stream, buffer, offset, length, pos) {
            for (var i = 0; i < length; i++) {
              try {
                output(buffer[offset+i]);
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
            }
            if (length) {
              stream.node.timestamp = Date.now();
            }
            return i;
          }
        });
        return FS.mkdev(path, mode, dev);
      },createLink:function (parent, name, target, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        return FS.symlink(target, path);
      },forceLoadFile:function (obj) {
        if (obj.isDevice || obj.isFolder || obj.link || obj.contents) return true;
        var success = true;
        if (typeof XMLHttpRequest !== 'undefined') {
          throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.");
        } else if (Module['read']) {
          // Command-line.
          try {
            // WARNING: Can't read binary files in V8's d8 or tracemonkey's js, as
            //          read() will try to parse UTF8.
            obj.contents = intArrayFromString(Module['read'](obj.url), true);
            obj.usedBytes = obj.contents.length;
          } catch (e) {
            success = false;
          }
        } else {
          throw new Error('Cannot load without read() or XMLHttpRequest.');
        }
        if (!success) ___setErrNo(ERRNO_CODES.EIO);
        return success;
      },createLazyFile:function (parent, name, url, canRead, canWrite) {
        // Lazy chunked Uint8Array (implements get and length from Uint8Array). Actual getting is abstracted away for eventual reuse.
        function LazyUint8Array() {
          this.lengthKnown = false;
          this.chunks = []; // Loaded chunks. Index is the chunk number
        }
        LazyUint8Array.prototype.get = function LazyUint8Array_get(idx) {
          if (idx > this.length-1 || idx < 0) {
            return undefined;
          }
          var chunkOffset = idx % this.chunkSize;
          var chunkNum = (idx / this.chunkSize)|0;
          return this.getter(chunkNum)[chunkOffset];
        }
        LazyUint8Array.prototype.setDataGetter = function LazyUint8Array_setDataGetter(getter) {
          this.getter = getter;
        }
        LazyUint8Array.prototype.cacheLength = function LazyUint8Array_cacheLength() {
          // Find length
          var xhr = new XMLHttpRequest();
          xhr.open('HEAD', url, false);
          xhr.send(null);
          if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
          var datalength = Number(xhr.getResponseHeader("Content-length"));
          var header;
          var hasByteServing = (header = xhr.getResponseHeader("Accept-Ranges")) && header === "bytes";
          var chunkSize = 1024*1024; // Chunk size in bytes
  
          if (!hasByteServing) chunkSize = datalength;
  
          // Function to get a range from the remote URL.
          var doXHR = (function(from, to) {
            if (from > to) throw new Error("invalid range (" + from + ", " + to + ") or no bytes requested!");
            if (to > datalength-1) throw new Error("only " + datalength + " bytes available! programmer error!");
  
            // TODO: Use mozResponseArrayBuffer, responseStream, etc. if available.
            var xhr = new XMLHttpRequest();
            xhr.open('GET', url, false);
            if (datalength !== chunkSize) xhr.setRequestHeader("Range", "bytes=" + from + "-" + to);
  
            // Some hints to the browser that we want binary data.
            if (typeof Uint8Array != 'undefined') xhr.responseType = 'arraybuffer';
            if (xhr.overrideMimeType) {
              xhr.overrideMimeType('text/plain; charset=x-user-defined');
            }
  
            xhr.send(null);
            if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
            if (xhr.response !== undefined) {
              return new Uint8Array(xhr.response || []);
            } else {
              return intArrayFromString(xhr.responseText || '', true);
            }
          });
          var lazyArray = this;
          lazyArray.setDataGetter(function(chunkNum) {
            var start = chunkNum * chunkSize;
            var end = (chunkNum+1) * chunkSize - 1; // including this byte
            end = Math.min(end, datalength-1); // if datalength-1 is selected, this is the last block
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") {
              lazyArray.chunks[chunkNum] = doXHR(start, end);
            }
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") throw new Error("doXHR failed!");
            return lazyArray.chunks[chunkNum];
          });
  
          this._length = datalength;
          this._chunkSize = chunkSize;
          this.lengthKnown = true;
        }
        if (typeof XMLHttpRequest !== 'undefined') {
          if (!ENVIRONMENT_IS_WORKER) throw 'Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc';
          var lazyArray = new LazyUint8Array();
          Object.defineProperty(lazyArray, "length", {
              get: function() {
                  if(!this.lengthKnown) {
                      this.cacheLength();
                  }
                  return this._length;
              }
          });
          Object.defineProperty(lazyArray, "chunkSize", {
              get: function() {
                  if(!this.lengthKnown) {
                      this.cacheLength();
                  }
                  return this._chunkSize;
              }
          });
  
          var properties = { isDevice: false, contents: lazyArray };
        } else {
          var properties = { isDevice: false, url: url };
        }
  
        var node = FS.createFile(parent, name, properties, canRead, canWrite);
        // This is a total hack, but I want to get this lazy file code out of the
        // core of MEMFS. If we want to keep this lazy file concept I feel it should
        // be its own thin LAZYFS proxying calls to MEMFS.
        if (properties.contents) {
          node.contents = properties.contents;
        } else if (properties.url) {
          node.contents = null;
          node.url = properties.url;
        }
        // Add a function that defers querying the file size until it is asked the first time.
        Object.defineProperty(node, "usedBytes", {
            get: function() { return this.contents.length; }
        });
        // override each stream op with one that tries to force load the lazy file first
        var stream_ops = {};
        var keys = Object.keys(node.stream_ops);
        keys.forEach(function(key) {
          var fn = node.stream_ops[key];
          stream_ops[key] = function forceLoadLazyFile() {
            if (!FS.forceLoadFile(node)) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            return fn.apply(null, arguments);
          };
        });
        // use a custom read function
        stream_ops.read = function stream_ops_read(stream, buffer, offset, length, position) {
          if (!FS.forceLoadFile(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EIO);
          }
          var contents = stream.node.contents;
          if (position >= contents.length)
            return 0;
          var size = Math.min(contents.length - position, length);
          assert(size >= 0);
          if (contents.slice) { // normal array
            for (var i = 0; i < size; i++) {
              buffer[offset + i] = contents[position + i];
            }
          } else {
            for (var i = 0; i < size; i++) { // LazyUint8Array from sync binary XHR
              buffer[offset + i] = contents.get(position + i);
            }
          }
          return size;
        };
        node.stream_ops = stream_ops;
        return node;
      },createPreloadedFile:function (parent, name, url, canRead, canWrite, onload, onerror, dontCreateFile, canOwn) {
        Browser.init();
        // TODO we should allow people to just pass in a complete filename instead
        // of parent and name being that we just join them anyways
        var fullname = name ? PATH.resolve(PATH.join2(parent, name)) : parent;
        function processData(byteArray) {
          function finish(byteArray) {
            if (!dontCreateFile) {
              FS.createDataFile(parent, name, byteArray, canRead, canWrite, canOwn);
            }
            if (onload) onload();
            removeRunDependency('cp ' + fullname);
          }
          var handled = false;
          Module['preloadPlugins'].forEach(function(plugin) {
            if (handled) return;
            if (plugin['canHandle'](fullname)) {
              plugin['handle'](byteArray, fullname, finish, function() {
                if (onerror) onerror();
                removeRunDependency('cp ' + fullname);
              });
              handled = true;
            }
          });
          if (!handled) finish(byteArray);
        }
        addRunDependency('cp ' + fullname);
        if (typeof url == 'string') {
          Browser.asyncLoad(url, function(byteArray) {
            processData(byteArray);
          }, onerror);
        } else {
          processData(url);
        }
      },indexedDB:function () {
        return window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
      },DB_NAME:function () {
        return 'EM_FS_' + window.location.pathname;
      },DB_VERSION:20,DB_STORE_NAME:"FILE_DATA",saveFilesToDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = function openRequest_onupgradeneeded() {
          console.log('creating db');
          var db = openRequest.result;
          db.createObjectStore(FS.DB_STORE_NAME);
        };
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          var transaction = db.transaction([FS.DB_STORE_NAME], 'readwrite');
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var putRequest = files.put(FS.analyzePath(path).object.contents, path);
            putRequest.onsuccess = function putRequest_onsuccess() { ok++; if (ok + fail == total) finish() };
            putRequest.onerror = function putRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      },loadFilesFromDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = onerror; // no database to load from
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          try {
            var transaction = db.transaction([FS.DB_STORE_NAME], 'readonly');
          } catch(e) {
            onerror(e);
            return;
          }
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var getRequest = files.get(path);
            getRequest.onsuccess = function getRequest_onsuccess() {
              if (FS.analyzePath(path).exists) {
                FS.unlink(path);
              }
              FS.createDataFile(PATH.dirname(path), PATH.basename(path), getRequest.result, true, true, true);
              ok++;
              if (ok + fail == total) finish();
            };
            getRequest.onerror = function getRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      }};function _fflush(stream) {
      // int fflush(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fflush.html
      // we don't currently perform any user-space buffering of data
    }

   
  Module["_strlen"] = _strlen;

  function _decodeMP3_unclipped() {
  Module['printErr']('missing function: decodeMP3_unclipped'); abort(-1);
  }

  function _InitMP3() {
  Module['printErr']('missing function: InitMP3'); abort(-1);
  }

   
  Module["_i64Add"] = _i64Add;

  var _fabs=Math_abs;

  var _floor=Math_floor;

  var _sqrt=Math_sqrt;

  var _llvm_pow_f32=Math_pow;

  var _abs=Math_abs;

  var Browser={mainLoop:{scheduler:null,method:"",shouldPause:false,paused:false,queue:[],pause:function () {
          Browser.mainLoop.shouldPause = true;
        },resume:function () {
          if (Browser.mainLoop.paused) {
            Browser.mainLoop.paused = false;
            Browser.mainLoop.scheduler();
          }
          Browser.mainLoop.shouldPause = false;
        },updateStatus:function () {
          if (Module['setStatus']) {
            var message = Module['statusMessage'] || 'Please wait...';
            var remaining = Browser.mainLoop.remainingBlockers;
            var expected = Browser.mainLoop.expectedBlockers;
            if (remaining) {
              if (remaining < expected) {
                Module['setStatus'](message + ' (' + (expected - remaining) + '/' + expected + ')');
              } else {
                Module['setStatus'](message);
              }
            } else {
              Module['setStatus']('');
            }
          }
        },runIter:function (func) {
          if (ABORT) return;
          if (Module['preMainLoop']) {
            var preRet = Module['preMainLoop']();
            if (preRet === false) {
              return; // |return false| skips a frame
            }
          }
          try {
            func();
          } catch (e) {
            if (e instanceof ExitStatus) {
              return;
            } else {
              if (e && typeof e === 'object' && e.stack) Module.printErr('exception thrown: ' + [e, e.stack]);
              throw e;
            }
          }
          if (Module['postMainLoop']) Module['postMainLoop']();
        }},isFullScreen:false,pointerLock:false,moduleContextCreatedCallbacks:[],workers:[],init:function () {
        if (!Module["preloadPlugins"]) Module["preloadPlugins"] = []; // needs to exist even in workers
  
        if (Browser.initted) return;
        Browser.initted = true;
  
        try {
          new Blob();
          Browser.hasBlobConstructor = true;
        } catch(e) {
          Browser.hasBlobConstructor = false;
          console.log("warning: no blob constructor, cannot create blobs with mimetypes");
        }
        Browser.BlobBuilder = typeof MozBlobBuilder != "undefined" ? MozBlobBuilder : (typeof WebKitBlobBuilder != "undefined" ? WebKitBlobBuilder : (!Browser.hasBlobConstructor ? console.log("warning: no BlobBuilder") : null));
        Browser.URLObject = typeof window != "undefined" ? (window.URL ? window.URL : window.webkitURL) : undefined;
        if (!Module.noImageDecoding && typeof Browser.URLObject === 'undefined') {
          console.log("warning: Browser does not support creating object URLs. Built-in browser image decoding will not be available.");
          Module.noImageDecoding = true;
        }
  
        // Support for plugins that can process preloaded files. You can add more of these to
        // your app by creating and appending to Module.preloadPlugins.
        //
        // Each plugin is asked if it can handle a file based on the file's name. If it can,
        // it is given the file's raw data. When it is done, it calls a callback with the file's
        // (possibly modified) data. For example, a plugin might decompress a file, or it
        // might create some side data structure for use later (like an Image element, etc.).
  
        var imagePlugin = {};
        imagePlugin['canHandle'] = function imagePlugin_canHandle(name) {
          return !Module.noImageDecoding && /\.(jpg|jpeg|png|bmp)$/i.test(name);
        };
        imagePlugin['handle'] = function imagePlugin_handle(byteArray, name, onload, onerror) {
          var b = null;
          if (Browser.hasBlobConstructor) {
            try {
              b = new Blob([byteArray], { type: Browser.getMimetype(name) });
              if (b.size !== byteArray.length) { // Safari bug #118630
                // Safari's Blob can only take an ArrayBuffer
                b = new Blob([(new Uint8Array(byteArray)).buffer], { type: Browser.getMimetype(name) });
              }
            } catch(e) {
              Runtime.warnOnce('Blob constructor present but fails: ' + e + '; falling back to blob builder');
            }
          }
          if (!b) {
            var bb = new Browser.BlobBuilder();
            bb.append((new Uint8Array(byteArray)).buffer); // we need to pass a buffer, and must copy the array to get the right data range
            b = bb.getBlob();
          }
          var url = Browser.URLObject.createObjectURL(b);
          var img = new Image();
          img.onload = function img_onload() {
            assert(img.complete, 'Image ' + name + ' could not be decoded');
            var canvas = document.createElement('canvas');
            canvas.width = img.width;
            canvas.height = img.height;
            var ctx = canvas.getContext('2d');
            ctx.drawImage(img, 0, 0);
            Module["preloadedImages"][name] = canvas;
            Browser.URLObject.revokeObjectURL(url);
            if (onload) onload(byteArray);
          };
          img.onerror = function img_onerror(event) {
            console.log('Image ' + url + ' could not be decoded');
            if (onerror) onerror();
          };
          img.src = url;
        };
        Module['preloadPlugins'].push(imagePlugin);
  
        var audioPlugin = {};
        audioPlugin['canHandle'] = function audioPlugin_canHandle(name) {
          return !Module.noAudioDecoding && name.substr(-4) in { '.ogg': 1, '.wav': 1, '.mp3': 1 };
        };
        audioPlugin['handle'] = function audioPlugin_handle(byteArray, name, onload, onerror) {
          var done = false;
          function finish(audio) {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = audio;
            if (onload) onload(byteArray);
          }
          function fail() {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = new Audio(); // empty shim
            if (onerror) onerror();
          }
          if (Browser.hasBlobConstructor) {
            try {
              var b = new Blob([byteArray], { type: Browser.getMimetype(name) });
            } catch(e) {
              return fail();
            }
            var url = Browser.URLObject.createObjectURL(b); // XXX we never revoke this!
            var audio = new Audio();
            audio.addEventListener('canplaythrough', function() { finish(audio) }, false); // use addEventListener due to chromium bug 124926
            audio.onerror = function audio_onerror(event) {
              if (done) return;
              console.log('warning: browser could not fully decode audio ' + name + ', trying slower base64 approach');
              function encode64(data) {
                var BASE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
                var PAD = '=';
                var ret = '';
                var leftchar = 0;
                var leftbits = 0;
                for (var i = 0; i < data.length; i++) {
                  leftchar = (leftchar << 8) | data[i];
                  leftbits += 8;
                  while (leftbits >= 6) {
                    var curr = (leftchar >> (leftbits-6)) & 0x3f;
                    leftbits -= 6;
                    ret += BASE[curr];
                  }
                }
                if (leftbits == 2) {
                  ret += BASE[(leftchar&3) << 4];
                  ret += PAD + PAD;
                } else if (leftbits == 4) {
                  ret += BASE[(leftchar&0xf) << 2];
                  ret += PAD;
                }
                return ret;
              }
              audio.src = 'data:audio/x-' + name.substr(-3) + ';base64,' + encode64(byteArray);
              finish(audio); // we don't wait for confirmation this worked - but it's worth trying
            };
            audio.src = url;
            // workaround for chrome bug 124926 - we do not always get oncanplaythrough or onerror
            Browser.safeSetTimeout(function() {
              finish(audio); // try to use it even though it is not necessarily ready to play
            }, 10000);
          } else {
            return fail();
          }
        };
        Module['preloadPlugins'].push(audioPlugin);
  
        // Canvas event setup
  
        var canvas = Module['canvas'];
        function pointerLockChange() {
          Browser.pointerLock = document['pointerLockElement'] === canvas ||
                                document['mozPointerLockElement'] === canvas ||
                                document['webkitPointerLockElement'] === canvas ||
                                document['msPointerLockElement'] === canvas;
        }
        if (canvas) {
          // forced aspect ratio can be enabled by defining 'forcedAspectRatio' on Module
          // Module['forcedAspectRatio'] = 4 / 3;
          
          canvas.requestPointerLock = canvas['requestPointerLock'] ||
                                      canvas['mozRequestPointerLock'] ||
                                      canvas['webkitRequestPointerLock'] ||
                                      canvas['msRequestPointerLock'] ||
                                      function(){};
          canvas.exitPointerLock = document['exitPointerLock'] ||
                                   document['mozExitPointerLock'] ||
                                   document['webkitExitPointerLock'] ||
                                   document['msExitPointerLock'] ||
                                   function(){}; // no-op if function does not exist
          canvas.exitPointerLock = canvas.exitPointerLock.bind(document);
  
  
          document.addEventListener('pointerlockchange', pointerLockChange, false);
          document.addEventListener('mozpointerlockchange', pointerLockChange, false);
          document.addEventListener('webkitpointerlockchange', pointerLockChange, false);
          document.addEventListener('mspointerlockchange', pointerLockChange, false);
  
          if (Module['elementPointerLock']) {
            canvas.addEventListener("click", function(ev) {
              if (!Browser.pointerLock && canvas.requestPointerLock) {
                canvas.requestPointerLock();
                ev.preventDefault();
              }
            }, false);
          }
        }
      },createContext:function (canvas, useWebGL, setInModule, webGLContextAttributes) {
        if (useWebGL && Module.ctx && canvas == Module.canvas) return Module.ctx; // no need to recreate GL context if it's already been created for this canvas.
  
        var ctx;
        var contextHandle;
        if (useWebGL) {
          // For GLES2/desktop GL compatibility, adjust a few defaults to be different to WebGL defaults, so that they align better with the desktop defaults.
          var contextAttributes = {
            antialias: false,
            alpha: false
          };
  
          if (webGLContextAttributes) {
            for (var attribute in webGLContextAttributes) {
              contextAttributes[attribute] = webGLContextAttributes[attribute];
            }
          }
  
          contextHandle = GL.createContext(canvas, contextAttributes);
          ctx = GL.getContext(contextHandle).GLctx;
          // Set the background of the WebGL canvas to black
          canvas.style.backgroundColor = "black";
        } else {
          ctx = canvas.getContext('2d');
        }
  
        if (!ctx) return null;
  
        if (setInModule) {
          if (!useWebGL) assert(typeof GLctx === 'undefined', 'cannot set in module if GLctx is used, but we are a non-GL context that would replace it');
  
          Module.ctx = ctx;
          if (useWebGL) GL.makeContextCurrent(contextHandle);
          Module.useWebGL = useWebGL;
          Browser.moduleContextCreatedCallbacks.forEach(function(callback) { callback() });
          Browser.init();
        }
        return ctx;
      },destroyContext:function (canvas, useWebGL, setInModule) {},fullScreenHandlersInstalled:false,lockPointer:undefined,resizeCanvas:undefined,requestFullScreen:function (lockPointer, resizeCanvas) {
        Browser.lockPointer = lockPointer;
        Browser.resizeCanvas = resizeCanvas;
        if (typeof Browser.lockPointer === 'undefined') Browser.lockPointer = true;
        if (typeof Browser.resizeCanvas === 'undefined') Browser.resizeCanvas = false;
  
        var canvas = Module['canvas'];
        function fullScreenChange() {
          Browser.isFullScreen = false;
          var canvasContainer = canvas.parentNode;
          if ((document['webkitFullScreenElement'] || document['webkitFullscreenElement'] ||
               document['mozFullScreenElement'] || document['mozFullscreenElement'] ||
               document['fullScreenElement'] || document['fullscreenElement'] ||
               document['msFullScreenElement'] || document['msFullscreenElement'] ||
               document['webkitCurrentFullScreenElement']) === canvasContainer) {
            canvas.cancelFullScreen = document['cancelFullScreen'] ||
                                      document['mozCancelFullScreen'] ||
                                      document['webkitCancelFullScreen'] ||
                                      document['msExitFullscreen'] ||
                                      document['exitFullscreen'] ||
                                      function() {};
            canvas.cancelFullScreen = canvas.cancelFullScreen.bind(document);
            if (Browser.lockPointer) canvas.requestPointerLock();
            Browser.isFullScreen = true;
            if (Browser.resizeCanvas) Browser.setFullScreenCanvasSize();
          } else {
            
            // remove the full screen specific parent of the canvas again to restore the HTML structure from before going full screen
            canvasContainer.parentNode.insertBefore(canvas, canvasContainer);
            canvasContainer.parentNode.removeChild(canvasContainer);
            
            if (Browser.resizeCanvas) Browser.setWindowedCanvasSize();
          }
          if (Module['onFullScreen']) Module['onFullScreen'](Browser.isFullScreen);
          Browser.updateCanvasDimensions(canvas);
        }
  
        if (!Browser.fullScreenHandlersInstalled) {
          Browser.fullScreenHandlersInstalled = true;
          document.addEventListener('fullscreenchange', fullScreenChange, false);
          document.addEventListener('mozfullscreenchange', fullScreenChange, false);
          document.addEventListener('webkitfullscreenchange', fullScreenChange, false);
          document.addEventListener('MSFullscreenChange', fullScreenChange, false);
        }
  
        // create a new parent to ensure the canvas has no siblings. this allows browsers to optimize full screen performance when its parent is the full screen root
        var canvasContainer = document.createElement("div");
        canvas.parentNode.insertBefore(canvasContainer, canvas);
        canvasContainer.appendChild(canvas);
        
        // use parent of canvas as full screen root to allow aspect ratio correction (Firefox stretches the root to screen size)
        canvasContainer.requestFullScreen = canvasContainer['requestFullScreen'] ||
                                            canvasContainer['mozRequestFullScreen'] ||
                                            canvasContainer['msRequestFullscreen'] ||
                                           (canvasContainer['webkitRequestFullScreen'] ? function() { canvasContainer['webkitRequestFullScreen'](Element['ALLOW_KEYBOARD_INPUT']) } : null);
        canvasContainer.requestFullScreen();
      },nextRAF:0,fakeRequestAnimationFrame:function (func) {
        // try to keep 60fps between calls to here
        var now = Date.now();
        if (Browser.nextRAF === 0) {
          Browser.nextRAF = now + 1000/60;
        } else {
          while (now + 2 >= Browser.nextRAF) { // fudge a little, to avoid timer jitter causing us to do lots of delay:0
            Browser.nextRAF += 1000/60;
          }
        }
        var delay = Math.max(Browser.nextRAF - now, 0);
        setTimeout(func, delay);
      },requestAnimationFrame:function requestAnimationFrame(func) {
        if (typeof window === 'undefined') { // Provide fallback to setTimeout if window is undefined (e.g. in Node.js)
          Browser.fakeRequestAnimationFrame(func);
        } else {
          if (!window.requestAnimationFrame) {
            window.requestAnimationFrame = window['requestAnimationFrame'] ||
                                           window['mozRequestAnimationFrame'] ||
                                           window['webkitRequestAnimationFrame'] ||
                                           window['msRequestAnimationFrame'] ||
                                           window['oRequestAnimationFrame'] ||
                                           Browser.fakeRequestAnimationFrame;
          }
          window.requestAnimationFrame(func);
        }
      },safeCallback:function (func) {
        return function() {
          if (!ABORT) return func.apply(null, arguments);
        };
      },safeRequestAnimationFrame:function (func) {
        return Browser.requestAnimationFrame(function() {
          if (!ABORT) func();
        });
      },safeSetTimeout:function (func, timeout) {
        Module['noExitRuntime'] = true;
        return setTimeout(function() {
          if (!ABORT) func();
        }, timeout);
      },safeSetInterval:function (func, timeout) {
        Module['noExitRuntime'] = true;
        return setInterval(function() {
          if (!ABORT) func();
        }, timeout);
      },getMimetype:function (name) {
        return {
          'jpg': 'image/jpeg',
          'jpeg': 'image/jpeg',
          'png': 'image/png',
          'bmp': 'image/bmp',
          'ogg': 'audio/ogg',
          'wav': 'audio/wav',
          'mp3': 'audio/mpeg'
        }[name.substr(name.lastIndexOf('.')+1)];
      },getUserMedia:function (func) {
        if(!window.getUserMedia) {
          window.getUserMedia = navigator['getUserMedia'] ||
                                navigator['mozGetUserMedia'];
        }
        window.getUserMedia(func);
      },getMovementX:function (event) {
        return event['movementX'] ||
               event['mozMovementX'] ||
               event['webkitMovementX'] ||
               0;
      },getMovementY:function (event) {
        return event['movementY'] ||
               event['mozMovementY'] ||
               event['webkitMovementY'] ||
               0;
      },getMouseWheelDelta:function (event) {
        var delta = 0;
        switch (event.type) {
          case 'DOMMouseScroll': 
            delta = event.detail;
            break;
          case 'mousewheel': 
            delta = -event.wheelDelta;
            break;
          case 'wheel': 
            delta = event.deltaY;
            break;
          default:
            throw 'unrecognized mouse wheel event: ' + event.type;
        }
        return Math.max(-1, Math.min(1, delta));
      },mouseX:0,mouseY:0,mouseMovementX:0,mouseMovementY:0,touches:{},lastTouches:{},calculateMouseEvent:function (event) { // event should be mousemove, mousedown or mouseup
        if (Browser.pointerLock) {
          // When the pointer is locked, calculate the coordinates
          // based on the movement of the mouse.
          // Workaround for Firefox bug 764498
          if (event.type != 'mousemove' &&
              ('mozMovementX' in event)) {
            Browser.mouseMovementX = Browser.mouseMovementY = 0;
          } else {
            Browser.mouseMovementX = Browser.getMovementX(event);
            Browser.mouseMovementY = Browser.getMovementY(event);
          }
          
          // check if SDL is available
          if (typeof SDL != "undefined") {
          	Browser.mouseX = SDL.mouseX + Browser.mouseMovementX;
          	Browser.mouseY = SDL.mouseY + Browser.mouseMovementY;
          } else {
          	// just add the mouse delta to the current absolut mouse position
          	// FIXME: ideally this should be clamped against the canvas size and zero
          	Browser.mouseX += Browser.mouseMovementX;
          	Browser.mouseY += Browser.mouseMovementY;
          }        
        } else {
          // Otherwise, calculate the movement based on the changes
          // in the coordinates.
          var rect = Module["canvas"].getBoundingClientRect();
          var cw = Module["canvas"].width;
          var ch = Module["canvas"].height;
  
          // Neither .scrollX or .pageXOffset are defined in a spec, but
          // we prefer .scrollX because it is currently in a spec draft.
          // (see: http://www.w3.org/TR/2013/WD-cssom-view-20131217/)
          var scrollX = ((typeof window.scrollX !== 'undefined') ? window.scrollX : window.pageXOffset);
          var scrollY = ((typeof window.scrollY !== 'undefined') ? window.scrollY : window.pageYOffset);
  
          if (event.type === 'touchstart' || event.type === 'touchend' || event.type === 'touchmove') {
            var touch = event.touch;
            if (touch === undefined) {
              return; // the "touch" property is only defined in SDL
  
            }
            var adjustedX = touch.pageX - (scrollX + rect.left);
            var adjustedY = touch.pageY - (scrollY + rect.top);
  
            adjustedX = adjustedX * (cw / rect.width);
            adjustedY = adjustedY * (ch / rect.height);
  
            var coords = { x: adjustedX, y: adjustedY };
            
            if (event.type === 'touchstart') {
              Browser.lastTouches[touch.identifier] = coords;
              Browser.touches[touch.identifier] = coords;
            } else if (event.type === 'touchend' || event.type === 'touchmove') {
              Browser.lastTouches[touch.identifier] = Browser.touches[touch.identifier];
              Browser.touches[touch.identifier] = { x: adjustedX, y: adjustedY };
            } 
            return;
          }
  
          var x = event.pageX - (scrollX + rect.left);
          var y = event.pageY - (scrollY + rect.top);
  
          // the canvas might be CSS-scaled compared to its backbuffer;
          // SDL-using content will want mouse coordinates in terms
          // of backbuffer units.
          x = x * (cw / rect.width);
          y = y * (ch / rect.height);
  
          Browser.mouseMovementX = x - Browser.mouseX;
          Browser.mouseMovementY = y - Browser.mouseY;
          Browser.mouseX = x;
          Browser.mouseY = y;
        }
      },xhrLoad:function (url, onload, onerror) {
        var xhr = new XMLHttpRequest();
        xhr.open('GET', url, true);
        xhr.responseType = 'arraybuffer';
        xhr.onload = function xhr_onload() {
          if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
            onload(xhr.response);
          } else {
            onerror();
          }
        };
        xhr.onerror = onerror;
        xhr.send(null);
      },asyncLoad:function (url, onload, onerror, noRunDep) {
        Browser.xhrLoad(url, function(arrayBuffer) {
          assert(arrayBuffer, 'Loading data file "' + url + '" failed (no arrayBuffer).');
          onload(new Uint8Array(arrayBuffer));
          if (!noRunDep) removeRunDependency('al ' + url);
        }, function(event) {
          if (onerror) {
            onerror();
          } else {
            throw 'Loading data file "' + url + '" failed.';
          }
        });
        if (!noRunDep) addRunDependency('al ' + url);
      },resizeListeners:[],updateResizeListeners:function () {
        var canvas = Module['canvas'];
        Browser.resizeListeners.forEach(function(listener) {
          listener(canvas.width, canvas.height);
        });
      },setCanvasSize:function (width, height, noUpdates) {
        var canvas = Module['canvas'];
        Browser.updateCanvasDimensions(canvas, width, height);
        if (!noUpdates) Browser.updateResizeListeners();
      },windowedWidth:0,windowedHeight:0,setFullScreenCanvasSize:function () {
        // check if SDL is available   
        if (typeof SDL != "undefined") {
        	var flags = HEAPU32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)];
        	flags = flags | 0x00800000; // set SDL_FULLSCREEN flag
        	HEAP32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)]=flags
        }
        Browser.updateResizeListeners();
      },setWindowedCanvasSize:function () {
        // check if SDL is available       
        if (typeof SDL != "undefined") {
        	var flags = HEAPU32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)];
        	flags = flags & ~0x00800000; // clear SDL_FULLSCREEN flag
        	HEAP32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)]=flags
        }
        Browser.updateResizeListeners();
      },updateCanvasDimensions:function (canvas, wNative, hNative) {
        if (wNative && hNative) {
          canvas.widthNative = wNative;
          canvas.heightNative = hNative;
        } else {
          wNative = canvas.widthNative;
          hNative = canvas.heightNative;
        }
        var w = wNative;
        var h = hNative;
        if (Module['forcedAspectRatio'] && Module['forcedAspectRatio'] > 0) {
          if (w/h < Module['forcedAspectRatio']) {
            w = Math.round(h * Module['forcedAspectRatio']);
          } else {
            h = Math.round(w / Module['forcedAspectRatio']);
          }
        }
        if (((document['webkitFullScreenElement'] || document['webkitFullscreenElement'] ||
             document['mozFullScreenElement'] || document['mozFullscreenElement'] ||
             document['fullScreenElement'] || document['fullscreenElement'] ||
             document['msFullScreenElement'] || document['msFullscreenElement'] ||
             document['webkitCurrentFullScreenElement']) === canvas.parentNode) && (typeof screen != 'undefined')) {
           var factor = Math.min(screen.width / w, screen.height / h);
           w = Math.round(w * factor);
           h = Math.round(h * factor);
        }
        if (Browser.resizeCanvas) {
          if (canvas.width  != w) canvas.width  = w;
          if (canvas.height != h) canvas.height = h;
          if (typeof canvas.style != 'undefined') {
            canvas.style.removeProperty( "width");
            canvas.style.removeProperty("height");
          }
        } else {
          if (canvas.width  != wNative) canvas.width  = wNative;
          if (canvas.height != hNative) canvas.height = hNative;
          if (typeof canvas.style != 'undefined') {
            if (w != wNative || h != hNative) {
              canvas.style.setProperty( "width", w + "px", "important");
              canvas.style.setProperty("height", h + "px", "important");
            } else {
              canvas.style.removeProperty( "width");
              canvas.style.removeProperty("height");
            }
          }
        }
      },wgetRequests:{},nextWgetRequestHandle:0,getNextWgetRequestHandle:function () {
        var handle = Browser.nextWgetRequestHandle;
        Browser.nextWgetRequestHandle++;
        return handle;
      }};

  
  function __exit(status) {
      // void _exit(int status);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/exit.html
      Module['exit'](status);
    }function _exit(status) {
      __exit(status);
    }

  function _log10(x) {
      return Math.log(x) / Math.LN10;
    }

  var _sin=Math_sin;

  function _ExitMP3() {
  Module['printErr']('missing function: ExitMP3'); abort(-1);
  }

   
  Module["_bitshift64Lshr"] = _bitshift64Lshr;

  function _log10f() {
  return _log10.apply(null, arguments)
  }

  var _atan=Math_atan;

  var _BDtoIHigh=true;

  var _ceil=Math_ceil;

  
  
  
  
  
  
  function _mkport() { throw 'TODO' }var SOCKFS={mount:function (mount) {
        // If Module['websocket'] has already been defined (e.g. for configuring
        // the subprotocol/url) use that, if not initialise it to a new object.
        Module['websocket'] = (Module['websocket'] && 
                               ('object' === typeof Module['websocket'])) ? Module['websocket'] : {};
  
        // Add the Event registration mechanism to the exported websocket configuration
        // object so we can register network callbacks from native JavaScript too.
        // For more documentation see system/include/emscripten/emscripten.h
        Module['websocket']._callbacks = {};
        Module['websocket']['on'] = function(event, callback) {
  	    if ('function' === typeof callback) {
  		  this._callbacks[event] = callback;
          }
  	    return this;
        };
  
        Module['websocket'].emit = function(event, param) {
  	    if ('function' === typeof this._callbacks[event]) {
  		  this._callbacks[event].call(this, param);
          }
        };
  
        // If debug is enabled register simple default logging callbacks for each Event.
  
        return FS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);
      },createSocket:function (family, type, protocol) {
        var streaming = type == 1;
        if (protocol) {
          assert(streaming == (protocol == 6)); // if SOCK_STREAM, must be tcp
        }
  
        // create our internal socket structure
        var sock = {
          family: family,
          type: type,
          protocol: protocol,
          server: null,
          error: null, // Used in getsockopt for SOL_SOCKET/SO_ERROR test
          peers: {},
          pending: [],
          recv_queue: [],
          sock_ops: SOCKFS.websocket_sock_ops
        };
  
        // create the filesystem node to store the socket structure
        var name = SOCKFS.nextname();
        var node = FS.createNode(SOCKFS.root, name, 49152, 0);
        node.sock = sock;
  
        // and the wrapping stream that enables library functions such
        // as read and write to indirectly interact with the socket
        var stream = FS.createStream({
          path: name,
          node: node,
          flags: FS.modeStringToFlags('r+'),
          seekable: false,
          stream_ops: SOCKFS.stream_ops
        });
  
        // map the new stream to the socket structure (sockets have a 1:1
        // relationship with a stream)
        sock.stream = stream;
  
        return sock;
      },getSocket:function (fd) {
        var stream = FS.getStream(fd);
        if (!stream || !FS.isSocket(stream.node.mode)) {
          return null;
        }
        return stream.node.sock;
      },stream_ops:{poll:function (stream) {
          var sock = stream.node.sock;
          return sock.sock_ops.poll(sock);
        },ioctl:function (stream, request, varargs) {
          var sock = stream.node.sock;
          return sock.sock_ops.ioctl(sock, request, varargs);
        },read:function (stream, buffer, offset, length, position /* ignored */) {
          var sock = stream.node.sock;
          var msg = sock.sock_ops.recvmsg(sock, length);
          if (!msg) {
            // socket is closed
            return 0;
          }
          buffer.set(msg.buffer, offset);
          return msg.buffer.length;
        },write:function (stream, buffer, offset, length, position /* ignored */) {
          var sock = stream.node.sock;
          return sock.sock_ops.sendmsg(sock, buffer, offset, length);
        },close:function (stream) {
          var sock = stream.node.sock;
          sock.sock_ops.close(sock);
        }},nextname:function () {
        if (!SOCKFS.nextname.current) {
          SOCKFS.nextname.current = 0;
        }
        return 'socket[' + (SOCKFS.nextname.current++) + ']';
      },websocket_sock_ops:{createPeer:function (sock, addr, port) {
          var ws;
  
          if (typeof addr === 'object') {
            ws = addr;
            addr = null;
            port = null;
          }
  
          if (ws) {
            // for sockets that've already connected (e.g. we're the server)
            // we can inspect the _socket property for the address
            if (ws._socket) {
              addr = ws._socket.remoteAddress;
              port = ws._socket.remotePort;
            }
            // if we're just now initializing a connection to the remote,
            // inspect the url property
            else {
              var result = /ws[s]?:\/\/([^:]+):(\d+)/.exec(ws.url);
              if (!result) {
                throw new Error('WebSocket URL must be in the format ws(s)://address:port');
              }
              addr = result[1];
              port = parseInt(result[2], 10);
            }
          } else {
            // create the actual websocket object and connect
            try {
              // runtimeConfig gets set to true if WebSocket runtime configuration is available.
              var runtimeConfig = (Module['websocket'] && ('object' === typeof Module['websocket']));
  
              // The default value is 'ws://' the replace is needed because the compiler replaces '//' comments with '#'
              // comments without checking context, so we'd end up with ws:#, the replace swaps the '#' for '//' again.
              var url = 'ws:#'.replace('#', '//');
  
              if (runtimeConfig) {
                if ('string' === typeof Module['websocket']['url']) {
                  url = Module['websocket']['url']; // Fetch runtime WebSocket URL config.
                }
              }
  
              if (url === 'ws://' || url === 'wss://') { // Is the supplied URL config just a prefix, if so complete it.
                var parts = addr.split('/');
                url = url + parts[0] + ":" + port + "/" + parts.slice(1).join('/');
              }
  
              // Make the WebSocket subprotocol (Sec-WebSocket-Protocol) default to binary if no configuration is set.
              var subProtocols = 'binary'; // The default value is 'binary'
  
              if (runtimeConfig) {
                if ('string' === typeof Module['websocket']['subprotocol']) {
                  subProtocols = Module['websocket']['subprotocol']; // Fetch runtime WebSocket subprotocol config.
                }
              }
  
              // The regex trims the string (removes spaces at the beginning and end, then splits the string by
              // <any space>,<any space> into an Array. Whitespace removal is important for Websockify and ws.
              subProtocols = subProtocols.replace(/^ +| +$/g,"").split(/ *, */);
  
              // The node ws library API for specifying optional subprotocol is slightly different than the browser's.
              var opts = ENVIRONMENT_IS_NODE ? {'protocol': subProtocols.toString()} : subProtocols;
  
              // If node we use the ws library.
              var WebSocket = ENVIRONMENT_IS_NODE ? require('ws') : window['WebSocket'];
              ws = new WebSocket(url, opts);
              ws.binaryType = 'arraybuffer';
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EHOSTUNREACH);
            }
          }
  
  
          var peer = {
            addr: addr,
            port: port,
            socket: ws,
            dgram_send_queue: []
          };
  
          SOCKFS.websocket_sock_ops.addPeer(sock, peer);
          SOCKFS.websocket_sock_ops.handlePeerEvents(sock, peer);
  
          // if this is a bound dgram socket, send the port number first to allow
          // us to override the ephemeral port reported to us by remotePort on the
          // remote end.
          if (sock.type === 2 && typeof sock.sport !== 'undefined') {
            peer.dgram_send_queue.push(new Uint8Array([
                255, 255, 255, 255,
                'p'.charCodeAt(0), 'o'.charCodeAt(0), 'r'.charCodeAt(0), 't'.charCodeAt(0),
                ((sock.sport & 0xff00) >> 8) , (sock.sport & 0xff)
            ]));
          }
  
          return peer;
        },getPeer:function (sock, addr, port) {
          return sock.peers[addr + ':' + port];
        },addPeer:function (sock, peer) {
          sock.peers[peer.addr + ':' + peer.port] = peer;
        },removePeer:function (sock, peer) {
          delete sock.peers[peer.addr + ':' + peer.port];
        },handlePeerEvents:function (sock, peer) {
          var first = true;
  
          var handleOpen = function () {
  
            Module['websocket'].emit('open', sock.stream.fd);
  
            try {
              var queued = peer.dgram_send_queue.shift();
              while (queued) {
                peer.socket.send(queued);
                queued = peer.dgram_send_queue.shift();
              }
            } catch (e) {
              // not much we can do here in the way of proper error handling as we've already
              // lied and said this data was sent. shut it down.
              peer.socket.close();
            }
          };
  
          function handleMessage(data) {
            assert(typeof data !== 'string' && data.byteLength !== undefined);  // must receive an ArrayBuffer
            data = new Uint8Array(data);  // make a typed array view on the array buffer
  
  
            // if this is the port message, override the peer's port with it
            var wasfirst = first;
            first = false;
            if (wasfirst &&
                data.length === 10 &&
                data[0] === 255 && data[1] === 255 && data[2] === 255 && data[3] === 255 &&
                data[4] === 'p'.charCodeAt(0) && data[5] === 'o'.charCodeAt(0) && data[6] === 'r'.charCodeAt(0) && data[7] === 't'.charCodeAt(0)) {
              // update the peer's port and it's key in the peer map
              var newport = ((data[8] << 8) | data[9]);
              SOCKFS.websocket_sock_ops.removePeer(sock, peer);
              peer.port = newport;
              SOCKFS.websocket_sock_ops.addPeer(sock, peer);
              return;
            }
  
            sock.recv_queue.push({ addr: peer.addr, port: peer.port, data: data });
            Module['websocket'].emit('message', sock.stream.fd);
          };
  
          if (ENVIRONMENT_IS_NODE) {
            peer.socket.on('open', handleOpen);
            peer.socket.on('message', function(data, flags) {
              if (!flags.binary) {
                return;
              }
              handleMessage((new Uint8Array(data)).buffer);  // copy from node Buffer -> ArrayBuffer
            });
            peer.socket.on('close', function() {
              Module['websocket'].emit('close', sock.stream.fd);
            });
            peer.socket.on('error', function(error) {
              // Although the ws library may pass errors that may be more descriptive than
              // ECONNREFUSED they are not necessarily the expected error code e.g. 
              // ENOTFOUND on getaddrinfo seems to be node.js specific, so using ECONNREFUSED
              // is still probably the most useful thing to do.
              sock.error = ERRNO_CODES.ECONNREFUSED; // Used in getsockopt for SOL_SOCKET/SO_ERROR test.
              Module['websocket'].emit('error', [sock.stream.fd, sock.error, 'ECONNREFUSED: Connection refused']);
              // don't throw
            });
          } else {
            peer.socket.onopen = handleOpen;
            peer.socket.onclose = function() {
              Module['websocket'].emit('close', sock.stream.fd);
            };
            peer.socket.onmessage = function peer_socket_onmessage(event) {
              handleMessage(event.data);
            };
            peer.socket.onerror = function(error) {
              // The WebSocket spec only allows a 'simple event' to be thrown on error,
              // so we only really know as much as ECONNREFUSED.
              sock.error = ERRNO_CODES.ECONNREFUSED; // Used in getsockopt for SOL_SOCKET/SO_ERROR test.
              Module['websocket'].emit('error', [sock.stream.fd, sock.error, 'ECONNREFUSED: Connection refused']);
            };
          }
        },poll:function (sock) {
          if (sock.type === 1 && sock.server) {
            // listen sockets should only say they're available for reading
            // if there are pending clients.
            return sock.pending.length ? (64 | 1) : 0;
          }
  
          var mask = 0;
          var dest = sock.type === 1 ?  // we only care about the socket state for connection-based sockets
            SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport) :
            null;
  
          if (sock.recv_queue.length ||
              !dest ||  // connection-less sockets are always ready to read
              (dest && dest.socket.readyState === dest.socket.CLOSING) ||
              (dest && dest.socket.readyState === dest.socket.CLOSED)) {  // let recv return 0 once closed
            mask |= (64 | 1);
          }
  
          if (!dest ||  // connection-less sockets are always ready to write
              (dest && dest.socket.readyState === dest.socket.OPEN)) {
            mask |= 4;
          }
  
          if ((dest && dest.socket.readyState === dest.socket.CLOSING) ||
              (dest && dest.socket.readyState === dest.socket.CLOSED)) {
            mask |= 16;
          }
  
          return mask;
        },ioctl:function (sock, request, arg) {
          switch (request) {
            case 21531:
              var bytes = 0;
              if (sock.recv_queue.length) {
                bytes = sock.recv_queue[0].data.length;
              }
              HEAP32[((arg)>>2)]=bytes;
              return 0;
            default:
              return ERRNO_CODES.EINVAL;
          }
        },close:function (sock) {
          // if we've spawned a listen server, close it
          if (sock.server) {
            try {
              sock.server.close();
            } catch (e) {
            }
            sock.server = null;
          }
          // close any peer connections
          var peers = Object.keys(sock.peers);
          for (var i = 0; i < peers.length; i++) {
            var peer = sock.peers[peers[i]];
            try {
              peer.socket.close();
            } catch (e) {
            }
            SOCKFS.websocket_sock_ops.removePeer(sock, peer);
          }
          return 0;
        },bind:function (sock, addr, port) {
          if (typeof sock.saddr !== 'undefined' || typeof sock.sport !== 'undefined') {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);  // already bound
          }
          sock.saddr = addr;
          sock.sport = port || _mkport();
          // in order to emulate dgram sockets, we need to launch a listen server when
          // binding on a connection-less socket
          // note: this is only required on the server side
          if (sock.type === 2) {
            // close the existing server if it exists
            if (sock.server) {
              sock.server.close();
              sock.server = null;
            }
            // swallow error operation not supported error that occurs when binding in the
            // browser where this isn't supported
            try {
              sock.sock_ops.listen(sock, 0);
            } catch (e) {
              if (!(e instanceof FS.ErrnoError)) throw e;
              if (e.errno !== ERRNO_CODES.EOPNOTSUPP) throw e;
            }
          }
        },connect:function (sock, addr, port) {
          if (sock.server) {
            throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
          }
  
          // TODO autobind
          // if (!sock.addr && sock.type == 2) {
          // }
  
          // early out if we're already connected / in the middle of connecting
          if (typeof sock.daddr !== 'undefined' && typeof sock.dport !== 'undefined') {
            var dest = SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport);
            if (dest) {
              if (dest.socket.readyState === dest.socket.CONNECTING) {
                throw new FS.ErrnoError(ERRNO_CODES.EALREADY);
              } else {
                throw new FS.ErrnoError(ERRNO_CODES.EISCONN);
              }
            }
          }
  
          // add the socket to our peer list and set our
          // destination address / port to match
          var peer = SOCKFS.websocket_sock_ops.createPeer(sock, addr, port);
          sock.daddr = peer.addr;
          sock.dport = peer.port;
  
          // always "fail" in non-blocking mode
          throw new FS.ErrnoError(ERRNO_CODES.EINPROGRESS);
        },listen:function (sock, backlog) {
          if (!ENVIRONMENT_IS_NODE) {
            throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
          }
          if (sock.server) {
             throw new FS.ErrnoError(ERRNO_CODES.EINVAL);  // already listening
          }
          var WebSocketServer = require('ws').Server;
          var host = sock.saddr;
          sock.server = new WebSocketServer({
            host: host,
            port: sock.sport
            // TODO support backlog
          });
          Module['websocket'].emit('listen', sock.stream.fd); // Send Event with listen fd.
  
          sock.server.on('connection', function(ws) {
            if (sock.type === 1) {
              var newsock = SOCKFS.createSocket(sock.family, sock.type, sock.protocol);
  
              // create a peer on the new socket
              var peer = SOCKFS.websocket_sock_ops.createPeer(newsock, ws);
              newsock.daddr = peer.addr;
              newsock.dport = peer.port;
  
              // push to queue for accept to pick up
              sock.pending.push(newsock);
              Module['websocket'].emit('connection', newsock.stream.fd);
            } else {
              // create a peer on the listen socket so calling sendto
              // with the listen socket and an address will resolve
              // to the correct client
              SOCKFS.websocket_sock_ops.createPeer(sock, ws);
              Module['websocket'].emit('connection', sock.stream.fd);
            }
          });
          sock.server.on('closed', function() {
            Module['websocket'].emit('close', sock.stream.fd);
            sock.server = null;
          });
          sock.server.on('error', function(error) {
            // Although the ws library may pass errors that may be more descriptive than
            // ECONNREFUSED they are not necessarily the expected error code e.g. 
            // ENOTFOUND on getaddrinfo seems to be node.js specific, so using EHOSTUNREACH
            // is still probably the most useful thing to do. This error shouldn't
            // occur in a well written app as errors should get trapped in the compiled
            // app's own getaddrinfo call.
            sock.error = ERRNO_CODES.EHOSTUNREACH; // Used in getsockopt for SOL_SOCKET/SO_ERROR test.
            Module['websocket'].emit('error', [sock.stream.fd, sock.error, 'EHOSTUNREACH: Host is unreachable']);
            // don't throw
          });
        },accept:function (listensock) {
          if (!listensock.server) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          var newsock = listensock.pending.shift();
          newsock.stream.flags = listensock.stream.flags;
          return newsock;
        },getname:function (sock, peer) {
          var addr, port;
          if (peer) {
            if (sock.daddr === undefined || sock.dport === undefined) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
            }
            addr = sock.daddr;
            port = sock.dport;
          } else {
            // TODO saddr and sport will be set for bind()'d UDP sockets, but what
            // should we be returning for TCP sockets that've been connect()'d?
            addr = sock.saddr || 0;
            port = sock.sport || 0;
          }
          return { addr: addr, port: port };
        },sendmsg:function (sock, buffer, offset, length, addr, port) {
          if (sock.type === 2) {
            // connection-less sockets will honor the message address,
            // and otherwise fall back to the bound destination address
            if (addr === undefined || port === undefined) {
              addr = sock.daddr;
              port = sock.dport;
            }
            // if there was no address to fall back to, error out
            if (addr === undefined || port === undefined) {
              throw new FS.ErrnoError(ERRNO_CODES.EDESTADDRREQ);
            }
          } else {
            // connection-based sockets will only use the bound
            addr = sock.daddr;
            port = sock.dport;
          }
  
          // find the peer for the destination address
          var dest = SOCKFS.websocket_sock_ops.getPeer(sock, addr, port);
  
          // early out if not connected with a connection-based socket
          if (sock.type === 1) {
            if (!dest || dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
            } else if (dest.socket.readyState === dest.socket.CONNECTING) {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
          }
  
          // create a copy of the incoming data to send, as the WebSocket API
          // doesn't work entirely with an ArrayBufferView, it'll just send
          // the entire underlying buffer
          var data;
          if (buffer instanceof Array || buffer instanceof ArrayBuffer) {
            data = buffer.slice(offset, offset + length);
          } else {  // ArrayBufferView
            data = buffer.buffer.slice(buffer.byteOffset + offset, buffer.byteOffset + offset + length);
          }
  
          // if we're emulating a connection-less dgram socket and don't have
          // a cached connection, queue the buffer to send upon connect and
          // lie, saying the data was sent now.
          if (sock.type === 2) {
            if (!dest || dest.socket.readyState !== dest.socket.OPEN) {
              // if we're not connected, open a new connection
              if (!dest || dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {
                dest = SOCKFS.websocket_sock_ops.createPeer(sock, addr, port);
              }
              dest.dgram_send_queue.push(data);
              return length;
            }
          }
  
          try {
            // send the actual data
            dest.socket.send(data);
            return length;
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
        },recvmsg:function (sock, length) {
          // http://pubs.opengroup.org/onlinepubs/7908799/xns/recvmsg.html
          if (sock.type === 1 && sock.server) {
            // tcp servers should not be recv()'ing on the listen socket
            throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
          }
  
          var queued = sock.recv_queue.shift();
          if (!queued) {
            if (sock.type === 1) {
              var dest = SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport);
  
              if (!dest) {
                // if we have a destination address but are not connected, error out
                throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
              }
              else if (dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {
                // return null if the socket has closed
                return null;
              }
              else {
                // else, our socket is in a valid state but truly has nothing available
                throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
              }
            } else {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
          }
  
          // queued.data will be an ArrayBuffer if it's unadulterated, but if it's
          // requeued TCP data it'll be an ArrayBufferView
          var queuedLength = queued.data.byteLength || queued.data.length;
          var queuedOffset = queued.data.byteOffset || 0;
          var queuedBuffer = queued.data.buffer || queued.data;
          var bytesRead = Math.min(length, queuedLength);
          var res = {
            buffer: new Uint8Array(queuedBuffer, queuedOffset, bytesRead),
            addr: queued.addr,
            port: queued.port
          };
  
  
          // push back any unread data for TCP connections
          if (sock.type === 1 && bytesRead < queuedLength) {
            var bytesRemaining = queuedLength - bytesRead;
            queued.data = new Uint8Array(queuedBuffer, queuedOffset + bytesRead, bytesRemaining);
            sock.recv_queue.unshift(queued);
          }
  
          return res;
        }}};function _send(fd, buf, len, flags) {
      var sock = SOCKFS.getSocket(fd);
      if (!sock) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      // TODO honor flags
      return _write(fd, buf, len);
    }
  
  function _pwrite(fildes, buf, nbyte, offset) {
      // ssize_t pwrite(int fildes, const void *buf, size_t nbyte, off_t offset);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/write.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      try {
        var slab = HEAP8;
        return FS.write(stream, slab, buf, nbyte, offset);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _write(fildes, buf, nbyte) {
      // ssize_t write(int fildes, const void *buf, size_t nbyte);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/write.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
  
  
      try {
        var slab = HEAP8;
        return FS.write(stream, slab, buf, nbyte);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }
  
  function _fileno(stream) {
      // int fileno(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fileno.html
      stream = FS.getStreamFromPtr(stream);
      if (!stream) return -1;
      return stream.fd;
    }function _fwrite(ptr, size, nitems, stream) {
      // size_t fwrite(const void *restrict ptr, size_t size, size_t nitems, FILE *restrict stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fwrite.html
      var bytesToWrite = nitems * size;
      if (bytesToWrite == 0) return 0;
      var fd = _fileno(stream);
      var bytesWritten = _write(fd, ptr, bytesToWrite);
      if (bytesWritten == -1) {
        var streamObj = FS.getStreamFromPtr(stream);
        if (streamObj) streamObj.error = true;
        return 0;
      } else {
        return (bytesWritten / size)|0;
      }
    }
  
  
  function __reallyNegative(x) {
      return x < 0 || (x === 0 && (1/x) === -Infinity);
    }function __formatString(format, varargs) {
      var textIndex = format;
      var argIndex = 0;
      function getNextArg(type) {
        // NOTE: Explicitly ignoring type safety. Otherwise this fails:
        //       int x = 4; printf("%c\n", (char)x);
        var ret;
        if (type === 'double') {
          ret = (HEAP32[((tempDoublePtr)>>2)]=HEAP32[(((varargs)+(argIndex))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((varargs)+((argIndex)+(4)))>>2)],(+(HEAPF64[(tempDoublePtr)>>3])));
        } else if (type == 'i64') {
          ret = [HEAP32[(((varargs)+(argIndex))>>2)],
                 HEAP32[(((varargs)+(argIndex+4))>>2)]];
  
        } else {
          type = 'i32'; // varargs are always i32, i64, or double
          ret = HEAP32[(((varargs)+(argIndex))>>2)];
        }
        argIndex += Runtime.getNativeFieldSize(type);
        return ret;
      }
  
      var ret = [];
      var curr, next, currArg;
      while(1) {
        var startTextIndex = textIndex;
        curr = HEAP8[((textIndex)>>0)];
        if (curr === 0) break;
        next = HEAP8[((textIndex+1)>>0)];
        if (curr == 37) {
          // Handle flags.
          var flagAlwaysSigned = false;
          var flagLeftAlign = false;
          var flagAlternative = false;
          var flagZeroPad = false;
          var flagPadSign = false;
          flagsLoop: while (1) {
            switch (next) {
              case 43:
                flagAlwaysSigned = true;
                break;
              case 45:
                flagLeftAlign = true;
                break;
              case 35:
                flagAlternative = true;
                break;
              case 48:
                if (flagZeroPad) {
                  break flagsLoop;
                } else {
                  flagZeroPad = true;
                  break;
                }
              case 32:
                flagPadSign = true;
                break;
              default:
                break flagsLoop;
            }
            textIndex++;
            next = HEAP8[((textIndex+1)>>0)];
          }
  
          // Handle width.
          var width = 0;
          if (next == 42) {
            width = getNextArg('i32');
            textIndex++;
            next = HEAP8[((textIndex+1)>>0)];
          } else {
            while (next >= 48 && next <= 57) {
              width = width * 10 + (next - 48);
              textIndex++;
              next = HEAP8[((textIndex+1)>>0)];
            }
          }
  
          // Handle precision.
          var precisionSet = false, precision = -1;
          if (next == 46) {
            precision = 0;
            precisionSet = true;
            textIndex++;
            next = HEAP8[((textIndex+1)>>0)];
            if (next == 42) {
              precision = getNextArg('i32');
              textIndex++;
            } else {
              while(1) {
                var precisionChr = HEAP8[((textIndex+1)>>0)];
                if (precisionChr < 48 ||
                    precisionChr > 57) break;
                precision = precision * 10 + (precisionChr - 48);
                textIndex++;
              }
            }
            next = HEAP8[((textIndex+1)>>0)];
          }
          if (precision < 0) {
            precision = 6; // Standard default.
            precisionSet = false;
          }
  
          // Handle integer sizes. WARNING: These assume a 32-bit architecture!
          var argSize;
          switch (String.fromCharCode(next)) {
            case 'h':
              var nextNext = HEAP8[((textIndex+2)>>0)];
              if (nextNext == 104) {
                textIndex++;
                argSize = 1; // char (actually i32 in varargs)
              } else {
                argSize = 2; // short (actually i32 in varargs)
              }
              break;
            case 'l':
              var nextNext = HEAP8[((textIndex+2)>>0)];
              if (nextNext == 108) {
                textIndex++;
                argSize = 8; // long long
              } else {
                argSize = 4; // long
              }
              break;
            case 'L': // long long
            case 'q': // int64_t
            case 'j': // intmax_t
              argSize = 8;
              break;
            case 'z': // size_t
            case 't': // ptrdiff_t
            case 'I': // signed ptrdiff_t or unsigned size_t
              argSize = 4;
              break;
            default:
              argSize = null;
          }
          if (argSize) textIndex++;
          next = HEAP8[((textIndex+1)>>0)];
  
          // Handle type specifier.
          switch (String.fromCharCode(next)) {
            case 'd': case 'i': case 'u': case 'o': case 'x': case 'X': case 'p': {
              // Integer.
              var signed = next == 100 || next == 105;
              argSize = argSize || 4;
              var currArg = getNextArg('i' + (argSize * 8));
              var origArg = currArg;
              var argText;
              // Flatten i64-1 [low, high] into a (slightly rounded) double
              if (argSize == 8) {
                currArg = Runtime.makeBigInt(currArg[0], currArg[1], next == 117);
              }
              // Truncate to requested size.
              if (argSize <= 4) {
                var limit = Math.pow(256, argSize) - 1;
                currArg = (signed ? reSign : unSign)(currArg & limit, argSize * 8);
              }
              // Format the number.
              var currAbsArg = Math.abs(currArg);
              var prefix = '';
              if (next == 100 || next == 105) {
                if (argSize == 8 && i64Math) argText = i64Math.stringify(origArg[0], origArg[1], null); else
                argText = reSign(currArg, 8 * argSize, 1).toString(10);
              } else if (next == 117) {
                if (argSize == 8 && i64Math) argText = i64Math.stringify(origArg[0], origArg[1], true); else
                argText = unSign(currArg, 8 * argSize, 1).toString(10);
                currArg = Math.abs(currArg);
              } else if (next == 111) {
                argText = (flagAlternative ? '0' : '') + currAbsArg.toString(8);
              } else if (next == 120 || next == 88) {
                prefix = (flagAlternative && currArg != 0) ? '0x' : '';
                if (argSize == 8 && i64Math) {
                  if (origArg[1]) {
                    argText = (origArg[1]>>>0).toString(16);
                    var lower = (origArg[0]>>>0).toString(16);
                    while (lower.length < 8) lower = '0' + lower;
                    argText += lower;
                  } else {
                    argText = (origArg[0]>>>0).toString(16);
                  }
                } else
                if (currArg < 0) {
                  // Represent negative numbers in hex as 2's complement.
                  currArg = -currArg;
                  argText = (currAbsArg - 1).toString(16);
                  var buffer = [];
                  for (var i = 0; i < argText.length; i++) {
                    buffer.push((0xF - parseInt(argText[i], 16)).toString(16));
                  }
                  argText = buffer.join('');
                  while (argText.length < argSize * 2) argText = 'f' + argText;
                } else {
                  argText = currAbsArg.toString(16);
                }
                if (next == 88) {
                  prefix = prefix.toUpperCase();
                  argText = argText.toUpperCase();
                }
              } else if (next == 112) {
                if (currAbsArg === 0) {
                  argText = '(nil)';
                } else {
                  prefix = '0x';
                  argText = currAbsArg.toString(16);
                }
              }
              if (precisionSet) {
                while (argText.length < precision) {
                  argText = '0' + argText;
                }
              }
  
              // Add sign if needed
              if (currArg >= 0) {
                if (flagAlwaysSigned) {
                  prefix = '+' + prefix;
                } else if (flagPadSign) {
                  prefix = ' ' + prefix;
                }
              }
  
              // Move sign to prefix so we zero-pad after the sign
              if (argText.charAt(0) == '-') {
                prefix = '-' + prefix;
                argText = argText.substr(1);
              }
  
              // Add padding.
              while (prefix.length + argText.length < width) {
                if (flagLeftAlign) {
                  argText += ' ';
                } else {
                  if (flagZeroPad) {
                    argText = '0' + argText;
                  } else {
                    prefix = ' ' + prefix;
                  }
                }
              }
  
              // Insert the result into the buffer.
              argText = prefix + argText;
              argText.split('').forEach(function(chr) {
                ret.push(chr.charCodeAt(0));
              });
              break;
            }
            case 'f': case 'F': case 'e': case 'E': case 'g': case 'G': {
              // Float.
              var currArg = getNextArg('double');
              var argText;
              if (isNaN(currArg)) {
                argText = 'nan';
                flagZeroPad = false;
              } else if (!isFinite(currArg)) {
                argText = (currArg < 0 ? '-' : '') + 'inf';
                flagZeroPad = false;
              } else {
                var isGeneral = false;
                var effectivePrecision = Math.min(precision, 20);
  
                // Convert g/G to f/F or e/E, as per:
                // http://pubs.opengroup.org/onlinepubs/9699919799/functions/printf.html
                if (next == 103 || next == 71) {
                  isGeneral = true;
                  precision = precision || 1;
                  var exponent = parseInt(currArg.toExponential(effectivePrecision).split('e')[1], 10);
                  if (precision > exponent && exponent >= -4) {
                    next = ((next == 103) ? 'f' : 'F').charCodeAt(0);
                    precision -= exponent + 1;
                  } else {
                    next = ((next == 103) ? 'e' : 'E').charCodeAt(0);
                    precision--;
                  }
                  effectivePrecision = Math.min(precision, 20);
                }
  
                if (next == 101 || next == 69) {
                  argText = currArg.toExponential(effectivePrecision);
                  // Make sure the exponent has at least 2 digits.
                  if (/[eE][-+]\d$/.test(argText)) {
                    argText = argText.slice(0, -1) + '0' + argText.slice(-1);
                  }
                } else if (next == 102 || next == 70) {
                  argText = currArg.toFixed(effectivePrecision);
                  if (currArg === 0 && __reallyNegative(currArg)) {
                    argText = '-' + argText;
                  }
                }
  
                var parts = argText.split('e');
                if (isGeneral && !flagAlternative) {
                  // Discard trailing zeros and periods.
                  while (parts[0].length > 1 && parts[0].indexOf('.') != -1 &&
                         (parts[0].slice(-1) == '0' || parts[0].slice(-1) == '.')) {
                    parts[0] = parts[0].slice(0, -1);
                  }
                } else {
                  // Make sure we have a period in alternative mode.
                  if (flagAlternative && argText.indexOf('.') == -1) parts[0] += '.';
                  // Zero pad until required precision.
                  while (precision > effectivePrecision++) parts[0] += '0';
                }
                argText = parts[0] + (parts.length > 1 ? 'e' + parts[1] : '');
  
                // Capitalize 'E' if needed.
                if (next == 69) argText = argText.toUpperCase();
  
                // Add sign.
                if (currArg >= 0) {
                  if (flagAlwaysSigned) {
                    argText = '+' + argText;
                  } else if (flagPadSign) {
                    argText = ' ' + argText;
                  }
                }
              }
  
              // Add padding.
              while (argText.length < width) {
                if (flagLeftAlign) {
                  argText += ' ';
                } else {
                  if (flagZeroPad && (argText[0] == '-' || argText[0] == '+')) {
                    argText = argText[0] + '0' + argText.slice(1);
                  } else {
                    argText = (flagZeroPad ? '0' : ' ') + argText;
                  }
                }
              }
  
              // Adjust case.
              if (next < 97) argText = argText.toUpperCase();
  
              // Insert the result into the buffer.
              argText.split('').forEach(function(chr) {
                ret.push(chr.charCodeAt(0));
              });
              break;
            }
            case 's': {
              // String.
              var arg = getNextArg('i8*');
              var argLength = arg ? _strlen(arg) : '(null)'.length;
              if (precisionSet) argLength = Math.min(argLength, precision);
              if (!flagLeftAlign) {
                while (argLength < width--) {
                  ret.push(32);
                }
              }
              if (arg) {
                for (var i = 0; i < argLength; i++) {
                  ret.push(HEAPU8[((arg++)>>0)]);
                }
              } else {
                ret = ret.concat(intArrayFromString('(null)'.substr(0, argLength), true));
              }
              if (flagLeftAlign) {
                while (argLength < width--) {
                  ret.push(32);
                }
              }
              break;
            }
            case 'c': {
              // Character.
              if (flagLeftAlign) ret.push(getNextArg('i8'));
              while (--width > 0) {
                ret.push(32);
              }
              if (!flagLeftAlign) ret.push(getNextArg('i8'));
              break;
            }
            case 'n': {
              // Write the length written so far to the next parameter.
              var ptr = getNextArg('i32*');
              HEAP32[((ptr)>>2)]=ret.length;
              break;
            }
            case '%': {
              // Literal percent sign.
              ret.push(curr);
              break;
            }
            default: {
              // Unknown specifiers remain untouched.
              for (var i = startTextIndex; i < textIndex + 2; i++) {
                ret.push(HEAP8[((i)>>0)]);
              }
            }
          }
          textIndex += 2;
          // TODO: Support a/A (hex float) and m (last error) specifiers.
          // TODO: Support %1${specifier} for arg selection.
        } else {
          ret.push(curr);
          textIndex += 1;
        }
      }
      return ret;
    }function _fprintf(stream, format, varargs) {
      // int fprintf(FILE *restrict stream, const char *restrict format, ...);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/printf.html
      var result = __formatString(format, varargs);
      var stack = Runtime.stackSave();
      var ret = _fwrite(allocate(result, 'i8', ALLOC_STACK), 1, result.length, stream);
      Runtime.stackRestore(stack);
      return ret;
    }function _vfprintf(s, f, va_arg) {
      return _fprintf(s, f, HEAP32[((va_arg)>>2)]);
    }

  
  function _emscripten_memcpy_big(dest, src, num) {
      HEAPU8.set(HEAPU8.subarray(src, src+num), dest);
      return dest;
    } 
  Module["_memcpy"] = _memcpy;

  var _log=Math_log;

  var _cos=Math_cos;

  var _llvm_pow_f64=Math_pow;

  function _sbrk(bytes) {
      // Implement a Linux-like 'memory area' for our 'process'.
      // Changes the size of the memory area by |bytes|; returns the
      // address of the previous top ('break') of the memory area
      // We control the "dynamic" memory - DYNAMIC_BASE to DYNAMICTOP
      var self = _sbrk;
      if (!self.called) {
        DYNAMICTOP = alignMemoryPage(DYNAMICTOP); // make sure we start out aligned
        self.called = true;
        assert(Runtime.dynamicAlloc);
        self.alloc = Runtime.dynamicAlloc;
        Runtime.dynamicAlloc = function() { abort('cannot dynamically allocate, sbrk now has control') };
      }
      var ret = DYNAMICTOP;
      if (bytes != 0) self.alloc(bytes);
      return ret;  // Previous break location.
    }

   
  Module["_memmove"] = _memmove;

  function ___errno_location() {
      return ___errno_state;
    }

  var _BItoD=true;

  var _exp=Math_exp;

  function _time(ptr) {
      var ret = (Date.now()/1000)|0;
      if (ptr) {
        HEAP32[((ptr)>>2)]=ret;
      }
      return ret;
    }

  function _freqs() {
  Module['printErr']('missing function: freqs'); abort(-1);
  }


  function _tabsel_123() {
  Module['printErr']('missing function: tabsel_123'); abort(-1);
  }
___errno_state = Runtime.staticAlloc(4); HEAP32[((___errno_state)>>2)]=0;
FS.staticInit();__ATINIT__.unshift({ func: function() { if (!Module["noFSInit"] && !FS.init.initialized) FS.init() } });__ATMAIN__.push({ func: function() { FS.ignorePermissions = false } });__ATEXIT__.push({ func: function() { FS.quit() } });Module["FS_createFolder"] = FS.createFolder;Module["FS_createPath"] = FS.createPath;Module["FS_createDataFile"] = FS.createDataFile;Module["FS_createPreloadedFile"] = FS.createPreloadedFile;Module["FS_createLazyFile"] = FS.createLazyFile;Module["FS_createLink"] = FS.createLink;Module["FS_createDevice"] = FS.createDevice;
__ATINIT__.unshift({ func: function() { TTY.init() } });__ATEXIT__.push({ func: function() { TTY.shutdown() } });TTY.utf8 = new Runtime.UTF8Processor();
if (ENVIRONMENT_IS_NODE) { var fs = require("fs"); NODEFS.staticInit(); }
Module["requestFullScreen"] = function Module_requestFullScreen(lockPointer, resizeCanvas) { Browser.requestFullScreen(lockPointer, resizeCanvas) };
  Module["requestAnimationFrame"] = function Module_requestAnimationFrame(func) { Browser.requestAnimationFrame(func) };
  Module["setCanvasSize"] = function Module_setCanvasSize(width, height, noUpdates) { Browser.setCanvasSize(width, height, noUpdates) };
  Module["pauseMainLoop"] = function Module_pauseMainLoop() { Browser.mainLoop.pause() };
  Module["resumeMainLoop"] = function Module_resumeMainLoop() { Browser.mainLoop.resume() };
  Module["getUserMedia"] = function Module_getUserMedia() { Browser.getUserMedia() }
__ATINIT__.push({ func: function() { SOCKFS.root = FS.mount(SOCKFS, {}, null); } });
STACK_BASE = STACKTOP = Runtime.alignMemory(STATICTOP);

staticSealed = true; // seal the static portion of memory

STACK_MAX = STACK_BASE + 5242880;

DYNAMIC_BASE = DYNAMICTOP = Runtime.alignMemory(STACK_MAX);

assert(DYNAMIC_BASE < TOTAL_MEMORY, "TOTAL_MEMORY not big enough for stack");

 var ctlz_i8 = allocate([8,7,6,6,5,5,5,5,4,4,4,4,4,4,4,4,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_DYNAMIC);
 var cttz_i8 = allocate([8,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,7,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0], "i8", ALLOC_DYNAMIC);

  var Math_min = Math.min;
function invoke_iiiii(index,a1,a2,a3,a4) {
  try {
    return Module["dynCall_iiiii"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiidii(index,a1,a2,a3,a4,a5) {
  try {
    return Module["dynCall_iiidii"](index,a1,a2,a3,a4,a5);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_vii(index,a1,a2) {
  try {
    Module["dynCall_vii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiiiiii(index,a1,a2,a3,a4,a5,a6) {
  try {
    return Module["dynCall_iiiiiii"](index,a1,a2,a3,a4,a5,a6);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiii(index,a1,a2,a3) {
  try {
    return Module["dynCall_iiii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iii(index,a1,a2) {
  try {
    return Module["dynCall_iii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiii(index,a1,a2,a3,a4) {
  try {
    Module["dynCall_viiii"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

  function asmPrintInt(x, y) {
    Module.print('int ' + x + ',' + y);// + ' ' + new Error().stack);
  }
  function asmPrintFloat(x, y) {
    Module.print('float ' + x + ',' + y);// + ' ' + new Error().stack);
  }
  // EMSCRIPTEN_START_ASM
  var asm = (function(global, env, buffer) {
    'use asm';
    var HEAP8 = new global.Int8Array(buffer);
    var HEAP16 = new global.Int16Array(buffer);
    var HEAP32 = new global.Int32Array(buffer);
    var HEAPU8 = new global.Uint8Array(buffer);
    var HEAPU16 = new global.Uint16Array(buffer);
    var HEAPU32 = new global.Uint32Array(buffer);
    var HEAPF32 = new global.Float32Array(buffer);
    var HEAPF64 = new global.Float64Array(buffer);
  
  var STACKTOP=env.STACKTOP|0;
  var STACK_MAX=env.STACK_MAX|0;
  var tempDoublePtr=env.tempDoublePtr|0;
  var ABORT=env.ABORT|0;
  var cttz_i8=env.cttz_i8|0;
  var ctlz_i8=env.ctlz_i8|0;
  var _freqs=env._freqs|0;
  var _stderr=env._stderr|0;
  var _tabsel_123=env._tabsel_123|0;

    var __THREW__ = 0;
    var threwValue = 0;
    var setjmpId = 0;
    var undef = 0;
    var nan = +env.NaN, inf = +env.Infinity;
    var tempInt = 0, tempBigInt = 0, tempBigIntP = 0, tempBigIntS = 0, tempBigIntR = 0.0, tempBigIntI = 0, tempBigIntD = 0, tempValue = 0, tempDouble = 0.0;
  
    var tempRet0 = 0;
    var tempRet1 = 0;
    var tempRet2 = 0;
    var tempRet3 = 0;
    var tempRet4 = 0;
    var tempRet5 = 0;
    var tempRet6 = 0;
    var tempRet7 = 0;
    var tempRet8 = 0;
    var tempRet9 = 0;
  var Math_floor=global.Math.floor;
  var Math_abs=global.Math.abs;
  var Math_sqrt=global.Math.sqrt;
  var Math_pow=global.Math.pow;
  var Math_cos=global.Math.cos;
  var Math_sin=global.Math.sin;
  var Math_tan=global.Math.tan;
  var Math_acos=global.Math.acos;
  var Math_asin=global.Math.asin;
  var Math_atan=global.Math.atan;
  var Math_atan2=global.Math.atan2;
  var Math_exp=global.Math.exp;
  var Math_log=global.Math.log;
  var Math_ceil=global.Math.ceil;
  var Math_imul=global.Math.imul;
  var abort=env.abort;
  var assert=env.assert;
  var asmPrintInt=env.asmPrintInt;
  var asmPrintFloat=env.asmPrintFloat;
  var Math_min=env.min;
  var invoke_iiiii=env.invoke_iiiii;
  var invoke_iiidii=env.invoke_iiidii;
  var invoke_vii=env.invoke_vii;
  var invoke_iiiiiii=env.invoke_iiiiiii;
  var invoke_iiii=env.invoke_iiii;
  var invoke_iii=env.invoke_iii;
  var invoke_viiii=env.invoke_viiii;
  var _fabs=env._fabs;
  var _sin=env._sin;
  var _exp=env._exp;
  var _llvm_pow_f64=env._llvm_pow_f64;
  var _send=env._send;
  var _abort=env._abort;
  var ___setErrNo=env.___setErrNo;
  var _vfprintf=env._vfprintf;
  var _log10f=env._log10f;
  var _ExitMP3=env._ExitMP3;
  var _floor=env._floor;
  var _fflush=env._fflush;
  var _pwrite=env._pwrite;
  var _strerror_r=env._strerror_r;
  var __reallyNegative=env.__reallyNegative;
  var _log10=env._log10;
  var _fabsf=env._fabsf;
  var _sbrk=env._sbrk;
  var _atan=env._atan;
  var _llvm_pow_f32=env._llvm_pow_f32;
  var _emscripten_memcpy_big=env._emscripten_memcpy_big;
  var _fileno=env._fileno;
  var __exit=env.__exit;
  var _abs=env._abs;
  var _cos=env._cos;
  var _mkport=env._mkport;
  var _log=env._log;
  var _write=env._write;
  var ___errno_location=env.___errno_location;
  var _sysconf=env._sysconf;
  var _decodeMP3_unclipped=env._decodeMP3_unclipped;
  var _InitMP3=env._InitMP3;
  var _fwrite=env._fwrite;
  var _time=env._time;
  var _fprintf=env._fprintf;
  var _strerror=env._strerror;
  var _ceil=env._ceil;
  var __formatString=env.__formatString;
  var _sqrt=env._sqrt;
  var _exit=env._exit;
  var tempFloat = 0.0;

  // EMSCRIPTEN_START_FUNCS
  function stackAlloc(size) {
    size = size|0;
    var ret = 0;
    ret = STACKTOP;
    STACKTOP = (STACKTOP + size)|0;
  STACKTOP = (STACKTOP + 7)&-8;

    return ret|0;
  }
  function stackSave() {
    return STACKTOP|0;
  }
  function stackRestore(top) {
    top = top|0;
    STACKTOP = top;
  }

  function setThrew(threw, value) {
    threw = threw|0;
    value = value|0;
    if ((__THREW__|0) == 0) {
      __THREW__ = threw;
      threwValue = value;
    }
  }
  function copyTempFloat(ptr) {
    ptr = ptr|0;
    HEAP8[tempDoublePtr>>0] = HEAP8[ptr>>0];
    HEAP8[tempDoublePtr+1>>0] = HEAP8[ptr+1>>0];
    HEAP8[tempDoublePtr+2>>0] = HEAP8[ptr+2>>0];
    HEAP8[tempDoublePtr+3>>0] = HEAP8[ptr+3>>0];
  }
  function copyTempDouble(ptr) {
    ptr = ptr|0;
    HEAP8[tempDoublePtr>>0] = HEAP8[ptr>>0];
    HEAP8[tempDoublePtr+1>>0] = HEAP8[ptr+1>>0];
    HEAP8[tempDoublePtr+2>>0] = HEAP8[ptr+2>>0];
    HEAP8[tempDoublePtr+3>>0] = HEAP8[ptr+3>>0];
    HEAP8[tempDoublePtr+4>>0] = HEAP8[ptr+4>>0];
    HEAP8[tempDoublePtr+5>>0] = HEAP8[ptr+5>>0];
    HEAP8[tempDoublePtr+6>>0] = HEAP8[ptr+6>>0];
    HEAP8[tempDoublePtr+7>>0] = HEAP8[ptr+7>>0];
  }
  function setTempRet0(value) {
    value = value|0;
    tempRet0 = value;
  }
  function getTempRet0() {
    return tempRet0|0;
  }
  
function _getframebits($gfc) {
 $gfc = $gfc|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $bit_rate = 0, $cfg = 0, $eov = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp + 12|0;
 $cfg = sp + 8|0;
 $eov = sp + 4|0;
 $bit_rate = sp;
 HEAP32[$0>>2] = $gfc;
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 16|0);
 HEAP32[$cfg>>2] = $2;
 $3 = HEAP32[$0>>2]|0;
 $4 = (($3) + 84040|0);
 HEAP32[$eov>>2] = $4;
 $5 = HEAP32[$eov>>2]|0;
 $6 = (($5) + 704|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)!=(0);
 if ($8) {
  $9 = HEAP32[$eov>>2]|0;
  $10 = (($9) + 704|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = HEAP32[$cfg>>2]|0;
  $13 = HEAP32[$12>>2]|0;
  $14 = (97760 + ($13<<6)|0);
  $15 = (($14) + ($11<<2)|0);
  $16 = HEAP32[$15>>2]|0;
  HEAP32[$bit_rate>>2] = $16;
 } else {
  $17 = HEAP32[$cfg>>2]|0;
  $18 = (($17) + 104|0);
  $19 = HEAP32[$18>>2]|0;
  HEAP32[$bit_rate>>2] = $19;
 }
 $20 = HEAP32[$cfg>>2]|0;
 $21 = HEAP32[$bit_rate>>2]|0;
 $22 = HEAP32[$eov>>2]|0;
 $23 = (($22) + 712|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = (_calcFrameLength($20,$21,$24)|0);
 STACKTOP = sp;return ($25|0);
}
function _calcFrameLength($cfg,$kbps,$pad) {
 $cfg = $cfg|0;
 $kbps = $kbps|0;
 $pad = $pad|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp + 8|0;
 $1 = sp + 4|0;
 $2 = sp;
 HEAP32[$0>>2] = $cfg;
 HEAP32[$1>>2] = $kbps;
 HEAP32[$2>>2] = $pad;
 $3 = HEAP32[$0>>2]|0;
 $4 = HEAP32[$3>>2]|0;
 $5 = (($4) + 1)|0;
 $6 = ($5*72000)|0;
 $7 = HEAP32[$1>>2]|0;
 $8 = Math_imul($6, $7)|0;
 $9 = HEAP32[$0>>2]|0;
 $10 = (($9) + 48|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (($8|0) / ($11|0))&-1;
 $13 = HEAP32[$2>>2]|0;
 $14 = (($12) + ($13))|0;
 $15 = $14<<3;
 STACKTOP = sp;return ($15|0);
}
function _get_max_frame_buffer_size_by_constraint($cfg,$constraint) {
 $cfg = $cfg|0;
 $constraint = $constraint|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $max_kbps = 0, $maxmp3buf = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp + 12|0;
 $1 = sp + 8|0;
 $maxmp3buf = sp + 4|0;
 $max_kbps = sp;
 HEAP32[$0>>2] = $cfg;
 HEAP32[$1>>2] = $constraint;
 HEAP32[$maxmp3buf>>2] = 0;
 $2 = HEAP32[$0>>2]|0;
 $3 = (($2) + 104|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)>(320);
 do {
  if ($5) {
   $6 = HEAP32[$1>>2]|0;
   $7 = ($6|0)==(1);
   $8 = HEAP32[$0>>2]|0;
   if ($7) {
    $9 = HEAP32[$0>>2]|0;
    $10 = (($9) + 104|0);
    $11 = HEAP32[$10>>2]|0;
    $12 = (_calcFrameLength($8,$11,0)|0);
    HEAP32[$maxmp3buf>>2] = $12;
    break;
   } else {
    $13 = HEAP32[$8>>2]|0;
    $14 = (($13) + 1)|0;
    $15 = ($14*7680)|0;
    HEAP32[$maxmp3buf>>2] = $15;
    break;
   }
  } else {
   $16 = HEAP32[$0>>2]|0;
   $17 = (($16) + 48|0);
   $18 = HEAP32[$17>>2]|0;
   $19 = ($18|0)<(16000);
   $20 = HEAP32[$0>>2]|0;
   $21 = HEAP32[$20>>2]|0;
   $22 = (97760 + ($21<<6)|0);
   if ($19) {
    $23 = (($22) + 32|0);
    $24 = HEAP32[$23>>2]|0;
    HEAP32[$max_kbps>>2] = $24;
   } else {
    $25 = (($22) + 56|0);
    $26 = HEAP32[$25>>2]|0;
    HEAP32[$max_kbps>>2] = $26;
   }
   $27 = HEAP32[$1>>2]|0;
   if ((($27|0) == 1)) {
    $28 = HEAP32[$0>>2]|0;
    $29 = HEAP32[$max_kbps>>2]|0;
    $30 = (_calcFrameLength($28,$29,0)|0);
    HEAP32[$maxmp3buf>>2] = $30;
    break;
   } else if ((($27|0) == 2)) {
    $31 = HEAP32[$0>>2]|0;
    $32 = HEAP32[$31>>2]|0;
    $33 = (($32) + 1)|0;
    $34 = ($33*7680)|0;
    HEAP32[$maxmp3buf>>2] = $34;
    break;
   } else {
    HEAP32[$maxmp3buf>>2] = 11520;
    break;
   }
  }
 } while(0);
 $35 = HEAP32[$maxmp3buf>>2]|0;
 STACKTOP = sp;return ($35|0);
}
function _CRC_writeheader($gfc,$header) {
 $gfc = $gfc|0;
 $header = $header|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $cfg = 0, $crc = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = sp + 16|0;
 $1 = sp + 12|0;
 $cfg = sp + 8|0;
 $crc = sp + 4|0;
 $i = sp;
 HEAP32[$0>>2] = $gfc;
 HEAP32[$1>>2] = $header;
 $2 = HEAP32[$0>>2]|0;
 $3 = (($2) + 16|0);
 HEAP32[$cfg>>2] = $3;
 HEAP32[$crc>>2] = 65535;
 $4 = HEAP32[$1>>2]|0;
 $5 = (($4) + 2|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = $6&255;
 $8 = HEAP32[$crc>>2]|0;
 $9 = (_CRC_update($7,$8)|0);
 HEAP32[$crc>>2] = $9;
 $10 = HEAP32[$1>>2]|0;
 $11 = (($10) + 3|0);
 $12 = HEAP8[$11>>0]|0;
 $13 = $12&255;
 $14 = HEAP32[$crc>>2]|0;
 $15 = (_CRC_update($13,$14)|0);
 HEAP32[$crc>>2] = $15;
 HEAP32[$i>>2] = 6;
 while(1) {
  $16 = HEAP32[$i>>2]|0;
  $17 = HEAP32[$cfg>>2]|0;
  $18 = (($17) + 8|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = ($16|0)<($19|0);
  if (!($20)) {
   break;
  }
  $21 = HEAP32[$i>>2]|0;
  $22 = HEAP32[$1>>2]|0;
  $23 = (($22) + ($21)|0);
  $24 = HEAP8[$23>>0]|0;
  $25 = $24&255;
  $26 = HEAP32[$crc>>2]|0;
  $27 = (_CRC_update($25,$26)|0);
  HEAP32[$crc>>2] = $27;
  $28 = HEAP32[$i>>2]|0;
  $29 = (($28) + 1)|0;
  HEAP32[$i>>2] = $29;
 }
 $30 = HEAP32[$crc>>2]|0;
 $31 = $30 >> 8;
 $32 = $31&255;
 $33 = HEAP32[$1>>2]|0;
 $34 = (($33) + 4|0);
 HEAP8[$34>>0] = $32;
 $35 = HEAP32[$crc>>2]|0;
 $36 = $35 & 255;
 $37 = $36&255;
 $38 = HEAP32[$1>>2]|0;
 $39 = (($38) + 5|0);
 HEAP8[$39>>0] = $37;
 STACKTOP = sp;return;
}
function _CRC_update($value,$crc) {
 $value = $value|0;
 $crc = $crc|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp + 8|0;
 $1 = sp + 4|0;
 $i = sp;
 HEAP32[$0>>2] = $value;
 HEAP32[$1>>2] = $crc;
 $2 = HEAP32[$0>>2]|0;
 $3 = $2 << 8;
 HEAP32[$0>>2] = $3;
 HEAP32[$i>>2] = 0;
 while(1) {
  $4 = HEAP32[$i>>2]|0;
  $5 = ($4|0)<(8);
  if (!($5)) {
   break;
  }
  $6 = HEAP32[$0>>2]|0;
  $7 = $6 << 1;
  HEAP32[$0>>2] = $7;
  $8 = HEAP32[$1>>2]|0;
  $9 = $8 << 1;
  HEAP32[$1>>2] = $9;
  $10 = HEAP32[$1>>2]|0;
  $11 = HEAP32[$0>>2]|0;
  $12 = $10 ^ $11;
  $13 = $12 & 65536;
  $14 = ($13|0)!=(0);
  if ($14) {
   $15 = HEAP32[$1>>2]|0;
   $16 = $15 ^ 32773;
   HEAP32[$1>>2] = $16;
  }
  $17 = HEAP32[$i>>2]|0;
  $18 = (($17) + 1)|0;
  HEAP32[$i>>2] = $18;
 }
 $19 = HEAP32[$1>>2]|0;
 STACKTOP = sp;return ($19|0);
}
function _compute_flushbits($gfc,$total_bytes_output) {
 $gfc = $gfc|0;
 $total_bytes_output = $total_bytes_output|0;
 var $$ = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $9 = 0, $bitsPerFrame = 0, $cfg = 0, $esv = 0, $first_ptr = 0, $flushbits = 0, $last_ptr = 0, $remaining_headers = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $vararg_buffer = sp;
 $0 = sp + 36|0;
 $1 = sp + 32|0;
 $cfg = sp + 28|0;
 $esv = sp + 24|0;
 $flushbits = sp + 20|0;
 $remaining_headers = sp + 16|0;
 $bitsPerFrame = sp + 12|0;
 $last_ptr = sp + 8|0;
 $first_ptr = sp + 4|0;
 HEAP32[$0>>2] = $gfc;
 HEAP32[$1>>2] = $total_bytes_output;
 $2 = HEAP32[$0>>2]|0;
 $3 = (($2) + 16|0);
 HEAP32[$cfg>>2] = $3;
 $4 = HEAP32[$0>>2]|0;
 $5 = (($4) + 27824|0);
 HEAP32[$esv>>2] = $5;
 $6 = HEAP32[$esv>>2]|0;
 $7 = (($6) + 24308|0);
 $8 = HEAP32[$7>>2]|0;
 HEAP32[$first_ptr>>2] = $8;
 $9 = HEAP32[$esv>>2]|0;
 $10 = (($9) + 24304|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (($11) - 1)|0;
 HEAP32[$last_ptr>>2] = $12;
 $13 = HEAP32[$last_ptr>>2]|0;
 $14 = ($13|0)==(-1);
 $$ = $14 ? 255 : $12;
 HEAP32[$last_ptr>>2] = $$;
 $15 = HEAP32[$last_ptr>>2]|0;
 $16 = HEAP32[$esv>>2]|0;
 $17 = (($16) + 12016|0);
 $18 = (($17) + (($15*48)|0)|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = HEAP32[$0>>2]|0;
 $21 = (($20) + 284|0);
 $22 = (($21) + 8|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = (($19) - ($23))|0;
 HEAP32[$flushbits>>2] = $24;
 $25 = HEAP32[$flushbits>>2]|0;
 $26 = HEAP32[$1>>2]|0;
 HEAP32[$26>>2] = $25;
 $27 = HEAP32[$flushbits>>2]|0;
 $28 = ($27|0)>=(0);
 if ($28) {
  $29 = HEAP32[$last_ptr>>2]|0;
  $30 = (1 + ($29))|0;
  $31 = HEAP32[$first_ptr>>2]|0;
  $32 = (($30) - ($31))|0;
  HEAP32[$remaining_headers>>2] = $32;
  $33 = HEAP32[$last_ptr>>2]|0;
  $34 = HEAP32[$first_ptr>>2]|0;
  $35 = ($33|0)<($34|0);
  if ($35) {
   $36 = HEAP32[$last_ptr>>2]|0;
   $37 = (1 + ($36))|0;
   $38 = HEAP32[$first_ptr>>2]|0;
   $39 = (($37) - ($38))|0;
   $40 = (($39) + 256)|0;
   HEAP32[$remaining_headers>>2] = $40;
  }
  $41 = HEAP32[$remaining_headers>>2]|0;
  $42 = $41<<3;
  $43 = HEAP32[$cfg>>2]|0;
  $44 = (($43) + 8|0);
  $45 = HEAP32[$44>>2]|0;
  $46 = Math_imul($42, $45)|0;
  $47 = HEAP32[$flushbits>>2]|0;
  $48 = (($47) - ($46))|0;
  HEAP32[$flushbits>>2] = $48;
 }
 $49 = HEAP32[$0>>2]|0;
 $50 = (_getframebits($49)|0);
 HEAP32[$bitsPerFrame>>2] = $50;
 $51 = HEAP32[$bitsPerFrame>>2]|0;
 $52 = HEAP32[$flushbits>>2]|0;
 $53 = (($52) + ($51))|0;
 HEAP32[$flushbits>>2] = $53;
 $54 = HEAP32[$bitsPerFrame>>2]|0;
 $55 = HEAP32[$1>>2]|0;
 $56 = HEAP32[$55>>2]|0;
 $57 = (($56) + ($54))|0;
 HEAP32[$55>>2] = $57;
 $58 = HEAP32[$1>>2]|0;
 $59 = HEAP32[$58>>2]|0;
 $60 = (($59|0) % 8)&-1;
 $61 = ($60|0)!=(0);
 $62 = HEAP32[$1>>2]|0;
 $63 = HEAP32[$62>>2]|0;
 $64 = (($63|0) / 8)&-1;
 if ($61) {
  $65 = (1 + ($64))|0;
  $66 = HEAP32[$1>>2]|0;
  HEAP32[$66>>2] = $65;
 } else {
  $67 = HEAP32[$1>>2]|0;
  HEAP32[$67>>2] = $64;
 }
 $68 = HEAP32[$0>>2]|0;
 $69 = (($68) + 284|0);
 $70 = (($69) + 12|0);
 $71 = HEAP32[$70>>2]|0;
 $72 = (($71) + 1)|0;
 $73 = HEAP32[$1>>2]|0;
 $74 = HEAP32[$73>>2]|0;
 $75 = (($74) + ($72))|0;
 HEAP32[$73>>2] = $75;
 $76 = HEAP32[$flushbits>>2]|0;
 $77 = ($76|0)<(0);
 if (!($77)) {
  $79 = HEAP32[$flushbits>>2]|0;
  STACKTOP = sp;return ($79|0);
 }
 $78 = HEAP32[$0>>2]|0;
 _lame_errorf($78,8,$vararg_buffer);
 $79 = HEAP32[$flushbits>>2]|0;
 STACKTOP = sp;return ($79|0);
}
function _flush_bitstream($gfc) {
 $gfc = $gfc|0;
 var $$ = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $esv = 0, $flushbits = 0, $l3_side = 0, $last_ptr = 0, $nbytes = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = sp + 20|0;
 $esv = sp + 16|0;
 $l3_side = sp + 12|0;
 $nbytes = sp + 8|0;
 $flushbits = sp + 4|0;
 $last_ptr = sp;
 HEAP32[$0>>2] = $gfc;
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 27824|0);
 HEAP32[$esv>>2] = $2;
 $3 = HEAP32[$esv>>2]|0;
 $4 = (($3) + 24304|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($5) - 1)|0;
 HEAP32[$last_ptr>>2] = $6;
 $7 = HEAP32[$last_ptr>>2]|0;
 $8 = ($7|0)==(-1);
 $$ = $8 ? 255 : $6;
 HEAP32[$last_ptr>>2] = $$;
 $9 = HEAP32[$0>>2]|0;
 $10 = (($9) + 304|0);
 HEAP32[$l3_side>>2] = $10;
 $11 = HEAP32[$0>>2]|0;
 $12 = (_compute_flushbits($11,$nbytes)|0);
 HEAP32[$flushbits>>2] = $12;
 $13 = ($12|0)<(0);
 if ($13) {
  STACKTOP = sp;return;
 }
 $14 = HEAP32[$0>>2]|0;
 $15 = HEAP32[$flushbits>>2]|0;
 _drain_into_ancillary($14,$15);
 $16 = HEAP32[$esv>>2]|0;
 $17 = (($16) + 24316|0);
 HEAP32[$17>>2] = 0;
 $18 = HEAP32[$l3_side>>2]|0;
 $19 = (($18) + 21008|0);
 HEAP32[$19>>2] = 0;
 STACKTOP = sp;return;
}
function _drain_into_ancillary($gfc,$remainingBits) {
 $gfc = $gfc|0;
 $remainingBits = $remainingBits|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $7 = 0, $8 = 0, $9 = 0, $cfg = 0, $esv = 0, $i = 0, $version = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = sp + 20|0;
 $1 = sp + 16|0;
 $cfg = sp + 12|0;
 $esv = sp + 8|0;
 $i = sp + 4|0;
 $version = sp;
 HEAP32[$0>>2] = $gfc;
 HEAP32[$1>>2] = $remainingBits;
 $2 = HEAP32[$0>>2]|0;
 $3 = (($2) + 16|0);
 HEAP32[$cfg>>2] = $3;
 $4 = HEAP32[$0>>2]|0;
 $5 = (($4) + 27824|0);
 HEAP32[$esv>>2] = $5;
 $6 = HEAP32[$1>>2]|0;
 $7 = ($6|0)>=(8);
 if ($7) {
  $8 = HEAP32[$0>>2]|0;
  _putbits2($8,76,8);
  $9 = HEAP32[$1>>2]|0;
  $10 = (($9) - 8)|0;
  HEAP32[$1>>2] = $10;
 }
 $11 = HEAP32[$1>>2]|0;
 $12 = ($11|0)>=(8);
 if ($12) {
  $13 = HEAP32[$0>>2]|0;
  _putbits2($13,65,8);
  $14 = HEAP32[$1>>2]|0;
  $15 = (($14) - 8)|0;
  HEAP32[$1>>2] = $15;
 }
 $16 = HEAP32[$1>>2]|0;
 $17 = ($16|0)>=(8);
 if ($17) {
  $18 = HEAP32[$0>>2]|0;
  _putbits2($18,77,8);
  $19 = HEAP32[$1>>2]|0;
  $20 = (($19) - 8)|0;
  HEAP32[$1>>2] = $20;
 }
 $21 = HEAP32[$1>>2]|0;
 $22 = ($21|0)>=(8);
 if ($22) {
  $23 = HEAP32[$0>>2]|0;
  _putbits2($23,69,8);
  $24 = HEAP32[$1>>2]|0;
  $25 = (($24) - 8)|0;
  HEAP32[$1>>2] = $25;
 }
 $26 = HEAP32[$1>>2]|0;
 $27 = ($26|0)>=(32);
 L13: do {
  if ($27) {
   $28 = (_get_lame_short_version()|0);
   HEAP32[$version>>2] = $28;
   $29 = HEAP32[$1>>2]|0;
   $30 = ($29|0)>=(32);
   if ($30) {
    HEAP32[$i>>2] = 0;
    while(1) {
     $31 = HEAP32[$i>>2]|0;
     $32 = HEAP32[$version>>2]|0;
     $33 = (_strlen(($32|0))|0);
     $34 = ($31|0)<($33|0);
     if (!($34)) {
      break L13;
     }
     $35 = HEAP32[$1>>2]|0;
     $36 = ($35|0)>=(8);
     if (!($36)) {
      break L13;
     }
     $37 = HEAP32[$1>>2]|0;
     $38 = (($37) - 8)|0;
     HEAP32[$1>>2] = $38;
     $39 = HEAP32[$0>>2]|0;
     $40 = HEAP32[$i>>2]|0;
     $41 = HEAP32[$version>>2]|0;
     $42 = (($41) + ($40)|0);
     $43 = HEAP8[$42>>0]|0;
     $44 = $43 << 24 >> 24;
     _putbits2($39,$44,8);
     $45 = HEAP32[$i>>2]|0;
     $46 = (($45) + 1)|0;
     HEAP32[$i>>2] = $46;
    }
   }
  }
 } while(0);
 while(1) {
  $47 = HEAP32[$1>>2]|0;
  $48 = ($47|0)>=(1);
  if (!($48)) {
   break;
  }
  $49 = HEAP32[$0>>2]|0;
  $50 = HEAP32[$esv>>2]|0;
  $51 = (($50) + 24312|0);
  $52 = HEAP32[$51>>2]|0;
  _putbits2($49,$52,1);
  $53 = HEAP32[$cfg>>2]|0;
  $54 = (($53) + 128|0);
  $55 = HEAP32[$54>>2]|0;
  $56 = ($55|0)!=(0);
  $57 = $56 ^ 1;
  $58 = $57&1;
  $59 = HEAP32[$esv>>2]|0;
  $60 = (($59) + 24312|0);
  $61 = HEAP32[$60>>2]|0;
  $62 = $61 ^ $58;
  HEAP32[$60>>2] = $62;
  $63 = HEAP32[$1>>2]|0;
  $64 = (($63) - 1)|0;
  HEAP32[$1>>2] = $64;
 }
 STACKTOP = sp;return;
}
function _add_dummy_byte($gfc,$val,$n) {
 $gfc = $gfc|0;
 $val = $val|0;
 $n = $n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $esv = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = sp + 12|0;
 $1 = sp + 16|0;
 $2 = sp + 8|0;
 $esv = sp + 4|0;
 $i = sp;
 HEAP32[$0>>2] = $gfc;
 HEAP8[$1>>0] = $val;
 HEAP32[$2>>2] = $n;
 $3 = HEAP32[$0>>2]|0;
 $4 = (($3) + 27824|0);
 HEAP32[$esv>>2] = $4;
 L1: while(1) {
  $5 = HEAP32[$2>>2]|0;
  $6 = (($5) + -1)|0;
  HEAP32[$2>>2] = $6;
  $7 = ($5>>>0)>(0);
  if (!($7)) {
   break;
  }
  $8 = HEAP32[$0>>2]|0;
  $9 = HEAP8[$1>>0]|0;
  $10 = $9&255;
  _putbits_noheaders($8,$10,8);
  HEAP32[$i>>2] = 0;
  while(1) {
   $11 = HEAP32[$i>>2]|0;
   $12 = ($11|0)<(256);
   if (!($12)) {
    continue L1;
   }
   $13 = HEAP32[$i>>2]|0;
   $14 = HEAP32[$esv>>2]|0;
   $15 = (($14) + 12016|0);
   $16 = (($15) + (($13*48)|0)|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = (($17) + 8)|0;
   HEAP32[$16>>2] = $18;
   $19 = HEAP32[$i>>2]|0;
   $20 = (($19) + 1)|0;
   HEAP32[$i>>2] = $20;
  }
 }
 STACKTOP = sp;return;
}
function _putbits_noheaders($gfc,$val,$j) {
 $gfc = $gfc|0;
 $val = $val|0;
 $j = $j|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $bs = 0, $k = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = sp + 16|0;
 $1 = sp + 12|0;
 $2 = sp + 8|0;
 $bs = sp + 4|0;
 $k = sp;
 HEAP32[$0>>2] = $gfc;
 HEAP32[$1>>2] = $val;
 HEAP32[$2>>2] = $j;
 $3 = HEAP32[$0>>2]|0;
 $4 = (($3) + 284|0);
 HEAP32[$bs>>2] = $4;
 while(1) {
  $5 = HEAP32[$2>>2]|0;
  $6 = ($5|0)>(0);
  if (!($6)) {
   break;
  }
  $7 = HEAP32[$bs>>2]|0;
  $8 = (($7) + 16|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = ($9|0)==(0);
  if ($10) {
   $11 = HEAP32[$bs>>2]|0;
   $12 = (($11) + 16|0);
   HEAP32[$12>>2] = 8;
   $13 = HEAP32[$bs>>2]|0;
   $14 = (($13) + 12|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = (($15) + 1)|0;
   HEAP32[$14>>2] = $16;
   $17 = HEAP32[$bs>>2]|0;
   $18 = (($17) + 12|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = HEAP32[$bs>>2]|0;
   $21 = HEAP32[$20>>2]|0;
   $22 = (($21) + ($19)|0);
   HEAP8[$22>>0] = 0;
  }
  $23 = HEAP32[$2>>2]|0;
  $24 = HEAP32[$bs>>2]|0;
  $25 = (($24) + 16|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = ($23|0)<($26|0);
  if ($27) {
   $28 = HEAP32[$2>>2]|0;
   $32 = $28;
  } else {
   $29 = HEAP32[$bs>>2]|0;
   $30 = (($29) + 16|0);
   $31 = HEAP32[$30>>2]|0;
   $32 = $31;
  }
  HEAP32[$k>>2] = $32;
  $33 = HEAP32[$k>>2]|0;
  $34 = HEAP32[$2>>2]|0;
  $35 = (($34) - ($33))|0;
  HEAP32[$2>>2] = $35;
  $36 = HEAP32[$k>>2]|0;
  $37 = HEAP32[$bs>>2]|0;
  $38 = (($37) + 16|0);
  $39 = HEAP32[$38>>2]|0;
  $40 = (($39) - ($36))|0;
  HEAP32[$38>>2] = $40;
  $41 = HEAP32[$1>>2]|0;
  $42 = HEAP32[$2>>2]|0;
  $43 = $41 >> $42;
  $44 = HEAP32[$bs>>2]|0;
  $45 = (($44) + 16|0);
  $46 = HEAP32[$45>>2]|0;
  $47 = $43 << $46;
  $48 = HEAP32[$bs>>2]|0;
  $49 = (($48) + 12|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = HEAP32[$bs>>2]|0;
  $52 = HEAP32[$51>>2]|0;
  $53 = (($52) + ($50)|0);
  $54 = HEAP8[$53>>0]|0;
  $55 = $54&255;
  $56 = $55 | $47;
  $57 = $56&255;
  HEAP8[$53>>0] = $57;
  $58 = HEAP32[$k>>2]|0;
  $59 = HEAP32[$bs>>2]|0;
  $60 = (($59) + 8|0);
  $61 = HEAP32[$60>>2]|0;
  $62 = (($61) + ($58))|0;
  HEAP32[$60>>2] = $62;
 }
 STACKTOP = sp;return;
}
function _format_bitstream($gfc) {
 $gfc = $gfc|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $bits = 0, $bitsPerFrame = 0, $cfg = 0, $esv = 0;
 var $i = 0, $l3_side = 0, $nbytes = 0, $vararg_buffer17 = 0, $vararg_ptr10 = 0, $vararg_ptr3 = 0, $vararg_ptr4 = 0, $vararg_ptr5 = 0, $vararg_ptr6 = 0, $vararg_ptr7 = 0, $vararg_ptr8 = 0, $vararg_ptr9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0;
 $vararg_buffer17 = sp;
 $0 = sp + 64|0;
 $cfg = sp + 60|0;
 $esv = sp + 56|0;
 $bits = sp + 52|0;
 $nbytes = sp + 48|0;
 $l3_side = sp + 44|0;
 $bitsPerFrame = sp + 40|0;
 $i = sp + 36|0;
 HEAP32[$0>>2] = $gfc;
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 16|0);
 HEAP32[$cfg>>2] = $2;
 $3 = HEAP32[$0>>2]|0;
 $4 = (($3) + 27824|0);
 HEAP32[$esv>>2] = $4;
 $5 = HEAP32[$0>>2]|0;
 $6 = (($5) + 304|0);
 HEAP32[$l3_side>>2] = $6;
 $7 = HEAP32[$0>>2]|0;
 $8 = (_getframebits($7)|0);
 HEAP32[$bitsPerFrame>>2] = $8;
 $9 = HEAP32[$0>>2]|0;
 $10 = HEAP32[$l3_side>>2]|0;
 $11 = (($10) + 21016|0);
 $12 = HEAP32[$11>>2]|0;
 _drain_into_ancillary($9,$12);
 $13 = HEAP32[$0>>2]|0;
 $14 = HEAP32[$bitsPerFrame>>2]|0;
 _encodeSideInfo2($13,$14);
 $15 = HEAP32[$cfg>>2]|0;
 $16 = (($15) + 8|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = $17<<3;
 HEAP32[$bits>>2] = $18;
 $19 = HEAP32[$0>>2]|0;
 $20 = (_writeMainData($19)|0);
 $21 = HEAP32[$bits>>2]|0;
 $22 = (($21) + ($20))|0;
 HEAP32[$bits>>2] = $22;
 $23 = HEAP32[$0>>2]|0;
 $24 = HEAP32[$l3_side>>2]|0;
 $25 = (($24) + 21020|0);
 $26 = HEAP32[$25>>2]|0;
 _drain_into_ancillary($23,$26);
 $27 = HEAP32[$l3_side>>2]|0;
 $28 = (($27) + 21020|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = HEAP32[$bits>>2]|0;
 $31 = (($30) + ($29))|0;
 HEAP32[$bits>>2] = $31;
 $32 = HEAP32[$bitsPerFrame>>2]|0;
 $33 = HEAP32[$bits>>2]|0;
 $34 = (($32) - ($33))|0;
 $35 = (($34|0) / 8)&-1;
 $36 = HEAP32[$l3_side>>2]|0;
 $37 = (($36) + 21008|0);
 $38 = HEAP32[$37>>2]|0;
 $39 = (($38) + ($35))|0;
 HEAP32[$37>>2] = $39;
 $40 = HEAP32[$0>>2]|0;
 $41 = (_compute_flushbits($40,$nbytes)|0);
 $42 = HEAP32[$esv>>2]|0;
 $43 = (($42) + 24316|0);
 $44 = HEAP32[$43>>2]|0;
 $45 = ($41|0)!=($44|0);
 if ($45) {
  $46 = HEAP32[$0>>2]|0;
  _lame_errorf($46,48,$vararg_buffer17);
 }
 $47 = HEAP32[$l3_side>>2]|0;
 $48 = (($47) + 21008|0);
 $49 = HEAP32[$48>>2]|0;
 $50 = $49<<3;
 $51 = HEAP32[$esv>>2]|0;
 $52 = (($51) + 24316|0);
 $53 = HEAP32[$52>>2]|0;
 $54 = ($50|0)!=($53|0);
 if ($54) {
  $55 = HEAP32[$0>>2]|0;
  $56 = HEAP32[$l3_side>>2]|0;
  $57 = (($56) + 21008|0);
  $58 = HEAP32[$57>>2]|0;
  $59 = $58<<3;
  $60 = HEAP32[$esv>>2]|0;
  $61 = (($60) + 24316|0);
  $62 = HEAP32[$61>>2]|0;
  $63 = HEAP32[$l3_side>>2]|0;
  $64 = (($63) + 21020|0);
  $65 = HEAP32[$64>>2]|0;
  $66 = HEAP32[$l3_side>>2]|0;
  $67 = (($66) + 21016|0);
  $68 = HEAP32[$67>>2]|0;
  $69 = HEAP32[$cfg>>2]|0;
  $70 = (($69) + 8|0);
  $71 = HEAP32[$70>>2]|0;
  $72 = $71<<3;
  $73 = HEAP32[$bits>>2]|0;
  $74 = HEAP32[$l3_side>>2]|0;
  $75 = (($74) + 21020|0);
  $76 = HEAP32[$75>>2]|0;
  $77 = (($73) - ($76))|0;
  $78 = HEAP32[$cfg>>2]|0;
  $79 = (($78) + 8|0);
  $80 = HEAP32[$79>>2]|0;
  $81 = $80<<3;
  $82 = (($77) - ($81))|0;
  $83 = HEAP32[$bits>>2]|0;
  $84 = HEAP32[$bits>>2]|0;
  $85 = (($84|0) % 8)&-1;
  $86 = HEAP32[$bitsPerFrame>>2]|0;
  HEAP32[$vararg_buffer17>>2] = $59;
  $vararg_ptr3 = (($vararg_buffer17) + 4|0);
  HEAP32[$vararg_ptr3>>2] = $62;
  $vararg_ptr4 = (($vararg_buffer17) + 8|0);
  HEAP32[$vararg_ptr4>>2] = $65;
  $vararg_ptr5 = (($vararg_buffer17) + 12|0);
  HEAP32[$vararg_ptr5>>2] = $68;
  $vararg_ptr6 = (($vararg_buffer17) + 16|0);
  HEAP32[$vararg_ptr6>>2] = $72;
  $vararg_ptr7 = (($vararg_buffer17) + 20|0);
  HEAP32[$vararg_ptr7>>2] = $82;
  $vararg_ptr8 = (($vararg_buffer17) + 24|0);
  HEAP32[$vararg_ptr8>>2] = $83;
  $vararg_ptr9 = (($vararg_buffer17) + 28|0);
  HEAP32[$vararg_ptr9>>2] = $85;
  $vararg_ptr10 = (($vararg_buffer17) + 32|0);
  HEAP32[$vararg_ptr10>>2] = $86;
  _lame_errorf($55,104,$vararg_buffer17);
  $87 = HEAP32[$0>>2]|0;
  _lame_errorf($87,384,$vararg_buffer17);
  $88 = HEAP32[$0>>2]|0;
  _lame_errorf($88,440,$vararg_buffer17);
  $89 = HEAP32[$0>>2]|0;
  _lame_errorf($89,520,$vararg_buffer17);
  $90 = HEAP32[$0>>2]|0;
  _lame_errorf($90,560,$vararg_buffer17);
  $91 = HEAP32[$l3_side>>2]|0;
  $92 = (($91) + 21008|0);
  $93 = HEAP32[$92>>2]|0;
  $94 = $93<<3;
  $95 = HEAP32[$esv>>2]|0;
  $96 = (($95) + 24316|0);
  HEAP32[$96>>2] = $94;
 }
 $97 = HEAP32[$0>>2]|0;
 $98 = (($97) + 284|0);
 $99 = (($98) + 8|0);
 $100 = HEAP32[$99>>2]|0;
 $101 = ($100|0)>(1000000000);
 if (!($101)) {
  STACKTOP = sp;return 0;
 }
 HEAP32[$i>>2] = 0;
 while(1) {
  $102 = HEAP32[$i>>2]|0;
  $103 = ($102|0)<(256);
  $104 = HEAP32[$0>>2]|0;
  $105 = (($104) + 284|0);
  $106 = (($105) + 8|0);
  if (!($103)) {
   break;
  }
  $107 = HEAP32[$106>>2]|0;
  $108 = HEAP32[$i>>2]|0;
  $109 = HEAP32[$esv>>2]|0;
  $110 = (($109) + 12016|0);
  $111 = (($110) + (($108*48)|0)|0);
  $112 = HEAP32[$111>>2]|0;
  $113 = (($112) - ($107))|0;
  HEAP32[$111>>2] = $113;
  $114 = HEAP32[$i>>2]|0;
  $115 = (($114) + 1)|0;
  HEAP32[$i>>2] = $115;
 }
 HEAP32[$106>>2] = 0;
 STACKTOP = sp;return 0;
}
function _encodeSideInfo2($gfc,$bitsPerFrame) {
 $gfc = $gfc|0;
 $bitsPerFrame = $bitsPerFrame|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $band = 0, $cfg = 0, $ch = 0, $eov = 0, $esv = 0, $gi = 0, $gi1 = 0, $gr = 0, $l3_side = 0, $old = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $vararg_buffer = sp;
 $0 = sp + 48|0;
 $1 = sp + 44|0;
 $cfg = sp + 40|0;
 $eov = sp + 36|0;
 $esv = sp + 32|0;
 $l3_side = sp + 28|0;
 $gr = sp + 24|0;
 $ch = sp + 20|0;
 $band = sp + 16|0;
 $gi = sp + 12|0;
 $gi1 = sp + 8|0;
 $old = sp + 4|0;
 HEAP32[$0>>2] = $gfc;
 HEAP32[$1>>2] = $bitsPerFrame;
 $2 = HEAP32[$0>>2]|0;
 $3 = (($2) + 16|0);
 HEAP32[$cfg>>2] = $3;
 $4 = HEAP32[$0>>2]|0;
 $5 = (($4) + 84040|0);
 HEAP32[$eov>>2] = $5;
 $6 = HEAP32[$0>>2]|0;
 $7 = (($6) + 27824|0);
 HEAP32[$esv>>2] = $7;
 $8 = HEAP32[$0>>2]|0;
 $9 = (($8) + 304|0);
 HEAP32[$l3_side>>2] = $9;
 $10 = HEAP32[$esv>>2]|0;
 $11 = (($10) + 24304|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = HEAP32[$esv>>2]|0;
 $14 = (($13) + 12016|0);
 $15 = (($14) + (($12*48)|0)|0);
 $16 = (($15) + 4|0);
 HEAP32[$16>>2] = 0;
 $17 = HEAP32[$esv>>2]|0;
 $18 = (($17) + 24304|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = HEAP32[$esv>>2]|0;
 $21 = (($20) + 12016|0);
 $22 = (($21) + (($19*48)|0)|0);
 $23 = (($22) + 8|0);
 $24 = HEAP32[$cfg>>2]|0;
 $25 = (($24) + 8|0);
 $26 = HEAP32[$25>>2]|0;
 _memset(($23|0),0,($26|0))|0;
 $27 = HEAP32[$cfg>>2]|0;
 $28 = (($27) + 48|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = ($29|0)<(16000);
 $31 = HEAP32[$0>>2]|0;
 if ($30) {
  _writeheader($31,4094,12);
 } else {
  _writeheader($31,4095,12);
 }
 $32 = HEAP32[$0>>2]|0;
 $33 = HEAP32[$cfg>>2]|0;
 $34 = HEAP32[$33>>2]|0;
 _writeheader($32,$34,1);
 $35 = HEAP32[$0>>2]|0;
 _writeheader($35,1,2);
 $36 = HEAP32[$0>>2]|0;
 $37 = HEAP32[$cfg>>2]|0;
 $38 = (($37) + 144|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = ($39|0)!=(0);
 $41 = $40 ^ 1;
 $42 = $41&1;
 _writeheader($36,$42,1);
 $43 = HEAP32[$0>>2]|0;
 $44 = HEAP32[$eov>>2]|0;
 $45 = (($44) + 704|0);
 $46 = HEAP32[$45>>2]|0;
 _writeheader($43,$46,4);
 $47 = HEAP32[$0>>2]|0;
 $48 = HEAP32[$cfg>>2]|0;
 $49 = (($48) + 4|0);
 $50 = HEAP32[$49>>2]|0;
 _writeheader($47,$50,2);
 $51 = HEAP32[$0>>2]|0;
 $52 = HEAP32[$eov>>2]|0;
 $53 = (($52) + 712|0);
 $54 = HEAP32[$53>>2]|0;
 _writeheader($51,$54,1);
 $55 = HEAP32[$0>>2]|0;
 $56 = HEAP32[$cfg>>2]|0;
 $57 = (($56) + 156|0);
 $58 = HEAP32[$57>>2]|0;
 _writeheader($55,$58,1);
 $59 = HEAP32[$0>>2]|0;
 $60 = HEAP32[$cfg>>2]|0;
 $61 = (($60) + 164|0);
 $62 = HEAP32[$61>>2]|0;
 _writeheader($59,$62,2);
 $63 = HEAP32[$0>>2]|0;
 $64 = HEAP32[$eov>>2]|0;
 $65 = (($64) + 716|0);
 $66 = HEAP32[$65>>2]|0;
 _writeheader($63,$66,2);
 $67 = HEAP32[$0>>2]|0;
 $68 = HEAP32[$cfg>>2]|0;
 $69 = (($68) + 148|0);
 $70 = HEAP32[$69>>2]|0;
 _writeheader($67,$70,1);
 $71 = HEAP32[$0>>2]|0;
 $72 = HEAP32[$cfg>>2]|0;
 $73 = (($72) + 152|0);
 $74 = HEAP32[$73>>2]|0;
 _writeheader($71,$74,1);
 $75 = HEAP32[$0>>2]|0;
 $76 = HEAP32[$cfg>>2]|0;
 $77 = (($76) + 160|0);
 $78 = HEAP32[$77>>2]|0;
 _writeheader($75,$78,2);
 $79 = HEAP32[$cfg>>2]|0;
 $80 = (($79) + 144|0);
 $81 = HEAP32[$80>>2]|0;
 $82 = ($81|0)!=(0);
 if ($82) {
  $83 = HEAP32[$0>>2]|0;
  _writeheader($83,0,16);
 }
 $84 = HEAP32[$cfg>>2]|0;
 $85 = HEAP32[$84>>2]|0;
 $86 = ($85|0)==(1);
 $87 = HEAP32[$0>>2]|0;
 $88 = HEAP32[$l3_side>>2]|0;
 $89 = (($88) + 21008|0);
 $90 = HEAP32[$89>>2]|0;
 L8: do {
  if ($86) {
   _writeheader($87,$90,9);
   $91 = HEAP32[$cfg>>2]|0;
   $92 = (($91) + 56|0);
   $93 = HEAP32[$92>>2]|0;
   $94 = ($93|0)==(2);
   $95 = HEAP32[$0>>2]|0;
   $96 = HEAP32[$l3_side>>2]|0;
   $97 = (($96) + 21012|0);
   $98 = HEAP32[$97>>2]|0;
   if ($94) {
    _writeheader($95,$98,3);
   } else {
    _writeheader($95,$98,5);
   }
   HEAP32[$ch>>2] = 0;
   while(1) {
    $99 = HEAP32[$ch>>2]|0;
    $100 = HEAP32[$cfg>>2]|0;
    $101 = (($100) + 56|0);
    $102 = HEAP32[$101>>2]|0;
    $103 = ($99|0)<($102|0);
    if (!($103)) {
     break;
    }
    HEAP32[$band>>2] = 0;
    while(1) {
     $104 = HEAP32[$band>>2]|0;
     $105 = ($104|0)<(4);
     if (!($105)) {
      break;
     }
     $106 = HEAP32[$0>>2]|0;
     $107 = HEAP32[$band>>2]|0;
     $108 = HEAP32[$ch>>2]|0;
     $109 = HEAP32[$l3_side>>2]|0;
     $110 = (($109) + 21024|0);
     $111 = (($110) + ($108<<4)|0);
     $112 = (($111) + ($107<<2)|0);
     $113 = HEAP32[$112>>2]|0;
     _writeheader($106,$113,1);
     $114 = HEAP32[$band>>2]|0;
     $115 = (($114) + 1)|0;
     HEAP32[$band>>2] = $115;
    }
    $116 = HEAP32[$ch>>2]|0;
    $117 = (($116) + 1)|0;
    HEAP32[$ch>>2] = $117;
   }
   HEAP32[$gr>>2] = 0;
   while(1) {
    $118 = HEAP32[$gr>>2]|0;
    $119 = ($118|0)<(2);
    if (!($119)) {
     break L8;
    }
    HEAP32[$ch>>2] = 0;
    while(1) {
     $120 = HEAP32[$ch>>2]|0;
     $121 = HEAP32[$cfg>>2]|0;
     $122 = (($121) + 56|0);
     $123 = HEAP32[$122>>2]|0;
     $124 = ($120|0)<($123|0);
     if (!($124)) {
      break;
     }
     $125 = HEAP32[$ch>>2]|0;
     $126 = HEAP32[$gr>>2]|0;
     $127 = HEAP32[$l3_side>>2]|0;
     $128 = (($127) + (($126*10504)|0)|0);
     $129 = (($128) + (($125*5252)|0)|0);
     HEAP32[$gi>>2] = $129;
     $130 = HEAP32[$0>>2]|0;
     $131 = HEAP32[$gi>>2]|0;
     $132 = (($131) + 4768|0);
     $133 = HEAP32[$132>>2]|0;
     $134 = HEAP32[$gi>>2]|0;
     $135 = (($134) + 4844|0);
     $136 = HEAP32[$135>>2]|0;
     $137 = (($133) + ($136))|0;
     _writeheader($130,$137,12);
     $138 = HEAP32[$0>>2]|0;
     $139 = HEAP32[$gi>>2]|0;
     $140 = (($139) + 4772|0);
     $141 = HEAP32[$140>>2]|0;
     $142 = (($141|0) / 2)&-1;
     _writeheader($138,$142,9);
     $143 = HEAP32[$0>>2]|0;
     $144 = HEAP32[$gi>>2]|0;
     $145 = (($144) + 4780|0);
     $146 = HEAP32[$145>>2]|0;
     _writeheader($143,$146,8);
     $147 = HEAP32[$0>>2]|0;
     $148 = HEAP32[$gi>>2]|0;
     $149 = (($148) + 4784|0);
     $150 = HEAP32[$149>>2]|0;
     _writeheader($147,$150,4);
     $151 = HEAP32[$gi>>2]|0;
     $152 = (($151) + 4788|0);
     $153 = HEAP32[$152>>2]|0;
     $154 = ($153|0)!=(0);
     $155 = HEAP32[$0>>2]|0;
     if ($154) {
      _writeheader($155,1,1);
      $156 = HEAP32[$0>>2]|0;
      $157 = HEAP32[$gi>>2]|0;
      $158 = (($157) + 4788|0);
      $159 = HEAP32[$158>>2]|0;
      _writeheader($156,$159,2);
      $160 = HEAP32[$0>>2]|0;
      $161 = HEAP32[$gi>>2]|0;
      $162 = (($161) + 4792|0);
      $163 = HEAP32[$162>>2]|0;
      _writeheader($160,$163,1);
      $164 = HEAP32[$gi>>2]|0;
      $165 = (($164) + 4796|0);
      $166 = HEAP32[$165>>2]|0;
      $167 = ($166|0)==(14);
      if ($167) {
       $168 = HEAP32[$gi>>2]|0;
       $169 = (($168) + 4796|0);
       HEAP32[$169>>2] = 16;
      }
      $170 = HEAP32[$0>>2]|0;
      $171 = HEAP32[$gi>>2]|0;
      $172 = (($171) + 4796|0);
      $173 = HEAP32[$172>>2]|0;
      _writeheader($170,$173,5);
      $174 = HEAP32[$gi>>2]|0;
      $175 = (($174) + 4796|0);
      $176 = (($175) + 4|0);
      $177 = HEAP32[$176>>2]|0;
      $178 = ($177|0)==(14);
      if ($178) {
       $179 = HEAP32[$gi>>2]|0;
       $180 = (($179) + 4796|0);
       $181 = (($180) + 4|0);
       HEAP32[$181>>2] = 16;
      }
      $182 = HEAP32[$0>>2]|0;
      $183 = HEAP32[$gi>>2]|0;
      $184 = (($183) + 4796|0);
      $185 = (($184) + 4|0);
      $186 = HEAP32[$185>>2]|0;
      _writeheader($182,$186,5);
      $187 = HEAP32[$0>>2]|0;
      $188 = HEAP32[$gi>>2]|0;
      $189 = (($188) + 4808|0);
      $190 = HEAP32[$189>>2]|0;
      _writeheader($187,$190,3);
      $191 = HEAP32[$0>>2]|0;
      $192 = HEAP32[$gi>>2]|0;
      $193 = (($192) + 4808|0);
      $194 = (($193) + 4|0);
      $195 = HEAP32[$194>>2]|0;
      _writeheader($191,$195,3);
      $196 = HEAP32[$0>>2]|0;
      $197 = HEAP32[$gi>>2]|0;
      $198 = (($197) + 4808|0);
      $199 = (($198) + 8|0);
      $200 = HEAP32[$199>>2]|0;
      _writeheader($196,$200,3);
     } else {
      _writeheader($155,0,1);
      $201 = HEAP32[$gi>>2]|0;
      $202 = (($201) + 4796|0);
      $203 = HEAP32[$202>>2]|0;
      $204 = ($203|0)==(14);
      if ($204) {
       $205 = HEAP32[$gi>>2]|0;
       $206 = (($205) + 4796|0);
       HEAP32[$206>>2] = 16;
      }
      $207 = HEAP32[$0>>2]|0;
      $208 = HEAP32[$gi>>2]|0;
      $209 = (($208) + 4796|0);
      $210 = HEAP32[$209>>2]|0;
      _writeheader($207,$210,5);
      $211 = HEAP32[$gi>>2]|0;
      $212 = (($211) + 4796|0);
      $213 = (($212) + 4|0);
      $214 = HEAP32[$213>>2]|0;
      $215 = ($214|0)==(14);
      if ($215) {
       $216 = HEAP32[$gi>>2]|0;
       $217 = (($216) + 4796|0);
       $218 = (($217) + 4|0);
       HEAP32[$218>>2] = 16;
      }
      $219 = HEAP32[$0>>2]|0;
      $220 = HEAP32[$gi>>2]|0;
      $221 = (($220) + 4796|0);
      $222 = (($221) + 4|0);
      $223 = HEAP32[$222>>2]|0;
      _writeheader($219,$223,5);
      $224 = HEAP32[$gi>>2]|0;
      $225 = (($224) + 4796|0);
      $226 = (($225) + 8|0);
      $227 = HEAP32[$226>>2]|0;
      $228 = ($227|0)==(14);
      if ($228) {
       $229 = HEAP32[$gi>>2]|0;
       $230 = (($229) + 4796|0);
       $231 = (($230) + 8|0);
       HEAP32[$231>>2] = 16;
      }
      $232 = HEAP32[$0>>2]|0;
      $233 = HEAP32[$gi>>2]|0;
      $234 = (($233) + 4796|0);
      $235 = (($234) + 8|0);
      $236 = HEAP32[$235>>2]|0;
      _writeheader($232,$236,5);
      $237 = HEAP32[$0>>2]|0;
      $238 = HEAP32[$gi>>2]|0;
      $239 = (($238) + 4824|0);
      $240 = HEAP32[$239>>2]|0;
      _writeheader($237,$240,4);
      $241 = HEAP32[$0>>2]|0;
      $242 = HEAP32[$gi>>2]|0;
      $243 = (($242) + 4828|0);
      $244 = HEAP32[$243>>2]|0;
      _writeheader($241,$244,3);
     }
     $245 = HEAP32[$0>>2]|0;
     $246 = HEAP32[$gi>>2]|0;
     $247 = (($246) + 4832|0);
     $248 = HEAP32[$247>>2]|0;
     _writeheader($245,$248,1);
     $249 = HEAP32[$0>>2]|0;
     $250 = HEAP32[$gi>>2]|0;
     $251 = (($250) + 4836|0);
     $252 = HEAP32[$251>>2]|0;
     _writeheader($249,$252,1);
     $253 = HEAP32[$0>>2]|0;
     $254 = HEAP32[$gi>>2]|0;
     $255 = (($254) + 4840|0);
     $256 = HEAP32[$255>>2]|0;
     _writeheader($253,$256,1);
     $257 = HEAP32[$ch>>2]|0;
     $258 = (($257) + 1)|0;
     HEAP32[$ch>>2] = $258;
    }
    $259 = HEAP32[$gr>>2]|0;
    $260 = (($259) + 1)|0;
    HEAP32[$gr>>2] = $260;
   }
  } else {
   _writeheader($87,$90,8);
   $261 = HEAP32[$0>>2]|0;
   $262 = HEAP32[$l3_side>>2]|0;
   $263 = (($262) + 21012|0);
   $264 = HEAP32[$263>>2]|0;
   $265 = HEAP32[$cfg>>2]|0;
   $266 = (($265) + 56|0);
   $267 = HEAP32[$266>>2]|0;
   _writeheader($261,$264,$267);
   HEAP32[$gr>>2] = 0;
   HEAP32[$ch>>2] = 0;
   while(1) {
    $268 = HEAP32[$ch>>2]|0;
    $269 = HEAP32[$cfg>>2]|0;
    $270 = (($269) + 56|0);
    $271 = HEAP32[$270>>2]|0;
    $272 = ($268|0)<($271|0);
    if (!($272)) {
     break L8;
    }
    $273 = HEAP32[$ch>>2]|0;
    $274 = HEAP32[$gr>>2]|0;
    $275 = HEAP32[$l3_side>>2]|0;
    $276 = (($275) + (($274*10504)|0)|0);
    $277 = (($276) + (($273*5252)|0)|0);
    HEAP32[$gi1>>2] = $277;
    $278 = HEAP32[$0>>2]|0;
    $279 = HEAP32[$gi1>>2]|0;
    $280 = (($279) + 4768|0);
    $281 = HEAP32[$280>>2]|0;
    $282 = HEAP32[$gi1>>2]|0;
    $283 = (($282) + 4844|0);
    $284 = HEAP32[$283>>2]|0;
    $285 = (($281) + ($284))|0;
    _writeheader($278,$285,12);
    $286 = HEAP32[$0>>2]|0;
    $287 = HEAP32[$gi1>>2]|0;
    $288 = (($287) + 4772|0);
    $289 = HEAP32[$288>>2]|0;
    $290 = (($289|0) / 2)&-1;
    _writeheader($286,$290,9);
    $291 = HEAP32[$0>>2]|0;
    $292 = HEAP32[$gi1>>2]|0;
    $293 = (($292) + 4780|0);
    $294 = HEAP32[$293>>2]|0;
    _writeheader($291,$294,8);
    $295 = HEAP32[$0>>2]|0;
    $296 = HEAP32[$gi1>>2]|0;
    $297 = (($296) + 4784|0);
    $298 = HEAP32[$297>>2]|0;
    _writeheader($295,$298,9);
    $299 = HEAP32[$gi1>>2]|0;
    $300 = (($299) + 4788|0);
    $301 = HEAP32[$300>>2]|0;
    $302 = ($301|0)!=(0);
    $303 = HEAP32[$0>>2]|0;
    if ($302) {
     _writeheader($303,1,1);
     $304 = HEAP32[$0>>2]|0;
     $305 = HEAP32[$gi1>>2]|0;
     $306 = (($305) + 4788|0);
     $307 = HEAP32[$306>>2]|0;
     _writeheader($304,$307,2);
     $308 = HEAP32[$0>>2]|0;
     $309 = HEAP32[$gi1>>2]|0;
     $310 = (($309) + 4792|0);
     $311 = HEAP32[$310>>2]|0;
     _writeheader($308,$311,1);
     $312 = HEAP32[$gi1>>2]|0;
     $313 = (($312) + 4796|0);
     $314 = HEAP32[$313>>2]|0;
     $315 = ($314|0)==(14);
     if ($315) {
      $316 = HEAP32[$gi1>>2]|0;
      $317 = (($316) + 4796|0);
      HEAP32[$317>>2] = 16;
     }
     $318 = HEAP32[$0>>2]|0;
     $319 = HEAP32[$gi1>>2]|0;
     $320 = (($319) + 4796|0);
     $321 = HEAP32[$320>>2]|0;
     _writeheader($318,$321,5);
     $322 = HEAP32[$gi1>>2]|0;
     $323 = (($322) + 4796|0);
     $324 = (($323) + 4|0);
     $325 = HEAP32[$324>>2]|0;
     $326 = ($325|0)==(14);
     if ($326) {
      $327 = HEAP32[$gi1>>2]|0;
      $328 = (($327) + 4796|0);
      $329 = (($328) + 4|0);
      HEAP32[$329>>2] = 16;
     }
     $330 = HEAP32[$0>>2]|0;
     $331 = HEAP32[$gi1>>2]|0;
     $332 = (($331) + 4796|0);
     $333 = (($332) + 4|0);
     $334 = HEAP32[$333>>2]|0;
     _writeheader($330,$334,5);
     $335 = HEAP32[$0>>2]|0;
     $336 = HEAP32[$gi1>>2]|0;
     $337 = (($336) + 4808|0);
     $338 = HEAP32[$337>>2]|0;
     _writeheader($335,$338,3);
     $339 = HEAP32[$0>>2]|0;
     $340 = HEAP32[$gi1>>2]|0;
     $341 = (($340) + 4808|0);
     $342 = (($341) + 4|0);
     $343 = HEAP32[$342>>2]|0;
     _writeheader($339,$343,3);
     $344 = HEAP32[$0>>2]|0;
     $345 = HEAP32[$gi1>>2]|0;
     $346 = (($345) + 4808|0);
     $347 = (($346) + 8|0);
     $348 = HEAP32[$347>>2]|0;
     _writeheader($344,$348,3);
    } else {
     _writeheader($303,0,1);
     $349 = HEAP32[$gi1>>2]|0;
     $350 = (($349) + 4796|0);
     $351 = HEAP32[$350>>2]|0;
     $352 = ($351|0)==(14);
     if ($352) {
      $353 = HEAP32[$gi1>>2]|0;
      $354 = (($353) + 4796|0);
      HEAP32[$354>>2] = 16;
     }
     $355 = HEAP32[$0>>2]|0;
     $356 = HEAP32[$gi1>>2]|0;
     $357 = (($356) + 4796|0);
     $358 = HEAP32[$357>>2]|0;
     _writeheader($355,$358,5);
     $359 = HEAP32[$gi1>>2]|0;
     $360 = (($359) + 4796|0);
     $361 = (($360) + 4|0);
     $362 = HEAP32[$361>>2]|0;
     $363 = ($362|0)==(14);
     if ($363) {
      $364 = HEAP32[$gi1>>2]|0;
      $365 = (($364) + 4796|0);
      $366 = (($365) + 4|0);
      HEAP32[$366>>2] = 16;
     }
     $367 = HEAP32[$0>>2]|0;
     $368 = HEAP32[$gi1>>2]|0;
     $369 = (($368) + 4796|0);
     $370 = (($369) + 4|0);
     $371 = HEAP32[$370>>2]|0;
     _writeheader($367,$371,5);
     $372 = HEAP32[$gi1>>2]|0;
     $373 = (($372) + 4796|0);
     $374 = (($373) + 8|0);
     $375 = HEAP32[$374>>2]|0;
     $376 = ($375|0)==(14);
     if ($376) {
      $377 = HEAP32[$gi1>>2]|0;
      $378 = (($377) + 4796|0);
      $379 = (($378) + 8|0);
      HEAP32[$379>>2] = 16;
     }
     $380 = HEAP32[$0>>2]|0;
     $381 = HEAP32[$gi1>>2]|0;
     $382 = (($381) + 4796|0);
     $383 = (($382) + 8|0);
     $384 = HEAP32[$383>>2]|0;
     _writeheader($380,$384,5);
     $385 = HEAP32[$0>>2]|0;
     $386 = HEAP32[$gi1>>2]|0;
     $387 = (($386) + 4824|0);
     $388 = HEAP32[$387>>2]|0;
     _writeheader($385,$388,4);
     $389 = HEAP32[$0>>2]|0;
     $390 = HEAP32[$gi1>>2]|0;
     $391 = (($390) + 4828|0);
     $392 = HEAP32[$391>>2]|0;
     _writeheader($389,$392,3);
    }
    $393 = HEAP32[$0>>2]|0;
    $394 = HEAP32[$gi1>>2]|0;
    $395 = (($394) + 4836|0);
    $396 = HEAP32[$395>>2]|0;
    _writeheader($393,$396,1);
    $397 = HEAP32[$0>>2]|0;
    $398 = HEAP32[$gi1>>2]|0;
    $399 = (($398) + 4840|0);
    $400 = HEAP32[$399>>2]|0;
    _writeheader($397,$400,1);
    $401 = HEAP32[$ch>>2]|0;
    $402 = (($401) + 1)|0;
    HEAP32[$ch>>2] = $402;
   }
  }
 } while(0);
 $403 = HEAP32[$cfg>>2]|0;
 $404 = (($403) + 144|0);
 $405 = HEAP32[$404>>2]|0;
 $406 = ($405|0)!=(0);
 if ($406) {
  $407 = HEAP32[$0>>2]|0;
  $408 = HEAP32[$esv>>2]|0;
  $409 = (($408) + 24304|0);
  $410 = HEAP32[$409>>2]|0;
  $411 = HEAP32[$esv>>2]|0;
  $412 = (($411) + 12016|0);
  $413 = (($412) + (($410*48)|0)|0);
  $414 = (($413) + 8|0);
  _CRC_writeheader($407,$414);
 }
 $415 = HEAP32[$esv>>2]|0;
 $416 = (($415) + 24304|0);
 $417 = HEAP32[$416>>2]|0;
 HEAP32[$old>>2] = $417;
 $418 = HEAP32[$old>>2]|0;
 $419 = (($418) + 1)|0;
 $420 = $419 & 255;
 $421 = HEAP32[$esv>>2]|0;
 $422 = (($421) + 24304|0);
 HEAP32[$422>>2] = $420;
 $423 = HEAP32[$old>>2]|0;
 $424 = HEAP32[$esv>>2]|0;
 $425 = (($424) + 12016|0);
 $426 = (($425) + (($423*48)|0)|0);
 $427 = HEAP32[$426>>2]|0;
 $428 = HEAP32[$1>>2]|0;
 $429 = (($427) + ($428))|0;
 $430 = HEAP32[$esv>>2]|0;
 $431 = (($430) + 24304|0);
 $432 = HEAP32[$431>>2]|0;
 $433 = HEAP32[$esv>>2]|0;
 $434 = (($433) + 12016|0);
 $435 = (($434) + (($432*48)|0)|0);
 HEAP32[$435>>2] = $429;
 $436 = HEAP32[$esv>>2]|0;
 $437 = (($436) + 24304|0);
 $438 = HEAP32[$437>>2]|0;
 $439 = HEAP32[$esv>>2]|0;
 $440 = (($439) + 24308|0);
 $441 = HEAP32[$440>>2]|0;
 $442 = ($438|0)==($441|0);
 if (!($442)) {
  STACKTOP = sp;return;
 }
 $443 = HEAP32[$0>>2]|0;
 _lame_errorf($443,600,$vararg_buffer);
 STACKTOP = sp;return;
}
function _writeMainData($gfc) {
 $gfc = $gfc|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $cfg = 0, $ch = 0, $data_bits = 0;
 var $gi = 0, $gi1 = 0, $gr = 0, $i = 0, $l3_side = 0, $scale_bits = 0, $sfb = 0, $sfb_partition = 0, $sfbs = 0, $sfbs2 = 0, $slen = 0, $slen1 = 0, $slen2 = 0, $slen3 = 0, $tot_bits = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0;
 $0 = sp + 72|0;
 $cfg = sp + 68|0;
 $l3_side = sp + 64|0;
 $gr = sp + 60|0;
 $ch = sp + 56|0;
 $sfb = sp + 52|0;
 $data_bits = sp + 48|0;
 $tot_bits = sp + 44|0;
 $gi = sp + 40|0;
 $slen1 = sp + 36|0;
 $slen2 = sp + 32|0;
 $gi1 = sp + 28|0;
 $i = sp + 24|0;
 $sfb_partition = sp + 20|0;
 $scale_bits = sp + 16|0;
 $sfbs = sp + 12|0;
 $slen = sp + 8|0;
 $sfbs2 = sp + 4|0;
 $slen3 = sp;
 HEAP32[$0>>2] = $gfc;
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 16|0);
 HEAP32[$cfg>>2] = $2;
 $3 = HEAP32[$0>>2]|0;
 $4 = (($3) + 304|0);
 HEAP32[$l3_side>>2] = $4;
 HEAP32[$tot_bits>>2] = 0;
 $5 = HEAP32[$cfg>>2]|0;
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)==(1);
 HEAP32[$gr>>2] = 0;
 if ($7) {
  while(1) {
   $8 = HEAP32[$gr>>2]|0;
   $9 = ($8|0)<(2);
   if (!($9)) {
    break;
   }
   HEAP32[$ch>>2] = 0;
   while(1) {
    $10 = HEAP32[$ch>>2]|0;
    $11 = HEAP32[$cfg>>2]|0;
    $12 = (($11) + 56|0);
    $13 = HEAP32[$12>>2]|0;
    $14 = ($10|0)<($13|0);
    if (!($14)) {
     break;
    }
    $15 = HEAP32[$ch>>2]|0;
    $16 = HEAP32[$gr>>2]|0;
    $17 = HEAP32[$l3_side>>2]|0;
    $18 = (($17) + (($16*10504)|0)|0);
    $19 = (($18) + (($15*5252)|0)|0);
    HEAP32[$gi>>2] = $19;
    $20 = HEAP32[$gi>>2]|0;
    $21 = (($20) + 4784|0);
    $22 = HEAP32[$21>>2]|0;
    $23 = (97976 + ($22<<2)|0);
    $24 = HEAP32[$23>>2]|0;
    HEAP32[$slen1>>2] = $24;
    $25 = HEAP32[$gi>>2]|0;
    $26 = (($25) + 4784|0);
    $27 = HEAP32[$26>>2]|0;
    $28 = (98040 + ($27<<2)|0);
    $29 = HEAP32[$28>>2]|0;
    HEAP32[$slen2>>2] = $29;
    HEAP32[$data_bits>>2] = 0;
    HEAP32[$sfb>>2] = 0;
    while(1) {
     $30 = HEAP32[$sfb>>2]|0;
     $31 = HEAP32[$gi>>2]|0;
     $32 = (($31) + 4868|0);
     $33 = HEAP32[$32>>2]|0;
     $34 = ($30|0)<($33|0);
     if (!($34)) {
      break;
     }
     $35 = HEAP32[$sfb>>2]|0;
     $36 = HEAP32[$gi>>2]|0;
     $37 = (($36) + 4608|0);
     $38 = (($37) + ($35<<2)|0);
     $39 = HEAP32[$38>>2]|0;
     $40 = ($39|0)==(-1);
     if (!($40)) {
      $41 = HEAP32[$0>>2]|0;
      $42 = HEAP32[$sfb>>2]|0;
      $43 = HEAP32[$gi>>2]|0;
      $44 = (($43) + 4608|0);
      $45 = (($44) + ($42<<2)|0);
      $46 = HEAP32[$45>>2]|0;
      $47 = HEAP32[$slen1>>2]|0;
      _putbits2($41,$46,$47);
      $48 = HEAP32[$slen1>>2]|0;
      $49 = HEAP32[$data_bits>>2]|0;
      $50 = (($49) + ($48))|0;
      HEAP32[$data_bits>>2] = $50;
     }
     $51 = HEAP32[$sfb>>2]|0;
     $52 = (($51) + 1)|0;
     HEAP32[$sfb>>2] = $52;
    }
    while(1) {
     $53 = HEAP32[$sfb>>2]|0;
     $54 = HEAP32[$gi>>2]|0;
     $55 = (($54) + 4860|0);
     $56 = HEAP32[$55>>2]|0;
     $57 = ($53|0)<($56|0);
     if (!($57)) {
      break;
     }
     $58 = HEAP32[$sfb>>2]|0;
     $59 = HEAP32[$gi>>2]|0;
     $60 = (($59) + 4608|0);
     $61 = (($60) + ($58<<2)|0);
     $62 = HEAP32[$61>>2]|0;
     $63 = ($62|0)==(-1);
     if (!($63)) {
      $64 = HEAP32[$0>>2]|0;
      $65 = HEAP32[$sfb>>2]|0;
      $66 = HEAP32[$gi>>2]|0;
      $67 = (($66) + 4608|0);
      $68 = (($67) + ($65<<2)|0);
      $69 = HEAP32[$68>>2]|0;
      $70 = HEAP32[$slen2>>2]|0;
      _putbits2($64,$69,$70);
      $71 = HEAP32[$slen2>>2]|0;
      $72 = HEAP32[$data_bits>>2]|0;
      $73 = (($72) + ($71))|0;
      HEAP32[$data_bits>>2] = $73;
     }
     $74 = HEAP32[$sfb>>2]|0;
     $75 = (($74) + 1)|0;
     HEAP32[$sfb>>2] = $75;
    }
    $76 = HEAP32[$gi>>2]|0;
    $77 = (($76) + 4788|0);
    $78 = HEAP32[$77>>2]|0;
    $79 = ($78|0)==(2);
    $80 = HEAP32[$0>>2]|0;
    $81 = HEAP32[$gi>>2]|0;
    if ($79) {
     $82 = (_ShortHuffmancodebits($80,$81)|0);
     $83 = HEAP32[$data_bits>>2]|0;
     $84 = (($83) + ($82))|0;
     HEAP32[$data_bits>>2] = $84;
    } else {
     $85 = (_LongHuffmancodebits($80,$81)|0);
     $86 = HEAP32[$data_bits>>2]|0;
     $87 = (($86) + ($85))|0;
     HEAP32[$data_bits>>2] = $87;
    }
    $88 = HEAP32[$0>>2]|0;
    $89 = HEAP32[$gi>>2]|0;
    $90 = (_huffman_coder_count1($88,$89)|0);
    $91 = HEAP32[$data_bits>>2]|0;
    $92 = (($91) + ($90))|0;
    HEAP32[$data_bits>>2] = $92;
    $93 = HEAP32[$data_bits>>2]|0;
    $94 = HEAP32[$tot_bits>>2]|0;
    $95 = (($94) + ($93))|0;
    HEAP32[$tot_bits>>2] = $95;
    $96 = HEAP32[$ch>>2]|0;
    $97 = (($96) + 1)|0;
    HEAP32[$ch>>2] = $97;
   }
   $98 = HEAP32[$gr>>2]|0;
   $99 = (($98) + 1)|0;
   HEAP32[$gr>>2] = $99;
  }
  $256 = HEAP32[$tot_bits>>2]|0;
  STACKTOP = sp;return ($256|0);
 }
 HEAP32[$ch>>2] = 0;
 while(1) {
  $100 = HEAP32[$ch>>2]|0;
  $101 = HEAP32[$cfg>>2]|0;
  $102 = (($101) + 56|0);
  $103 = HEAP32[$102>>2]|0;
  $104 = ($100|0)<($103|0);
  if (!($104)) {
   break;
  }
  $105 = HEAP32[$ch>>2]|0;
  $106 = HEAP32[$gr>>2]|0;
  $107 = HEAP32[$l3_side>>2]|0;
  $108 = (($107) + (($106*10504)|0)|0);
  $109 = (($108) + (($105*5252)|0)|0);
  HEAP32[$gi1>>2] = $109;
  HEAP32[$scale_bits>>2] = 0;
  HEAP32[$data_bits>>2] = 0;
  HEAP32[$sfb>>2] = 0;
  HEAP32[$sfb_partition>>2] = 0;
  $110 = HEAP32[$gi1>>2]|0;
  $111 = (($110) + 4788|0);
  $112 = HEAP32[$111>>2]|0;
  $113 = ($112|0)==(2);
  if ($113) {
   while(1) {
    $114 = HEAP32[$sfb_partition>>2]|0;
    $115 = ($114|0)<(4);
    if (!($115)) {
     break;
    }
    $116 = HEAP32[$sfb_partition>>2]|0;
    $117 = HEAP32[$gi1>>2]|0;
    $118 = (($117) + 5188|0);
    $119 = HEAP32[$118>>2]|0;
    $120 = (($119) + ($116<<2)|0);
    $121 = HEAP32[$120>>2]|0;
    $122 = (($121|0) / 3)&-1;
    HEAP32[$sfbs>>2] = $122;
    $123 = HEAP32[$sfb_partition>>2]|0;
    $124 = HEAP32[$gi1>>2]|0;
    $125 = (($124) + 5192|0);
    $126 = (($125) + ($123<<2)|0);
    $127 = HEAP32[$126>>2]|0;
    HEAP32[$slen>>2] = $127;
    HEAP32[$i>>2] = 0;
    while(1) {
     $128 = HEAP32[$i>>2]|0;
     $129 = HEAP32[$sfbs>>2]|0;
     $130 = ($128|0)<($129|0);
     if (!($130)) {
      break;
     }
     $131 = HEAP32[$0>>2]|0;
     $132 = HEAP32[$sfb>>2]|0;
     $133 = ($132*3)|0;
     $134 = (($133) + 0)|0;
     $135 = HEAP32[$gi1>>2]|0;
     $136 = (($135) + 4608|0);
     $137 = (($136) + ($134<<2)|0);
     $138 = HEAP32[$137>>2]|0;
     $139 = ($138|0)>(0);
     if ($139) {
      $140 = HEAP32[$sfb>>2]|0;
      $141 = ($140*3)|0;
      $142 = (($141) + 0)|0;
      $143 = HEAP32[$gi1>>2]|0;
      $144 = (($143) + 4608|0);
      $145 = (($144) + ($142<<2)|0);
      $146 = HEAP32[$145>>2]|0;
      $148 = $146;
     } else {
      $148 = 0;
     }
     $147 = HEAP32[$slen>>2]|0;
     _putbits2($131,$148,$147);
     $149 = HEAP32[$0>>2]|0;
     $150 = HEAP32[$sfb>>2]|0;
     $151 = ($150*3)|0;
     $152 = (($151) + 1)|0;
     $153 = HEAP32[$gi1>>2]|0;
     $154 = (($153) + 4608|0);
     $155 = (($154) + ($152<<2)|0);
     $156 = HEAP32[$155>>2]|0;
     $157 = ($156|0)>(0);
     if ($157) {
      $158 = HEAP32[$sfb>>2]|0;
      $159 = ($158*3)|0;
      $160 = (($159) + 1)|0;
      $161 = HEAP32[$gi1>>2]|0;
      $162 = (($161) + 4608|0);
      $163 = (($162) + ($160<<2)|0);
      $164 = HEAP32[$163>>2]|0;
      $166 = $164;
     } else {
      $166 = 0;
     }
     $165 = HEAP32[$slen>>2]|0;
     _putbits2($149,$166,$165);
     $167 = HEAP32[$0>>2]|0;
     $168 = HEAP32[$sfb>>2]|0;
     $169 = ($168*3)|0;
     $170 = (($169) + 2)|0;
     $171 = HEAP32[$gi1>>2]|0;
     $172 = (($171) + 4608|0);
     $173 = (($172) + ($170<<2)|0);
     $174 = HEAP32[$173>>2]|0;
     $175 = ($174|0)>(0);
     if ($175) {
      $176 = HEAP32[$sfb>>2]|0;
      $177 = ($176*3)|0;
      $178 = (($177) + 2)|0;
      $179 = HEAP32[$gi1>>2]|0;
      $180 = (($179) + 4608|0);
      $181 = (($180) + ($178<<2)|0);
      $182 = HEAP32[$181>>2]|0;
      $184 = $182;
     } else {
      $184 = 0;
     }
     $183 = HEAP32[$slen>>2]|0;
     _putbits2($167,$184,$183);
     $185 = HEAP32[$slen>>2]|0;
     $186 = ($185*3)|0;
     $187 = HEAP32[$scale_bits>>2]|0;
     $188 = (($187) + ($186))|0;
     HEAP32[$scale_bits>>2] = $188;
     $189 = HEAP32[$i>>2]|0;
     $190 = (($189) + 1)|0;
     HEAP32[$i>>2] = $190;
     $191 = HEAP32[$sfb>>2]|0;
     $192 = (($191) + 1)|0;
     HEAP32[$sfb>>2] = $192;
    }
    $193 = HEAP32[$sfb_partition>>2]|0;
    $194 = (($193) + 1)|0;
    HEAP32[$sfb_partition>>2] = $194;
   }
   $195 = HEAP32[$0>>2]|0;
   $196 = HEAP32[$gi1>>2]|0;
   $197 = (_ShortHuffmancodebits($195,$196)|0);
   $198 = HEAP32[$data_bits>>2]|0;
   $199 = (($198) + ($197))|0;
   HEAP32[$data_bits>>2] = $199;
  } else {
   while(1) {
    $200 = HEAP32[$sfb_partition>>2]|0;
    $201 = ($200|0)<(4);
    if (!($201)) {
     break;
    }
    $202 = HEAP32[$sfb_partition>>2]|0;
    $203 = HEAP32[$gi1>>2]|0;
    $204 = (($203) + 5188|0);
    $205 = HEAP32[$204>>2]|0;
    $206 = (($205) + ($202<<2)|0);
    $207 = HEAP32[$206>>2]|0;
    HEAP32[$sfbs2>>2] = $207;
    $208 = HEAP32[$sfb_partition>>2]|0;
    $209 = HEAP32[$gi1>>2]|0;
    $210 = (($209) + 5192|0);
    $211 = (($210) + ($208<<2)|0);
    $212 = HEAP32[$211>>2]|0;
    HEAP32[$slen3>>2] = $212;
    HEAP32[$i>>2] = 0;
    while(1) {
     $213 = HEAP32[$i>>2]|0;
     $214 = HEAP32[$sfbs2>>2]|0;
     $215 = ($213|0)<($214|0);
     if (!($215)) {
      break;
     }
     $216 = HEAP32[$0>>2]|0;
     $217 = HEAP32[$sfb>>2]|0;
     $218 = HEAP32[$gi1>>2]|0;
     $219 = (($218) + 4608|0);
     $220 = (($219) + ($217<<2)|0);
     $221 = HEAP32[$220>>2]|0;
     $222 = ($221|0)>(0);
     if ($222) {
      $223 = HEAP32[$sfb>>2]|0;
      $224 = HEAP32[$gi1>>2]|0;
      $225 = (($224) + 4608|0);
      $226 = (($225) + ($223<<2)|0);
      $227 = HEAP32[$226>>2]|0;
      $229 = $227;
     } else {
      $229 = 0;
     }
     $228 = HEAP32[$slen3>>2]|0;
     _putbits2($216,$229,$228);
     $230 = HEAP32[$slen3>>2]|0;
     $231 = HEAP32[$scale_bits>>2]|0;
     $232 = (($231) + ($230))|0;
     HEAP32[$scale_bits>>2] = $232;
     $233 = HEAP32[$i>>2]|0;
     $234 = (($233) + 1)|0;
     HEAP32[$i>>2] = $234;
     $235 = HEAP32[$sfb>>2]|0;
     $236 = (($235) + 1)|0;
     HEAP32[$sfb>>2] = $236;
    }
    $237 = HEAP32[$sfb_partition>>2]|0;
    $238 = (($237) + 1)|0;
    HEAP32[$sfb_partition>>2] = $238;
   }
   $239 = HEAP32[$0>>2]|0;
   $240 = HEAP32[$gi1>>2]|0;
   $241 = (_LongHuffmancodebits($239,$240)|0);
   $242 = HEAP32[$data_bits>>2]|0;
   $243 = (($242) + ($241))|0;
   HEAP32[$data_bits>>2] = $243;
  }
  $244 = HEAP32[$0>>2]|0;
  $245 = HEAP32[$gi1>>2]|0;
  $246 = (_huffman_coder_count1($244,$245)|0);
  $247 = HEAP32[$data_bits>>2]|0;
  $248 = (($247) + ($246))|0;
  HEAP32[$data_bits>>2] = $248;
  $249 = HEAP32[$scale_bits>>2]|0;
  $250 = HEAP32[$data_bits>>2]|0;
  $251 = (($249) + ($250))|0;
  $252 = HEAP32[$tot_bits>>2]|0;
  $253 = (($252) + ($251))|0;
  HEAP32[$tot_bits>>2] = $253;
  $254 = HEAP32[$ch>>2]|0;
  $255 = (($254) + 1)|0;
  HEAP32[$ch>>2] = $255;
 }
 $256 = HEAP32[$tot_bits>>2]|0;
 STACKTOP = sp;return ($256|0);
}
function _copy_buffer($gfc,$buffer,$size,$mp3data) {
 $gfc = $gfc|0;
 $buffer = $buffer|0;
 $size = $size|0;
 $mp3data = $mp3data|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $minimum = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = sp + 20|0;
 $1 = sp + 16|0;
 $2 = sp + 12|0;
 $3 = sp + 8|0;
 $4 = sp + 4|0;
 $minimum = sp;
 HEAP32[$1>>2] = $gfc;
 HEAP32[$2>>2] = $buffer;
 HEAP32[$3>>2] = $size;
 HEAP32[$4>>2] = $mp3data;
 $5 = HEAP32[$1>>2]|0;
 $6 = HEAP32[$2>>2]|0;
 $7 = HEAP32[$3>>2]|0;
 $8 = (_do_copy_buffer($5,$6,$7)|0);
 HEAP32[$minimum>>2] = $8;
 $9 = HEAP32[$minimum>>2]|0;
 $10 = ($9|0)>(0);
 if ($10) {
  $11 = HEAP32[$4>>2]|0;
  $12 = ($11|0)!=(0);
  if ($12) {
   $13 = HEAP32[$1>>2]|0;
   $14 = (($13) + 85752|0);
   $15 = HEAP32[$2>>2]|0;
   $16 = HEAP32[$minimum>>2]|0;
   _UpdateMusicCRC($14,$15,$16);
   $17 = HEAP32[$minimum>>2]|0;
   $18 = HEAP32[$1>>2]|0;
   $19 = (($18) + 85760|0);
   $20 = (($19) + 28|0);
   $21 = HEAP32[$20>>2]|0;
   $22 = (($21) + ($17))|0;
   HEAP32[$20>>2] = $22;
   $23 = HEAP32[$1>>2]|0;
   $24 = HEAP32[$2>>2]|0;
   $25 = HEAP32[$minimum>>2]|0;
   $26 = (_do_gain_analysis($23,$24,$25)|0);
   HEAP32[$0>>2] = $26;
   $28 = HEAP32[$0>>2]|0;
   STACKTOP = sp;return ($28|0);
  }
 }
 $27 = HEAP32[$minimum>>2]|0;
 HEAP32[$0>>2] = $27;
 $28 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($28|0);
}
function _do_copy_buffer($gfc,$buffer,$size) {
 $gfc = $gfc|0;
 $buffer = $buffer|0;
 $size = $size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $bs = 0, $minimum = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = sp + 20|0;
 $1 = sp + 16|0;
 $2 = sp + 12|0;
 $3 = sp + 8|0;
 $bs = sp + 4|0;
 $minimum = sp;
 HEAP32[$1>>2] = $gfc;
 HEAP32[$2>>2] = $buffer;
 HEAP32[$3>>2] = $size;
 $4 = HEAP32[$1>>2]|0;
 $5 = (($4) + 284|0);
 HEAP32[$bs>>2] = $5;
 $6 = HEAP32[$bs>>2]|0;
 $7 = (($6) + 12|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($8) + 1)|0;
 HEAP32[$minimum>>2] = $9;
 $10 = HEAP32[$minimum>>2]|0;
 $11 = ($10|0)<=(0);
 if ($11) {
  HEAP32[$0>>2] = 0;
  $26 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($26|0);
 }
 $12 = HEAP32[$3>>2]|0;
 $13 = ($12|0)!=(0);
 if ($13) {
  $14 = HEAP32[$minimum>>2]|0;
  $15 = HEAP32[$3>>2]|0;
  $16 = ($14|0)>($15|0);
  if ($16) {
   HEAP32[$0>>2] = -1;
   $26 = HEAP32[$0>>2]|0;
   STACKTOP = sp;return ($26|0);
  }
 }
 $17 = HEAP32[$2>>2]|0;
 $18 = HEAP32[$bs>>2]|0;
 $19 = HEAP32[$18>>2]|0;
 $20 = HEAP32[$minimum>>2]|0;
 _memcpy(($17|0),($19|0),($20|0))|0;
 $21 = HEAP32[$bs>>2]|0;
 $22 = (($21) + 12|0);
 HEAP32[$22>>2] = -1;
 $23 = HEAP32[$bs>>2]|0;
 $24 = (($23) + 16|0);
 HEAP32[$24>>2] = 0;
 $25 = HEAP32[$minimum>>2]|0;
 HEAP32[$0>>2] = $25;
 $26 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($26|0);
}
function _do_gain_analysis($gfc,$buffer,$minimum) {
 $gfc = $gfc|0;
 $buffer = $buffer|0;
 $minimum = $minimum|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0.0, $38 = 0, $39 = 0, $4 = 0, $40 = 0.0, $41 = 0, $42 = 0, $43 = 0, $44 = 0.0, $45 = 0, $46 = 0, $47 = 0.0, $48 = 0, $49 = 0, $5 = 0, $50 = 0.0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0.0, $55 = 0.0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0.0, $71 = 0;
 var $72 = 0, $73 = 0.0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0.0, $79 = 0, $8 = 0, $80 = 0, $81 = 0.0, $82 = 0, $83 = 0, $84 = 0.0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0.0, $9 = 0;
 var $90 = 0.0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $cfg = 0, $i = 0, $mp3_in = 0, $pcm_buf = 0, $rov = 0, $rsv = 0, $samples_out = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 9264|0;
 $0 = sp + 9256|0;
 $1 = sp + 9252|0;
 $2 = sp + 9248|0;
 $3 = sp + 9244|0;
 $cfg = sp + 9240|0;
 $rsv = sp + 9236|0;
 $rov = sp + 9232|0;
 $pcm_buf = sp + 16|0;
 $mp3_in = sp + 8|0;
 $samples_out = sp + 4|0;
 $i = sp;
 HEAP32[$1>>2] = $gfc;
 HEAP32[$2>>2] = $buffer;
 HEAP32[$3>>2] = $minimum;
 $4 = HEAP32[$1>>2]|0;
 $5 = (($4) + 16|0);
 HEAP32[$cfg>>2] = $5;
 $6 = HEAP32[$1>>2]|0;
 $7 = (($6) + 85676|0);
 HEAP32[$rsv>>2] = $7;
 $8 = HEAP32[$1>>2]|0;
 $9 = (($8) + 85680|0);
 HEAP32[$rov>>2] = $9;
 $10 = HEAP32[$cfg>>2]|0;
 $11 = (($10) + 120|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($12|0)!=(0);
 L1: do {
  if ($13) {
   $14 = HEAP32[$3>>2]|0;
   HEAP32[$mp3_in>>2] = $14;
   HEAP32[$samples_out>>2] = -1;
   while(1) {
    $15 = HEAP32[$samples_out>>2]|0;
    $16 = ($15|0)!=(0);
    if (!($16)) {
     break L1;
    }
    $17 = HEAP32[$1>>2]|0;
    $18 = (($17) + 85808|0);
    $19 = HEAP32[$18>>2]|0;
    $20 = HEAP32[$2>>2]|0;
    $21 = HEAP32[$mp3_in>>2]|0;
    $22 = (($pcm_buf) + 4608|0);
    $23 = (_hip_decode1_unclipped($19,$20,$21,$pcm_buf,$22)|0);
    HEAP32[$samples_out>>2] = $23;
    HEAP32[$mp3_in>>2] = 0;
    $24 = HEAP32[$samples_out>>2]|0;
    $25 = ($24|0)==(-1);
    if ($25) {
     HEAP32[$samples_out>>2] = 0;
    }
    $26 = HEAP32[$samples_out>>2]|0;
    $27 = ($26|0)>(0);
    if (!($27)) {
     continue;
    }
    $28 = HEAP32[$cfg>>2]|0;
    $29 = (($28) + 116|0);
    $30 = HEAP32[$29>>2]|0;
    $31 = ($30|0)!=(0);
    L10: do {
     if ($31) {
      HEAP32[$i>>2] = 0;
      while(1) {
       $32 = HEAP32[$i>>2]|0;
       $33 = HEAP32[$samples_out>>2]|0;
       $34 = ($32|0)<($33|0);
       if (!($34)) {
        break;
       }
       $35 = HEAP32[$i>>2]|0;
       $36 = (($pcm_buf) + ($35<<2)|0);
       $37 = +HEAPF32[$36>>2];
       $38 = HEAP32[$rov>>2]|0;
       $39 = (($38) + 4|0);
       $40 = +HEAPF32[$39>>2];
       $41 = $37 > $40;
       $42 = HEAP32[$i>>2]|0;
       $43 = (($pcm_buf) + ($42<<2)|0);
       $44 = +HEAPF32[$43>>2];
       if ($41) {
        $45 = HEAP32[$rov>>2]|0;
        $46 = (($45) + 4|0);
        HEAPF32[$46>>2] = $44;
       } else {
        $47 = -$44;
        $48 = HEAP32[$rov>>2]|0;
        $49 = (($48) + 4|0);
        $50 = +HEAPF32[$49>>2];
        $51 = $47 > $50;
        if ($51) {
         $52 = HEAP32[$i>>2]|0;
         $53 = (($pcm_buf) + ($52<<2)|0);
         $54 = +HEAPF32[$53>>2];
         $55 = -$54;
         $56 = HEAP32[$rov>>2]|0;
         $57 = (($56) + 4|0);
         HEAPF32[$57>>2] = $55;
        }
       }
       $58 = HEAP32[$i>>2]|0;
       $59 = (($58) + 1)|0;
       HEAP32[$i>>2] = $59;
      }
      $60 = HEAP32[$cfg>>2]|0;
      $61 = (($60) + 56|0);
      $62 = HEAP32[$61>>2]|0;
      $63 = ($62|0)>(1);
      if ($63) {
       HEAP32[$i>>2] = 0;
       while(1) {
        $64 = HEAP32[$i>>2]|0;
        $65 = HEAP32[$samples_out>>2]|0;
        $66 = ($64|0)<($65|0);
        if (!($66)) {
         break L10;
        }
        $67 = HEAP32[$i>>2]|0;
        $68 = (($pcm_buf) + 4608|0);
        $69 = (($68) + ($67<<2)|0);
        $70 = +HEAPF32[$69>>2];
        $71 = HEAP32[$rov>>2]|0;
        $72 = (($71) + 4|0);
        $73 = +HEAPF32[$72>>2];
        $74 = $70 > $73;
        $75 = HEAP32[$i>>2]|0;
        $76 = (($pcm_buf) + 4608|0);
        $77 = (($76) + ($75<<2)|0);
        $78 = +HEAPF32[$77>>2];
        if ($74) {
         $79 = HEAP32[$rov>>2]|0;
         $80 = (($79) + 4|0);
         HEAPF32[$80>>2] = $78;
        } else {
         $81 = -$78;
         $82 = HEAP32[$rov>>2]|0;
         $83 = (($82) + 4|0);
         $84 = +HEAPF32[$83>>2];
         $85 = $81 > $84;
         if ($85) {
          $86 = HEAP32[$i>>2]|0;
          $87 = (($pcm_buf) + 4608|0);
          $88 = (($87) + ($86<<2)|0);
          $89 = +HEAPF32[$88>>2];
          $90 = -$89;
          $91 = HEAP32[$rov>>2]|0;
          $92 = (($91) + 4|0);
          HEAPF32[$92>>2] = $90;
         }
        }
        $93 = HEAP32[$i>>2]|0;
        $94 = (($93) + 1)|0;
        HEAP32[$i>>2] = $94;
       }
      }
     }
    } while(0);
    $95 = HEAP32[$cfg>>2]|0;
    $96 = (($95) + 112|0);
    $97 = HEAP32[$96>>2]|0;
    $98 = ($97|0)!=(0);
    if (!($98)) {
     continue;
    }
    $99 = HEAP32[$rsv>>2]|0;
    $100 = HEAP32[$99>>2]|0;
    $101 = (($pcm_buf) + 4608|0);
    $102 = HEAP32[$samples_out>>2]|0;
    $103 = HEAP32[$cfg>>2]|0;
    $104 = (($103) + 56|0);
    $105 = HEAP32[$104>>2]|0;
    $106 = (_AnalyzeSamples($100,$pcm_buf,$101,$102,$105)|0);
    $107 = ($106|0)==(0);
    if ($107) {
     break;
    }
   }
   HEAP32[$0>>2] = -6;
   $109 = HEAP32[$0>>2]|0;
   STACKTOP = sp;return ($109|0);
  }
 } while(0);
 $108 = HEAP32[$3>>2]|0;
 HEAP32[$0>>2] = $108;
 $109 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($109|0);
}
function _init_bit_stream_w($gfc) {
 $gfc = $gfc|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $esv = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp + 4|0;
 $esv = sp;
 HEAP32[$0>>2] = $gfc;
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 27824|0);
 HEAP32[$esv>>2] = $2;
 $3 = HEAP32[$esv>>2]|0;
 $4 = (($3) + 24308|0);
 HEAP32[$4>>2] = 0;
 $5 = HEAP32[$esv>>2]|0;
 $6 = (($5) + 24304|0);
 HEAP32[$6>>2] = 0;
 $7 = HEAP32[$esv>>2]|0;
 $8 = (($7) + 24304|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = HEAP32[$esv>>2]|0;
 $11 = (($10) + 12016|0);
 $12 = (($11) + (($9*48)|0)|0);
 HEAP32[$12>>2] = 0;
 $13 = (_malloc(147456)|0);
 $14 = HEAP32[$0>>2]|0;
 $15 = (($14) + 284|0);
 HEAP32[$15>>2] = $13;
 $16 = HEAP32[$0>>2]|0;
 $17 = (($16) + 284|0);
 $18 = (($17) + 4|0);
 HEAP32[$18>>2] = 147456;
 $19 = HEAP32[$0>>2]|0;
 $20 = (($19) + 284|0);
 $21 = (($20) + 12|0);
 HEAP32[$21>>2] = -1;
 $22 = HEAP32[$0>>2]|0;
 $23 = (($22) + 284|0);
 $24 = (($23) + 16|0);
 HEAP32[$24>>2] = 0;
 $25 = HEAP32[$0>>2]|0;
 $26 = (($25) + 284|0);
 $27 = (($26) + 8|0);
 HEAP32[$27>>2] = 0;
 STACKTOP = sp;return;
}
function _putbits2($gfc,$val,$j) {
 $gfc = $gfc|0;
 $val = $val|0;
 $j = $j|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $8 = 0, $9 = 0, $bs = 0, $esv = 0, $k = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = sp + 20|0;
 $1 = sp + 16|0;
 $2 = sp + 12|0;
 $esv = sp + 8|0;
 $bs = sp + 4|0;
 $k = sp;
 HEAP32[$0>>2] = $gfc;
 HEAP32[$1>>2] = $val;
 HEAP32[$2>>2] = $j;
 $3 = HEAP32[$0>>2]|0;
 $4 = (($3) + 27824|0);
 HEAP32[$esv>>2] = $4;
 $5 = HEAP32[$0>>2]|0;
 $6 = (($5) + 284|0);
 HEAP32[$bs>>2] = $6;
 while(1) {
  $7 = HEAP32[$2>>2]|0;
  $8 = ($7|0)>(0);
  if (!($8)) {
   break;
  }
  $9 = HEAP32[$bs>>2]|0;
  $10 = (($9) + 16|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ($11|0)==(0);
  if ($12) {
   $13 = HEAP32[$bs>>2]|0;
   $14 = (($13) + 16|0);
   HEAP32[$14>>2] = 8;
   $15 = HEAP32[$bs>>2]|0;
   $16 = (($15) + 12|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = (($17) + 1)|0;
   HEAP32[$16>>2] = $18;
   $19 = HEAP32[$esv>>2]|0;
   $20 = (($19) + 24308|0);
   $21 = HEAP32[$20>>2]|0;
   $22 = HEAP32[$esv>>2]|0;
   $23 = (($22) + 12016|0);
   $24 = (($23) + (($21*48)|0)|0);
   $25 = HEAP32[$24>>2]|0;
   $26 = HEAP32[$bs>>2]|0;
   $27 = (($26) + 8|0);
   $28 = HEAP32[$27>>2]|0;
   $29 = ($25|0)==($28|0);
   if ($29) {
    $30 = HEAP32[$0>>2]|0;
    _putheader_bits($30);
   }
   $31 = HEAP32[$bs>>2]|0;
   $32 = (($31) + 12|0);
   $33 = HEAP32[$32>>2]|0;
   $34 = HEAP32[$bs>>2]|0;
   $35 = HEAP32[$34>>2]|0;
   $36 = (($35) + ($33)|0);
   HEAP8[$36>>0] = 0;
  }
  $37 = HEAP32[$2>>2]|0;
  $38 = HEAP32[$bs>>2]|0;
  $39 = (($38) + 16|0);
  $40 = HEAP32[$39>>2]|0;
  $41 = ($37|0)<($40|0);
  if ($41) {
   $42 = HEAP32[$2>>2]|0;
   $46 = $42;
  } else {
   $43 = HEAP32[$bs>>2]|0;
   $44 = (($43) + 16|0);
   $45 = HEAP32[$44>>2]|0;
   $46 = $45;
  }
  HEAP32[$k>>2] = $46;
  $47 = HEAP32[$k>>2]|0;
  $48 = HEAP32[$2>>2]|0;
  $49 = (($48) - ($47))|0;
  HEAP32[$2>>2] = $49;
  $50 = HEAP32[$k>>2]|0;
  $51 = HEAP32[$bs>>2]|0;
  $52 = (($51) + 16|0);
  $53 = HEAP32[$52>>2]|0;
  $54 = (($53) - ($50))|0;
  HEAP32[$52>>2] = $54;
  $55 = HEAP32[$1>>2]|0;
  $56 = HEAP32[$2>>2]|0;
  $57 = $55 >> $56;
  $58 = HEAP32[$bs>>2]|0;
  $59 = (($58) + 16|0);
  $60 = HEAP32[$59>>2]|0;
  $61 = $57 << $60;
  $62 = HEAP32[$bs>>2]|0;
  $63 = (($62) + 12|0);
  $64 = HEAP32[$63>>2]|0;
  $65 = HEAP32[$bs>>2]|0;
  $66 = HEAP32[$65>>2]|0;
  $67 = (($66) + ($64)|0);
  $68 = HEAP8[$67>>0]|0;
  $69 = $68&255;
  $70 = $69 | $61;
  $71 = $70&255;
  HEAP8[$67>>0] = $71;
  $72 = HEAP32[$k>>2]|0;
  $73 = HEAP32[$bs>>2]|0;
  $74 = (($73) + 8|0);
  $75 = HEAP32[$74>>2]|0;
  $76 = (($75) + ($72))|0;
  HEAP32[$74>>2] = $76;
 }
 STACKTOP = sp;return;
}
function _ShortHuffmancodebits($gfc,$gi) {
 $gfc = $gfc|0;
 $gi = $gi|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $bits = 0, $region1Start = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp + 12|0;
 $1 = sp + 8|0;
 $bits = sp + 4|0;
 $region1Start = sp;
 HEAP32[$0>>2] = $gfc;
 HEAP32[$1>>2] = $gi;
 $2 = HEAP32[$0>>2]|0;
 $3 = (($2) + 21360|0);
 $4 = (($3) + 92|0);
 $5 = (($4) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6*3)|0;
 HEAP32[$region1Start>>2] = $7;
 $8 = HEAP32[$region1Start>>2]|0;
 $9 = HEAP32[$1>>2]|0;
 $10 = (($9) + 4772|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($8|0)>($11|0);
 if ($12) {
  $13 = HEAP32[$1>>2]|0;
  $14 = (($13) + 4772|0);
  $15 = HEAP32[$14>>2]|0;
  HEAP32[$region1Start>>2] = $15;
 }
 $16 = HEAP32[$0>>2]|0;
 $17 = HEAP32[$1>>2]|0;
 $18 = (($17) + 4796|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = HEAP32[$region1Start>>2]|0;
 $21 = HEAP32[$1>>2]|0;
 $22 = (_Huffmancode($16,$19,0,$20,$21)|0);
 HEAP32[$bits>>2] = $22;
 $23 = HEAP32[$0>>2]|0;
 $24 = HEAP32[$1>>2]|0;
 $25 = (($24) + 4796|0);
 $26 = (($25) + 4|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = HEAP32[$region1Start>>2]|0;
 $29 = HEAP32[$1>>2]|0;
 $30 = (($29) + 4772|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = HEAP32[$1>>2]|0;
 $33 = (_Huffmancode($23,$27,$28,$31,$32)|0);
 $34 = HEAP32[$bits>>2]|0;
 $35 = (($34) + ($33))|0;
 HEAP32[$bits>>2] = $35;
 $36 = HEAP32[$bits>>2]|0;
 STACKTOP = sp;return ($36|0);
}
function _LongHuffmancodebits($gfc,$gi) {
 $gfc = $gfc|0;
 $gi = $gi|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $bigvalues = 0, $bits = 0, $i = 0, $region1Start = 0, $region2Start = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = sp + 24|0;
 $1 = sp + 20|0;
 $i = sp + 16|0;
 $bigvalues = sp + 12|0;
 $bits = sp + 8|0;
 $region1Start = sp + 4|0;
 $region2Start = sp;
 HEAP32[$0>>2] = $gfc;
 HEAP32[$1>>2] = $gi;
 $2 = HEAP32[$1>>2]|0;
 $3 = (($2) + 4772|0);
 $4 = HEAP32[$3>>2]|0;
 HEAP32[$bigvalues>>2] = $4;
 $5 = HEAP32[$1>>2]|0;
 $6 = (($5) + 4824|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($7) + 1)|0;
 HEAP32[$i>>2] = $8;
 $9 = HEAP32[$i>>2]|0;
 $10 = HEAP32[$0>>2]|0;
 $11 = (($10) + 21360|0);
 $12 = (($11) + ($9<<2)|0);
 $13 = HEAP32[$12>>2]|0;
 HEAP32[$region1Start>>2] = $13;
 $14 = HEAP32[$1>>2]|0;
 $15 = (($14) + 4828|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = (($16) + 1)|0;
 $18 = HEAP32[$i>>2]|0;
 $19 = (($18) + ($17))|0;
 HEAP32[$i>>2] = $19;
 $20 = HEAP32[$i>>2]|0;
 $21 = HEAP32[$0>>2]|0;
 $22 = (($21) + 21360|0);
 $23 = (($22) + ($20<<2)|0);
 $24 = HEAP32[$23>>2]|0;
 HEAP32[$region2Start>>2] = $24;
 $25 = HEAP32[$region1Start>>2]|0;
 $26 = HEAP32[$bigvalues>>2]|0;
 $27 = ($25|0)>($26|0);
 if ($27) {
  $28 = HEAP32[$bigvalues>>2]|0;
  HEAP32[$region1Start>>2] = $28;
 }
 $29 = HEAP32[$region2Start>>2]|0;
 $30 = HEAP32[$bigvalues>>2]|0;
 $31 = ($29|0)>($30|0);
 if ($31) {
  $32 = HEAP32[$bigvalues>>2]|0;
  HEAP32[$region2Start>>2] = $32;
 }
 $33 = HEAP32[$0>>2]|0;
 $34 = HEAP32[$1>>2]|0;
 $35 = (($34) + 4796|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = HEAP32[$region1Start>>2]|0;
 $38 = HEAP32[$1>>2]|0;
 $39 = (_Huffmancode($33,$36,0,$37,$38)|0);
 HEAP32[$bits>>2] = $39;
 $40 = HEAP32[$0>>2]|0;
 $41 = HEAP32[$1>>2]|0;
 $42 = (($41) + 4796|0);
 $43 = (($42) + 4|0);
 $44 = HEAP32[$43>>2]|0;
 $45 = HEAP32[$region1Start>>2]|0;
 $46 = HEAP32[$region2Start>>2]|0;
 $47 = HEAP32[$1>>2]|0;
 $48 = (_Huffmancode($40,$44,$45,$46,$47)|0);
 $49 = HEAP32[$bits>>2]|0;
 $50 = (($49) + ($48))|0;
 HEAP32[$bits>>2] = $50;
 $51 = HEAP32[$0>>2]|0;
 $52 = HEAP32[$1>>2]|0;
 $53 = (($52) + 4796|0);
 $54 = (($53) + 8|0);
 $55 = HEAP32[$54>>2]|0;
 $56 = HEAP32[$region2Start>>2]|0;
 $57 = HEAP32[$bigvalues>>2]|0;
 $58 = HEAP32[$1>>2]|0;
 $59 = (_Huffmancode($51,$55,$56,$57,$58)|0);
 $60 = HEAP32[$bits>>2]|0;
 $61 = (($60) + ($59))|0;
 HEAP32[$bits>>2] = $61;
 $62 = HEAP32[$bits>>2]|0;
 STACKTOP = sp;return ($62|0);
}
function _huffman_coder_count1($gfc,$gi) {
 $gfc = $gfc|0;
 $gi = $gi|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0.0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0.0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0.0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0.0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $bits = 0, $h = 0, $huffbits = 0;
 var $i = 0, $ix = 0, $p = 0, $v = 0, $xr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $0 = sp + 36|0;
 $1 = sp + 32|0;
 $h = sp + 28|0;
 $i = sp + 24|0;
 $bits = sp + 20|0;
 $ix = sp + 16|0;
 $xr = sp + 12|0;
 $huffbits = sp + 8|0;
 $p = sp + 4|0;
 $v = sp;
 HEAP32[$0>>2] = $gfc;
 HEAP32[$1>>2] = $gi;
 $2 = HEAP32[$1>>2]|0;
 $3 = (($2) + 4840|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($4) + 32)|0;
 $6 = (96088 + ($5<<4)|0);
 HEAP32[$h>>2] = $6;
 HEAP32[$bits>>2] = 0;
 $7 = HEAP32[$1>>2]|0;
 $8 = (($7) + 4772|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = HEAP32[$1>>2]|0;
 $11 = (($10) + 2304|0);
 $12 = (($11) + ($9<<2)|0);
 HEAP32[$ix>>2] = $12;
 $13 = HEAP32[$1>>2]|0;
 $14 = (($13) + 4772|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = HEAP32[$1>>2]|0;
 $17 = (($16) + ($15<<2)|0);
 HEAP32[$xr>>2] = $17;
 $18 = HEAP32[$1>>2]|0;
 $19 = (($18) + 4776|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = HEAP32[$1>>2]|0;
 $22 = (($21) + 4772|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = (($20) - ($23))|0;
 $25 = (($24|0) / 4)&-1;
 HEAP32[$i>>2] = $25;
 while(1) {
  $26 = HEAP32[$i>>2]|0;
  $27 = ($26|0)>(0);
  if (!($27)) {
   break;
  }
  HEAP32[$huffbits>>2] = 0;
  HEAP32[$p>>2] = 0;
  $28 = HEAP32[$ix>>2]|0;
  $29 = HEAP32[$28>>2]|0;
  HEAP32[$v>>2] = $29;
  $30 = HEAP32[$v>>2]|0;
  $31 = ($30|0)!=(0);
  if ($31) {
   $32 = HEAP32[$p>>2]|0;
   $33 = (($32) + 8)|0;
   HEAP32[$p>>2] = $33;
   $34 = HEAP32[$xr>>2]|0;
   $35 = +HEAPF32[$34>>2];
   $36 = $35 < 0.0;
   if ($36) {
    $37 = HEAP32[$huffbits>>2]|0;
    $38 = (($37) + 1)|0;
    HEAP32[$huffbits>>2] = $38;
   }
  }
  $39 = HEAP32[$ix>>2]|0;
  $40 = (($39) + 4|0);
  $41 = HEAP32[$40>>2]|0;
  HEAP32[$v>>2] = $41;
  $42 = HEAP32[$v>>2]|0;
  $43 = ($42|0)!=(0);
  if ($43) {
   $44 = HEAP32[$p>>2]|0;
   $45 = (($44) + 4)|0;
   HEAP32[$p>>2] = $45;
   $46 = HEAP32[$huffbits>>2]|0;
   $47 = $46<<1;
   HEAP32[$huffbits>>2] = $47;
   $48 = HEAP32[$xr>>2]|0;
   $49 = (($48) + 4|0);
   $50 = +HEAPF32[$49>>2];
   $51 = $50 < 0.0;
   if ($51) {
    $52 = HEAP32[$huffbits>>2]|0;
    $53 = (($52) + 1)|0;
    HEAP32[$huffbits>>2] = $53;
   }
  }
  $54 = HEAP32[$ix>>2]|0;
  $55 = (($54) + 8|0);
  $56 = HEAP32[$55>>2]|0;
  HEAP32[$v>>2] = $56;
  $57 = HEAP32[$v>>2]|0;
  $58 = ($57|0)!=(0);
  if ($58) {
   $59 = HEAP32[$p>>2]|0;
   $60 = (($59) + 2)|0;
   HEAP32[$p>>2] = $60;
   $61 = HEAP32[$huffbits>>2]|0;
   $62 = $61<<1;
   HEAP32[$huffbits>>2] = $62;
   $63 = HEAP32[$xr>>2]|0;
   $64 = (($63) + 8|0);
   $65 = +HEAPF32[$64>>2];
   $66 = $65 < 0.0;
   if ($66) {
    $67 = HEAP32[$huffbits>>2]|0;
    $68 = (($67) + 1)|0;
    HEAP32[$huffbits>>2] = $68;
   }
  }
  $69 = HEAP32[$ix>>2]|0;
  $70 = (($69) + 12|0);
  $71 = HEAP32[$70>>2]|0;
  HEAP32[$v>>2] = $71;
  $72 = HEAP32[$v>>2]|0;
  $73 = ($72|0)!=(0);
  if ($73) {
   $74 = HEAP32[$p>>2]|0;
   $75 = (($74) + 1)|0;
   HEAP32[$p>>2] = $75;
   $76 = HEAP32[$huffbits>>2]|0;
   $77 = $76<<1;
   HEAP32[$huffbits>>2] = $77;
   $78 = HEAP32[$xr>>2]|0;
   $79 = (($78) + 12|0);
   $80 = +HEAPF32[$79>>2];
   $81 = $80 < 0.0;
   if ($81) {
    $82 = HEAP32[$huffbits>>2]|0;
    $83 = (($82) + 1)|0;
    HEAP32[$huffbits>>2] = $83;
   }
  }
  $84 = HEAP32[$ix>>2]|0;
  $85 = (($84) + 16|0);
  HEAP32[$ix>>2] = $85;
  $86 = HEAP32[$xr>>2]|0;
  $87 = (($86) + 16|0);
  HEAP32[$xr>>2] = $87;
  $88 = HEAP32[$0>>2]|0;
  $89 = HEAP32[$huffbits>>2]|0;
  $90 = HEAP32[$p>>2]|0;
  $91 = HEAP32[$h>>2]|0;
  $92 = (($91) + 8|0);
  $93 = HEAP32[$92>>2]|0;
  $94 = (($93) + ($90<<1)|0);
  $95 = HEAP16[$94>>1]|0;
  $96 = $95&65535;
  $97 = (($89) + ($96))|0;
  $98 = HEAP32[$p>>2]|0;
  $99 = HEAP32[$h>>2]|0;
  $100 = (($99) + 12|0);
  $101 = HEAP32[$100>>2]|0;
  $102 = (($101) + ($98)|0);
  $103 = HEAP8[$102>>0]|0;
  $104 = $103&255;
  _putbits2($88,$97,$104);
  $105 = HEAP32[$p>>2]|0;
  $106 = HEAP32[$h>>2]|0;
  $107 = (($106) + 12|0);
  $108 = HEAP32[$107>>2]|0;
  $109 = (($108) + ($105)|0);
  $110 = HEAP8[$109>>0]|0;
  $111 = $110&255;
  $112 = HEAP32[$bits>>2]|0;
  $113 = (($112) + ($111))|0;
  HEAP32[$bits>>2] = $113;
  $114 = HEAP32[$i>>2]|0;
  $115 = (($114) + -1)|0;
  HEAP32[$i>>2] = $115;
 }
 $116 = HEAP32[$bits>>2]|0;
 STACKTOP = sp;return ($116|0);
}
function _Huffmancode($gfc,$tableindex,$start,$end,$gi) {
 $gfc = $gfc|0;
 $tableindex = $tableindex|0;
 $start = $start|0;
 $end = $end|0;
 $gi = $gi|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $14 = 0;
 var $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0.0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0.0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $bits = 0, $cbits = 0, $ext = 0, $h = 0, $i = 0, $linbits = 0, $linbits_x1 = 0;
 var $linbits_x2 = 0, $x1 = 0, $x2 = 0, $xbits = 0, $xlen = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $0 = sp + 52|0;
 $1 = sp + 48|0;
 $2 = sp + 44|0;
 $3 = sp + 40|0;
 $4 = sp + 36|0;
 $5 = sp + 32|0;
 $h = sp + 28|0;
 $linbits = sp + 24|0;
 $i = sp + 20|0;
 $bits = sp + 16|0;
 $cbits = sp + 62|0;
 $xbits = sp + 60|0;
 $xlen = sp + 12|0;
 $ext = sp + 8|0;
 $x1 = sp + 4|0;
 $x2 = sp;
 $linbits_x1 = sp + 58|0;
 $linbits_x2 = sp + 56|0;
 HEAP32[$1>>2] = $gfc;
 HEAP32[$2>>2] = $tableindex;
 HEAP32[$3>>2] = $start;
 HEAP32[$4>>2] = $end;
 HEAP32[$5>>2] = $gi;
 $6 = HEAP32[$2>>2]|0;
 $7 = (96088 + ($6<<4)|0);
 HEAP32[$h>>2] = $7;
 $8 = HEAP32[$h>>2]|0;
 $9 = HEAP32[$8>>2]|0;
 HEAP32[$linbits>>2] = $9;
 HEAP32[$bits>>2] = 0;
 $10 = HEAP32[$2>>2]|0;
 $11 = ($10|0)!=(0);
 if (!($11)) {
  $12 = HEAP32[$bits>>2]|0;
  HEAP32[$0>>2] = $12;
  $132 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($132|0);
 }
 $13 = HEAP32[$3>>2]|0;
 HEAP32[$i>>2] = $13;
 while(1) {
  $14 = HEAP32[$i>>2]|0;
  $15 = HEAP32[$4>>2]|0;
  $16 = ($14|0)<($15|0);
  if (!($16)) {
   break;
  }
  HEAP16[$cbits>>1] = 0;
  HEAP16[$xbits>>1] = 0;
  $17 = HEAP32[$h>>2]|0;
  $18 = HEAP32[$17>>2]|0;
  HEAP32[$xlen>>2] = $18;
  HEAP32[$ext>>2] = 0;
  $19 = HEAP32[$i>>2]|0;
  $20 = HEAP32[$5>>2]|0;
  $21 = (($20) + 2304|0);
  $22 = (($21) + ($19<<2)|0);
  $23 = HEAP32[$22>>2]|0;
  HEAP32[$x1>>2] = $23;
  $24 = HEAP32[$i>>2]|0;
  $25 = (($24) + 1)|0;
  $26 = HEAP32[$5>>2]|0;
  $27 = (($26) + 2304|0);
  $28 = (($27) + ($25<<2)|0);
  $29 = HEAP32[$28>>2]|0;
  HEAP32[$x2>>2] = $29;
  $30 = HEAP32[$x1>>2]|0;
  $31 = ($30|0)!=(0);
  if ($31) {
   $32 = HEAP32[$i>>2]|0;
   $33 = HEAP32[$5>>2]|0;
   $34 = (($33) + ($32<<2)|0);
   $35 = +HEAPF32[$34>>2];
   $36 = $35 < 0.0;
   if ($36) {
    $37 = HEAP32[$ext>>2]|0;
    $38 = (($37) + 1)|0;
    HEAP32[$ext>>2] = $38;
   }
   $39 = HEAP16[$cbits>>1]|0;
   $40 = (($39) + -1)<<16>>16;
   HEAP16[$cbits>>1] = $40;
  }
  $41 = HEAP32[$2>>2]|0;
  $42 = ($41>>>0)>(15);
  if ($42) {
   $43 = HEAP32[$x1>>2]|0;
   $44 = ($43>>>0)>=(15);
   if ($44) {
    $45 = HEAP32[$x1>>2]|0;
    $46 = (($45) - 15)|0;
    $47 = $46&65535;
    HEAP16[$linbits_x1>>1] = $47;
    $48 = HEAP16[$linbits_x1>>1]|0;
    $49 = $48&65535;
    $50 = $49 << 1;
    $51 = HEAP32[$ext>>2]|0;
    $52 = $51 | $50;
    HEAP32[$ext>>2] = $52;
    $53 = HEAP32[$linbits>>2]|0;
    $54 = $53&65535;
    HEAP16[$xbits>>1] = $54;
    HEAP32[$x1>>2] = 15;
   }
   $55 = HEAP32[$x2>>2]|0;
   $56 = ($55>>>0)>=(15);
   if ($56) {
    $57 = HEAP32[$x2>>2]|0;
    $58 = (($57) - 15)|0;
    $59 = $58&65535;
    HEAP16[$linbits_x2>>1] = $59;
    $60 = HEAP32[$linbits>>2]|0;
    $61 = HEAP32[$ext>>2]|0;
    $62 = $61 << $60;
    HEAP32[$ext>>2] = $62;
    $63 = HEAP16[$linbits_x2>>1]|0;
    $64 = $63&65535;
    $65 = HEAP32[$ext>>2]|0;
    $66 = $65 | $64;
    HEAP32[$ext>>2] = $66;
    $67 = HEAP32[$linbits>>2]|0;
    $68 = HEAP16[$xbits>>1]|0;
    $69 = $68&65535;
    $70 = (($69) + ($67))|0;
    $71 = $70&65535;
    HEAP16[$xbits>>1] = $71;
    HEAP32[$x2>>2] = 15;
   }
   HEAP32[$xlen>>2] = 16;
  }
  $72 = HEAP32[$x2>>2]|0;
  $73 = ($72|0)!=(0);
  if ($73) {
   $74 = HEAP32[$ext>>2]|0;
   $75 = $74 << 1;
   HEAP32[$ext>>2] = $75;
   $76 = HEAP32[$i>>2]|0;
   $77 = (($76) + 1)|0;
   $78 = HEAP32[$5>>2]|0;
   $79 = (($78) + ($77<<2)|0);
   $80 = +HEAPF32[$79>>2];
   $81 = $80 < 0.0;
   if ($81) {
    $82 = HEAP32[$ext>>2]|0;
    $83 = (($82) + 1)|0;
    HEAP32[$ext>>2] = $83;
   }
   $84 = HEAP16[$cbits>>1]|0;
   $85 = (($84) + -1)<<16>>16;
   HEAP16[$cbits>>1] = $85;
  }
  $86 = HEAP32[$x1>>2]|0;
  $87 = HEAP32[$xlen>>2]|0;
  $88 = Math_imul($86, $87)|0;
  $89 = HEAP32[$x2>>2]|0;
  $90 = (($88) + ($89))|0;
  HEAP32[$x1>>2] = $90;
  $91 = HEAP16[$cbits>>1]|0;
  $92 = $91 << 16 >> 16;
  $93 = HEAP16[$xbits>>1]|0;
  $94 = $93&65535;
  $95 = (($94) - ($92))|0;
  $96 = $95&65535;
  HEAP16[$xbits>>1] = $96;
  $97 = HEAP32[$x1>>2]|0;
  $98 = HEAP32[$h>>2]|0;
  $99 = (($98) + 12|0);
  $100 = HEAP32[$99>>2]|0;
  $101 = (($100) + ($97)|0);
  $102 = HEAP8[$101>>0]|0;
  $103 = $102&255;
  $104 = HEAP16[$cbits>>1]|0;
  $105 = $104 << 16 >> 16;
  $106 = (($105) + ($103))|0;
  $107 = $106&65535;
  HEAP16[$cbits>>1] = $107;
  $108 = HEAP32[$1>>2]|0;
  $109 = HEAP32[$x1>>2]|0;
  $110 = HEAP32[$h>>2]|0;
  $111 = (($110) + 8|0);
  $112 = HEAP32[$111>>2]|0;
  $113 = (($112) + ($109<<1)|0);
  $114 = HEAP16[$113>>1]|0;
  $115 = $114&65535;
  $116 = HEAP16[$cbits>>1]|0;
  $117 = $116 << 16 >> 16;
  _putbits2($108,$115,$117);
  $118 = HEAP32[$1>>2]|0;
  $119 = HEAP32[$ext>>2]|0;
  $120 = HEAP16[$xbits>>1]|0;
  $121 = $120&65535;
  _putbits2($118,$119,$121);
  $122 = HEAP16[$cbits>>1]|0;
  $123 = $122 << 16 >> 16;
  $124 = HEAP16[$xbits>>1]|0;
  $125 = $124&65535;
  $126 = (($123) + ($125))|0;
  $127 = HEAP32[$bits>>2]|0;
  $128 = (($127) + ($126))|0;
  HEAP32[$bits>>2] = $128;
  $129 = HEAP32[$i>>2]|0;
  $130 = (($129) + 2)|0;
  HEAP32[$i>>2] = $130;
 }
 $131 = HEAP32[$bits>>2]|0;
 HEAP32[$0>>2] = $131;
 $132 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($132|0);
}
function _putheader_bits($gfc) {
 $gfc = $gfc|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $bs = 0, $cfg = 0, $esv = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp + 12|0;
 $cfg = sp + 8|0;
 $esv = sp + 4|0;
 $bs = sp;
 HEAP32[$0>>2] = $gfc;
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 16|0);
 HEAP32[$cfg>>2] = $2;
 $3 = HEAP32[$0>>2]|0;
 $4 = (($3) + 27824|0);
 HEAP32[$esv>>2] = $4;
 $5 = HEAP32[$0>>2]|0;
 $6 = (($5) + 284|0);
 HEAP32[$bs>>2] = $6;
 $7 = HEAP32[$bs>>2]|0;
 $8 = (($7) + 12|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = HEAP32[$bs>>2]|0;
 $11 = HEAP32[$10>>2]|0;
 $12 = (($11) + ($9)|0);
 $13 = HEAP32[$esv>>2]|0;
 $14 = (($13) + 24308|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = HEAP32[$esv>>2]|0;
 $17 = (($16) + 12016|0);
 $18 = (($17) + (($15*48)|0)|0);
 $19 = (($18) + 8|0);
 $20 = HEAP32[$cfg>>2]|0;
 $21 = (($20) + 8|0);
 $22 = HEAP32[$21>>2]|0;
 _memcpy(($12|0),($19|0),($22|0))|0;
 $23 = HEAP32[$cfg>>2]|0;
 $24 = (($23) + 8|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = HEAP32[$bs>>2]|0;
 $27 = (($26) + 12|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = (($28) + ($25))|0;
 HEAP32[$27>>2] = $29;
 $30 = HEAP32[$cfg>>2]|0;
 $31 = (($30) + 8|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = $32<<3;
 $34 = HEAP32[$bs>>2]|0;
 $35 = (($34) + 8|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = (($36) + ($33))|0;
 HEAP32[$35>>2] = $37;
 $38 = HEAP32[$esv>>2]|0;
 $39 = (($38) + 24308|0);
 $40 = HEAP32[$39>>2]|0;
 $41 = (($40) + 1)|0;
 $42 = $41 & 255;
 $43 = HEAP32[$esv>>2]|0;
 $44 = (($43) + 24308|0);
 HEAP32[$44>>2] = $42;
 STACKTOP = sp;return;
}
function _writeheader($gfc,$val,$j) {
 $gfc = $gfc|0;
 $val = $val|0;
 $j = $j|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $esv = 0, $k = 0, $ptr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = sp + 20|0;
 $1 = sp + 16|0;
 $2 = sp + 12|0;
 $esv = sp + 8|0;
 $ptr = sp + 4|0;
 $k = sp;
 HEAP32[$0>>2] = $gfc;
 HEAP32[$1>>2] = $val;
 HEAP32[$2>>2] = $j;
 $3 = HEAP32[$0>>2]|0;
 $4 = (($3) + 27824|0);
 HEAP32[$esv>>2] = $4;
 $5 = HEAP32[$esv>>2]|0;
 $6 = (($5) + 24304|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = HEAP32[$esv>>2]|0;
 $9 = (($8) + 12016|0);
 $10 = (($9) + (($7*48)|0)|0);
 $11 = (($10) + 4|0);
 $12 = HEAP32[$11>>2]|0;
 HEAP32[$ptr>>2] = $12;
 while(1) {
  $13 = HEAP32[$2>>2]|0;
  $14 = ($13|0)>(0);
  if (!($14)) {
   break;
  }
  $15 = HEAP32[$2>>2]|0;
  $16 = HEAP32[$ptr>>2]|0;
  $17 = $16 & 7;
  $18 = (8 - ($17))|0;
  $19 = ($15|0)<($18|0);
  if ($19) {
   $20 = HEAP32[$2>>2]|0;
   $24 = $20;
  } else {
   $21 = HEAP32[$ptr>>2]|0;
   $22 = $21 & 7;
   $23 = (8 - ($22))|0;
   $24 = $23;
  }
  HEAP32[$k>>2] = $24;
  $25 = HEAP32[$k>>2]|0;
  $26 = HEAP32[$2>>2]|0;
  $27 = (($26) - ($25))|0;
  HEAP32[$2>>2] = $27;
  $28 = HEAP32[$1>>2]|0;
  $29 = HEAP32[$2>>2]|0;
  $30 = $28 >> $29;
  $31 = HEAP32[$ptr>>2]|0;
  $32 = $31 & 7;
  $33 = (8 - ($32))|0;
  $34 = HEAP32[$k>>2]|0;
  $35 = (($33) - ($34))|0;
  $36 = $30 << $35;
  $37 = HEAP32[$ptr>>2]|0;
  $38 = $37 >> 3;
  $39 = HEAP32[$esv>>2]|0;
  $40 = (($39) + 24304|0);
  $41 = HEAP32[$40>>2]|0;
  $42 = HEAP32[$esv>>2]|0;
  $43 = (($42) + 12016|0);
  $44 = (($43) + (($41*48)|0)|0);
  $45 = (($44) + 8|0);
  $46 = (($45) + ($38)|0);
  $47 = HEAP8[$46>>0]|0;
  $48 = $47 << 24 >> 24;
  $49 = $48 | $36;
  $50 = $49&255;
  HEAP8[$46>>0] = $50;
  $51 = HEAP32[$k>>2]|0;
  $52 = HEAP32[$ptr>>2]|0;
  $53 = (($52) + ($51))|0;
  HEAP32[$ptr>>2] = $53;
 }
 $54 = HEAP32[$ptr>>2]|0;
 $55 = HEAP32[$esv>>2]|0;
 $56 = (($55) + 24304|0);
 $57 = HEAP32[$56>>2]|0;
 $58 = HEAP32[$esv>>2]|0;
 $59 = (($58) + 12016|0);
 $60 = (($59) + (($57*48)|0)|0);
 $61 = (($60) + 4|0);
 HEAP32[$61>>2] = $54;
 STACKTOP = sp;return;
}
function _lame_encode_mp3_frame($gfc,$inbuf_l,$inbuf_r,$mp3buf,$mp3buf_size) {
 $gfc = $gfc|0;
 $inbuf_l = $inbuf_l|0;
 $inbuf_r = $inbuf_r|0;
 $mp3buf = $mp3buf|0;
 $mp3buf_size = $mp3buf_size|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0.0, $158 = 0.0, $159 = 0.0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0.0, $165 = 0.0, $166 = 0.0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0.0, $172 = 0.0, $173 = 0.0, $174 = 0.0, $175 = 0.0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0.0, $237 = 0.0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0.0, $266 = 0.0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0.0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0.0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0.0, $372 = 0.0, $373 = 0.0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0.0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0.0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0.0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0.0, $403 = 0.0;
 var $404 = 0, $405 = 0, $406 = 0.0, $407 = 0.0, $408 = 0.0, $409 = 0.0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0.0, $421 = 0.0;
 var $422 = 0.0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0.0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0.0, $44 = 0;
 var $440 = 0.0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0;
 var $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0.0, $491 = 0, $492 = 0, $493 = 0, $494 = 0;
 var $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0.0, $51 = 0, $510 = 0.0, $511 = 0;
 var $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0;
 var $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0.0, $81 = 0, $82 = 0, $83 = 0, $84 = 0.0;
 var $85 = 0.0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0.0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0.0, $96 = 0, $97 = 0, $98 = 0.0, $99 = 0.0, $blocktype = 0, $bufp = 0, $cfg = 0, $ch = 0;
 var $cod_info = 0, $f = 0, $framesize = 0, $gi0 = 0, $gi1 = 0, $gr = 0, $i = 0, $inbuf = 0, $j = 0, $masking = 0, $masking_LR = 0, $masking_MS = 0, $mp3count = 0, $ms_ener_ratio = 0, $pe = 0, $pe_MS = 0, $pe_use = 0, $ret = 0, $sum_pe_LR = 0, $sum_pe_MS = 0;
 var $tot_ener = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 4096|0;
 $0 = sp + 4092|0;
 $1 = sp + 4088|0;
 $2 = sp + 4084|0;
 $3 = sp + 4080|0;
 $4 = sp + 4076|0;
 $5 = sp + 4072|0;
 $cfg = sp + 4068|0;
 $mp3count = sp + 4064|0;
 $masking_LR = sp + 2112|0;
 $masking_MS = sp + 160|0;
 $masking = sp + 152|0;
 $inbuf = sp + 144|0;
 $tot_ener = sp + 112|0;
 $ms_ener_ratio = sp + 104|0;
 $pe = sp + 88|0;
 $pe_MS = sp + 72|0;
 $pe_use = sp + 68|0;
 $ch = sp + 64|0;
 $gr = sp + 60|0;
 $ret = sp + 56|0;
 $bufp = sp + 48|0;
 $blocktype = sp + 40|0;
 $cod_info = sp + 32|0;
 $sum_pe_MS = sp + 28|0;
 $sum_pe_LR = sp + 24|0;
 $gi0 = sp + 20|0;
 $gi1 = sp + 16|0;
 $i = sp + 12|0;
 $f = sp + 8|0;
 $framesize = sp + 4|0;
 $j = sp;
 HEAP32[$1>>2] = $gfc;
 HEAP32[$2>>2] = $inbuf_l;
 HEAP32[$3>>2] = $inbuf_r;
 HEAP32[$4>>2] = $mp3buf;
 HEAP32[$5>>2] = $mp3buf_size;
 $6 = HEAP32[$1>>2]|0;
 $7 = (($6) + 16|0);
 HEAP32[$cfg>>2] = $7;
 ;HEAP32[$ms_ener_ratio+0>>2]=HEAP32[656+0>>2]|0;HEAP32[$ms_ener_ratio+4>>2]=HEAP32[656+4>>2]|0;
 ;HEAP32[$pe+0>>2]=0|0;HEAP32[$pe+4>>2]=0|0;HEAP32[$pe+8>>2]=0|0;HEAP32[$pe+12>>2]=0|0;
 ;HEAP32[$pe_MS+0>>2]=0|0;HEAP32[$pe_MS+4>>2]=0|0;HEAP32[$pe_MS+8>>2]=0|0;HEAP32[$pe_MS+12>>2]=0|0;
 $8 = HEAP32[$2>>2]|0;
 HEAP32[$inbuf>>2] = $8;
 $9 = HEAP32[$3>>2]|0;
 $10 = (($inbuf) + 4|0);
 HEAP32[$10>>2] = $9;
 $11 = HEAP32[$1>>2]|0;
 $12 = (($11) + 4|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ($13|0)==(0);
 if ($14) {
  $15 = HEAP32[$1>>2]|0;
  _lame_encode_frame_init($15,$inbuf);
 }
 $16 = HEAP32[$1>>2]|0;
 $17 = (($16) + 84040|0);
 $18 = (($17) + 712|0);
 HEAP32[$18>>2] = 0;
 $19 = HEAP32[$1>>2]|0;
 $20 = (($19) + 27824|0);
 $21 = (($20) + 12008|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = HEAP32[$1>>2]|0;
 $24 = (($23) + 27824|0);
 $25 = (($24) + 12012|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = (($26) - ($22))|0;
 HEAP32[$25>>2] = $27;
 $28 = ($27|0)<(0);
 if ($28) {
  $29 = HEAP32[$cfg>>2]|0;
  $30 = (($29) + 48|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = HEAP32[$1>>2]|0;
  $33 = (($32) + 27824|0);
  $34 = (($33) + 12012|0);
  $35 = HEAP32[$34>>2]|0;
  $36 = (($35) + ($31))|0;
  HEAP32[$34>>2] = $36;
  $37 = HEAP32[$1>>2]|0;
  $38 = (($37) + 84040|0);
  $39 = (($38) + 712|0);
  HEAP32[$39>>2] = 1;
 }
 ;HEAP32[$bufp+0>>2]=0|0;HEAP32[$bufp+4>>2]=0|0;
 HEAP32[$gr>>2] = 0;
 while(1) {
  $40 = HEAP32[$gr>>2]|0;
  $41 = HEAP32[$cfg>>2]|0;
  $42 = (($41) + 60|0);
  $43 = HEAP32[$42>>2]|0;
  $44 = ($40|0)<($43|0);
  if (!($44)) {
   break;
  }
  HEAP32[$ch>>2] = 0;
  while(1) {
   $45 = HEAP32[$ch>>2]|0;
   $46 = HEAP32[$cfg>>2]|0;
   $47 = (($46) + 56|0);
   $48 = HEAP32[$47>>2]|0;
   $49 = ($45|0)<($48|0);
   if (!($49)) {
    break;
   }
   $50 = HEAP32[$gr>>2]|0;
   $51 = ($50*576)|0;
   $52 = (576 + ($51))|0;
   $53 = (($52) - 272)|0;
   $54 = HEAP32[$ch>>2]|0;
   $55 = (($inbuf) + ($54<<2)|0);
   $56 = HEAP32[$55>>2]|0;
   $57 = (($56) + ($53<<2)|0);
   $58 = HEAP32[$ch>>2]|0;
   $59 = (($bufp) + ($58<<2)|0);
   HEAP32[$59>>2] = $57;
   $60 = HEAP32[$ch>>2]|0;
   $61 = (($60) + 1)|0;
   HEAP32[$ch>>2] = $61;
  }
  $62 = HEAP32[$1>>2]|0;
  $63 = HEAP32[$gr>>2]|0;
  $64 = HEAP32[$gr>>2]|0;
  $65 = (($pe) + ($64<<3)|0);
  $66 = HEAP32[$gr>>2]|0;
  $67 = (($pe_MS) + ($66<<3)|0);
  $68 = HEAP32[$gr>>2]|0;
  $69 = (($tot_ener) + ($68<<4)|0);
  $70 = (_L3psycho_anal_vbr($62,$bufp,$63,$masking_LR,$masking_MS,$65,$67,$69,$blocktype)|0);
  HEAP32[$ret>>2] = $70;
  $71 = HEAP32[$ret>>2]|0;
  $72 = ($71|0)!=(0);
  if ($72) {
   label = 11;
   break;
  }
  $73 = HEAP32[$cfg>>2]|0;
  $74 = (($73) + 164|0);
  $75 = HEAP32[$74>>2]|0;
  $76 = ($75|0)==(1);
  if ($76) {
   $77 = HEAP32[$gr>>2]|0;
   $78 = (($tot_ener) + ($77<<4)|0);
   $79 = (($78) + 8|0);
   $80 = +HEAPF32[$79>>2];
   $81 = HEAP32[$gr>>2]|0;
   $82 = (($tot_ener) + ($81<<4)|0);
   $83 = (($82) + 12|0);
   $84 = +HEAPF32[$83>>2];
   $85 = $80 + $84;
   $86 = HEAP32[$gr>>2]|0;
   $87 = (($ms_ener_ratio) + ($86<<2)|0);
   HEAPF32[$87>>2] = $85;
   $88 = HEAP32[$gr>>2]|0;
   $89 = (($ms_ener_ratio) + ($88<<2)|0);
   $90 = +HEAPF32[$89>>2];
   $91 = $90 > 0.0;
   if ($91) {
    $92 = HEAP32[$gr>>2]|0;
    $93 = (($tot_ener) + ($92<<4)|0);
    $94 = (($93) + 12|0);
    $95 = +HEAPF32[$94>>2];
    $96 = HEAP32[$gr>>2]|0;
    $97 = (($ms_ener_ratio) + ($96<<2)|0);
    $98 = +HEAPF32[$97>>2];
    $99 = $95 / $98;
    $100 = HEAP32[$gr>>2]|0;
    $101 = (($ms_ener_ratio) + ($100<<2)|0);
    HEAPF32[$101>>2] = $99;
   }
  }
  HEAP32[$ch>>2] = 0;
  while(1) {
   $102 = HEAP32[$ch>>2]|0;
   $103 = HEAP32[$cfg>>2]|0;
   $104 = (($103) + 56|0);
   $105 = HEAP32[$104>>2]|0;
   $106 = ($102|0)<($105|0);
   if (!($106)) {
    break;
   }
   $107 = HEAP32[$ch>>2]|0;
   $108 = HEAP32[$gr>>2]|0;
   $109 = HEAP32[$1>>2]|0;
   $110 = (($109) + 304|0);
   $111 = (($110) + (($108*10504)|0)|0);
   $112 = (($111) + (($107*5252)|0)|0);
   HEAP32[$cod_info>>2] = $112;
   $113 = HEAP32[$ch>>2]|0;
   $114 = (($blocktype) + ($113<<2)|0);
   $115 = HEAP32[$114>>2]|0;
   $116 = HEAP32[$cod_info>>2]|0;
   $117 = (($116) + 4788|0);
   HEAP32[$117>>2] = $115;
   $118 = HEAP32[$cod_info>>2]|0;
   $119 = (($118) + 4792|0);
   HEAP32[$119>>2] = 0;
   $120 = HEAP32[$ch>>2]|0;
   $121 = (($120) + 1)|0;
   HEAP32[$ch>>2] = $121;
  }
  $122 = HEAP32[$gr>>2]|0;
  $123 = (($122) + 1)|0;
  HEAP32[$gr>>2] = $123;
 }
 if ((label|0) == 11) {
  HEAP32[$0>>2] = -4;
  $535 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($535|0);
 }
 $124 = HEAP32[$1>>2]|0;
 _adjust_ATH($124);
 $125 = HEAP32[$1>>2]|0;
 $126 = HEAP32[$inbuf>>2]|0;
 $127 = (($inbuf) + 4|0);
 $128 = HEAP32[$127>>2]|0;
 _mdct_sub48($125,$126,$128);
 $129 = HEAP32[$1>>2]|0;
 $130 = (($129) + 84040|0);
 $131 = (($130) + 716|0);
 HEAP32[$131>>2] = 0;
 $132 = HEAP32[$cfg>>2]|0;
 $133 = (($132) + 64|0);
 $134 = HEAP32[$133>>2]|0;
 $135 = ($134|0)!=(0);
 if ($135) {
  $136 = HEAP32[$1>>2]|0;
  $137 = (($136) + 84040|0);
  $138 = (($137) + 716|0);
  HEAP32[$138>>2] = 2;
 } else {
  $139 = HEAP32[$cfg>>2]|0;
  $140 = (($139) + 164|0);
  $141 = HEAP32[$140>>2]|0;
  $142 = ($141|0)==(1);
  if ($142) {
   HEAPF32[$sum_pe_MS>>2] = 0.0;
   HEAPF32[$sum_pe_LR>>2] = 0.0;
   HEAP32[$gr>>2] = 0;
   while(1) {
    $143 = HEAP32[$gr>>2]|0;
    $144 = HEAP32[$cfg>>2]|0;
    $145 = (($144) + 60|0);
    $146 = HEAP32[$145>>2]|0;
    $147 = ($143|0)<($146|0);
    if (!($147)) {
     break;
    }
    HEAP32[$ch>>2] = 0;
    while(1) {
     $148 = HEAP32[$ch>>2]|0;
     $149 = HEAP32[$cfg>>2]|0;
     $150 = (($149) + 56|0);
     $151 = HEAP32[$150>>2]|0;
     $152 = ($148|0)<($151|0);
     if (!($152)) {
      break;
     }
     $153 = HEAP32[$ch>>2]|0;
     $154 = HEAP32[$gr>>2]|0;
     $155 = (($pe_MS) + ($154<<3)|0);
     $156 = (($155) + ($153<<2)|0);
     $157 = +HEAPF32[$156>>2];
     $158 = +HEAPF32[$sum_pe_MS>>2];
     $159 = $158 + $157;
     HEAPF32[$sum_pe_MS>>2] = $159;
     $160 = HEAP32[$ch>>2]|0;
     $161 = HEAP32[$gr>>2]|0;
     $162 = (($pe) + ($161<<3)|0);
     $163 = (($162) + ($160<<2)|0);
     $164 = +HEAPF32[$163>>2];
     $165 = +HEAPF32[$sum_pe_LR>>2];
     $166 = $165 + $164;
     HEAPF32[$sum_pe_LR>>2] = $166;
     $167 = HEAP32[$ch>>2]|0;
     $168 = (($167) + 1)|0;
     HEAP32[$ch>>2] = $168;
    }
    $169 = HEAP32[$gr>>2]|0;
    $170 = (($169) + 1)|0;
    HEAP32[$gr>>2] = $170;
   }
   $171 = +HEAPF32[$sum_pe_MS>>2];
   $172 = $171;
   $173 = +HEAPF32[$sum_pe_LR>>2];
   $174 = $173;
   $175 = 1.0 * $174;
   $176 = $172 <= $175;
   if ($176) {
    $177 = HEAP32[$1>>2]|0;
    $178 = (($177) + 304|0);
    HEAP32[$gi0>>2] = $178;
    $179 = HEAP32[$cfg>>2]|0;
    $180 = (($179) + 60|0);
    $181 = HEAP32[$180>>2]|0;
    $182 = (($181) - 1)|0;
    $183 = HEAP32[$1>>2]|0;
    $184 = (($183) + 304|0);
    $185 = (($184) + (($182*10504)|0)|0);
    HEAP32[$gi1>>2] = $185;
    $186 = HEAP32[$gi0>>2]|0;
    $187 = (($186) + 4788|0);
    $188 = HEAP32[$187>>2]|0;
    $189 = HEAP32[$gi0>>2]|0;
    $190 = (($189) + 5252|0);
    $191 = (($190) + 4788|0);
    $192 = HEAP32[$191>>2]|0;
    $193 = ($188|0)==($192|0);
    if ($193) {
     $194 = HEAP32[$gi1>>2]|0;
     $195 = (($194) + 4788|0);
     $196 = HEAP32[$195>>2]|0;
     $197 = HEAP32[$gi1>>2]|0;
     $198 = (($197) + 5252|0);
     $199 = (($198) + 4788|0);
     $200 = HEAP32[$199>>2]|0;
     $201 = ($196|0)==($200|0);
     if ($201) {
      $202 = HEAP32[$1>>2]|0;
      $203 = (($202) + 84040|0);
      $204 = (($203) + 716|0);
      HEAP32[$204>>2] = 2;
     }
    }
   }
  }
 }
 $205 = HEAP32[$1>>2]|0;
 $206 = (($205) + 84040|0);
 $207 = (($206) + 716|0);
 $208 = HEAP32[$207>>2]|0;
 $209 = ($208|0)==(2);
 if ($209) {
  HEAP32[$masking>>2] = $masking_MS;
  HEAP32[$pe_use>>2] = $pe_MS;
 } else {
  HEAP32[$masking>>2] = $masking_LR;
  HEAP32[$pe_use>>2] = $pe;
 }
 $210 = HEAP32[$cfg>>2]|0;
 $211 = (($210) + 124|0);
 $212 = HEAP32[$211>>2]|0;
 $213 = ($212|0)!=(0);
 L47: do {
  if ($213) {
   $214 = HEAP32[$1>>2]|0;
   $215 = (($214) + 85804|0);
   $216 = HEAP32[$215>>2]|0;
   $217 = ($216|0)!=(0|0);
   if ($217) {
    HEAP32[$gr>>2] = 0;
    while(1) {
     $218 = HEAP32[$gr>>2]|0;
     $219 = HEAP32[$cfg>>2]|0;
     $220 = (($219) + 60|0);
     $221 = HEAP32[$220>>2]|0;
     $222 = ($218|0)<($221|0);
     if (!($222)) {
      break L47;
     }
     HEAP32[$ch>>2] = 0;
     while(1) {
      $223 = HEAP32[$ch>>2]|0;
      $224 = HEAP32[$cfg>>2]|0;
      $225 = (($224) + 56|0);
      $226 = HEAP32[$225>>2]|0;
      $227 = ($223|0)<($226|0);
      $228 = HEAP32[$gr>>2]|0;
      if (!($227)) {
       break;
      }
      $229 = HEAP32[$1>>2]|0;
      $230 = (($229) + 85804|0);
      $231 = HEAP32[$230>>2]|0;
      $232 = (($231) + 90904|0);
      $233 = (($232) + ($228<<3)|0);
      HEAPF64[$233>>3] = 0.0;
      $234 = HEAP32[$gr>>2]|0;
      $235 = (($ms_ener_ratio) + ($234<<2)|0);
      $236 = +HEAPF32[$235>>2];
      $237 = $236;
      $238 = HEAP32[$gr>>2]|0;
      $239 = HEAP32[$1>>2]|0;
      $240 = (($239) + 85804|0);
      $241 = HEAP32[$240>>2]|0;
      $242 = (($241) + 90920|0);
      $243 = (($242) + ($238<<3)|0);
      HEAPF64[$243>>3] = $237;
      $244 = HEAP32[$ch>>2]|0;
      $245 = HEAP32[$gr>>2]|0;
      $246 = HEAP32[$1>>2]|0;
      $247 = (($246) + 304|0);
      $248 = (($247) + (($245*10504)|0)|0);
      $249 = (($248) + (($244*5252)|0)|0);
      $250 = (($249) + 4788|0);
      $251 = HEAP32[$250>>2]|0;
      $252 = HEAP32[$ch>>2]|0;
      $253 = HEAP32[$gr>>2]|0;
      $254 = HEAP32[$1>>2]|0;
      $255 = (($254) + 85804|0);
      $256 = HEAP32[$255>>2]|0;
      $257 = (($256) + 203288|0);
      $258 = (($257) + ($253<<3)|0);
      $259 = (($258) + ($252<<2)|0);
      HEAP32[$259>>2] = $251;
      $260 = HEAP32[$ch>>2]|0;
      $261 = HEAP32[$gr>>2]|0;
      $262 = HEAP32[$pe_use>>2]|0;
      $263 = (($262) + ($261<<3)|0);
      $264 = (($263) + ($260<<2)|0);
      $265 = +HEAPF32[$264>>2];
      $266 = $265;
      $267 = HEAP32[$ch>>2]|0;
      $268 = HEAP32[$gr>>2]|0;
      $269 = HEAP32[$1>>2]|0;
      $270 = (($269) + 85804|0);
      $271 = HEAP32[$270>>2]|0;
      $272 = (($271) + 189240|0);
      $273 = (($272) + ($268<<5)|0);
      $274 = (($273) + ($267<<3)|0);
      HEAPF64[$274>>3] = $266;
      $275 = HEAP32[$ch>>2]|0;
      $276 = HEAP32[$gr>>2]|0;
      $277 = HEAP32[$1>>2]|0;
      $278 = (($277) + 85804|0);
      $279 = HEAP32[$278>>2]|0;
      $280 = (($279) + 54040|0);
      $281 = (($280) + (($276*9216)|0)|0);
      $282 = (($281) + (($275*4608)|0)|0);
      $283 = HEAP32[$ch>>2]|0;
      $284 = HEAP32[$gr>>2]|0;
      $285 = HEAP32[$1>>2]|0;
      $286 = (($285) + 304|0);
      $287 = (($286) + (($284*10504)|0)|0);
      $288 = (($287) + (($283*5252)|0)|0);
      _memcpy(($282|0),($288|0),2304)|0;
      $289 = HEAP32[$1>>2]|0;
      $290 = (($289) + 84040|0);
      $291 = (($290) + 716|0);
      $292 = HEAP32[$291>>2]|0;
      $293 = ($292|0)==(2);
      if ($293) {
       $294 = HEAP32[$ch>>2]|0;
       $295 = (($294) + 2)|0;
       $296 = HEAP32[$gr>>2]|0;
       $297 = HEAP32[$1>>2]|0;
       $298 = (($297) + 85804|0);
       $299 = HEAP32[$298>>2]|0;
       $300 = (($299) + 197144|0);
       $301 = (($300) + ($296<<5)|0);
       $302 = (($301) + ($295<<3)|0);
       $303 = +HEAPF64[$302>>3];
       $304 = HEAP32[$ch>>2]|0;
       $305 = HEAP32[$gr>>2]|0;
       $306 = HEAP32[$1>>2]|0;
       $307 = (($306) + 85804|0);
       $308 = HEAP32[$307>>2]|0;
       $309 = (($308) + 197144|0);
       $310 = (($309) + ($305<<5)|0);
       $311 = (($310) + ($304<<3)|0);
       HEAPF64[$311>>3] = $303;
       $312 = HEAP32[$ch>>2]|0;
       $313 = HEAP32[$gr>>2]|0;
       $314 = HEAP32[$1>>2]|0;
       $315 = (($314) + 85804|0);
       $316 = HEAP32[$315>>2]|0;
       $317 = (($316) + 123704|0);
       $318 = (($317) + ($313<<15)|0);
       $319 = (($318) + ($312<<13)|0);
       $320 = HEAP32[$ch>>2]|0;
       $321 = (($320) + 2)|0;
       $322 = HEAP32[$gr>>2]|0;
       $323 = HEAP32[$1>>2]|0;
       $324 = (($323) + 85804|0);
       $325 = HEAP32[$324>>2]|0;
       $326 = (($325) + 123704|0);
       $327 = (($326) + ($322<<15)|0);
       $328 = (($327) + ($321<<13)|0);
       _memcpy(($319|0),($328|0),8192)|0;
      }
      $329 = HEAP32[$ch>>2]|0;
      $330 = (($329) + 1)|0;
      HEAP32[$ch>>2] = $330;
     }
     $331 = (($228) + 1)|0;
     HEAP32[$gr>>2] = $331;
    }
   }
  }
 } while(0);
 $332 = HEAP32[$cfg>>2]|0;
 $333 = (($332) + 88|0);
 $334 = HEAP32[$333>>2]|0;
 $335 = ($334|0)==(0);
 if ($335) {
  label = 47;
 } else {
  $336 = HEAP32[$cfg>>2]|0;
  $337 = (($336) + 88|0);
  $338 = HEAP32[$337>>2]|0;
  $339 = ($338|0)==(3);
  if ($339) {
   label = 47;
  }
 }
 L63: do {
  if ((label|0) == 47) {
   HEAP32[$i>>2] = 0;
   while(1) {
    $340 = HEAP32[$i>>2]|0;
    $341 = ($340|0)<(18);
    if (!($341)) {
     break;
    }
    $342 = HEAP32[$i>>2]|0;
    $343 = (($342) + 1)|0;
    $344 = HEAP32[$1>>2]|0;
    $345 = (($344) + 27824|0);
    $346 = (($345) + 11932|0);
    $347 = (($346) + ($343<<2)|0);
    $348 = +HEAPF32[$347>>2];
    $349 = HEAP32[$i>>2]|0;
    $350 = HEAP32[$1>>2]|0;
    $351 = (($350) + 27824|0);
    $352 = (($351) + 11932|0);
    $353 = (($352) + ($349<<2)|0);
    HEAPF32[$353>>2] = $348;
    $354 = HEAP32[$i>>2]|0;
    $355 = (($354) + 1)|0;
    HEAP32[$i>>2] = $355;
   }
   HEAPF32[$f>>2] = 0.0;
   HEAP32[$gr>>2] = 0;
   while(1) {
    $356 = HEAP32[$gr>>2]|0;
    $357 = HEAP32[$cfg>>2]|0;
    $358 = (($357) + 60|0);
    $359 = HEAP32[$358>>2]|0;
    $360 = ($356|0)<($359|0);
    if (!($360)) {
     break;
    }
    HEAP32[$ch>>2] = 0;
    while(1) {
     $361 = HEAP32[$ch>>2]|0;
     $362 = HEAP32[$cfg>>2]|0;
     $363 = (($362) + 56|0);
     $364 = HEAP32[$363>>2]|0;
     $365 = ($361|0)<($364|0);
     if (!($365)) {
      break;
     }
     $366 = HEAP32[$ch>>2]|0;
     $367 = HEAP32[$gr>>2]|0;
     $368 = HEAP32[$pe_use>>2]|0;
     $369 = (($368) + ($367<<3)|0);
     $370 = (($369) + ($366<<2)|0);
     $371 = +HEAPF32[$370>>2];
     $372 = +HEAPF32[$f>>2];
     $373 = $372 + $371;
     HEAPF32[$f>>2] = $373;
     $374 = HEAP32[$ch>>2]|0;
     $375 = (($374) + 1)|0;
     HEAP32[$ch>>2] = $375;
    }
    $376 = HEAP32[$gr>>2]|0;
    $377 = (($376) + 1)|0;
    HEAP32[$gr>>2] = $377;
   }
   $378 = +HEAPF32[$f>>2];
   $379 = HEAP32[$1>>2]|0;
   $380 = (($379) + 27824|0);
   $381 = (($380) + 11932|0);
   $382 = (($381) + 72|0);
   HEAPF32[$382>>2] = $378;
   $383 = HEAP32[$1>>2]|0;
   $384 = (($383) + 27824|0);
   $385 = (($384) + 11932|0);
   $386 = (($385) + 36|0);
   $387 = +HEAPF32[$386>>2];
   HEAPF32[$f>>2] = $387;
   HEAP32[$i>>2] = 0;
   while(1) {
    $388 = HEAP32[$i>>2]|0;
    $389 = ($388|0)<(9);
    if (!($389)) {
     break;
    }
    $390 = HEAP32[$i>>2]|0;
    $391 = HEAP32[$1>>2]|0;
    $392 = (($391) + 27824|0);
    $393 = (($392) + 11932|0);
    $394 = (($393) + ($390<<2)|0);
    $395 = +HEAPF32[$394>>2];
    $396 = HEAP32[$i>>2]|0;
    $397 = (18 - ($396))|0;
    $398 = HEAP32[$1>>2]|0;
    $399 = (($398) + 27824|0);
    $400 = (($399) + 11932|0);
    $401 = (($400) + ($397<<2)|0);
    $402 = +HEAPF32[$401>>2];
    $403 = $395 + $402;
    $404 = HEAP32[$i>>2]|0;
    $405 = (664 + ($404<<2)|0);
    $406 = +HEAPF32[$405>>2];
    $407 = $403 * $406;
    $408 = +HEAPF32[$f>>2];
    $409 = $408 + $407;
    HEAPF32[$f>>2] = $409;
    $410 = HEAP32[$i>>2]|0;
    $411 = (($410) + 1)|0;
    HEAP32[$i>>2] = $411;
   }
   $412 = HEAP32[$cfg>>2]|0;
   $413 = (($412) + 60|0);
   $414 = HEAP32[$413>>2]|0;
   $415 = ($414*3350)|0;
   $416 = HEAP32[$cfg>>2]|0;
   $417 = (($416) + 56|0);
   $418 = HEAP32[$417>>2]|0;
   $419 = Math_imul($415, $418)|0;
   $420 = (+($419|0));
   $421 = +HEAPF32[$f>>2];
   $422 = $420 / $421;
   HEAPF32[$f>>2] = $422;
   HEAP32[$gr>>2] = 0;
   while(1) {
    $423 = HEAP32[$gr>>2]|0;
    $424 = HEAP32[$cfg>>2]|0;
    $425 = (($424) + 60|0);
    $426 = HEAP32[$425>>2]|0;
    $427 = ($423|0)<($426|0);
    if (!($427)) {
     break L63;
    }
    HEAP32[$ch>>2] = 0;
    while(1) {
     $428 = HEAP32[$ch>>2]|0;
     $429 = HEAP32[$cfg>>2]|0;
     $430 = (($429) + 56|0);
     $431 = HEAP32[$430>>2]|0;
     $432 = ($428|0)<($431|0);
     if (!($432)) {
      break;
     }
     $433 = +HEAPF32[$f>>2];
     $434 = HEAP32[$ch>>2]|0;
     $435 = HEAP32[$gr>>2]|0;
     $436 = HEAP32[$pe_use>>2]|0;
     $437 = (($436) + ($435<<3)|0);
     $438 = (($437) + ($434<<2)|0);
     $439 = +HEAPF32[$438>>2];
     $440 = $439 * $433;
     HEAPF32[$438>>2] = $440;
     $441 = HEAP32[$ch>>2]|0;
     $442 = (($441) + 1)|0;
     HEAP32[$ch>>2] = $442;
    }
    $443 = HEAP32[$gr>>2]|0;
    $444 = (($443) + 1)|0;
    HEAP32[$gr>>2] = $444;
   }
  }
 } while(0);
 $445 = HEAP32[$1>>2]|0;
 $446 = (($445) + 85812|0);
 $447 = HEAP32[$446>>2]|0;
 $448 = HEAP32[$1>>2]|0;
 $449 = HEAP32[$pe_use>>2]|0;
 $450 = HEAP32[$masking>>2]|0;
 FUNCTION_TABLE_viiii[$447 & 7]($448,$449,$ms_ener_ratio,$450);
 $451 = HEAP32[$1>>2]|0;
 (_format_bitstream($451)|0);
 $452 = HEAP32[$1>>2]|0;
 $453 = HEAP32[$4>>2]|0;
 $454 = HEAP32[$5>>2]|0;
 $455 = (_copy_buffer($452,$453,$454,1)|0);
 HEAP32[$mp3count>>2] = $455;
 $456 = HEAP32[$cfg>>2]|0;
 $457 = (($456) + 140|0);
 $458 = HEAP32[$457>>2]|0;
 $459 = ($458|0)!=(0);
 if ($459) {
  $460 = HEAP32[$1>>2]|0;
  _AddVbrFrame($460);
 }
 $461 = HEAP32[$cfg>>2]|0;
 $462 = (($461) + 124|0);
 $463 = HEAP32[$462>>2]|0;
 $464 = ($463|0)!=(0);
 if ($464) {
  $465 = HEAP32[$1>>2]|0;
  $466 = (($465) + 85804|0);
  $467 = HEAP32[$466>>2]|0;
  $468 = ($467|0)!=(0|0);
  if ($468) {
   $469 = HEAP32[$cfg>>2]|0;
   $470 = (($469) + 60|0);
   $471 = HEAP32[$470>>2]|0;
   $472 = ($471*576)|0;
   HEAP32[$framesize>>2] = $472;
   HEAP32[$ch>>2] = 0;
   while(1) {
    $473 = HEAP32[$ch>>2]|0;
    $474 = HEAP32[$cfg>>2]|0;
    $475 = (($474) + 56|0);
    $476 = HEAP32[$475>>2]|0;
    $477 = ($473|0)<($476|0);
    if (!($477)) {
     break;
    }
    HEAP32[$j>>2] = 0;
    while(1) {
     $478 = HEAP32[$j>>2]|0;
     $479 = ($478|0)<(272);
     if (!($479)) {
      break;
     }
     $480 = HEAP32[$j>>2]|0;
     $481 = HEAP32[$framesize>>2]|0;
     $482 = (($480) + ($481))|0;
     $483 = HEAP32[$ch>>2]|0;
     $484 = HEAP32[$1>>2]|0;
     $485 = (($484) + 85804|0);
     $486 = HEAP32[$485>>2]|0;
     $487 = (($486) + 24|0);
     $488 = (($487) + (($483*12800)|0)|0);
     $489 = (($488) + ($482<<3)|0);
     $490 = +HEAPF64[$489>>3];
     $491 = HEAP32[$j>>2]|0;
     $492 = HEAP32[$ch>>2]|0;
     $493 = HEAP32[$1>>2]|0;
     $494 = (($493) + 85804|0);
     $495 = HEAP32[$494>>2]|0;
     $496 = (($495) + 24|0);
     $497 = (($496) + (($492*12800)|0)|0);
     $498 = (($497) + ($491<<3)|0);
     HEAPF64[$498>>3] = $490;
     $499 = HEAP32[$j>>2]|0;
     $500 = (($499) + 1)|0;
     HEAP32[$j>>2] = $500;
    }
    HEAP32[$j>>2] = 272;
    while(1) {
     $501 = HEAP32[$j>>2]|0;
     $502 = ($501|0)<(1600);
     if (!($502)) {
      break;
     }
     $503 = HEAP32[$j>>2]|0;
     $504 = (($503) - 272)|0;
     $505 = HEAP32[$ch>>2]|0;
     $506 = (($inbuf) + ($505<<2)|0);
     $507 = HEAP32[$506>>2]|0;
     $508 = (($507) + ($504<<2)|0);
     $509 = +HEAPF32[$508>>2];
     $510 = $509;
     $511 = HEAP32[$j>>2]|0;
     $512 = HEAP32[$ch>>2]|0;
     $513 = HEAP32[$1>>2]|0;
     $514 = (($513) + 85804|0);
     $515 = HEAP32[$514>>2]|0;
     $516 = (($515) + 24|0);
     $517 = (($516) + (($512*12800)|0)|0);
     $518 = (($517) + ($511<<3)|0);
     HEAPF64[$518>>3] = $510;
     $519 = HEAP32[$j>>2]|0;
     $520 = (($519) + 1)|0;
     HEAP32[$j>>2] = $520;
    }
    $521 = HEAP32[$ch>>2]|0;
    $522 = (($521) + 1)|0;
    HEAP32[$ch>>2] = $522;
   }
   $523 = HEAP32[$1>>2]|0;
   $524 = (($523) + 84768|0);
   $525 = (($524) + 140|0);
   HEAPF32[$525>>2] = 1.0;
   $526 = HEAP32[$1>>2]|0;
   $527 = HEAP32[$masking>>2]|0;
   _set_frame_pinfo($526,$527);
  }
 }
 $528 = HEAP32[$1>>2]|0;
 $529 = (($528) + 84040|0);
 $530 = (($529) + 708|0);
 $531 = HEAP32[$530>>2]|0;
 $532 = (($531) + 1)|0;
 HEAP32[$530>>2] = $532;
 $533 = HEAP32[$1>>2]|0;
 _updateStats($533);
 $534 = HEAP32[$mp3count>>2]|0;
 HEAP32[$0>>2] = $534;
 $535 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($535|0);
}
function _lame_encode_frame_init($gfc,$inbuf) {
 $gfc = $gfc|0;
 $inbuf = $inbuf|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0.0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0.0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $8 = 0, $9 = 0, $cfg = 0, $ch = 0;
 var $framesize = 0, $gr = 0, $i = 0, $j = 0, $primebuff0 = 0, $primebuff1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16160|0;
 $0 = sp + 16144|0;
 $1 = sp + 16140|0;
 $cfg = sp + 16136|0;
 $ch = sp + 16132|0;
 $gr = sp + 16128|0;
 $primebuff0 = sp + 8072|0;
 $primebuff1 = sp + 16|0;
 $framesize = sp + 8|0;
 $i = sp + 4|0;
 $j = sp;
 HEAP32[$0>>2] = $gfc;
 HEAP32[$1>>2] = $inbuf;
 $2 = HEAP32[$0>>2]|0;
 $3 = (($2) + 16|0);
 HEAP32[$cfg>>2] = $3;
 $4 = HEAP32[$0>>2]|0;
 $5 = (($4) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)==(0);
 if (!($7)) {
  STACKTOP = sp;return;
 }
 $8 = HEAP32[$cfg>>2]|0;
 $9 = (($8) + 60|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10*576)|0;
 HEAP32[$framesize>>2] = $11;
 $12 = HEAP32[$0>>2]|0;
 $13 = (($12) + 4|0);
 HEAP32[$13>>2] = 1;
 _memset(($primebuff0|0),0,8056)|0;
 _memset(($primebuff1|0),0,8056)|0;
 HEAP32[$i>>2] = 0;
 HEAP32[$j>>2] = 0;
 while(1) {
  $14 = HEAP32[$i>>2]|0;
  $15 = HEAP32[$cfg>>2]|0;
  $16 = (($15) + 60|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = (1 + ($17))|0;
  $19 = ($18*576)|0;
  $20 = (286 + ($19))|0;
  $21 = ($14|0)<($20|0);
  if (!($21)) {
   break;
  }
  $22 = HEAP32[$i>>2]|0;
  $23 = HEAP32[$framesize>>2]|0;
  $24 = ($22|0)<($23|0);
  if ($24) {
   $25 = HEAP32[$i>>2]|0;
   $26 = (($primebuff0) + ($25<<2)|0);
   HEAPF32[$26>>2] = 0.0;
   $27 = HEAP32[$cfg>>2]|0;
   $28 = (($27) + 56|0);
   $29 = HEAP32[$28>>2]|0;
   $30 = ($29|0)==(2);
   if ($30) {
    $31 = HEAP32[$i>>2]|0;
    $32 = (($primebuff1) + ($31<<2)|0);
    HEAPF32[$32>>2] = 0.0;
   }
  } else {
   $33 = HEAP32[$j>>2]|0;
   $34 = HEAP32[$1>>2]|0;
   $35 = HEAP32[$34>>2]|0;
   $36 = (($35) + ($33<<2)|0);
   $37 = +HEAPF32[$36>>2];
   $38 = HEAP32[$i>>2]|0;
   $39 = (($primebuff0) + ($38<<2)|0);
   HEAPF32[$39>>2] = $37;
   $40 = HEAP32[$cfg>>2]|0;
   $41 = (($40) + 56|0);
   $42 = HEAP32[$41>>2]|0;
   $43 = ($42|0)==(2);
   if ($43) {
    $44 = HEAP32[$j>>2]|0;
    $45 = HEAP32[$1>>2]|0;
    $46 = (($45) + 4|0);
    $47 = HEAP32[$46>>2]|0;
    $48 = (($47) + ($44<<2)|0);
    $49 = +HEAPF32[$48>>2];
    $50 = HEAP32[$i>>2]|0;
    $51 = (($primebuff1) + ($50<<2)|0);
    HEAPF32[$51>>2] = $49;
   }
   $52 = HEAP32[$j>>2]|0;
   $53 = (($52) + 1)|0;
   HEAP32[$j>>2] = $53;
  }
  $54 = HEAP32[$i>>2]|0;
  $55 = (($54) + 1)|0;
  HEAP32[$i>>2] = $55;
 }
 HEAP32[$gr>>2] = 0;
 while(1) {
  $56 = HEAP32[$gr>>2]|0;
  $57 = HEAP32[$cfg>>2]|0;
  $58 = (($57) + 60|0);
  $59 = HEAP32[$58>>2]|0;
  $60 = ($56|0)<($59|0);
  if (!($60)) {
   break;
  }
  HEAP32[$ch>>2] = 0;
  while(1) {
   $61 = HEAP32[$ch>>2]|0;
   $62 = HEAP32[$cfg>>2]|0;
   $63 = (($62) + 56|0);
   $64 = HEAP32[$63>>2]|0;
   $65 = ($61|0)<($64|0);
   if (!($65)) {
    break;
   }
   $66 = HEAP32[$ch>>2]|0;
   $67 = HEAP32[$gr>>2]|0;
   $68 = HEAP32[$0>>2]|0;
   $69 = (($68) + 304|0);
   $70 = (($69) + (($67*10504)|0)|0);
   $71 = (($70) + (($66*5252)|0)|0);
   $72 = (($71) + 4788|0);
   HEAP32[$72>>2] = 2;
   $73 = HEAP32[$ch>>2]|0;
   $74 = (($73) + 1)|0;
   HEAP32[$ch>>2] = $74;
  }
  $75 = HEAP32[$gr>>2]|0;
  $76 = (($75) + 1)|0;
  HEAP32[$gr>>2] = $76;
 }
 $77 = HEAP32[$0>>2]|0;
 _mdct_sub48($77,$primebuff0,$primebuff1);
 STACKTOP = sp;return;
}
function _adjust_ATH($gfc) {
 $gfc = $gfc|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0.0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0.0, $106 = 0.0, $107 = 0, $108 = 0.0, $109 = 0.0, $11 = 0, $110 = 0.0, $111 = 0.0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0.0, $117 = 0.0, $118 = 0.0, $119 = 0.0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0.0, $125 = 0.0, $126 = 0, $127 = 0.0, $128 = 0, $129 = 0, $13 = 0.0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0.0, $137 = 0.0, $138 = 0, $139 = 0.0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0.0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0.0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0.0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0.0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $17 = 0.0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0;
 var $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0.0, $46 = 0.0, $47 = 0, $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0.0, $6 = 0, $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0.0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0.0, $7 = 0, $70 = 0.0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0.0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0.0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0.0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0.0, $97 = 0.0, $98 = 0.0, $99 = 0.0, $adj_lim_new = 0, $cfg = 0, $gr2_max = 0, $max_pow = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = sp + 16|0;
 $cfg = sp + 12|0;
 $gr2_max = sp + 8|0;
 $max_pow = sp + 4|0;
 $adj_lim_new = sp;
 HEAP32[$0>>2] = $gfc;
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 16|0);
 HEAP32[$cfg>>2] = $2;
 $3 = HEAP32[$0>>2]|0;
 $4 = (($3) + 85796|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)==(0);
 $8 = HEAP32[$0>>2]|0;
 if ($7) {
  $9 = (($8) + 85796|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = (($10) + 8|0);
  HEAPF32[$11>>2] = 1.0;
  STACKTOP = sp;return;
 }
 $12 = (($8) + 27804|0);
 $13 = +HEAPF32[$12>>2];
 HEAPF32[$max_pow>>2] = $13;
 $14 = HEAP32[$0>>2]|0;
 $15 = (($14) + 27804|0);
 $16 = (($15) + 8|0);
 $17 = +HEAPF32[$16>>2];
 HEAPF32[$gr2_max>>2] = $17;
 $18 = HEAP32[$cfg>>2]|0;
 $19 = (($18) + 56|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = ($20|0)==(2);
 if ($21) {
  $22 = HEAP32[$0>>2]|0;
  $23 = (($22) + 27804|0);
  $24 = (($23) + 4|0);
  $25 = +HEAPF32[$24>>2];
  $26 = +HEAPF32[$max_pow>>2];
  $27 = $26 + $25;
  HEAPF32[$max_pow>>2] = $27;
  $28 = HEAP32[$0>>2]|0;
  $29 = (($28) + 27804|0);
  $30 = (($29) + 8|0);
  $31 = (($30) + 4|0);
  $32 = +HEAPF32[$31>>2];
  $33 = +HEAPF32[$gr2_max>>2];
  $34 = $33 + $32;
  HEAPF32[$gr2_max>>2] = $34;
 } else {
  $35 = +HEAPF32[$max_pow>>2];
  $36 = +HEAPF32[$max_pow>>2];
  $37 = $36 + $35;
  HEAPF32[$max_pow>>2] = $37;
  $38 = +HEAPF32[$gr2_max>>2];
  $39 = +HEAPF32[$gr2_max>>2];
  $40 = $39 + $38;
  HEAPF32[$gr2_max>>2] = $40;
 }
 $41 = HEAP32[$cfg>>2]|0;
 $42 = (($41) + 60|0);
 $43 = HEAP32[$42>>2]|0;
 $44 = ($43|0)==(2);
 if ($44) {
  $45 = +HEAPF32[$max_pow>>2];
  $46 = +HEAPF32[$gr2_max>>2];
  $47 = $45 > $46;
  $48 = +HEAPF32[$max_pow>>2];
  $49 = +HEAPF32[$gr2_max>>2];
  $50 = $47 ? $48 : $49;
  HEAPF32[$max_pow>>2] = $50;
 }
 $51 = +HEAPF32[$max_pow>>2];
 $52 = $51;
 $53 = $52 * 0.5;
 $54 = $53;
 HEAPF32[$max_pow>>2] = $54;
 $55 = HEAP32[$0>>2]|0;
 $56 = (($55) + 85796|0);
 $57 = HEAP32[$56>>2]|0;
 $58 = (($57) + 4|0);
 $59 = +HEAPF32[$58>>2];
 $60 = +HEAPF32[$max_pow>>2];
 $61 = $60 * $59;
 HEAPF32[$max_pow>>2] = $61;
 $62 = +HEAPF32[$max_pow>>2];
 $63 = $62;
 $64 = $63 > 0.03125;
 if ($64) {
  $65 = HEAP32[$0>>2]|0;
  $66 = (($65) + 85796|0);
  $67 = HEAP32[$66>>2]|0;
  $68 = (($67) + 8|0);
  $69 = +HEAPF32[$68>>2];
  $70 = $69;
  $71 = $70 >= 1.0;
  $72 = HEAP32[$0>>2]|0;
  $73 = (($72) + 85796|0);
  $74 = HEAP32[$73>>2]|0;
  $75 = (($74) + 8|0);
  if ($71) {
   HEAPF32[$75>>2] = 1.0;
  } else {
   $76 = +HEAPF32[$75>>2];
   $77 = HEAP32[$0>>2]|0;
   $78 = (($77) + 85796|0);
   $79 = HEAP32[$78>>2]|0;
   $80 = (($79) + 12|0);
   $81 = +HEAPF32[$80>>2];
   $82 = $76 < $81;
   if ($82) {
    $83 = HEAP32[$0>>2]|0;
    $84 = (($83) + 85796|0);
    $85 = HEAP32[$84>>2]|0;
    $86 = (($85) + 12|0);
    $87 = +HEAPF32[$86>>2];
    $88 = HEAP32[$0>>2]|0;
    $89 = (($88) + 85796|0);
    $90 = HEAP32[$89>>2]|0;
    $91 = (($90) + 8|0);
    HEAPF32[$91>>2] = $87;
   }
  }
  $92 = HEAP32[$0>>2]|0;
  $93 = (($92) + 85796|0);
  $94 = HEAP32[$93>>2]|0;
  $95 = (($94) + 12|0);
  HEAPF32[$95>>2] = 1.0;
  STACKTOP = sp;return;
 }
 $96 = +HEAPF32[$max_pow>>2];
 $97 = $96;
 $98 = 31.9800000000000004263 * $97;
 $99 = $98 + 6.2500000000000001301E-4;
 $100 = $99;
 HEAPF32[$adj_lim_new>>2] = $100;
 $101 = HEAP32[$0>>2]|0;
 $102 = (($101) + 85796|0);
 $103 = HEAP32[$102>>2]|0;
 $104 = (($103) + 8|0);
 $105 = +HEAPF32[$104>>2];
 $106 = +HEAPF32[$adj_lim_new>>2];
 $107 = $105 >= $106;
 do {
  if ($107) {
   $108 = +HEAPF32[$adj_lim_new>>2];
   $109 = $108;
   $110 = $109 * 0.0749999999999999972244;
   $111 = $110 + 0.925000000000000044408;
   $112 = HEAP32[$0>>2]|0;
   $113 = (($112) + 85796|0);
   $114 = HEAP32[$113>>2]|0;
   $115 = (($114) + 8|0);
   $116 = +HEAPF32[$115>>2];
   $117 = $116;
   $118 = $117 * $111;
   $119 = $118;
   HEAPF32[$115>>2] = $119;
   $120 = HEAP32[$0>>2]|0;
   $121 = (($120) + 85796|0);
   $122 = HEAP32[$121>>2]|0;
   $123 = (($122) + 8|0);
   $124 = +HEAPF32[$123>>2];
   $125 = +HEAPF32[$adj_lim_new>>2];
   $126 = $124 < $125;
   if ($126) {
    $127 = +HEAPF32[$adj_lim_new>>2];
    $128 = HEAP32[$0>>2]|0;
    $129 = (($128) + 85796|0);
    $130 = HEAP32[$129>>2]|0;
    $131 = (($130) + 8|0);
    HEAPF32[$131>>2] = $127;
   }
  } else {
   $132 = HEAP32[$0>>2]|0;
   $133 = (($132) + 85796|0);
   $134 = HEAP32[$133>>2]|0;
   $135 = (($134) + 12|0);
   $136 = +HEAPF32[$135>>2];
   $137 = +HEAPF32[$adj_lim_new>>2];
   $138 = $136 >= $137;
   if ($138) {
    $139 = +HEAPF32[$adj_lim_new>>2];
    $140 = HEAP32[$0>>2]|0;
    $141 = (($140) + 85796|0);
    $142 = HEAP32[$141>>2]|0;
    $143 = (($142) + 8|0);
    HEAPF32[$143>>2] = $139;
    break;
   }
   $144 = HEAP32[$0>>2]|0;
   $145 = (($144) + 85796|0);
   $146 = HEAP32[$145>>2]|0;
   $147 = (($146) + 8|0);
   $148 = +HEAPF32[$147>>2];
   $149 = HEAP32[$0>>2]|0;
   $150 = (($149) + 85796|0);
   $151 = HEAP32[$150>>2]|0;
   $152 = (($151) + 12|0);
   $153 = +HEAPF32[$152>>2];
   $154 = $148 < $153;
   if ($154) {
    $155 = HEAP32[$0>>2]|0;
    $156 = (($155) + 85796|0);
    $157 = HEAP32[$156>>2]|0;
    $158 = (($157) + 12|0);
    $159 = +HEAPF32[$158>>2];
    $160 = HEAP32[$0>>2]|0;
    $161 = (($160) + 85796|0);
    $162 = HEAP32[$161>>2]|0;
    $163 = (($162) + 8|0);
    HEAPF32[$163>>2] = $159;
   }
  }
 } while(0);
 $164 = +HEAPF32[$adj_lim_new>>2];
 $165 = HEAP32[$0>>2]|0;
 $166 = (($165) + 85796|0);
 $167 = HEAP32[$166>>2]|0;
 $168 = (($167) + 12|0);
 HEAPF32[$168>>2] = $164;
 STACKTOP = sp;return;
}
function _updateStats($gfc) {
 $gfc = $gfc|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $bt = 0, $cfg = 0, $ch = 0, $eov = 0, $gr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = sp + 20|0;
 $cfg = sp + 16|0;
 $eov = sp + 12|0;
 $gr = sp + 8|0;
 $ch = sp + 4|0;
 $bt = sp;
 HEAP32[$0>>2] = $gfc;
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 16|0);
 HEAP32[$cfg>>2] = $2;
 $3 = HEAP32[$0>>2]|0;
 $4 = (($3) + 84040|0);
 HEAP32[$eov>>2] = $4;
 $5 = HEAP32[$eov>>2]|0;
 $6 = (($5) + 704|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = HEAP32[$eov>>2]|0;
 $9 = (($8) + (($7*20)|0)|0);
 $10 = (($9) + 16|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (($11) + 1)|0;
 HEAP32[$10>>2] = $12;
 $13 = HEAP32[$eov>>2]|0;
 $14 = (($13) + 300|0);
 $15 = (($14) + 16|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = (($16) + 1)|0;
 HEAP32[$15>>2] = $17;
 $18 = HEAP32[$cfg>>2]|0;
 $19 = (($18) + 56|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = ($20|0)==(2);
 if ($21) {
  $22 = HEAP32[$eov>>2]|0;
  $23 = (($22) + 716|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = HEAP32[$eov>>2]|0;
  $26 = (($25) + 704|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = HEAP32[$eov>>2]|0;
  $29 = (($28) + (($27*20)|0)|0);
  $30 = (($29) + ($24<<2)|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = (($31) + 1)|0;
  HEAP32[$30>>2] = $32;
  $33 = HEAP32[$eov>>2]|0;
  $34 = (($33) + 716|0);
  $35 = HEAP32[$34>>2]|0;
  $36 = HEAP32[$eov>>2]|0;
  $37 = (($36) + 300|0);
  $38 = (($37) + ($35<<2)|0);
  $39 = HEAP32[$38>>2]|0;
  $40 = (($39) + 1)|0;
  HEAP32[$38>>2] = $40;
 }
 HEAP32[$gr>>2] = 0;
 while(1) {
  $41 = HEAP32[$gr>>2]|0;
  $42 = HEAP32[$cfg>>2]|0;
  $43 = (($42) + 60|0);
  $44 = HEAP32[$43>>2]|0;
  $45 = ($41|0)<($44|0);
  if (!($45)) {
   break;
  }
  HEAP32[$ch>>2] = 0;
  while(1) {
   $46 = HEAP32[$ch>>2]|0;
   $47 = HEAP32[$cfg>>2]|0;
   $48 = (($47) + 56|0);
   $49 = HEAP32[$48>>2]|0;
   $50 = ($46|0)<($49|0);
   if (!($50)) {
    break;
   }
   $51 = HEAP32[$ch>>2]|0;
   $52 = HEAP32[$gr>>2]|0;
   $53 = HEAP32[$0>>2]|0;
   $54 = (($53) + 304|0);
   $55 = (($54) + (($52*10504)|0)|0);
   $56 = (($55) + (($51*5252)|0)|0);
   $57 = (($56) + 4788|0);
   $58 = HEAP32[$57>>2]|0;
   HEAP32[$bt>>2] = $58;
   $59 = HEAP32[$ch>>2]|0;
   $60 = HEAP32[$gr>>2]|0;
   $61 = HEAP32[$0>>2]|0;
   $62 = (($61) + 304|0);
   $63 = (($62) + (($60*10504)|0)|0);
   $64 = (($63) + (($59*5252)|0)|0);
   $65 = (($64) + 4792|0);
   $66 = HEAP32[$65>>2]|0;
   $67 = ($66|0)!=(0);
   if ($67) {
    HEAP32[$bt>>2] = 4;
   }
   $68 = HEAP32[$bt>>2]|0;
   $69 = HEAP32[$eov>>2]|0;
   $70 = (($69) + 704|0);
   $71 = HEAP32[$70>>2]|0;
   $72 = HEAP32[$eov>>2]|0;
   $73 = (($72) + 320|0);
   $74 = (($73) + (($71*24)|0)|0);
   $75 = (($74) + ($68<<2)|0);
   $76 = HEAP32[$75>>2]|0;
   $77 = (($76) + 1)|0;
   HEAP32[$75>>2] = $77;
   $78 = HEAP32[$eov>>2]|0;
   $79 = (($78) + 704|0);
   $80 = HEAP32[$79>>2]|0;
   $81 = HEAP32[$eov>>2]|0;
   $82 = (($81) + 320|0);
   $83 = (($82) + (($80*24)|0)|0);
   $84 = (($83) + 20|0);
   $85 = HEAP32[$84>>2]|0;
   $86 = (($85) + 1)|0;
   HEAP32[$84>>2] = $86;
   $87 = HEAP32[$bt>>2]|0;
   $88 = HEAP32[$eov>>2]|0;
   $89 = (($88) + 320|0);
   $90 = (($89) + 360|0);
   $91 = (($90) + ($87<<2)|0);
   $92 = HEAP32[$91>>2]|0;
   $93 = (($92) + 1)|0;
   HEAP32[$91>>2] = $93;
   $94 = HEAP32[$eov>>2]|0;
   $95 = (($94) + 320|0);
   $96 = (($95) + 360|0);
   $97 = (($96) + 20|0);
   $98 = HEAP32[$97>>2]|0;
   $99 = (($98) + 1)|0;
   HEAP32[$97>>2] = $99;
   $100 = HEAP32[$ch>>2]|0;
   $101 = (($100) + 1)|0;
   HEAP32[$ch>>2] = $101;
  }
  $102 = HEAP32[$gr>>2]|0;
  $103 = (($102) + 1)|0;
  HEAP32[$gr>>2] = $103;
 }
 STACKTOP = sp;return;
}
function _fft_short($gfc,$x_real,$chn,$buffer) {
 $gfc = $gfc|0;
 $x_real = $x_real|0;
 $chn = $chn|0;
 $buffer = $buffer|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0.0, $101 = 0.0, $102 = 0, $103 = 0, $104 = 0.0, $105 = 0.0, $106 = 0.0, $107 = 0, $108 = 0, $109 = 0.0, $11 = 0, $110 = 0.0, $111 = 0.0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0.0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0.0, $129 = 0.0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0.0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0.0, $145 = 0.0, $146 = 0.0, $147 = 0.0, $148 = 0.0, $149 = 0.0, $15 = 0, $150 = 0.0, $151 = 0.0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0.0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0.0, $167 = 0.0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0.0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0.0, $183 = 0.0, $184 = 0.0, $185 = 0.0, $186 = 0.0, $187 = 0.0, $188 = 0.0;
 var $189 = 0.0, $19 = 0, $190 = 0.0, $191 = 0.0, $192 = 0.0, $193 = 0, $194 = 0, $195 = 0.0, $196 = 0.0, $197 = 0.0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0.0, $201 = 0.0, $202 = 0.0, $203 = 0, $204 = 0, $205 = 0.0;
 var $206 = 0.0, $207 = 0.0, $208 = 0, $209 = 0, $21 = 0.0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0.0, $32 = 0.0, $33 = 0, $34 = 0, $35 = 0, $36 = 0.0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0, $56 = 0, $57 = 0, $58 = 0.0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0.0, $7 = 0, $70 = 0.0, $71 = 0, $72 = 0, $73 = 0, $74 = 0.0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0.0, $86 = 0.0, $87 = 0.0, $88 = 0.0, $89 = 0.0, $9 = 0, $90 = 0.0, $91 = 0.0, $92 = 0.0, $93 = 0, $94 = 0, $95 = 0.0, $96 = 0.0, $97 = 0.0, $98 = 0, $99 = 0.0, $b = 0;
 var $f0 = 0, $f1 = 0, $f2 = 0, $f3 = 0, $i = 0, $j = 0, $k = 0, $w = 0, $x = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $0 = sp + 48|0;
 $1 = sp + 44|0;
 $2 = sp + 40|0;
 $3 = sp + 36|0;
 $i = sp + 32|0;
 $j = sp + 28|0;
 $b = sp + 24|0;
 $x = sp + 20|0;
 $k = sp + 52|0;
 $f0 = sp + 16|0;
 $f1 = sp + 12|0;
 $f2 = sp + 8|0;
 $f3 = sp + 4|0;
 $w = sp;
 HEAP32[$0>>2] = $gfc;
 HEAP32[$1>>2] = $x_real;
 HEAP32[$2>>2] = $chn;
 HEAP32[$3>>2] = $buffer;
 HEAP32[$b>>2] = 0;
 while(1) {
  $4 = HEAP32[$b>>2]|0;
  $5 = ($4|0)<(3);
  if (!($5)) {
   break;
  }
  $6 = HEAP32[$b>>2]|0;
  $7 = HEAP32[$1>>2]|0;
  $8 = (($7) + ($6<<10)|0);
  $9 = (($8) + 512|0);
  HEAP32[$x>>2] = $9;
  $10 = HEAP32[$b>>2]|0;
  $11 = (($10) + 1)|0;
  $12 = ($11*192)|0;
  $13 = $12&65535;
  HEAP16[$k>>1] = $13;
  HEAP32[$j>>2] = 31;
  while(1) {
   $14 = HEAP32[$j>>2]|0;
   $15 = $14 << 2;
   $16 = (704 + ($15)|0);
   $17 = HEAP8[$16>>0]|0;
   $18 = $17&255;
   HEAP32[$i>>2] = $18;
   $19 = HEAP32[$i>>2]|0;
   $20 = (832 + ($19<<2)|0);
   $21 = +HEAPF32[$20>>2];
   $22 = HEAP32[$i>>2]|0;
   $23 = HEAP16[$k>>1]|0;
   $24 = $23 << 16 >> 16;
   $25 = (($22) + ($24))|0;
   $26 = HEAP32[$2>>2]|0;
   $27 = HEAP32[$3>>2]|0;
   $28 = (($27) + ($26<<2)|0);
   $29 = HEAP32[$28>>2]|0;
   $30 = (($29) + ($25<<2)|0);
   $31 = +HEAPF32[$30>>2];
   $32 = $21 * $31;
   HEAPF32[$f0>>2] = $32;
   $33 = HEAP32[$i>>2]|0;
   $34 = (127 - ($33))|0;
   $35 = (832 + ($34<<2)|0);
   $36 = +HEAPF32[$35>>2];
   $37 = HEAP32[$i>>2]|0;
   $38 = HEAP16[$k>>1]|0;
   $39 = $38 << 16 >> 16;
   $40 = (($37) + ($39))|0;
   $41 = (($40) + 128)|0;
   $42 = HEAP32[$2>>2]|0;
   $43 = HEAP32[$3>>2]|0;
   $44 = (($43) + ($42<<2)|0);
   $45 = HEAP32[$44>>2]|0;
   $46 = (($45) + ($41<<2)|0);
   $47 = +HEAPF32[$46>>2];
   $48 = $36 * $47;
   HEAPF32[$w>>2] = $48;
   $49 = +HEAPF32[$f0>>2];
   $50 = +HEAPF32[$w>>2];
   $51 = $49 - $50;
   HEAPF32[$f1>>2] = $51;
   $52 = +HEAPF32[$f0>>2];
   $53 = +HEAPF32[$w>>2];
   $54 = $52 + $53;
   HEAPF32[$f0>>2] = $54;
   $55 = HEAP32[$i>>2]|0;
   $56 = (($55) + 64)|0;
   $57 = (832 + ($56<<2)|0);
   $58 = +HEAPF32[$57>>2];
   $59 = HEAP32[$i>>2]|0;
   $60 = HEAP16[$k>>1]|0;
   $61 = $60 << 16 >> 16;
   $62 = (($59) + ($61))|0;
   $63 = (($62) + 64)|0;
   $64 = HEAP32[$2>>2]|0;
   $65 = HEAP32[$3>>2]|0;
   $66 = (($65) + ($64<<2)|0);
   $67 = HEAP32[$66>>2]|0;
   $68 = (($67) + ($63<<2)|0);
   $69 = +HEAPF32[$68>>2];
   $70 = $58 * $69;
   HEAPF32[$f2>>2] = $70;
   $71 = HEAP32[$i>>2]|0;
   $72 = (63 - ($71))|0;
   $73 = (832 + ($72<<2)|0);
   $74 = +HEAPF32[$73>>2];
   $75 = HEAP32[$i>>2]|0;
   $76 = HEAP16[$k>>1]|0;
   $77 = $76 << 16 >> 16;
   $78 = (($75) + ($77))|0;
   $79 = (($78) + 192)|0;
   $80 = HEAP32[$2>>2]|0;
   $81 = HEAP32[$3>>2]|0;
   $82 = (($81) + ($80<<2)|0);
   $83 = HEAP32[$82>>2]|0;
   $84 = (($83) + ($79<<2)|0);
   $85 = +HEAPF32[$84>>2];
   $86 = $74 * $85;
   HEAPF32[$w>>2] = $86;
   $87 = +HEAPF32[$f2>>2];
   $88 = +HEAPF32[$w>>2];
   $89 = $87 - $88;
   HEAPF32[$f3>>2] = $89;
   $90 = +HEAPF32[$f2>>2];
   $91 = +HEAPF32[$w>>2];
   $92 = $90 + $91;
   HEAPF32[$f2>>2] = $92;
   $93 = HEAP32[$x>>2]|0;
   $94 = (($93) + -16|0);
   HEAP32[$x>>2] = $94;
   $95 = +HEAPF32[$f0>>2];
   $96 = +HEAPF32[$f2>>2];
   $97 = $95 + $96;
   $98 = HEAP32[$x>>2]|0;
   HEAPF32[$98>>2] = $97;
   $99 = +HEAPF32[$f0>>2];
   $100 = +HEAPF32[$f2>>2];
   $101 = $99 - $100;
   $102 = HEAP32[$x>>2]|0;
   $103 = (($102) + 8|0);
   HEAPF32[$103>>2] = $101;
   $104 = +HEAPF32[$f1>>2];
   $105 = +HEAPF32[$f3>>2];
   $106 = $104 + $105;
   $107 = HEAP32[$x>>2]|0;
   $108 = (($107) + 4|0);
   HEAPF32[$108>>2] = $106;
   $109 = +HEAPF32[$f1>>2];
   $110 = +HEAPF32[$f3>>2];
   $111 = $109 - $110;
   $112 = HEAP32[$x>>2]|0;
   $113 = (($112) + 12|0);
   HEAPF32[$113>>2] = $111;
   $114 = HEAP32[$i>>2]|0;
   $115 = (($114) + 1)|0;
   $116 = (832 + ($115<<2)|0);
   $117 = +HEAPF32[$116>>2];
   $118 = HEAP32[$i>>2]|0;
   $119 = HEAP16[$k>>1]|0;
   $120 = $119 << 16 >> 16;
   $121 = (($118) + ($120))|0;
   $122 = (($121) + 1)|0;
   $123 = HEAP32[$2>>2]|0;
   $124 = HEAP32[$3>>2]|0;
   $125 = (($124) + ($123<<2)|0);
   $126 = HEAP32[$125>>2]|0;
   $127 = (($126) + ($122<<2)|0);
   $128 = +HEAPF32[$127>>2];
   $129 = $117 * $128;
   HEAPF32[$f0>>2] = $129;
   $130 = HEAP32[$i>>2]|0;
   $131 = (126 - ($130))|0;
   $132 = (832 + ($131<<2)|0);
   $133 = +HEAPF32[$132>>2];
   $134 = HEAP32[$i>>2]|0;
   $135 = HEAP16[$k>>1]|0;
   $136 = $135 << 16 >> 16;
   $137 = (($134) + ($136))|0;
   $138 = (($137) + 129)|0;
   $139 = HEAP32[$2>>2]|0;
   $140 = HEAP32[$3>>2]|0;
   $141 = (($140) + ($139<<2)|0);
   $142 = HEAP32[$141>>2]|0;
   $143 = (($142) + ($138<<2)|0);
   $144 = +HEAPF32[$143>>2];
   $145 = $133 * $144;
   HEAPF32[$w>>2] = $145;
   $146 = +HEAPF32[$f0>>2];
   $147 = +HEAPF32[$w>>2];
   $148 = $146 - $147;
   HEAPF32[$f1>>2] = $148;
   $149 = +HEAPF32[$f0>>2];
   $150 = +HEAPF32[$w>>2];
   $151 = $149 + $150;
   HEAPF32[$f0>>2] = $151;
   $152 = HEAP32[$i>>2]|0;
   $153 = (($152) + 65)|0;
   $154 = (832 + ($153<<2)|0);
   $155 = +HEAPF32[$154>>2];
   $156 = HEAP32[$i>>2]|0;
   $157 = HEAP16[$k>>1]|0;
   $158 = $157 << 16 >> 16;
   $159 = (($156) + ($158))|0;
   $160 = (($159) + 65)|0;
   $161 = HEAP32[$2>>2]|0;
   $162 = HEAP32[$3>>2]|0;
   $163 = (($162) + ($161<<2)|0);
   $164 = HEAP32[$163>>2]|0;
   $165 = (($164) + ($160<<2)|0);
   $166 = +HEAPF32[$165>>2];
   $167 = $155 * $166;
   HEAPF32[$f2>>2] = $167;
   $168 = HEAP32[$i>>2]|0;
   $169 = (62 - ($168))|0;
   $170 = (832 + ($169<<2)|0);
   $171 = +HEAPF32[$170>>2];
   $172 = HEAP32[$i>>2]|0;
   $173 = HEAP16[$k>>1]|0;
   $174 = $173 << 16 >> 16;
   $175 = (($172) + ($174))|0;
   $176 = (($175) + 193)|0;
   $177 = HEAP32[$2>>2]|0;
   $178 = HEAP32[$3>>2]|0;
   $179 = (($178) + ($177<<2)|0);
   $180 = HEAP32[$179>>2]|0;
   $181 = (($180) + ($176<<2)|0);
   $182 = +HEAPF32[$181>>2];
   $183 = $171 * $182;
   HEAPF32[$w>>2] = $183;
   $184 = +HEAPF32[$f2>>2];
   $185 = +HEAPF32[$w>>2];
   $186 = $184 - $185;
   HEAPF32[$f3>>2] = $186;
   $187 = +HEAPF32[$f2>>2];
   $188 = +HEAPF32[$w>>2];
   $189 = $187 + $188;
   HEAPF32[$f2>>2] = $189;
   $190 = +HEAPF32[$f0>>2];
   $191 = +HEAPF32[$f2>>2];
   $192 = $190 + $191;
   $193 = HEAP32[$x>>2]|0;
   $194 = (($193) + 512|0);
   HEAPF32[$194>>2] = $192;
   $195 = +HEAPF32[$f0>>2];
   $196 = +HEAPF32[$f2>>2];
   $197 = $195 - $196;
   $198 = HEAP32[$x>>2]|0;
   $199 = (($198) + 520|0);
   HEAPF32[$199>>2] = $197;
   $200 = +HEAPF32[$f1>>2];
   $201 = +HEAPF32[$f3>>2];
   $202 = $200 + $201;
   $203 = HEAP32[$x>>2]|0;
   $204 = (($203) + 516|0);
   HEAPF32[$204>>2] = $202;
   $205 = +HEAPF32[$f1>>2];
   $206 = +HEAPF32[$f3>>2];
   $207 = $205 - $206;
   $208 = HEAP32[$x>>2]|0;
   $209 = (($208) + 524|0);
   HEAPF32[$209>>2] = $207;
   $210 = HEAP32[$j>>2]|0;
   $211 = (($210) + -1)|0;
   HEAP32[$j>>2] = $211;
   $212 = ($211|0)>=(0);
   if (!($212)) {
    break;
   }
  }
  $213 = HEAP32[$0>>2]|0;
  $214 = (($213) + 85820|0);
  $215 = HEAP32[$214>>2]|0;
  $216 = HEAP32[$x>>2]|0;
  FUNCTION_TABLE_vii[$215 & 3]($216,128);
  $217 = HEAP32[$b>>2]|0;
  $218 = (($217) + 1)|0;
  HEAP32[$b>>2] = $218;
 }
 STACKTOP = sp;return;
}
function _fft_long($gfc,$x,$chn,$buffer) {
 $gfc = $gfc|0;
 $x = $x|0;
 $chn = $chn|0;
 $buffer = $buffer|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0.0, $105 = 0.0, $106 = 0, $107 = 0, $108 = 0, $109 = 0.0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0.0, $118 = 0.0, $119 = 0.0, $12 = 0.0, $120 = 0.0, $121 = 0.0, $122 = 0.0, $123 = 0.0, $124 = 0.0, $125 = 0, $126 = 0, $127 = 0, $128 = 0.0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0.0, $137 = 0.0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0.0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0.0, $15 = 0, $150 = 0.0, $151 = 0.0;
 var $152 = 0.0, $153 = 0.0, $154 = 0.0, $155 = 0.0, $156 = 0.0, $157 = 0.0, $158 = 0.0, $159 = 0.0, $16 = 0, $160 = 0, $161 = 0, $162 = 0.0, $163 = 0.0, $164 = 0.0, $165 = 0, $166 = 0, $167 = 0.0, $168 = 0.0, $169 = 0.0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0.0, $173 = 0.0, $174 = 0.0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0.0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0.0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0.0, $52 = 0.0, $53 = 0, $54 = 0, $55 = 0, $56 = 0.0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0.0, $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0.0, $7 = 0, $70 = 0.0, $71 = 0.0, $72 = 0, $73 = 0, $74 = 0.0, $75 = 0.0, $76 = 0.0, $77 = 0;
 var $78 = 0.0, $79 = 0.0, $8 = 0, $80 = 0.0, $81 = 0, $82 = 0, $83 = 0.0, $84 = 0.0, $85 = 0.0, $86 = 0, $87 = 0, $88 = 0.0, $89 = 0.0, $9 = 0, $90 = 0.0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0.0, $97 = 0, $98 = 0, $99 = 0, $f0 = 0, $f1 = 0, $f2 = 0, $f3 = 0, $i = 0, $jj = 0, $w = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $0 = sp + 40|0;
 $1 = sp + 36|0;
 $2 = sp + 32|0;
 $3 = sp + 28|0;
 $i = sp + 24|0;
 $jj = sp + 20|0;
 $f0 = sp + 16|0;
 $f1 = sp + 12|0;
 $f2 = sp + 8|0;
 $f3 = sp + 4|0;
 $w = sp;
 HEAP32[$0>>2] = $gfc;
 HEAP32[$1>>2] = $x;
 HEAP32[$2>>2] = $chn;
 HEAP32[$3>>2] = $buffer;
 HEAP32[$jj>>2] = 127;
 $4 = HEAP32[$1>>2]|0;
 $5 = (($4) + 2048|0);
 HEAP32[$1>>2] = $5;
 while(1) {
  $6 = HEAP32[$jj>>2]|0;
  $7 = (704 + ($6)|0);
  $8 = HEAP8[$7>>0]|0;
  $9 = $8&255;
  HEAP32[$i>>2] = $9;
  $10 = HEAP32[$i>>2]|0;
  $11 = (1344 + ($10<<2)|0);
  $12 = +HEAPF32[$11>>2];
  $13 = HEAP32[$i>>2]|0;
  $14 = HEAP32[$2>>2]|0;
  $15 = HEAP32[$3>>2]|0;
  $16 = (($15) + ($14<<2)|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = (($17) + ($13<<2)|0);
  $19 = +HEAPF32[$18>>2];
  $20 = $12 * $19;
  HEAPF32[$f0>>2] = $20;
  $21 = HEAP32[$i>>2]|0;
  $22 = (($21) + 512)|0;
  $23 = (1344 + ($22<<2)|0);
  $24 = +HEAPF32[$23>>2];
  $25 = HEAP32[$i>>2]|0;
  $26 = (($25) + 512)|0;
  $27 = HEAP32[$2>>2]|0;
  $28 = HEAP32[$3>>2]|0;
  $29 = (($28) + ($27<<2)|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = (($30) + ($26<<2)|0);
  $32 = +HEAPF32[$31>>2];
  $33 = $24 * $32;
  HEAPF32[$w>>2] = $33;
  $34 = +HEAPF32[$f0>>2];
  $35 = +HEAPF32[$w>>2];
  $36 = $34 - $35;
  HEAPF32[$f1>>2] = $36;
  $37 = +HEAPF32[$f0>>2];
  $38 = +HEAPF32[$w>>2];
  $39 = $37 + $38;
  HEAPF32[$f0>>2] = $39;
  $40 = HEAP32[$i>>2]|0;
  $41 = (($40) + 256)|0;
  $42 = (1344 + ($41<<2)|0);
  $43 = +HEAPF32[$42>>2];
  $44 = HEAP32[$i>>2]|0;
  $45 = (($44) + 256)|0;
  $46 = HEAP32[$2>>2]|0;
  $47 = HEAP32[$3>>2]|0;
  $48 = (($47) + ($46<<2)|0);
  $49 = HEAP32[$48>>2]|0;
  $50 = (($49) + ($45<<2)|0);
  $51 = +HEAPF32[$50>>2];
  $52 = $43 * $51;
  HEAPF32[$f2>>2] = $52;
  $53 = HEAP32[$i>>2]|0;
  $54 = (($53) + 768)|0;
  $55 = (1344 + ($54<<2)|0);
  $56 = +HEAPF32[$55>>2];
  $57 = HEAP32[$i>>2]|0;
  $58 = (($57) + 768)|0;
  $59 = HEAP32[$2>>2]|0;
  $60 = HEAP32[$3>>2]|0;
  $61 = (($60) + ($59<<2)|0);
  $62 = HEAP32[$61>>2]|0;
  $63 = (($62) + ($58<<2)|0);
  $64 = +HEAPF32[$63>>2];
  $65 = $56 * $64;
  HEAPF32[$w>>2] = $65;
  $66 = +HEAPF32[$f2>>2];
  $67 = +HEAPF32[$w>>2];
  $68 = $66 - $67;
  HEAPF32[$f3>>2] = $68;
  $69 = +HEAPF32[$f2>>2];
  $70 = +HEAPF32[$w>>2];
  $71 = $69 + $70;
  HEAPF32[$f2>>2] = $71;
  $72 = HEAP32[$1>>2]|0;
  $73 = (($72) + -16|0);
  HEAP32[$1>>2] = $73;
  $74 = +HEAPF32[$f0>>2];
  $75 = +HEAPF32[$f2>>2];
  $76 = $74 + $75;
  $77 = HEAP32[$1>>2]|0;
  HEAPF32[$77>>2] = $76;
  $78 = +HEAPF32[$f0>>2];
  $79 = +HEAPF32[$f2>>2];
  $80 = $78 - $79;
  $81 = HEAP32[$1>>2]|0;
  $82 = (($81) + 8|0);
  HEAPF32[$82>>2] = $80;
  $83 = +HEAPF32[$f1>>2];
  $84 = +HEAPF32[$f3>>2];
  $85 = $83 + $84;
  $86 = HEAP32[$1>>2]|0;
  $87 = (($86) + 4|0);
  HEAPF32[$87>>2] = $85;
  $88 = +HEAPF32[$f1>>2];
  $89 = +HEAPF32[$f3>>2];
  $90 = $88 - $89;
  $91 = HEAP32[$1>>2]|0;
  $92 = (($91) + 12|0);
  HEAPF32[$92>>2] = $90;
  $93 = HEAP32[$i>>2]|0;
  $94 = (($93) + 1)|0;
  $95 = (1344 + ($94<<2)|0);
  $96 = +HEAPF32[$95>>2];
  $97 = HEAP32[$i>>2]|0;
  $98 = (($97) + 1)|0;
  $99 = HEAP32[$2>>2]|0;
  $100 = HEAP32[$3>>2]|0;
  $101 = (($100) + ($99<<2)|0);
  $102 = HEAP32[$101>>2]|0;
  $103 = (($102) + ($98<<2)|0);
  $104 = +HEAPF32[$103>>2];
  $105 = $96 * $104;
  HEAPF32[$f0>>2] = $105;
  $106 = HEAP32[$i>>2]|0;
  $107 = (($106) + 513)|0;
  $108 = (1344 + ($107<<2)|0);
  $109 = +HEAPF32[$108>>2];
  $110 = HEAP32[$i>>2]|0;
  $111 = (($110) + 513)|0;
  $112 = HEAP32[$2>>2]|0;
  $113 = HEAP32[$3>>2]|0;
  $114 = (($113) + ($112<<2)|0);
  $115 = HEAP32[$114>>2]|0;
  $116 = (($115) + ($111<<2)|0);
  $117 = +HEAPF32[$116>>2];
  $118 = $109 * $117;
  HEAPF32[$w>>2] = $118;
  $119 = +HEAPF32[$f0>>2];
  $120 = +HEAPF32[$w>>2];
  $121 = $119 - $120;
  HEAPF32[$f1>>2] = $121;
  $122 = +HEAPF32[$f0>>2];
  $123 = +HEAPF32[$w>>2];
  $124 = $122 + $123;
  HEAPF32[$f0>>2] = $124;
  $125 = HEAP32[$i>>2]|0;
  $126 = (($125) + 257)|0;
  $127 = (1344 + ($126<<2)|0);
  $128 = +HEAPF32[$127>>2];
  $129 = HEAP32[$i>>2]|0;
  $130 = (($129) + 257)|0;
  $131 = HEAP32[$2>>2]|0;
  $132 = HEAP32[$3>>2]|0;
  $133 = (($132) + ($131<<2)|0);
  $134 = HEAP32[$133>>2]|0;
  $135 = (($134) + ($130<<2)|0);
  $136 = +HEAPF32[$135>>2];
  $137 = $128 * $136;
  HEAPF32[$f2>>2] = $137;
  $138 = HEAP32[$i>>2]|0;
  $139 = (($138) + 769)|0;
  $140 = (1344 + ($139<<2)|0);
  $141 = +HEAPF32[$140>>2];
  $142 = HEAP32[$i>>2]|0;
  $143 = (($142) + 769)|0;
  $144 = HEAP32[$2>>2]|0;
  $145 = HEAP32[$3>>2]|0;
  $146 = (($145) + ($144<<2)|0);
  $147 = HEAP32[$146>>2]|0;
  $148 = (($147) + ($143<<2)|0);
  $149 = +HEAPF32[$148>>2];
  $150 = $141 * $149;
  HEAPF32[$w>>2] = $150;
  $151 = +HEAPF32[$f2>>2];
  $152 = +HEAPF32[$w>>2];
  $153 = $151 - $152;
  HEAPF32[$f3>>2] = $153;
  $154 = +HEAPF32[$f2>>2];
  $155 = +HEAPF32[$w>>2];
  $156 = $154 + $155;
  HEAPF32[$f2>>2] = $156;
  $157 = +HEAPF32[$f0>>2];
  $158 = +HEAPF32[$f2>>2];
  $159 = $157 + $158;
  $160 = HEAP32[$1>>2]|0;
  $161 = (($160) + 2048|0);
  HEAPF32[$161>>2] = $159;
  $162 = +HEAPF32[$f0>>2];
  $163 = +HEAPF32[$f2>>2];
  $164 = $162 - $163;
  $165 = HEAP32[$1>>2]|0;
  $166 = (($165) + 2056|0);
  HEAPF32[$166>>2] = $164;
  $167 = +HEAPF32[$f1>>2];
  $168 = +HEAPF32[$f3>>2];
  $169 = $167 + $168;
  $170 = HEAP32[$1>>2]|0;
  $171 = (($170) + 2052|0);
  HEAPF32[$171>>2] = $169;
  $172 = +HEAPF32[$f1>>2];
  $173 = +HEAPF32[$f3>>2];
  $174 = $172 - $173;
  $175 = HEAP32[$1>>2]|0;
  $176 = (($175) + 2060|0);
  HEAPF32[$176>>2] = $174;
  $177 = HEAP32[$jj>>2]|0;
  $178 = (($177) + -1)|0;
  HEAP32[$jj>>2] = $178;
  $179 = ($178|0)>=(0);
  if (!($179)) {
   break;
  }
 }
 $180 = HEAP32[$0>>2]|0;
 $181 = (($180) + 85820|0);
 $182 = HEAP32[$181>>2]|0;
 $183 = HEAP32[$1>>2]|0;
 FUNCTION_TABLE_vii[$182 & 3]($183,512);
 STACKTOP = sp;return;
}
function _init_fft($gfc) {
 $gfc = $gfc|0;
 var $0 = 0, $1 = 0, $10 = 0.0, $11 = 0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0.0, $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0.0, $40 = 0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0;
 var $9 = 0.0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp + 4|0;
 $i = sp;
 HEAP32[$0>>2] = $gfc;
 HEAP32[$i>>2] = 0;
 while(1) {
  $1 = HEAP32[$i>>2]|0;
  $2 = ($1|0)<(1024);
  if (!($2)) {
   break;
  }
  $3 = HEAP32[$i>>2]|0;
  $4 = (+($3|0));
  $5 = $4 + 0.5;
  $6 = 6.283185307179586232 * $5;
  $7 = $6 / 1024.0;
  $8 = (+Math_cos((+$7)));
  $9 = 0.5 * $8;
  $10 = 0.419999999999999984457 - $9;
  $11 = HEAP32[$i>>2]|0;
  $12 = (+($11|0));
  $13 = $12 + 0.5;
  $14 = 12.566370614359172464 * $13;
  $15 = $14 / 1024.0;
  $16 = (+Math_cos((+$15)));
  $17 = 0.0800000000000000016653 * $16;
  $18 = $10 + $17;
  $19 = $18;
  $20 = HEAP32[$i>>2]|0;
  $21 = (1344 + ($20<<2)|0);
  HEAPF32[$21>>2] = $19;
  $22 = HEAP32[$i>>2]|0;
  $23 = (($22) + 1)|0;
  HEAP32[$i>>2] = $23;
 }
 HEAP32[$i>>2] = 0;
 while(1) {
  $24 = HEAP32[$i>>2]|0;
  $25 = ($24|0)<(128);
  if (!($25)) {
   break;
  }
  $26 = HEAP32[$i>>2]|0;
  $27 = (+($26|0));
  $28 = $27 + 0.5;
  $29 = 6.283185307179586232 * $28;
  $30 = $29 / 256.0;
  $31 = (+Math_cos((+$30)));
  $32 = 1.0 - $31;
  $33 = 0.5 * $32;
  $34 = $33;
  $35 = HEAP32[$i>>2]|0;
  $36 = (832 + ($35<<2)|0);
  HEAPF32[$36>>2] = $34;
  $37 = HEAP32[$i>>2]|0;
  $38 = (($37) + 1)|0;
  HEAP32[$i>>2] = $38;
 }
 $39 = HEAP32[$0>>2]|0;
 $40 = (($39) + 85820|0);
 HEAP32[$40>>2] = 1;
 STACKTOP = sp;return;
}
function _fht($fz,$n) {
 $fz = $fz|0;
 $n = $n|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0.0, $101 = 0.0, $102 = 0.0, $103 = 0.0, $104 = 0.0, $105 = 0.0, $106 = 0, $107 = 0, $108 = 0, $109 = 0.0, $11 = 0, $110 = 0.0, $111 = 0.0, $112 = 0, $113 = 0.0, $114 = 0.0, $115 = 0.0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0.0, $12 = 0, $120 = 0.0, $121 = 0.0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0.0, $136 = 0, $137 = 0, $138 = 0.0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0.0, $143 = 0.0, $144 = 0.0, $145 = 0.0, $146 = 0.0, $147 = 0.0, $148 = 0.0, $149 = 0.0, $15 = 0, $150 = 0.0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0.0, $161 = 0, $162 = 0, $163 = 0, $164 = 0.0, $165 = 0.0, $166 = 0.0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0.0, $171 = 0.0, $172 = 0.0, $173 = 0.0, $174 = 0, $175 = 0, $176 = 0, $177 = 0.0, $178 = 0.0, $179 = 0.0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0.0, $184 = 0.0, $185 = 0.0, $186 = 0, $187 = 0.0, $188 = 0.0;
 var $189 = 0.0, $19 = 0, $190 = 0, $191 = 0.0, $192 = 0.0, $193 = 0.0, $194 = 0, $195 = 0.0, $196 = 0.0, $197 = 0.0, $198 = 0, $199 = 0.0, $2 = 0, $20 = 0, $200 = 0.0, $201 = 0.0, $202 = 0.0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0.0, $207 = 0.0, $208 = 0.0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0.0, $213 = 0.0, $214 = 0.0, $215 = 0.0, $216 = 0, $217 = 0, $218 = 0, $219 = 0.0, $22 = 0.0, $220 = 0.0, $221 = 0.0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0.0, $226 = 0.0, $227 = 0.0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0.0, $232 = 0.0, $233 = 0.0, $234 = 0, $235 = 0, $236 = 0, $237 = 0.0, $238 = 0.0, $239 = 0.0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0.0, $244 = 0.0, $245 = 0.0, $246 = 0, $247 = 0, $248 = 0, $249 = 0.0, $25 = 0, $250 = 0.0, $251 = 0.0, $252 = 0.0, $253 = 0.0, $254 = 0.0, $255 = 0.0, $256 = 0.0, $257 = 0.0, $258 = 0.0, $259 = 0.0, $26 = 0.0;
 var $260 = 0.0, $261 = 0.0, $262 = 0.0, $263 = 0.0, $264 = 0.0, $265 = 0.0, $266 = 0.0, $267 = 0.0, $268 = 0.0, $269 = 0, $27 = 0.0, $270 = 0, $271 = 0, $272 = 0.0, $273 = 0.0, $274 = 0.0, $275 = 0, $276 = 0.0, $277 = 0.0, $278 = 0.0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0.0, $283 = 0.0, $284 = 0.0, $285 = 0, $286 = 0, $287 = 0, $288 = 0.0, $289 = 0.0, $29 = 0.0, $290 = 0.0, $291 = 0.0, $292 = 0.0, $293 = 0.0, $294 = 0.0, $295 = 0.0, $296 = 0.0;
 var $297 = 0.0, $298 = 0.0, $299 = 0.0, $3 = 0, $30 = 0, $300 = 0.0, $301 = 0.0, $302 = 0.0, $303 = 0.0, $304 = 0.0, $305 = 0, $306 = 0, $307 = 0, $308 = 0.0, $309 = 0.0, $31 = 0, $310 = 0.0, $311 = 0, $312 = 0.0, $313 = 0.0;
 var $314 = 0.0, $315 = 0, $316 = 0, $317 = 0, $318 = 0.0, $319 = 0.0, $32 = 0, $320 = 0.0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0.0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0.0, $334 = 0.0, $335 = 0, $336 = 0.0, $337 = 0.0, $338 = 0.0, $339 = 0, $34 = 0.0, $340 = 0, $341 = 0.0, $342 = 0.0, $343 = 0.0, $344 = 0.0, $345 = 0, $346 = 0, $347 = 0.0, $348 = 0.0, $349 = 0.0, $35 = 0;
 var $350 = 0, $351 = 0.0, $352 = 0.0, $353 = 0.0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $37 = 0, $38 = 0.0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0.0, $43 = 0.0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0.0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0, $57 = 0, $58 = 0, $59 = 0.0, $6 = 0, $60 = 0.0, $61 = 0.0;
 var $62 = 0, $63 = 0.0, $64 = 0.0, $65 = 0.0, $66 = 0, $67 = 0, $68 = 0, $69 = 0.0, $7 = 0, $70 = 0.0, $71 = 0.0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0.0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0.0, $81 = 0.0, $82 = 0, $83 = 0.0, $84 = 0, $85 = 0, $86 = 0, $87 = 0.0, $88 = 0.0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0.0, $93 = 0.0, $94 = 0.0, $95 = 0.0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0.0, $a = 0, $b = 0, $c1 = 0, $c2 = 0, $f0 = 0, $f01 = 0, $f1 = 0, $f12 = 0, $f2 = 0, $f23 = 0, $f3 = 0, $f34 = 0, $fi = 0, $fn = 0, $g0 = 0, $g1 = 0, $g2 = 0, $g3 = 0, $gi = 0;
 var $i = 0, $k1 = 0, $k2 = 0, $k3 = 0, $k4 = 0, $kx = 0, $s1 = 0, $s2 = 0, $tri = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0;
 $0 = sp + 116|0;
 $1 = sp + 112|0;
 $tri = sp + 108|0;
 $k4 = sp + 104|0;
 $fi = sp + 100|0;
 $gi = sp + 96|0;
 $fn = sp + 92|0;
 $s1 = sp + 88|0;
 $c1 = sp + 84|0;
 $i = sp + 80|0;
 $k1 = sp + 76|0;
 $k2 = sp + 72|0;
 $k3 = sp + 68|0;
 $kx = sp + 64|0;
 $f0 = sp + 60|0;
 $f1 = sp + 56|0;
 $f2 = sp + 52|0;
 $f3 = sp + 48|0;
 $c2 = sp + 44|0;
 $s2 = sp + 40|0;
 $a = sp + 36|0;
 $b = sp + 32|0;
 $g0 = sp + 28|0;
 $f01 = sp + 24|0;
 $f12 = sp + 20|0;
 $g1 = sp + 16|0;
 $f23 = sp + 12|0;
 $g2 = sp + 8|0;
 $f34 = sp + 4|0;
 $g3 = sp;
 HEAP32[$0>>2] = $fz;
 HEAP32[$1>>2] = $n;
 HEAP32[$tri>>2] = 5440;
 $2 = HEAP32[$1>>2]|0;
 $3 = $2 << 1;
 HEAP32[$1>>2] = $3;
 $4 = HEAP32[$0>>2]|0;
 $5 = HEAP32[$1>>2]|0;
 $6 = (($4) + ($5<<2)|0);
 HEAP32[$fn>>2] = $6;
 HEAP32[$k4>>2] = 4;
 while(1) {
  $7 = HEAP32[$k4>>2]|0;
  $8 = $7 >> 1;
  HEAP32[$kx>>2] = $8;
  $9 = HEAP32[$k4>>2]|0;
  HEAP32[$k1>>2] = $9;
  $10 = HEAP32[$k4>>2]|0;
  $11 = $10 << 1;
  HEAP32[$k2>>2] = $11;
  $12 = HEAP32[$k2>>2]|0;
  $13 = HEAP32[$k1>>2]|0;
  $14 = (($12) + ($13))|0;
  HEAP32[$k3>>2] = $14;
  $15 = HEAP32[$k2>>2]|0;
  $16 = $15 << 1;
  HEAP32[$k4>>2] = $16;
  $17 = HEAP32[$0>>2]|0;
  HEAP32[$fi>>2] = $17;
  $18 = HEAP32[$fi>>2]|0;
  $19 = HEAP32[$kx>>2]|0;
  $20 = (($18) + ($19<<2)|0);
  HEAP32[$gi>>2] = $20;
  while(1) {
   $21 = HEAP32[$fi>>2]|0;
   $22 = +HEAPF32[$21>>2];
   $23 = HEAP32[$k1>>2]|0;
   $24 = HEAP32[$fi>>2]|0;
   $25 = (($24) + ($23<<2)|0);
   $26 = +HEAPF32[$25>>2];
   $27 = $22 - $26;
   HEAPF32[$f1>>2] = $27;
   $28 = HEAP32[$fi>>2]|0;
   $29 = +HEAPF32[$28>>2];
   $30 = HEAP32[$k1>>2]|0;
   $31 = HEAP32[$fi>>2]|0;
   $32 = (($31) + ($30<<2)|0);
   $33 = +HEAPF32[$32>>2];
   $34 = $29 + $33;
   HEAPF32[$f0>>2] = $34;
   $35 = HEAP32[$k2>>2]|0;
   $36 = HEAP32[$fi>>2]|0;
   $37 = (($36) + ($35<<2)|0);
   $38 = +HEAPF32[$37>>2];
   $39 = HEAP32[$k3>>2]|0;
   $40 = HEAP32[$fi>>2]|0;
   $41 = (($40) + ($39<<2)|0);
   $42 = +HEAPF32[$41>>2];
   $43 = $38 - $42;
   HEAPF32[$f3>>2] = $43;
   $44 = HEAP32[$k2>>2]|0;
   $45 = HEAP32[$fi>>2]|0;
   $46 = (($45) + ($44<<2)|0);
   $47 = +HEAPF32[$46>>2];
   $48 = HEAP32[$k3>>2]|0;
   $49 = HEAP32[$fi>>2]|0;
   $50 = (($49) + ($48<<2)|0);
   $51 = +HEAPF32[$50>>2];
   $52 = $47 + $51;
   HEAPF32[$f2>>2] = $52;
   $53 = +HEAPF32[$f0>>2];
   $54 = +HEAPF32[$f2>>2];
   $55 = $53 - $54;
   $56 = HEAP32[$k2>>2]|0;
   $57 = HEAP32[$fi>>2]|0;
   $58 = (($57) + ($56<<2)|0);
   HEAPF32[$58>>2] = $55;
   $59 = +HEAPF32[$f0>>2];
   $60 = +HEAPF32[$f2>>2];
   $61 = $59 + $60;
   $62 = HEAP32[$fi>>2]|0;
   HEAPF32[$62>>2] = $61;
   $63 = +HEAPF32[$f1>>2];
   $64 = +HEAPF32[$f3>>2];
   $65 = $63 - $64;
   $66 = HEAP32[$k3>>2]|0;
   $67 = HEAP32[$fi>>2]|0;
   $68 = (($67) + ($66<<2)|0);
   HEAPF32[$68>>2] = $65;
   $69 = +HEAPF32[$f1>>2];
   $70 = +HEAPF32[$f3>>2];
   $71 = $69 + $70;
   $72 = HEAP32[$k1>>2]|0;
   $73 = HEAP32[$fi>>2]|0;
   $74 = (($73) + ($72<<2)|0);
   HEAPF32[$74>>2] = $71;
   $75 = HEAP32[$gi>>2]|0;
   $76 = +HEAPF32[$75>>2];
   $77 = HEAP32[$k1>>2]|0;
   $78 = HEAP32[$gi>>2]|0;
   $79 = (($78) + ($77<<2)|0);
   $80 = +HEAPF32[$79>>2];
   $81 = $76 - $80;
   HEAPF32[$f1>>2] = $81;
   $82 = HEAP32[$gi>>2]|0;
   $83 = +HEAPF32[$82>>2];
   $84 = HEAP32[$k1>>2]|0;
   $85 = HEAP32[$gi>>2]|0;
   $86 = (($85) + ($84<<2)|0);
   $87 = +HEAPF32[$86>>2];
   $88 = $83 + $87;
   HEAPF32[$f0>>2] = $88;
   $89 = HEAP32[$k3>>2]|0;
   $90 = HEAP32[$gi>>2]|0;
   $91 = (($90) + ($89<<2)|0);
   $92 = +HEAPF32[$91>>2];
   $93 = $92;
   $94 = 1.41421356237309514547 * $93;
   $95 = $94;
   HEAPF32[$f3>>2] = $95;
   $96 = HEAP32[$k2>>2]|0;
   $97 = HEAP32[$gi>>2]|0;
   $98 = (($97) + ($96<<2)|0);
   $99 = +HEAPF32[$98>>2];
   $100 = $99;
   $101 = 1.41421356237309514547 * $100;
   $102 = $101;
   HEAPF32[$f2>>2] = $102;
   $103 = +HEAPF32[$f0>>2];
   $104 = +HEAPF32[$f2>>2];
   $105 = $103 - $104;
   $106 = HEAP32[$k2>>2]|0;
   $107 = HEAP32[$gi>>2]|0;
   $108 = (($107) + ($106<<2)|0);
   HEAPF32[$108>>2] = $105;
   $109 = +HEAPF32[$f0>>2];
   $110 = +HEAPF32[$f2>>2];
   $111 = $109 + $110;
   $112 = HEAP32[$gi>>2]|0;
   HEAPF32[$112>>2] = $111;
   $113 = +HEAPF32[$f1>>2];
   $114 = +HEAPF32[$f3>>2];
   $115 = $113 - $114;
   $116 = HEAP32[$k3>>2]|0;
   $117 = HEAP32[$gi>>2]|0;
   $118 = (($117) + ($116<<2)|0);
   HEAPF32[$118>>2] = $115;
   $119 = +HEAPF32[$f1>>2];
   $120 = +HEAPF32[$f3>>2];
   $121 = $119 + $120;
   $122 = HEAP32[$k1>>2]|0;
   $123 = HEAP32[$gi>>2]|0;
   $124 = (($123) + ($122<<2)|0);
   HEAPF32[$124>>2] = $121;
   $125 = HEAP32[$k4>>2]|0;
   $126 = HEAP32[$gi>>2]|0;
   $127 = (($126) + ($125<<2)|0);
   HEAP32[$gi>>2] = $127;
   $128 = HEAP32[$k4>>2]|0;
   $129 = HEAP32[$fi>>2]|0;
   $130 = (($129) + ($128<<2)|0);
   HEAP32[$fi>>2] = $130;
   $131 = HEAP32[$fi>>2]|0;
   $132 = HEAP32[$fn>>2]|0;
   $133 = ($131>>>0)<($132>>>0);
   if (!($133)) {
    break;
   }
  }
  $134 = HEAP32[$tri>>2]|0;
  $135 = +HEAPF32[$134>>2];
  HEAPF32[$c1>>2] = $135;
  $136 = HEAP32[$tri>>2]|0;
  $137 = (($136) + 4|0);
  $138 = +HEAPF32[$137>>2];
  HEAPF32[$s1>>2] = $138;
  HEAP32[$i>>2] = 1;
  while(1) {
   $139 = HEAP32[$i>>2]|0;
   $140 = HEAP32[$kx>>2]|0;
   $141 = ($139|0)<($140|0);
   if (!($141)) {
    break;
   }
   $142 = +HEAPF32[$s1>>2];
   $143 = 2.0 * $142;
   $144 = +HEAPF32[$s1>>2];
   $145 = $143 * $144;
   $146 = 1.0 - $145;
   HEAPF32[$c2>>2] = $146;
   $147 = +HEAPF32[$s1>>2];
   $148 = 2.0 * $147;
   $149 = +HEAPF32[$c1>>2];
   $150 = $148 * $149;
   HEAPF32[$s2>>2] = $150;
   $151 = HEAP32[$0>>2]|0;
   $152 = HEAP32[$i>>2]|0;
   $153 = (($151) + ($152<<2)|0);
   HEAP32[$fi>>2] = $153;
   $154 = HEAP32[$0>>2]|0;
   $155 = HEAP32[$k1>>2]|0;
   $156 = (($154) + ($155<<2)|0);
   $157 = HEAP32[$i>>2]|0;
   $158 = (0 - ($157))|0;
   $159 = (($156) + ($158<<2)|0);
   HEAP32[$gi>>2] = $159;
   while(1) {
    $160 = +HEAPF32[$s2>>2];
    $161 = HEAP32[$k1>>2]|0;
    $162 = HEAP32[$fi>>2]|0;
    $163 = (($162) + ($161<<2)|0);
    $164 = +HEAPF32[$163>>2];
    $165 = $160 * $164;
    $166 = +HEAPF32[$c2>>2];
    $167 = HEAP32[$k1>>2]|0;
    $168 = HEAP32[$gi>>2]|0;
    $169 = (($168) + ($167<<2)|0);
    $170 = +HEAPF32[$169>>2];
    $171 = $166 * $170;
    $172 = $165 - $171;
    HEAPF32[$b>>2] = $172;
    $173 = +HEAPF32[$c2>>2];
    $174 = HEAP32[$k1>>2]|0;
    $175 = HEAP32[$fi>>2]|0;
    $176 = (($175) + ($174<<2)|0);
    $177 = +HEAPF32[$176>>2];
    $178 = $173 * $177;
    $179 = +HEAPF32[$s2>>2];
    $180 = HEAP32[$k1>>2]|0;
    $181 = HEAP32[$gi>>2]|0;
    $182 = (($181) + ($180<<2)|0);
    $183 = +HEAPF32[$182>>2];
    $184 = $179 * $183;
    $185 = $178 + $184;
    HEAPF32[$a>>2] = $185;
    $186 = HEAP32[$fi>>2]|0;
    $187 = +HEAPF32[$186>>2];
    $188 = +HEAPF32[$a>>2];
    $189 = $187 - $188;
    HEAPF32[$f12>>2] = $189;
    $190 = HEAP32[$fi>>2]|0;
    $191 = +HEAPF32[$190>>2];
    $192 = +HEAPF32[$a>>2];
    $193 = $191 + $192;
    HEAPF32[$f01>>2] = $193;
    $194 = HEAP32[$gi>>2]|0;
    $195 = +HEAPF32[$194>>2];
    $196 = +HEAPF32[$b>>2];
    $197 = $195 - $196;
    HEAPF32[$g1>>2] = $197;
    $198 = HEAP32[$gi>>2]|0;
    $199 = +HEAPF32[$198>>2];
    $200 = +HEAPF32[$b>>2];
    $201 = $199 + $200;
    HEAPF32[$g0>>2] = $201;
    $202 = +HEAPF32[$s2>>2];
    $203 = HEAP32[$k3>>2]|0;
    $204 = HEAP32[$fi>>2]|0;
    $205 = (($204) + ($203<<2)|0);
    $206 = +HEAPF32[$205>>2];
    $207 = $202 * $206;
    $208 = +HEAPF32[$c2>>2];
    $209 = HEAP32[$k3>>2]|0;
    $210 = HEAP32[$gi>>2]|0;
    $211 = (($210) + ($209<<2)|0);
    $212 = +HEAPF32[$211>>2];
    $213 = $208 * $212;
    $214 = $207 - $213;
    HEAPF32[$b>>2] = $214;
    $215 = +HEAPF32[$c2>>2];
    $216 = HEAP32[$k3>>2]|0;
    $217 = HEAP32[$fi>>2]|0;
    $218 = (($217) + ($216<<2)|0);
    $219 = +HEAPF32[$218>>2];
    $220 = $215 * $219;
    $221 = +HEAPF32[$s2>>2];
    $222 = HEAP32[$k3>>2]|0;
    $223 = HEAP32[$gi>>2]|0;
    $224 = (($223) + ($222<<2)|0);
    $225 = +HEAPF32[$224>>2];
    $226 = $221 * $225;
    $227 = $220 + $226;
    HEAPF32[$a>>2] = $227;
    $228 = HEAP32[$k2>>2]|0;
    $229 = HEAP32[$fi>>2]|0;
    $230 = (($229) + ($228<<2)|0);
    $231 = +HEAPF32[$230>>2];
    $232 = +HEAPF32[$a>>2];
    $233 = $231 - $232;
    HEAPF32[$f34>>2] = $233;
    $234 = HEAP32[$k2>>2]|0;
    $235 = HEAP32[$fi>>2]|0;
    $236 = (($235) + ($234<<2)|0);
    $237 = +HEAPF32[$236>>2];
    $238 = +HEAPF32[$a>>2];
    $239 = $237 + $238;
    HEAPF32[$f23>>2] = $239;
    $240 = HEAP32[$k2>>2]|0;
    $241 = HEAP32[$gi>>2]|0;
    $242 = (($241) + ($240<<2)|0);
    $243 = +HEAPF32[$242>>2];
    $244 = +HEAPF32[$b>>2];
    $245 = $243 - $244;
    HEAPF32[$g3>>2] = $245;
    $246 = HEAP32[$k2>>2]|0;
    $247 = HEAP32[$gi>>2]|0;
    $248 = (($247) + ($246<<2)|0);
    $249 = +HEAPF32[$248>>2];
    $250 = +HEAPF32[$b>>2];
    $251 = $249 + $250;
    HEAPF32[$g2>>2] = $251;
    $252 = +HEAPF32[$s1>>2];
    $253 = +HEAPF32[$f23>>2];
    $254 = $252 * $253;
    $255 = +HEAPF32[$c1>>2];
    $256 = +HEAPF32[$g3>>2];
    $257 = $255 * $256;
    $258 = $254 - $257;
    HEAPF32[$b>>2] = $258;
    $259 = +HEAPF32[$c1>>2];
    $260 = +HEAPF32[$f23>>2];
    $261 = $259 * $260;
    $262 = +HEAPF32[$s1>>2];
    $263 = +HEAPF32[$g3>>2];
    $264 = $262 * $263;
    $265 = $261 + $264;
    HEAPF32[$a>>2] = $265;
    $266 = +HEAPF32[$f01>>2];
    $267 = +HEAPF32[$a>>2];
    $268 = $266 - $267;
    $269 = HEAP32[$k2>>2]|0;
    $270 = HEAP32[$fi>>2]|0;
    $271 = (($270) + ($269<<2)|0);
    HEAPF32[$271>>2] = $268;
    $272 = +HEAPF32[$f01>>2];
    $273 = +HEAPF32[$a>>2];
    $274 = $272 + $273;
    $275 = HEAP32[$fi>>2]|0;
    HEAPF32[$275>>2] = $274;
    $276 = +HEAPF32[$g1>>2];
    $277 = +HEAPF32[$b>>2];
    $278 = $276 - $277;
    $279 = HEAP32[$k3>>2]|0;
    $280 = HEAP32[$gi>>2]|0;
    $281 = (($280) + ($279<<2)|0);
    HEAPF32[$281>>2] = $278;
    $282 = +HEAPF32[$g1>>2];
    $283 = +HEAPF32[$b>>2];
    $284 = $282 + $283;
    $285 = HEAP32[$k1>>2]|0;
    $286 = HEAP32[$gi>>2]|0;
    $287 = (($286) + ($285<<2)|0);
    HEAPF32[$287>>2] = $284;
    $288 = +HEAPF32[$c1>>2];
    $289 = +HEAPF32[$g2>>2];
    $290 = $288 * $289;
    $291 = +HEAPF32[$s1>>2];
    $292 = +HEAPF32[$f34>>2];
    $293 = $291 * $292;
    $294 = $290 - $293;
    HEAPF32[$b>>2] = $294;
    $295 = +HEAPF32[$s1>>2];
    $296 = +HEAPF32[$g2>>2];
    $297 = $295 * $296;
    $298 = +HEAPF32[$c1>>2];
    $299 = +HEAPF32[$f34>>2];
    $300 = $298 * $299;
    $301 = $297 + $300;
    HEAPF32[$a>>2] = $301;
    $302 = +HEAPF32[$g0>>2];
    $303 = +HEAPF32[$a>>2];
    $304 = $302 - $303;
    $305 = HEAP32[$k2>>2]|0;
    $306 = HEAP32[$gi>>2]|0;
    $307 = (($306) + ($305<<2)|0);
    HEAPF32[$307>>2] = $304;
    $308 = +HEAPF32[$g0>>2];
    $309 = +HEAPF32[$a>>2];
    $310 = $308 + $309;
    $311 = HEAP32[$gi>>2]|0;
    HEAPF32[$311>>2] = $310;
    $312 = +HEAPF32[$f12>>2];
    $313 = +HEAPF32[$b>>2];
    $314 = $312 - $313;
    $315 = HEAP32[$k3>>2]|0;
    $316 = HEAP32[$fi>>2]|0;
    $317 = (($316) + ($315<<2)|0);
    HEAPF32[$317>>2] = $314;
    $318 = +HEAPF32[$f12>>2];
    $319 = +HEAPF32[$b>>2];
    $320 = $318 + $319;
    $321 = HEAP32[$k1>>2]|0;
    $322 = HEAP32[$fi>>2]|0;
    $323 = (($322) + ($321<<2)|0);
    HEAPF32[$323>>2] = $320;
    $324 = HEAP32[$k4>>2]|0;
    $325 = HEAP32[$gi>>2]|0;
    $326 = (($325) + ($324<<2)|0);
    HEAP32[$gi>>2] = $326;
    $327 = HEAP32[$k4>>2]|0;
    $328 = HEAP32[$fi>>2]|0;
    $329 = (($328) + ($327<<2)|0);
    HEAP32[$fi>>2] = $329;
    $330 = HEAP32[$fi>>2]|0;
    $331 = HEAP32[$fn>>2]|0;
    $332 = ($330>>>0)<($331>>>0);
    if (!($332)) {
     break;
    }
   }
   $333 = +HEAPF32[$c1>>2];
   HEAPF32[$c2>>2] = $333;
   $334 = +HEAPF32[$c2>>2];
   $335 = HEAP32[$tri>>2]|0;
   $336 = +HEAPF32[$335>>2];
   $337 = $334 * $336;
   $338 = +HEAPF32[$s1>>2];
   $339 = HEAP32[$tri>>2]|0;
   $340 = (($339) + 4|0);
   $341 = +HEAPF32[$340>>2];
   $342 = $338 * $341;
   $343 = $337 - $342;
   HEAPF32[$c1>>2] = $343;
   $344 = +HEAPF32[$c2>>2];
   $345 = HEAP32[$tri>>2]|0;
   $346 = (($345) + 4|0);
   $347 = +HEAPF32[$346>>2];
   $348 = $344 * $347;
   $349 = +HEAPF32[$s1>>2];
   $350 = HEAP32[$tri>>2]|0;
   $351 = +HEAPF32[$350>>2];
   $352 = $349 * $351;
   $353 = $348 + $352;
   HEAPF32[$s1>>2] = $353;
   $354 = HEAP32[$i>>2]|0;
   $355 = (($354) + 1)|0;
   HEAP32[$i>>2] = $355;
  }
  $356 = HEAP32[$tri>>2]|0;
  $357 = (($356) + 8|0);
  HEAP32[$tri>>2] = $357;
  $358 = HEAP32[$k4>>2]|0;
  $359 = HEAP32[$1>>2]|0;
  $360 = ($358|0)<($359|0);
  if (!($360)) {
   break;
  }
 }
 STACKTOP = sp;return;
}
function _InitGainAnalysis($rgData,$samplefreq) {
 $rgData = $rgData|0;
 $samplefreq = $samplefreq|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp + 8|0;
 $1 = sp + 4|0;
 $2 = sp;
 HEAP32[$1>>2] = $rgData;
 HEAP32[$2>>2] = $samplefreq;
 $3 = HEAP32[$1>>2]|0;
 $4 = HEAP32[$2>>2]|0;
 $5 = (_ResetSampleFrequency($3,$4)|0);
 $6 = ($5|0)!=(1);
 if ($6) {
  HEAP32[$0>>2] = 0;
  $38 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($38|0);
 } else {
  $7 = HEAP32[$1>>2]|0;
  $8 = (($7) + 40|0);
  $9 = HEAP32[$1>>2]|0;
  $10 = (($9) + 80|0);
  HEAP32[$10>>2] = $8;
  $11 = HEAP32[$1>>2]|0;
  $12 = (($11) + 19380|0);
  $13 = (($12) + 40|0);
  $14 = HEAP32[$1>>2]|0;
  $15 = (($14) + 19460|0);
  HEAP32[$15>>2] = $13;
  $16 = HEAP32[$1>>2]|0;
  $17 = (($16) + 84|0);
  $18 = (($17) + 40|0);
  $19 = HEAP32[$1>>2]|0;
  $20 = (($19) + 9728|0);
  HEAP32[$20>>2] = $18;
  $21 = HEAP32[$1>>2]|0;
  $22 = (($21) + 19464|0);
  $23 = (($22) + 40|0);
  $24 = HEAP32[$1>>2]|0;
  $25 = (($24) + 29108|0);
  HEAP32[$25>>2] = $23;
  $26 = HEAP32[$1>>2]|0;
  $27 = (($26) + 9732|0);
  $28 = (($27) + 40|0);
  $29 = HEAP32[$1>>2]|0;
  $30 = (($29) + 19376|0);
  HEAP32[$30>>2] = $28;
  $31 = HEAP32[$1>>2]|0;
  $32 = (($31) + 29112|0);
  $33 = (($32) + 40|0);
  $34 = HEAP32[$1>>2]|0;
  $35 = (($34) + 38756|0);
  HEAP32[$35>>2] = $33;
  $36 = HEAP32[$1>>2]|0;
  $37 = (($36) + 86792|0);
  _memset(($37|0),0,48000)|0;
  HEAP32[$0>>2] = 1;
  $38 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($38|0);
 }
 return 0|0;
}
function _ResetSampleFrequency($rgData,$samplefreq) {
 $rgData = $rgData|0;
 $samplefreq = $samplefreq|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp + 12|0;
 $1 = sp + 8|0;
 $2 = sp + 4|0;
 $i = sp;
 HEAP32[$1>>2] = $rgData;
 HEAP32[$2>>2] = $samplefreq;
 HEAP32[$i>>2] = 0;
 while(1) {
  $3 = HEAP32[$i>>2]|0;
  $4 = ($3|0)<(10);
  if (!($4)) {
   break;
  }
  $5 = HEAP32[$i>>2]|0;
  $6 = HEAP32[$1>>2]|0;
  $7 = (($6) + 29112|0);
  $8 = (($7) + ($5<<2)|0);
  HEAPF32[$8>>2] = 0.0;
  $9 = HEAP32[$i>>2]|0;
  $10 = HEAP32[$1>>2]|0;
  $11 = (($10) + 19464|0);
  $12 = (($11) + ($9<<2)|0);
  HEAPF32[$12>>2] = 0.0;
  $13 = HEAP32[$i>>2]|0;
  $14 = HEAP32[$1>>2]|0;
  $15 = (($14) + 19380|0);
  $16 = (($15) + ($13<<2)|0);
  HEAPF32[$16>>2] = 0.0;
  $17 = HEAP32[$i>>2]|0;
  $18 = HEAP32[$1>>2]|0;
  $19 = (($18) + 9732|0);
  $20 = (($19) + ($17<<2)|0);
  HEAPF32[$20>>2] = 0.0;
  $21 = HEAP32[$i>>2]|0;
  $22 = HEAP32[$1>>2]|0;
  $23 = (($22) + 84|0);
  $24 = (($23) + ($21<<2)|0);
  HEAPF32[$24>>2] = 0.0;
  $25 = HEAP32[$i>>2]|0;
  $26 = HEAP32[$1>>2]|0;
  $27 = (($26) + ($25<<2)|0);
  HEAPF32[$27>>2] = 0.0;
  $28 = HEAP32[$i>>2]|0;
  $29 = (($28) + 1)|0;
  HEAP32[$i>>2] = $29;
 }
 $30 = HEAP32[$2>>2]|0;
 do {
  if ((($30|0) == 44100)) {
   $33 = HEAP32[$1>>2]|0;
   $34 = (($33) + 38784|0);
   HEAP32[$34>>2] = 1;
  } else if ((($30|0) == 32000)) {
   $35 = HEAP32[$1>>2]|0;
   $36 = (($35) + 38784|0);
   HEAP32[$36>>2] = 2;
  } else if ((($30|0) == 16000)) {
   $41 = HEAP32[$1>>2]|0;
   $42 = (($41) + 38784|0);
   HEAP32[$42>>2] = 5;
  } else if ((($30|0) == 12000)) {
   $43 = HEAP32[$1>>2]|0;
   $44 = (($43) + 38784|0);
   HEAP32[$44>>2] = 6;
  } else if ((($30|0) == 48000)) {
   $31 = HEAP32[$1>>2]|0;
   $32 = (($31) + 38784|0);
   HEAP32[$32>>2] = 0;
  } else if ((($30|0) == 24000)) {
   $37 = HEAP32[$1>>2]|0;
   $38 = (($37) + 38784|0);
   HEAP32[$38>>2] = 3;
  } else if ((($30|0) == 22050)) {
   $39 = HEAP32[$1>>2]|0;
   $40 = (($39) + 38784|0);
   HEAP32[$40>>2] = 4;
  } else if ((($30|0) == 11025)) {
   $45 = HEAP32[$1>>2]|0;
   $46 = (($45) + 38784|0);
   HEAP32[$46>>2] = 7;
  } else if ((($30|0) == 8000)) {
   $47 = HEAP32[$1>>2]|0;
   $48 = (($47) + 38784|0);
   HEAP32[$48>>2] = 8;
  } else {
   HEAP32[$0>>2] = 0;
   $64 = HEAP32[$0>>2]|0;
   STACKTOP = sp;return ($64|0);
  }
 } while(0);
 $49 = HEAP32[$2>>2]|0;
 $50 = $49;
 $51 = (($50) + 20)|0;
 $52 = (($51) - 1)|0;
 $53 = (($52|0) / 20)&-1;
 $54 = HEAP32[$1>>2]|0;
 $55 = (($54) + 38760|0);
 HEAP32[$55>>2] = $53;
 $56 = HEAP32[$1>>2]|0;
 $57 = (($56) + 38768|0);
 HEAPF64[$57>>3] = 0.0;
 $58 = HEAP32[$1>>2]|0;
 $59 = (($58) + 38776|0);
 HEAPF64[$59>>3] = 0.0;
 $60 = HEAP32[$1>>2]|0;
 $61 = (($60) + 38764|0);
 HEAP32[$61>>2] = 0;
 $62 = HEAP32[$1>>2]|0;
 $63 = (($62) + 38792|0);
 _memset(($63|0),0,48000)|0;
 HEAP32[$0>>2] = 1;
 $64 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($64|0);
}
function _AnalyzeSamples($rgData,$left_samples,$right_samples,$num_samples,$num_channels) {
 $rgData = $rgData|0;
 $left_samples = $left_samples|0;
 $right_samples = $right_samples|0;
 $num_samples = $num_samples|0;
 $num_channels = $num_channels|0;
 var $$ = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0;
 var $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0.0, $158 = 0.0, $159 = 0.0, $16 = 0, $160 = 0, $161 = 0, $162 = 0.0, $163 = 0.0, $164 = 0, $165 = 0, $166 = 0.0, $167 = 0.0, $168 = 0.0, $169 = 0;
 var $17 = 0, $170 = 0, $171 = 0.0, $172 = 0.0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0.0, $18 = 0, $180 = 0.0, $181 = 0.0, $182 = 0, $183 = 0, $184 = 0.0, $185 = 0.0, $186 = 0.0, $187 = 0.0;
 var $188 = 0, $189 = 0, $19 = 0, $190 = 0.0, $191 = 0.0, $192 = 0.0, $193 = 0.0, $194 = 0, $195 = 0, $196 = 0.0, $197 = 0.0, $198 = 0.0, $199 = 0.0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0.0, $203 = 0.0, $204 = 0.0;
 var $205 = 0.0, $206 = 0, $207 = 0, $208 = 0.0, $209 = 0.0, $21 = 0, $210 = 0.0, $211 = 0.0, $212 = 0, $213 = 0, $214 = 0.0, $215 = 0.0, $216 = 0.0, $217 = 0.0, $218 = 0, $219 = 0, $22 = 0, $220 = 0.0, $221 = 0.0, $222 = 0.0;
 var $223 = 0.0, $224 = 0, $225 = 0, $226 = 0.0, $227 = 0.0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0.0, $232 = 0.0, $233 = 0.0, $234 = 0, $235 = 0, $236 = 0.0, $237 = 0.0, $238 = 0.0, $239 = 0.0, $24 = 0, $240 = 0;
 var $241 = 0, $242 = 0.0, $243 = 0.0, $244 = 0.0, $245 = 0.0, $246 = 0, $247 = 0, $248 = 0.0, $249 = 0.0, $25 = 0, $250 = 0.0, $251 = 0.0, $252 = 0, $253 = 0, $254 = 0.0, $255 = 0.0, $256 = 0.0, $257 = 0.0, $258 = 0, $259 = 0;
 var $26 = 0, $260 = 0.0, $261 = 0.0, $262 = 0.0, $263 = 0.0, $264 = 0, $265 = 0, $266 = 0.0, $267 = 0.0, $268 = 0.0, $269 = 0.0, $27 = 0, $270 = 0, $271 = 0, $272 = 0.0, $273 = 0.0, $274 = 0.0, $275 = 0.0, $276 = 0, $277 = 0;
 var $278 = 0.0, $279 = 0.0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0;
 var $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0.0, $303 = 0, $304 = 0, $305 = 0.0, $306 = 0.0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0.0, $311 = 0.0, $312 = 0.0;
 var $313 = 0.0, $314 = 0.0, $315 = 0.0, $316 = 0.0, $317 = 0, $318 = 0.0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0;
 var $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0;
 var $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0;
 var $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0;
 var $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0;
 var $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $batchsamples = 0, $curleft = 0, $curright = 0, $cursamplepos = 0, $cursamples = 0, $i = 0, $ival = 0, $val = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $0 = sp + 56|0;
 $1 = sp + 52|0;
 $2 = sp + 48|0;
 $3 = sp + 44|0;
 $4 = sp + 40|0;
 $5 = sp + 36|0;
 $curleft = sp + 32|0;
 $curright = sp + 28|0;
 $batchsamples = sp + 24|0;
 $cursamples = sp + 20|0;
 $cursamplepos = sp + 16|0;
 $i = sp + 12|0;
 $val = sp;
 $ival = sp + 8|0;
 HEAP32[$1>>2] = $rgData;
 HEAP32[$2>>2] = $left_samples;
 HEAP32[$3>>2] = $right_samples;
 HEAP32[$4>>2] = $num_samples;
 HEAP32[$5>>2] = $num_channels;
 $6 = HEAP32[$4>>2]|0;
 $7 = ($6|0)==(0);
 if ($7) {
  HEAP32[$0>>2] = 1;
  $419 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($419|0);
 }
 HEAP32[$cursamplepos>>2] = 0;
 $8 = HEAP32[$4>>2]|0;
 HEAP32[$batchsamples>>2] = $8;
 $9 = HEAP32[$5>>2]|0;
 if ((($9|0) == 1)) {
  $10 = HEAP32[$2>>2]|0;
  HEAP32[$3>>2] = $10;
 } else if (!((($9|0) == 2))) {
  HEAP32[$0>>2] = 0;
  $419 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($419|0);
 }
 $11 = HEAP32[$4>>2]|0;
 $12 = ($11>>>0)<(10);
 $13 = HEAP32[$1>>2]|0;
 $14 = (($13) + 40|0);
 $15 = HEAP32[$2>>2]|0;
 if ($12) {
  $16 = HEAP32[$4>>2]|0;
  $17 = $16<<2;
  _memcpy(($14|0),($15|0),($17|0))|0;
  $18 = HEAP32[$1>>2]|0;
  $19 = (($18) + 19380|0);
  $20 = (($19) + 40|0);
  $21 = HEAP32[$3>>2]|0;
  $22 = HEAP32[$4>>2]|0;
  $23 = $22<<2;
  _memcpy(($20|0),($21|0),($23|0))|0;
 } else {
  dest=$14+0|0; src=$15+0|0; stop=dest+40|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
  $24 = HEAP32[$1>>2]|0;
  $25 = (($24) + 19380|0);
  $26 = (($25) + 40|0);
  $27 = HEAP32[$3>>2]|0;
  dest=$26+0|0; src=$27+0|0; stop=dest+40|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 }
 while(1) {
  $28 = HEAP32[$batchsamples>>2]|0;
  $29 = ($28|0)>(0);
  if (!($29)) {
   break;
  }
  $30 = HEAP32[$batchsamples>>2]|0;
  $31 = HEAP32[$1>>2]|0;
  $32 = (($31) + 38760|0);
  $33 = HEAP32[$32>>2]|0;
  $34 = HEAP32[$1>>2]|0;
  $35 = (($34) + 38764|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = (($33) - ($36))|0;
  $38 = ($30|0)>($37|0);
  if ($38) {
   $39 = HEAP32[$1>>2]|0;
   $40 = (($39) + 38760|0);
   $41 = HEAP32[$40>>2]|0;
   $42 = HEAP32[$1>>2]|0;
   $43 = (($42) + 38764|0);
   $44 = HEAP32[$43>>2]|0;
   $45 = (($41) - ($44))|0;
   $47 = $45;
  } else {
   $46 = HEAP32[$batchsamples>>2]|0;
   $47 = $46;
  }
  HEAP32[$cursamples>>2] = $47;
  $48 = HEAP32[$cursamplepos>>2]|0;
  $49 = ($48|0)<(10);
  if ($49) {
   $50 = HEAP32[$1>>2]|0;
   $51 = (($50) + 80|0);
   $52 = HEAP32[$51>>2]|0;
   $53 = HEAP32[$cursamplepos>>2]|0;
   $54 = (($52) + ($53<<2)|0);
   HEAP32[$curleft>>2] = $54;
   $55 = HEAP32[$1>>2]|0;
   $56 = (($55) + 19460|0);
   $57 = HEAP32[$56>>2]|0;
   $58 = HEAP32[$cursamplepos>>2]|0;
   $59 = (($57) + ($58<<2)|0);
   HEAP32[$curright>>2] = $59;
   $60 = HEAP32[$cursamples>>2]|0;
   $61 = HEAP32[$cursamplepos>>2]|0;
   $62 = (10 - ($61))|0;
   $63 = ($60|0)>($62|0);
   if ($63) {
    $64 = HEAP32[$cursamplepos>>2]|0;
    $65 = (10 - ($64))|0;
    HEAP32[$cursamples>>2] = $65;
   }
  } else {
   $66 = HEAP32[$2>>2]|0;
   $67 = HEAP32[$cursamplepos>>2]|0;
   $68 = (($66) + ($67<<2)|0);
   HEAP32[$curleft>>2] = $68;
   $69 = HEAP32[$3>>2]|0;
   $70 = HEAP32[$cursamplepos>>2]|0;
   $71 = (($69) + ($70<<2)|0);
   HEAP32[$curright>>2] = $71;
  }
  $72 = HEAP32[$curleft>>2]|0;
  $73 = HEAP32[$1>>2]|0;
  $74 = (($73) + 9728|0);
  $75 = HEAP32[$74>>2]|0;
  $76 = HEAP32[$1>>2]|0;
  $77 = (($76) + 38764|0);
  $78 = HEAP32[$77>>2]|0;
  $79 = (($75) + ($78<<2)|0);
  $80 = HEAP32[$cursamples>>2]|0;
  $81 = HEAP32[$1>>2]|0;
  $82 = (($81) + 38784|0);
  $83 = HEAP32[$82>>2]|0;
  $84 = (5472 + (($83*84)|0)|0);
  _filterYule($72,$79,$80,$84);
  $85 = HEAP32[$curright>>2]|0;
  $86 = HEAP32[$1>>2]|0;
  $87 = (($86) + 29108|0);
  $88 = HEAP32[$87>>2]|0;
  $89 = HEAP32[$1>>2]|0;
  $90 = (($89) + 38764|0);
  $91 = HEAP32[$90>>2]|0;
  $92 = (($88) + ($91<<2)|0);
  $93 = HEAP32[$cursamples>>2]|0;
  $94 = HEAP32[$1>>2]|0;
  $95 = (($94) + 38784|0);
  $96 = HEAP32[$95>>2]|0;
  $97 = (5472 + (($96*84)|0)|0);
  _filterYule($85,$92,$93,$97);
  $98 = HEAP32[$1>>2]|0;
  $99 = (($98) + 9728|0);
  $100 = HEAP32[$99>>2]|0;
  $101 = HEAP32[$1>>2]|0;
  $102 = (($101) + 38764|0);
  $103 = HEAP32[$102>>2]|0;
  $104 = (($100) + ($103<<2)|0);
  $105 = HEAP32[$1>>2]|0;
  $106 = (($105) + 19376|0);
  $107 = HEAP32[$106>>2]|0;
  $108 = HEAP32[$1>>2]|0;
  $109 = (($108) + 38764|0);
  $110 = HEAP32[$109>>2]|0;
  $111 = (($107) + ($110<<2)|0);
  $112 = HEAP32[$cursamples>>2]|0;
  $113 = HEAP32[$1>>2]|0;
  $114 = (($113) + 38784|0);
  $115 = HEAP32[$114>>2]|0;
  $116 = (6232 + (($115*20)|0)|0);
  _filterButter($104,$111,$112,$116);
  $117 = HEAP32[$1>>2]|0;
  $118 = (($117) + 29108|0);
  $119 = HEAP32[$118>>2]|0;
  $120 = HEAP32[$1>>2]|0;
  $121 = (($120) + 38764|0);
  $122 = HEAP32[$121>>2]|0;
  $123 = (($119) + ($122<<2)|0);
  $124 = HEAP32[$1>>2]|0;
  $125 = (($124) + 38756|0);
  $126 = HEAP32[$125>>2]|0;
  $127 = HEAP32[$1>>2]|0;
  $128 = (($127) + 38764|0);
  $129 = HEAP32[$128>>2]|0;
  $130 = (($126) + ($129<<2)|0);
  $131 = HEAP32[$cursamples>>2]|0;
  $132 = HEAP32[$1>>2]|0;
  $133 = (($132) + 38784|0);
  $134 = HEAP32[$133>>2]|0;
  $135 = (6232 + (($134*20)|0)|0);
  _filterButter($123,$130,$131,$135);
  $136 = HEAP32[$1>>2]|0;
  $137 = (($136) + 19376|0);
  $138 = HEAP32[$137>>2]|0;
  $139 = HEAP32[$1>>2]|0;
  $140 = (($139) + 38764|0);
  $141 = HEAP32[$140>>2]|0;
  $142 = (($138) + ($141<<2)|0);
  HEAP32[$curleft>>2] = $142;
  $143 = HEAP32[$1>>2]|0;
  $144 = (($143) + 38756|0);
  $145 = HEAP32[$144>>2]|0;
  $146 = HEAP32[$1>>2]|0;
  $147 = (($146) + 38764|0);
  $148 = HEAP32[$147>>2]|0;
  $149 = (($145) + ($148<<2)|0);
  HEAP32[$curright>>2] = $149;
  $150 = HEAP32[$cursamples>>2]|0;
  $151 = (($150|0) % 8)&-1;
  HEAP32[$i>>2] = $151;
  while(1) {
   $152 = HEAP32[$i>>2]|0;
   $153 = (($152) + -1)|0;
   HEAP32[$i>>2] = $153;
   $154 = ($152|0)!=(0);
   if (!($154)) {
    break;
   }
   $155 = HEAP32[$curleft>>2]|0;
   $156 = (($155) + 4|0);
   HEAP32[$curleft>>2] = $156;
   $157 = +HEAPF32[$155>>2];
   $158 = $157;
   $159 = (+_fsqr($158));
   $160 = HEAP32[$1>>2]|0;
   $161 = (($160) + 38768|0);
   $162 = +HEAPF64[$161>>3];
   $163 = $162 + $159;
   HEAPF64[$161>>3] = $163;
   $164 = HEAP32[$curright>>2]|0;
   $165 = (($164) + 4|0);
   HEAP32[$curright>>2] = $165;
   $166 = +HEAPF32[$164>>2];
   $167 = $166;
   $168 = (+_fsqr($167));
   $169 = HEAP32[$1>>2]|0;
   $170 = (($169) + 38776|0);
   $171 = +HEAPF64[$170>>3];
   $172 = $171 + $168;
   HEAPF64[$170>>3] = $172;
  }
  $173 = HEAP32[$cursamples>>2]|0;
  $174 = (($173|0) / 8)&-1;
  HEAP32[$i>>2] = $174;
  while(1) {
   $175 = HEAP32[$i>>2]|0;
   $176 = (($175) + -1)|0;
   HEAP32[$i>>2] = $176;
   $177 = ($175|0)!=(0);
   if (!($177)) {
    break;
   }
   $178 = HEAP32[$curleft>>2]|0;
   $179 = +HEAPF32[$178>>2];
   $180 = $179;
   $181 = (+_fsqr($180));
   $182 = HEAP32[$curleft>>2]|0;
   $183 = (($182) + 4|0);
   $184 = +HEAPF32[$183>>2];
   $185 = $184;
   $186 = (+_fsqr($185));
   $187 = $181 + $186;
   $188 = HEAP32[$curleft>>2]|0;
   $189 = (($188) + 8|0);
   $190 = +HEAPF32[$189>>2];
   $191 = $190;
   $192 = (+_fsqr($191));
   $193 = $187 + $192;
   $194 = HEAP32[$curleft>>2]|0;
   $195 = (($194) + 12|0);
   $196 = +HEAPF32[$195>>2];
   $197 = $196;
   $198 = (+_fsqr($197));
   $199 = $193 + $198;
   $200 = HEAP32[$curleft>>2]|0;
   $201 = (($200) + 16|0);
   $202 = +HEAPF32[$201>>2];
   $203 = $202;
   $204 = (+_fsqr($203));
   $205 = $199 + $204;
   $206 = HEAP32[$curleft>>2]|0;
   $207 = (($206) + 20|0);
   $208 = +HEAPF32[$207>>2];
   $209 = $208;
   $210 = (+_fsqr($209));
   $211 = $205 + $210;
   $212 = HEAP32[$curleft>>2]|0;
   $213 = (($212) + 24|0);
   $214 = +HEAPF32[$213>>2];
   $215 = $214;
   $216 = (+_fsqr($215));
   $217 = $211 + $216;
   $218 = HEAP32[$curleft>>2]|0;
   $219 = (($218) + 28|0);
   $220 = +HEAPF32[$219>>2];
   $221 = $220;
   $222 = (+_fsqr($221));
   $223 = $217 + $222;
   $224 = HEAP32[$1>>2]|0;
   $225 = (($224) + 38768|0);
   $226 = +HEAPF64[$225>>3];
   $227 = $226 + $223;
   HEAPF64[$225>>3] = $227;
   $228 = HEAP32[$curleft>>2]|0;
   $229 = (($228) + 32|0);
   HEAP32[$curleft>>2] = $229;
   $230 = HEAP32[$curright>>2]|0;
   $231 = +HEAPF32[$230>>2];
   $232 = $231;
   $233 = (+_fsqr($232));
   $234 = HEAP32[$curright>>2]|0;
   $235 = (($234) + 4|0);
   $236 = +HEAPF32[$235>>2];
   $237 = $236;
   $238 = (+_fsqr($237));
   $239 = $233 + $238;
   $240 = HEAP32[$curright>>2]|0;
   $241 = (($240) + 8|0);
   $242 = +HEAPF32[$241>>2];
   $243 = $242;
   $244 = (+_fsqr($243));
   $245 = $239 + $244;
   $246 = HEAP32[$curright>>2]|0;
   $247 = (($246) + 12|0);
   $248 = +HEAPF32[$247>>2];
   $249 = $248;
   $250 = (+_fsqr($249));
   $251 = $245 + $250;
   $252 = HEAP32[$curright>>2]|0;
   $253 = (($252) + 16|0);
   $254 = +HEAPF32[$253>>2];
   $255 = $254;
   $256 = (+_fsqr($255));
   $257 = $251 + $256;
   $258 = HEAP32[$curright>>2]|0;
   $259 = (($258) + 20|0);
   $260 = +HEAPF32[$259>>2];
   $261 = $260;
   $262 = (+_fsqr($261));
   $263 = $257 + $262;
   $264 = HEAP32[$curright>>2]|0;
   $265 = (($264) + 24|0);
   $266 = +HEAPF32[$265>>2];
   $267 = $266;
   $268 = (+_fsqr($267));
   $269 = $263 + $268;
   $270 = HEAP32[$curright>>2]|0;
   $271 = (($270) + 28|0);
   $272 = +HEAPF32[$271>>2];
   $273 = $272;
   $274 = (+_fsqr($273));
   $275 = $269 + $274;
   $276 = HEAP32[$1>>2]|0;
   $277 = (($276) + 38776|0);
   $278 = +HEAPF64[$277>>3];
   $279 = $278 + $275;
   HEAPF64[$277>>3] = $279;
   $280 = HEAP32[$curright>>2]|0;
   $281 = (($280) + 32|0);
   HEAP32[$curright>>2] = $281;
  }
  $282 = HEAP32[$cursamples>>2]|0;
  $283 = HEAP32[$batchsamples>>2]|0;
  $284 = (($283) - ($282))|0;
  HEAP32[$batchsamples>>2] = $284;
  $285 = HEAP32[$cursamples>>2]|0;
  $286 = HEAP32[$cursamplepos>>2]|0;
  $287 = (($286) + ($285))|0;
  HEAP32[$cursamplepos>>2] = $287;
  $288 = HEAP32[$cursamples>>2]|0;
  $289 = HEAP32[$1>>2]|0;
  $290 = (($289) + 38764|0);
  $291 = HEAP32[$290>>2]|0;
  $292 = (($291) + ($288))|0;
  HEAP32[$290>>2] = $292;
  $293 = HEAP32[$1>>2]|0;
  $294 = (($293) + 38764|0);
  $295 = HEAP32[$294>>2]|0;
  $296 = HEAP32[$1>>2]|0;
  $297 = (($296) + 38760|0);
  $298 = HEAP32[$297>>2]|0;
  $299 = ($295|0)==($298|0);
  if ($299) {
   $300 = HEAP32[$1>>2]|0;
   $301 = (($300) + 38768|0);
   $302 = +HEAPF64[$301>>3];
   $303 = HEAP32[$1>>2]|0;
   $304 = (($303) + 38776|0);
   $305 = +HEAPF64[$304>>3];
   $306 = $302 + $305;
   $307 = HEAP32[$1>>2]|0;
   $308 = (($307) + 38764|0);
   $309 = HEAP32[$308>>2]|0;
   $310 = (+($309|0));
   $311 = $306 / $310;
   $312 = $311 * 0.5;
   $313 = $312 + 1.00000000000000006632E-37;
   $314 = (+_log10((+$313)));
   $315 = 1000.0 * $314;
   HEAPF64[$val>>3] = $315;
   $316 = +HEAPF64[$val>>3];
   $317 = $316 <= 0.0;
   if ($317) {
    $320 = 0;
   } else {
    $318 = +HEAPF64[$val>>3];
    $319 = (~~(($318))>>>0);
    $320 = $319;
   }
   HEAP32[$ival>>2] = $320;
   $321 = HEAP32[$ival>>2]|0;
   $322 = ($321>>>0)>=(12000);
   $$ = $322 ? 11999 : $320;
   HEAP32[$ival>>2] = $$;
   $323 = HEAP32[$ival>>2]|0;
   $324 = HEAP32[$1>>2]|0;
   $325 = (($324) + 38792|0);
   $326 = (($325) + ($323<<2)|0);
   $327 = HEAP32[$326>>2]|0;
   $328 = (($327) + 1)|0;
   HEAP32[$326>>2] = $328;
   $329 = HEAP32[$1>>2]|0;
   $330 = (($329) + 38776|0);
   HEAPF64[$330>>3] = 0.0;
   $331 = HEAP32[$1>>2]|0;
   $332 = (($331) + 38768|0);
   HEAPF64[$332>>3] = 0.0;
   $333 = HEAP32[$1>>2]|0;
   $334 = (($333) + 9732|0);
   $335 = HEAP32[$1>>2]|0;
   $336 = (($335) + 9732|0);
   $337 = HEAP32[$1>>2]|0;
   $338 = (($337) + 38764|0);
   $339 = HEAP32[$338>>2]|0;
   $340 = (($336) + ($339<<2)|0);
   _memmove(($334|0),($340|0),40)|0;
   $341 = HEAP32[$1>>2]|0;
   $342 = (($341) + 29112|0);
   $343 = HEAP32[$1>>2]|0;
   $344 = (($343) + 29112|0);
   $345 = HEAP32[$1>>2]|0;
   $346 = (($345) + 38764|0);
   $347 = HEAP32[$346>>2]|0;
   $348 = (($344) + ($347<<2)|0);
   _memmove(($342|0),($348|0),40)|0;
   $349 = HEAP32[$1>>2]|0;
   $350 = (($349) + 84|0);
   $351 = HEAP32[$1>>2]|0;
   $352 = (($351) + 84|0);
   $353 = HEAP32[$1>>2]|0;
   $354 = (($353) + 38764|0);
   $355 = HEAP32[$354>>2]|0;
   $356 = (($352) + ($355<<2)|0);
   _memmove(($350|0),($356|0),40)|0;
   $357 = HEAP32[$1>>2]|0;
   $358 = (($357) + 19464|0);
   $359 = HEAP32[$1>>2]|0;
   $360 = (($359) + 19464|0);
   $361 = HEAP32[$1>>2]|0;
   $362 = (($361) + 38764|0);
   $363 = HEAP32[$362>>2]|0;
   $364 = (($360) + ($363<<2)|0);
   _memmove(($358|0),($364|0),40)|0;
   $365 = HEAP32[$1>>2]|0;
   $366 = (($365) + 38764|0);
   HEAP32[$366>>2] = 0;
  }
  $367 = HEAP32[$1>>2]|0;
  $368 = (($367) + 38764|0);
  $369 = HEAP32[$368>>2]|0;
  $370 = HEAP32[$1>>2]|0;
  $371 = (($370) + 38760|0);
  $372 = HEAP32[$371>>2]|0;
  $373 = ($369|0)>($372|0);
  if ($373) {
   label = 28;
   break;
  }
 }
 if ((label|0) == 28) {
  HEAP32[$0>>2] = 0;
  $419 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($419|0);
 }
 $374 = HEAP32[$4>>2]|0;
 $375 = ($374>>>0)<(10);
 $376 = HEAP32[$1>>2]|0;
 if ($375) {
  $377 = HEAP32[$1>>2]|0;
  $378 = HEAP32[$4>>2]|0;
  $379 = (($377) + ($378<<2)|0);
  $380 = HEAP32[$4>>2]|0;
  $381 = (10 - ($380))|0;
  $382 = $381<<2;
  _memmove(($376|0),($379|0),($382|0))|0;
  $383 = HEAP32[$1>>2]|0;
  $384 = (($383) + 19380|0);
  $385 = HEAP32[$1>>2]|0;
  $386 = (($385) + 19380|0);
  $387 = HEAP32[$4>>2]|0;
  $388 = (($386) + ($387<<2)|0);
  $389 = HEAP32[$4>>2]|0;
  $390 = (10 - ($389))|0;
  $391 = $390<<2;
  _memmove(($384|0),($388|0),($391|0))|0;
  $392 = HEAP32[$1>>2]|0;
  $393 = (($392) + 40|0);
  $394 = HEAP32[$4>>2]|0;
  $395 = (0 - ($394))|0;
  $396 = (($393) + ($395<<2)|0);
  $397 = HEAP32[$2>>2]|0;
  $398 = HEAP32[$4>>2]|0;
  $399 = $398<<2;
  _memcpy(($396|0),($397|0),($399|0))|0;
  $400 = HEAP32[$1>>2]|0;
  $401 = (($400) + 19380|0);
  $402 = (($401) + 40|0);
  $403 = HEAP32[$4>>2]|0;
  $404 = (0 - ($403))|0;
  $405 = (($402) + ($404<<2)|0);
  $406 = HEAP32[$3>>2]|0;
  $407 = HEAP32[$4>>2]|0;
  $408 = $407<<2;
  _memcpy(($405|0),($406|0),($408|0))|0;
 } else {
  $409 = HEAP32[$2>>2]|0;
  $410 = HEAP32[$4>>2]|0;
  $411 = (($409) + ($410<<2)|0);
  $412 = (($411) + -40|0);
  dest=$376+0|0; src=$412+0|0; stop=dest+40|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
  $413 = HEAP32[$1>>2]|0;
  $414 = (($413) + 19380|0);
  $415 = HEAP32[$3>>2]|0;
  $416 = HEAP32[$4>>2]|0;
  $417 = (($415) + ($416<<2)|0);
  $418 = (($417) + -40|0);
  dest=$414+0|0; src=$418+0|0; stop=dest+40|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 }
 HEAP32[$0>>2] = 1;
 $419 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($419|0);
}
function _filterYule($input,$output,$nSamples,$kernel) {
 $input = $input|0;
 $output = $output|0;
 $nSamples = $nSamples|0;
 $kernel = $kernel|0;
 var $0 = 0, $1 = 0, $10 = 0.0, $100 = 0.0, $101 = 0.0, $102 = 0.0, $103 = 0.0, $104 = 0, $105 = 0, $106 = 0.0, $107 = 0, $108 = 0, $109 = 0.0, $11 = 0.0, $110 = 0.0, $111 = 0.0, $112 = 0.0, $113 = 0, $114 = 0, $115 = 0.0;
 var $116 = 0, $117 = 0, $118 = 0.0, $119 = 0.0, $12 = 0.0, $120 = 0.0, $121 = 0.0, $122 = 0, $123 = 0, $124 = 0.0, $125 = 0, $126 = 0, $127 = 0.0, $128 = 0.0, $129 = 0.0, $13 = 0.0, $130 = 0.0, $131 = 0, $132 = 0, $133 = 0.0;
 var $134 = 0, $135 = 0, $136 = 0.0, $137 = 0.0, $138 = 0.0, $139 = 0.0, $14 = 0, $140 = 0, $141 = 0, $142 = 0.0, $143 = 0, $144 = 0, $145 = 0.0, $146 = 0.0, $147 = 0.0, $148 = 0.0, $149 = 0, $15 = 0, $150 = 0, $151 = 0.0;
 var $152 = 0, $153 = 0, $154 = 0.0, $155 = 0.0, $156 = 0.0, $157 = 0.0, $158 = 0, $159 = 0, $16 = 0.0, $160 = 0.0, $161 = 0, $162 = 0, $163 = 0.0, $164 = 0.0, $165 = 0.0, $166 = 0.0, $167 = 0, $168 = 0, $169 = 0.0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0.0, $173 = 0.0, $174 = 0.0, $175 = 0.0, $176 = 0, $177 = 0, $178 = 0.0, $179 = 0, $18 = 0, $180 = 0, $181 = 0.0, $182 = 0.0, $183 = 0.0, $184 = 0.0, $185 = 0, $186 = 0, $187 = 0.0, $188 = 0;
 var $189 = 0, $19 = 0.0, $190 = 0.0, $191 = 0.0, $192 = 0.0, $193 = 0.0, $194 = 0.0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0, $24 = 0, $25 = 0.0, $26 = 0;
 var $27 = 0, $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0, $33 = 0, $34 = 0.0, $35 = 0, $36 = 0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0, $42 = 0, $43 = 0.0, $44 = 0;
 var $45 = 0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0, $51 = 0, $52 = 0.0, $53 = 0, $54 = 0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0, $6 = 0, $60 = 0, $61 = 0.0, $62 = 0;
 var $63 = 0, $64 = 0.0, $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0, $69 = 0, $7 = 0, $70 = 0.0, $71 = 0, $72 = 0, $73 = 0.0, $74 = 0.0, $75 = 0.0, $76 = 0.0, $77 = 0, $78 = 0, $79 = 0.0, $8 = 0.0, $80 = 0;
 var $81 = 0, $82 = 0.0, $83 = 0.0, $84 = 0.0, $85 = 0.0, $86 = 0, $87 = 0, $88 = 0.0, $89 = 0, $9 = 0, $90 = 0, $91 = 0.0, $92 = 0.0, $93 = 0.0, $94 = 0.0, $95 = 0, $96 = 0, $97 = 0.0, $98 = 0, $99 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp + 12|0;
 $1 = sp + 8|0;
 $2 = sp + 4|0;
 $3 = sp;
 HEAP32[$0>>2] = $input;
 HEAP32[$1>>2] = $output;
 HEAP32[$2>>2] = $nSamples;
 HEAP32[$3>>2] = $kernel;
 while(1) {
  $4 = HEAP32[$2>>2]|0;
  $5 = (($4) + -1)|0;
  HEAP32[$2>>2] = $5;
  $6 = ($4|0)!=(0);
  if (!($6)) {
   break;
  }
  $7 = HEAP32[$0>>2]|0;
  $8 = +HEAPF32[$7>>2];
  $9 = HEAP32[$3>>2]|0;
  $10 = +HEAPF32[$9>>2];
  $11 = $8 * $10;
  $12 = $11;
  $13 = 1.00000000000000003643E-10 + $12;
  $14 = HEAP32[$1>>2]|0;
  $15 = (($14) + -4|0);
  $16 = +HEAPF32[$15>>2];
  $17 = HEAP32[$3>>2]|0;
  $18 = (($17) + 4|0);
  $19 = +HEAPF32[$18>>2];
  $20 = $16 * $19;
  $21 = $20;
  $22 = $13 - $21;
  $23 = HEAP32[$0>>2]|0;
  $24 = (($23) + -4|0);
  $25 = +HEAPF32[$24>>2];
  $26 = HEAP32[$3>>2]|0;
  $27 = (($26) + 8|0);
  $28 = +HEAPF32[$27>>2];
  $29 = $25 * $28;
  $30 = $29;
  $31 = $22 + $30;
  $32 = HEAP32[$1>>2]|0;
  $33 = (($32) + -8|0);
  $34 = +HEAPF32[$33>>2];
  $35 = HEAP32[$3>>2]|0;
  $36 = (($35) + 12|0);
  $37 = +HEAPF32[$36>>2];
  $38 = $34 * $37;
  $39 = $38;
  $40 = $31 - $39;
  $41 = HEAP32[$0>>2]|0;
  $42 = (($41) + -8|0);
  $43 = +HEAPF32[$42>>2];
  $44 = HEAP32[$3>>2]|0;
  $45 = (($44) + 16|0);
  $46 = +HEAPF32[$45>>2];
  $47 = $43 * $46;
  $48 = $47;
  $49 = $40 + $48;
  $50 = HEAP32[$1>>2]|0;
  $51 = (($50) + -12|0);
  $52 = +HEAPF32[$51>>2];
  $53 = HEAP32[$3>>2]|0;
  $54 = (($53) + 20|0);
  $55 = +HEAPF32[$54>>2];
  $56 = $52 * $55;
  $57 = $56;
  $58 = $49 - $57;
  $59 = HEAP32[$0>>2]|0;
  $60 = (($59) + -12|0);
  $61 = +HEAPF32[$60>>2];
  $62 = HEAP32[$3>>2]|0;
  $63 = (($62) + 24|0);
  $64 = +HEAPF32[$63>>2];
  $65 = $61 * $64;
  $66 = $65;
  $67 = $58 + $66;
  $68 = HEAP32[$1>>2]|0;
  $69 = (($68) + -16|0);
  $70 = +HEAPF32[$69>>2];
  $71 = HEAP32[$3>>2]|0;
  $72 = (($71) + 28|0);
  $73 = +HEAPF32[$72>>2];
  $74 = $70 * $73;
  $75 = $74;
  $76 = $67 - $75;
  $77 = HEAP32[$0>>2]|0;
  $78 = (($77) + -16|0);
  $79 = +HEAPF32[$78>>2];
  $80 = HEAP32[$3>>2]|0;
  $81 = (($80) + 32|0);
  $82 = +HEAPF32[$81>>2];
  $83 = $79 * $82;
  $84 = $83;
  $85 = $76 + $84;
  $86 = HEAP32[$1>>2]|0;
  $87 = (($86) + -20|0);
  $88 = +HEAPF32[$87>>2];
  $89 = HEAP32[$3>>2]|0;
  $90 = (($89) + 36|0);
  $91 = +HEAPF32[$90>>2];
  $92 = $88 * $91;
  $93 = $92;
  $94 = $85 - $93;
  $95 = HEAP32[$0>>2]|0;
  $96 = (($95) + -20|0);
  $97 = +HEAPF32[$96>>2];
  $98 = HEAP32[$3>>2]|0;
  $99 = (($98) + 40|0);
  $100 = +HEAPF32[$99>>2];
  $101 = $97 * $100;
  $102 = $101;
  $103 = $94 + $102;
  $104 = HEAP32[$1>>2]|0;
  $105 = (($104) + -24|0);
  $106 = +HEAPF32[$105>>2];
  $107 = HEAP32[$3>>2]|0;
  $108 = (($107) + 44|0);
  $109 = +HEAPF32[$108>>2];
  $110 = $106 * $109;
  $111 = $110;
  $112 = $103 - $111;
  $113 = HEAP32[$0>>2]|0;
  $114 = (($113) + -24|0);
  $115 = +HEAPF32[$114>>2];
  $116 = HEAP32[$3>>2]|0;
  $117 = (($116) + 48|0);
  $118 = +HEAPF32[$117>>2];
  $119 = $115 * $118;
  $120 = $119;
  $121 = $112 + $120;
  $122 = HEAP32[$1>>2]|0;
  $123 = (($122) + -28|0);
  $124 = +HEAPF32[$123>>2];
  $125 = HEAP32[$3>>2]|0;
  $126 = (($125) + 52|0);
  $127 = +HEAPF32[$126>>2];
  $128 = $124 * $127;
  $129 = $128;
  $130 = $121 - $129;
  $131 = HEAP32[$0>>2]|0;
  $132 = (($131) + -28|0);
  $133 = +HEAPF32[$132>>2];
  $134 = HEAP32[$3>>2]|0;
  $135 = (($134) + 56|0);
  $136 = +HEAPF32[$135>>2];
  $137 = $133 * $136;
  $138 = $137;
  $139 = $130 + $138;
  $140 = HEAP32[$1>>2]|0;
  $141 = (($140) + -32|0);
  $142 = +HEAPF32[$141>>2];
  $143 = HEAP32[$3>>2]|0;
  $144 = (($143) + 60|0);
  $145 = +HEAPF32[$144>>2];
  $146 = $142 * $145;
  $147 = $146;
  $148 = $139 - $147;
  $149 = HEAP32[$0>>2]|0;
  $150 = (($149) + -32|0);
  $151 = +HEAPF32[$150>>2];
  $152 = HEAP32[$3>>2]|0;
  $153 = (($152) + 64|0);
  $154 = +HEAPF32[$153>>2];
  $155 = $151 * $154;
  $156 = $155;
  $157 = $148 + $156;
  $158 = HEAP32[$1>>2]|0;
  $159 = (($158) + -36|0);
  $160 = +HEAPF32[$159>>2];
  $161 = HEAP32[$3>>2]|0;
  $162 = (($161) + 68|0);
  $163 = +HEAPF32[$162>>2];
  $164 = $160 * $163;
  $165 = $164;
  $166 = $157 - $165;
  $167 = HEAP32[$0>>2]|0;
  $168 = (($167) + -36|0);
  $169 = +HEAPF32[$168>>2];
  $170 = HEAP32[$3>>2]|0;
  $171 = (($170) + 72|0);
  $172 = +HEAPF32[$171>>2];
  $173 = $169 * $172;
  $174 = $173;
  $175 = $166 + $174;
  $176 = HEAP32[$1>>2]|0;
  $177 = (($176) + -40|0);
  $178 = +HEAPF32[$177>>2];
  $179 = HEAP32[$3>>2]|0;
  $180 = (($179) + 76|0);
  $181 = +HEAPF32[$180>>2];
  $182 = $178 * $181;
  $183 = $182;
  $184 = $175 - $183;
  $185 = HEAP32[$0>>2]|0;
  $186 = (($185) + -40|0);
  $187 = +HEAPF32[$186>>2];
  $188 = HEAP32[$3>>2]|0;
  $189 = (($188) + 80|0);
  $190 = +HEAPF32[$189>>2];
  $191 = $187 * $190;
  $192 = $191;
  $193 = $184 + $192;
  $194 = $193;
  $195 = HEAP32[$1>>2]|0;
  HEAPF32[$195>>2] = $194;
  $196 = HEAP32[$1>>2]|0;
  $197 = (($196) + 4|0);
  HEAP32[$1>>2] = $197;
  $198 = HEAP32[$0>>2]|0;
  $199 = (($198) + 4|0);
  HEAP32[$0>>2] = $199;
 }
 STACKTOP = sp;return;
}
function _filterButter($input,$output,$nSamples,$kernel) {
 $input = $input|0;
 $output = $output|0;
 $nSamples = $nSamples|0;
 $kernel = $kernel|0;
 var $0 = 0, $1 = 0, $10 = 0.0, $11 = 0.0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0, $21 = 0, $22 = 0.0, $23 = 0, $24 = 0, $25 = 0.0, $26 = 0.0;
 var $27 = 0.0, $28 = 0, $29 = 0, $3 = 0, $30 = 0.0, $31 = 0, $32 = 0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0, $37 = 0, $38 = 0.0, $39 = 0, $4 = 0, $40 = 0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp + 12|0;
 $1 = sp + 8|0;
 $2 = sp + 4|0;
 $3 = sp;
 HEAP32[$0>>2] = $input;
 HEAP32[$1>>2] = $output;
 HEAP32[$2>>2] = $nSamples;
 HEAP32[$3>>2] = $kernel;
 while(1) {
  $4 = HEAP32[$2>>2]|0;
  $5 = (($4) + -1)|0;
  HEAP32[$2>>2] = $5;
  $6 = ($4|0)!=(0);
  if (!($6)) {
   break;
  }
  $7 = HEAP32[$0>>2]|0;
  $8 = +HEAPF32[$7>>2];
  $9 = HEAP32[$3>>2]|0;
  $10 = +HEAPF32[$9>>2];
  $11 = $8 * $10;
  $12 = HEAP32[$1>>2]|0;
  $13 = (($12) + -4|0);
  $14 = +HEAPF32[$13>>2];
  $15 = HEAP32[$3>>2]|0;
  $16 = (($15) + 4|0);
  $17 = +HEAPF32[$16>>2];
  $18 = $14 * $17;
  $19 = $11 - $18;
  $20 = HEAP32[$0>>2]|0;
  $21 = (($20) + -4|0);
  $22 = +HEAPF32[$21>>2];
  $23 = HEAP32[$3>>2]|0;
  $24 = (($23) + 8|0);
  $25 = +HEAPF32[$24>>2];
  $26 = $22 * $25;
  $27 = $19 + $26;
  $28 = HEAP32[$1>>2]|0;
  $29 = (($28) + -8|0);
  $30 = +HEAPF32[$29>>2];
  $31 = HEAP32[$3>>2]|0;
  $32 = (($31) + 12|0);
  $33 = +HEAPF32[$32>>2];
  $34 = $30 * $33;
  $35 = $27 - $34;
  $36 = HEAP32[$0>>2]|0;
  $37 = (($36) + -8|0);
  $38 = +HEAPF32[$37>>2];
  $39 = HEAP32[$3>>2]|0;
  $40 = (($39) + 16|0);
  $41 = +HEAPF32[$40>>2];
  $42 = $38 * $41;
  $43 = $35 + $42;
  $44 = HEAP32[$1>>2]|0;
  HEAPF32[$44>>2] = $43;
  $45 = HEAP32[$1>>2]|0;
  $46 = (($45) + 4|0);
  HEAP32[$1>>2] = $46;
  $47 = HEAP32[$0>>2]|0;
  $48 = (($47) + 4|0);
  HEAP32[$0>>2] = $48;
 }
 STACKTOP = sp;return;
}
function _fsqr($d) {
 $d = +$d;
 var $0 = 0, $1 = 0.0, $2 = 0.0, $3 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp;
 HEAPF64[$0>>3] = $d;
 $1 = +HEAPF64[$0>>3];
 $2 = +HEAPF64[$0>>3];
 $3 = $1 * $2;
 STACKTOP = sp;return (+$3);
}
function _GetTitleGain($rgData) {
 $rgData = $rgData|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0.0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0.0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, $retval = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp + 8|0;
 $retval = sp + 4|0;
 $i = sp;
 HEAP32[$0>>2] = $rgData;
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 38792|0);
 $3 = (+_analyzeResult($2,12000));
 HEAPF32[$retval>>2] = $3;
 HEAP32[$i>>2] = 0;
 while(1) {
  $4 = HEAP32[$i>>2]|0;
  $5 = ($4>>>0)<(12000);
  if (!($5)) {
   break;
  }
  $6 = HEAP32[$i>>2]|0;
  $7 = HEAP32[$0>>2]|0;
  $8 = (($7) + 38792|0);
  $9 = (($8) + ($6<<2)|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = HEAP32[$i>>2]|0;
  $12 = HEAP32[$0>>2]|0;
  $13 = (($12) + 86792|0);
  $14 = (($13) + ($11<<2)|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = (($15) + ($10))|0;
  HEAP32[$14>>2] = $16;
  $17 = HEAP32[$i>>2]|0;
  $18 = HEAP32[$0>>2]|0;
  $19 = (($18) + 38792|0);
  $20 = (($19) + ($17<<2)|0);
  HEAP32[$20>>2] = 0;
  $21 = HEAP32[$i>>2]|0;
  $22 = (($21) + 1)|0;
  HEAP32[$i>>2] = $22;
 }
 HEAP32[$i>>2] = 0;
 while(1) {
  $23 = HEAP32[$i>>2]|0;
  $24 = ($23>>>0)<(10);
  if (!($24)) {
   break;
  }
  $25 = HEAP32[$i>>2]|0;
  $26 = HEAP32[$0>>2]|0;
  $27 = (($26) + 29112|0);
  $28 = (($27) + ($25<<2)|0);
  HEAPF32[$28>>2] = 0.0;
  $29 = HEAP32[$i>>2]|0;
  $30 = HEAP32[$0>>2]|0;
  $31 = (($30) + 19464|0);
  $32 = (($31) + ($29<<2)|0);
  HEAPF32[$32>>2] = 0.0;
  $33 = HEAP32[$i>>2]|0;
  $34 = HEAP32[$0>>2]|0;
  $35 = (($34) + 19380|0);
  $36 = (($35) + ($33<<2)|0);
  HEAPF32[$36>>2] = 0.0;
  $37 = HEAP32[$i>>2]|0;
  $38 = HEAP32[$0>>2]|0;
  $39 = (($38) + 9732|0);
  $40 = (($39) + ($37<<2)|0);
  HEAPF32[$40>>2] = 0.0;
  $41 = HEAP32[$i>>2]|0;
  $42 = HEAP32[$0>>2]|0;
  $43 = (($42) + 84|0);
  $44 = (($43) + ($41<<2)|0);
  HEAPF32[$44>>2] = 0.0;
  $45 = HEAP32[$i>>2]|0;
  $46 = HEAP32[$0>>2]|0;
  $47 = (($46) + ($45<<2)|0);
  HEAPF32[$47>>2] = 0.0;
  $48 = HEAP32[$i>>2]|0;
  $49 = (($48) + 1)|0;
  HEAP32[$i>>2] = $49;
 }
 $50 = HEAP32[$0>>2]|0;
 $51 = (($50) + 38764|0);
 HEAP32[$51>>2] = 0;
 $52 = HEAP32[$0>>2]|0;
 $53 = (($52) + 38776|0);
 HEAPF64[$53>>3] = 0.0;
 $54 = HEAP32[$0>>2]|0;
 $55 = (($54) + 38768|0);
 HEAPF64[$55>>3] = 0.0;
 $56 = +HEAPF32[$retval>>2];
 STACKTOP = sp;return (+$56);
}
function _analyzeResult($Array,$len) {
 $Array = $Array|0;
 $len = $len|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $elems = 0;
 var $i = 0, $sum = 0, $upper = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = sp + 24|0;
 $1 = sp + 20|0;
 $2 = sp + 16|0;
 $elems = sp + 12|0;
 $upper = sp + 8|0;
 $sum = sp + 4|0;
 $i = sp;
 HEAP32[$1>>2] = $Array;
 HEAP32[$2>>2] = $len;
 HEAP32[$elems>>2] = 0;
 HEAP32[$i>>2] = 0;
 while(1) {
  $3 = HEAP32[$i>>2]|0;
  $4 = HEAP32[$2>>2]|0;
  $5 = ($3>>>0)<($4>>>0);
  if (!($5)) {
   break;
  }
  $6 = HEAP32[$i>>2]|0;
  $7 = HEAP32[$1>>2]|0;
  $8 = (($7) + ($6<<2)|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = HEAP32[$elems>>2]|0;
  $11 = (($10) + ($9))|0;
  HEAP32[$elems>>2] = $11;
  $12 = HEAP32[$i>>2]|0;
  $13 = (($12) + 1)|0;
  HEAP32[$i>>2] = $13;
 }
 $14 = HEAP32[$elems>>2]|0;
 $15 = ($14|0)==(0);
 if ($15) {
  HEAPF32[$0>>2] = -24601.0;
  $38 = +HEAPF32[$0>>2];
  STACKTOP = sp;return (+$38);
 }
 $16 = HEAP32[$elems>>2]|0;
 $17 = (+($16>>>0));
 $18 = $17 * 0.0500000000000000444089;
 $19 = (+Math_ceil((+$18)));
 $20 = (~~(($19))>>>0);
 HEAP32[$upper>>2] = $20;
 HEAP32[$sum>>2] = 0;
 $21 = HEAP32[$2>>2]|0;
 HEAP32[$i>>2] = $21;
 while(1) {
  $22 = HEAP32[$i>>2]|0;
  $23 = (($22) + -1)|0;
  HEAP32[$i>>2] = $23;
  $24 = ($22>>>0)>(0);
  if (!($24)) {
   break;
  }
  $25 = HEAP32[$i>>2]|0;
  $26 = HEAP32[$1>>2]|0;
  $27 = (($26) + ($25<<2)|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = HEAP32[$sum>>2]|0;
  $30 = (($29) + ($28))|0;
  HEAP32[$sum>>2] = $30;
  $31 = HEAP32[$sum>>2]|0;
  $32 = HEAP32[$upper>>2]|0;
  $33 = ($31>>>0)>=($32>>>0);
  if ($33) {
   break;
  }
 }
 $34 = HEAP32[$i>>2]|0;
 $35 = (+($34>>>0));
 $36 = $35 / 100.0;
 $37 = 64.81999969482421875 - $36;
 HEAPF32[$0>>2] = $37;
 $38 = +HEAPF32[$0>>2];
 STACKTOP = sp;return (+$38);
}
function _hasUcs2ByteOrderMarker($bom) {
 $bom = $bom|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp;
 $1 = sp + 4|0;
 HEAP16[$1>>1] = $bom;
 $2 = HEAP16[$1>>1]|0;
 $3 = $2&65535;
 $4 = ($3|0)==(65534);
 if ($4) {
  label = 3;
 } else {
  $5 = HEAP16[$1>>1]|0;
  $6 = $5&65535;
  $7 = ($6|0)==(65279);
  if ($7) {
   label = 3;
  } else {
   HEAP32[$0>>2] = 0;
  }
 }
 if ((label|0) == 3) {
  HEAP32[$0>>2] = 1;
 }
 $8 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($8|0);
}
function _isFrameIdMatching($id,$mask) {
 $id = $id|0;
 $mask = $mask|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp + 4|0;
 $1 = sp;
 HEAP32[$0>>2] = $id;
 HEAP32[$1>>2] = $mask;
 $2 = HEAP32[$0>>2]|0;
 $3 = HEAP32[$1>>2]|0;
 $4 = (_frame_id_matches($2,$3)|0);
 $5 = ($4|0)==(0);
 $6 = $5 ? 1 : 0;
 STACKTOP = sp;return ($6|0);
}
function _id3v2_add_latin1($gfp,$frame_id,$lang,$desc,$text) {
 $gfp = $gfp|0;
 $frame_id = $frame_id|0;
 $lang = $lang|0;
 $desc = $desc|0;
 $text = $text|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $8 = 0, $9 = 0, $gfc = 0, $node = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = sp + 28|0;
 $1 = sp + 24|0;
 $2 = sp + 20|0;
 $3 = sp + 16|0;
 $4 = sp + 12|0;
 $5 = sp + 8|0;
 $gfc = sp + 4|0;
 $node = sp;
 HEAP32[$1>>2] = $gfp;
 HEAP32[$2>>2] = $frame_id;
 HEAP32[$3>>2] = $lang;
 HEAP32[$4>>2] = $desc;
 HEAP32[$5>>2] = $text;
 $6 = HEAP32[$1>>2]|0;
 $7 = ($6|0)!=(0|0);
 if ($7) {
  $8 = HEAP32[$1>>2]|0;
  $9 = (($8) + 288|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = $10;
 } else {
  $11 = 0;
 }
 HEAP32[$gfc>>2] = $11;
 $12 = HEAP32[$gfc>>2]|0;
 $13 = ($12|0)!=(0|0);
 if (!($13)) {
  HEAP32[$0>>2] = -255;
  $75 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($75|0);
 }
 $14 = HEAP32[$gfc>>2]|0;
 $15 = (($14) + 85696|0);
 $16 = HEAP32[$2>>2]|0;
 $17 = (_findNode($15,$16,0)|0);
 HEAP32[$node>>2] = $17;
 $18 = HEAP32[$2>>2]|0;
 $19 = (_isMultiFrame($18)|0);
 $20 = ($19|0)!=(0);
 L8: do {
  if ($20) {
   while(1) {
    $21 = HEAP32[$node>>2]|0;
    $22 = ($21|0)!=(0|0);
    if (!($22)) {
     break L8;
    }
    $23 = HEAP32[$node>>2]|0;
    $24 = (($23) + 8|0);
    $25 = HEAP32[$3>>2]|0;
    $26 = (_isSameLang($24,$25)|0);
    $27 = ($26|0)!=(0);
    if ($27) {
     $28 = HEAP32[$node>>2]|0;
     $29 = HEAP32[$4>>2]|0;
     $30 = (_isSameDescriptor($28,$29)|0);
     $31 = ($30|0)!=(0);
     if ($31) {
      break L8;
     }
    }
    $32 = HEAP32[$gfc>>2]|0;
    $33 = (($32) + 85696|0);
    $34 = HEAP32[$2>>2]|0;
    $35 = HEAP32[$node>>2]|0;
    $36 = (_findNode($33,$34,$35)|0);
    HEAP32[$node>>2] = $36;
   }
  }
 } while(0);
 $37 = HEAP32[$node>>2]|0;
 $38 = ($37|0)==(0|0);
 do {
  if ($38) {
   $39 = (_calloc(1,36)|0);
   HEAP32[$node>>2] = $39;
   $40 = HEAP32[$node>>2]|0;
   $41 = ($40|0)==(0|0);
   if (!($41)) {
    $42 = HEAP32[$gfc>>2]|0;
    $43 = (($42) + 85696|0);
    $44 = HEAP32[$node>>2]|0;
    _appendNode($43,$44);
    break;
   }
   HEAP32[$0>>2] = -254;
   $75 = HEAP32[$0>>2]|0;
   STACKTOP = sp;return ($75|0);
  }
 } while(0);
 $45 = HEAP32[$2>>2]|0;
 $46 = HEAP32[$node>>2]|0;
 $47 = (($46) + 4|0);
 HEAP32[$47>>2] = $45;
 $48 = HEAP32[$node>>2]|0;
 $49 = (($48) + 8|0);
 $50 = HEAP32[$3>>2]|0;
 _setLang($49,$50);
 $51 = HEAP32[$node>>2]|0;
 $52 = (($51) + 12|0);
 $53 = HEAP32[$4>>2]|0;
 $54 = (_local_strdup($52,$53)|0);
 $55 = HEAP32[$node>>2]|0;
 $56 = (($55) + 12|0);
 $57 = (($56) + 4|0);
 HEAP32[$57>>2] = $54;
 $58 = HEAP32[$node>>2]|0;
 $59 = (($58) + 12|0);
 $60 = (($59) + 8|0);
 HEAP32[$60>>2] = 0;
 $61 = HEAP32[$node>>2]|0;
 $62 = (($61) + 24|0);
 $63 = HEAP32[$5>>2]|0;
 $64 = (_local_strdup($62,$63)|0);
 $65 = HEAP32[$node>>2]|0;
 $66 = (($65) + 24|0);
 $67 = (($66) + 4|0);
 HEAP32[$67>>2] = $64;
 $68 = HEAP32[$node>>2]|0;
 $69 = (($68) + 24|0);
 $70 = (($69) + 8|0);
 HEAP32[$70>>2] = 0;
 $71 = HEAP32[$gfc>>2]|0;
 $72 = (($71) + 85696|0);
 $73 = HEAP32[$72>>2]|0;
 $74 = $73 | 3;
 HEAP32[$72>>2] = $74;
 HEAP32[$0>>2] = 0;
 $75 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($75|0);
}
function _local_strdup($dst,$src) {
 $dst = $dst|0;
 $src = $src|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $n = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp + 12|0;
 $1 = sp + 8|0;
 $2 = sp + 4|0;
 $n = sp;
 HEAP32[$1>>2] = $dst;
 HEAP32[$2>>2] = $src;
 $3 = HEAP32[$1>>2]|0;
 $4 = ($3|0)==(0|0);
 if ($4) {
  HEAP32[$0>>2] = 0;
  $36 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($36|0);
 }
 $5 = HEAP32[$1>>2]|0;
 $6 = HEAP32[$5>>2]|0;
 _free($6);
 $7 = HEAP32[$1>>2]|0;
 HEAP32[$7>>2] = 0;
 $8 = HEAP32[$2>>2]|0;
 $9 = ($8|0)!=(0|0);
 if ($9) {
  HEAP32[$n>>2] = 0;
  while(1) {
   $10 = HEAP32[$n>>2]|0;
   $11 = HEAP32[$2>>2]|0;
   $12 = (($11) + ($10)|0);
   $13 = HEAP8[$12>>0]|0;
   $14 = $13 << 24 >> 24;
   $15 = ($14|0)!=(0);
   $16 = HEAP32[$n>>2]|0;
   if (!($15)) {
    break;
   }
   $17 = (($16) + 1)|0;
   HEAP32[$n>>2] = $17;
  }
  $18 = ($16>>>0)>(0);
  if ($18) {
   $19 = HEAP32[$n>>2]|0;
   $20 = (($19) + 1)|0;
   $21 = (_calloc($20,1)|0);
   $22 = HEAP32[$1>>2]|0;
   HEAP32[$22>>2] = $21;
   $23 = HEAP32[$1>>2]|0;
   $24 = HEAP32[$23>>2]|0;
   $25 = ($24|0)!=(0|0);
   if ($25) {
    $26 = HEAP32[$1>>2]|0;
    $27 = HEAP32[$26>>2]|0;
    $28 = HEAP32[$2>>2]|0;
    $29 = HEAP32[$n>>2]|0;
    $30 = $29;
    _memcpy(($27|0),($28|0),($30|0))|0;
    $31 = HEAP32[$n>>2]|0;
    $32 = HEAP32[$1>>2]|0;
    $33 = HEAP32[$32>>2]|0;
    $34 = (($33) + ($31)|0);
    HEAP8[$34>>0] = 0;
    $35 = HEAP32[$n>>2]|0;
    HEAP32[$0>>2] = $35;
    $36 = HEAP32[$0>>2]|0;
    STACKTOP = sp;return ($36|0);
   }
  }
 }
 HEAP32[$0>>2] = 0;
 $36 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($36|0);
}
function _copyV1ToV2($gfp,$frame_id,$s) {
 $gfp = $gfp|0;
 $frame_id = $frame_id|0;
 $s = $s|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $flags = 0, $gfc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = sp + 16|0;
 $1 = sp + 12|0;
 $2 = sp + 8|0;
 $gfc = sp + 4|0;
 $flags = sp;
 HEAP32[$0>>2] = $gfp;
 HEAP32[$1>>2] = $frame_id;
 HEAP32[$2>>2] = $s;
 $3 = HEAP32[$0>>2]|0;
 $4 = ($3|0)!=(0|0);
 if ($4) {
  $5 = HEAP32[$0>>2]|0;
  $6 = (($5) + 288|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = $7;
 } else {
  $8 = 0;
 }
 HEAP32[$gfc>>2] = $8;
 $9 = HEAP32[$gfc>>2]|0;
 $10 = ($9|0)!=(0|0);
 if (!($10)) {
  STACKTOP = sp;return;
 }
 $11 = HEAP32[$gfc>>2]|0;
 $12 = (($11) + 85696|0);
 $13 = HEAP32[$12>>2]|0;
 HEAP32[$flags>>2] = $13;
 $14 = HEAP32[$0>>2]|0;
 $15 = HEAP32[$1>>2]|0;
 $16 = HEAP32[$2>>2]|0;
 (_id3v2_add_latin1($14,$15,6416,0,$16)|0);
 $17 = HEAP32[$flags>>2]|0;
 $18 = HEAP32[$gfc>>2]|0;
 $19 = (($18) + 85696|0);
 HEAP32[$19>>2] = $17;
 STACKTOP = sp;return;
}
function _lame_get_id3v2_tag($gfp,$buffer,$size) {
 $gfp = $gfp|0;
 $buffer = $buffer|0;
 $size = $size|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0.0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $adjusted_tag_size = 0, $album_length = 0, $albumart_mime = 0, $artist_length = 0, $comment_length = 0, $gfc = 0, $node = 0, $node2 = 0, $p = 0, $tag = 0, $tag1 = 0, $tag_size = 0, $title_length = 0, $usev2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0;
 $0 = sp + 68|0;
 $1 = sp + 64|0;
 $2 = sp + 60|0;
 $3 = sp + 56|0;
 $gfc = sp + 52|0;
 $usev2 = sp + 48|0;
 $title_length = sp + 44|0;
 $artist_length = sp + 40|0;
 $album_length = sp + 36|0;
 $comment_length = sp + 32|0;
 $tag_size = sp + 28|0;
 $p = sp + 24|0;
 $adjusted_tag_size = sp + 20|0;
 $albumart_mime = sp + 16|0;
 $tag = sp + 12|0;
 $node = sp + 8|0;
 $tag1 = sp + 4|0;
 $node2 = sp;
 HEAP32[$1>>2] = $gfp;
 HEAP32[$2>>2] = $buffer;
 HEAP32[$3>>2] = $size;
 $4 = HEAP32[$1>>2]|0;
 $5 = ($4|0)==(0|0);
 if ($5) {
  HEAP32[$0>>2] = 0;
  $260 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($260|0);
 }
 $6 = HEAP32[$1>>2]|0;
 $7 = (($6) + 288|0);
 $8 = HEAP32[$7>>2]|0;
 HEAP32[$gfc>>2] = $8;
 $9 = HEAP32[$gfc>>2]|0;
 $10 = ($9|0)==(0|0);
 if ($10) {
  HEAP32[$0>>2] = 0;
  $260 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($260|0);
 }
 $11 = HEAP32[$gfc>>2]|0;
 $12 = (_test_tag_spec_flags($11,4)|0);
 $13 = ($12|0)!=(0);
 if ($13) {
  HEAP32[$0>>2] = 0;
  $260 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($260|0);
 }
 $14 = HEAP32[$gfc>>2]|0;
 $15 = (_test_tag_spec_flags($14,10)|0);
 HEAP32[$usev2>>2] = $15;
 $16 = HEAP32[$gfc>>2]|0;
 $17 = (($16) + 85696|0);
 $18 = (($17) + 8|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = ($19|0)!=(0|0);
 if ($20) {
  $21 = HEAP32[$gfc>>2]|0;
  $22 = (($21) + 85696|0);
  $23 = (($22) + 8|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = (_strlen(($24|0))|0);
  $26 = $25;
 } else {
  $26 = 0;
 }
 HEAP32[$title_length>>2] = $26;
 $27 = HEAP32[$gfc>>2]|0;
 $28 = (($27) + 85696|0);
 $29 = (($28) + 12|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = ($30|0)!=(0|0);
 if ($31) {
  $32 = HEAP32[$gfc>>2]|0;
  $33 = (($32) + 85696|0);
  $34 = (($33) + 12|0);
  $35 = HEAP32[$34>>2]|0;
  $36 = (_strlen(($35|0))|0);
  $37 = $36;
 } else {
  $37 = 0;
 }
 HEAP32[$artist_length>>2] = $37;
 $38 = HEAP32[$gfc>>2]|0;
 $39 = (($38) + 85696|0);
 $40 = (($39) + 16|0);
 $41 = HEAP32[$40>>2]|0;
 $42 = ($41|0)!=(0|0);
 if ($42) {
  $43 = HEAP32[$gfc>>2]|0;
  $44 = (($43) + 85696|0);
  $45 = (($44) + 16|0);
  $46 = HEAP32[$45>>2]|0;
  $47 = (_strlen(($46|0))|0);
  $48 = $47;
 } else {
  $48 = 0;
 }
 HEAP32[$album_length>>2] = $48;
 $49 = HEAP32[$gfc>>2]|0;
 $50 = (($49) + 85696|0);
 $51 = (($50) + 20|0);
 $52 = HEAP32[$51>>2]|0;
 $53 = ($52|0)!=(0|0);
 if ($53) {
  $54 = HEAP32[$gfc>>2]|0;
  $55 = (($54) + 85696|0);
  $56 = (($55) + 20|0);
  $57 = HEAP32[$56>>2]|0;
  $58 = (_strlen(($57|0))|0);
  $59 = $58;
 } else {
  $59 = 0;
 }
 HEAP32[$comment_length>>2] = $59;
 $60 = HEAP32[$title_length>>2]|0;
 $61 = ($60>>>0)>(30);
 if ($61) {
  label = 21;
 } else {
  $62 = HEAP32[$artist_length>>2]|0;
  $63 = ($62>>>0)>(30);
  if ($63) {
   label = 21;
  } else {
   $64 = HEAP32[$album_length>>2]|0;
   $65 = ($64>>>0)>(30);
   if ($65) {
    label = 21;
   } else {
    $66 = HEAP32[$comment_length>>2]|0;
    $67 = ($66>>>0)>(30);
    if ($67) {
     label = 21;
    } else {
     $68 = HEAP32[$gfc>>2]|0;
     $69 = (($68) + 85696|0);
     $70 = (($69) + 24|0);
     $71 = HEAP32[$70>>2]|0;
     $72 = ($71|0)!=(0);
     if ($72) {
      $73 = HEAP32[$comment_length>>2]|0;
      $74 = ($73>>>0)>(28);
      if ($74) {
       label = 21;
      }
     }
    }
   }
  }
 }
 if ((label|0) == 21) {
  HEAP32[$usev2>>2] = 1;
 }
 $75 = HEAP32[$usev2>>2]|0;
 $76 = ($75|0)!=(0);
 if (!($76)) {
  HEAP32[$0>>2] = 0;
  $260 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($260|0);
 }
 HEAP32[$albumart_mime>>2] = 0;
 $77 = HEAP32[$1>>2]|0;
 $78 = (($77) + 4|0);
 $79 = HEAP32[$78>>2]|0;
 $80 = ($79|0)!=(-1);
 if ($80) {
  $81 = HEAP32[$1>>2]|0;
  $82 = HEAP32[$1>>2]|0;
  $83 = (($82) + 4|0);
  $84 = HEAP32[$83>>2]|0;
  $85 = (+($84>>>0));
  _id3v2AddAudioDuration($81,$85);
 }
 HEAP32[$tag_size>>2] = 10;
 $86 = HEAP32[$gfc>>2]|0;
 $87 = (($86) + 85696|0);
 $88 = (($87) + 32|0);
 $89 = HEAP32[$88>>2]|0;
 $90 = ($89|0)!=(0|0);
 if ($90) {
  $91 = HEAP32[$gfc>>2]|0;
  $92 = (($91) + 85696|0);
  $93 = (($92) + 36|0);
  $94 = HEAP32[$93>>2]|0;
  $95 = ($94|0)!=(0);
  if ($95) {
   $96 = HEAP32[$gfc>>2]|0;
   $97 = (($96) + 85696|0);
   $98 = (($97) + 44|0);
   $99 = HEAP32[$98>>2]|0;
   if ((($99|0) == 1)) {
    $100 = HEAP32[6424>>2]|0;
    HEAP32[$albumart_mime>>2] = $100;
   } else if ((($99|0) == 2)) {
    $101 = HEAP32[6448>>2]|0;
    HEAP32[$albumart_mime>>2] = $101;
   } else if ((($99|0) == 3)) {
    $102 = HEAP32[6472>>2]|0;
    HEAP32[$albumart_mime>>2] = $102;
   }
   $103 = HEAP32[$albumart_mime>>2]|0;
   $104 = ($103|0)!=(0|0);
   if ($104) {
    $105 = HEAP32[$albumart_mime>>2]|0;
    $106 = (_strlen(($105|0))|0);
    $107 = (14 + ($106))|0;
    $108 = HEAP32[$gfc>>2]|0;
    $109 = (($108) + 85696|0);
    $110 = (($109) + 36|0);
    $111 = HEAP32[$110>>2]|0;
    $112 = (($107) + ($111))|0;
    $113 = HEAP32[$tag_size>>2]|0;
    $114 = (($113) + ($112))|0;
    HEAP32[$tag_size>>2] = $114;
   }
  }
 }
 $115 = HEAP32[$gfc>>2]|0;
 $116 = (($115) + 85696|0);
 HEAP32[$tag>>2] = $116;
 $117 = HEAP32[$tag>>2]|0;
 $118 = (($117) + 48|0);
 $119 = HEAP32[$118>>2]|0;
 $120 = ($119|0)!=(0|0);
 L51: do {
  if ($120) {
   $121 = HEAP32[$tag>>2]|0;
   $122 = (($121) + 48|0);
   $123 = HEAP32[$122>>2]|0;
   HEAP32[$node>>2] = $123;
   while(1) {
    $124 = HEAP32[$node>>2]|0;
    $125 = ($124|0)!=(0|0);
    if (!($125)) {
     break L51;
    }
    $126 = HEAP32[$node>>2]|0;
    $127 = (($126) + 4|0);
    $128 = HEAP32[$127>>2]|0;
    $129 = ($128|0)==(1129270605);
    do {
     if ($129) {
      label = 38;
     } else {
      $130 = HEAP32[$node>>2]|0;
      $131 = (($130) + 4|0);
      $132 = HEAP32[$131>>2]|0;
      $133 = ($132|0)==(1431520594);
      if ($133) {
       label = 38;
      } else {
       $138 = HEAP32[$node>>2]|0;
       $139 = (($138) + 4|0);
       $140 = HEAP32[$139>>2]|0;
       $141 = (_isFrameIdMatching($140,1459617792)|0);
       $142 = ($141|0)!=(0);
       $143 = HEAP32[$node>>2]|0;
       if ($142) {
        $144 = (_sizeOfWxxxNode($143)|0);
        $145 = HEAP32[$tag_size>>2]|0;
        $146 = (($145) + ($144))|0;
        HEAP32[$tag_size>>2] = $146;
        break;
       } else {
        $147 = (_sizeOfNode($143)|0);
        $148 = HEAP32[$tag_size>>2]|0;
        $149 = (($148) + ($147))|0;
        HEAP32[$tag_size>>2] = $149;
        break;
       }
      }
     }
    } while(0);
    if ((label|0) == 38) {
     label = 0;
     $134 = HEAP32[$node>>2]|0;
     $135 = (_sizeOfCommentNode($134)|0);
     $136 = HEAP32[$tag_size>>2]|0;
     $137 = (($136) + ($135))|0;
     HEAP32[$tag_size>>2] = $137;
    }
    $150 = HEAP32[$node>>2]|0;
    $151 = HEAP32[$150>>2]|0;
    HEAP32[$node>>2] = $151;
   }
  }
 } while(0);
 $152 = HEAP32[$gfc>>2]|0;
 $153 = (_test_tag_spec_flags($152,32)|0);
 $154 = ($153|0)!=(0);
 if ($154) {
  $155 = HEAP32[$gfc>>2]|0;
  $156 = (($155) + 85696|0);
  $157 = (($156) + 40|0);
  $158 = HEAP32[$157>>2]|0;
  $159 = HEAP32[$tag_size>>2]|0;
  $160 = (($159) + ($158))|0;
  HEAP32[$tag_size>>2] = $160;
 }
 $161 = HEAP32[$3>>2]|0;
 $162 = HEAP32[$tag_size>>2]|0;
 $163 = ($161>>>0)<($162>>>0);
 if ($163) {
  $164 = HEAP32[$tag_size>>2]|0;
  HEAP32[$0>>2] = $164;
  $260 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($260|0);
 }
 $165 = HEAP32[$2>>2]|0;
 $166 = ($165|0)==(0|0);
 if ($166) {
  HEAP32[$0>>2] = 0;
  $260 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($260|0);
 }
 $167 = HEAP32[$2>>2]|0;
 HEAP32[$p>>2] = $167;
 $168 = HEAP32[$p>>2]|0;
 $169 = (($168) + 1|0);
 HEAP32[$p>>2] = $169;
 HEAP8[$168>>0] = 73;
 $170 = HEAP32[$p>>2]|0;
 $171 = (($170) + 1|0);
 HEAP32[$p>>2] = $171;
 HEAP8[$170>>0] = 68;
 $172 = HEAP32[$p>>2]|0;
 $173 = (($172) + 1|0);
 HEAP32[$p>>2] = $173;
 HEAP8[$172>>0] = 51;
 $174 = HEAP32[$p>>2]|0;
 $175 = (($174) + 1|0);
 HEAP32[$p>>2] = $175;
 HEAP8[$174>>0] = 3;
 $176 = HEAP32[$p>>2]|0;
 $177 = (($176) + 1|0);
 HEAP32[$p>>2] = $177;
 HEAP8[$176>>0] = 0;
 $178 = HEAP32[$p>>2]|0;
 $179 = (($178) + 1|0);
 HEAP32[$p>>2] = $179;
 HEAP8[$178>>0] = 0;
 $180 = HEAP32[$tag_size>>2]|0;
 $181 = (($180) - 10)|0;
 HEAP32[$adjusted_tag_size>>2] = $181;
 $182 = HEAP32[$adjusted_tag_size>>2]|0;
 $183 = $182 >>> 21;
 $184 = $183 & 127;
 $185 = $184&255;
 $186 = HEAP32[$p>>2]|0;
 $187 = (($186) + 1|0);
 HEAP32[$p>>2] = $187;
 HEAP8[$186>>0] = $185;
 $188 = HEAP32[$adjusted_tag_size>>2]|0;
 $189 = $188 >>> 14;
 $190 = $189 & 127;
 $191 = $190&255;
 $192 = HEAP32[$p>>2]|0;
 $193 = (($192) + 1|0);
 HEAP32[$p>>2] = $193;
 HEAP8[$192>>0] = $191;
 $194 = HEAP32[$adjusted_tag_size>>2]|0;
 $195 = $194 >>> 7;
 $196 = $195 & 127;
 $197 = $196&255;
 $198 = HEAP32[$p>>2]|0;
 $199 = (($198) + 1|0);
 HEAP32[$p>>2] = $199;
 HEAP8[$198>>0] = $197;
 $200 = HEAP32[$adjusted_tag_size>>2]|0;
 $201 = $200 & 127;
 $202 = $201&255;
 $203 = HEAP32[$p>>2]|0;
 $204 = (($203) + 1|0);
 HEAP32[$p>>2] = $204;
 HEAP8[$203>>0] = $202;
 $205 = HEAP32[$gfc>>2]|0;
 $206 = (($205) + 85696|0);
 HEAP32[$tag1>>2] = $206;
 $207 = HEAP32[$tag1>>2]|0;
 $208 = (($207) + 48|0);
 $209 = HEAP32[$208>>2]|0;
 $210 = ($209|0)!=(0|0);
 L77: do {
  if ($210) {
   $211 = HEAP32[$tag1>>2]|0;
   $212 = (($211) + 48|0);
   $213 = HEAP32[$212>>2]|0;
   HEAP32[$node2>>2] = $213;
   while(1) {
    $214 = HEAP32[$node2>>2]|0;
    $215 = ($214|0)!=(0|0);
    if (!($215)) {
     break L77;
    }
    $216 = HEAP32[$node2>>2]|0;
    $217 = (($216) + 4|0);
    $218 = HEAP32[$217>>2]|0;
    $219 = ($218|0)==(1129270605);
    do {
     if ($219) {
      label = 54;
     } else {
      $220 = HEAP32[$node2>>2]|0;
      $221 = (($220) + 4|0);
      $222 = HEAP32[$221>>2]|0;
      $223 = ($222|0)==(1431520594);
      if ($223) {
       label = 54;
       break;
      }
      $227 = HEAP32[$node2>>2]|0;
      $228 = (($227) + 4|0);
      $229 = HEAP32[$228>>2]|0;
      $230 = (_isFrameIdMatching($229,1459617792)|0);
      $231 = ($230|0)!=(0);
      $232 = HEAP32[$p>>2]|0;
      $233 = HEAP32[$node2>>2]|0;
      if ($231) {
       $234 = (_set_frame_wxxx($232,$233)|0);
       HEAP32[$p>>2] = $234;
       break;
      } else {
       $235 = (_set_frame_custom2($232,$233)|0);
       HEAP32[$p>>2] = $235;
       break;
      }
     }
    } while(0);
    if ((label|0) == 54) {
     label = 0;
     $224 = HEAP32[$p>>2]|0;
     $225 = HEAP32[$node2>>2]|0;
     $226 = (_set_frame_comment($224,$225)|0);
     HEAP32[$p>>2] = $226;
    }
    $236 = HEAP32[$node2>>2]|0;
    $237 = HEAP32[$236>>2]|0;
    HEAP32[$node2>>2] = $237;
   }
  }
 } while(0);
 $238 = HEAP32[$albumart_mime>>2]|0;
 $239 = ($238|0)!=(0|0);
 if ($239) {
  $240 = HEAP32[$p>>2]|0;
  $241 = HEAP32[$albumart_mime>>2]|0;
  $242 = HEAP32[$gfc>>2]|0;
  $243 = (($242) + 85696|0);
  $244 = (($243) + 32|0);
  $245 = HEAP32[$244>>2]|0;
  $246 = HEAP32[$gfc>>2]|0;
  $247 = (($246) + 85696|0);
  $248 = (($247) + 36|0);
  $249 = HEAP32[$248>>2]|0;
  $250 = (_set_frame_apic($240,$241,$245,$249)|0);
  HEAP32[$p>>2] = $250;
 }
 $251 = HEAP32[$p>>2]|0;
 $252 = HEAP32[$tag_size>>2]|0;
 $253 = HEAP32[$p>>2]|0;
 $254 = HEAP32[$2>>2]|0;
 $255 = $253;
 $256 = $254;
 $257 = (($255) - ($256))|0;
 $258 = (($252) - ($257))|0;
 _memset(($251|0),0,($258|0))|0;
 $259 = HEAP32[$tag_size>>2]|0;
 HEAP32[$0>>2] = $259;
 $260 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($260|0);
}
function _test_tag_spec_flags($gfc,$tst) {
 $gfc = $gfc|0;
 $tst = $tst|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp + 4|0;
 $1 = sp;
 HEAP32[$0>>2] = $gfc;
 HEAP32[$1>>2] = $tst;
 $2 = HEAP32[$0>>2]|0;
 $3 = (($2) + 85696|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = HEAP32[$1>>2]|0;
 $6 = $4 & $5;
 $7 = ($6|0)!=(0);
 $8 = $7 ? 1 : 0;
 STACKTOP = sp;return ($8|0);
}
function _id3v2AddAudioDuration($gfp,$ms) {
 $gfp = $gfp|0;
 $ms = +$ms;
 var $0 = 0, $1 = 0, $10 = 0.0, $11 = 0.0, $12 = 0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0, $2 = 0, $20 = 0.0, $21 = 0, $22 = 0.0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $buffer = 0, $cfg = 0, $gfc = 0, $max_ulong = 0, $playlength_ms = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1072|0;
 $vararg_buffer = sp + 16|0;
 $0 = sp + 32|0;
 $1 = sp + 8|0;
 $gfc = sp + 28|0;
 $cfg = sp + 24|0;
 $buffer = sp + 40|0;
 $max_ulong = sp;
 $playlength_ms = sp + 20|0;
 HEAP32[$0>>2] = $gfp;
 HEAPF64[$1>>3] = $ms;
 $2 = HEAP32[$0>>2]|0;
 $3 = ($2|0)!=(0|0);
 if ($3) {
  $4 = HEAP32[$0>>2]|0;
  $5 = (($4) + 288|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = $6;
 } else {
  $7 = 0;
 }
 HEAP32[$gfc>>2] = $7;
 $8 = HEAP32[$gfc>>2]|0;
 $9 = (($8) + 16|0);
 HEAP32[$cfg>>2] = $9;
 HEAPF64[$max_ulong>>3] = 4294967295.0;
 $10 = +HEAPF64[$1>>3];
 $11 = $10 * 1000.0;
 HEAPF64[$1>>3] = $11;
 $12 = HEAP32[$cfg>>2]|0;
 $13 = (($12) + 44|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (+($14|0));
 $16 = +HEAPF64[$1>>3];
 $17 = $16 / $15;
 HEAPF64[$1>>3] = $17;
 $18 = +HEAPF64[$1>>3];
 $19 = $18 > 4294967295.0;
 do {
  if ($19) {
   HEAP32[$playlength_ms>>2] = -1;
  } else {
   $20 = +HEAPF64[$1>>3];
   $21 = $20 < 0.0;
   if ($21) {
    HEAP32[$playlength_ms>>2] = 0;
    break;
   } else {
    $22 = +HEAPF64[$1>>3];
    $23 = (~~(($22))>>>0);
    HEAP32[$playlength_ms>>2] = $23;
    break;
   }
  }
 } while(0);
 $24 = HEAP32[$playlength_ms>>2]|0;
 HEAP32[$vararg_buffer>>2] = $24;
 (_sprintf($buffer,6504,$vararg_buffer)|0);
 $25 = HEAP32[$0>>2]|0;
 _copyV1ToV2($25,1414284622,$buffer);
 STACKTOP = sp;return;
}
function _sizeOfCommentNode($node) {
 $node = $node|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cond = 0, $cond1 = 0, $n = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp + 4|0;
 $n = sp;
 HEAP32[$0>>2] = $node;
 HEAP32[$n>>2] = 0;
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)!=(0|0);
 if (!($2)) {
  $35 = HEAP32[$n>>2]|0;
  STACKTOP = sp;return ($35|0);
 }
 HEAP32[$n>>2] = 10;
 $3 = HEAP32[$n>>2]|0;
 $4 = (($3) + 1)|0;
 HEAP32[$n>>2] = $4;
 $5 = HEAP32[$n>>2]|0;
 $6 = (($5) + 3)|0;
 HEAP32[$n>>2] = $6;
 $7 = HEAP32[$0>>2]|0;
 $8 = (($7) + 12|0);
 $9 = (($8) + 8|0);
 $10 = HEAP32[$9>>2]|0;
 $cond = ($10|0)==(1);
 $11 = HEAP32[$0>>2]|0;
 $12 = (($11) + 12|0);
 $13 = (($12) + 4|0);
 $14 = HEAP32[$13>>2]|0;
 if ($cond) {
  $18 = $14<<1;
  $19 = (2 + ($18))|0;
  $20 = HEAP32[$n>>2]|0;
  $21 = (($20) + ($19))|0;
  HEAP32[$n>>2] = $21;
 } else {
  $15 = (1 + ($14))|0;
  $16 = HEAP32[$n>>2]|0;
  $17 = (($16) + ($15))|0;
  HEAP32[$n>>2] = $17;
 }
 $22 = HEAP32[$0>>2]|0;
 $23 = (($22) + 24|0);
 $24 = (($23) + 8|0);
 $25 = HEAP32[$24>>2]|0;
 $cond1 = ($25|0)==(1);
 $26 = HEAP32[$0>>2]|0;
 $27 = (($26) + 24|0);
 $28 = (($27) + 4|0);
 $29 = HEAP32[$28>>2]|0;
 if ($cond1) {
  $32 = $29<<1;
  $33 = HEAP32[$n>>2]|0;
  $34 = (($33) + ($32))|0;
  HEAP32[$n>>2] = $34;
  $35 = HEAP32[$n>>2]|0;
  STACKTOP = sp;return ($35|0);
 } else {
  $30 = HEAP32[$n>>2]|0;
  $31 = (($30) + ($29))|0;
  HEAP32[$n>>2] = $31;
  $35 = HEAP32[$n>>2]|0;
  STACKTOP = sp;return ($35|0);
 }
 return 0|0;
}
function _sizeOfWxxxNode($node) {
 $node = $node|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cond = 0, $cond1 = 0, $n = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp + 4|0;
 $n = sp;
 HEAP32[$0>>2] = $node;
 HEAP32[$n>>2] = 0;
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)!=(0|0);
 if (!($2)) {
  $43 = HEAP32[$n>>2]|0;
  STACKTOP = sp;return ($43|0);
 }
 HEAP32[$n>>2] = 10;
 $3 = HEAP32[$0>>2]|0;
 $4 = (($3) + 12|0);
 $5 = (($4) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6>>>0)>(0);
 do {
  if ($7) {
   $8 = HEAP32[$n>>2]|0;
   $9 = (($8) + 1)|0;
   HEAP32[$n>>2] = $9;
   $10 = HEAP32[$0>>2]|0;
   $11 = (($10) + 12|0);
   $12 = (($11) + 8|0);
   $13 = HEAP32[$12>>2]|0;
   $cond = ($13|0)==(1);
   $14 = HEAP32[$0>>2]|0;
   $15 = (($14) + 12|0);
   $16 = (($15) + 4|0);
   $17 = HEAP32[$16>>2]|0;
   if ($cond) {
    $21 = $17<<1;
    $22 = (2 + ($21))|0;
    $23 = HEAP32[$n>>2]|0;
    $24 = (($23) + ($22))|0;
    HEAP32[$n>>2] = $24;
    break;
   } else {
    $18 = (1 + ($17))|0;
    $19 = HEAP32[$n>>2]|0;
    $20 = (($19) + ($18))|0;
    HEAP32[$n>>2] = $20;
    break;
   }
  }
 } while(0);
 $25 = HEAP32[$0>>2]|0;
 $26 = (($25) + 24|0);
 $27 = (($26) + 4|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = ($28>>>0)>(0);
 if (!($29)) {
  $43 = HEAP32[$n>>2]|0;
  STACKTOP = sp;return ($43|0);
 }
 $30 = HEAP32[$0>>2]|0;
 $31 = (($30) + 24|0);
 $32 = (($31) + 8|0);
 $33 = HEAP32[$32>>2]|0;
 $cond1 = ($33|0)==(1);
 $34 = HEAP32[$0>>2]|0;
 $35 = (($34) + 24|0);
 $36 = (($35) + 4|0);
 $37 = HEAP32[$36>>2]|0;
 if ($cond1) {
  $40 = (($37) - 1)|0;
  $41 = HEAP32[$n>>2]|0;
  $42 = (($41) + ($40))|0;
  HEAP32[$n>>2] = $42;
  $43 = HEAP32[$n>>2]|0;
  STACKTOP = sp;return ($43|0);
 } else {
  $38 = HEAP32[$n>>2]|0;
  $39 = (($38) + ($37))|0;
  HEAP32[$n>>2] = $39;
  $43 = HEAP32[$n>>2]|0;
  STACKTOP = sp;return ($43|0);
 }
 return 0|0;
}
function _sizeOfNode($node) {
 $node = $node|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $cond = 0, $n = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp + 4|0;
 $n = sp;
 HEAP32[$0>>2] = $node;
 HEAP32[$n>>2] = 0;
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)!=(0|0);
 if (!($2)) {
  $42 = HEAP32[$n>>2]|0;
  STACKTOP = sp;return ($42|0);
 }
 HEAP32[$n>>2] = 10;
 $3 = HEAP32[$n>>2]|0;
 $4 = (($3) + 1)|0;
 HEAP32[$n>>2] = $4;
 $5 = HEAP32[$0>>2]|0;
 $6 = (($5) + 24|0);
 $7 = (($6) + 8|0);
 $8 = HEAP32[$7>>2]|0;
 $cond = ($8|0)==(1);
 $9 = HEAP32[$0>>2]|0;
 $10 = (($9) + 12|0);
 $11 = (($10) + 4|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($12>>>0)>(0);
 if ($cond) {
  if ($13) {
   $27 = HEAP32[$0>>2]|0;
   $28 = (($27) + 12|0);
   $29 = (($28) + 4|0);
   $30 = HEAP32[$29>>2]|0;
   $31 = (($30) + 1)|0;
   $32 = $31<<1;
   $33 = HEAP32[$n>>2]|0;
   $34 = (($33) + ($32))|0;
   HEAP32[$n>>2] = $34;
  }
  $35 = HEAP32[$0>>2]|0;
  $36 = (($35) + 24|0);
  $37 = (($36) + 4|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = $38<<1;
  $40 = HEAP32[$n>>2]|0;
  $41 = (($40) + ($39))|0;
  HEAP32[$n>>2] = $41;
  $42 = HEAP32[$n>>2]|0;
  STACKTOP = sp;return ($42|0);
 } else {
  if ($13) {
   $14 = HEAP32[$0>>2]|0;
   $15 = (($14) + 12|0);
   $16 = (($15) + 4|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = (($17) + 1)|0;
   $19 = HEAP32[$n>>2]|0;
   $20 = (($19) + ($18))|0;
   HEAP32[$n>>2] = $20;
  }
  $21 = HEAP32[$0>>2]|0;
  $22 = (($21) + 24|0);
  $23 = (($22) + 4|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = HEAP32[$n>>2]|0;
  $26 = (($25) + ($24))|0;
  HEAP32[$n>>2] = $26;
  $42 = HEAP32[$n>>2]|0;
  STACKTOP = sp;return ($42|0);
 }
 return 0|0;
}
function _set_frame_comment($frame,$node) {
 $frame = $frame|0;
 $node = $node|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $n = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp + 8|0;
 $1 = sp + 4|0;
 $n = sp;
 HEAP32[$0>>2] = $frame;
 HEAP32[$1>>2] = $node;
 $2 = HEAP32[$1>>2]|0;
 $3 = (_sizeOfCommentNode($2)|0);
 HEAP32[$n>>2] = $3;
 $4 = HEAP32[$n>>2]|0;
 $5 = ($4>>>0)>(10);
 if (!($5)) {
  $91 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($91|0);
 }
 $6 = HEAP32[$0>>2]|0;
 $7 = HEAP32[$1>>2]|0;
 $8 = (($7) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (_set_4_byte_value($6,$9)|0);
 HEAP32[$0>>2] = $10;
 $11 = HEAP32[$0>>2]|0;
 $12 = HEAP32[$n>>2]|0;
 $13 = (($12) - 10)|0;
 $14 = (_set_4_byte_value($11,$13)|0);
 HEAP32[$0>>2] = $14;
 $15 = HEAP32[$0>>2]|0;
 $16 = (($15) + 1|0);
 HEAP32[$0>>2] = $16;
 HEAP8[$15>>0] = 0;
 $17 = HEAP32[$0>>2]|0;
 $18 = (($17) + 1|0);
 HEAP32[$0>>2] = $18;
 HEAP8[$17>>0] = 0;
 $19 = HEAP32[$1>>2]|0;
 $20 = (($19) + 24|0);
 $21 = (($20) + 8|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = ($22|0)==(1);
 $24 = $23 ? 1 : 0;
 $25 = $24&255;
 $26 = HEAP32[$0>>2]|0;
 $27 = (($26) + 1|0);
 HEAP32[$0>>2] = $27;
 HEAP8[$26>>0] = $25;
 $28 = HEAP32[$1>>2]|0;
 $29 = (($28) + 8|0);
 $30 = HEAP8[$29>>0]|0;
 $31 = HEAP32[$0>>2]|0;
 $32 = (($31) + 1|0);
 HEAP32[$0>>2] = $32;
 HEAP8[$31>>0] = $30;
 $33 = HEAP32[$1>>2]|0;
 $34 = (($33) + 8|0);
 $35 = (($34) + 1|0);
 $36 = HEAP8[$35>>0]|0;
 $37 = HEAP32[$0>>2]|0;
 $38 = (($37) + 1|0);
 HEAP32[$0>>2] = $38;
 HEAP8[$37>>0] = $36;
 $39 = HEAP32[$1>>2]|0;
 $40 = (($39) + 8|0);
 $41 = (($40) + 2|0);
 $42 = HEAP8[$41>>0]|0;
 $43 = HEAP32[$0>>2]|0;
 $44 = (($43) + 1|0);
 HEAP32[$0>>2] = $44;
 HEAP8[$43>>0] = $42;
 $45 = HEAP32[$1>>2]|0;
 $46 = (($45) + 12|0);
 $47 = (($46) + 8|0);
 $48 = HEAP32[$47>>2]|0;
 $49 = ($48|0)!=(1);
 $50 = HEAP32[$0>>2]|0;
 $51 = HEAP32[$1>>2]|0;
 $52 = (($51) + 12|0);
 if ($49) {
  $53 = HEAP32[$52>>2]|0;
  $54 = HEAP32[$1>>2]|0;
  $55 = (($54) + 12|0);
  $56 = (($55) + 4|0);
  $57 = HEAP32[$56>>2]|0;
  $58 = (_writeChars($50,$53,$57)|0);
  HEAP32[$0>>2] = $58;
  $59 = HEAP32[$0>>2]|0;
  $60 = (($59) + 1|0);
  HEAP32[$0>>2] = $60;
  HEAP8[$59>>0] = 0;
 } else {
  $61 = HEAP32[$52>>2]|0;
  $62 = HEAP32[$1>>2]|0;
  $63 = (($62) + 12|0);
  $64 = (($63) + 4|0);
  $65 = HEAP32[$64>>2]|0;
  $66 = (_writeUcs2s($50,$61,$65)|0);
  HEAP32[$0>>2] = $66;
  $67 = HEAP32[$0>>2]|0;
  $68 = (($67) + 1|0);
  HEAP32[$0>>2] = $68;
  HEAP8[$67>>0] = 0;
  $69 = HEAP32[$0>>2]|0;
  $70 = (($69) + 1|0);
  HEAP32[$0>>2] = $70;
  HEAP8[$69>>0] = 0;
 }
 $71 = HEAP32[$1>>2]|0;
 $72 = (($71) + 24|0);
 $73 = (($72) + 8|0);
 $74 = HEAP32[$73>>2]|0;
 $75 = ($74|0)!=(1);
 $76 = HEAP32[$0>>2]|0;
 $77 = HEAP32[$1>>2]|0;
 $78 = (($77) + 24|0);
 if ($75) {
  $79 = HEAP32[$78>>2]|0;
  $80 = HEAP32[$1>>2]|0;
  $81 = (($80) + 24|0);
  $82 = (($81) + 4|0);
  $83 = HEAP32[$82>>2]|0;
  $84 = (_writeChars($76,$79,$83)|0);
  HEAP32[$0>>2] = $84;
  $91 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($91|0);
 } else {
  $85 = HEAP32[$78>>2]|0;
  $86 = HEAP32[$1>>2]|0;
  $87 = (($86) + 24|0);
  $88 = (($87) + 4|0);
  $89 = HEAP32[$88>>2]|0;
  $90 = (_writeUcs2s($76,$85,$89)|0);
  HEAP32[$0>>2] = $90;
  $91 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($91|0);
 }
 return 0|0;
}
function _set_frame_wxxx($frame,$node) {
 $frame = $frame|0;
 $node = $node|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $9 = 0;
 var $n = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp + 8|0;
 $1 = sp + 4|0;
 $n = sp;
 HEAP32[$0>>2] = $frame;
 HEAP32[$1>>2] = $node;
 $2 = HEAP32[$1>>2]|0;
 $3 = (_sizeOfWxxxNode($2)|0);
 HEAP32[$n>>2] = $3;
 $4 = HEAP32[$n>>2]|0;
 $5 = ($4>>>0)>(10);
 if (!($5)) {
  $79 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($79|0);
 }
 $6 = HEAP32[$0>>2]|0;
 $7 = HEAP32[$1>>2]|0;
 $8 = (($7) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (_set_4_byte_value($6,$9)|0);
 HEAP32[$0>>2] = $10;
 $11 = HEAP32[$0>>2]|0;
 $12 = HEAP32[$n>>2]|0;
 $13 = (($12) - 10)|0;
 $14 = (_set_4_byte_value($11,$13)|0);
 HEAP32[$0>>2] = $14;
 $15 = HEAP32[$0>>2]|0;
 $16 = (($15) + 1|0);
 HEAP32[$0>>2] = $16;
 HEAP8[$15>>0] = 0;
 $17 = HEAP32[$0>>2]|0;
 $18 = (($17) + 1|0);
 HEAP32[$0>>2] = $18;
 HEAP8[$17>>0] = 0;
 $19 = HEAP32[$1>>2]|0;
 $20 = (($19) + 12|0);
 $21 = (($20) + 4|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = ($22>>>0)>(0);
 do {
  if ($23) {
   $24 = HEAP32[$1>>2]|0;
   $25 = (($24) + 12|0);
   $26 = (($25) + 8|0);
   $27 = HEAP32[$26>>2]|0;
   $28 = ($27|0)==(1);
   $29 = $28 ? 1 : 0;
   $30 = $29&255;
   $31 = HEAP32[$0>>2]|0;
   $32 = (($31) + 1|0);
   HEAP32[$0>>2] = $32;
   HEAP8[$31>>0] = $30;
   $33 = HEAP32[$1>>2]|0;
   $34 = (($33) + 12|0);
   $35 = (($34) + 8|0);
   $36 = HEAP32[$35>>2]|0;
   $37 = ($36|0)!=(1);
   $38 = HEAP32[$0>>2]|0;
   $39 = HEAP32[$1>>2]|0;
   $40 = (($39) + 12|0);
   if ($37) {
    $41 = HEAP32[$40>>2]|0;
    $42 = HEAP32[$1>>2]|0;
    $43 = (($42) + 12|0);
    $44 = (($43) + 4|0);
    $45 = HEAP32[$44>>2]|0;
    $46 = (_writeChars($38,$41,$45)|0);
    HEAP32[$0>>2] = $46;
    $47 = HEAP32[$0>>2]|0;
    $48 = (($47) + 1|0);
    HEAP32[$0>>2] = $48;
    HEAP8[$47>>0] = 0;
    break;
   } else {
    $49 = HEAP32[$40>>2]|0;
    $50 = HEAP32[$1>>2]|0;
    $51 = (($50) + 12|0);
    $52 = (($51) + 4|0);
    $53 = HEAP32[$52>>2]|0;
    $54 = (_writeUcs2s($38,$49,$53)|0);
    HEAP32[$0>>2] = $54;
    $55 = HEAP32[$0>>2]|0;
    $56 = (($55) + 1|0);
    HEAP32[$0>>2] = $56;
    HEAP8[$55>>0] = 0;
    $57 = HEAP32[$0>>2]|0;
    $58 = (($57) + 1|0);
    HEAP32[$0>>2] = $58;
    HEAP8[$57>>0] = 0;
    break;
   }
  }
 } while(0);
 $59 = HEAP32[$1>>2]|0;
 $60 = (($59) + 24|0);
 $61 = (($60) + 8|0);
 $62 = HEAP32[$61>>2]|0;
 $63 = ($62|0)!=(1);
 $64 = HEAP32[$0>>2]|0;
 $65 = HEAP32[$1>>2]|0;
 $66 = (($65) + 24|0);
 if ($63) {
  $67 = HEAP32[$66>>2]|0;
  $68 = HEAP32[$1>>2]|0;
  $69 = (($68) + 24|0);
  $70 = (($69) + 4|0);
  $71 = HEAP32[$70>>2]|0;
  $72 = (_writeChars($64,$67,$71)|0);
  HEAP32[$0>>2] = $72;
  $79 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($79|0);
 } else {
  $73 = HEAP32[$66>>2]|0;
  $74 = HEAP32[$1>>2]|0;
  $75 = (($74) + 24|0);
  $76 = (($75) + 4|0);
  $77 = HEAP32[$76>>2]|0;
  $78 = (_writeLoBytes($64,$73,$77)|0);
  HEAP32[$0>>2] = $78;
  $79 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($79|0);
 }
 return 0|0;
}
function _set_frame_custom2($frame,$node) {
 $frame = $frame|0;
 $node = $node|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $9 = 0;
 var $n = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp + 8|0;
 $1 = sp + 4|0;
 $n = sp;
 HEAP32[$0>>2] = $frame;
 HEAP32[$1>>2] = $node;
 $2 = HEAP32[$1>>2]|0;
 $3 = (_sizeOfNode($2)|0);
 HEAP32[$n>>2] = $3;
 $4 = HEAP32[$n>>2]|0;
 $5 = ($4>>>0)>(10);
 if (!($5)) {
  $79 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($79|0);
 }
 $6 = HEAP32[$0>>2]|0;
 $7 = HEAP32[$1>>2]|0;
 $8 = (($7) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (_set_4_byte_value($6,$9)|0);
 HEAP32[$0>>2] = $10;
 $11 = HEAP32[$0>>2]|0;
 $12 = HEAP32[$n>>2]|0;
 $13 = (($12) - 10)|0;
 $14 = (_set_4_byte_value($11,$13)|0);
 HEAP32[$0>>2] = $14;
 $15 = HEAP32[$0>>2]|0;
 $16 = (($15) + 1|0);
 HEAP32[$0>>2] = $16;
 HEAP8[$15>>0] = 0;
 $17 = HEAP32[$0>>2]|0;
 $18 = (($17) + 1|0);
 HEAP32[$0>>2] = $18;
 HEAP8[$17>>0] = 0;
 $19 = HEAP32[$1>>2]|0;
 $20 = (($19) + 24|0);
 $21 = (($20) + 8|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = ($22|0)==(1);
 $24 = $23 ? 1 : 0;
 $25 = $24&255;
 $26 = HEAP32[$0>>2]|0;
 $27 = (($26) + 1|0);
 HEAP32[$0>>2] = $27;
 HEAP8[$26>>0] = $25;
 $28 = HEAP32[$1>>2]|0;
 $29 = (($28) + 12|0);
 $30 = (($29) + 4|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = ($31>>>0)>(0);
 do {
  if ($32) {
   $33 = HEAP32[$1>>2]|0;
   $34 = (($33) + 12|0);
   $35 = (($34) + 8|0);
   $36 = HEAP32[$35>>2]|0;
   $37 = ($36|0)!=(1);
   $38 = HEAP32[$0>>2]|0;
   $39 = HEAP32[$1>>2]|0;
   $40 = (($39) + 12|0);
   if ($37) {
    $41 = HEAP32[$40>>2]|0;
    $42 = HEAP32[$1>>2]|0;
    $43 = (($42) + 12|0);
    $44 = (($43) + 4|0);
    $45 = HEAP32[$44>>2]|0;
    $46 = (_writeChars($38,$41,$45)|0);
    HEAP32[$0>>2] = $46;
    $47 = HEAP32[$0>>2]|0;
    $48 = (($47) + 1|0);
    HEAP32[$0>>2] = $48;
    HEAP8[$47>>0] = 0;
    break;
   } else {
    $49 = HEAP32[$40>>2]|0;
    $50 = HEAP32[$1>>2]|0;
    $51 = (($50) + 12|0);
    $52 = (($51) + 4|0);
    $53 = HEAP32[$52>>2]|0;
    $54 = (_writeUcs2s($38,$49,$53)|0);
    HEAP32[$0>>2] = $54;
    $55 = HEAP32[$0>>2]|0;
    $56 = (($55) + 1|0);
    HEAP32[$0>>2] = $56;
    HEAP8[$55>>0] = 0;
    $57 = HEAP32[$0>>2]|0;
    $58 = (($57) + 1|0);
    HEAP32[$0>>2] = $58;
    HEAP8[$57>>0] = 0;
    break;
   }
  }
 } while(0);
 $59 = HEAP32[$1>>2]|0;
 $60 = (($59) + 24|0);
 $61 = (($60) + 8|0);
 $62 = HEAP32[$61>>2]|0;
 $63 = ($62|0)!=(1);
 $64 = HEAP32[$0>>2]|0;
 $65 = HEAP32[$1>>2]|0;
 $66 = (($65) + 24|0);
 if ($63) {
  $67 = HEAP32[$66>>2]|0;
  $68 = HEAP32[$1>>2]|0;
  $69 = (($68) + 24|0);
  $70 = (($69) + 4|0);
  $71 = HEAP32[$70>>2]|0;
  $72 = (_writeChars($64,$67,$71)|0);
  HEAP32[$0>>2] = $72;
  $79 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($79|0);
 } else {
  $73 = HEAP32[$66>>2]|0;
  $74 = HEAP32[$1>>2]|0;
  $75 = (($74) + 24|0);
  $76 = (($75) + 4|0);
  $77 = HEAP32[$76>>2]|0;
  $78 = (_writeUcs2s($64,$73,$77)|0);
  HEAP32[$0>>2] = $78;
  $79 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($79|0);
 }
 return 0|0;
}
function _set_frame_apic($frame,$mimetype,$data,$size) {
 $frame = $frame|0;
 $mimetype = $mimetype|0;
 $data = $data|0;
 $size = $size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp + 12|0;
 $1 = sp + 8|0;
 $2 = sp + 4|0;
 $3 = sp;
 HEAP32[$0>>2] = $frame;
 HEAP32[$1>>2] = $mimetype;
 HEAP32[$2>>2] = $data;
 HEAP32[$3>>2] = $size;
 $4 = HEAP32[$1>>2]|0;
 $5 = ($4|0)!=(0|0);
 if (!($5)) {
  $47 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($47|0);
 }
 $6 = HEAP32[$2>>2]|0;
 $7 = ($6|0)!=(0|0);
 if (!($7)) {
  $47 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($47|0);
 }
 $8 = HEAP32[$3>>2]|0;
 $9 = ($8|0)!=(0);
 if (!($9)) {
  $47 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($47|0);
 }
 $10 = HEAP32[$0>>2]|0;
 $11 = (_set_4_byte_value($10,1095780675)|0);
 HEAP32[$0>>2] = $11;
 $12 = HEAP32[$0>>2]|0;
 $13 = HEAP32[$1>>2]|0;
 $14 = (_strlen(($13|0))|0);
 $15 = (4 + ($14))|0;
 $16 = HEAP32[$3>>2]|0;
 $17 = (($15) + ($16))|0;
 $18 = (_set_4_byte_value($12,$17)|0);
 HEAP32[$0>>2] = $18;
 $19 = HEAP32[$0>>2]|0;
 $20 = (($19) + 1|0);
 HEAP32[$0>>2] = $20;
 HEAP8[$19>>0] = 0;
 $21 = HEAP32[$0>>2]|0;
 $22 = (($21) + 1|0);
 HEAP32[$0>>2] = $22;
 HEAP8[$21>>0] = 0;
 $23 = HEAP32[$0>>2]|0;
 $24 = (($23) + 1|0);
 HEAP32[$0>>2] = $24;
 HEAP8[$23>>0] = 0;
 while(1) {
  $25 = HEAP32[$1>>2]|0;
  $26 = HEAP8[$25>>0]|0;
  $27 = ($26<<24>>24)!=(0);
  if (!($27)) {
   break;
  }
  $28 = HEAP32[$1>>2]|0;
  $29 = (($28) + 1|0);
  HEAP32[$1>>2] = $29;
  $30 = HEAP8[$28>>0]|0;
  $31 = HEAP32[$0>>2]|0;
  $32 = (($31) + 1|0);
  HEAP32[$0>>2] = $32;
  HEAP8[$31>>0] = $30;
 }
 $33 = HEAP32[$0>>2]|0;
 $34 = (($33) + 1|0);
 HEAP32[$0>>2] = $34;
 HEAP8[$33>>0] = 0;
 $35 = HEAP32[$0>>2]|0;
 $36 = (($35) + 1|0);
 HEAP32[$0>>2] = $36;
 HEAP8[$35>>0] = 0;
 $37 = HEAP32[$0>>2]|0;
 $38 = (($37) + 1|0);
 HEAP32[$0>>2] = $38;
 HEAP8[$37>>0] = 0;
 while(1) {
  $39 = HEAP32[$3>>2]|0;
  $40 = (($39) + -1)|0;
  HEAP32[$3>>2] = $40;
  $41 = ($39|0)!=(0);
  if (!($41)) {
   break;
  }
  $42 = HEAP32[$2>>2]|0;
  $43 = (($42) + 1|0);
  HEAP32[$2>>2] = $43;
  $44 = HEAP8[$42>>0]|0;
  $45 = HEAP32[$0>>2]|0;
  $46 = (($45) + 1|0);
  HEAP32[$0>>2] = $46;
  HEAP8[$45>>0] = $44;
 }
 $47 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($47|0);
}
function _id3tag_write_v2($gfp) {
 $gfp = $gfp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $gfc = 0, $i = 0;
 var $n = 0, $tag = 0, $tag_size = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = sp + 24|0;
 $1 = sp + 20|0;
 $gfc = sp + 16|0;
 $tag = sp + 12|0;
 $tag_size = sp + 8|0;
 $n = sp + 4|0;
 $i = sp;
 HEAP32[$1>>2] = $gfp;
 $2 = HEAP32[$1>>2]|0;
 $3 = (($2) + 288|0);
 $4 = HEAP32[$3>>2]|0;
 HEAP32[$gfc>>2] = $4;
 $5 = HEAP32[$gfc>>2]|0;
 $6 = (_test_tag_spec_flags($5,4)|0);
 $7 = ($6|0)!=(0);
 if ($7) {
  HEAP32[$0>>2] = 0;
  $37 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($37|0);
 }
 $8 = HEAP32[$gfc>>2]|0;
 $9 = (_test_tag_spec_flags($8,1)|0);
 $10 = ($9|0)!=(0);
 if (!($10)) {
  HEAP32[$0>>2] = 0;
  $37 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($37|0);
 }
 HEAP32[$tag>>2] = 0;
 $11 = HEAP32[$1>>2]|0;
 $12 = (_lame_get_id3v2_tag($11,0,0)|0);
 HEAP32[$n>>2] = $12;
 $13 = HEAP32[$n>>2]|0;
 $14 = (_calloc($13,1)|0);
 HEAP32[$tag>>2] = $14;
 $15 = HEAP32[$tag>>2]|0;
 $16 = ($15|0)==(0|0);
 if ($16) {
  HEAP32[$0>>2] = -1;
  $37 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($37|0);
 }
 $17 = HEAP32[$1>>2]|0;
 $18 = HEAP32[$tag>>2]|0;
 $19 = HEAP32[$n>>2]|0;
 $20 = (_lame_get_id3v2_tag($17,$18,$19)|0);
 HEAP32[$tag_size>>2] = $20;
 $21 = HEAP32[$tag_size>>2]|0;
 $22 = HEAP32[$n>>2]|0;
 $23 = ($21>>>0)>($22>>>0);
 if ($23) {
  $24 = HEAP32[$tag>>2]|0;
  _free($24);
  HEAP32[$0>>2] = -1;
  $37 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($37|0);
 }
 HEAP32[$i>>2] = 0;
 while(1) {
  $25 = HEAP32[$i>>2]|0;
  $26 = HEAP32[$tag_size>>2]|0;
  $27 = ($25>>>0)<($26>>>0);
  if (!($27)) {
   break;
  }
  $28 = HEAP32[$gfc>>2]|0;
  $29 = HEAP32[$i>>2]|0;
  $30 = HEAP32[$tag>>2]|0;
  $31 = (($30) + ($29)|0);
  $32 = HEAP8[$31>>0]|0;
  _add_dummy_byte($28,$32,1);
  $33 = HEAP32[$i>>2]|0;
  $34 = (($33) + 1)|0;
  HEAP32[$i>>2] = $34;
 }
 $35 = HEAP32[$tag>>2]|0;
 _free($35);
 $36 = HEAP32[$tag_size>>2]|0;
 HEAP32[$0>>2] = $36;
 $37 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($37|0);
}
function _lame_get_id3v1_tag($gfp,$buffer,$size) {
 $gfp = $gfp|0;
 $buffer = $buffer|0;
 $size = $size|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $gfc = 0, $p = 0, $pad = 0, $tag_size = 0, $vararg_buffer = 0, $year = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $vararg_buffer = sp;
 $0 = sp + 32|0;
 $1 = sp + 28|0;
 $2 = sp + 24|0;
 $3 = sp + 20|0;
 $tag_size = sp + 16|0;
 $gfc = sp + 12|0;
 $p = sp + 8|0;
 $pad = sp + 4|0;
 $year = sp + 36|0;
 HEAP32[$1>>2] = $gfp;
 HEAP32[$2>>2] = $buffer;
 HEAP32[$3>>2] = $size;
 HEAP32[$tag_size>>2] = 128;
 $4 = HEAP32[$1>>2]|0;
 $5 = ($4|0)==(0|0);
 if ($5) {
  HEAP32[$0>>2] = 0;
  $100 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($100|0);
 }
 $6 = HEAP32[$3>>2]|0;
 $7 = ($6>>>0)<(128);
 if ($7) {
  HEAP32[$0>>2] = 128;
  $100 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($100|0);
 }
 $8 = HEAP32[$1>>2]|0;
 $9 = (($8) + 288|0);
 $10 = HEAP32[$9>>2]|0;
 HEAP32[$gfc>>2] = $10;
 $11 = HEAP32[$gfc>>2]|0;
 $12 = ($11|0)==(0|0);
 if ($12) {
  HEAP32[$0>>2] = 0;
  $100 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($100|0);
 }
 $13 = HEAP32[$2>>2]|0;
 $14 = ($13|0)==(0|0);
 if ($14) {
  HEAP32[$0>>2] = 0;
  $100 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($100|0);
 }
 $15 = HEAP32[$gfc>>2]|0;
 $16 = (_test_tag_spec_flags($15,8)|0);
 $17 = ($16|0)!=(0);
 if ($17) {
  HEAP32[$0>>2] = 0;
  $100 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($100|0);
 }
 $18 = HEAP32[$gfc>>2]|0;
 $19 = (_test_tag_spec_flags($18,1)|0);
 $20 = ($19|0)!=(0);
 if (!($20)) {
  HEAP32[$0>>2] = 0;
  $100 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($100|0);
 }
 $21 = HEAP32[$2>>2]|0;
 HEAP32[$p>>2] = $21;
 $22 = HEAP32[$gfc>>2]|0;
 $23 = (_test_tag_spec_flags($22,16)|0);
 $24 = ($23|0)!=(0);
 $25 = $24 ? 32 : 0;
 HEAP32[$pad>>2] = $25;
 $26 = HEAP32[$p>>2]|0;
 $27 = (($26) + 1|0);
 HEAP32[$p>>2] = $27;
 HEAP8[$26>>0] = 84;
 $28 = HEAP32[$p>>2]|0;
 $29 = (($28) + 1|0);
 HEAP32[$p>>2] = $29;
 HEAP8[$28>>0] = 65;
 $30 = HEAP32[$p>>2]|0;
 $31 = (($30) + 1|0);
 HEAP32[$p>>2] = $31;
 HEAP8[$30>>0] = 71;
 $32 = HEAP32[$p>>2]|0;
 $33 = HEAP32[$gfc>>2]|0;
 $34 = (($33) + 85696|0);
 $35 = (($34) + 8|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = HEAP32[$pad>>2]|0;
 $38 = (_set_text_field($32,$36,30,$37)|0);
 HEAP32[$p>>2] = $38;
 $39 = HEAP32[$p>>2]|0;
 $40 = HEAP32[$gfc>>2]|0;
 $41 = (($40) + 85696|0);
 $42 = (($41) + 12|0);
 $43 = HEAP32[$42>>2]|0;
 $44 = HEAP32[$pad>>2]|0;
 $45 = (_set_text_field($39,$43,30,$44)|0);
 HEAP32[$p>>2] = $45;
 $46 = HEAP32[$p>>2]|0;
 $47 = HEAP32[$gfc>>2]|0;
 $48 = (($47) + 85696|0);
 $49 = (($48) + 16|0);
 $50 = HEAP32[$49>>2]|0;
 $51 = HEAP32[$pad>>2]|0;
 $52 = (_set_text_field($46,$50,30,$51)|0);
 HEAP32[$p>>2] = $52;
 $53 = HEAP32[$gfc>>2]|0;
 $54 = (($53) + 85696|0);
 $55 = (($54) + 4|0);
 $56 = HEAP32[$55>>2]|0;
 HEAP32[$vararg_buffer>>2] = $56;
 (_sprintf($year,6496,$vararg_buffer)|0);
 $57 = HEAP32[$p>>2]|0;
 $58 = HEAP32[$gfc>>2]|0;
 $59 = (($58) + 85696|0);
 $60 = (($59) + 4|0);
 $61 = HEAP32[$60>>2]|0;
 $62 = ($61|0)!=(0);
 $63 = $62 ? $year : 0;
 $64 = HEAP32[$pad>>2]|0;
 $65 = (_set_text_field($57,$63,4,$64)|0);
 HEAP32[$p>>2] = $65;
 $66 = HEAP32[$p>>2]|0;
 $67 = HEAP32[$gfc>>2]|0;
 $68 = (($67) + 85696|0);
 $69 = (($68) + 20|0);
 $70 = HEAP32[$69>>2]|0;
 $71 = HEAP32[$gfc>>2]|0;
 $72 = (($71) + 85696|0);
 $73 = (($72) + 24|0);
 $74 = HEAP32[$73>>2]|0;
 $75 = ($74|0)!=(0);
 $76 = $75 ? 28 : 30;
 $77 = HEAP32[$pad>>2]|0;
 $78 = (_set_text_field($66,$70,$76,$77)|0);
 HEAP32[$p>>2] = $78;
 $79 = HEAP32[$gfc>>2]|0;
 $80 = (($79) + 85696|0);
 $81 = (($80) + 24|0);
 $82 = HEAP32[$81>>2]|0;
 $83 = ($82|0)!=(0);
 if ($83) {
  $84 = HEAP32[$p>>2]|0;
  $85 = (($84) + 1|0);
  HEAP32[$p>>2] = $85;
  HEAP8[$84>>0] = 0;
  $86 = HEAP32[$gfc>>2]|0;
  $87 = (($86) + 85696|0);
  $88 = (($87) + 24|0);
  $89 = HEAP32[$88>>2]|0;
  $90 = $89&255;
  $91 = HEAP32[$p>>2]|0;
  $92 = (($91) + 1|0);
  HEAP32[$p>>2] = $92;
  HEAP8[$91>>0] = $90;
 }
 $93 = HEAP32[$gfc>>2]|0;
 $94 = (($93) + 85696|0);
 $95 = (($94) + 28|0);
 $96 = HEAP32[$95>>2]|0;
 $97 = $96&255;
 $98 = HEAP32[$p>>2]|0;
 $99 = (($98) + 1|0);
 HEAP32[$p>>2] = $99;
 HEAP8[$98>>0] = $97;
 HEAP32[$0>>2] = 128;
 $100 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($100|0);
}
function _set_text_field($field,$text,$size,$pad) {
 $field = $field|0;
 $text = $text|0;
 $size = $size|0;
 $pad = $pad|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp + 12|0;
 $1 = sp + 8|0;
 $2 = sp + 4|0;
 $3 = sp;
 HEAP32[$0>>2] = $field;
 HEAP32[$1>>2] = $text;
 HEAP32[$2>>2] = $size;
 HEAP32[$3>>2] = $pad;
 while(1) {
  $4 = HEAP32[$2>>2]|0;
  $5 = (($4) + -1)|0;
  HEAP32[$2>>2] = $5;
  $6 = ($4|0)!=(0);
  if (!($6)) {
   break;
  }
  $7 = HEAP32[$1>>2]|0;
  $8 = ($7|0)!=(0|0);
  if ($8) {
   $9 = HEAP32[$1>>2]|0;
   $10 = HEAP8[$9>>0]|0;
   $11 = $10 << 24 >> 24;
   $12 = ($11|0)!=(0);
   if ($12) {
    $13 = HEAP32[$1>>2]|0;
    $14 = (($13) + 1|0);
    HEAP32[$1>>2] = $14;
    $15 = HEAP8[$13>>0]|0;
    $16 = HEAP32[$0>>2]|0;
    $17 = (($16) + 1|0);
    HEAP32[$0>>2] = $17;
    HEAP8[$16>>0] = $15;
    continue;
   }
  }
  $18 = HEAP32[$3>>2]|0;
  $19 = $18&255;
  $20 = HEAP32[$0>>2]|0;
  $21 = (($20) + 1|0);
  HEAP32[$0>>2] = $21;
  HEAP8[$20>>0] = $19;
 }
 $22 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($22|0);
}
function _id3tag_write_v1($gfp) {
 $gfp = $gfp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $gfc = 0, $i = 0, $m = 0, $n = 0, $tag = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0;
 $0 = sp + 20|0;
 $1 = sp + 16|0;
 $gfc = sp + 12|0;
 $i = sp + 8|0;
 $n = sp + 4|0;
 $m = sp;
 $tag = sp + 24|0;
 HEAP32[$1>>2] = $gfp;
 $2 = HEAP32[$1>>2]|0;
 $3 = (($2) + 288|0);
 $4 = HEAP32[$3>>2]|0;
 HEAP32[$gfc>>2] = $4;
 HEAP32[$m>>2] = 128;
 $5 = HEAP32[$1>>2]|0;
 $6 = HEAP32[$m>>2]|0;
 $7 = (_lame_get_id3v1_tag($5,$tag,$6)|0);
 HEAP32[$n>>2] = $7;
 $8 = HEAP32[$n>>2]|0;
 $9 = HEAP32[$m>>2]|0;
 $10 = ($8>>>0)>($9>>>0);
 if ($10) {
  HEAP32[$0>>2] = 0;
  $21 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($21|0);
 }
 HEAP32[$i>>2] = 0;
 while(1) {
  $11 = HEAP32[$i>>2]|0;
  $12 = HEAP32[$n>>2]|0;
  $13 = ($11>>>0)<($12>>>0);
  if (!($13)) {
   break;
  }
  $14 = HEAP32[$gfc>>2]|0;
  $15 = HEAP32[$i>>2]|0;
  $16 = (($tag) + ($15)|0);
  $17 = HEAP8[$16>>0]|0;
  _add_dummy_byte($14,$17,1);
  $18 = HEAP32[$i>>2]|0;
  $19 = (($18) + 1)|0;
  HEAP32[$i>>2] = $19;
 }
 $20 = HEAP32[$n>>2]|0;
 HEAP32[$0>>2] = $20;
 $21 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($21|0);
}
function _set_4_byte_value($bytes,$value) {
 $bytes = $bytes|0;
 $value = $value|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp + 8|0;
 $1 = sp + 4|0;
 $i = sp;
 HEAP32[$0>>2] = $bytes;
 HEAP32[$1>>2] = $value;
 HEAP32[$i>>2] = 3;
 while(1) {
  $2 = HEAP32[$i>>2]|0;
  $3 = ($2|0)>=(0);
  if (!($3)) {
   break;
  }
  $4 = HEAP32[$1>>2]|0;
  $5 = $4 & 255;
  $6 = $5&255;
  $7 = HEAP32[$i>>2]|0;
  $8 = HEAP32[$0>>2]|0;
  $9 = (($8) + ($7)|0);
  HEAP8[$9>>0] = $6;
  $10 = HEAP32[$1>>2]|0;
  $11 = $10 >>> 8;
  HEAP32[$1>>2] = $11;
  $12 = HEAP32[$i>>2]|0;
  $13 = (($12) + -1)|0;
  HEAP32[$i>>2] = $13;
 }
 $14 = HEAP32[$0>>2]|0;
 $15 = (($14) + 4|0);
 STACKTOP = sp;return ($15|0);
}
function _writeChars($frame,$str,$n) {
 $frame = $frame|0;
 $str = $str|0;
 $n = $n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp + 8|0;
 $1 = sp + 4|0;
 $2 = sp;
 HEAP32[$0>>2] = $frame;
 HEAP32[$1>>2] = $str;
 HEAP32[$2>>2] = $n;
 while(1) {
  $3 = HEAP32[$2>>2]|0;
  $4 = (($3) + -1)|0;
  HEAP32[$2>>2] = $4;
  $5 = ($3|0)!=(0);
  if (!($5)) {
   break;
  }
  $6 = HEAP32[$1>>2]|0;
  $7 = (($6) + 1|0);
  HEAP32[$1>>2] = $7;
  $8 = HEAP8[$6>>0]|0;
  $9 = HEAP32[$0>>2]|0;
  $10 = (($9) + 1|0);
  HEAP32[$0>>2] = $10;
  HEAP8[$9>>0] = $8;
 }
 $11 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($11|0);
}
function _writeUcs2s($frame,$str,$n) {
 $frame = $frame|0;
 $str = $str|0;
 $n = $n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $bom = 0, $c = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp + 8|0;
 $1 = sp + 4|0;
 $2 = sp;
 $bom = sp + 14|0;
 $c = sp + 12|0;
 HEAP32[$0>>2] = $frame;
 HEAP32[$1>>2] = $str;
 HEAP32[$2>>2] = $n;
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3>>>0)>(0);
 if (!($4)) {
  $28 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($28|0);
 }
 $5 = HEAP32[$1>>2]|0;
 $6 = HEAP16[$5>>1]|0;
 HEAP16[$bom>>1] = $6;
 while(1) {
  $7 = HEAP32[$2>>2]|0;
  $8 = (($7) + -1)|0;
  HEAP32[$2>>2] = $8;
  $9 = ($7|0)!=(0);
  if (!($9)) {
   break;
  }
  $10 = HEAP16[$bom>>1]|0;
  $11 = HEAP32[$1>>2]|0;
  $12 = (($11) + 2|0);
  HEAP32[$1>>2] = $12;
  $13 = HEAP16[$11>>1]|0;
  $14 = (_toLittleEndian($10,$13)|0);
  HEAP16[$c>>1] = $14;
  $15 = HEAP16[$c>>1]|0;
  $16 = $15&65535;
  $17 = 255 & $16;
  $18 = $17&255;
  $19 = HEAP32[$0>>2]|0;
  $20 = (($19) + 1|0);
  HEAP32[$0>>2] = $20;
  HEAP8[$19>>0] = $18;
  $21 = HEAP16[$c>>1]|0;
  $22 = $21&65535;
  $23 = $22 >> 8;
  $24 = 255 & $23;
  $25 = $24&255;
  $26 = HEAP32[$0>>2]|0;
  $27 = (($26) + 1|0);
  HEAP32[$0>>2] = $27;
  HEAP8[$26>>0] = $25;
 }
 $28 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($28|0);
}
function _toLittleEndian($bom,$c) {
 $bom = $bom|0;
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp + 4|0;
 $1 = sp + 2|0;
 $2 = sp;
 HEAP16[$1>>1] = $bom;
 HEAP16[$2>>1] = $c;
 $3 = HEAP16[$1>>1]|0;
 $4 = $3&65535;
 $5 = ($4|0)==(65534);
 $6 = HEAP16[$2>>1]|0;
 if ($5) {
  $7 = (_swap_bytes($6)|0);
  HEAP16[$0>>1] = $7;
  $8 = HEAP16[$0>>1]|0;
  STACKTOP = sp;return ($8|0);
 } else {
  HEAP16[$0>>1] = $6;
  $8 = HEAP16[$0>>1]|0;
  STACKTOP = sp;return ($8|0);
 }
 return 0|0;
}
function _swap_bytes($w) {
 $w = $w|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp;
 HEAP16[$0>>1] = $w;
 $1 = HEAP16[$0>>1]|0;
 $2 = $1&65535;
 $3 = $2 << 8;
 $4 = 65280 & $3;
 $5 = HEAP16[$0>>1]|0;
 $6 = $5&65535;
 $7 = $6 >> 8;
 $8 = 255 & $7;
 $9 = $4 | $8;
 $10 = $9&65535;
 STACKTOP = sp;return ($10|0);
}
function _writeLoBytes($frame,$str,$n) {
 $frame = $frame|0;
 $str = $str|0;
 $n = $n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $bom = 0, $c = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp + 8|0;
 $1 = sp + 4|0;
 $2 = sp;
 $bom = sp + 14|0;
 $c = sp + 12|0;
 HEAP32[$0>>2] = $frame;
 HEAP32[$1>>2] = $str;
 HEAP32[$2>>2] = $n;
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3>>>0)>(0);
 if (!($4)) {
  $34 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($34|0);
 }
 $5 = HEAP32[$1>>2]|0;
 $6 = HEAP16[$5>>1]|0;
 HEAP16[$bom>>1] = $6;
 $7 = HEAP16[$bom>>1]|0;
 $8 = (_hasUcs2ByteOrderMarker($7)|0);
 $9 = ($8|0)!=(0);
 if ($9) {
  $10 = HEAP32[$1>>2]|0;
  $11 = (($10) + 2|0);
  HEAP32[$1>>2] = $11;
  $12 = HEAP32[$2>>2]|0;
  $13 = (($12) + -1)|0;
  HEAP32[$2>>2] = $13;
 }
 while(1) {
  $14 = HEAP32[$2>>2]|0;
  $15 = (($14) + -1)|0;
  HEAP32[$2>>2] = $15;
  $16 = ($14|0)!=(0);
  if (!($16)) {
   break;
  }
  $17 = HEAP16[$bom>>1]|0;
  $18 = HEAP32[$1>>2]|0;
  $19 = (($18) + 2|0);
  HEAP32[$1>>2] = $19;
  $20 = HEAP16[$18>>1]|0;
  $21 = (_toLittleEndian($17,$20)|0);
  HEAP16[$c>>1] = $21;
  $22 = HEAP16[$c>>1]|0;
  $23 = $22&65535;
  $24 = ($23>>>0)<(32);
  if (!($24)) {
   $25 = HEAP16[$c>>1]|0;
   $26 = $25&65535;
   $27 = (255)<($26>>>0);
   if (!($27)) {
    $30 = HEAP16[$c>>1]|0;
    $31 = $30&255;
    $32 = HEAP32[$0>>2]|0;
    $33 = (($32) + 1|0);
    HEAP32[$0>>2] = $33;
    HEAP8[$32>>0] = $31;
    continue;
   }
  }
  $28 = HEAP32[$0>>2]|0;
  $29 = (($28) + 1|0);
  HEAP32[$0>>2] = $29;
  HEAP8[$28>>0] = 32;
 }
 $34 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($34|0);
}
function _findNode($tag,$frame_id,$last) {
 $tag = $tag|0;
 $frame_id = $frame_id|0;
 $last = $last|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $node = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = sp + 16|0;
 $1 = sp + 12|0;
 $2 = sp + 8|0;
 $3 = sp + 4|0;
 $node = sp;
 HEAP32[$1>>2] = $tag;
 HEAP32[$2>>2] = $frame_id;
 HEAP32[$3>>2] = $last;
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)!=(0|0);
 if ($5) {
  $6 = HEAP32[$3>>2]|0;
  $7 = HEAP32[$6>>2]|0;
  $11 = $7;
 } else {
  $8 = HEAP32[$1>>2]|0;
  $9 = (($8) + 48|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = $10;
 }
 HEAP32[$node>>2] = $11;
 while(1) {
  $12 = HEAP32[$node>>2]|0;
  $13 = ($12|0)!=(0|0);
  if (!($13)) {
   label = 9;
   break;
  }
  $14 = HEAP32[$node>>2]|0;
  $15 = (($14) + 4|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = HEAP32[$2>>2]|0;
  $18 = ($16|0)==($17|0);
  $19 = HEAP32[$node>>2]|0;
  if ($18) {
   label = 7;
   break;
  }
  $20 = HEAP32[$19>>2]|0;
  HEAP32[$node>>2] = $20;
 }
 if ((label|0) == 7) {
  HEAP32[$0>>2] = $19;
  $21 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($21|0);
 }
 else if ((label|0) == 9) {
  HEAP32[$0>>2] = 0;
  $21 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($21|0);
 }
 return 0|0;
}
function _isMultiFrame($frame_id) {
 $frame_id = $frame_id|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp + 4|0;
 $1 = sp;
 HEAP32[$1>>2] = $frame_id;
 $2 = HEAP32[$1>>2]|0;
 if ((($2|0) == 1347570006) | (($2|0) == 1196575044) | (($2|0) == 1162756946) | (($2|0) == 1279872587) | (($2|0) == 1095061059) | (($2|0) == 1346588244) | (($2|0) == 1195724610) | (($2|0) == 1095780675) | (($2|0) == 1398361172) | (($2|0) == 1129270605) | (($2|0) == 1465407576) | (($2|0) == 1415075928)) {
  HEAP32[$0>>2] = 1;
 } else {
  HEAP32[$0>>2] = 0;
 }
 $3 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($3|0);
}
function _isSameLang($l1,$l2) {
 $l1 = $l1|0;
 $l2 = $l2|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $a = 0, $b = 0, $d = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = sp + 12|0;
 $1 = sp + 8|0;
 $2 = sp + 4|0;
 $d = sp + 18|0;
 $i = sp;
 $a = sp + 17|0;
 $b = sp + 16|0;
 HEAP32[$1>>2] = $l1;
 HEAP32[$2>>2] = $l2;
 $3 = HEAP32[$2>>2]|0;
 _setLang($d,$3);
 HEAP32[$i>>2] = 0;
 while(1) {
  $4 = HEAP32[$i>>2]|0;
  $5 = ($4|0)<(3);
  if (!($5)) {
   label = 10;
   break;
  }
  $6 = HEAP32[$i>>2]|0;
  $7 = HEAP32[$1>>2]|0;
  $8 = (($7) + ($6)|0);
  $9 = HEAP8[$8>>0]|0;
  $10 = $9 << 24 >> 24;
  $11 = (_tolower($10)|0);
  $12 = $11&255;
  HEAP8[$a>>0] = $12;
  $13 = HEAP32[$i>>2]|0;
  $14 = (($d) + ($13)|0);
  $15 = HEAP8[$14>>0]|0;
  $16 = $15 << 24 >> 24;
  $17 = (_tolower($16)|0);
  $18 = $17&255;
  HEAP8[$b>>0] = $18;
  $19 = HEAP8[$a>>0]|0;
  $20 = $19 << 24 >> 24;
  $21 = ($20|0)<(32);
  if ($21) {
   HEAP8[$a>>0] = 32;
  }
  $22 = HEAP8[$b>>0]|0;
  $23 = $22 << 24 >> 24;
  $24 = ($23|0)<(32);
  if ($24) {
   HEAP8[$b>>0] = 32;
  }
  $25 = HEAP8[$a>>0]|0;
  $26 = $25 << 24 >> 24;
  $27 = HEAP8[$b>>0]|0;
  $28 = $27 << 24 >> 24;
  $29 = ($26|0)!=($28|0);
  if ($29) {
   label = 8;
   break;
  }
  $30 = HEAP32[$i>>2]|0;
  $31 = (($30) + 1)|0;
  HEAP32[$i>>2] = $31;
 }
 if ((label|0) == 8) {
  HEAP32[$0>>2] = 0;
  $32 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($32|0);
 }
 else if ((label|0) == 10) {
  HEAP32[$0>>2] = 1;
  $32 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($32|0);
 }
 return 0|0;
}
function _isSameDescriptor($node,$dsc) {
 $node = $node|0;
 $dsc = $dsc|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp + 12|0;
 $1 = sp + 8|0;
 $2 = sp + 4|0;
 $i = sp;
 HEAP32[$1>>2] = $node;
 HEAP32[$2>>2] = $dsc;
 $3 = HEAP32[$1>>2]|0;
 $4 = (($3) + 12|0);
 $5 = (($4) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)==(1);
 if ($7) {
  $8 = HEAP32[$1>>2]|0;
  $9 = (($8) + 12|0);
  $10 = (($9) + 4|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ($11>>>0)>(0);
  if ($12) {
   HEAP32[$0>>2] = 0;
   $36 = HEAP32[$0>>2]|0;
   STACKTOP = sp;return ($36|0);
  }
 }
 HEAP32[$i>>2] = 0;
 while(1) {
  $13 = HEAP32[$i>>2]|0;
  $14 = HEAP32[$1>>2]|0;
  $15 = (($14) + 12|0);
  $16 = (($15) + 4|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = ($13>>>0)<($17>>>0);
  if (!($18)) {
   label = 10;
   break;
  }
  $19 = HEAP32[$2>>2]|0;
  $20 = ($19|0)!=(0|0);
  if (!($20)) {
   label = 8;
   break;
  }
  $21 = HEAP32[$i>>2]|0;
  $22 = HEAP32[$1>>2]|0;
  $23 = (($22) + 12|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = (($24) + ($21)|0);
  $26 = HEAP8[$25>>0]|0;
  $27 = $26 << 24 >> 24;
  $28 = HEAP32[$i>>2]|0;
  $29 = HEAP32[$2>>2]|0;
  $30 = (($29) + ($28)|0);
  $31 = HEAP8[$30>>0]|0;
  $32 = $31 << 24 >> 24;
  $33 = ($27|0)!=($32|0);
  if ($33) {
   label = 8;
   break;
  }
  $34 = HEAP32[$i>>2]|0;
  $35 = (($34) + 1)|0;
  HEAP32[$i>>2] = $35;
 }
 if ((label|0) == 8) {
  HEAP32[$0>>2] = 0;
  $36 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($36|0);
 }
 else if ((label|0) == 10) {
  HEAP32[$0>>2] = 1;
  $36 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($36|0);
 }
 return 0|0;
}
function _appendNode($tag,$node) {
 $tag = $tag|0;
 $node = $node|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp + 4|0;
 $1 = sp;
 HEAP32[$0>>2] = $tag;
 HEAP32[$1>>2] = $node;
 $2 = HEAP32[$0>>2]|0;
 $3 = (($2) + 52|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0|0);
 if (!($5)) {
  $6 = HEAP32[$0>>2]|0;
  $7 = (($6) + 48|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ($8|0)==(0|0);
  if (!($9)) {
   $16 = HEAP32[$1>>2]|0;
   $17 = HEAP32[$0>>2]|0;
   $18 = (($17) + 52|0);
   $19 = HEAP32[$18>>2]|0;
   HEAP32[$19>>2] = $16;
   $20 = HEAP32[$1>>2]|0;
   $21 = HEAP32[$0>>2]|0;
   $22 = (($21) + 52|0);
   HEAP32[$22>>2] = $20;
   STACKTOP = sp;return;
  }
 }
 $10 = HEAP32[$1>>2]|0;
 $11 = HEAP32[$0>>2]|0;
 $12 = (($11) + 48|0);
 HEAP32[$12>>2] = $10;
 $13 = HEAP32[$1>>2]|0;
 $14 = HEAP32[$0>>2]|0;
 $15 = (($14) + 52|0);
 HEAP32[$15>>2] = $13;
 STACKTOP = sp;return;
}
function _setLang($dst,$src) {
 $dst = $dst|0;
 $src = $src|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp + 8|0;
 $1 = sp + 4|0;
 $i = sp;
 HEAP32[$0>>2] = $dst;
 HEAP32[$1>>2] = $src;
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if (!($3)) {
  $4 = HEAP32[$1>>2]|0;
  $5 = HEAP8[$4>>0]|0;
  $6 = $5 << 24 >> 24;
  $7 = ($6|0)==(0);
  if (!($7)) {
   HEAP32[$i>>2] = 0;
   while(1) {
    $13 = HEAP32[$i>>2]|0;
    $14 = ($13|0)<(3);
    if (!($14)) {
     break;
    }
    $15 = HEAP32[$1>>2]|0;
    $16 = ($15|0)!=(0|0);
    if (!($16)) {
     break;
    }
    $17 = HEAP32[$1>>2]|0;
    $18 = HEAP8[$17>>0]|0;
    $19 = $18 << 24 >> 24;
    $20 = ($19|0)!=(0);
    if (!($20)) {
     break;
    }
    $21 = HEAP32[$i>>2]|0;
    $22 = HEAP32[$1>>2]|0;
    $23 = (($22) + ($21)|0);
    $24 = HEAP8[$23>>0]|0;
    $25 = HEAP32[$i>>2]|0;
    $26 = HEAP32[$0>>2]|0;
    $27 = (($26) + ($25)|0);
    HEAP8[$27>>0] = $24;
    $28 = HEAP32[$i>>2]|0;
    $29 = (($28) + 1)|0;
    HEAP32[$i>>2] = $29;
   }
   while(1) {
    $30 = HEAP32[$i>>2]|0;
    $31 = ($30|0)<(3);
    if (!($31)) {
     break;
    }
    $32 = HEAP32[$i>>2]|0;
    $33 = HEAP32[$0>>2]|0;
    $34 = (($33) + ($32)|0);
    HEAP8[$34>>0] = 32;
    $35 = HEAP32[$i>>2]|0;
    $36 = (($35) + 1)|0;
    HEAP32[$i>>2] = $36;
   }
   STACKTOP = sp;return;
  }
 }
 $8 = HEAP32[$0>>2]|0;
 HEAP8[$8>>0] = 88;
 $9 = HEAP32[$0>>2]|0;
 $10 = (($9) + 1|0);
 HEAP8[$10>>0] = 88;
 $11 = HEAP32[$0>>2]|0;
 $12 = (($11) + 2|0);
 HEAP8[$12>>0] = 88;
 STACKTOP = sp;return;
}
function _frame_id_matches($id,$mask) {
 $id = $id|0;
 $mask = $mask|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $i = 0, $iw = 0, $mw = 0, $result = 0, $window = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = sp + 24|0;
 $1 = sp + 20|0;
 $result = sp + 16|0;
 $i = sp + 12|0;
 $window = sp + 8|0;
 $mw = sp + 4|0;
 $iw = sp;
 HEAP32[$0>>2] = $id;
 HEAP32[$1>>2] = $mask;
 HEAP32[$result>>2] = 0;
 HEAP32[$window>>2] = 255;
 HEAP32[$i>>2] = 0;
 while(1) {
  $2 = HEAP32[$i>>2]|0;
  $3 = ($2|0)<(4);
  if (!($3)) {
   break;
  }
  $4 = HEAP32[$1>>2]|0;
  $5 = HEAP32[$window>>2]|0;
  $6 = $4 & $5;
  HEAP32[$mw>>2] = $6;
  $7 = HEAP32[$0>>2]|0;
  $8 = HEAP32[$window>>2]|0;
  $9 = $7 & $8;
  HEAP32[$iw>>2] = $9;
  $10 = HEAP32[$mw>>2]|0;
  $11 = ($10|0)!=(0);
  if ($11) {
   $12 = HEAP32[$mw>>2]|0;
   $13 = HEAP32[$iw>>2]|0;
   $14 = ($12|0)!=($13|0);
   if ($14) {
    $15 = HEAP32[$iw>>2]|0;
    $16 = HEAP32[$result>>2]|0;
    $17 = $16 | $15;
    HEAP32[$result>>2] = $17;
   }
  }
  $18 = HEAP32[$i>>2]|0;
  $19 = (($18) + 1)|0;
  HEAP32[$i>>2] = $19;
  $20 = HEAP32[$window>>2]|0;
  $21 = $20 << 8;
  HEAP32[$window>>2] = $21;
 }
 $22 = HEAP32[$result>>2]|0;
 STACKTOP = sp;return ($22|0);
}
function _is_lame_global_flags_valid($gfp) {
 $gfp = $gfp|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp + 4|0;
 $1 = sp;
 HEAP32[$1>>2] = $gfp;
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 do {
  if ($3) {
   HEAP32[$0>>2] = 0;
  } else {
   $4 = HEAP32[$1>>2]|0;
   $5 = HEAP32[$4>>2]|0;
   $6 = ($5|0)!=(-487877);
   if ($6) {
    HEAP32[$0>>2] = 0;
    break;
   } else {
    HEAP32[$0>>2] = 1;
    break;
   }
  }
 } while(0);
 $7 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($7|0);
}
function _is_lame_internal_flags_valid($gfc) {
 $gfc = $gfc|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp + 4|0;
 $1 = sp;
 HEAP32[$1>>2] = $gfc;
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 do {
  if ($3) {
   HEAP32[$0>>2] = 0;
  } else {
   $4 = HEAP32[$1>>2]|0;
   $5 = HEAP32[$4>>2]|0;
   $6 = ($5|0)!=(-487877);
   if ($6) {
    HEAP32[$0>>2] = 0;
    break;
   } else {
    HEAP32[$0>>2] = 1;
    break;
   }
  }
 } while(0);
 $7 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($7|0);
}
function _lame_init_params($gfp) {
 $gfp = $gfp|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0.0, $101 = 0, $1010 = 0.0, $1011 = 0.0, $1012 = 0, $1013 = 0, $1014 = 0;
 var $1015 = 0, $1016 = 0.0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0.0, $1021 = 0.0, $1022 = 0.0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0.0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0.0, $1032 = 0.0;
 var $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0.0, $1037 = 0, $1038 = 0, $1039 = 0.0, $104 = 0, $1040 = 0.0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0;
 var $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0;
 var $107 = 0, $1070 = 0, $1071 = 0, $1072 = 0, $1073 = 0, $1074 = 0, $1075 = 0, $1076 = 0, $1077 = 0, $1078 = 0, $1079 = 0, $108 = 0, $1080 = 0, $1081 = 0, $1082 = 0, $1083 = 0, $1084 = 0, $1085 = 0, $1086 = 0, $1087 = 0;
 var $1088 = 0, $1089 = 0, $109 = 0, $1090 = 0, $1091 = 0, $1092 = 0, $1093 = 0, $1094 = 0, $1095 = 0, $1096 = 0, $1097 = 0, $1098 = 0, $1099 = 0, $11 = 0, $110 = 0, $1100 = 0, $1101 = 0, $1102 = 0, $1103 = 0, $1104 = 0;
 var $1105 = 0, $1106 = 0, $1107 = 0, $1108 = 0, $1109 = 0, $111 = 0, $1110 = 0, $1111 = 0, $1112 = 0, $1113 = 0, $1114 = 0, $1115 = 0, $1116 = 0, $1117 = 0, $1118 = 0, $1119 = 0, $112 = 0, $1120 = 0, $1121 = 0, $1122 = 0;
 var $1123 = 0, $1124 = 0, $1125 = 0, $1126 = 0, $1127 = 0, $1128 = 0, $1129 = 0, $113 = 0, $1130 = 0, $1131 = 0, $1132 = 0, $1133 = 0, $1134 = 0, $1135 = 0, $1136 = 0, $1137 = 0, $1138 = 0, $1139 = 0, $114 = 0, $1140 = 0;
 var $1141 = 0, $1142 = 0, $1143 = 0, $1144 = 0, $1145 = 0, $1146 = 0, $1147 = 0, $1148 = 0, $1149 = 0, $115 = 0, $1150 = 0, $1151 = 0, $1152 = 0, $1153 = 0, $1154 = 0, $1155 = 0, $1156 = 0, $1157 = 0, $1158 = 0, $1159 = 0;
 var $116 = 0, $1160 = 0, $1161 = 0, $1162 = 0, $1163 = 0, $1164 = 0, $1165 = 0, $1166 = 0, $1167 = 0, $1168 = 0, $1169 = 0, $117 = 0, $1170 = 0, $1171 = 0, $1172 = 0, $1173 = 0, $1174 = 0, $1175 = 0, $1176 = 0, $1177 = 0;
 var $1178 = 0, $1179 = 0, $118 = 0, $1180 = 0, $1181 = 0, $1182 = 0, $1183 = 0, $1184 = 0, $1185 = 0, $1186 = 0, $1187 = 0, $1188 = 0, $1189 = 0, $119 = 0, $1190 = 0, $1191 = 0, $1192 = 0, $1193 = 0, $1194 = 0, $1195 = 0;
 var $1196 = 0, $1197 = 0, $1198 = 0, $1199 = 0, $12 = 0, $120 = 0, $1200 = 0, $1201 = 0, $1202 = 0, $1203 = 0, $1204 = 0, $1205 = 0, $1206 = 0, $1207 = 0, $1208 = 0, $1209 = 0, $121 = 0, $1210 = 0, $1211 = 0, $1212 = 0;
 var $1213 = 0, $1214 = 0, $1215 = 0, $1216 = 0, $1217 = 0, $1218 = 0, $1219 = 0, $122 = 0, $1220 = 0, $1221 = 0, $1222 = 0, $1223 = 0, $1224 = 0, $1225 = 0, $1226 = 0, $1227 = 0, $1228 = 0, $1229 = 0, $123 = 0, $1230 = 0;
 var $1231 = 0, $1232 = 0, $1233 = 0, $1234 = 0, $1235 = 0, $1236 = 0, $1237 = 0, $1238 = 0, $1239 = 0, $124 = 0, $1240 = 0.0, $1241 = 0, $1242 = 0, $1243 = 0, $1244 = 0, $1245 = 0, $1246 = 0, $1247 = 0, $1248 = 0, $1249 = 0;
 var $125 = 0, $1250 = 0, $1251 = 0, $1252 = 0, $1253 = 0, $1254 = 0, $1255 = 0, $1256 = 0, $1257 = 0, $1258 = 0, $1259 = 0, $126 = 0, $1260 = 0, $1261 = 0, $1262 = 0, $1263 = 0, $1264 = 0, $1265 = 0, $1266 = 0, $1267 = 0;
 var $1268 = 0, $1269 = 0, $127 = 0, $1270 = 0, $1271 = 0, $1272 = 0, $1273 = 0, $1274 = 0, $1275 = 0, $1276 = 0, $1277 = 0, $1278 = 0, $1279 = 0, $128 = 0, $1280 = 0, $1281 = 0, $1282 = 0, $1283 = 0, $1284 = 0, $1285 = 0;
 var $1286 = 0, $1287 = 0, $1288 = 0, $1289 = 0, $129 = 0, $1290 = 0, $1291 = 0, $1292 = 0, $1293 = 0, $1294 = 0, $1295 = 0, $1296 = 0, $1297 = 0, $1298 = 0, $1299 = 0, $13 = 0, $130 = 0, $1300 = 0, $1301 = 0, $1302 = 0;
 var $1303 = 0, $1304 = 0, $1305 = 0, $1306 = 0, $1307 = 0, $1308 = 0, $1309 = 0, $131 = 0, $1310 = 0, $1311 = 0, $1312 = 0, $1313 = 0, $1314 = 0, $1315 = 0, $1316 = 0, $1317 = 0, $1318 = 0, $1319 = 0, $132 = 0, $1320 = 0;
 var $1321 = 0, $1322 = 0, $1323 = 0, $1324 = 0, $1325 = 0, $1326 = 0, $1327 = 0, $1328 = 0, $1329 = 0, $133 = 0, $1330 = 0, $1331 = 0, $1332 = 0, $1333 = 0, $1334 = 0, $1335 = 0, $1336 = 0, $1337 = 0, $1338 = 0, $1339 = 0;
 var $134 = 0, $1340 = 0, $1341 = 0, $1342 = 0, $1343 = 0, $1344 = 0, $1345 = 0, $1346 = 0, $1347 = 0, $1348 = 0, $1349 = 0, $135 = 0, $1350 = 0, $1351 = 0, $1352 = 0, $1353 = 0, $1354 = 0, $1355 = 0, $1356 = 0, $1357 = 0;
 var $1358 = 0, $1359 = 0, $136 = 0, $1360 = 0, $1361 = 0, $1362 = 0, $1363 = 0, $1364 = 0, $1365 = 0, $1366 = 0, $1367 = 0, $1368 = 0, $1369 = 0, $137 = 0, $1370 = 0, $1371 = 0, $1372 = 0, $1373 = 0, $1374 = 0, $1375 = 0;
 var $1376 = 0.0, $1377 = 0, $1378 = 0, $1379 = 0, $138 = 0, $1380 = 0, $1381 = 0, $1382 = 0.0, $1383 = 0, $1384 = 0, $1385 = 0, $1386 = 0, $1387 = 0, $1388 = 0, $1389 = 0, $139 = 0, $1390 = 0, $1391 = 0, $1392 = 0.0, $1393 = 0;
 var $1394 = 0, $1395 = 0, $1396 = 0.0, $1397 = 0.0, $1398 = 0, $1399 = 0, $14 = 0, $140 = 0, $1400 = 0.0, $1401 = 0, $1402 = 0, $1403 = 0, $1404 = 0.0, $1405 = 0.0, $1406 = 0, $1407 = 0, $1408 = 0, $1409 = 0, $141 = 0, $1410 = 0;
 var $1411 = 0, $1412 = 0, $1413 = 0, $1414 = 0, $1415 = 0, $1416 = 0, $1417 = 0, $1418 = 0, $1419 = 0, $142 = 0, $1420 = 0, $1421 = 0, $1422 = 0, $1423 = 0, $1424 = 0, $1425 = 0, $1426 = 0, $1427 = 0, $1428 = 0, $1429 = 0;
 var $143 = 0, $1430 = 0, $1431 = 0, $1432 = 0, $1433 = 0, $1434 = 0, $1435 = 0, $1436 = 0, $1437 = 0, $1438 = 0, $1439 = 0, $144 = 0, $1440 = 0, $1441 = 0, $1442 = 0, $1443 = 0, $1444 = 0, $1445 = 0, $1446 = 0, $1447 = 0;
 var $1448 = 0, $1449 = 0, $145 = 0, $1450 = 0, $1451 = 0, $1452 = 0, $1453 = 0, $1454 = 0, $1455 = 0, $1456 = 0, $1457 = 0, $1458 = 0, $1459 = 0, $146 = 0, $1460 = 0, $1461 = 0, $1462 = 0, $1463 = 0, $1464 = 0, $1465 = 0;
 var $1466 = 0, $1467 = 0, $1468 = 0, $1469 = 0, $147 = 0, $1470 = 0, $1471 = 0, $1472 = 0, $1473 = 0, $1474 = 0, $1475 = 0, $1476 = 0, $1477 = 0, $1478 = 0, $1479 = 0, $148 = 0, $1480 = 0, $1481 = 0, $1482 = 0, $1483 = 0;
 var $1484 = 0, $1485 = 0, $1486 = 0, $1487 = 0, $1488 = 0, $1489 = 0, $149 = 0, $1490 = 0, $1491 = 0, $1492 = 0, $1493 = 0, $1494 = 0, $1495 = 0, $1496 = 0, $1497 = 0, $1498 = 0, $1499 = 0, $15 = 0, $150 = 0, $1500 = 0;
 var $1501 = 0, $1502 = 0, $1503 = 0, $1504 = 0, $1505 = 0, $1506 = 0, $1507 = 0, $1508 = 0, $1509 = 0, $151 = 0, $1510 = 0, $1511 = 0, $1512 = 0, $1513 = 0, $1514 = 0, $1515 = 0, $1516 = 0, $1517 = 0, $1518 = 0, $1519 = 0;
 var $152 = 0, $1520 = 0, $1521 = 0, $1522 = 0, $1523 = 0, $1524 = 0, $1525 = 0, $1526 = 0, $1527 = 0, $1528 = 0, $1529 = 0, $153 = 0, $1530 = 0, $1531 = 0, $1532 = 0, $1533 = 0, $1534 = 0, $1535 = 0, $1536 = 0, $1537 = 0;
 var $1538 = 0, $1539 = 0, $154 = 0, $1540 = 0, $1541 = 0, $1542 = 0, $1543 = 0, $1544 = 0, $1545 = 0, $1546 = 0, $1547 = 0, $1548 = 0, $1549 = 0, $155 = 0, $1550 = 0, $1551 = 0, $1552 = 0, $1553 = 0, $1554 = 0, $1555 = 0;
 var $1556 = 0, $1557 = 0, $1558 = 0, $1559 = 0, $156 = 0, $1560 = 0, $1561 = 0, $1562 = 0, $1563 = 0, $1564 = 0, $1565 = 0, $1566 = 0, $1567 = 0, $1568 = 0, $1569 = 0, $157 = 0, $1570 = 0, $1571 = 0, $1572 = 0, $1573 = 0;
 var $1574 = 0, $1575 = 0, $1576 = 0, $1577 = 0, $1578 = 0, $1579 = 0, $158 = 0, $1580 = 0, $1581 = 0, $1582 = 0, $1583 = 0, $1584 = 0, $1585 = 0, $1586 = 0, $1587 = 0, $1588 = 0, $1589 = 0, $159 = 0, $1590 = 0, $1591 = 0;
 var $1592 = 0, $1593 = 0, $1594 = 0, $1595 = 0, $1596 = 0, $1597 = 0, $1598 = 0, $1599 = 0, $16 = 0, $160 = 0, $1600 = 0.0, $1601 = 0, $1602 = 0, $1603 = 0, $1604 = 0, $1605 = 0, $1606 = 0, $1607 = 0, $1608 = 0, $1609 = 0;
 var $161 = 0, $1610 = 0, $1611 = 0, $1612 = 0, $1613 = 0, $1614 = 0, $1615 = 0, $1616 = 0, $1617 = 0, $1618 = 0, $1619 = 0.0, $162 = 0, $1620 = 0.0, $1621 = 0.0, $1622 = 0.0, $1623 = 0.0, $1624 = 0, $1625 = 0, $1626 = 0, $1627 = 0;
 var $1628 = 0, $1629 = 0, $163 = 0, $1630 = 0, $1631 = 0, $1632 = 0, $1633 = 0, $1634 = 0, $1635 = 0, $1636 = 0, $1637 = 0, $1638 = 0, $1639 = 0, $164 = 0, $1640 = 0, $1641 = 0, $1642 = 0, $1643 = 0, $1644 = 0, $1645 = 0;
 var $1646 = 0, $1647 = 0, $1648 = 0, $1649 = 0, $165 = 0, $1650 = 0, $1651 = 0, $1652 = 0, $1653 = 0, $1654 = 0, $1655 = 0, $1656 = 0, $1657 = 0, $1658 = 0, $1659 = 0, $166 = 0, $1660 = 0, $1661 = 0, $1662 = 0.0, $1663 = 0;
 var $1664 = 0, $1665 = 0, $1666 = 0, $1667 = 0, $1668 = 0, $1669 = 0, $167 = 0, $1670 = 0, $1671 = 0, $1672 = 0, $1673 = 0, $1674 = 0, $1675 = 0, $1676 = 0, $1677 = 0.0, $1678 = 0, $1679 = 0, $168 = 0, $1680 = 0, $1681 = 0;
 var $1682 = 0, $1683 = 0.0, $1684 = 0, $1685 = 0, $1686 = 0, $1687 = 0, $1688 = 0, $1689 = 0, $169 = 0, $1690 = 0, $1691 = 0, $1692 = 0, $1693 = 0, $1694 = 0, $1695 = 0.0, $1696 = 0, $1697 = 0, $1698 = 0, $1699 = 0, $17 = 0;
 var $170 = 0, $1700 = 0.0, $1701 = 0, $1702 = 0, $1703 = 0, $1704 = 0, $1705 = 0.0, $1706 = 0.0, $1707 = 0, $1708 = 0, $1709 = 0, $171 = 0, $1710 = 0, $1711 = 0.0, $1712 = 0.0, $1713 = 0.0, $1714 = 0, $1715 = 0, $1716 = 0, $1717 = 0;
 var $1718 = 0.0, $1719 = 0, $172 = 0, $1720 = 0, $1721 = 0, $1722 = 0, $1723 = 0, $1724 = 0, $1725 = 0, $1726 = 0, $1727 = 0, $1728 = 0, $1729 = 0, $173 = 0, $1730 = 0, $1731 = 0, $1732 = 0, $1733 = 0, $1734 = 0, $1735 = 0;
 var $1736 = 0, $1737 = 0, $1738 = 0, $1739 = 0, $174 = 0, $1740 = 0, $1741 = 0, $1742 = 0, $1743 = 0, $1744 = 0, $1745 = 0, $1746 = 0, $1747 = 0, $1748 = 0, $1749 = 0, $175 = 0, $1750 = 0, $1751 = 0, $1752 = 0, $1753 = 0;
 var $1754 = 0, $1755 = 0, $1756 = 0, $1757 = 0, $1758 = 0, $1759 = 0, $176 = 0, $1760 = 0, $1761 = 0, $1762 = 0, $1763 = 0, $1764 = 0, $1765 = 0, $1766 = 0, $1767 = 0.0, $1768 = 0, $1769 = 0, $177 = 0, $1770 = 0, $1771 = 0;
 var $1772 = 0.0, $1773 = 0, $1774 = 0, $1775 = 0, $1776 = 0.0, $1777 = 0.0, $1778 = 0, $1779 = 0, $178 = 0, $1780 = 0.0, $1781 = 0.0, $1782 = 0, $1783 = 0, $1784 = 0, $1785 = 0, $1786 = 0, $1787 = 0.0, $1788 = 0, $1789 = 0, $179 = 0;
 var $1790 = 0, $1791 = 0, $1792 = 0.0, $1793 = 0, $1794 = 0, $1795 = 0, $1796 = 0.0, $1797 = 0.0, $1798 = 0, $1799 = 0, $18 = 0, $180 = 0, $1800 = 0.0, $1801 = 0.0, $1802 = 0, $1803 = 0, $1804 = 0, $1805 = 0, $1806 = 0, $1807 = 0.0;
 var $1808 = 0, $1809 = 0, $181 = 0, $1810 = 0, $1811 = 0, $1812 = 0.0, $1813 = 0, $1814 = 0, $1815 = 0, $1816 = 0.0, $1817 = 0.0, $1818 = 0, $1819 = 0, $182 = 0, $1820 = 0.0, $1821 = 0.0, $1822 = 0, $1823 = 0, $1824 = 0, $1825 = 0;
 var $1826 = 0, $1827 = 0.0, $1828 = 0, $1829 = 0, $183 = 0, $1830 = 0, $1831 = 0, $1832 = 0.0, $1833 = 0, $1834 = 0, $1835 = 0, $1836 = 0.0, $1837 = 0.0, $1838 = 0, $1839 = 0, $184 = 0, $1840 = 0.0, $1841 = 0.0, $1842 = 0, $1843 = 0;
 var $1844 = 0.0, $1845 = 0, $1846 = 0, $1847 = 0.0, $1848 = 0.0, $1849 = 0, $185 = 0, $1850 = 0, $1851 = 0.0, $1852 = 0.0, $1853 = 0.0, $1854 = 0, $1855 = 0, $1856 = 0.0, $1857 = 0, $1858 = 0.0, $1859 = 0.0, $186 = 0, $1860 = 0, $1861 = 0;
 var $1862 = 0.0, $1863 = 0, $1864 = 0.0, $1865 = 0.0, $1866 = 0, $1867 = 0, $1868 = 0.0, $1869 = 0, $187 = 0, $1870 = 0, $1871 = 0.0, $1872 = 0.0, $1873 = 0, $1874 = 0, $1875 = 0.0, $1876 = 0.0, $1877 = 0.0, $1878 = 0, $1879 = 0, $188 = 0;
 var $1880 = 0.0, $1881 = 0, $1882 = 0.0, $1883 = 0.0, $1884 = 0, $1885 = 0, $1886 = 0.0, $1887 = 0, $1888 = 0.0, $1889 = 0.0, $189 = 0, $1890 = 0, $1891 = 0, $1892 = 0.0, $1893 = 0, $1894 = 0, $1895 = 0.0, $1896 = 0.0, $1897 = 0, $1898 = 0;
 var $1899 = 0, $19 = 0, $190 = 0, $1900 = 0, $1901 = 0, $1902 = 0, $1903 = 0, $1904 = 0, $1905 = 0.0, $1906 = 0, $1907 = 0.0, $1908 = 0.0, $1909 = 0.0, $191 = 0, $1910 = 0, $1911 = 0.0, $1912 = 0, $1913 = 0, $1914 = 0.0, $1915 = 0.0;
 var $1916 = 0.0, $1917 = 0, $1918 = 0, $1919 = 0, $192 = 0, $1920 = 0, $1921 = 0.0, $1922 = 0, $1923 = 0, $1924 = 0, $1925 = 0.0, $1926 = 0, $1927 = 0, $1928 = 0, $1929 = 0, $193 = 0, $1930 = 0.0, $1931 = 0, $1932 = 0, $1933 = 0;
 var $1934 = 0, $1935 = 0, $1936 = 0.0, $1937 = 0, $1938 = 0, $1939 = 0, $194 = 0, $1940 = 0, $1941 = 0, $1942 = 0, $1943 = 0, $1944 = 0, $1945 = 0, $1946 = 0, $1947 = 0, $1948 = 0, $1949 = 0, $195 = 0, $1950 = 0, $1951 = 0;
 var $1952 = 0, $1953 = 0, $1954 = 0, $1955 = 0, $1956 = 0, $1957 = 0, $1958 = 0, $1959 = 0, $196 = 0, $1960 = 0, $1961 = 0, $1962 = 0, $1963 = 0, $1964 = 0, $1965 = 0, $1966 = 0, $1967 = 0, $1968 = 0, $1969 = 0, $197 = 0;
 var $1970 = 0, $1971 = 0, $1972 = 0, $1973 = 0, $1974 = 0, $1975 = 0, $1976 = 0, $1977 = 0, $1978 = 0, $1979 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0.0, $225 = 0.0, $226 = 0.0, $227 = 0.0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0.0, $232 = 0.0, $233 = 0.0, $234 = 0.0, $235 = 0, $236 = 0, $237 = 0.0, $238 = 0.0, $239 = 0.0, $24 = 0, $240 = 0.0, $241 = 0;
 var $242 = 0.0, $243 = 0.0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0.0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0.0, $263 = 0.0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0.0, $277 = 0, $278 = 0;
 var $279 = 0.0, $28 = 0, $280 = 0.0, $281 = 0.0, $282 = 0.0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0.0, $392 = 0, $393 = 0, $394 = 0.0, $395 = 0.0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0.0, $406 = 0, $407 = 0, $408 = 0, $409 = 0.0, $41 = 0, $410 = 0, $411 = 0.0, $412 = 0, $413 = 0, $414 = 0, $415 = 0.0, $416 = 0.0, $417 = 0.0, $418 = 0.0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0.0, $423 = 0.0, $424 = 0.0, $425 = 0.0, $426 = 0, $427 = 0, $428 = 0, $429 = 0.0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0.0, $434 = 0.0, $435 = 0.0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0.0, $449 = 0.0, $45 = 0, $450 = 0, $451 = 0.0, $452 = 0, $453 = 0, $454 = 0, $455 = 0.0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0.0, $461 = 0, $462 = 0, $463 = 0, $464 = 0.0, $465 = 0.0, $466 = 0, $467 = 0, $468 = 0, $469 = 0.0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0.0, $474 = 0.0, $475 = 0, $476 = 0;
 var $477 = 0, $478 = 0.0, $479 = 0.0, $48 = 0, $480 = 0.0, $481 = 0, $482 = 0, $483 = 0, $484 = 0.0, $485 = 0.0, $486 = 0.0, $487 = 0.0, $488 = 0.0, $489 = 0.0, $49 = 0, $490 = 0.0, $491 = 0.0, $492 = 0, $493 = 0, $494 = 0;
 var $495 = 0.0, $496 = 0, $497 = 0, $498 = 0, $499 = 0.0, $5 = 0, $50 = 0, $500 = 0.0, $501 = 0.0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0;
 var $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0;
 var $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0.0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0;
 var $549 = 0, $55 = 0, $550 = 0.0, $551 = 0, $552 = 0, $553 = 0.0, $554 = 0.0, $555 = 0.0, $556 = 0.0, $557 = 0.0, $558 = 0.0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0;
 var $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0.0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0.0, $58 = 0, $580 = 0, $581 = 0, $582 = 0.0, $583 = 0.0, $584 = 0.0;
 var $585 = 0.0, $586 = 0.0, $587 = 0.0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0.0;
 var $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0.0, $609 = 0, $61 = 0, $610 = 0, $611 = 0.0, $612 = 0.0, $613 = 0.0, $614 = 0.0, $615 = 0.0, $616 = 0.0, $617 = 0, $618 = 0, $619 = 0, $62 = 0;
 var $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0.0, $63 = 0, $630 = 0.0, $631 = 0.0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0;
 var $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0;
 var $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0;
 var $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0;
 var $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0;
 var $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0.0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0.0, $724 = 0.0, $725 = 0.0, $726 = 0.0, $727 = 0, $728 = 0;
 var $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0.0, $742 = 0, $743 = 0, $744 = 0, $745 = 0.0, $746 = 0.0;
 var $747 = 0.0, $748 = 0.0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0;
 var $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0;
 var $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0;
 var $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0;
 var $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0;
 var $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0;
 var $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0.0;
 var $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0.0, $884 = 0, $885 = 0, $886 = 0, $887 = 0.0, $888 = 0.0, $889 = 0.0, $89 = 0, $890 = 0.0;
 var $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0.0, $902 = 0, $903 = 0, $904 = 0, $905 = 0.0, $906 = 0.0, $907 = 0.0, $908 = 0.0;
 var $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0;
 var $927 = 0, $928 = 0, $929 = 0.0, $93 = 0, $930 = 0.0, $931 = 0.0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0;
 var $945 = 0.0, $946 = 0.0, $947 = 0.0, $948 = 0, $949 = 0, $95 = 0, $950 = 0.0, $951 = 0.0, $952 = 0.0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0.0, $959 = 0, $96 = 0, $960 = 0, $961 = 0.0, $962 = 0.0;
 var $963 = 0, $964 = 0, $965 = 0, $966 = 0.0, $967 = 0, $968 = 0, $969 = 0.0, $97 = 0, $970 = 0.0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0;
 var $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0.0, $994 = 0.0, $995 = 0.0, $996 = 0, $997 = 0, $998 = 0, $999 = 0;
 var $a = 0, $a2 = 0, $a5 = 0, $b = 0, $b3 = 0, $b6 = 0, $cfg = 0, $d = 0, $d1 = 0, $gfc = 0, $highpass = 0, $i = 0, $j = 0, $k = 0, $lowpass = 0, $m = 0, $m10 = 0, $m4 = 0, $m7 = 0, $q_ = 0;
 var $qval = 0, $size = 0, $size8 = 0, $start = 0, $start9 = 0, $t_ = 0, $vbrmode = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 192|0;
 $0 = sp + 176|0;
 $1 = sp + 172|0;
 $i = sp + 168|0;
 $j = sp + 164|0;
 $gfc = sp + 160|0;
 $cfg = sp + 156|0;
 $qval = sp + 152|0;
 $d = sp + 96|0;
 $q_ = sp + 148|0;
 $t_ = sp + 144|0;
 $d1 = sp + 88|0;
 $lowpass = sp + 80|0;
 $highpass = sp + 72|0;
 $a = sp + 64|0;
 $b = sp + 56|0;
 $m = sp + 48|0;
 $a2 = sp + 40|0;
 $b3 = sp + 32|0;
 $m4 = sp + 24|0;
 $a5 = sp + 16|0;
 $b6 = sp + 8|0;
 $m7 = sp;
 $size = sp + 140|0;
 $start = sp + 136|0;
 $size8 = sp + 132|0;
 $start9 = sp + 128|0;
 $k = sp + 124|0;
 $vbrmode = sp + 120|0;
 $m10 = sp + 104|0;
 HEAP32[$1>>2] = $gfp;
 $2 = HEAP32[$1>>2]|0;
 $3 = (($2) + 288|0);
 $4 = HEAP32[$3>>2]|0;
 HEAP32[$gfc>>2] = $4;
 $5 = HEAP32[$gfc>>2]|0;
 $6 = (($5) + 16|0);
 HEAP32[$cfg>>2] = $6;
 $7 = HEAP32[$gfc>>2]|0;
 HEAP32[$7>>2] = 0;
 $8 = HEAP32[$1>>2]|0;
 $9 = (($8) + 180|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = HEAP32[$cfg>>2]|0;
 $12 = (($11) + 108|0);
 HEAP32[$12>>2] = $10;
 $13 = HEAP32[$1>>2]|0;
 $14 = (($13) + 32|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = HEAP32[$cfg>>2]|0;
 $17 = (($16) + 124|0);
 HEAP32[$17>>2] = $15;
 $18 = HEAP32[$cfg>>2]|0;
 $19 = (($18) + 124|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = ($20|0)!=(0);
 if ($21) {
  $22 = HEAP32[$1>>2]|0;
  $23 = (($22) + 36|0);
  HEAP32[$23>>2] = 0;
 }
 $24 = HEAP32[$gfc>>2]|0;
 $25 = (($24) + 85804|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = ($26|0)!=(0|0);
 if ($27) {
  $28 = HEAP32[$1>>2]|0;
  $29 = (($28) + 36|0);
  HEAP32[$29>>2] = 0;
 }
 $30 = HEAP32[$1>>2]|0;
 $31 = (($30) + 272|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = HEAP32[$gfc>>2]|0;
 $34 = (($33) + 85828|0);
 HEAP32[$34>>2] = $32;
 $35 = HEAP32[$1>>2]|0;
 $36 = (($35) + 272|0);
 $37 = (($36) + 4|0);
 $38 = HEAP32[$37>>2]|0;
 $39 = HEAP32[$gfc>>2]|0;
 $40 = (($39) + 85832|0);
 HEAP32[$40>>2] = $38;
 $41 = HEAP32[$1>>2]|0;
 $42 = (($41) + 272|0);
 $43 = (($42) + 8|0);
 $44 = HEAP32[$43>>2]|0;
 $45 = HEAP32[$gfc>>2]|0;
 $46 = (($45) + 85836|0);
 HEAP32[$46>>2] = $44;
 $47 = HEAP32[$1>>2]|0;
 $48 = (($47) + 292|0);
 $49 = (($48) + 4|0);
 $50 = HEAP32[$49>>2]|0;
 $51 = ($50|0)!=(0);
 if ($51) {
  $52 = (_has_3DNow()|0);
  $53 = HEAP32[$gfc>>2]|0;
  $54 = (($53) + 85756|0);
  $55 = HEAP32[$54>>2]|0;
  $56 = $52 & 1;
  $57 = $56 << 1;
  $58 = $55 & -3;
  $59 = $58 | $57;
  HEAP32[$54>>2] = $59;
 } else {
  $60 = HEAP32[$gfc>>2]|0;
  $61 = (($60) + 85756|0);
  $62 = HEAP32[$61>>2]|0;
  $63 = $62 & -3;
  HEAP32[$61>>2] = $63;
 }
 $64 = HEAP32[$1>>2]|0;
 $65 = (($64) + 292|0);
 $66 = HEAP32[$65>>2]|0;
 $67 = ($66|0)!=(0);
 if ($67) {
  $68 = (_has_MMX()|0);
  $69 = HEAP32[$gfc>>2]|0;
  $70 = (($69) + 85756|0);
  $71 = HEAP32[$70>>2]|0;
  $72 = $68 & 1;
  $73 = $71 & -2;
  $74 = $73 | $72;
  HEAP32[$70>>2] = $74;
 } else {
  $75 = HEAP32[$gfc>>2]|0;
  $76 = (($75) + 85756|0);
  $77 = HEAP32[$76>>2]|0;
  $78 = $77 & -2;
  HEAP32[$76>>2] = $78;
 }
 $79 = HEAP32[$1>>2]|0;
 $80 = (($79) + 292|0);
 $81 = (($80) + 8|0);
 $82 = HEAP32[$81>>2]|0;
 $83 = ($82|0)!=(0);
 if ($83) {
  $84 = (_has_SSE()|0);
  $85 = HEAP32[$gfc>>2]|0;
  $86 = (($85) + 85756|0);
  $87 = HEAP32[$86>>2]|0;
  $88 = $84 & 1;
  $89 = $88 << 2;
  $90 = $87 & -5;
  $91 = $90 | $89;
  HEAP32[$86>>2] = $91;
  $92 = (_has_SSE2()|0);
  $93 = HEAP32[$gfc>>2]|0;
  $94 = (($93) + 85756|0);
  $95 = HEAP32[$94>>2]|0;
  $96 = $92 & 1;
  $97 = $96 << 3;
  $98 = $95 & -9;
  $99 = $98 | $97;
  HEAP32[$94>>2] = $99;
 } else {
  $100 = HEAP32[$gfc>>2]|0;
  $101 = (($100) + 85756|0);
  $102 = HEAP32[$101>>2]|0;
  $103 = $102 & -5;
  HEAP32[$101>>2] = $103;
  $104 = HEAP32[$gfc>>2]|0;
  $105 = (($104) + 85756|0);
  $106 = HEAP32[$105>>2]|0;
  $107 = $106 & -9;
  HEAP32[$105>>2] = $107;
 }
 $108 = HEAP32[$gfc>>2]|0;
 $109 = (($108) + 85796|0);
 $110 = HEAP32[$109>>2]|0;
 $111 = (0|0)==($110|0);
 if ($111) {
  $112 = (_calloc(1,2772)|0);
  $113 = HEAP32[$gfc>>2]|0;
  $114 = (($113) + 85796|0);
  HEAP32[$114>>2] = $112;
 }
 $115 = HEAP32[$gfc>>2]|0;
 $116 = (($115) + 85796|0);
 $117 = HEAP32[$116>>2]|0;
 $118 = (0|0)==($117|0);
 if ($118) {
  HEAP32[$0>>2] = -2;
  $1979 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($1979|0);
 }
 $119 = HEAP32[$gfc>>2]|0;
 $120 = (($119) + 85676|0);
 $121 = HEAP32[$120>>2]|0;
 $122 = (0|0)==($121|0);
 if ($122) {
  $123 = (_calloc(1,134792)|0);
  $124 = HEAP32[$gfc>>2]|0;
  $125 = (($124) + 85676|0);
  HEAP32[$125>>2] = $123;
 }
 $126 = HEAP32[$gfc>>2]|0;
 $127 = (($126) + 85676|0);
 $128 = HEAP32[$127>>2]|0;
 $129 = (0|0)==($128|0);
 if ($129) {
  $130 = HEAP32[$gfc>>2]|0;
  _freegfc($130);
  $131 = HEAP32[$1>>2]|0;
  $132 = (($131) + 288|0);
  HEAP32[$132>>2] = 0;
  HEAP32[$0>>2] = -2;
  $1979 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($1979|0);
 }
 $133 = HEAP32[$1>>2]|0;
 $134 = (($133) + 120|0);
 $135 = HEAP32[$134>>2]|0;
 $136 = HEAP32[$cfg>>2]|0;
 $137 = (($136) + 144|0);
 HEAP32[$137>>2] = $135;
 $138 = HEAP32[$1>>2]|0;
 $139 = (($138) + 104|0);
 $140 = HEAP32[$139>>2]|0;
 $141 = HEAP32[$cfg>>2]|0;
 $142 = (($141) + 148|0);
 HEAP32[$142>>2] = $140;
 $143 = HEAP32[$1>>2]|0;
 $144 = (($143) + 108|0);
 $145 = HEAP32[$144>>2]|0;
 $146 = HEAP32[$cfg>>2]|0;
 $147 = (($146) + 152|0);
 HEAP32[$147>>2] = $145;
 $148 = HEAP32[$1>>2]|0;
 $149 = (($148) + 112|0);
 $150 = HEAP32[$149>>2]|0;
 $151 = HEAP32[$cfg>>2]|0;
 $152 = (($151) + 156|0);
 HEAP32[$152>>2] = $150;
 $153 = HEAP32[$1>>2]|0;
 $154 = (($153) + 116|0);
 $155 = HEAP32[$154>>2]|0;
 $156 = HEAP32[$cfg>>2]|0;
 $157 = (($156) + 160|0);
 HEAP32[$157>>2] = $155;
 $158 = HEAP32[$1>>2]|0;
 $159 = (($158) + 8|0);
 $160 = HEAP32[$159>>2]|0;
 $161 = HEAP32[$cfg>>2]|0;
 $162 = (($161) + 52|0);
 HEAP32[$162>>2] = $160;
 $163 = HEAP32[$cfg>>2]|0;
 $164 = (($163) + 52|0);
 $165 = HEAP32[$164>>2]|0;
 $166 = ($165|0)==(1);
 if ($166) {
  $167 = HEAP32[$1>>2]|0;
  $168 = (($167) + 48|0);
  HEAP32[$168>>2] = 3;
 }
 $169 = HEAP32[$1>>2]|0;
 $170 = (($169) + 48|0);
 $171 = HEAP32[$170>>2]|0;
 $172 = ($171|0)==(3);
 $173 = $172 ? 1 : 2;
 $174 = HEAP32[$cfg>>2]|0;
 $175 = (($174) + 56|0);
 HEAP32[$175>>2] = $173;
 $176 = HEAP32[$1>>2]|0;
 $177 = (($176) + 48|0);
 $178 = HEAP32[$177>>2]|0;
 $179 = ($178|0)==(3);
 if ($179) {
  $180 = HEAP32[$1>>2]|0;
  $181 = (($180) + 52|0);
  HEAP32[$181>>2] = 0;
 }
 $182 = HEAP32[$1>>2]|0;
 $183 = (($182) + 52|0);
 $184 = HEAP32[$183>>2]|0;
 $185 = HEAP32[$cfg>>2]|0;
 $186 = (($185) + 64|0);
 HEAP32[$186>>2] = $184;
 $187 = HEAP32[$1>>2]|0;
 $188 = (($187) + 156|0);
 $189 = HEAP32[$188>>2]|0;
 $190 = ($189|0)==(0);
 if ($190) {
  $191 = HEAP32[$1>>2]|0;
  $192 = (($191) + 168|0);
  $193 = HEAP32[$192>>2]|0;
  $194 = ($193|0)!=(128);
  if ($194) {
   $195 = HEAP32[$1>>2]|0;
   $196 = (($195) + 96|0);
   $197 = HEAP32[$196>>2]|0;
   $198 = ($197|0)==(0);
   if ($198) {
    $199 = HEAP32[$1>>2]|0;
    $200 = (($199) + 168|0);
    $201 = HEAP32[$200>>2]|0;
    $202 = HEAP32[$1>>2]|0;
    $203 = (($202) + 96|0);
    HEAP32[$203>>2] = $201;
   }
  }
 }
 $204 = HEAP32[$1>>2]|0;
 $205 = (($204) + 156|0);
 $206 = HEAP32[$205>>2]|0;
 if (!((($206|0) == 1) | (($206|0) == 4) | (($206|0) == 0))) {
  $207 = HEAP32[$1>>2]|0;
  $208 = (($207) + 56|0);
  HEAP32[$208>>2] = 0;
 }
 $209 = HEAP32[$1>>2]|0;
 $210 = (($209) + 56|0);
 $211 = HEAP32[$210>>2]|0;
 $212 = HEAP32[$cfg>>2]|0;
 $213 = (($212) + 136|0);
 HEAP32[$213>>2] = $211;
 $214 = HEAP32[$1>>2]|0;
 $215 = (($214) + 156|0);
 $216 = HEAP32[$215>>2]|0;
 $217 = ($216|0)==(0);
 do {
  if ($217) {
   $218 = HEAP32[$1>>2]|0;
   $219 = (($218) + 96|0);
   $220 = HEAP32[$219>>2]|0;
   $221 = ($220|0)==(0);
   if ($221) {
    $222 = HEAP32[$1>>2]|0;
    $223 = (($222) + 100|0);
    $224 = +HEAPF32[$223>>2];
    $225 = $224;
    $226 = (+Math_abs((+$225)));
    $227 = (+Math_abs(0.0));
    $228 = $226 > $227;
    $229 = HEAP32[$1>>2]|0;
    $230 = (($229) + 100|0);
    $231 = +HEAPF32[$230>>2];
    $232 = $231 - 0.0;
    $233 = $232;
    $234 = (+Math_abs((+$233)));
    if ($228) {
     $235 = HEAP32[$1>>2]|0;
     $236 = (($235) + 100|0);
     $237 = +HEAPF32[$236>>2];
     $238 = $237;
     $239 = (+Math_abs((+$238)));
     $240 = $239 * 9.99999997475242707878E-7;
     $241 = $234 <= $240;
     if (!($241)) {
      break;
     }
    } else {
     $242 = (+Math_abs(0.0));
     $243 = $242 * 9.99999997475242707878E-7;
     $244 = $234 <= $243;
     if (!($244)) {
      break;
     }
    }
    $245 = HEAP32[$1>>2]|0;
    $246 = (($245) + 100|0);
    HEAPF32[$246>>2] = 11.0249996185302734375;
   }
  }
 } while(0);
 $247 = HEAP32[$1>>2]|0;
 $248 = (($247) + 156|0);
 $249 = HEAP32[$248>>2]|0;
 $250 = ($249|0)==(0);
 if ($250) {
  $251 = HEAP32[$1>>2]|0;
  $252 = (($251) + 100|0);
  $253 = +HEAPF32[$252>>2];
  $254 = $253 > 0.0;
  if ($254) {
   $255 = HEAP32[$1>>2]|0;
   $256 = (($255) + 16|0);
   $257 = HEAP32[$256>>2]|0;
   $258 = ($257|0)==(0);
   if ($258) {
    $259 = HEAP32[$1>>2]|0;
    $260 = (($259) + 12|0);
    $261 = HEAP32[$260>>2]|0;
    $262 = (+($261|0));
    $263 = 0.969999999999999973354 * $262;
    $264 = (~~(($263)));
    $265 = (_map2MP3Frequency($264)|0);
    $266 = HEAP32[$1>>2]|0;
    $267 = (($266) + 16|0);
    HEAP32[$267>>2] = $265;
   }
   $268 = HEAP32[$1>>2]|0;
   $269 = (($268) + 16|0);
   $270 = HEAP32[$269>>2]|0;
   $271 = $270<<4;
   $272 = HEAP32[$cfg>>2]|0;
   $273 = (($272) + 56|0);
   $274 = HEAP32[$273>>2]|0;
   $275 = Math_imul($271, $274)|0;
   $276 = (+($275|0));
   $277 = HEAP32[$1>>2]|0;
   $278 = (($277) + 100|0);
   $279 = +HEAPF32[$278>>2];
   $280 = $279;
   $281 = 1000.0 * $280;
   $282 = $276 / $281;
   $283 = (~~(($282)));
   $284 = HEAP32[$1>>2]|0;
   $285 = (($284) + 96|0);
   HEAP32[$285>>2] = $283;
   $286 = HEAP32[$1>>2]|0;
   $287 = (($286) + 16|0);
   $288 = HEAP32[$287>>2]|0;
   $289 = HEAP32[$cfg>>2]|0;
   $290 = (_SmpFrqIndex($288,$289)|0);
   $291 = HEAP32[$cfg>>2]|0;
   $292 = (($291) + 4|0);
   HEAP32[$292>>2] = $290;
   $293 = HEAP32[$cfg>>2]|0;
   $294 = (($293) + 136|0);
   $295 = HEAP32[$294>>2]|0;
   $296 = ($295|0)!=(0);
   if (!($296)) {
    $297 = HEAP32[$1>>2]|0;
    $298 = (($297) + 96|0);
    $299 = HEAP32[$298>>2]|0;
    $300 = HEAP32[$cfg>>2]|0;
    $301 = HEAP32[$300>>2]|0;
    $302 = HEAP32[$1>>2]|0;
    $303 = (($302) + 16|0);
    $304 = HEAP32[$303>>2]|0;
    $305 = (_FindNearestBitrate($299,$301,$304)|0);
    $306 = HEAP32[$1>>2]|0;
    $307 = (($306) + 96|0);
    HEAP32[$307>>2] = $305;
   }
  }
 }
 $308 = HEAP32[$1>>2]|0;
 $309 = (($308) + 16|0);
 $310 = HEAP32[$309>>2]|0;
 $311 = ($310|0)!=(0);
 do {
  if ($311) {
   $312 = HEAP32[$1>>2]|0;
   $313 = (($312) + 16|0);
   $314 = HEAP32[$313>>2]|0;
   $315 = ($314|0)<(16000);
   $316 = HEAP32[$1>>2]|0;
   if ($315) {
    $317 = (($316) + 168|0);
    $318 = HEAP32[$317>>2]|0;
    $319 = ($318|0)>(8);
    if ($319) {
     $320 = HEAP32[$1>>2]|0;
     $321 = (($320) + 168|0);
     $322 = HEAP32[$321>>2]|0;
     $325 = $322;
    } else {
     $325 = 8;
    }
    $323 = HEAP32[$1>>2]|0;
    $324 = (($323) + 168|0);
    HEAP32[$324>>2] = $325;
    $326 = HEAP32[$1>>2]|0;
    $327 = (($326) + 168|0);
    $328 = HEAP32[$327>>2]|0;
    $329 = ($328|0)<(64);
    if ($329) {
     $330 = HEAP32[$1>>2]|0;
     $331 = (($330) + 168|0);
     $332 = HEAP32[$331>>2]|0;
     $335 = $332;
    } else {
     $335 = 64;
    }
    $333 = HEAP32[$1>>2]|0;
    $334 = (($333) + 168|0);
    HEAP32[$334>>2] = $335;
    break;
   }
   $336 = (($316) + 16|0);
   $337 = HEAP32[$336>>2]|0;
   $338 = ($337|0)<(32000);
   $339 = HEAP32[$1>>2]|0;
   $340 = (($339) + 168|0);
   $341 = HEAP32[$340>>2]|0;
   if ($338) {
    $342 = ($341|0)>(8);
    if ($342) {
     $343 = HEAP32[$1>>2]|0;
     $344 = (($343) + 168|0);
     $345 = HEAP32[$344>>2]|0;
     $348 = $345;
    } else {
     $348 = 8;
    }
    $346 = HEAP32[$1>>2]|0;
    $347 = (($346) + 168|0);
    HEAP32[$347>>2] = $348;
    $349 = HEAP32[$1>>2]|0;
    $350 = (($349) + 168|0);
    $351 = HEAP32[$350>>2]|0;
    $352 = ($351|0)<(160);
    if ($352) {
     $353 = HEAP32[$1>>2]|0;
     $354 = (($353) + 168|0);
     $355 = HEAP32[$354>>2]|0;
     $358 = $355;
    } else {
     $358 = 160;
    }
    $356 = HEAP32[$1>>2]|0;
    $357 = (($356) + 168|0);
    HEAP32[$357>>2] = $358;
    break;
   } else {
    $359 = ($341|0)>(32);
    if ($359) {
     $360 = HEAP32[$1>>2]|0;
     $361 = (($360) + 168|0);
     $362 = HEAP32[$361>>2]|0;
     $365 = $362;
    } else {
     $365 = 32;
    }
    $363 = HEAP32[$1>>2]|0;
    $364 = (($363) + 168|0);
    HEAP32[$364>>2] = $365;
    $366 = HEAP32[$1>>2]|0;
    $367 = (($366) + 168|0);
    $368 = HEAP32[$367>>2]|0;
    $369 = ($368|0)<(320);
    if ($369) {
     $370 = HEAP32[$1>>2]|0;
     $371 = (($370) + 168|0);
     $372 = HEAP32[$371>>2]|0;
     $375 = $372;
    } else {
     $375 = 320;
    }
    $373 = HEAP32[$1>>2]|0;
    $374 = (($373) + 168|0);
    HEAP32[$374>>2] = $375;
    break;
   }
  }
 } while(0);
 $376 = HEAP32[$1>>2]|0;
 $377 = (($376) + 16|0);
 $378 = HEAP32[$377>>2]|0;
 $379 = ($378|0)==(0);
 L90: do {
  if ($379) {
   $380 = HEAP32[$1>>2]|0;
   $381 = (($380) + 156|0);
   $382 = HEAP32[$381>>2]|0;
   $383 = ($382|0)==(1);
   if (!($383)) {
    $384 = HEAP32[$1>>2]|0;
    $385 = (($384) + 156|0);
    $386 = HEAP32[$385>>2]|0;
    $387 = ($386|0)==(4);
    if (!($387)) {
     break;
    }
   }
   $388 = HEAP32[$1>>2]|0;
   $389 = (($388) + 164|0);
   $390 = HEAP32[$389>>2]|0;
   $391 = (+($390|0));
   $392 = HEAP32[$1>>2]|0;
   $393 = (($392) + 160|0);
   $394 = +HEAPF32[$393>>2];
   $395 = $391 + $394;
   HEAPF32[$qval>>2] = $395;
   HEAP32[$i>>2] = 2;
   L95: while(1) {
    $396 = HEAP32[$i>>2]|0;
    $397 = ($396|0)<(9);
    if (!($397)) {
     break L90;
    }
    $398 = HEAP32[$1>>2]|0;
    $399 = (($398) + 12|0);
    $400 = HEAP32[$399>>2]|0;
    $401 = HEAP32[$i>>2]|0;
    $402 = (6512 + (($401*24)|0)|0);
    $403 = HEAP32[$402>>2]|0;
    $404 = ($400|0)==($403|0);
    do {
     if ($404) {
      $405 = +HEAPF32[$qval>>2];
      $406 = HEAP32[$i>>2]|0;
      $407 = (6512 + (($406*24)|0)|0);
      $408 = (($407) + 4|0);
      $409 = +HEAPF32[$408>>2];
      $410 = $405 < $409;
      if (!($410)) {
       break;
      }
      $411 = +HEAPF32[$qval>>2];
      $412 = HEAP32[$i>>2]|0;
      $413 = (6512 + (($412*24)|0)|0);
      $414 = (($413) + 4|0);
      $415 = +HEAPF32[$414>>2];
      $416 = $411 / $415;
      $417 = $416;
      HEAPF64[$d>>3] = $417;
      $418 = +HEAPF64[$d>>3];
      $419 = HEAP32[$i>>2]|0;
      $420 = (6512 + (($419*24)|0)|0);
      $421 = (($420) + 12|0);
      $422 = +HEAPF32[$421>>2];
      $423 = $422;
      $424 = $418 * $423;
      HEAPF64[$d>>3] = $424;
      $425 = +HEAPF64[$d>>3];
      $426 = (~~(($425)));
      $427 = HEAP32[$1>>2]|0;
      $428 = (($427) + 164|0);
      HEAP32[$428>>2] = $426;
      $429 = +HEAPF64[$d>>3];
      $430 = HEAP32[$1>>2]|0;
      $431 = (($430) + 164|0);
      $432 = HEAP32[$431>>2]|0;
      $433 = (+($432|0));
      $434 = $429 - $433;
      $435 = $434;
      $436 = HEAP32[$1>>2]|0;
      $437 = (($436) + 160|0);
      HEAPF32[$437>>2] = $435;
     }
    } while(0);
    $438 = HEAP32[$1>>2]|0;
    $439 = (($438) + 12|0);
    $440 = HEAP32[$439>>2]|0;
    $441 = HEAP32[$i>>2]|0;
    $442 = (6512 + (($441*24)|0)|0);
    $443 = HEAP32[$442>>2]|0;
    $444 = ($440|0)>=($443|0);
    do {
     if ($444) {
      $445 = HEAP32[$i>>2]|0;
      $446 = (6512 + (($445*24)|0)|0);
      $447 = (($446) + 4|0);
      $448 = +HEAPF32[$447>>2];
      $449 = +HEAPF32[$qval>>2];
      $450 = $448 <= $449;
      if (!($450)) {
       break;
      }
      $451 = +HEAPF32[$qval>>2];
      $452 = HEAP32[$i>>2]|0;
      $453 = (6512 + (($452*24)|0)|0);
      $454 = (($453) + 8|0);
      $455 = +HEAPF32[$454>>2];
      $456 = $451 < $455;
      if ($456) {
       break L95;
      }
     }
    } while(0);
    $515 = HEAP32[$i>>2]|0;
    $516 = (($515) + 1)|0;
    HEAP32[$i>>2] = $516;
   }
   $457 = HEAP32[$i>>2]|0;
   $458 = (6512 + (($457*24)|0)|0);
   $459 = (($458) + 8|0);
   $460 = +HEAPF32[$459>>2];
   $461 = HEAP32[$i>>2]|0;
   $462 = (6512 + (($461*24)|0)|0);
   $463 = (($462) + 4|0);
   $464 = +HEAPF32[$463>>2];
   $465 = $460 - $464;
   HEAPF32[$q_>>2] = $465;
   $466 = HEAP32[$i>>2]|0;
   $467 = (6512 + (($466*24)|0)|0);
   $468 = (($467) + 16|0);
   $469 = +HEAPF32[$468>>2];
   $470 = HEAP32[$i>>2]|0;
   $471 = (6512 + (($470*24)|0)|0);
   $472 = (($471) + 12|0);
   $473 = +HEAPF32[$472>>2];
   $474 = $469 - $473;
   HEAPF32[$t_>>2] = $474;
   $475 = HEAP32[$i>>2]|0;
   $476 = (6512 + (($475*24)|0)|0);
   $477 = (($476) + 12|0);
   $478 = +HEAPF32[$477>>2];
   $479 = +HEAPF32[$t_>>2];
   $480 = +HEAPF32[$qval>>2];
   $481 = HEAP32[$i>>2]|0;
   $482 = (6512 + (($481*24)|0)|0);
   $483 = (($482) + 4|0);
   $484 = +HEAPF32[$483>>2];
   $485 = $480 - $484;
   $486 = $479 * $485;
   $487 = +HEAPF32[$q_>>2];
   $488 = $486 / $487;
   $489 = $478 + $488;
   $490 = $489;
   HEAPF64[$d1>>3] = $490;
   $491 = +HEAPF64[$d1>>3];
   $492 = (~~(($491)));
   $493 = HEAP32[$1>>2]|0;
   $494 = (($493) + 164|0);
   HEAP32[$494>>2] = $492;
   $495 = +HEAPF64[$d1>>3];
   $496 = HEAP32[$1>>2]|0;
   $497 = (($496) + 164|0);
   $498 = HEAP32[$497>>2]|0;
   $499 = (+($498|0));
   $500 = $495 - $499;
   $501 = $500;
   $502 = HEAP32[$1>>2]|0;
   $503 = (($502) + 160|0);
   HEAPF32[$503>>2] = $501;
   $504 = HEAP32[$i>>2]|0;
   $505 = (6512 + (($504*24)|0)|0);
   $506 = HEAP32[$505>>2]|0;
   $507 = HEAP32[$1>>2]|0;
   $508 = (($507) + 16|0);
   HEAP32[$508>>2] = $506;
   $509 = HEAP32[$1>>2]|0;
   $510 = (($509) + 184|0);
   $511 = HEAP32[$510>>2]|0;
   $512 = ($511|0)==(0);
   if ($512) {
    $513 = HEAP32[$1>>2]|0;
    $514 = (($513) + 184|0);
    HEAP32[$514>>2] = -1;
   }
  }
 } while(0);
 $517 = HEAP32[$1>>2]|0;
 $518 = (($517) + 184|0);
 $519 = HEAP32[$518>>2]|0;
 $520 = ($519|0)==(0);
 if ($520) {
  HEAPF64[$lowpass>>3] = 16000.0;
  $521 = HEAP32[$1>>2]|0;
  $522 = (($521) + 156|0);
  $523 = HEAP32[$522>>2]|0;
  L111: do {
   switch ($523|0) {
   case 3:  {
    $527 = HEAP32[$1>>2]|0;
    $528 = (($527) + 168|0);
    $529 = HEAP32[$528>>2]|0;
    _optimum_bandwidth($lowpass,$highpass,$529);
    break;
   }
   case 2:  {
    $530 = HEAP32[$1>>2]|0;
    $531 = (($530) + 164|0);
    $532 = HEAP32[$531>>2]|0;
    $533 = (0)<=($532|0);
    do {
     if ($533) {
      $534 = HEAP32[$1>>2]|0;
      $535 = (($534) + 164|0);
      $536 = HEAP32[$535>>2]|0;
      $537 = ($536|0)<=(9);
      if (!($537)) {
       break;
      }
      $538 = HEAP32[$1>>2]|0;
      $539 = (($538) + 164|0);
      $540 = HEAP32[$539>>2]|0;
      $541 = (6728 + ($540<<2)|0);
      $542 = HEAP32[$541>>2]|0;
      $543 = (+($542|0));
      HEAPF64[$a>>3] = $543;
      $544 = HEAP32[$1>>2]|0;
      $545 = (($544) + 164|0);
      $546 = HEAP32[$545>>2]|0;
      $547 = (($546) + 1)|0;
      $548 = (6728 + ($547<<2)|0);
      $549 = HEAP32[$548>>2]|0;
      $550 = (+($549|0));
      HEAPF64[$b>>3] = $550;
      $551 = HEAP32[$1>>2]|0;
      $552 = (($551) + 160|0);
      $553 = +HEAPF32[$552>>2];
      $554 = $553;
      HEAPF64[$m>>3] = $554;
      $555 = +HEAPF64[$a>>3];
      $556 = +HEAPF64[$b>>3];
      $557 = +HEAPF64[$m>>3];
      $558 = (+_linear_int($555,$556,$557));
      HEAPF64[$lowpass>>3] = $558;
      break L111;
     }
    } while(0);
    HEAPF64[$lowpass>>3] = 19500.0;
    break;
   }
   case 0:  {
    $524 = HEAP32[$1>>2]|0;
    $525 = (($524) + 96|0);
    $526 = HEAP32[$525>>2]|0;
    _optimum_bandwidth($lowpass,$highpass,$526);
    break;
   }
   case 1: case 4:  {
    $559 = HEAP32[$1>>2]|0;
    $560 = (($559) + 164|0);
    $561 = HEAP32[$560>>2]|0;
    $562 = (0)<=($561|0);
    do {
     if ($562) {
      $563 = HEAP32[$1>>2]|0;
      $564 = (($563) + 164|0);
      $565 = HEAP32[$564>>2]|0;
      $566 = ($565|0)<=(9);
      if (!($566)) {
       break;
      }
      $567 = HEAP32[$1>>2]|0;
      $568 = (($567) + 164|0);
      $569 = HEAP32[$568>>2]|0;
      $570 = (6776 + ($569<<2)|0);
      $571 = HEAP32[$570>>2]|0;
      $572 = (+($571|0));
      HEAPF64[$a2>>3] = $572;
      $573 = HEAP32[$1>>2]|0;
      $574 = (($573) + 164|0);
      $575 = HEAP32[$574>>2]|0;
      $576 = (($575) + 1)|0;
      $577 = (6776 + ($576<<2)|0);
      $578 = HEAP32[$577>>2]|0;
      $579 = (+($578|0));
      HEAPF64[$b3>>3] = $579;
      $580 = HEAP32[$1>>2]|0;
      $581 = (($580) + 160|0);
      $582 = +HEAPF32[$581>>2];
      $583 = $582;
      HEAPF64[$m4>>3] = $583;
      $584 = +HEAPF64[$a2>>3];
      $585 = +HEAPF64[$b3>>3];
      $586 = +HEAPF64[$m4>>3];
      $587 = (+_linear_int($584,$585,$586));
      HEAPF64[$lowpass>>3] = $587;
      break L111;
     }
    } while(0);
    HEAPF64[$lowpass>>3] = 21500.0;
    break;
   }
   default: {
    $588 = HEAP32[$1>>2]|0;
    $589 = (($588) + 164|0);
    $590 = HEAP32[$589>>2]|0;
    $591 = (0)<=($590|0);
    do {
     if ($591) {
      $592 = HEAP32[$1>>2]|0;
      $593 = (($592) + 164|0);
      $594 = HEAP32[$593>>2]|0;
      $595 = ($594|0)<=(9);
      if (!($595)) {
       break;
      }
      $596 = HEAP32[$1>>2]|0;
      $597 = (($596) + 164|0);
      $598 = HEAP32[$597>>2]|0;
      $599 = (6824 + ($598<<2)|0);
      $600 = HEAP32[$599>>2]|0;
      $601 = (+($600|0));
      HEAPF64[$a5>>3] = $601;
      $602 = HEAP32[$1>>2]|0;
      $603 = (($602) + 164|0);
      $604 = HEAP32[$603>>2]|0;
      $605 = (($604) + 1)|0;
      $606 = (6824 + ($605<<2)|0);
      $607 = HEAP32[$606>>2]|0;
      $608 = (+($607|0));
      HEAPF64[$b6>>3] = $608;
      $609 = HEAP32[$1>>2]|0;
      $610 = (($609) + 160|0);
      $611 = +HEAPF32[$610>>2];
      $612 = $611;
      HEAPF64[$m7>>3] = $612;
      $613 = +HEAPF64[$a5>>3];
      $614 = +HEAPF64[$b6>>3];
      $615 = +HEAPF64[$m7>>3];
      $616 = (+_linear_int($613,$614,$615));
      HEAPF64[$lowpass>>3] = $616;
      break L111;
     }
    } while(0);
    HEAPF64[$lowpass>>3] = 19500.0;
   }
   }
  } while(0);
  $617 = HEAP32[$1>>2]|0;
  $618 = (($617) + 48|0);
  $619 = HEAP32[$618>>2]|0;
  $620 = ($619|0)==(3);
  do {
   if ($620) {
    $621 = HEAP32[$1>>2]|0;
    $622 = (($621) + 156|0);
    $623 = HEAP32[$622>>2]|0;
    $624 = ($623|0)==(0);
    if (!($624)) {
     $625 = HEAP32[$1>>2]|0;
     $626 = (($625) + 156|0);
     $627 = HEAP32[$626>>2]|0;
     $628 = ($627|0)==(3);
     if (!($628)) {
      break;
     }
    }
    $629 = +HEAPF64[$lowpass>>3];
    $630 = $629 * 1.5;
    HEAPF64[$lowpass>>3] = $630;
   }
  } while(0);
  $631 = +HEAPF64[$lowpass>>3];
  $632 = (~~(($631)));
  $633 = HEAP32[$1>>2]|0;
  $634 = (($633) + 184|0);
  HEAP32[$634>>2] = $632;
 }
 $635 = HEAP32[$1>>2]|0;
 $636 = (($635) + 16|0);
 $637 = HEAP32[$636>>2]|0;
 $638 = ($637|0)==(0);
 if ($638) {
  $639 = HEAP32[$1>>2]|0;
  $640 = (($639) + 184|0);
  $641 = HEAP32[$640>>2]|0;
  $642 = $641<<1;
  $643 = HEAP32[$1>>2]|0;
  $644 = (($643) + 12|0);
  $645 = HEAP32[$644>>2]|0;
  $646 = ($642|0)>($645|0);
  if ($646) {
   $647 = HEAP32[$1>>2]|0;
   $648 = (($647) + 12|0);
   $649 = HEAP32[$648>>2]|0;
   $650 = (($649|0) / 2)&-1;
   $651 = HEAP32[$1>>2]|0;
   $652 = (($651) + 184|0);
   HEAP32[$652>>2] = $650;
  }
  $653 = HEAP32[$1>>2]|0;
  $654 = (($653) + 184|0);
  $655 = HEAP32[$654>>2]|0;
  $656 = HEAP32[$1>>2]|0;
  $657 = (($656) + 12|0);
  $658 = HEAP32[$657>>2]|0;
  $659 = (_optimum_samplefreq($655,$658)|0);
  $660 = HEAP32[$1>>2]|0;
  $661 = (($660) + 16|0);
  HEAP32[$661>>2] = $659;
 }
 $662 = HEAP32[$1>>2]|0;
 $663 = (($662) + 156|0);
 $664 = HEAP32[$663>>2]|0;
 $665 = ($664|0)==(1);
 do {
  if ($665) {
   label = 103;
  } else {
   $666 = HEAP32[$1>>2]|0;
   $667 = (($666) + 156|0);
   $668 = HEAP32[$667>>2]|0;
   $669 = ($668|0)==(4);
   if ($669) {
    label = 103;
    break;
   }
   $680 = HEAP32[$1>>2]|0;
   $681 = (($680) + 184|0);
   $682 = HEAP32[$681>>2]|0;
   $683 = (20500)<($682|0);
   if ($683) {
    $689 = 20500;
   } else {
    $684 = HEAP32[$1>>2]|0;
    $685 = (($684) + 184|0);
    $686 = HEAP32[$685>>2]|0;
    $689 = $686;
   }
   $687 = HEAP32[$1>>2]|0;
   $688 = (($687) + 184|0);
   HEAP32[$688>>2] = $689;
  }
 } while(0);
 if ((label|0) == 103) {
  $670 = HEAP32[$1>>2]|0;
  $671 = (($670) + 184|0);
  $672 = HEAP32[$671>>2]|0;
  $673 = (24000)<($672|0);
  if ($673) {
   $679 = 24000;
  } else {
   $674 = HEAP32[$1>>2]|0;
   $675 = (($674) + 184|0);
   $676 = HEAP32[$675>>2]|0;
   $679 = $676;
  }
  $677 = HEAP32[$1>>2]|0;
  $678 = (($677) + 184|0);
  HEAP32[$678>>2] = $679;
 }
 $690 = HEAP32[$1>>2]|0;
 $691 = (($690) + 16|0);
 $692 = HEAP32[$691>>2]|0;
 $693 = (($692|0) / 2)&-1;
 $694 = HEAP32[$1>>2]|0;
 $695 = (($694) + 184|0);
 $696 = HEAP32[$695>>2]|0;
 $697 = ($693|0)<($696|0);
 $698 = HEAP32[$1>>2]|0;
 if ($697) {
  $699 = (($698) + 16|0);
  $700 = HEAP32[$699>>2]|0;
  $701 = (($700|0) / 2)&-1;
  $706 = $701;
 } else {
  $702 = (($698) + 184|0);
  $703 = HEAP32[$702>>2]|0;
  $706 = $703;
 }
 $704 = HEAP32[$1>>2]|0;
 $705 = (($704) + 184|0);
 HEAP32[$705>>2] = $706;
 $707 = HEAP32[$1>>2]|0;
 $708 = (($707) + 156|0);
 $709 = HEAP32[$708>>2]|0;
 $710 = ($709|0)==(0);
 if ($710) {
  $711 = HEAP32[$1>>2]|0;
  $712 = (($711) + 16|0);
  $713 = HEAP32[$712>>2]|0;
  $714 = $713<<4;
  $715 = HEAP32[$cfg>>2]|0;
  $716 = (($715) + 56|0);
  $717 = HEAP32[$716>>2]|0;
  $718 = Math_imul($714, $717)|0;
  $719 = (+($718|0));
  $720 = HEAP32[$1>>2]|0;
  $721 = (($720) + 96|0);
  $722 = HEAP32[$721>>2]|0;
  $723 = (+($722|0));
  $724 = 1000.0 * $723;
  $725 = $719 / $724;
  $726 = $725;
  $727 = HEAP32[$1>>2]|0;
  $728 = (($727) + 100|0);
  HEAPF32[$728>>2] = $726;
 }
 $729 = HEAP32[$1>>2]|0;
 $730 = (($729) + 156|0);
 $731 = HEAP32[$730>>2]|0;
 $732 = ($731|0)==(3);
 if ($732) {
  $733 = HEAP32[$1>>2]|0;
  $734 = (($733) + 16|0);
  $735 = HEAP32[$734>>2]|0;
  $736 = $735<<4;
  $737 = HEAP32[$cfg>>2]|0;
  $738 = (($737) + 56|0);
  $739 = HEAP32[$738>>2]|0;
  $740 = Math_imul($736, $739)|0;
  $741 = (+($740|0));
  $742 = HEAP32[$1>>2]|0;
  $743 = (($742) + 168|0);
  $744 = HEAP32[$743>>2]|0;
  $745 = (+($744|0));
  $746 = 1000.0 * $745;
  $747 = $741 / $746;
  $748 = $747;
  $749 = HEAP32[$1>>2]|0;
  $750 = (($749) + 100|0);
  HEAPF32[$750>>2] = $748;
 }
 $751 = HEAP32[$1>>2]|0;
 $752 = (($751) + 36|0);
 $753 = HEAP32[$752>>2]|0;
 $754 = ($753|0)!=(0);
 if (!($754)) {
  $755 = HEAP32[$1>>2]|0;
  $756 = (($755) + 60|0);
  HEAP32[$756>>2] = 0;
  $757 = HEAP32[$1>>2]|0;
  $758 = (($757) + 64|0);
  HEAP32[$758>>2] = 0;
  $759 = HEAP32[$cfg>>2]|0;
  $760 = (($759) + 116|0);
  HEAP32[$760>>2] = 0;
 }
 $761 = HEAP32[$1>>2]|0;
 $762 = (($761) + 60|0);
 $763 = HEAP32[$762>>2]|0;
 $764 = HEAP32[$cfg>>2]|0;
 $765 = (($764) + 112|0);
 HEAP32[$765>>2] = $763;
 $766 = HEAP32[$1>>2]|0;
 $767 = (($766) + 64|0);
 $768 = HEAP32[$767>>2]|0;
 $769 = HEAP32[$cfg>>2]|0;
 $770 = (($769) + 120|0);
 HEAP32[$770>>2] = $768;
 $771 = HEAP32[$cfg>>2]|0;
 $772 = (($771) + 120|0);
 $773 = HEAP32[$772>>2]|0;
 $774 = ($773|0)!=(0);
 if ($774) {
  $775 = HEAP32[$cfg>>2]|0;
  $776 = (($775) + 116|0);
  HEAP32[$776>>2] = 1;
 }
 $777 = HEAP32[$cfg>>2]|0;
 $778 = (($777) + 112|0);
 $779 = HEAP32[$778>>2]|0;
 $780 = ($779|0)!=(0);
 do {
  if ($780) {
   $781 = HEAP32[$gfc>>2]|0;
   $782 = (($781) + 85676|0);
   $783 = HEAP32[$782>>2]|0;
   $784 = HEAP32[$1>>2]|0;
   $785 = (($784) + 16|0);
   $786 = HEAP32[$785>>2]|0;
   $787 = (_InitGainAnalysis($783,$786)|0);
   $788 = ($787|0)==(0);
   if (!($788)) {
    break;
   }
   $789 = HEAP32[$gfc>>2]|0;
   _freegfc($789);
   $790 = HEAP32[$1>>2]|0;
   $791 = (($790) + 288|0);
   HEAP32[$791>>2] = 0;
   HEAP32[$0>>2] = -6;
   $1979 = HEAP32[$0>>2]|0;
   STACKTOP = sp;return ($1979|0);
  }
 } while(0);
 $792 = HEAP32[$cfg>>2]|0;
 $793 = (($792) + 120|0);
 $794 = HEAP32[$793>>2]|0;
 $795 = ($794|0)!=(0);
 do {
  if ($795) {
   $796 = HEAP32[$1>>2]|0;
   $797 = (($796) + 40|0);
   $798 = HEAP32[$797>>2]|0;
   $799 = ($798|0)!=(0);
   if ($799) {
    break;
   }
   $800 = HEAP32[$gfc>>2]|0;
   $801 = (($800) + 85808|0);
   $802 = HEAP32[$801>>2]|0;
   $803 = ($802|0)!=(0|0);
   if ($803) {
    $804 = HEAP32[$gfc>>2]|0;
    $805 = (($804) + 85808|0);
    $806 = HEAP32[$805>>2]|0;
    (_hip_decode_exit($806)|0);
   }
   $807 = (_hip_decode_init()|0);
   $808 = HEAP32[$gfc>>2]|0;
   $809 = (($808) + 85808|0);
   HEAP32[$809>>2] = $807;
   $810 = HEAP32[$gfc>>2]|0;
   $811 = (($810) + 85808|0);
   $812 = HEAP32[$811>>2]|0;
   $813 = HEAP32[$1>>2]|0;
   $814 = (($813) + 272|0);
   $815 = (($814) + 8|0);
   $816 = HEAP32[$815>>2]|0;
   _hip_set_errorf($812,$816);
   $817 = HEAP32[$gfc>>2]|0;
   $818 = (($817) + 85808|0);
   $819 = HEAP32[$818>>2]|0;
   $820 = HEAP32[$1>>2]|0;
   $821 = (($820) + 272|0);
   $822 = (($821) + 4|0);
   $823 = HEAP32[$822>>2]|0;
   _hip_set_debugf($819,$823);
   $824 = HEAP32[$gfc>>2]|0;
   $825 = (($824) + 85808|0);
   $826 = HEAP32[$825>>2]|0;
   $827 = HEAP32[$1>>2]|0;
   $828 = (($827) + 272|0);
   $829 = HEAP32[$828>>2]|0;
   _hip_set_msgf($826,$829);
  }
 } while(0);
 $830 = HEAP32[$1>>2]|0;
 $831 = (($830) + 128|0);
 $832 = HEAP32[$831>>2]|0;
 $833 = HEAP32[$cfg>>2]|0;
 $834 = (($833) + 128|0);
 HEAP32[$834>>2] = $832;
 $835 = HEAP32[$1>>2]|0;
 $836 = (($835) + 184|0);
 $837 = HEAP32[$836>>2]|0;
 $838 = HEAP32[$cfg>>2]|0;
 $839 = (($838) + 36|0);
 HEAP32[$839>>2] = $837;
 $840 = HEAP32[$1>>2]|0;
 $841 = (($840) + 188|0);
 $842 = HEAP32[$841>>2]|0;
 $843 = HEAP32[$cfg>>2]|0;
 $844 = (($843) + 40|0);
 HEAP32[$844>>2] = $842;
 $845 = HEAP32[$1>>2]|0;
 $846 = (($845) + 12|0);
 $847 = HEAP32[$846>>2]|0;
 $848 = HEAP32[$cfg>>2]|0;
 $849 = (($848) + 44|0);
 HEAP32[$849>>2] = $847;
 $850 = HEAP32[$1>>2]|0;
 $851 = (($850) + 16|0);
 $852 = HEAP32[$851>>2]|0;
 $853 = HEAP32[$cfg>>2]|0;
 $854 = (($853) + 48|0);
 HEAP32[$854>>2] = $852;
 $855 = HEAP32[$cfg>>2]|0;
 $856 = (($855) + 48|0);
 $857 = HEAP32[$856>>2]|0;
 $858 = ($857|0)<=(24000);
 $859 = $858 ? 1 : 2;
 $860 = HEAP32[$cfg>>2]|0;
 $861 = (($860) + 60|0);
 HEAP32[$861>>2] = $859;
 $862 = HEAP32[$gfc>>2]|0;
 $863 = (($862) + 84040|0);
 $864 = (($863) + 720|0);
 HEAP32[$864>>2] = 576;
 $865 = HEAP32[$1>>2]|0;
 $866 = (($865) + 156|0);
 $867 = HEAP32[$866>>2]|0;
 if ((($867|0) == 4) | (($867|0) == 2) | (($867|0) == 1)) {
  $868 = HEAP32[$1>>2]|0;
  $869 = (($868) + 164|0);
  $870 = HEAP32[$869>>2]|0;
  $871 = (6872 + ($870<<2)|0);
  $872 = +HEAPF32[$871>>2];
  $873 = HEAP32[$1>>2]|0;
  $874 = (($873) + 100|0);
  HEAPF32[$874>>2] = $872;
 } else if ((($867|0) == 3)) {
  $875 = HEAP32[$cfg>>2]|0;
  $876 = (($875) + 48|0);
  $877 = HEAP32[$876>>2]|0;
  $878 = $877<<4;
  $879 = HEAP32[$cfg>>2]|0;
  $880 = (($879) + 56|0);
  $881 = HEAP32[$880>>2]|0;
  $882 = Math_imul($878, $881)|0;
  $883 = (+($882|0));
  $884 = HEAP32[$1>>2]|0;
  $885 = (($884) + 168|0);
  $886 = HEAP32[$885>>2]|0;
  $887 = (+($886|0));
  $888 = 1000.0 * $887;
  $889 = $883 / $888;
  $890 = $889;
  $891 = HEAP32[$1>>2]|0;
  $892 = (($891) + 100|0);
  HEAPF32[$892>>2] = $890;
 } else {
  $893 = HEAP32[$cfg>>2]|0;
  $894 = (($893) + 48|0);
  $895 = HEAP32[$894>>2]|0;
  $896 = $895<<4;
  $897 = HEAP32[$cfg>>2]|0;
  $898 = (($897) + 56|0);
  $899 = HEAP32[$898>>2]|0;
  $900 = Math_imul($896, $899)|0;
  $901 = (+($900|0));
  $902 = HEAP32[$1>>2]|0;
  $903 = (($902) + 96|0);
  $904 = HEAP32[$903>>2]|0;
  $905 = (+($904|0));
  $906 = 1000.0 * $905;
  $907 = $901 / $906;
  $908 = $907;
  $909 = HEAP32[$1>>2]|0;
  $910 = (($909) + 100|0);
  HEAPF32[$910>>2] = $908;
 }
 $911 = HEAP32[$1>>2]|0;
 $912 = (($911) + 48|0);
 $913 = HEAP32[$912>>2]|0;
 $914 = ($913|0)==(4);
 if ($914) {
  $915 = HEAP32[$1>>2]|0;
  $916 = (($915) + 48|0);
  HEAP32[$916>>2] = 1;
 }
 $917 = HEAP32[$1>>2]|0;
 $918 = (($917) + 48|0);
 $919 = HEAP32[$918>>2]|0;
 $920 = HEAP32[$cfg>>2]|0;
 $921 = (($920) + 164|0);
 HEAP32[$921>>2] = $919;
 $922 = HEAP32[$cfg>>2]|0;
 $923 = (($922) + 40|0);
 $924 = HEAP32[$923>>2]|0;
 $925 = ($924|0)>(0);
 $926 = HEAP32[$cfg>>2]|0;
 if ($925) {
  $927 = (($926) + 40|0);
  $928 = HEAP32[$927>>2]|0;
  $929 = (+($928|0));
  $930 = 2.0 * $929;
  $931 = $930;
  $932 = HEAP32[$cfg>>2]|0;
  $933 = (($932) + 240|0);
  HEAPF32[$933>>2] = $931;
  $934 = HEAP32[$1>>2]|0;
  $935 = (($934) + 196|0);
  $936 = HEAP32[$935>>2]|0;
  $937 = ($936|0)>=(0);
  $938 = HEAP32[$cfg>>2]|0;
  $939 = (($938) + 40|0);
  $940 = HEAP32[$939>>2]|0;
  if ($937) {
   $941 = HEAP32[$1>>2]|0;
   $942 = (($941) + 196|0);
   $943 = HEAP32[$942>>2]|0;
   $944 = (($940) + ($943))|0;
   $945 = (+($944|0));
   $946 = 2.0 * $945;
   $947 = $946;
   $948 = HEAP32[$cfg>>2]|0;
   $949 = (($948) + 244|0);
   HEAPF32[$949>>2] = $947;
  } else {
   $950 = (+($940|0));
   $951 = 2.0 * $950;
   $952 = $951;
   $953 = HEAP32[$cfg>>2]|0;
   $954 = (($953) + 244|0);
   HEAPF32[$954>>2] = $952;
  }
  $955 = HEAP32[$cfg>>2]|0;
  $956 = (($955) + 48|0);
  $957 = HEAP32[$956>>2]|0;
  $958 = (+($957|0));
  $959 = HEAP32[$cfg>>2]|0;
  $960 = (($959) + 240|0);
  $961 = +HEAPF32[$960>>2];
  $962 = $961 / $958;
  HEAPF32[$960>>2] = $962;
  $963 = HEAP32[$cfg>>2]|0;
  $964 = (($963) + 48|0);
  $965 = HEAP32[$964>>2]|0;
  $966 = (+($965|0));
  $967 = HEAP32[$cfg>>2]|0;
  $968 = (($967) + 244|0);
  $969 = +HEAPF32[$968>>2];
  $970 = $969 / $966;
  HEAPF32[$968>>2] = $970;
 } else {
  $971 = (($926) + 240|0);
  HEAPF32[$971>>2] = 0.0;
  $972 = HEAP32[$cfg>>2]|0;
  $973 = (($972) + 244|0);
  HEAPF32[$973>>2] = 0.0;
 }
 $974 = HEAP32[$cfg>>2]|0;
 $975 = (($974) + 232|0);
 HEAPF32[$975>>2] = 0.0;
 $976 = HEAP32[$cfg>>2]|0;
 $977 = (($976) + 236|0);
 HEAPF32[$977>>2] = 0.0;
 $978 = HEAP32[$cfg>>2]|0;
 $979 = (($978) + 36|0);
 $980 = HEAP32[$979>>2]|0;
 $981 = ($980|0)>(0);
 do {
  if ($981) {
   $982 = HEAP32[$cfg>>2]|0;
   $983 = (($982) + 36|0);
   $984 = HEAP32[$983>>2]|0;
   $985 = HEAP32[$cfg>>2]|0;
   $986 = (($985) + 48|0);
   $987 = HEAP32[$986>>2]|0;
   $988 = (($987|0) / 2)&-1;
   $989 = ($984|0)<($988|0);
   if (!($989)) {
    break;
   }
   $990 = HEAP32[$cfg>>2]|0;
   $991 = (($990) + 36|0);
   $992 = HEAP32[$991>>2]|0;
   $993 = (+($992|0));
   $994 = 2.0 * $993;
   $995 = $994;
   $996 = HEAP32[$cfg>>2]|0;
   $997 = (($996) + 236|0);
   HEAPF32[$997>>2] = $995;
   $998 = HEAP32[$1>>2]|0;
   $999 = (($998) + 192|0);
   $1000 = HEAP32[$999>>2]|0;
   $1001 = ($1000|0)>=(0);
   $1002 = HEAP32[$cfg>>2]|0;
   $1003 = (($1002) + 36|0);
   $1004 = HEAP32[$1003>>2]|0;
   do {
    if ($1001) {
     $1005 = HEAP32[$1>>2]|0;
     $1006 = (($1005) + 192|0);
     $1007 = HEAP32[$1006>>2]|0;
     $1008 = (($1004) - ($1007))|0;
     $1009 = (+($1008|0));
     $1010 = 2.0 * $1009;
     $1011 = $1010;
     $1012 = HEAP32[$cfg>>2]|0;
     $1013 = (($1012) + 232|0);
     HEAPF32[$1013>>2] = $1011;
     $1014 = HEAP32[$cfg>>2]|0;
     $1015 = (($1014) + 232|0);
     $1016 = +HEAPF32[$1015>>2];
     $1017 = $1016 < 0.0;
     if (!($1017)) {
      break;
     }
     $1018 = HEAP32[$cfg>>2]|0;
     $1019 = (($1018) + 232|0);
     HEAPF32[$1019>>2] = 0.0;
    } else {
     $1020 = (+($1004|0));
     $1021 = 2.0 * $1020;
     $1022 = $1021;
     $1023 = HEAP32[$cfg>>2]|0;
     $1024 = (($1023) + 232|0);
     HEAPF32[$1024>>2] = $1022;
    }
   } while(0);
   $1025 = HEAP32[$cfg>>2]|0;
   $1026 = (($1025) + 48|0);
   $1027 = HEAP32[$1026>>2]|0;
   $1028 = (+($1027|0));
   $1029 = HEAP32[$cfg>>2]|0;
   $1030 = (($1029) + 232|0);
   $1031 = +HEAPF32[$1030>>2];
   $1032 = $1031 / $1028;
   HEAPF32[$1030>>2] = $1032;
   $1033 = HEAP32[$cfg>>2]|0;
   $1034 = (($1033) + 48|0);
   $1035 = HEAP32[$1034>>2]|0;
   $1036 = (+($1035|0));
   $1037 = HEAP32[$cfg>>2]|0;
   $1038 = (($1037) + 236|0);
   $1039 = +HEAPF32[$1038>>2];
   $1040 = $1039 / $1036;
   HEAPF32[$1038>>2] = $1040;
  }
 } while(0);
 $1041 = HEAP32[$gfc>>2]|0;
 _lame_init_params_ppflt($1041);
 $1042 = HEAP32[$cfg>>2]|0;
 $1043 = (($1042) + 48|0);
 $1044 = HEAP32[$1043>>2]|0;
 $1045 = HEAP32[$cfg>>2]|0;
 $1046 = (_SmpFrqIndex($1044,$1045)|0);
 $1047 = HEAP32[$cfg>>2]|0;
 $1048 = (($1047) + 4|0);
 HEAP32[$1048>>2] = $1046;
 $1049 = HEAP32[$cfg>>2]|0;
 $1050 = (($1049) + 4|0);
 $1051 = HEAP32[$1050>>2]|0;
 $1052 = ($1051|0)<(0);
 if ($1052) {
  $1053 = HEAP32[$gfc>>2]|0;
  _freegfc($1053);
  $1054 = HEAP32[$1>>2]|0;
  $1055 = (($1054) + 288|0);
  HEAP32[$1055>>2] = 0;
  HEAP32[$0>>2] = -1;
  $1979 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($1979|0);
 }
 $1056 = HEAP32[$1>>2]|0;
 $1057 = (($1056) + 156|0);
 $1058 = HEAP32[$1057>>2]|0;
 $1059 = ($1058|0)==(0);
 do {
  if ($1059) {
   $1060 = HEAP32[$cfg>>2]|0;
   $1061 = (($1060) + 136|0);
   $1062 = HEAP32[$1061>>2]|0;
   $1063 = ($1062|0)!=(0);
   if ($1063) {
    $1064 = HEAP32[$gfc>>2]|0;
    $1065 = (($1064) + 84040|0);
    $1066 = (($1065) + 704|0);
    HEAP32[$1066>>2] = 0;
    break;
   }
   $1067 = HEAP32[$1>>2]|0;
   $1068 = (($1067) + 96|0);
   $1069 = HEAP32[$1068>>2]|0;
   $1070 = HEAP32[$cfg>>2]|0;
   $1071 = HEAP32[$1070>>2]|0;
   $1072 = HEAP32[$cfg>>2]|0;
   $1073 = (($1072) + 48|0);
   $1074 = HEAP32[$1073>>2]|0;
   $1075 = (_FindNearestBitrate($1069,$1071,$1074)|0);
   $1076 = HEAP32[$1>>2]|0;
   $1077 = (($1076) + 96|0);
   HEAP32[$1077>>2] = $1075;
   $1078 = HEAP32[$1>>2]|0;
   $1079 = (($1078) + 96|0);
   $1080 = HEAP32[$1079>>2]|0;
   $1081 = HEAP32[$cfg>>2]|0;
   $1082 = HEAP32[$1081>>2]|0;
   $1083 = HEAP32[$cfg>>2]|0;
   $1084 = (($1083) + 48|0);
   $1085 = HEAP32[$1084>>2]|0;
   $1086 = (_BitrateIndex($1080,$1082,$1085)|0);
   $1087 = HEAP32[$gfc>>2]|0;
   $1088 = (($1087) + 84040|0);
   $1089 = (($1088) + 704|0);
   HEAP32[$1089>>2] = $1086;
   $1090 = HEAP32[$gfc>>2]|0;
   $1091 = (($1090) + 84040|0);
   $1092 = (($1091) + 704|0);
   $1093 = HEAP32[$1092>>2]|0;
   $1094 = ($1093|0)<=(0);
   if (!($1094)) {
    break;
   }
   $1095 = HEAP32[$gfc>>2]|0;
   _freegfc($1095);
   $1096 = HEAP32[$1>>2]|0;
   $1097 = (($1096) + 288|0);
   HEAP32[$1097>>2] = 0;
   HEAP32[$0>>2] = -1;
   $1979 = HEAP32[$0>>2]|0;
   STACKTOP = sp;return ($1979|0);
  } else {
   $1098 = HEAP32[$gfc>>2]|0;
   $1099 = (($1098) + 84040|0);
   $1100 = (($1099) + 704|0);
   HEAP32[$1100>>2] = 1;
  }
 } while(0);
 $1101 = HEAP32[$gfc>>2]|0;
 _init_bit_stream_w($1101);
 $1102 = HEAP32[$cfg>>2]|0;
 $1103 = (($1102) + 4|0);
 $1104 = HEAP32[$1103>>2]|0;
 $1105 = HEAP32[$cfg>>2]|0;
 $1106 = HEAP32[$1105>>2]|0;
 $1107 = ($1106*3)|0;
 $1108 = (($1104) + ($1107))|0;
 $1109 = HEAP32[$cfg>>2]|0;
 $1110 = (($1109) + 48|0);
 $1111 = HEAP32[$1110>>2]|0;
 $1112 = ($1111|0)<(16000);
 $1113 = $1112&1;
 $1114 = ($1113*6)|0;
 $1115 = (($1108) + ($1114))|0;
 HEAP32[$j>>2] = $1115;
 HEAP32[$i>>2] = 0;
 while(1) {
  $1116 = HEAP32[$i>>2]|0;
  $1117 = ($1116|0)<(23);
  if (!($1117)) {
   break;
  }
  $1118 = HEAP32[$i>>2]|0;
  $1119 = HEAP32[$j>>2]|0;
  $1120 = (21464 + (($1119*204)|0)|0);
  $1121 = (($1120) + ($1118<<2)|0);
  $1122 = HEAP32[$1121>>2]|0;
  $1123 = HEAP32[$i>>2]|0;
  $1124 = HEAP32[$gfc>>2]|0;
  $1125 = (($1124) + 21360|0);
  $1126 = (($1125) + ($1123<<2)|0);
  HEAP32[$1126>>2] = $1122;
  $1127 = HEAP32[$i>>2]|0;
  $1128 = (($1127) + 1)|0;
  HEAP32[$i>>2] = $1128;
 }
 HEAP32[$i>>2] = 0;
 while(1) {
  $1129 = HEAP32[$i>>2]|0;
  $1130 = ($1129|0)<(7);
  $1131 = HEAP32[$gfc>>2]|0;
  $1132 = (($1131) + 21360|0);
  if (!($1130)) {
   break;
  }
  $1133 = (($1132) + 88|0);
  $1134 = HEAP32[$1133>>2]|0;
  $1135 = HEAP32[$gfc>>2]|0;
  $1136 = (($1135) + 21360|0);
  $1137 = (($1136) + 84|0);
  $1138 = HEAP32[$1137>>2]|0;
  $1139 = (($1134) - ($1138))|0;
  $1140 = (($1139|0) / 6)&-1;
  HEAP32[$size>>2] = $1140;
  $1141 = HEAP32[$gfc>>2]|0;
  $1142 = (($1141) + 21360|0);
  $1143 = (($1142) + 84|0);
  $1144 = HEAP32[$1143>>2]|0;
  $1145 = HEAP32[$i>>2]|0;
  $1146 = HEAP32[$size>>2]|0;
  $1147 = Math_imul($1145, $1146)|0;
  $1148 = (($1144) + ($1147))|0;
  HEAP32[$start>>2] = $1148;
  $1149 = HEAP32[$start>>2]|0;
  $1150 = HEAP32[$i>>2]|0;
  $1151 = HEAP32[$gfc>>2]|0;
  $1152 = (($1151) + 21360|0);
  $1153 = (($1152) + 148|0);
  $1154 = (($1153) + ($1150<<2)|0);
  HEAP32[$1154>>2] = $1149;
  $1155 = HEAP32[$i>>2]|0;
  $1156 = (($1155) + 1)|0;
  HEAP32[$i>>2] = $1156;
 }
 $1157 = (($1132) + 148|0);
 $1158 = (($1157) + 24|0);
 HEAP32[$1158>>2] = 576;
 HEAP32[$i>>2] = 0;
 while(1) {
  $1159 = HEAP32[$i>>2]|0;
  $1160 = ($1159|0)<(14);
  if (!($1160)) {
   break;
  }
  $1161 = HEAP32[$i>>2]|0;
  $1162 = HEAP32[$j>>2]|0;
  $1163 = (21464 + (($1162*204)|0)|0);
  $1164 = (($1163) + 92|0);
  $1165 = (($1164) + ($1161<<2)|0);
  $1166 = HEAP32[$1165>>2]|0;
  $1167 = HEAP32[$i>>2]|0;
  $1168 = HEAP32[$gfc>>2]|0;
  $1169 = (($1168) + 21360|0);
  $1170 = (($1169) + 92|0);
  $1171 = (($1170) + ($1167<<2)|0);
  HEAP32[$1171>>2] = $1166;
  $1172 = HEAP32[$i>>2]|0;
  $1173 = (($1172) + 1)|0;
  HEAP32[$i>>2] = $1173;
 }
 HEAP32[$i>>2] = 0;
 while(1) {
  $1174 = HEAP32[$i>>2]|0;
  $1175 = ($1174|0)<(7);
  $1176 = HEAP32[$gfc>>2]|0;
  $1177 = (($1176) + 21360|0);
  if (!($1175)) {
   break;
  }
  $1178 = (($1177) + 92|0);
  $1179 = (($1178) + 52|0);
  $1180 = HEAP32[$1179>>2]|0;
  $1181 = HEAP32[$gfc>>2]|0;
  $1182 = (($1181) + 21360|0);
  $1183 = (($1182) + 92|0);
  $1184 = (($1183) + 48|0);
  $1185 = HEAP32[$1184>>2]|0;
  $1186 = (($1180) - ($1185))|0;
  $1187 = (($1186|0) / 6)&-1;
  HEAP32[$size8>>2] = $1187;
  $1188 = HEAP32[$gfc>>2]|0;
  $1189 = (($1188) + 21360|0);
  $1190 = (($1189) + 92|0);
  $1191 = (($1190) + 48|0);
  $1192 = HEAP32[$1191>>2]|0;
  $1193 = HEAP32[$i>>2]|0;
  $1194 = HEAP32[$size8>>2]|0;
  $1195 = Math_imul($1193, $1194)|0;
  $1196 = (($1192) + ($1195))|0;
  HEAP32[$start9>>2] = $1196;
  $1197 = HEAP32[$start9>>2]|0;
  $1198 = HEAP32[$i>>2]|0;
  $1199 = HEAP32[$gfc>>2]|0;
  $1200 = (($1199) + 21360|0);
  $1201 = (($1200) + 176|0);
  $1202 = (($1201) + ($1198<<2)|0);
  HEAP32[$1202>>2] = $1197;
  $1203 = HEAP32[$i>>2]|0;
  $1204 = (($1203) + 1)|0;
  HEAP32[$i>>2] = $1204;
 }
 $1205 = (($1177) + 176|0);
 $1206 = (($1205) + 24|0);
 HEAP32[$1206>>2] = 192;
 $1207 = HEAP32[$cfg>>2]|0;
 $1208 = (($1207) + 60|0);
 $1209 = HEAP32[$1208>>2]|0;
 $1210 = ($1209|0)==(2);
 $1211 = HEAP32[$cfg>>2]|0;
 $1212 = (($1211) + 56|0);
 $1213 = HEAP32[$1212>>2]|0;
 $1214 = ($1213|0)==(1);
 if ($1210) {
  $1215 = $1214 ? 21 : 36;
  $1216 = HEAP32[$cfg>>2]|0;
  $1217 = (($1216) + 8|0);
  HEAP32[$1217>>2] = $1215;
 } else {
  $1218 = $1214 ? 13 : 21;
  $1219 = HEAP32[$cfg>>2]|0;
  $1220 = (($1219) + 8|0);
  HEAP32[$1220>>2] = $1218;
 }
 $1221 = HEAP32[$cfg>>2]|0;
 $1222 = (($1221) + 144|0);
 $1223 = HEAP32[$1222>>2]|0;
 $1224 = ($1223|0)!=(0);
 if ($1224) {
  $1225 = HEAP32[$cfg>>2]|0;
  $1226 = (($1225) + 8|0);
  $1227 = HEAP32[$1226>>2]|0;
  $1228 = (($1227) + 2)|0;
  HEAP32[$1226>>2] = $1228;
 }
 $1229 = HEAP32[$gfc>>2]|0;
 HEAP32[$1229>>2] = -487877;
 HEAP32[$k>>2] = 0;
 while(1) {
  $1230 = HEAP32[$k>>2]|0;
  $1231 = ($1230|0)<(19);
  if (!($1231)) {
   break;
  }
  $1232 = HEAP32[$cfg>>2]|0;
  $1233 = (($1232) + 60|0);
  $1234 = HEAP32[$1233>>2]|0;
  $1235 = ($1234*700)|0;
  $1236 = HEAP32[$cfg>>2]|0;
  $1237 = (($1236) + 56|0);
  $1238 = HEAP32[$1237>>2]|0;
  $1239 = Math_imul($1235, $1238)|0;
  $1240 = (+($1239|0));
  $1241 = HEAP32[$k>>2]|0;
  $1242 = HEAP32[$gfc>>2]|0;
  $1243 = (($1242) + 27824|0);
  $1244 = (($1243) + 11932|0);
  $1245 = (($1244) + ($1241<<2)|0);
  HEAPF32[$1245>>2] = $1240;
  $1246 = HEAP32[$k>>2]|0;
  $1247 = (($1246) + 1)|0;
  HEAP32[$k>>2] = $1247;
 }
 $1248 = HEAP32[$1>>2]|0;
 $1249 = (($1248) + 220|0);
 $1250 = HEAP32[$1249>>2]|0;
 $1251 = ($1250|0)==(-1);
 if ($1251) {
  $1252 = HEAP32[$1>>2]|0;
  $1253 = (($1252) + 220|0);
  HEAP32[$1253>>2] = 4;
 }
 $1254 = HEAP32[$1>>2]|0;
 $1255 = (($1254) + 156|0);
 $1256 = HEAP32[$1255>>2]|0;
 do {
  if ((($1256|0) == 4) | (($1256|0) == 1)) {
   $1257 = HEAP32[$1>>2]|0;
   $1258 = (($1257) + 124|0);
   $1259 = HEAP32[$1258>>2]|0;
   $1260 = ($1259|0)<(0);
   if ($1260) {
    $1261 = HEAP32[$1>>2]|0;
    $1262 = (($1261) + 124|0);
    HEAP32[$1262>>2] = 2;
   }
   $1263 = HEAP32[$1>>2]|0;
   $1264 = (($1263) + 244|0);
   $1265 = HEAP32[$1264>>2]|0;
   $1266 = ($1265|0)<(0);
   if ($1266) {
    $1267 = HEAP32[$1>>2]|0;
    $1268 = (($1267) + 244|0);
    HEAP32[$1268>>2] = 0;
   }
   $1269 = HEAP32[$1>>2]|0;
   $1270 = HEAP32[$1>>2]|0;
   $1271 = (($1270) + 164|0);
   $1272 = HEAP32[$1271>>2]|0;
   $1273 = ($1272*10)|0;
   $1274 = (500 - ($1273))|0;
   (_apply_preset($1269,$1274,0)|0);
   $1275 = HEAP32[$1>>2]|0;
   $1276 = (($1275) + 44|0);
   $1277 = HEAP32[$1276>>2]|0;
   $1278 = ($1277|0)<(0);
   if ($1278) {
    $1279 = HEAP32[$1>>2]|0;
    $1280 = (($1279) + 44|0);
    HEAP32[$1280>>2] = 3;
   }
   $1281 = HEAP32[$1>>2]|0;
   $1282 = (($1281) + 44|0);
   $1283 = HEAP32[$1282>>2]|0;
   $1284 = ($1283|0)<(5);
   if ($1284) {
    $1285 = HEAP32[$1>>2]|0;
    $1286 = (($1285) + 44|0);
    HEAP32[$1286>>2] = 0;
   }
   $1287 = HEAP32[$1>>2]|0;
   $1288 = (($1287) + 44|0);
   $1289 = HEAP32[$1288>>2]|0;
   $1290 = ($1289|0)>(7);
   if ($1290) {
    $1291 = HEAP32[$1>>2]|0;
    $1292 = (($1291) + 44|0);
    HEAP32[$1292>>2] = 7;
   }
   $1293 = HEAP32[$1>>2]|0;
   $1294 = (($1293) + 140|0);
   $1295 = HEAP32[$1294>>2]|0;
   $1296 = ($1295|0)!=(0);
   if ($1296) {
    $1297 = HEAP32[$gfc>>2]|0;
    $1298 = (($1297) + 84768|0);
    $1299 = (($1298) + 324|0);
    HEAP32[$1299>>2] = 0;
   } else {
    $1300 = HEAP32[$cfg>>2]|0;
    $1301 = (($1300) + 48|0);
    $1302 = HEAP32[$1301>>2]|0;
    $1303 = ($1302|0)>(44000);
    $1304 = $1303&1;
    $1305 = HEAP32[$gfc>>2]|0;
    $1306 = (($1305) + 84768|0);
    $1307 = (($1306) + 324|0);
    HEAP32[$1307>>2] = $1304;
   }
   $1308 = HEAP32[$gfc>>2]|0;
   $1309 = (($1308) + 85812|0);
   HEAP32[$1309>>2] = 1;
  } else if ((($1256|0) == 2)) {
   $1310 = HEAP32[$1>>2]|0;
   $1311 = HEAP32[$1>>2]|0;
   $1312 = (($1311) + 164|0);
   $1313 = HEAP32[$1312>>2]|0;
   $1314 = ($1313*10)|0;
   $1315 = (500 - ($1314))|0;
   (_apply_preset($1310,$1315,0)|0);
   $1316 = HEAP32[$1>>2]|0;
   $1317 = (($1316) + 140|0);
   $1318 = HEAP32[$1317>>2]|0;
   $1319 = ($1318|0)!=(0);
   if ($1319) {
    $1320 = HEAP32[$gfc>>2]|0;
    $1321 = (($1320) + 84768|0);
    $1322 = (($1321) + 324|0);
    HEAP32[$1322>>2] = 0;
   } else {
    $1323 = HEAP32[$cfg>>2]|0;
    $1324 = (($1323) + 48|0);
    $1325 = HEAP32[$1324>>2]|0;
    $1326 = ($1325|0)>(44000);
    $1327 = $1326&1;
    $1328 = HEAP32[$gfc>>2]|0;
    $1329 = (($1328) + 84768|0);
    $1330 = (($1329) + 324|0);
    HEAP32[$1330>>2] = $1327;
   }
   $1331 = HEAP32[$1>>2]|0;
   $1332 = (($1331) + 44|0);
   $1333 = HEAP32[$1332>>2]|0;
   $1334 = ($1333|0)>(6);
   if ($1334) {
    $1335 = HEAP32[$1>>2]|0;
    $1336 = (($1335) + 44|0);
    HEAP32[$1336>>2] = 6;
   }
   $1337 = HEAP32[$1>>2]|0;
   $1338 = (($1337) + 44|0);
   $1339 = HEAP32[$1338>>2]|0;
   $1340 = ($1339|0)<(0);
   if ($1340) {
    $1341 = HEAP32[$1>>2]|0;
    $1342 = (($1341) + 44|0);
    HEAP32[$1342>>2] = 3;
   }
   $1343 = HEAP32[$gfc>>2]|0;
   $1344 = (($1343) + 85812|0);
   HEAP32[$1344>>2] = 2;
  } else {
   $1345 = HEAP32[$gfc>>2]|0;
   $1346 = (($1345) + 84768|0);
   $1347 = (($1346) + 324|0);
   HEAP32[$1347>>2] = 0;
   $1348 = HEAP32[$1>>2]|0;
   $1349 = (($1348) + 44|0);
   $1350 = HEAP32[$1349>>2]|0;
   $1351 = ($1350|0)<(0);
   if ($1351) {
    $1352 = HEAP32[$1>>2]|0;
    $1353 = (($1352) + 44|0);
    HEAP32[$1353>>2] = 3;
   }
   $1354 = HEAP32[$1>>2]|0;
   $1355 = (($1354) + 156|0);
   $1356 = HEAP32[$1355>>2]|0;
   HEAP32[$vbrmode>>2] = $1356;
   $1357 = HEAP32[$vbrmode>>2]|0;
   $1358 = ($1357|0)==(0);
   if ($1358) {
    $1359 = HEAP32[$1>>2]|0;
    $1360 = HEAP32[$1>>2]|0;
    $1361 = (($1360) + 96|0);
    $1362 = HEAP32[$1361>>2]|0;
    (_lame_set_VBR_mean_bitrate_kbps($1359,$1362)|0);
   }
   $1363 = HEAP32[$1>>2]|0;
   $1364 = HEAP32[$1>>2]|0;
   $1365 = (($1364) + 168|0);
   $1366 = HEAP32[$1365>>2]|0;
   (_apply_preset($1363,$1366,0)|0);
   $1367 = HEAP32[$vbrmode>>2]|0;
   $1368 = HEAP32[$1>>2]|0;
   $1369 = (($1368) + 156|0);
   HEAP32[$1369>>2] = $1367;
   $1370 = HEAP32[$vbrmode>>2]|0;
   $1371 = ($1370|0)==(0);
   $1372 = HEAP32[$gfc>>2]|0;
   $1373 = (($1372) + 85812|0);
   if ($1371) {
    HEAP32[$1373>>2] = 3;
    break;
   } else {
    HEAP32[$1373>>2] = 4;
    break;
   }
  }
 } while(0);
 $1374 = HEAP32[$1>>2]|0;
 $1375 = (($1374) + 200|0);
 $1376 = +HEAPF32[$1375>>2];
 $1377 = HEAP32[$gfc>>2]|0;
 $1378 = (($1377) + 84768|0);
 $1379 = (($1378) + 144|0);
 HEAPF32[$1379>>2] = $1376;
 $1380 = HEAP32[$1>>2]|0;
 $1381 = (($1380) + 204|0);
 $1382 = +HEAPF32[$1381>>2];
 $1383 = HEAP32[$gfc>>2]|0;
 $1384 = (($1383) + 84768|0);
 $1385 = (($1384) + 148|0);
 HEAPF32[$1385>>2] = $1382;
 $1386 = HEAP32[$1>>2]|0;
 $1387 = (($1386) + 256|0);
 $1388 = HEAP32[$1387>>2]|0;
 $1389 = ($1388|0)!=(0);
 if ($1389) {
  $1390 = HEAP32[$1>>2]|0;
  $1391 = (($1390) + 260|0);
  $1392 = +HEAPF32[$1391>>2];
  $1393 = HEAP32[$gfc>>2]|0;
  $1394 = (($1393) + 84768|0);
  $1395 = (($1394) + 144|0);
  $1396 = +HEAPF32[$1395>>2];
  $1397 = $1396 + $1392;
  HEAPF32[$1395>>2] = $1397;
  $1398 = HEAP32[$1>>2]|0;
  $1399 = (($1398) + 260|0);
  $1400 = +HEAPF32[$1399>>2];
  $1401 = HEAP32[$gfc>>2]|0;
  $1402 = (($1401) + 84768|0);
  $1403 = (($1402) + 148|0);
  $1404 = +HEAPF32[$1403>>2];
  $1405 = $1404 + $1400;
  HEAPF32[$1403>>2] = $1405;
 }
 $1406 = HEAP32[$1>>2]|0;
 $1407 = (($1406) + 156|0);
 $1408 = HEAP32[$1407>>2]|0;
 $1409 = ($1408|0)!=(0);
 if ($1409) {
  $1410 = HEAP32[$cfg>>2]|0;
  $1411 = (($1410) + 96|0);
  HEAP32[$1411>>2] = 1;
  $1412 = HEAP32[$cfg>>2]|0;
  $1413 = (($1412) + 100|0);
  HEAP32[$1413>>2] = 14;
  $1414 = HEAP32[$cfg>>2]|0;
  $1415 = (($1414) + 48|0);
  $1416 = HEAP32[$1415>>2]|0;
  $1417 = ($1416|0)<(16000);
  if ($1417) {
   $1418 = HEAP32[$cfg>>2]|0;
   $1419 = (($1418) + 100|0);
   HEAP32[$1419>>2] = 8;
  }
  $1420 = HEAP32[$1>>2]|0;
  $1421 = (($1420) + 172|0);
  $1422 = HEAP32[$1421>>2]|0;
  $1423 = ($1422|0)!=(0);
  do {
   if ($1423) {
    $1424 = HEAP32[$1>>2]|0;
    $1425 = (($1424) + 172|0);
    $1426 = HEAP32[$1425>>2]|0;
    $1427 = HEAP32[$cfg>>2]|0;
    $1428 = HEAP32[$1427>>2]|0;
    $1429 = HEAP32[$cfg>>2]|0;
    $1430 = (($1429) + 48|0);
    $1431 = HEAP32[$1430>>2]|0;
    $1432 = (_FindNearestBitrate($1426,$1428,$1431)|0);
    $1433 = HEAP32[$1>>2]|0;
    $1434 = (($1433) + 172|0);
    HEAP32[$1434>>2] = $1432;
    $1435 = HEAP32[$1>>2]|0;
    $1436 = (($1435) + 172|0);
    $1437 = HEAP32[$1436>>2]|0;
    $1438 = HEAP32[$cfg>>2]|0;
    $1439 = HEAP32[$1438>>2]|0;
    $1440 = HEAP32[$cfg>>2]|0;
    $1441 = (($1440) + 48|0);
    $1442 = HEAP32[$1441>>2]|0;
    $1443 = (_BitrateIndex($1437,$1439,$1442)|0);
    $1444 = HEAP32[$cfg>>2]|0;
    $1445 = (($1444) + 96|0);
    HEAP32[$1445>>2] = $1443;
    $1446 = HEAP32[$cfg>>2]|0;
    $1447 = (($1446) + 96|0);
    $1448 = HEAP32[$1447>>2]|0;
    $1449 = ($1448|0)<(0);
    if (!($1449)) {
     break;
    }
    HEAP32[$0>>2] = -1;
    $1979 = HEAP32[$0>>2]|0;
    STACKTOP = sp;return ($1979|0);
   }
  } while(0);
  $1450 = HEAP32[$1>>2]|0;
  $1451 = (($1450) + 176|0);
  $1452 = HEAP32[$1451>>2]|0;
  $1453 = ($1452|0)!=(0);
  do {
   if ($1453) {
    $1454 = HEAP32[$1>>2]|0;
    $1455 = (($1454) + 176|0);
    $1456 = HEAP32[$1455>>2]|0;
    $1457 = HEAP32[$cfg>>2]|0;
    $1458 = HEAP32[$1457>>2]|0;
    $1459 = HEAP32[$cfg>>2]|0;
    $1460 = (($1459) + 48|0);
    $1461 = HEAP32[$1460>>2]|0;
    $1462 = (_FindNearestBitrate($1456,$1458,$1461)|0);
    $1463 = HEAP32[$1>>2]|0;
    $1464 = (($1463) + 176|0);
    HEAP32[$1464>>2] = $1462;
    $1465 = HEAP32[$1>>2]|0;
    $1466 = (($1465) + 176|0);
    $1467 = HEAP32[$1466>>2]|0;
    $1468 = HEAP32[$cfg>>2]|0;
    $1469 = HEAP32[$1468>>2]|0;
    $1470 = HEAP32[$cfg>>2]|0;
    $1471 = (($1470) + 48|0);
    $1472 = HEAP32[$1471>>2]|0;
    $1473 = (_BitrateIndex($1467,$1469,$1472)|0);
    $1474 = HEAP32[$cfg>>2]|0;
    $1475 = (($1474) + 100|0);
    HEAP32[$1475>>2] = $1473;
    $1476 = HEAP32[$cfg>>2]|0;
    $1477 = (($1476) + 100|0);
    $1478 = HEAP32[$1477>>2]|0;
    $1479 = ($1478|0)<(0);
    if (!($1479)) {
     break;
    }
    HEAP32[$0>>2] = -1;
    $1979 = HEAP32[$0>>2]|0;
    STACKTOP = sp;return ($1979|0);
   }
  } while(0);
  $1480 = HEAP32[$cfg>>2]|0;
  $1481 = (($1480) + 96|0);
  $1482 = HEAP32[$1481>>2]|0;
  $1483 = HEAP32[$cfg>>2]|0;
  $1484 = HEAP32[$1483>>2]|0;
  $1485 = (97760 + ($1484<<6)|0);
  $1486 = (($1485) + ($1482<<2)|0);
  $1487 = HEAP32[$1486>>2]|0;
  $1488 = HEAP32[$1>>2]|0;
  $1489 = (($1488) + 172|0);
  HEAP32[$1489>>2] = $1487;
  $1490 = HEAP32[$cfg>>2]|0;
  $1491 = (($1490) + 100|0);
  $1492 = HEAP32[$1491>>2]|0;
  $1493 = HEAP32[$cfg>>2]|0;
  $1494 = HEAP32[$1493>>2]|0;
  $1495 = (97760 + ($1494<<6)|0);
  $1496 = (($1495) + ($1492<<2)|0);
  $1497 = HEAP32[$1496>>2]|0;
  $1498 = HEAP32[$1>>2]|0;
  $1499 = (($1498) + 176|0);
  HEAP32[$1499>>2] = $1497;
  $1500 = HEAP32[$cfg>>2]|0;
  $1501 = (($1500) + 100|0);
  $1502 = HEAP32[$1501>>2]|0;
  $1503 = HEAP32[$cfg>>2]|0;
  $1504 = HEAP32[$1503>>2]|0;
  $1505 = (97760 + ($1504<<6)|0);
  $1506 = (($1505) + ($1502<<2)|0);
  $1507 = HEAP32[$1506>>2]|0;
  $1508 = HEAP32[$1>>2]|0;
  $1509 = (($1508) + 168|0);
  $1510 = HEAP32[$1509>>2]|0;
  $1511 = ($1507|0)<($1510|0);
  if ($1511) {
   $1512 = HEAP32[$cfg>>2]|0;
   $1513 = (($1512) + 100|0);
   $1514 = HEAP32[$1513>>2]|0;
   $1515 = HEAP32[$cfg>>2]|0;
   $1516 = HEAP32[$1515>>2]|0;
   $1517 = (97760 + ($1516<<6)|0);
   $1518 = (($1517) + ($1514<<2)|0);
   $1519 = HEAP32[$1518>>2]|0;
   $1525 = $1519;
  } else {
   $1520 = HEAP32[$1>>2]|0;
   $1521 = (($1520) + 168|0);
   $1522 = HEAP32[$1521>>2]|0;
   $1525 = $1522;
  }
  $1523 = HEAP32[$1>>2]|0;
  $1524 = (($1523) + 168|0);
  HEAP32[$1524>>2] = $1525;
  $1526 = HEAP32[$cfg>>2]|0;
  $1527 = (($1526) + 96|0);
  $1528 = HEAP32[$1527>>2]|0;
  $1529 = HEAP32[$cfg>>2]|0;
  $1530 = HEAP32[$1529>>2]|0;
  $1531 = (97760 + ($1530<<6)|0);
  $1532 = (($1531) + ($1528<<2)|0);
  $1533 = HEAP32[$1532>>2]|0;
  $1534 = HEAP32[$1>>2]|0;
  $1535 = (($1534) + 168|0);
  $1536 = HEAP32[$1535>>2]|0;
  $1537 = ($1533|0)>($1536|0);
  if ($1537) {
   $1538 = HEAP32[$cfg>>2]|0;
   $1539 = (($1538) + 96|0);
   $1540 = HEAP32[$1539>>2]|0;
   $1541 = HEAP32[$cfg>>2]|0;
   $1542 = HEAP32[$1541>>2]|0;
   $1543 = (97760 + ($1542<<6)|0);
   $1544 = (($1543) + ($1540<<2)|0);
   $1545 = HEAP32[$1544>>2]|0;
   $1551 = $1545;
  } else {
   $1546 = HEAP32[$1>>2]|0;
   $1547 = (($1546) + 168|0);
   $1548 = HEAP32[$1547>>2]|0;
   $1551 = $1548;
  }
  $1549 = HEAP32[$1>>2]|0;
  $1550 = (($1549) + 168|0);
  HEAP32[$1550>>2] = $1551;
 }
 $1552 = HEAP32[$1>>2]|0;
 $1553 = (($1552) + 152|0);
 $1554 = HEAP32[$1553>>2]|0;
 $1555 = HEAP32[$cfg>>2]|0;
 $1556 = (($1555) + 84|0);
 HEAP32[$1556>>2] = $1554;
 $1557 = HEAP32[$1>>2]|0;
 $1558 = (($1557) + 36|0);
 $1559 = HEAP32[$1558>>2]|0;
 $1560 = HEAP32[$cfg>>2]|0;
 $1561 = (($1560) + 140|0);
 HEAP32[$1561>>2] = $1559;
 $1562 = HEAP32[$1>>2]|0;
 $1563 = (($1562) + 156|0);
 $1564 = HEAP32[$1563>>2]|0;
 $1565 = HEAP32[$cfg>>2]|0;
 $1566 = (($1565) + 88|0);
 HEAP32[$1566>>2] = $1564;
 $1567 = HEAP32[$1>>2]|0;
 $1568 = (($1567) + 80|0);
 $1569 = HEAP32[$1568>>2]|0;
 $1570 = HEAP32[$gfc>>2]|0;
 $1571 = (($1570) + 84768|0);
 $1572 = (($1571) + 328|0);
 HEAP32[$1572>>2] = $1569;
 $1573 = HEAP32[$1>>2]|0;
 $1574 = (($1573) + 84|0);
 $1575 = HEAP32[$1574>>2]|0;
 $1576 = HEAP32[$cfg>>2]|0;
 $1577 = (($1576) + 12|0);
 HEAP32[$1577>>2] = $1575;
 $1578 = HEAP32[$1>>2]|0;
 $1579 = (($1578) + 88|0);
 $1580 = HEAP32[$1579>>2]|0;
 $1581 = HEAP32[$cfg>>2]|0;
 $1582 = (($1581) + 16|0);
 HEAP32[$1582>>2] = $1580;
 $1583 = HEAP32[$1>>2]|0;
 $1584 = (($1583) + 92|0);
 $1585 = HEAP32[$1584>>2]|0;
 $1586 = HEAP32[$cfg>>2]|0;
 $1587 = (($1586) + 20|0);
 HEAP32[$1587>>2] = $1585;
 $1588 = HEAP32[$1>>2]|0;
 $1589 = (($1588) + 96|0);
 $1590 = HEAP32[$1589>>2]|0;
 $1591 = HEAP32[$cfg>>2]|0;
 $1592 = (($1591) + 104|0);
 HEAP32[$1592>>2] = $1590;
 $1593 = HEAP32[$1>>2]|0;
 $1594 = (($1593) + 168|0);
 $1595 = HEAP32[$1594>>2]|0;
 $1596 = HEAP32[$cfg>>2]|0;
 $1597 = (($1596) + 92|0);
 HEAP32[$1597>>2] = $1595;
 $1598 = HEAP32[$1>>2]|0;
 $1599 = (($1598) + 100|0);
 $1600 = +HEAPF32[$1599>>2];
 $1601 = HEAP32[$cfg>>2]|0;
 $1602 = (($1601) + 228|0);
 HEAPF32[$1602>>2] = $1600;
 $1603 = HEAP32[$1>>2]|0;
 _lame_init_qval($1603);
 $1604 = HEAP32[$1>>2]|0;
 $1605 = (($1604) + 232|0);
 $1606 = HEAP32[$1605>>2]|0;
 $1607 = ($1606|0)<(0);
 if ($1607) {
  $1608 = HEAP32[$gfc>>2]|0;
  $1609 = (($1608) + 85796|0);
  $1610 = HEAP32[$1609>>2]|0;
  HEAP32[$1610>>2] = 3;
 } else {
  $1611 = HEAP32[$1>>2]|0;
  $1612 = (($1611) + 232|0);
  $1613 = HEAP32[$1612>>2]|0;
  $1614 = HEAP32[$gfc>>2]|0;
  $1615 = (($1614) + 85796|0);
  $1616 = HEAP32[$1615>>2]|0;
  HEAP32[$1616>>2] = $1613;
 }
 $1617 = HEAP32[$1>>2]|0;
 $1618 = (($1617) + 236|0);
 $1619 = +HEAPF32[$1618>>2];
 $1620 = $1619;
 $1621 = $1620 / -10.0;
 $1622 = (+Math_pow(10.0,(+$1621)));
 $1623 = $1622;
 $1624 = HEAP32[$gfc>>2]|0;
 $1625 = (($1624) + 85796|0);
 $1626 = HEAP32[$1625>>2]|0;
 $1627 = (($1626) + 4|0);
 HEAPF32[$1627>>2] = $1623;
 $1628 = HEAP32[$1>>2]|0;
 $1629 = (($1628) + 240|0);
 $1630 = HEAP32[$1629>>2]|0;
 $1631 = ($1630|0)==(-1);
 if ($1631) {
  $1632 = HEAP32[$1>>2]|0;
  $1633 = (($1632) + 240|0);
  HEAP32[$1633>>2] = 0;
 }
 $1634 = HEAP32[$1>>2]|0;
 $1635 = (($1634) + 240|0);
 $1636 = HEAP32[$1635>>2]|0;
 $1637 = ($1636|0)==(0);
 do {
  if ($1637) {
   $1638 = HEAP32[$cfg>>2]|0;
   $1639 = (($1638) + 164|0);
   $1640 = HEAP32[$1639>>2]|0;
   $1641 = ($1640|0)==(1);
   if (!($1641)) {
    $1642 = HEAP32[$cfg>>2]|0;
    $1643 = (($1642) + 164|0);
    $1644 = HEAP32[$1643>>2]|0;
    $1645 = ($1644|0)==(0);
    if (!($1645)) {
     break;
    }
   }
   $1646 = HEAP32[$1>>2]|0;
   $1647 = (($1646) + 240|0);
   HEAP32[$1647>>2] = 1;
  }
 } while(0);
 $1648 = HEAP32[$1>>2]|0;
 $1649 = (($1648) + 240|0);
 $1650 = HEAP32[$1649>>2]|0;
 $1651 = HEAP32[$cfg>>2]|0;
 $1652 = (($1651) + 168|0);
 HEAP32[$1652>>2] = $1650;
 $1653 = HEAP32[$1>>2]|0;
 $1654 = (_lame_get_quant_comp($1653)|0);
 $1655 = ($1654|0)<(0);
 if ($1655) {
  $1656 = HEAP32[$1>>2]|0;
  (_lame_set_quant_comp($1656,1)|0);
 }
 $1657 = HEAP32[$1>>2]|0;
 $1658 = (_lame_get_quant_comp_short($1657)|0);
 $1659 = ($1658|0)<(0);
 if ($1659) {
  $1660 = HEAP32[$1>>2]|0;
  (_lame_set_quant_comp_short($1660,0)|0);
 }
 $1661 = HEAP32[$1>>2]|0;
 $1662 = (+_lame_get_msfix($1661));
 $1663 = $1662 < 0.0;
 if ($1663) {
  $1664 = HEAP32[$1>>2]|0;
  _lame_set_msfix($1664,0.0);
 }
 $1665 = HEAP32[$1>>2]|0;
 $1666 = HEAP32[$1>>2]|0;
 $1667 = (_lame_get_exp_nspsytune($1666)|0);
 $1668 = $1667 | 1;
 (_lame_set_exp_nspsytune($1665,$1668)|0);
 $1669 = HEAP32[$1>>2]|0;
 $1670 = (($1669) + 220|0);
 $1671 = HEAP32[$1670>>2]|0;
 $1672 = ($1671|0)<(0);
 if ($1672) {
  $1673 = HEAP32[$1>>2]|0;
  $1674 = (($1673) + 220|0);
  HEAP32[$1674>>2] = 4;
 }
 $1675 = HEAP32[$1>>2]|0;
 $1676 = (($1675) + 224|0);
 $1677 = +HEAPF32[$1676>>2];
 $1678 = $1677 < 0.0;
 if ($1678) {
  $1679 = HEAP32[$1>>2]|0;
  $1680 = (($1679) + 224|0);
  HEAPF32[$1680>>2] = 4.0;
 }
 $1681 = HEAP32[$1>>2]|0;
 $1682 = (($1681) + 248|0);
 $1683 = +HEAPF32[$1682>>2];
 $1684 = $1683 < 0.0;
 if ($1684) {
  $1685 = HEAP32[$1>>2]|0;
  $1686 = (($1685) + 248|0);
  HEAPF32[$1686>>2] = 0.0;
 }
 $1687 = HEAP32[$1>>2]|0;
 $1688 = (($1687) + 244|0);
 $1689 = HEAP32[$1688>>2]|0;
 $1690 = ($1689|0)<(0);
 if ($1690) {
  $1691 = HEAP32[$1>>2]|0;
  $1692 = (($1691) + 244|0);
  HEAP32[$1692>>2] = 1;
 }
 $1693 = HEAP32[$1>>2]|0;
 $1694 = (($1693) + 248|0);
 $1695 = +HEAPF32[$1694>>2];
 $1696 = HEAP32[$cfg>>2]|0;
 $1697 = (($1696) + 172|0);
 HEAPF32[$1697>>2] = $1695;
 $1698 = HEAP32[$1>>2]|0;
 $1699 = (($1698) + 252|0);
 $1700 = +HEAPF32[$1699>>2];
 $1701 = HEAP32[$cfg>>2]|0;
 $1702 = (($1701) + 176|0);
 HEAPF32[$1702>>2] = $1700;
 $1703 = HEAP32[$1>>2]|0;
 $1704 = (($1703) + 228|0);
 $1705 = +HEAPF32[$1704>>2];
 $1706 = 0.0 - $1705;
 $1707 = HEAP32[$cfg>>2]|0;
 $1708 = (($1707) + 180|0);
 HEAPF32[$1708>>2] = $1706;
 $1709 = HEAP32[$cfg>>2]|0;
 $1710 = (($1709) + 180|0);
 $1711 = +HEAPF32[$1710>>2];
 $1712 = $1711 * 0.100000001490116119385;
 $1713 = (+Math_pow(10.0,(+$1712)));
 $1714 = HEAP32[$cfg>>2]|0;
 $1715 = (($1714) + 184|0);
 HEAPF32[$1715>>2] = $1713;
 $1716 = HEAP32[$1>>2]|0;
 $1717 = (($1716) + 224|0);
 $1718 = +HEAPF32[$1717>>2];
 $1719 = HEAP32[$cfg>>2]|0;
 $1720 = (($1719) + 188|0);
 HEAPF32[$1720>>2] = $1718;
 $1721 = HEAP32[$1>>2]|0;
 $1722 = (($1721) + 220|0);
 $1723 = HEAP32[$1722>>2]|0;
 $1724 = HEAP32[$cfg>>2]|0;
 $1725 = (($1724) + 192|0);
 HEAP32[$1725>>2] = $1723;
 $1726 = HEAP32[$1>>2]|0;
 $1727 = (($1726) + 208|0);
 $1728 = HEAP32[$1727>>2]|0;
 $1729 = HEAP32[$cfg>>2]|0;
 $1730 = (($1729) + 196|0);
 HEAP32[$1730>>2] = $1728;
 $1731 = HEAP32[$1>>2]|0;
 $1732 = (($1731) + 212|0);
 $1733 = HEAP32[$1732>>2]|0;
 $1734 = HEAP32[$cfg>>2]|0;
 $1735 = (($1734) + 200|0);
 HEAP32[$1735>>2] = $1733;
 $1736 = HEAP32[$1>>2]|0;
 $1737 = (($1736) + 216|0);
 $1738 = HEAP32[$1737>>2]|0;
 $1739 = HEAP32[$cfg>>2]|0;
 $1740 = (($1739) + 204|0);
 HEAP32[$1740>>2] = $1738;
 $1741 = HEAP32[$1>>2]|0;
 $1742 = (($1741) + 132|0);
 $1743 = HEAP32[$1742>>2]|0;
 $1744 = HEAP32[$cfg>>2]|0;
 $1745 = (($1744) + 68|0);
 HEAP32[$1745>>2] = $1743;
 $1746 = HEAP32[$1>>2]|0;
 $1747 = (($1746) + 136|0);
 $1748 = HEAP32[$1747>>2]|0;
 $1749 = HEAP32[$cfg>>2]|0;
 $1750 = (($1749) + 72|0);
 HEAP32[$1750>>2] = $1748;
 $1751 = HEAP32[$1>>2]|0;
 $1752 = (($1751) + 244|0);
 $1753 = HEAP32[$1752>>2]|0;
 $1754 = HEAP32[$cfg>>2]|0;
 $1755 = (($1754) + 76|0);
 HEAP32[$1755>>2] = $1753;
 $1756 = HEAP32[$1>>2]|0;
 $1757 = (($1756) + 148|0);
 $1758 = HEAP32[$1757>>2]|0;
 $1759 = $1758 & 2;
 $1760 = HEAP32[$cfg>>2]|0;
 $1761 = (($1760) + 80|0);
 HEAP32[$1761>>2] = $1759;
 $1762 = HEAP32[$1>>2]|0;
 $1763 = (($1762) + 148|0);
 $1764 = HEAP32[$1763>>2]|0;
 $1765 = $1764 >> 2;
 $1766 = $1765 & 63;
 $1767 = (+($1766|0));
 $1768 = HEAP32[$cfg>>2]|0;
 $1769 = (($1768) + 216|0);
 HEAPF32[$1769>>2] = $1767;
 $1770 = HEAP32[$cfg>>2]|0;
 $1771 = (($1770) + 216|0);
 $1772 = +HEAPF32[$1771>>2];
 $1773 = $1772 >= 32.0;
 if ($1773) {
  $1774 = HEAP32[$cfg>>2]|0;
  $1775 = (($1774) + 216|0);
  $1776 = +HEAPF32[$1775>>2];
  $1777 = $1776 - 64.0;
  HEAPF32[$1775>>2] = $1777;
 }
 $1778 = HEAP32[$cfg>>2]|0;
 $1779 = (($1778) + 216|0);
 $1780 = +HEAPF32[$1779>>2];
 $1781 = $1780 * 0.25;
 HEAPF32[$1779>>2] = $1781;
 $1782 = HEAP32[$1>>2]|0;
 $1783 = (($1782) + 148|0);
 $1784 = HEAP32[$1783>>2]|0;
 $1785 = $1784 >> 8;
 $1786 = $1785 & 63;
 $1787 = (+($1786|0));
 $1788 = HEAP32[$cfg>>2]|0;
 $1789 = (($1788) + 212|0);
 HEAPF32[$1789>>2] = $1787;
 $1790 = HEAP32[$cfg>>2]|0;
 $1791 = (($1790) + 212|0);
 $1792 = +HEAPF32[$1791>>2];
 $1793 = $1792 >= 32.0;
 if ($1793) {
  $1794 = HEAP32[$cfg>>2]|0;
  $1795 = (($1794) + 212|0);
  $1796 = +HEAPF32[$1795>>2];
  $1797 = $1796 - 64.0;
  HEAPF32[$1795>>2] = $1797;
 }
 $1798 = HEAP32[$cfg>>2]|0;
 $1799 = (($1798) + 212|0);
 $1800 = +HEAPF32[$1799>>2];
 $1801 = $1800 * 0.25;
 HEAPF32[$1799>>2] = $1801;
 $1802 = HEAP32[$1>>2]|0;
 $1803 = (($1802) + 148|0);
 $1804 = HEAP32[$1803>>2]|0;
 $1805 = $1804 >> 14;
 $1806 = $1805 & 63;
 $1807 = (+($1806|0));
 $1808 = HEAP32[$cfg>>2]|0;
 $1809 = (($1808) + 220|0);
 HEAPF32[$1809>>2] = $1807;
 $1810 = HEAP32[$cfg>>2]|0;
 $1811 = (($1810) + 220|0);
 $1812 = +HEAPF32[$1811>>2];
 $1813 = $1812 >= 32.0;
 if ($1813) {
  $1814 = HEAP32[$cfg>>2]|0;
  $1815 = (($1814) + 220|0);
  $1816 = +HEAPF32[$1815>>2];
  $1817 = $1816 - 64.0;
  HEAPF32[$1815>>2] = $1817;
 }
 $1818 = HEAP32[$cfg>>2]|0;
 $1819 = (($1818) + 220|0);
 $1820 = +HEAPF32[$1819>>2];
 $1821 = $1820 * 0.25;
 HEAPF32[$1819>>2] = $1821;
 $1822 = HEAP32[$1>>2]|0;
 $1823 = (($1822) + 148|0);
 $1824 = HEAP32[$1823>>2]|0;
 $1825 = $1824 >> 20;
 $1826 = $1825 & 63;
 $1827 = (+($1826|0));
 $1828 = HEAP32[$cfg>>2]|0;
 $1829 = (($1828) + 224|0);
 HEAPF32[$1829>>2] = $1827;
 $1830 = HEAP32[$cfg>>2]|0;
 $1831 = (($1830) + 224|0);
 $1832 = +HEAPF32[$1831>>2];
 $1833 = $1832 >= 32.0;
 if ($1833) {
  $1834 = HEAP32[$cfg>>2]|0;
  $1835 = (($1834) + 224|0);
  $1836 = +HEAPF32[$1835>>2];
  $1837 = $1836 - 64.0;
  HEAPF32[$1835>>2] = $1837;
 }
 $1838 = HEAP32[$cfg>>2]|0;
 $1839 = (($1838) + 224|0);
 $1840 = +HEAPF32[$1839>>2];
 $1841 = $1840 * 0.25;
 HEAPF32[$1839>>2] = $1841;
 $1842 = HEAP32[$cfg>>2]|0;
 $1843 = (($1842) + 220|0);
 $1844 = +HEAPF32[$1843>>2];
 $1845 = HEAP32[$cfg>>2]|0;
 $1846 = (($1845) + 224|0);
 $1847 = +HEAPF32[$1846>>2];
 $1848 = $1847 + $1844;
 HEAPF32[$1846>>2] = $1848;
 ;HEAP32[$m10+0>>2]=HEAP32[6912+0>>2]|0;HEAP32[$m10+4>>2]=HEAP32[6912+4>>2]|0;HEAP32[$m10+8>>2]=HEAP32[6912+8>>2]|0;HEAP32[$m10+12>>2]=HEAP32[6912+12>>2]|0;
 $1849 = HEAP32[$1>>2]|0;
 $1850 = (($1849) + 20|0);
 $1851 = +HEAPF32[$1850>>2];
 $1852 = +HEAPF32[$m10>>2];
 $1853 = $1852 * $1851;
 HEAPF32[$m10>>2] = $1853;
 $1854 = HEAP32[$1>>2]|0;
 $1855 = (($1854) + 20|0);
 $1856 = +HEAPF32[$1855>>2];
 $1857 = (($m10) + 4|0);
 $1858 = +HEAPF32[$1857>>2];
 $1859 = $1858 * $1856;
 HEAPF32[$1857>>2] = $1859;
 $1860 = HEAP32[$1>>2]|0;
 $1861 = (($1860) + 20|0);
 $1862 = +HEAPF32[$1861>>2];
 $1863 = (($m10) + 8|0);
 $1864 = +HEAPF32[$1863>>2];
 $1865 = $1864 * $1862;
 HEAPF32[$1863>>2] = $1865;
 $1866 = HEAP32[$1>>2]|0;
 $1867 = (($1866) + 20|0);
 $1868 = +HEAPF32[$1867>>2];
 $1869 = (($m10) + 8|0);
 $1870 = (($1869) + 4|0);
 $1871 = +HEAPF32[$1870>>2];
 $1872 = $1871 * $1868;
 HEAPF32[$1870>>2] = $1872;
 $1873 = HEAP32[$1>>2]|0;
 $1874 = (($1873) + 24|0);
 $1875 = +HEAPF32[$1874>>2];
 $1876 = +HEAPF32[$m10>>2];
 $1877 = $1876 * $1875;
 HEAPF32[$m10>>2] = $1877;
 $1878 = HEAP32[$1>>2]|0;
 $1879 = (($1878) + 24|0);
 $1880 = +HEAPF32[$1879>>2];
 $1881 = (($m10) + 4|0);
 $1882 = +HEAPF32[$1881>>2];
 $1883 = $1882 * $1880;
 HEAPF32[$1881>>2] = $1883;
 $1884 = HEAP32[$1>>2]|0;
 $1885 = (($1884) + 28|0);
 $1886 = +HEAPF32[$1885>>2];
 $1887 = (($m10) + 8|0);
 $1888 = +HEAPF32[$1887>>2];
 $1889 = $1888 * $1886;
 HEAPF32[$1887>>2] = $1889;
 $1890 = HEAP32[$1>>2]|0;
 $1891 = (($1890) + 28|0);
 $1892 = +HEAPF32[$1891>>2];
 $1893 = (($m10) + 8|0);
 $1894 = (($1893) + 4|0);
 $1895 = +HEAPF32[$1894>>2];
 $1896 = $1895 * $1892;
 HEAPF32[$1894>>2] = $1896;
 $1897 = HEAP32[$cfg>>2]|0;
 $1898 = (($1897) + 52|0);
 $1899 = HEAP32[$1898>>2]|0;
 $1900 = ($1899|0)==(2);
 do {
  if ($1900) {
   $1901 = HEAP32[$cfg>>2]|0;
   $1902 = (($1901) + 56|0);
   $1903 = HEAP32[$1902>>2]|0;
   $1904 = ($1903|0)==(1);
   if (!($1904)) {
    break;
   }
   $1905 = +HEAPF32[$m10>>2];
   $1906 = (($m10) + 8|0);
   $1907 = +HEAPF32[$1906>>2];
   $1908 = $1905 + $1907;
   $1909 = 0.5 * $1908;
   HEAPF32[$m10>>2] = $1909;
   $1910 = (($m10) + 4|0);
   $1911 = +HEAPF32[$1910>>2];
   $1912 = (($m10) + 8|0);
   $1913 = (($1912) + 4|0);
   $1914 = +HEAPF32[$1913>>2];
   $1915 = $1911 + $1914;
   $1916 = 0.5 * $1915;
   $1917 = (($m10) + 4|0);
   HEAPF32[$1917>>2] = $1916;
   $1918 = (($m10) + 8|0);
   HEAPF32[$1918>>2] = 0.0;
   $1919 = (($m10) + 8|0);
   $1920 = (($1919) + 4|0);
   HEAPF32[$1920>>2] = 0.0;
  }
 } while(0);
 $1921 = +HEAPF32[$m10>>2];
 $1922 = HEAP32[$cfg>>2]|0;
 $1923 = (($1922) + 248|0);
 HEAPF32[$1923>>2] = $1921;
 $1924 = (($m10) + 4|0);
 $1925 = +HEAPF32[$1924>>2];
 $1926 = HEAP32[$cfg>>2]|0;
 $1927 = (($1926) + 248|0);
 $1928 = (($1927) + 4|0);
 HEAPF32[$1928>>2] = $1925;
 $1929 = (($m10) + 8|0);
 $1930 = +HEAPF32[$1929>>2];
 $1931 = HEAP32[$cfg>>2]|0;
 $1932 = (($1931) + 248|0);
 $1933 = (($1932) + 8|0);
 HEAPF32[$1933>>2] = $1930;
 $1934 = (($m10) + 8|0);
 $1935 = (($1934) + 4|0);
 $1936 = +HEAPF32[$1935>>2];
 $1937 = HEAP32[$cfg>>2]|0;
 $1938 = (($1937) + 248|0);
 $1939 = (($1938) + 8|0);
 $1940 = (($1939) + 4|0);
 HEAPF32[$1940>>2] = $1936;
 $1941 = HEAP32[$gfc>>2]|0;
 $1942 = (($1941) + 27824|0);
 $1943 = (($1942) + 12008|0);
 HEAP32[$1943>>2] = 0;
 $1944 = HEAP32[$gfc>>2]|0;
 $1945 = (($1944) + 27824|0);
 $1946 = (($1945) + 12012|0);
 HEAP32[$1946>>2] = 0;
 $1947 = HEAP32[$cfg>>2]|0;
 $1948 = (($1947) + 88|0);
 $1949 = HEAP32[$1948>>2]|0;
 $1950 = ($1949|0)==(0);
 if ($1950) {
  $1951 = HEAP32[$cfg>>2]|0;
  $1952 = HEAP32[$1951>>2]|0;
  $1953 = (($1952) + 1)|0;
  $1954 = ($1953*72000)|0;
  $1955 = HEAP32[$cfg>>2]|0;
  $1956 = (($1955) + 104|0);
  $1957 = HEAP32[$1956>>2]|0;
  $1958 = Math_imul($1954, $1957)|0;
  $1959 = HEAP32[$cfg>>2]|0;
  $1960 = (($1959) + 48|0);
  $1961 = HEAP32[$1960>>2]|0;
  $1962 = (($1958|0) % ($1961|0))&-1;
  $1963 = HEAP32[$gfc>>2]|0;
  $1964 = (($1963) + 27824|0);
  $1965 = (($1964) + 12008|0);
  HEAP32[$1965>>2] = $1962;
  $1966 = HEAP32[$gfc>>2]|0;
  $1967 = (($1966) + 27824|0);
  $1968 = (($1967) + 12012|0);
  HEAP32[$1968>>2] = $1962;
 }
 $1969 = HEAP32[$1>>2]|0;
 (_lame_init_bitstream($1969)|0);
 $1970 = HEAP32[$gfc>>2]|0;
 _iteration_init($1970);
 $1971 = HEAP32[$1>>2]|0;
 (_psymodel_init($1971)|0);
 $1972 = HEAP32[$cfg>>2]|0;
 $1973 = HEAP32[$1>>2]|0;
 $1974 = (($1973) + 124|0);
 $1975 = HEAP32[$1974>>2]|0;
 $1976 = (_get_max_frame_buffer_size_by_constraint($1972,$1975)|0);
 $1977 = HEAP32[$cfg>>2]|0;
 $1978 = (($1977) + 132|0);
 HEAP32[$1978>>2] = $1976;
 HEAP32[$0>>2] = 0;
 $1979 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($1979|0);
}
function _optimum_bandwidth($lowerlimit,$upperlimit,$bitrate) {
 $lowerlimit = $lowerlimit|0;
 $upperlimit = $upperlimit|0;
 $bitrate = $bitrate|0;
 var $0 = 0, $1 = 0, $10 = 0.0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $table_index = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp + 12|0;
 $1 = sp + 8|0;
 $2 = sp + 4|0;
 $table_index = sp;
 HEAP32[$0>>2] = $lowerlimit;
 HEAP32[$1>>2] = $upperlimit;
 HEAP32[$2>>2] = $bitrate;
 $3 = HEAP32[$2>>2]|0;
 $4 = $3&65535;
 $5 = (_nearestBitrateFullIndex($4)|0);
 HEAP32[$table_index>>2] = $5;
 $6 = HEAP32[$table_index>>2]|0;
 $7 = (7040 + ($6<<3)|0);
 $8 = (($7) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (+($9|0));
 $11 = HEAP32[$0>>2]|0;
 HEAPF64[$11>>3] = $10;
 STACKTOP = sp;return;
}
function _linear_int($a,$b,$m) {
 $a = +$a;
 $b = +$b;
 $m = +$m;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = sp + 16|0;
 $1 = sp + 8|0;
 $2 = sp;
 HEAPF64[$0>>3] = $a;
 HEAPF64[$1>>3] = $b;
 HEAPF64[$2>>3] = $m;
 $3 = +HEAPF64[$0>>3];
 $4 = +HEAPF64[$2>>3];
 $5 = +HEAPF64[$1>>3];
 $6 = +HEAPF64[$0>>3];
 $7 = $5 - $6;
 $8 = $4 * $7;
 $9 = $3 + $8;
 STACKTOP = sp;return (+$9);
}
function _optimum_samplefreq($lowpassfreq,$input_samplefreq) {
 $lowpassfreq = $lowpassfreq|0;
 $input_samplefreq = $input_samplefreq|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $suggested_samplefreq = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp + 12|0;
 $1 = sp + 8|0;
 $2 = sp + 4|0;
 $suggested_samplefreq = sp;
 HEAP32[$1>>2] = $lowpassfreq;
 HEAP32[$2>>2] = $input_samplefreq;
 HEAP32[$suggested_samplefreq>>2] = 44100;
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)>=(48000);
 do {
  if ($4) {
   HEAP32[$suggested_samplefreq>>2] = 48000;
  } else {
   $5 = HEAP32[$2>>2]|0;
   $6 = ($5|0)>=(44100);
   if ($6) {
    HEAP32[$suggested_samplefreq>>2] = 44100;
    break;
   }
   $7 = HEAP32[$2>>2]|0;
   $8 = ($7|0)>=(32000);
   if ($8) {
    HEAP32[$suggested_samplefreq>>2] = 32000;
    break;
   }
   $9 = HEAP32[$2>>2]|0;
   $10 = ($9|0)>=(24000);
   if ($10) {
    HEAP32[$suggested_samplefreq>>2] = 24000;
    break;
   }
   $11 = HEAP32[$2>>2]|0;
   $12 = ($11|0)>=(22050);
   if ($12) {
    HEAP32[$suggested_samplefreq>>2] = 22050;
    break;
   }
   $13 = HEAP32[$2>>2]|0;
   $14 = ($13|0)>=(16000);
   if ($14) {
    HEAP32[$suggested_samplefreq>>2] = 16000;
    break;
   }
   $15 = HEAP32[$2>>2]|0;
   $16 = ($15|0)>=(12000);
   if ($16) {
    HEAP32[$suggested_samplefreq>>2] = 12000;
    break;
   }
   $17 = HEAP32[$2>>2]|0;
   $18 = ($17|0)>=(11025);
   if ($18) {
    HEAP32[$suggested_samplefreq>>2] = 11025;
    break;
   }
   $19 = HEAP32[$2>>2]|0;
   $20 = ($19|0)>=(8000);
   if ($20) {
    HEAP32[$suggested_samplefreq>>2] = 8000;
   }
  }
 } while(0);
 $21 = HEAP32[$1>>2]|0;
 $22 = ($21|0)==(-1);
 do {
  if ($22) {
   $23 = HEAP32[$suggested_samplefreq>>2]|0;
   HEAP32[$0>>2] = $23;
  } else {
   $24 = HEAP32[$1>>2]|0;
   $25 = ($24|0)<=(15960);
   if ($25) {
    HEAP32[$suggested_samplefreq>>2] = 44100;
   }
   $26 = HEAP32[$1>>2]|0;
   $27 = ($26|0)<=(15250);
   if ($27) {
    HEAP32[$suggested_samplefreq>>2] = 32000;
   }
   $28 = HEAP32[$1>>2]|0;
   $29 = ($28|0)<=(11220);
   if ($29) {
    HEAP32[$suggested_samplefreq>>2] = 24000;
   }
   $30 = HEAP32[$1>>2]|0;
   $31 = ($30|0)<=(9970);
   if ($31) {
    HEAP32[$suggested_samplefreq>>2] = 22050;
   }
   $32 = HEAP32[$1>>2]|0;
   $33 = ($32|0)<=(7230);
   if ($33) {
    HEAP32[$suggested_samplefreq>>2] = 16000;
   }
   $34 = HEAP32[$1>>2]|0;
   $35 = ($34|0)<=(5420);
   if ($35) {
    HEAP32[$suggested_samplefreq>>2] = 12000;
   }
   $36 = HEAP32[$1>>2]|0;
   $37 = ($36|0)<=(4510);
   if ($37) {
    HEAP32[$suggested_samplefreq>>2] = 11025;
   }
   $38 = HEAP32[$1>>2]|0;
   $39 = ($38|0)<=(3970);
   if ($39) {
    HEAP32[$suggested_samplefreq>>2] = 8000;
   }
   $40 = HEAP32[$2>>2]|0;
   $41 = HEAP32[$suggested_samplefreq>>2]|0;
   $42 = ($40|0)<($41|0);
   if (!($42)) {
    $59 = HEAP32[$suggested_samplefreq>>2]|0;
    HEAP32[$0>>2] = $59;
    break;
   }
   $43 = HEAP32[$2>>2]|0;
   $44 = ($43|0)>(44100);
   if ($44) {
    HEAP32[$0>>2] = 48000;
    break;
   }
   $45 = HEAP32[$2>>2]|0;
   $46 = ($45|0)>(32000);
   if ($46) {
    HEAP32[$0>>2] = 44100;
    break;
   }
   $47 = HEAP32[$2>>2]|0;
   $48 = ($47|0)>(24000);
   if ($48) {
    HEAP32[$0>>2] = 32000;
    break;
   }
   $49 = HEAP32[$2>>2]|0;
   $50 = ($49|0)>(22050);
   if ($50) {
    HEAP32[$0>>2] = 24000;
    break;
   }
   $51 = HEAP32[$2>>2]|0;
   $52 = ($51|0)>(16000);
   if ($52) {
    HEAP32[$0>>2] = 22050;
    break;
   }
   $53 = HEAP32[$2>>2]|0;
   $54 = ($53|0)>(12000);
   if ($54) {
    HEAP32[$0>>2] = 16000;
    break;
   }
   $55 = HEAP32[$2>>2]|0;
   $56 = ($55|0)>(11025);
   if ($56) {
    HEAP32[$0>>2] = 12000;
    break;
   }
   $57 = HEAP32[$2>>2]|0;
   $58 = ($57|0)>(8000);
   if ($58) {
    HEAP32[$0>>2] = 11025;
    break;
   } else {
    HEAP32[$0>>2] = 8000;
    break;
   }
  }
 } while(0);
 $60 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($60|0);
}
function _lame_init_params_ppflt($gfc) {
 $gfc = $gfc|0;
 var $0 = 0, $1 = 0, $10 = 0.0, $100 = 0, $101 = 0.0, $102 = 0.0, $103 = 0, $104 = 0.0, $105 = 0, $106 = 0, $107 = 0.0, $108 = 0, $109 = 0, $11 = 0.0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0.0, $119 = 0.0, $12 = 0.0, $120 = 0.0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0.0, $127 = 0.0, $128 = 0.0, $129 = 0.0, $13 = 0.0, $130 = 0, $131 = 0, $132 = 0, $133 = 0.0;
 var $134 = 0.0, $135 = 0.0, $136 = 0.0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0.0, $143 = 0.0, $144 = 0, $145 = 0, $146 = 0.0, $147 = 0, $148 = 0, $149 = 0.0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0.0, $154 = 0.0, $155 = 0.0, $156 = 0.0, $157 = 0, $158 = 0, $159 = 0.0, $16 = 0.0, $160 = 0, $161 = 0, $162 = 0.0, $163 = 0.0, $164 = 0.0, $165 = 0.0, $166 = 0.0, $167 = 0.0, $168 = 0.0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0.0, $172 = 0, $173 = 0, $174 = 0.0, $175 = 0, $176 = 0.0, $177 = 0, $178 = 0, $179 = 0.0, $18 = 0, $180 = 0.0, $181 = 0.0, $182 = 0, $183 = 0, $184 = 0.0, $185 = 0, $186 = 0, $187 = 0.0, $188 = 0.0;
 var $189 = 0.0, $19 = 0, $190 = 0.0, $191 = 0.0, $192 = 0.0, $193 = 0.0, $194 = 0.0, $195 = 0.0, $196 = 0.0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0.0, $27 = 0.0, $28 = 0, $29 = 0.0, $3 = 0, $30 = 0, $31 = 0, $32 = 0.0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0, $5 = 0.0, $50 = 0, $51 = 0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0, $57 = 0, $58 = 0, $59 = 0.0;
 var $6 = 0, $60 = 0.0, $61 = 0.0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0.0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0.0, $71 = 0.0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0.0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0.0, $86 = 0.0, $87 = 0.0, $88 = 0.0, $89 = 0, $9 = 0, $90 = 0, $91 = 0.0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $band = 0, $cfg = 0, $fc1 = 0, $fc2 = 0, $freq = 0, $highpass_band = 0, $lowpass_band = 0, $maxband = 0, $minband = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $vararg_buffer = sp;
 $0 = sp + 40|0;
 $cfg = sp + 36|0;
 $band = sp + 32|0;
 $maxband = sp + 28|0;
 $minband = sp + 24|0;
 $freq = sp + 20|0;
 $lowpass_band = sp + 16|0;
 $highpass_band = sp + 12|0;
 $fc1 = sp + 8|0;
 $fc2 = sp + 4|0;
 HEAP32[$0>>2] = $gfc;
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 16|0);
 HEAP32[$cfg>>2] = $2;
 HEAP32[$lowpass_band>>2] = 32;
 HEAP32[$highpass_band>>2] = -1;
 $3 = HEAP32[$cfg>>2]|0;
 $4 = (($3) + 232|0);
 $5 = +HEAPF32[$4>>2];
 $6 = $5 > 0.0;
 if ($6) {
  HEAP32[$minband>>2] = 999;
  HEAP32[$band>>2] = 0;
  while(1) {
   $7 = HEAP32[$band>>2]|0;
   $8 = ($7|0)<=(31);
   if (!($8)) {
    break;
   }
   $9 = HEAP32[$band>>2]|0;
   $10 = (+($9|0));
   $11 = $10 / 31.0;
   $12 = $11;
   HEAPF32[$freq>>2] = $12;
   $13 = +HEAPF32[$freq>>2];
   $14 = HEAP32[$cfg>>2]|0;
   $15 = (($14) + 236|0);
   $16 = +HEAPF32[$15>>2];
   $17 = $13 >= $16;
   if ($17) {
    $18 = HEAP32[$lowpass_band>>2]|0;
    $19 = HEAP32[$band>>2]|0;
    $20 = ($18|0)<($19|0);
    $21 = HEAP32[$lowpass_band>>2]|0;
    $22 = HEAP32[$band>>2]|0;
    $23 = $20 ? $21 : $22;
    HEAP32[$lowpass_band>>2] = $23;
   }
   $24 = HEAP32[$cfg>>2]|0;
   $25 = (($24) + 232|0);
   $26 = +HEAPF32[$25>>2];
   $27 = +HEAPF32[$freq>>2];
   $28 = $26 < $27;
   if ($28) {
    $29 = +HEAPF32[$freq>>2];
    $30 = HEAP32[$cfg>>2]|0;
    $31 = (($30) + 236|0);
    $32 = +HEAPF32[$31>>2];
    $33 = $29 < $32;
    if ($33) {
     $34 = HEAP32[$minband>>2]|0;
     $35 = HEAP32[$band>>2]|0;
     $36 = ($34|0)<($35|0);
     $37 = HEAP32[$minband>>2]|0;
     $38 = HEAP32[$band>>2]|0;
     $39 = $36 ? $37 : $38;
     HEAP32[$minband>>2] = $39;
    }
   }
   $40 = HEAP32[$band>>2]|0;
   $41 = (($40) + 1)|0;
   HEAP32[$band>>2] = $41;
  }
  $42 = HEAP32[$minband>>2]|0;
  $43 = ($42|0)==(999);
  if ($43) {
   $44 = HEAP32[$lowpass_band>>2]|0;
   $45 = (+($44|0));
   $46 = $45 - 0.75;
   $47 = $46 / 31.0;
   $48 = $47;
   $49 = HEAP32[$cfg>>2]|0;
   $50 = (($49) + 232|0);
   HEAPF32[$50>>2] = $48;
  } else {
   $51 = HEAP32[$minband>>2]|0;
   $52 = (+($51|0));
   $53 = $52 - 0.75;
   $54 = $53 / 31.0;
   $55 = $54;
   $56 = HEAP32[$cfg>>2]|0;
   $57 = (($56) + 232|0);
   HEAPF32[$57>>2] = $55;
  }
  $58 = HEAP32[$lowpass_band>>2]|0;
  $59 = (+($58|0));
  $60 = $59 / 31.0;
  $61 = $60;
  $62 = HEAP32[$cfg>>2]|0;
  $63 = (($62) + 236|0);
  HEAPF32[$63>>2] = $61;
 }
 $64 = HEAP32[$cfg>>2]|0;
 $65 = (($64) + 244|0);
 $66 = +HEAPF32[$65>>2];
 $67 = $66 > 0.0;
 if ($67) {
  $68 = HEAP32[$cfg>>2]|0;
  $69 = (($68) + 244|0);
  $70 = +HEAPF32[$69>>2];
  $71 = $70;
  $72 = $71 < 0.0217741935483870968637;
  if ($72) {
   $73 = HEAP32[$cfg>>2]|0;
   $74 = (($73) + 240|0);
   HEAPF32[$74>>2] = 0.0;
   $75 = HEAP32[$cfg>>2]|0;
   $76 = (($75) + 244|0);
   HEAPF32[$76>>2] = 0.0;
   $77 = HEAP32[$0>>2]|0;
   _lame_msgf($77,6968,$vararg_buffer);
  }
 }
 $78 = HEAP32[$cfg>>2]|0;
 $79 = (($78) + 244|0);
 $80 = +HEAPF32[$79>>2];
 $81 = $80 > 0.0;
 do {
  if ($81) {
   HEAP32[$maxband>>2] = -1;
   HEAP32[$band>>2] = 0;
   while(1) {
    $82 = HEAP32[$band>>2]|0;
    $83 = ($82|0)<=(31);
    if (!($83)) {
     break;
    }
    $84 = HEAP32[$band>>2]|0;
    $85 = (+($84|0));
    $86 = $85 / 31.0;
    $87 = $86;
    HEAPF32[$freq>>2] = $87;
    $88 = +HEAPF32[$freq>>2];
    $89 = HEAP32[$cfg>>2]|0;
    $90 = (($89) + 240|0);
    $91 = +HEAPF32[$90>>2];
    $92 = $88 <= $91;
    if ($92) {
     $93 = HEAP32[$highpass_band>>2]|0;
     $94 = HEAP32[$band>>2]|0;
     $95 = ($93|0)>($94|0);
     $96 = HEAP32[$highpass_band>>2]|0;
     $97 = HEAP32[$band>>2]|0;
     $98 = $95 ? $96 : $97;
     HEAP32[$highpass_band>>2] = $98;
    }
    $99 = HEAP32[$cfg>>2]|0;
    $100 = (($99) + 240|0);
    $101 = +HEAPF32[$100>>2];
    $102 = +HEAPF32[$freq>>2];
    $103 = $101 < $102;
    if ($103) {
     $104 = +HEAPF32[$freq>>2];
     $105 = HEAP32[$cfg>>2]|0;
     $106 = (($105) + 244|0);
     $107 = +HEAPF32[$106>>2];
     $108 = $104 < $107;
     if ($108) {
      $109 = HEAP32[$maxband>>2]|0;
      $110 = HEAP32[$band>>2]|0;
      $111 = ($109|0)>($110|0);
      $112 = HEAP32[$maxband>>2]|0;
      $113 = HEAP32[$band>>2]|0;
      $114 = $111 ? $112 : $113;
      HEAP32[$maxband>>2] = $114;
     }
    }
    $115 = HEAP32[$band>>2]|0;
    $116 = (($115) + 1)|0;
    HEAP32[$band>>2] = $116;
   }
   $117 = HEAP32[$highpass_band>>2]|0;
   $118 = (+($117|0));
   $119 = $118 / 31.0;
   $120 = $119;
   $121 = HEAP32[$cfg>>2]|0;
   $122 = (($121) + 240|0);
   HEAPF32[$122>>2] = $120;
   $123 = HEAP32[$maxband>>2]|0;
   $124 = ($123|0)==(-1);
   if ($124) {
    $125 = HEAP32[$highpass_band>>2]|0;
    $126 = (+($125|0));
    $127 = $126 + 0.75;
    $128 = $127 / 31.0;
    $129 = $128;
    $130 = HEAP32[$cfg>>2]|0;
    $131 = (($130) + 244|0);
    HEAPF32[$131>>2] = $129;
    break;
   } else {
    $132 = HEAP32[$maxband>>2]|0;
    $133 = (+($132|0));
    $134 = $133 + 0.75;
    $135 = $134 / 31.0;
    $136 = $135;
    $137 = HEAP32[$cfg>>2]|0;
    $138 = (($137) + 244|0);
    HEAPF32[$138>>2] = $136;
    break;
   }
  }
 } while(0);
 HEAP32[$band>>2] = 0;
 while(1) {
  $139 = HEAP32[$band>>2]|0;
  $140 = ($139|0)<(32);
  if (!($140)) {
   break;
  }
  $141 = HEAP32[$band>>2]|0;
  $142 = (+($141|0));
  $143 = $142 / 31.0;
  HEAPF32[$freq>>2] = $143;
  $144 = HEAP32[$cfg>>2]|0;
  $145 = (($144) + 244|0);
  $146 = +HEAPF32[$145>>2];
  $147 = HEAP32[$cfg>>2]|0;
  $148 = (($147) + 240|0);
  $149 = +HEAPF32[$148>>2];
  $150 = $146 > $149;
  if ($150) {
   $151 = HEAP32[$cfg>>2]|0;
   $152 = (($151) + 244|0);
   $153 = +HEAPF32[$152>>2];
   $154 = +HEAPF32[$freq>>2];
   $155 = $153 - $154;
   $156 = $155;
   $157 = HEAP32[$cfg>>2]|0;
   $158 = (($157) + 244|0);
   $159 = +HEAPF32[$158>>2];
   $160 = HEAP32[$cfg>>2]|0;
   $161 = (($160) + 240|0);
   $162 = +HEAPF32[$161>>2];
   $163 = $159 - $162;
   $164 = $163;
   $165 = $164 + 9.99999999999999945153E-21;
   $166 = $156 / $165;
   $167 = $166;
   $168 = (+_filter_coef($167));
   HEAPF32[$fc1>>2] = $168;
  } else {
   HEAPF32[$fc1>>2] = 1.0;
  }
  $169 = HEAP32[$cfg>>2]|0;
  $170 = (($169) + 236|0);
  $171 = +HEAPF32[$170>>2];
  $172 = HEAP32[$cfg>>2]|0;
  $173 = (($172) + 232|0);
  $174 = +HEAPF32[$173>>2];
  $175 = $171 > $174;
  if ($175) {
   $176 = +HEAPF32[$freq>>2];
   $177 = HEAP32[$cfg>>2]|0;
   $178 = (($177) + 232|0);
   $179 = +HEAPF32[$178>>2];
   $180 = $176 - $179;
   $181 = $180;
   $182 = HEAP32[$cfg>>2]|0;
   $183 = (($182) + 236|0);
   $184 = +HEAPF32[$183>>2];
   $185 = HEAP32[$cfg>>2]|0;
   $186 = (($185) + 232|0);
   $187 = +HEAPF32[$186>>2];
   $188 = $184 - $187;
   $189 = $188;
   $190 = $189 + 9.99999999999999945153E-21;
   $191 = $181 / $190;
   $192 = $191;
   $193 = (+_filter_coef($192));
   HEAPF32[$fc2>>2] = $193;
  } else {
   HEAPF32[$fc2>>2] = 1.0;
  }
  $194 = +HEAPF32[$fc1>>2];
  $195 = +HEAPF32[$fc2>>2];
  $196 = $194 * $195;
  $197 = HEAP32[$band>>2]|0;
  $198 = HEAP32[$0>>2]|0;
  $199 = (($198) + 27824|0);
  $200 = (($199) + 9216|0);
  $201 = (($200) + ($197<<2)|0);
  HEAPF32[$201>>2] = $196;
  $202 = HEAP32[$band>>2]|0;
  $203 = (($202) + 1)|0;
  HEAP32[$band>>2] = $203;
 }
 STACKTOP = sp;return;
}
function _lame_init_qval($gfp) {
 $gfp = $gfp|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $cfg = 0, $gfc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp + 8|0;
 $gfc = sp + 4|0;
 $cfg = sp;
 HEAP32[$0>>2] = $gfp;
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 288|0);
 $3 = HEAP32[$2>>2]|0;
 HEAP32[$gfc>>2] = $3;
 $4 = HEAP32[$gfc>>2]|0;
 $5 = (($4) + 16|0);
 HEAP32[$cfg>>2] = $5;
 $6 = HEAP32[$0>>2]|0;
 $7 = (($6) + 44|0);
 $8 = HEAP32[$7>>2]|0;
 switch ($8|0) {
 case 4:  {
  $81 = HEAP32[$cfg>>2]|0;
  $82 = (($81) + 12|0);
  $83 = HEAP32[$82>>2]|0;
  $84 = ($83|0)==(0);
  if ($84) {
   $85 = HEAP32[$cfg>>2]|0;
   $86 = (($85) + 12|0);
   HEAP32[$86>>2] = 1;
  }
  $87 = HEAP32[$cfg>>2]|0;
  $88 = (($87) + 24|0);
  HEAP32[$88>>2] = 0;
  $89 = HEAP32[$cfg>>2]|0;
  $90 = (($89) + 28|0);
  HEAP32[$90>>2] = 0;
  $91 = HEAP32[$cfg>>2]|0;
  $92 = (($91) + 16|0);
  $93 = HEAP32[$92>>2]|0;
  $94 = ($93|0)==(-1);
  if ($94) {
   $95 = HEAP32[$cfg>>2]|0;
   $96 = (($95) + 16|0);
   HEAP32[$96>>2] = 1;
  }
  $97 = HEAP32[$cfg>>2]|0;
  $98 = (($97) + 20|0);
  HEAP32[$98>>2] = 1;
  $99 = HEAP32[$cfg>>2]|0;
  $100 = (($99) + 32|0);
  HEAP32[$100>>2] = 0;
  STACKTOP = sp;return;
  break;
 }
 case 5:  {
  $61 = HEAP32[$cfg>>2]|0;
  $62 = (($61) + 12|0);
  $63 = HEAP32[$62>>2]|0;
  $64 = ($63|0)==(0);
  if ($64) {
   $65 = HEAP32[$cfg>>2]|0;
   $66 = (($65) + 12|0);
   HEAP32[$66>>2] = 1;
  }
  $67 = HEAP32[$cfg>>2]|0;
  $68 = (($67) + 24|0);
  HEAP32[$68>>2] = 0;
  $69 = HEAP32[$cfg>>2]|0;
  $70 = (($69) + 28|0);
  HEAP32[$70>>2] = 0;
  $71 = HEAP32[$cfg>>2]|0;
  $72 = (($71) + 16|0);
  $73 = HEAP32[$72>>2]|0;
  $74 = ($73|0)==(-1);
  if ($74) {
   $75 = HEAP32[$cfg>>2]|0;
   $76 = (($75) + 16|0);
   HEAP32[$76>>2] = 1;
  }
  $77 = HEAP32[$cfg>>2]|0;
  $78 = (($77) + 20|0);
  HEAP32[$78>>2] = 0;
  $79 = HEAP32[$cfg>>2]|0;
  $80 = (($79) + 32|0);
  HEAP32[$80>>2] = 0;
  STACKTOP = sp;return;
  break;
 }
 case 0:  {
  $177 = HEAP32[$cfg>>2]|0;
  $178 = (($177) + 12|0);
  $179 = HEAP32[$178>>2]|0;
  $180 = ($179|0)==(0);
  if ($180) {
   $181 = HEAP32[$cfg>>2]|0;
   $182 = (($181) + 12|0);
   HEAP32[$182>>2] = 1;
  }
  $183 = HEAP32[$gfc>>2]|0;
  $184 = (($183) + 84768|0);
  $185 = (($184) + 328|0);
  $186 = HEAP32[$185>>2]|0;
  $187 = ($186|0)==(0);
  if ($187) {
   $188 = HEAP32[$gfc>>2]|0;
   $189 = (($188) + 84768|0);
   $190 = (($189) + 328|0);
   HEAP32[$190>>2] = 2;
  }
  $191 = HEAP32[$cfg>>2]|0;
  $192 = (($191) + 24|0);
  HEAP32[$192>>2] = 2;
  $193 = HEAP32[$cfg>>2]|0;
  $194 = (($193) + 28|0);
  HEAP32[$194>>2] = 1;
  $195 = HEAP32[$cfg>>2]|0;
  $196 = (($195) + 16|0);
  $197 = HEAP32[$196>>2]|0;
  $198 = ($197|0)==(-1);
  if ($198) {
   $199 = HEAP32[$cfg>>2]|0;
   $200 = (($199) + 16|0);
   HEAP32[$200>>2] = 1;
  }
  $201 = HEAP32[$cfg>>2]|0;
  $202 = (($201) + 20|0);
  HEAP32[$202>>2] = 1;
  $203 = HEAP32[$cfg>>2]|0;
  $204 = (($203) + 32|0);
  HEAP32[$204>>2] = 1;
  STACKTOP = sp;return;
  break;
 }
 case 7:  {
  break;
 }
 case 1:  {
  $149 = HEAP32[$cfg>>2]|0;
  $150 = (($149) + 12|0);
  $151 = HEAP32[$150>>2]|0;
  $152 = ($151|0)==(0);
  if ($152) {
   $153 = HEAP32[$cfg>>2]|0;
   $154 = (($153) + 12|0);
   HEAP32[$154>>2] = 1;
  }
  $155 = HEAP32[$gfc>>2]|0;
  $156 = (($155) + 84768|0);
  $157 = (($156) + 328|0);
  $158 = HEAP32[$157>>2]|0;
  $159 = ($158|0)==(0);
  if ($159) {
   $160 = HEAP32[$gfc>>2]|0;
   $161 = (($160) + 84768|0);
   $162 = (($161) + 328|0);
   HEAP32[$162>>2] = 2;
  }
  $163 = HEAP32[$cfg>>2]|0;
  $164 = (($163) + 24|0);
  HEAP32[$164>>2] = 2;
  $165 = HEAP32[$cfg>>2]|0;
  $166 = (($165) + 28|0);
  HEAP32[$166>>2] = 1;
  $167 = HEAP32[$cfg>>2]|0;
  $168 = (($167) + 16|0);
  $169 = HEAP32[$168>>2]|0;
  $170 = ($169|0)==(-1);
  if ($170) {
   $171 = HEAP32[$cfg>>2]|0;
   $172 = (($171) + 16|0);
   HEAP32[$172>>2] = 1;
  }
  $173 = HEAP32[$cfg>>2]|0;
  $174 = (($173) + 20|0);
  HEAP32[$174>>2] = 1;
  $175 = HEAP32[$cfg>>2]|0;
  $176 = (($175) + 32|0);
  HEAP32[$176>>2] = 0;
  STACKTOP = sp;return;
  break;
 }
 case 6:  {
  $41 = HEAP32[$cfg>>2]|0;
  $42 = (($41) + 12|0);
  $43 = HEAP32[$42>>2]|0;
  $44 = ($43|0)==(0);
  if ($44) {
   $45 = HEAP32[$cfg>>2]|0;
   $46 = (($45) + 12|0);
   HEAP32[$46>>2] = 1;
  }
  $47 = HEAP32[$cfg>>2]|0;
  $48 = (($47) + 24|0);
  HEAP32[$48>>2] = 0;
  $49 = HEAP32[$cfg>>2]|0;
  $50 = (($49) + 28|0);
  HEAP32[$50>>2] = 0;
  $51 = HEAP32[$cfg>>2]|0;
  $52 = (($51) + 16|0);
  $53 = HEAP32[$52>>2]|0;
  $54 = ($53|0)==(-1);
  if ($54) {
   $55 = HEAP32[$cfg>>2]|0;
   $56 = (($55) + 16|0);
   HEAP32[$56>>2] = 1;
  }
  $57 = HEAP32[$cfg>>2]|0;
  $58 = (($57) + 20|0);
  HEAP32[$58>>2] = 0;
  $59 = HEAP32[$cfg>>2]|0;
  $60 = (($59) + 32|0);
  HEAP32[$60>>2] = 0;
  STACKTOP = sp;return;
  break;
 }
 case 3:  {
  $101 = HEAP32[$cfg>>2]|0;
  $102 = (($101) + 12|0);
  $103 = HEAP32[$102>>2]|0;
  $104 = ($103|0)==(0);
  if ($104) {
   $105 = HEAP32[$cfg>>2]|0;
   $106 = (($105) + 12|0);
   HEAP32[$106>>2] = 1;
  }
  $107 = HEAP32[$cfg>>2]|0;
  $108 = (($107) + 24|0);
  HEAP32[$108>>2] = 1;
  $109 = HEAP32[$cfg>>2]|0;
  $110 = (($109) + 28|0);
  HEAP32[$110>>2] = 1;
  $111 = HEAP32[$cfg>>2]|0;
  $112 = (($111) + 16|0);
  $113 = HEAP32[$112>>2]|0;
  $114 = ($113|0)==(-1);
  if ($114) {
   $115 = HEAP32[$cfg>>2]|0;
   $116 = (($115) + 16|0);
   HEAP32[$116>>2] = 1;
  }
  $117 = HEAP32[$cfg>>2]|0;
  $118 = (($117) + 20|0);
  HEAP32[$118>>2] = 1;
  $119 = HEAP32[$cfg>>2]|0;
  $120 = (($119) + 32|0);
  HEAP32[$120>>2] = 0;
  STACKTOP = sp;return;
  break;
 }
 case 8:  {
  $19 = HEAP32[$0>>2]|0;
  $20 = (($19) + 44|0);
  HEAP32[$20>>2] = 7;
  break;
 }
 case 2:  {
  $121 = HEAP32[$cfg>>2]|0;
  $122 = (($121) + 12|0);
  $123 = HEAP32[$122>>2]|0;
  $124 = ($123|0)==(0);
  if ($124) {
   $125 = HEAP32[$cfg>>2]|0;
   $126 = (($125) + 12|0);
   HEAP32[$126>>2] = 1;
  }
  $127 = HEAP32[$gfc>>2]|0;
  $128 = (($127) + 84768|0);
  $129 = (($128) + 328|0);
  $130 = HEAP32[$129>>2]|0;
  $131 = ($130|0)==(0);
  if ($131) {
   $132 = HEAP32[$gfc>>2]|0;
   $133 = (($132) + 84768|0);
   $134 = (($133) + 328|0);
   HEAP32[$134>>2] = 2;
  }
  $135 = HEAP32[$cfg>>2]|0;
  $136 = (($135) + 24|0);
  HEAP32[$136>>2] = 1;
  $137 = HEAP32[$cfg>>2]|0;
  $138 = (($137) + 28|0);
  HEAP32[$138>>2] = 1;
  $139 = HEAP32[$cfg>>2]|0;
  $140 = (($139) + 16|0);
  $141 = HEAP32[$140>>2]|0;
  $142 = ($141|0)==(-1);
  if ($142) {
   $143 = HEAP32[$cfg>>2]|0;
   $144 = (($143) + 16|0);
   HEAP32[$144>>2] = 1;
  }
  $145 = HEAP32[$cfg>>2]|0;
  $146 = (($145) + 20|0);
  HEAP32[$146>>2] = 1;
  $147 = HEAP32[$cfg>>2]|0;
  $148 = (($147) + 32|0);
  HEAP32[$148>>2] = 0;
  STACKTOP = sp;return;
  break;
 }
 default: {
  $9 = HEAP32[$cfg>>2]|0;
  $10 = (($9) + 12|0);
  HEAP32[$10>>2] = 0;
  $11 = HEAP32[$cfg>>2]|0;
  $12 = (($11) + 24|0);
  HEAP32[$12>>2] = 0;
  $13 = HEAP32[$cfg>>2]|0;
  $14 = (($13) + 28|0);
  HEAP32[$14>>2] = 0;
  $15 = HEAP32[$cfg>>2]|0;
  $16 = (($15) + 20|0);
  HEAP32[$16>>2] = 0;
  $17 = HEAP32[$cfg>>2]|0;
  $18 = (($17) + 32|0);
  HEAP32[$18>>2] = 0;
  STACKTOP = sp;return;
 }
 }
 $21 = HEAP32[$cfg>>2]|0;
 $22 = (($21) + 12|0);
 HEAP32[$22>>2] = 0;
 $23 = HEAP32[$cfg>>2]|0;
 $24 = (($23) + 24|0);
 HEAP32[$24>>2] = 0;
 $25 = HEAP32[$cfg>>2]|0;
 $26 = (($25) + 28|0);
 HEAP32[$26>>2] = 0;
 $27 = HEAP32[$cfg>>2]|0;
 $28 = (($27) + 20|0);
 HEAP32[$28>>2] = 0;
 $29 = HEAP32[$cfg>>2]|0;
 $30 = (($29) + 32|0);
 HEAP32[$30>>2] = 0;
 $31 = HEAP32[$0>>2]|0;
 $32 = (($31) + 156|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = ($33|0)==(1);
 if (!($34)) {
  $35 = HEAP32[$0>>2]|0;
  $36 = (($35) + 156|0);
  $37 = HEAP32[$36>>2]|0;
  $38 = ($37|0)==(4);
  if (!($38)) {
   STACKTOP = sp;return;
  }
 }
 $39 = HEAP32[$cfg>>2]|0;
 $40 = (($39) + 32|0);
 HEAP32[$40>>2] = -1;
 STACKTOP = sp;return;
}
function _lame_init_bitstream($gfp) {
 $gfp = $gfp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $gfc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp + 8|0;
 $1 = sp + 4|0;
 $gfc = sp;
 HEAP32[$1>>2] = $gfp;
 $2 = HEAP32[$1>>2]|0;
 $3 = (_is_lame_global_flags_valid($2)|0);
 $4 = ($3|0)!=(0);
 if ($4) {
  $5 = HEAP32[$1>>2]|0;
  $6 = (($5) + 288|0);
  $7 = HEAP32[$6>>2]|0;
  HEAP32[$gfc>>2] = $7;
  $8 = HEAP32[$gfc>>2]|0;
  $9 = ($8|0)!=(0|0);
  if ($9) {
   $10 = HEAP32[$gfc>>2]|0;
   $11 = (($10) + 84040|0);
   $12 = (($11) + 708|0);
   HEAP32[$12>>2] = 0;
   $13 = HEAP32[$1>>2]|0;
   $14 = (($13) + 68|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = ($15|0)!=(0);
   if ($16) {
    $17 = HEAP32[$1>>2]|0;
    (_id3tag_write_v2($17)|0);
   }
   $18 = HEAP32[$gfc>>2]|0;
   $19 = (($18) + 84040|0);
   _memset(($19|0),0,320)|0;
   $20 = HEAP32[$gfc>>2]|0;
   $21 = (($20) + 84040|0);
   $22 = (($21) + 320|0);
   _memset(($22|0),0,384)|0;
   $23 = HEAP32[$gfc>>2]|0;
   $24 = (($23) + 85680|0);
   $25 = (($24) + 4|0);
   HEAPF32[$25>>2] = 0.0;
   $26 = HEAP32[$gfc>>2]|0;
   $27 = (($26) + 16|0);
   $28 = (($27) + 140|0);
   $29 = HEAP32[$28>>2]|0;
   $30 = ($29|0)!=(0);
   if ($30) {
    $31 = HEAP32[$1>>2]|0;
    (_InitVbrTag($31)|0);
   }
   HEAP32[$0>>2] = 0;
   $32 = HEAP32[$0>>2]|0;
   STACKTOP = sp;return ($32|0);
  }
 }
 HEAP32[$0>>2] = -3;
 $32 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($32|0);
}
function _lame_encode_buffer($gfp,$pcm_l,$pcm_r,$nsamples,$mp3buf,$mp3buf_size) {
 $gfp = $gfp|0;
 $pcm_l = $pcm_l|0;
 $pcm_r = $pcm_r|0;
 $nsamples = $nsamples|0;
 $mp3buf = $mp3buf|0;
 $mp3buf_size = $mp3buf_size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = sp + 20|0;
 $1 = sp + 16|0;
 $2 = sp + 12|0;
 $3 = sp + 8|0;
 $4 = sp + 4|0;
 $5 = sp;
 HEAP32[$0>>2] = $gfp;
 HEAP32[$1>>2] = $pcm_l;
 HEAP32[$2>>2] = $pcm_r;
 HEAP32[$3>>2] = $nsamples;
 HEAP32[$4>>2] = $mp3buf;
 HEAP32[$5>>2] = $mp3buf_size;
 $6 = HEAP32[$0>>2]|0;
 $7 = HEAP32[$1>>2]|0;
 $8 = HEAP32[$2>>2]|0;
 $9 = HEAP32[$3>>2]|0;
 $10 = HEAP32[$4>>2]|0;
 $11 = HEAP32[$5>>2]|0;
 $12 = (_lame_encode_buffer_template($6,$7,$8,$9,$10,$11,0,1,1.0)|0);
 STACKTOP = sp;return ($12|0);
}
function _lame_encode_buffer_template($gfp,$buffer_l,$buffer_r,$nsamples,$mp3buf,$mp3buf_size,$pcm_type,$aa,$norm) {
 $gfp = $gfp|0;
 $buffer_l = $buffer_l|0;
 $buffer_r = $buffer_r|0;
 $nsamples = $nsamples|0;
 $mp3buf = $mp3buf|0;
 $mp3buf_size = $mp3buf_size|0;
 $pcm_type = $pcm_type|0;
 $aa = $aa|0;
 $norm = +$norm;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0.0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0.0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cfg = 0, $gfc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $0 = sp + 44|0;
 $1 = sp + 40|0;
 $2 = sp + 36|0;
 $3 = sp + 32|0;
 $4 = sp + 28|0;
 $5 = sp + 24|0;
 $6 = sp + 20|0;
 $7 = sp + 16|0;
 $8 = sp + 12|0;
 $9 = sp + 8|0;
 $gfc = sp + 4|0;
 $cfg = sp;
 HEAP32[$1>>2] = $gfp;
 HEAP32[$2>>2] = $buffer_l;
 HEAP32[$3>>2] = $buffer_r;
 HEAP32[$4>>2] = $nsamples;
 HEAP32[$5>>2] = $mp3buf;
 HEAP32[$6>>2] = $mp3buf_size;
 HEAP32[$7>>2] = $pcm_type;
 HEAP32[$8>>2] = $aa;
 HEAPF32[$9>>2] = $norm;
 $10 = HEAP32[$1>>2]|0;
 $11 = (_is_lame_global_flags_valid($10)|0);
 $12 = ($11|0)!=(0);
 if ($12) {
  $13 = HEAP32[$1>>2]|0;
  $14 = (($13) + 288|0);
  $15 = HEAP32[$14>>2]|0;
  HEAP32[$gfc>>2] = $15;
  $16 = HEAP32[$gfc>>2]|0;
  $17 = (_is_lame_internal_flags_valid($16)|0);
  $18 = ($17|0)!=(0);
  if ($18) {
   $19 = HEAP32[$gfc>>2]|0;
   $20 = (($19) + 16|0);
   HEAP32[$cfg>>2] = $20;
   $21 = HEAP32[$4>>2]|0;
   $22 = ($21|0)==(0);
   if ($22) {
    HEAP32[$0>>2] = 0;
    $54 = HEAP32[$0>>2]|0;
    STACKTOP = sp;return ($54|0);
   }
   $23 = HEAP32[$gfc>>2]|0;
   $24 = HEAP32[$4>>2]|0;
   $25 = (_update_inbuffer_size($23,$24)|0);
   $26 = ($25|0)!=(0);
   if ($26) {
    HEAP32[$0>>2] = -2;
    $54 = HEAP32[$0>>2]|0;
    STACKTOP = sp;return ($54|0);
   }
   $27 = HEAP32[$cfg>>2]|0;
   $28 = (($27) + 52|0);
   $29 = HEAP32[$28>>2]|0;
   $30 = ($29|0)>(1);
   $31 = HEAP32[$2>>2]|0;
   $32 = ($31|0)==(0|0);
   do {
    if ($30) {
     if (!($32)) {
      $33 = HEAP32[$3>>2]|0;
      $34 = ($33|0)==(0|0);
      if (!($34)) {
       $35 = HEAP32[$gfc>>2]|0;
       $36 = HEAP32[$2>>2]|0;
       $37 = HEAP32[$3>>2]|0;
       $38 = HEAP32[$4>>2]|0;
       $39 = HEAP32[$7>>2]|0;
       $40 = HEAP32[$8>>2]|0;
       $41 = +HEAPF32[$9>>2];
       _lame_copy_inbuffer($35,$36,$37,$38,$39,$40,$41);
       break;
      }
     }
     HEAP32[$0>>2] = 0;
     $54 = HEAP32[$0>>2]|0;
     STACKTOP = sp;return ($54|0);
    } else {
     if (!($32)) {
      $42 = HEAP32[$gfc>>2]|0;
      $43 = HEAP32[$2>>2]|0;
      $44 = HEAP32[$2>>2]|0;
      $45 = HEAP32[$4>>2]|0;
      $46 = HEAP32[$7>>2]|0;
      $47 = HEAP32[$8>>2]|0;
      $48 = +HEAPF32[$9>>2];
      _lame_copy_inbuffer($42,$43,$44,$45,$46,$47,$48);
      break;
     }
     HEAP32[$0>>2] = 0;
     $54 = HEAP32[$0>>2]|0;
     STACKTOP = sp;return ($54|0);
    }
   } while(0);
   $49 = HEAP32[$gfc>>2]|0;
   $50 = HEAP32[$4>>2]|0;
   $51 = HEAP32[$5>>2]|0;
   $52 = HEAP32[$6>>2]|0;
   $53 = (_lame_encode_buffer_sample_t($49,$50,$51,$52)|0);
   HEAP32[$0>>2] = $53;
   $54 = HEAP32[$0>>2]|0;
   STACKTOP = sp;return ($54|0);
  }
 }
 HEAP32[$0>>2] = -3;
 $54 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($54|0);
}
function _lame_encode_buffer_ieee_float($gfp,$pcm_l,$pcm_r,$nsamples,$mp3buf,$mp3buf_size) {
 $gfp = $gfp|0;
 $pcm_l = $pcm_l|0;
 $pcm_r = $pcm_r|0;
 $nsamples = $nsamples|0;
 $mp3buf = $mp3buf|0;
 $mp3buf_size = $mp3buf_size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = sp + 20|0;
 $1 = sp + 16|0;
 $2 = sp + 12|0;
 $3 = sp + 8|0;
 $4 = sp + 4|0;
 $5 = sp;
 HEAP32[$0>>2] = $gfp;
 HEAP32[$1>>2] = $pcm_l;
 HEAP32[$2>>2] = $pcm_r;
 HEAP32[$3>>2] = $nsamples;
 HEAP32[$4>>2] = $mp3buf;
 HEAP32[$5>>2] = $mp3buf_size;
 $6 = HEAP32[$0>>2]|0;
 $7 = HEAP32[$1>>2]|0;
 $8 = HEAP32[$2>>2]|0;
 $9 = HEAP32[$3>>2]|0;
 $10 = HEAP32[$4>>2]|0;
 $11 = HEAP32[$5>>2]|0;
 $12 = (_lame_encode_buffer_template($6,$7,$8,$9,$10,$11,3,1,32767.0)|0);
 STACKTOP = sp;return ($12|0);
}
function _save_gain_values($gfc) {
 $gfc = $gfc|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0;
 var $27 = 0, $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0.0, $64 = 0.0, $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0.0, $7 = 0, $70 = 0, $8 = 0, $9 = 0, $RadioGain = 0, $cfg = 0, $rov = 0, $rsv = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = sp + 16|0;
 $cfg = sp + 12|0;
 $rsv = sp + 8|0;
 $rov = sp + 4|0;
 $RadioGain = sp;
 HEAP32[$0>>2] = $gfc;
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 16|0);
 HEAP32[$cfg>>2] = $2;
 $3 = HEAP32[$0>>2]|0;
 $4 = (($3) + 85676|0);
 HEAP32[$rsv>>2] = $4;
 $5 = HEAP32[$0>>2]|0;
 $6 = (($5) + 85680|0);
 HEAP32[$rov>>2] = $6;
 $7 = HEAP32[$cfg>>2]|0;
 $8 = (($7) + 112|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)!=(0);
 do {
  if ($10) {
   $11 = HEAP32[$rsv>>2]|0;
   $12 = HEAP32[$11>>2]|0;
   $13 = (+_GetTitleGain($12));
   HEAPF32[$RadioGain>>2] = $13;
   $14 = +HEAPF32[$RadioGain>>2];
   $15 = $14;
   $16 = (+Math_abs((+$15)));
   $17 = (+Math_abs(-24601.0));
   $18 = $16 > $17;
   $19 = +HEAPF32[$RadioGain>>2];
   $20 = $19 - -24601.0;
   $21 = $20;
   $22 = (+Math_abs((+$21)));
   if ($18) {
    $23 = +HEAPF32[$RadioGain>>2];
    $24 = $23;
    $25 = (+Math_abs((+$24)));
    $26 = $25 * 9.99999997475242707878E-7;
    $27 = $22 <= $26;
    if ($27) {
     label = 6;
    } else {
     label = 5;
    }
   } else {
    $28 = (+Math_abs(-24601.0));
    $29 = $28 * 9.99999997475242707878E-7;
    $30 = $22 <= $29;
    if ($30) {
     label = 6;
    } else {
     label = 5;
    }
   }
   if ((label|0) == 5) {
    $31 = +HEAPF32[$RadioGain>>2];
    $32 = $31;
    $33 = $32 * 10.0;
    $34 = $33 + 0.5;
    $35 = (+Math_floor((+$34)));
    $36 = (~~(($35)));
    $37 = HEAP32[$rov>>2]|0;
    $38 = (($37) + 8|0);
    HEAP32[$38>>2] = $36;
    break;
   }
   else if ((label|0) == 6) {
    $39 = HEAP32[$rov>>2]|0;
    $40 = (($39) + 8|0);
    HEAP32[$40>>2] = 0;
    break;
   }
  }
 } while(0);
 $41 = HEAP32[$cfg>>2]|0;
 $42 = (($41) + 116|0);
 $43 = HEAP32[$42>>2]|0;
 $44 = ($43|0)!=(0);
 if (!($44)) {
  STACKTOP = sp;return;
 }
 $45 = HEAP32[$rov>>2]|0;
 $46 = (($45) + 4|0);
 $47 = +HEAPF32[$46>>2];
 $48 = $47;
 $49 = $48 / 32767.0;
 $50 = (+_log10((+$49)));
 $51 = $50 * 20.0;
 $52 = $51 * 10.0;
 $53 = (+Math_ceil((+$52)));
 $54 = (~~(($53)));
 $55 = HEAP32[$rov>>2]|0;
 $56 = (($55) + 12|0);
 HEAP32[$56>>2] = $54;
 $57 = HEAP32[$rov>>2]|0;
 $58 = (($57) + 12|0);
 $59 = HEAP32[$58>>2]|0;
 $60 = ($59|0)>(0);
 $61 = HEAP32[$rov>>2]|0;
 if ($60) {
  $62 = (($61) + 4|0);
  $63 = +HEAPF32[$62>>2];
  $64 = 32767.0 / $63;
  $65 = $64 * 100.0;
  $66 = $65;
  $67 = (+Math_floor((+$66)));
  $68 = $67 / 100.0;
  $69 = $68;
  $70 = HEAP32[$rov>>2]|0;
  HEAPF32[$70>>2] = $69;
  STACKTOP = sp;return;
 } else {
  HEAPF32[$61>>2] = -1.0;
  STACKTOP = sp;return;
 }
}
function _lame_encode_flush($gfp,$mp3buffer,$mp3buffer_size) {
 $gfp = $gfp|0;
 $mp3buffer = $mp3buffer|0;
 $mp3buffer_size = $mp3buffer_size|0;
 var $$ = 0, $$$ = 0, $$1 = 0, $$2 = 0, $$3 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0;
 var $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0;
 var $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0;
 var $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0.0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0, $47 = 0.0, $48 = 0.0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0.0, $83 = 0, $84 = 0.0, $85 = 0.0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $buffer = 0, $bunch = 0, $cfg = 0, $end_padding = 0, $esv = 0, $frame_num = 0, $frames_left = 0, $gfc = 0, $imp3 = 0, $is_resampling_necessary = 0, $mf_needed = 0, $mp3buffer_size_remaining = 0, $mp3count = 0;
 var $pcm_samples_per_frame = 0, $resample_ratio = 0, $samples_to_encode = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 4688|0;
 $0 = sp + 76|0;
 $1 = sp + 72|0;
 $2 = sp + 68|0;
 $3 = sp + 64|0;
 $gfc = sp + 60|0;
 $cfg = sp + 56|0;
 $esv = sp + 52|0;
 $buffer = sp + 80|0;
 $imp3 = sp + 48|0;
 $mp3count = sp + 44|0;
 $mp3buffer_size_remaining = sp + 40|0;
 $end_padding = sp + 36|0;
 $frames_left = sp + 32|0;
 $samples_to_encode = sp + 28|0;
 $pcm_samples_per_frame = sp + 24|0;
 $mf_needed = sp + 20|0;
 $is_resampling_necessary = sp + 16|0;
 $resample_ratio = sp;
 $frame_num = sp + 12|0;
 $bunch = sp + 8|0;
 HEAP32[$1>>2] = $gfp;
 HEAP32[$2>>2] = $mp3buffer;
 HEAP32[$3>>2] = $mp3buffer_size;
 HEAP32[$imp3>>2] = 0;
 HEAPF64[$resample_ratio>>3] = 1.0;
 $4 = HEAP32[$1>>2]|0;
 $5 = (_is_lame_global_flags_valid($4)|0);
 $6 = ($5|0)!=(0);
 if (!($6)) {
  HEAP32[$0>>2] = -3;
  $161 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($161|0);
 }
 $7 = HEAP32[$1>>2]|0;
 $8 = (($7) + 288|0);
 $9 = HEAP32[$8>>2]|0;
 HEAP32[$gfc>>2] = $9;
 $10 = HEAP32[$gfc>>2]|0;
 $11 = (_is_lame_internal_flags_valid($10)|0);
 $12 = ($11|0)!=(0);
 if (!($12)) {
  HEAP32[$0>>2] = -3;
  $161 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($161|0);
 }
 $13 = HEAP32[$gfc>>2]|0;
 $14 = (($13) + 16|0);
 HEAP32[$cfg>>2] = $14;
 $15 = HEAP32[$gfc>>2]|0;
 $16 = (($15) + 27824|0);
 HEAP32[$esv>>2] = $16;
 $17 = HEAP32[$esv>>2]|0;
 $18 = (($17) + 56208|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = ($19|0)<(1);
 if ($20) {
  HEAP32[$0>>2] = 0;
  $161 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($161|0);
 }
 $21 = HEAP32[$cfg>>2]|0;
 $22 = (($21) + 60|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = ($23*576)|0;
 HEAP32[$pcm_samples_per_frame>>2] = $24;
 $25 = HEAP32[$cfg>>2]|0;
 $26 = (_calcNeeded($25)|0);
 HEAP32[$mf_needed>>2] = $26;
 $27 = HEAP32[$esv>>2]|0;
 $28 = (($27) + 56208|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = (($29) - 1152)|0;
 HEAP32[$samples_to_encode>>2] = $30;
 _memset(($buffer|0),0,4608)|0;
 HEAP32[$mp3count>>2] = 0;
 $31 = HEAP32[$cfg>>2]|0;
 $32 = (_isResamplingNecessary($31)|0);
 HEAP32[$is_resampling_necessary>>2] = $32;
 $33 = HEAP32[$is_resampling_necessary>>2]|0;
 $34 = ($33|0)!=(0);
 if ($34) {
  $35 = HEAP32[$cfg>>2]|0;
  $36 = (($35) + 44|0);
  $37 = HEAP32[$36>>2]|0;
  $38 = (+($37|0));
  $39 = HEAP32[$cfg>>2]|0;
  $40 = (($39) + 48|0);
  $41 = HEAP32[$40>>2]|0;
  $42 = (+($41|0));
  $43 = $38 / $42;
  HEAPF64[$resample_ratio>>3] = $43;
  $44 = +HEAPF64[$resample_ratio>>3];
  $45 = 16.0 / $44;
  $46 = HEAP32[$samples_to_encode>>2]|0;
  $47 = (+($46|0));
  $48 = $47 + $45;
  $49 = (~~(($48)));
  HEAP32[$samples_to_encode>>2] = $49;
 }
 $50 = HEAP32[$pcm_samples_per_frame>>2]|0;
 $51 = HEAP32[$samples_to_encode>>2]|0;
 $52 = HEAP32[$pcm_samples_per_frame>>2]|0;
 $53 = (($51|0) % ($52|0))&-1;
 $54 = (($50) - ($53))|0;
 HEAP32[$end_padding>>2] = $54;
 $55 = HEAP32[$end_padding>>2]|0;
 $56 = ($55|0)<(576);
 if ($56) {
  $57 = HEAP32[$pcm_samples_per_frame>>2]|0;
  $58 = HEAP32[$end_padding>>2]|0;
  $59 = (($58) + ($57))|0;
  HEAP32[$end_padding>>2] = $59;
 }
 $60 = HEAP32[$end_padding>>2]|0;
 $61 = HEAP32[$gfc>>2]|0;
 $62 = (($61) + 84040|0);
 $63 = (($62) + 724|0);
 HEAP32[$63>>2] = $60;
 $64 = HEAP32[$samples_to_encode>>2]|0;
 $65 = HEAP32[$end_padding>>2]|0;
 $66 = (($64) + ($65))|0;
 $67 = HEAP32[$pcm_samples_per_frame>>2]|0;
 $68 = (($66|0) / ($67|0))&-1;
 HEAP32[$frames_left>>2] = $68;
 while(1) {
  $69 = HEAP32[$frames_left>>2]|0;
  $70 = ($69|0)>(0);
  if (!($70)) {
   break;
  }
  $71 = HEAP32[$imp3>>2]|0;
  $72 = ($71|0)>=(0);
  if (!($72)) {
   break;
  }
  $73 = HEAP32[$gfc>>2]|0;
  $74 = (($73) + 84040|0);
  $75 = (($74) + 708|0);
  $76 = HEAP32[$75>>2]|0;
  HEAP32[$frame_num>>2] = $76;
  $77 = HEAP32[$mf_needed>>2]|0;
  $78 = HEAP32[$esv>>2]|0;
  $79 = (($78) + 56212|0);
  $80 = HEAP32[$79>>2]|0;
  $81 = (($77) - ($80))|0;
  HEAP32[$bunch>>2] = $81;
  $82 = +HEAPF64[$resample_ratio>>3];
  $83 = HEAP32[$bunch>>2]|0;
  $84 = (+($83|0));
  $85 = $84 * $82;
  $86 = (~~(($85)));
  HEAP32[$bunch>>2] = $86;
  $87 = HEAP32[$bunch>>2]|0;
  $88 = ($87|0)>(1152);
  $$ = $88 ? 1152 : $86;
  HEAP32[$bunch>>2] = $$;
  $89 = HEAP32[$bunch>>2]|0;
  $90 = ($89|0)<(1);
  $$$ = $90 ? 1 : $$;
  HEAP32[$bunch>>2] = $$$;
  $91 = HEAP32[$3>>2]|0;
  $92 = HEAP32[$mp3count>>2]|0;
  $93 = (($91) - ($92))|0;
  HEAP32[$mp3buffer_size_remaining>>2] = $93;
  $94 = HEAP32[$3>>2]|0;
  $95 = ($94|0)==(0);
  $$1 = $95 ? 0 : $93;
  HEAP32[$mp3buffer_size_remaining>>2] = $$1;
  $96 = HEAP32[$1>>2]|0;
  $97 = (($buffer) + 2304|0);
  $98 = HEAP32[$bunch>>2]|0;
  $99 = HEAP32[$2>>2]|0;
  $100 = HEAP32[$mp3buffer_size_remaining>>2]|0;
  $101 = (_lame_encode_buffer($96,$buffer,$97,$98,$99,$100)|0);
  HEAP32[$imp3>>2] = $101;
  $102 = HEAP32[$imp3>>2]|0;
  $103 = HEAP32[$2>>2]|0;
  $104 = (($103) + ($102)|0);
  HEAP32[$2>>2] = $104;
  $105 = HEAP32[$imp3>>2]|0;
  $106 = HEAP32[$mp3count>>2]|0;
  $107 = (($106) + ($105))|0;
  HEAP32[$mp3count>>2] = $107;
  $108 = HEAP32[$frame_num>>2]|0;
  $109 = HEAP32[$gfc>>2]|0;
  $110 = (($109) + 84040|0);
  $111 = (($110) + 708|0);
  $112 = HEAP32[$111>>2]|0;
  $113 = ($108|0)!=($112|0);
  $114 = $113 ? 1 : 0;
  $115 = HEAP32[$frames_left>>2]|0;
  $116 = (($115) - ($114))|0;
  HEAP32[$frames_left>>2] = $116;
 }
 $117 = HEAP32[$esv>>2]|0;
 $118 = (($117) + 56208|0);
 HEAP32[$118>>2] = 0;
 $119 = HEAP32[$imp3>>2]|0;
 $120 = ($119|0)<(0);
 if ($120) {
  $121 = HEAP32[$imp3>>2]|0;
  HEAP32[$0>>2] = $121;
  $161 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($161|0);
 }
 $122 = HEAP32[$3>>2]|0;
 $123 = HEAP32[$mp3count>>2]|0;
 $124 = (($122) - ($123))|0;
 HEAP32[$mp3buffer_size_remaining>>2] = $124;
 $125 = HEAP32[$3>>2]|0;
 $126 = ($125|0)==(0);
 $$2 = $126 ? 0 : $124;
 HEAP32[$mp3buffer_size_remaining>>2] = $$2;
 $127 = HEAP32[$gfc>>2]|0;
 _flush_bitstream($127);
 $128 = HEAP32[$gfc>>2]|0;
 $129 = HEAP32[$2>>2]|0;
 $130 = HEAP32[$mp3buffer_size_remaining>>2]|0;
 $131 = (_copy_buffer($128,$129,$130,1)|0);
 HEAP32[$imp3>>2] = $131;
 $132 = HEAP32[$gfc>>2]|0;
 _save_gain_values($132);
 $133 = HEAP32[$imp3>>2]|0;
 $134 = ($133|0)<(0);
 $135 = HEAP32[$imp3>>2]|0;
 if ($134) {
  HEAP32[$0>>2] = $135;
  $161 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($161|0);
 }
 $136 = HEAP32[$2>>2]|0;
 $137 = (($136) + ($135)|0);
 HEAP32[$2>>2] = $137;
 $138 = HEAP32[$imp3>>2]|0;
 $139 = HEAP32[$mp3count>>2]|0;
 $140 = (($139) + ($138))|0;
 HEAP32[$mp3count>>2] = $140;
 $141 = HEAP32[$3>>2]|0;
 $142 = HEAP32[$mp3count>>2]|0;
 $143 = (($141) - ($142))|0;
 HEAP32[$mp3buffer_size_remaining>>2] = $143;
 $144 = HEAP32[$3>>2]|0;
 $145 = ($144|0)==(0);
 $$3 = $145 ? 0 : $143;
 HEAP32[$mp3buffer_size_remaining>>2] = $$3;
 $146 = HEAP32[$1>>2]|0;
 $147 = (($146) + 68|0);
 $148 = HEAP32[$147>>2]|0;
 $149 = ($148|0)!=(0);
 do {
  if ($149) {
   $150 = HEAP32[$1>>2]|0;
   (_id3tag_write_v1($150)|0);
   $151 = HEAP32[$gfc>>2]|0;
   $152 = HEAP32[$2>>2]|0;
   $153 = HEAP32[$mp3buffer_size_remaining>>2]|0;
   $154 = (_copy_buffer($151,$152,$153,0)|0);
   HEAP32[$imp3>>2] = $154;
   $155 = HEAP32[$imp3>>2]|0;
   $156 = ($155|0)<(0);
   $157 = HEAP32[$imp3>>2]|0;
   if (!($156)) {
    $158 = HEAP32[$mp3count>>2]|0;
    $159 = (($158) + ($157))|0;
    HEAP32[$mp3count>>2] = $159;
    break;
   }
   HEAP32[$0>>2] = $157;
   $161 = HEAP32[$0>>2]|0;
   STACKTOP = sp;return ($161|0);
  }
 } while(0);
 $160 = HEAP32[$mp3count>>2]|0;
 HEAP32[$0>>2] = $160;
 $161 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($161|0);
}
function _calcNeeded($cfg) {
 $cfg = $cfg|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $mf_needed = 0;
 var $pcm_samples_per_frame = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp + 8|0;
 $mf_needed = sp + 4|0;
 $pcm_samples_per_frame = sp;
 HEAP32[$0>>2] = $cfg;
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 60|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3*576)|0;
 HEAP32[$pcm_samples_per_frame>>2] = $4;
 $5 = HEAP32[$pcm_samples_per_frame>>2]|0;
 $6 = (1024 + ($5))|0;
 $7 = (($6) - 272)|0;
 HEAP32[$mf_needed>>2] = $7;
 $8 = HEAP32[$mf_needed>>2]|0;
 $9 = HEAP32[$pcm_samples_per_frame>>2]|0;
 $10 = (512 + ($9))|0;
 $11 = (($10) - 32)|0;
 $12 = ($8|0)>($11|0);
 if ($12) {
  $13 = HEAP32[$mf_needed>>2]|0;
  $17 = $13;
  HEAP32[$mf_needed>>2] = $17;
  $18 = HEAP32[$mf_needed>>2]|0;
  STACKTOP = sp;return ($18|0);
 } else {
  $14 = HEAP32[$pcm_samples_per_frame>>2]|0;
  $15 = (512 + ($14))|0;
  $16 = (($15) - 32)|0;
  $17 = $16;
  HEAP32[$mf_needed>>2] = $17;
  $18 = HEAP32[$mf_needed>>2]|0;
  STACKTOP = sp;return ($18|0);
 }
 return 0|0;
}
function _lame_close($gfp) {
 $gfp = $gfp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $gfc = 0, $ret = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp + 8|0;
 $ret = sp + 4|0;
 $gfc = sp;
 HEAP32[$0>>2] = $gfp;
 HEAP32[$ret>>2] = 0;
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)!=(0|0);
 if (!($2)) {
  $28 = HEAP32[$ret>>2]|0;
  STACKTOP = sp;return ($28|0);
 }
 $3 = HEAP32[$0>>2]|0;
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(-487877);
 if (!($5)) {
  $28 = HEAP32[$ret>>2]|0;
  STACKTOP = sp;return ($28|0);
 }
 $6 = HEAP32[$0>>2]|0;
 $7 = (($6) + 288|0);
 $8 = HEAP32[$7>>2]|0;
 HEAP32[$gfc>>2] = $8;
 $9 = HEAP32[$0>>2]|0;
 HEAP32[$9>>2] = 0;
 $10 = HEAP32[$gfc>>2]|0;
 $11 = (0|0)==($10|0);
 if ($11) {
  label = 5;
 } else {
  $12 = HEAP32[$gfc>>2]|0;
  $13 = HEAP32[$12>>2]|0;
  $14 = ($13|0)!=(-487877);
  if ($14) {
   label = 5;
  }
 }
 if ((label|0) == 5) {
  HEAP32[$ret>>2] = -3;
 }
 $15 = HEAP32[$gfc>>2]|0;
 $16 = (0|0)!=($15|0);
 if ($16) {
  $17 = HEAP32[$gfc>>2]|0;
  HEAP32[$17>>2] = 0;
  $18 = HEAP32[$gfc>>2]|0;
  _freegfc($18);
  $19 = HEAP32[$0>>2]|0;
  $20 = (($19) + 288|0);
  HEAP32[$20>>2] = 0;
 }
 $21 = HEAP32[$0>>2]|0;
 $22 = (($21) + 284|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = ($23|0)!=(0);
 if (!($24)) {
  $28 = HEAP32[$ret>>2]|0;
  STACKTOP = sp;return ($28|0);
 }
 $25 = HEAP32[$0>>2]|0;
 $26 = (($25) + 284|0);
 HEAP32[$26>>2] = 0;
 $27 = HEAP32[$0>>2]|0;
 _free($27);
 $28 = HEAP32[$ret>>2]|0;
 STACKTOP = sp;return ($28|0);
}
function _lame_init() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $gfp = 0, $ret = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp + 8|0;
 $gfp = sp + 4|0;
 $ret = sp;
 _init_log_table();
 $1 = (_calloc(1,304)|0);
 HEAP32[$gfp>>2] = $1;
 $2 = HEAP32[$gfp>>2]|0;
 $3 = ($2|0)==(0|0);
 do {
  if ($3) {
   HEAP32[$0>>2] = 0;
  } else {
   $4 = HEAP32[$gfp>>2]|0;
   $5 = (_lame_init_old($4)|0);
   HEAP32[$ret>>2] = $5;
   $6 = HEAP32[$ret>>2]|0;
   $7 = ($6|0)!=(0);
   $8 = HEAP32[$gfp>>2]|0;
   if ($7) {
    _free($8);
    HEAP32[$0>>2] = 0;
    break;
   } else {
    $9 = (($8) + 284|0);
    HEAP32[$9>>2] = 1;
    $10 = HEAP32[$gfp>>2]|0;
    HEAP32[$0>>2] = $10;
    break;
   }
  }
 } while(0);
 $11 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($11|0);
}
function _lame_init_old($gfp) {
 $gfp = $gfp|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $cfg = 0, $gfc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp + 12|0;
 $1 = sp + 8|0;
 $gfc = sp + 4|0;
 $cfg = sp;
 HEAP32[$1>>2] = $gfp;
 _disable_FPE();
 $2 = HEAP32[$1>>2]|0;
 _memset(($2|0),0,304)|0;
 $3 = HEAP32[$1>>2]|0;
 HEAP32[$3>>2] = -487877;
 $4 = (_calloc(1,85840)|0);
 $5 = HEAP32[$1>>2]|0;
 $6 = (($5) + 288|0);
 HEAP32[$6>>2] = $4;
 HEAP32[$gfc>>2] = $4;
 $7 = (0|0)==($4|0);
 if ($7) {
  HEAP32[$0>>2] = -1;
  $149 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($149|0);
 } else {
  $8 = HEAP32[$gfc>>2]|0;
  $9 = (($8) + 16|0);
  HEAP32[$cfg>>2] = $9;
  $10 = HEAP32[$1>>2]|0;
  $11 = (($10) + 124|0);
  HEAP32[$11>>2] = 2;
  $12 = HEAP32[$1>>2]|0;
  $13 = (($12) + 48|0);
  HEAP32[$13>>2] = 4;
  $14 = HEAP32[$1>>2]|0;
  $15 = (($14) + 108|0);
  HEAP32[$15>>2] = 1;
  $16 = HEAP32[$1>>2]|0;
  $17 = (($16) + 12|0);
  HEAP32[$17>>2] = 44100;
  $18 = HEAP32[$1>>2]|0;
  $19 = (($18) + 8|0);
  HEAP32[$19>>2] = 2;
  $20 = HEAP32[$1>>2]|0;
  $21 = (($20) + 4|0);
  HEAP32[$21>>2] = -1;
  $22 = HEAP32[$1>>2]|0;
  $23 = (($22) + 36|0);
  HEAP32[$23>>2] = 1;
  $24 = HEAP32[$1>>2]|0;
  $25 = (($24) + 44|0);
  HEAP32[$25>>2] = -1;
  $26 = HEAP32[$1>>2]|0;
  $27 = (($26) + 240|0);
  HEAP32[$27>>2] = -1;
  $28 = HEAP32[$1>>2]|0;
  $29 = (($28) + 88|0);
  HEAP32[$29>>2] = -1;
  $30 = HEAP32[$1>>2]|0;
  $31 = (($30) + 184|0);
  HEAP32[$31>>2] = 0;
  $32 = HEAP32[$1>>2]|0;
  $33 = (($32) + 188|0);
  HEAP32[$33>>2] = 0;
  $34 = HEAP32[$1>>2]|0;
  $35 = (($34) + 192|0);
  HEAP32[$35>>2] = -1;
  $36 = HEAP32[$1>>2]|0;
  $37 = (($36) + 196|0);
  HEAP32[$37>>2] = -1;
  $38 = HEAP32[$1>>2]|0;
  $39 = (($38) + 156|0);
  HEAP32[$39>>2] = 0;
  $40 = HEAP32[$1>>2]|0;
  $41 = (($40) + 164|0);
  HEAP32[$41>>2] = 4;
  $42 = HEAP32[$1>>2]|0;
  $43 = (($42) + 224|0);
  HEAPF32[$43>>2] = -1.0;
  $44 = HEAP32[$1>>2]|0;
  $45 = (($44) + 168|0);
  HEAP32[$45>>2] = 128;
  $46 = HEAP32[$1>>2]|0;
  $47 = (($46) + 172|0);
  HEAP32[$47>>2] = 0;
  $48 = HEAP32[$1>>2]|0;
  $49 = (($48) + 176|0);
  HEAP32[$49>>2] = 0;
  $50 = HEAP32[$1>>2]|0;
  $51 = (($50) + 180|0);
  HEAP32[$51>>2] = 0;
  $52 = HEAP32[$cfg>>2]|0;
  $53 = (($52) + 96|0);
  HEAP32[$53>>2] = 1;
  $54 = HEAP32[$cfg>>2]|0;
  $55 = (($54) + 100|0);
  HEAP32[$55>>2] = 13;
  $56 = HEAP32[$1>>2]|0;
  $57 = (($56) + 132|0);
  HEAP32[$57>>2] = -1;
  $58 = HEAP32[$1>>2]|0;
  $59 = (($58) + 136|0);
  HEAP32[$59>>2] = -1;
  $60 = HEAP32[$1>>2]|0;
  $61 = (($60) + 252|0);
  HEAPF32[$61>>2] = -1.0;
  $62 = HEAP32[$gfc>>2]|0;
  $63 = (($62) + 84768|0);
  $64 = (($63) + 152|0);
  HEAP32[$64>>2] = 180;
  $65 = HEAP32[$gfc>>2]|0;
  $66 = (($65) + 84768|0);
  $67 = (($66) + 152|0);
  $68 = (($67) + 4|0);
  HEAP32[$68>>2] = 180;
  $69 = HEAP32[$gfc>>2]|0;
  $70 = (($69) + 84768|0);
  $71 = (($70) + 160|0);
  HEAP32[$71>>2] = 4;
  $72 = HEAP32[$gfc>>2]|0;
  $73 = (($72) + 84768|0);
  $74 = (($73) + 160|0);
  $75 = (($74) + 4|0);
  HEAP32[$75>>2] = 4;
  $76 = HEAP32[$gfc>>2]|0;
  $77 = (($76) + 84768|0);
  $78 = (($77) + 140|0);
  HEAPF32[$78>>2] = 1.0;
  $79 = HEAP32[$1>>2]|0;
  $80 = (($79) + 264|0);
  HEAPF32[$80>>2] = -1.0;
  $81 = HEAP32[$1>>2]|0;
  $82 = (($81) + 268|0);
  HEAPF32[$82>>2] = -1.0;
  $83 = HEAP32[$1>>2]|0;
  $84 = (($83) + 20|0);
  HEAPF32[$84>>2] = 1.0;
  $85 = HEAP32[$1>>2]|0;
  $86 = (($85) + 24|0);
  HEAPF32[$86>>2] = 1.0;
  $87 = HEAP32[$1>>2]|0;
  $88 = (($87) + 28|0);
  HEAPF32[$88>>2] = 1.0;
  $89 = HEAP32[$1>>2]|0;
  $90 = (($89) + 232|0);
  HEAP32[$90>>2] = -1;
  $91 = HEAP32[$1>>2]|0;
  $92 = (($91) + 220|0);
  HEAP32[$92>>2] = -1;
  $93 = HEAP32[$1>>2]|0;
  $94 = (($93) + 236|0);
  HEAPF32[$94>>2] = 0.0;
  $95 = HEAP32[$1>>2]|0;
  $96 = (($95) + 244|0);
  HEAP32[$96>>2] = -1;
  $97 = HEAP32[$1>>2]|0;
  $98 = (($97) + 248|0);
  HEAPF32[$98>>2] = -1.0;
  $99 = HEAP32[$gfc>>2]|0;
  $100 = (($99) + 27824|0);
  $101 = (($100) + 56208|0);
  HEAP32[$101>>2] = 1728;
  $102 = HEAP32[$gfc>>2]|0;
  $103 = (($102) + 84040|0);
  $104 = (($103) + 724|0);
  HEAP32[$104>>2] = 0;
  $105 = HEAP32[$gfc>>2]|0;
  $106 = (($105) + 27824|0);
  $107 = (($106) + 56212|0);
  HEAP32[$107>>2] = 528;
  $108 = HEAP32[$1>>2]|0;
  $109 = (($108) + 60|0);
  HEAP32[$109>>2] = 0;
  $110 = HEAP32[$1>>2]|0;
  $111 = (($110) + 64|0);
  HEAP32[$111>>2] = 0;
  $112 = HEAP32[$gfc>>2]|0;
  $113 = (($112) + 16|0);
  $114 = (($113) + 120|0);
  HEAP32[$114>>2] = 0;
  $115 = HEAP32[$gfc>>2]|0;
  $116 = (($115) + 16|0);
  $117 = (($116) + 112|0);
  HEAP32[$117>>2] = 0;
  $118 = HEAP32[$gfc>>2]|0;
  $119 = (($118) + 16|0);
  $120 = (($119) + 116|0);
  HEAP32[$120>>2] = 0;
  $121 = HEAP32[$gfc>>2]|0;
  $122 = (($121) + 85680|0);
  $123 = (($122) + 8|0);
  HEAP32[$123>>2] = 0;
  $124 = HEAP32[$gfc>>2]|0;
  $125 = (($124) + 85680|0);
  $126 = (($125) + 12|0);
  HEAP32[$126>>2] = 0;
  $127 = HEAP32[$gfc>>2]|0;
  $128 = (($127) + 85680|0);
  HEAPF32[$128>>2] = -1.0;
  $129 = HEAP32[$1>>2]|0;
  $130 = (($129) + 292|0);
  HEAP32[$130>>2] = 1;
  $131 = HEAP32[$1>>2]|0;
  $132 = (($131) + 292|0);
  $133 = (($132) + 4|0);
  HEAP32[$133>>2] = 1;
  $134 = HEAP32[$1>>2]|0;
  $135 = (($134) + 292|0);
  $136 = (($135) + 8|0);
  HEAP32[$136>>2] = 1;
  $137 = HEAP32[$1>>2]|0;
  $138 = (($137) + 152|0);
  HEAP32[$138>>2] = 0;
  $139 = HEAP32[$1>>2]|0;
  $140 = (($139) + 68|0);
  HEAP32[$140>>2] = 1;
  $141 = HEAP32[$1>>2]|0;
  $142 = (($141) + 272|0);
  $143 = (($142) + 4|0);
  HEAP32[$143>>2] = 2;
  $144 = HEAP32[$1>>2]|0;
  $145 = (($144) + 272|0);
  $146 = (($145) + 8|0);
  HEAP32[$146>>2] = 2;
  $147 = HEAP32[$1>>2]|0;
  $148 = (($147) + 272|0);
  HEAP32[$148>>2] = 2;
  HEAP32[$0>>2] = 0;
  $149 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($149|0);
 }
 return 0|0;
}
function _update_inbuffer_size($gfc,$nsamples) {
 $gfc = $gfc|0;
 $nsamples = $nsamples|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $7 = 0, $8 = 0, $9 = 0, $esv = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $vararg_buffer = sp;
 $0 = sp + 16|0;
 $1 = sp + 12|0;
 $2 = sp + 8|0;
 $esv = sp + 4|0;
 HEAP32[$1>>2] = $gfc;
 HEAP32[$2>>2] = $nsamples;
 $3 = HEAP32[$1>>2]|0;
 $4 = (($3) + 27824|0);
 HEAP32[$esv>>2] = $4;
 $5 = HEAP32[$esv>>2]|0;
 $6 = (($5) + 24328|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)==(0|0);
 if ($8) {
  label = 3;
 } else {
  $9 = HEAP32[$esv>>2]|0;
  $10 = (($9) + 24324|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = HEAP32[$2>>2]|0;
  $13 = ($11|0)<($12|0);
  if ($13) {
   label = 3;
  }
 }
 if ((label|0) == 3) {
  $14 = HEAP32[$esv>>2]|0;
  $15 = (($14) + 24328|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = ($16|0)!=(0|0);
  if ($17) {
   $18 = HEAP32[$esv>>2]|0;
   $19 = (($18) + 24328|0);
   $20 = HEAP32[$19>>2]|0;
   _free($20);
  }
  $21 = HEAP32[$esv>>2]|0;
  $22 = (($21) + 24332|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = ($23|0)!=(0|0);
  if ($24) {
   $25 = HEAP32[$esv>>2]|0;
   $26 = (($25) + 24332|0);
   $27 = HEAP32[$26>>2]|0;
   _free($27);
  }
  $28 = HEAP32[$2>>2]|0;
  $29 = (_calloc($28,4)|0);
  $30 = HEAP32[$esv>>2]|0;
  $31 = (($30) + 24328|0);
  HEAP32[$31>>2] = $29;
  $32 = HEAP32[$2>>2]|0;
  $33 = (_calloc($32,4)|0);
  $34 = HEAP32[$esv>>2]|0;
  $35 = (($34) + 24332|0);
  HEAP32[$35>>2] = $33;
  $36 = HEAP32[$2>>2]|0;
  $37 = HEAP32[$esv>>2]|0;
  $38 = (($37) + 24324|0);
  HEAP32[$38>>2] = $36;
 }
 $39 = HEAP32[$esv>>2]|0;
 $40 = (($39) + 24328|0);
 $41 = HEAP32[$40>>2]|0;
 $42 = ($41|0)==(0|0);
 if (!($42)) {
  $43 = HEAP32[$esv>>2]|0;
  $44 = (($43) + 24332|0);
  $45 = HEAP32[$44>>2]|0;
  $46 = ($45|0)==(0|0);
  if (!($46)) {
   HEAP32[$0>>2] = 0;
   $68 = HEAP32[$0>>2]|0;
   STACKTOP = sp;return ($68|0);
  }
 }
 $47 = HEAP32[$esv>>2]|0;
 $48 = (($47) + 24328|0);
 $49 = HEAP32[$48>>2]|0;
 $50 = ($49|0)!=(0|0);
 if ($50) {
  $51 = HEAP32[$esv>>2]|0;
  $52 = (($51) + 24328|0);
  $53 = HEAP32[$52>>2]|0;
  _free($53);
 }
 $54 = HEAP32[$esv>>2]|0;
 $55 = (($54) + 24332|0);
 $56 = HEAP32[$55>>2]|0;
 $57 = ($56|0)!=(0|0);
 if ($57) {
  $58 = HEAP32[$esv>>2]|0;
  $59 = (($58) + 24332|0);
  $60 = HEAP32[$59>>2]|0;
  _free($60);
 }
 $61 = HEAP32[$esv>>2]|0;
 $62 = (($61) + 24328|0);
 HEAP32[$62>>2] = 0;
 $63 = HEAP32[$esv>>2]|0;
 $64 = (($63) + 24332|0);
 HEAP32[$64>>2] = 0;
 $65 = HEAP32[$esv>>2]|0;
 $66 = (($65) + 24324|0);
 HEAP32[$66>>2] = 0;
 $67 = HEAP32[$1>>2]|0;
 _lame_errorf($67,6928,$vararg_buffer);
 HEAP32[$0>>2] = -2;
 $68 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($68|0);
}
function _lame_copy_inbuffer($gfc,$l,$r,$nsamples,$pcm_type,$jump,$s) {
 $gfc = $gfc|0;
 $l = $l|0;
 $r = $r|0;
 $nsamples = $nsamples|0;
 $pcm_type = $pcm_type|0;
 $jump = $jump|0;
 $s = +$s;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0.0, $102 = 0.0, $103 = 0.0, $104 = 0.0, $105 = 0.0, $106 = 0, $107 = 0.0, $108 = 0.0, $109 = 0.0, $11 = 0, $110 = 0.0, $111 = 0, $112 = 0.0, $113 = 0.0, $114 = 0.0, $115 = 0;
 var $116 = 0, $117 = 0.0, $118 = 0.0, $119 = 0.0, $12 = 0, $120 = 0.0, $121 = 0, $122 = 0, $123 = 0, $124 = 0.0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0.0, $144 = 0, $145 = 0, $146 = 0.0, $147 = 0.0, $148 = 0.0, $149 = 0.0, $15 = 0, $150 = 0.0, $151 = 0;
 var $152 = 0.0, $153 = 0.0, $154 = 0.0, $155 = 0.0, $156 = 0, $157 = 0.0, $158 = 0.0, $159 = 0.0, $16 = 0, $160 = 0, $161 = 0, $162 = 0.0, $163 = 0.0, $164 = 0.0, $165 = 0.0, $166 = 0, $167 = 0, $168 = 0, $169 = 0.0, $17 = 0.0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0.0, $188 = 0;
 var $189 = 0.0, $19 = 0, $190 = 0.0, $191 = 0.0, $192 = 0.0, $193 = 0.0, $194 = 0, $195 = 0.0, $196 = 0.0, $197 = 0.0, $198 = 0.0, $199 = 0, $2 = 0, $20 = 0.0, $200 = 0.0, $201 = 0.0, $202 = 0.0, $203 = 0, $204 = 0, $205 = 0.0;
 var $206 = 0.0, $207 = 0.0, $208 = 0.0, $209 = 0, $21 = 0.0, $210 = 0, $211 = 0, $212 = 0.0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0.0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0.0, $231 = 0.0, $232 = 0, $233 = 0.0, $234 = 0.0, $235 = 0.0, $236 = 0.0, $237 = 0.0, $238 = 0.0, $239 = 0, $24 = 0, $240 = 0.0, $241 = 0.0;
 var $242 = 0.0, $243 = 0.0, $244 = 0, $245 = 0.0, $246 = 0.0, $247 = 0.0, $248 = 0, $249 = 0, $25 = 0, $250 = 0.0, $251 = 0.0, $252 = 0.0, $253 = 0.0, $254 = 0, $255 = 0, $256 = 0, $257 = 0.0, $258 = 0, $259 = 0, $26 = 0.0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $27 = 0.0, $28 = 0, $29 = 0.0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0.0, $34 = 0.0, $35 = 0, $36 = 0.0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0.0, $42 = 0.0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0.0, $54 = 0;
 var $55 = 0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0, $60 = 0.0, $61 = 0, $62 = 0.0, $63 = 0.0, $64 = 0.0, $65 = 0.0, $66 = 0, $67 = 0.0, $68 = 0.0, $69 = 0.0, $7 = 0, $70 = 0, $71 = 0, $72 = 0.0;
 var $73 = 0.0, $74 = 0.0, $75 = 0.0, $76 = 0, $77 = 0, $78 = 0, $79 = 0.0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0.0, $99 = 0, $bl = 0, $bl1 = 0, $bl15 = 0, $bl22 = 0, $bl8 = 0, $br = 0, $br16 = 0, $br2 = 0, $br23 = 0, $br9 = 0, $cfg = 0;
 var $esv = 0, $i = 0, $i10 = 0, $i17 = 0, $i24 = 0, $i3 = 0, $ib0 = 0, $ib1 = 0, $m = 0, $u = 0, $u13 = 0, $u20 = 0, $u27 = 0, $u6 = 0, $v = 0, $v14 = 0, $v21 = 0, $v28 = 0, $v7 = 0, $xl = 0;
 var $xl11 = 0, $xl18 = 0, $xl25 = 0, $xl4 = 0, $xr = 0, $xr12 = 0, $xr19 = 0, $xr26 = 0, $xr5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208|0;
 $0 = sp + 200|0;
 $1 = sp + 196|0;
 $2 = sp + 192|0;
 $3 = sp + 188|0;
 $4 = sp + 184|0;
 $5 = sp + 180|0;
 $6 = sp + 176|0;
 $cfg = sp + 172|0;
 $esv = sp + 168|0;
 $ib0 = sp + 164|0;
 $ib1 = sp + 160|0;
 $m = sp + 144|0;
 $bl = sp + 136|0;
 $br = sp + 132|0;
 $i = sp + 128|0;
 $xl = sp + 124|0;
 $xr = sp + 120|0;
 $u = sp + 116|0;
 $v = sp + 112|0;
 $bl1 = sp + 108|0;
 $br2 = sp + 104|0;
 $i3 = sp + 100|0;
 $xl4 = sp + 96|0;
 $xr5 = sp + 92|0;
 $u6 = sp + 88|0;
 $v7 = sp + 84|0;
 $bl8 = sp + 80|0;
 $br9 = sp + 76|0;
 $i10 = sp + 72|0;
 $xl11 = sp + 68|0;
 $xr12 = sp + 64|0;
 $u13 = sp + 60|0;
 $v14 = sp + 56|0;
 $bl15 = sp + 52|0;
 $br16 = sp + 48|0;
 $i17 = sp + 44|0;
 $xl18 = sp + 40|0;
 $xr19 = sp + 36|0;
 $u20 = sp + 32|0;
 $v21 = sp + 28|0;
 $bl22 = sp + 24|0;
 $br23 = sp + 20|0;
 $i24 = sp + 16|0;
 $xl25 = sp + 12|0;
 $xr26 = sp + 8|0;
 $u27 = sp + 4|0;
 $v28 = sp;
 HEAP32[$0>>2] = $gfc;
 HEAP32[$1>>2] = $l;
 HEAP32[$2>>2] = $r;
 HEAP32[$3>>2] = $nsamples;
 HEAP32[$4>>2] = $pcm_type;
 HEAP32[$5>>2] = $jump;
 HEAPF32[$6>>2] = $s;
 $7 = HEAP32[$0>>2]|0;
 $8 = (($7) + 16|0);
 HEAP32[$cfg>>2] = $8;
 $9 = HEAP32[$0>>2]|0;
 $10 = (($9) + 27824|0);
 HEAP32[$esv>>2] = $10;
 $11 = HEAP32[$esv>>2]|0;
 $12 = (($11) + 24328|0);
 $13 = HEAP32[$12>>2]|0;
 HEAP32[$ib0>>2] = $13;
 $14 = HEAP32[$esv>>2]|0;
 $15 = (($14) + 24332|0);
 $16 = HEAP32[$15>>2]|0;
 HEAP32[$ib1>>2] = $16;
 $17 = +HEAPF32[$6>>2];
 $18 = HEAP32[$cfg>>2]|0;
 $19 = (($18) + 248|0);
 $20 = +HEAPF32[$19>>2];
 $21 = $17 * $20;
 HEAPF32[$m>>2] = $21;
 $22 = +HEAPF32[$6>>2];
 $23 = HEAP32[$cfg>>2]|0;
 $24 = (($23) + 248|0);
 $25 = (($24) + 4|0);
 $26 = +HEAPF32[$25>>2];
 $27 = $22 * $26;
 $28 = (($m) + 4|0);
 HEAPF32[$28>>2] = $27;
 $29 = +HEAPF32[$6>>2];
 $30 = HEAP32[$cfg>>2]|0;
 $31 = (($30) + 248|0);
 $32 = (($31) + 8|0);
 $33 = +HEAPF32[$32>>2];
 $34 = $29 * $33;
 $35 = (($m) + 8|0);
 HEAPF32[$35>>2] = $34;
 $36 = +HEAPF32[$6>>2];
 $37 = HEAP32[$cfg>>2]|0;
 $38 = (($37) + 248|0);
 $39 = (($38) + 8|0);
 $40 = (($39) + 4|0);
 $41 = +HEAPF32[$40>>2];
 $42 = $36 * $41;
 $43 = (($m) + 8|0);
 $44 = (($43) + 4|0);
 HEAPF32[$44>>2] = $42;
 $45 = HEAP32[$4>>2]|0;
 switch ($45|0) {
 case 1:  {
  $91 = HEAP32[$1>>2]|0;
  HEAP32[$bl1>>2] = $91;
  $92 = HEAP32[$2>>2]|0;
  HEAP32[$br2>>2] = $92;
  HEAP32[$i3>>2] = 0;
  while(1) {
   $93 = HEAP32[$i3>>2]|0;
   $94 = HEAP32[$3>>2]|0;
   $95 = ($93|0)<($94|0);
   if (!($95)) {
    break;
   }
   $96 = HEAP32[$bl1>>2]|0;
   $97 = HEAP32[$96>>2]|0;
   $98 = (+($97|0));
   HEAPF32[$xl4>>2] = $98;
   $99 = HEAP32[$br2>>2]|0;
   $100 = HEAP32[$99>>2]|0;
   $101 = (+($100|0));
   HEAPF32[$xr5>>2] = $101;
   $102 = +HEAPF32[$xl4>>2];
   $103 = +HEAPF32[$m>>2];
   $104 = $102 * $103;
   $105 = +HEAPF32[$xr5>>2];
   $106 = (($m) + 4|0);
   $107 = +HEAPF32[$106>>2];
   $108 = $105 * $107;
   $109 = $104 + $108;
   HEAPF32[$u6>>2] = $109;
   $110 = +HEAPF32[$xl4>>2];
   $111 = (($m) + 8|0);
   $112 = +HEAPF32[$111>>2];
   $113 = $110 * $112;
   $114 = +HEAPF32[$xr5>>2];
   $115 = (($m) + 8|0);
   $116 = (($115) + 4|0);
   $117 = +HEAPF32[$116>>2];
   $118 = $114 * $117;
   $119 = $113 + $118;
   HEAPF32[$v7>>2] = $119;
   $120 = +HEAPF32[$u6>>2];
   $121 = HEAP32[$i3>>2]|0;
   $122 = HEAP32[$ib0>>2]|0;
   $123 = (($122) + ($121<<2)|0);
   HEAPF32[$123>>2] = $120;
   $124 = +HEAPF32[$v7>>2];
   $125 = HEAP32[$i3>>2]|0;
   $126 = HEAP32[$ib1>>2]|0;
   $127 = (($126) + ($125<<2)|0);
   HEAPF32[$127>>2] = $124;
   $128 = HEAP32[$5>>2]|0;
   $129 = HEAP32[$bl1>>2]|0;
   $130 = (($129) + ($128<<2)|0);
   HEAP32[$bl1>>2] = $130;
   $131 = HEAP32[$5>>2]|0;
   $132 = HEAP32[$br2>>2]|0;
   $133 = (($132) + ($131<<2)|0);
   HEAP32[$br2>>2] = $133;
   $134 = HEAP32[$i3>>2]|0;
   $135 = (($134) + 1)|0;
   HEAP32[$i3>>2] = $135;
  }
  STACKTOP = sp;return;
  break;
 }
 case 4:  {
  $224 = HEAP32[$1>>2]|0;
  HEAP32[$bl22>>2] = $224;
  $225 = HEAP32[$2>>2]|0;
  HEAP32[$br23>>2] = $225;
  HEAP32[$i24>>2] = 0;
  while(1) {
   $226 = HEAP32[$i24>>2]|0;
   $227 = HEAP32[$3>>2]|0;
   $228 = ($226|0)<($227|0);
   if (!($228)) {
    break;
   }
   $229 = HEAP32[$bl22>>2]|0;
   $230 = +HEAPF64[$229>>3];
   $231 = $230;
   HEAPF32[$xl25>>2] = $231;
   $232 = HEAP32[$br23>>2]|0;
   $233 = +HEAPF64[$232>>3];
   $234 = $233;
   HEAPF32[$xr26>>2] = $234;
   $235 = +HEAPF32[$xl25>>2];
   $236 = +HEAPF32[$m>>2];
   $237 = $235 * $236;
   $238 = +HEAPF32[$xr26>>2];
   $239 = (($m) + 4|0);
   $240 = +HEAPF32[$239>>2];
   $241 = $238 * $240;
   $242 = $237 + $241;
   HEAPF32[$u27>>2] = $242;
   $243 = +HEAPF32[$xl25>>2];
   $244 = (($m) + 8|0);
   $245 = +HEAPF32[$244>>2];
   $246 = $243 * $245;
   $247 = +HEAPF32[$xr26>>2];
   $248 = (($m) + 8|0);
   $249 = (($248) + 4|0);
   $250 = +HEAPF32[$249>>2];
   $251 = $247 * $250;
   $252 = $246 + $251;
   HEAPF32[$v28>>2] = $252;
   $253 = +HEAPF32[$u27>>2];
   $254 = HEAP32[$i24>>2]|0;
   $255 = HEAP32[$ib0>>2]|0;
   $256 = (($255) + ($254<<2)|0);
   HEAPF32[$256>>2] = $253;
   $257 = +HEAPF32[$v28>>2];
   $258 = HEAP32[$i24>>2]|0;
   $259 = HEAP32[$ib1>>2]|0;
   $260 = (($259) + ($258<<2)|0);
   HEAPF32[$260>>2] = $257;
   $261 = HEAP32[$5>>2]|0;
   $262 = HEAP32[$bl22>>2]|0;
   $263 = (($262) + ($261<<3)|0);
   HEAP32[$bl22>>2] = $263;
   $264 = HEAP32[$5>>2]|0;
   $265 = HEAP32[$br23>>2]|0;
   $266 = (($265) + ($264<<3)|0);
   HEAP32[$br23>>2] = $266;
   $267 = HEAP32[$i24>>2]|0;
   $268 = (($267) + 1)|0;
   HEAP32[$i24>>2] = $268;
  }
  STACKTOP = sp;return;
  break;
 }
 case 2:  {
  $136 = HEAP32[$1>>2]|0;
  HEAP32[$bl8>>2] = $136;
  $137 = HEAP32[$2>>2]|0;
  HEAP32[$br9>>2] = $137;
  HEAP32[$i10>>2] = 0;
  while(1) {
   $138 = HEAP32[$i10>>2]|0;
   $139 = HEAP32[$3>>2]|0;
   $140 = ($138|0)<($139|0);
   if (!($140)) {
    break;
   }
   $141 = HEAP32[$bl8>>2]|0;
   $142 = HEAP32[$141>>2]|0;
   $143 = (+($142|0));
   HEAPF32[$xl11>>2] = $143;
   $144 = HEAP32[$br9>>2]|0;
   $145 = HEAP32[$144>>2]|0;
   $146 = (+($145|0));
   HEAPF32[$xr12>>2] = $146;
   $147 = +HEAPF32[$xl11>>2];
   $148 = +HEAPF32[$m>>2];
   $149 = $147 * $148;
   $150 = +HEAPF32[$xr12>>2];
   $151 = (($m) + 4|0);
   $152 = +HEAPF32[$151>>2];
   $153 = $150 * $152;
   $154 = $149 + $153;
   HEAPF32[$u13>>2] = $154;
   $155 = +HEAPF32[$xl11>>2];
   $156 = (($m) + 8|0);
   $157 = +HEAPF32[$156>>2];
   $158 = $155 * $157;
   $159 = +HEAPF32[$xr12>>2];
   $160 = (($m) + 8|0);
   $161 = (($160) + 4|0);
   $162 = +HEAPF32[$161>>2];
   $163 = $159 * $162;
   $164 = $158 + $163;
   HEAPF32[$v14>>2] = $164;
   $165 = +HEAPF32[$u13>>2];
   $166 = HEAP32[$i10>>2]|0;
   $167 = HEAP32[$ib0>>2]|0;
   $168 = (($167) + ($166<<2)|0);
   HEAPF32[$168>>2] = $165;
   $169 = +HEAPF32[$v14>>2];
   $170 = HEAP32[$i10>>2]|0;
   $171 = HEAP32[$ib1>>2]|0;
   $172 = (($171) + ($170<<2)|0);
   HEAPF32[$172>>2] = $169;
   $173 = HEAP32[$5>>2]|0;
   $174 = HEAP32[$bl8>>2]|0;
   $175 = (($174) + ($173<<2)|0);
   HEAP32[$bl8>>2] = $175;
   $176 = HEAP32[$5>>2]|0;
   $177 = HEAP32[$br9>>2]|0;
   $178 = (($177) + ($176<<2)|0);
   HEAP32[$br9>>2] = $178;
   $179 = HEAP32[$i10>>2]|0;
   $180 = (($179) + 1)|0;
   HEAP32[$i10>>2] = $180;
  }
  STACKTOP = sp;return;
  break;
 }
 case 0:  {
  $46 = HEAP32[$1>>2]|0;
  HEAP32[$bl>>2] = $46;
  $47 = HEAP32[$2>>2]|0;
  HEAP32[$br>>2] = $47;
  HEAP32[$i>>2] = 0;
  while(1) {
   $48 = HEAP32[$i>>2]|0;
   $49 = HEAP32[$3>>2]|0;
   $50 = ($48|0)<($49|0);
   if (!($50)) {
    break;
   }
   $51 = HEAP32[$bl>>2]|0;
   $52 = HEAP16[$51>>1]|0;
   $53 = (+($52<<16>>16));
   HEAPF32[$xl>>2] = $53;
   $54 = HEAP32[$br>>2]|0;
   $55 = HEAP16[$54>>1]|0;
   $56 = (+($55<<16>>16));
   HEAPF32[$xr>>2] = $56;
   $57 = +HEAPF32[$xl>>2];
   $58 = +HEAPF32[$m>>2];
   $59 = $57 * $58;
   $60 = +HEAPF32[$xr>>2];
   $61 = (($m) + 4|0);
   $62 = +HEAPF32[$61>>2];
   $63 = $60 * $62;
   $64 = $59 + $63;
   HEAPF32[$u>>2] = $64;
   $65 = +HEAPF32[$xl>>2];
   $66 = (($m) + 8|0);
   $67 = +HEAPF32[$66>>2];
   $68 = $65 * $67;
   $69 = +HEAPF32[$xr>>2];
   $70 = (($m) + 8|0);
   $71 = (($70) + 4|0);
   $72 = +HEAPF32[$71>>2];
   $73 = $69 * $72;
   $74 = $68 + $73;
   HEAPF32[$v>>2] = $74;
   $75 = +HEAPF32[$u>>2];
   $76 = HEAP32[$i>>2]|0;
   $77 = HEAP32[$ib0>>2]|0;
   $78 = (($77) + ($76<<2)|0);
   HEAPF32[$78>>2] = $75;
   $79 = +HEAPF32[$v>>2];
   $80 = HEAP32[$i>>2]|0;
   $81 = HEAP32[$ib1>>2]|0;
   $82 = (($81) + ($80<<2)|0);
   HEAPF32[$82>>2] = $79;
   $83 = HEAP32[$5>>2]|0;
   $84 = HEAP32[$bl>>2]|0;
   $85 = (($84) + ($83<<1)|0);
   HEAP32[$bl>>2] = $85;
   $86 = HEAP32[$5>>2]|0;
   $87 = HEAP32[$br>>2]|0;
   $88 = (($87) + ($86<<1)|0);
   HEAP32[$br>>2] = $88;
   $89 = HEAP32[$i>>2]|0;
   $90 = (($89) + 1)|0;
   HEAP32[$i>>2] = $90;
  }
  STACKTOP = sp;return;
  break;
 }
 case 3:  {
  $181 = HEAP32[$1>>2]|0;
  HEAP32[$bl15>>2] = $181;
  $182 = HEAP32[$2>>2]|0;
  HEAP32[$br16>>2] = $182;
  HEAP32[$i17>>2] = 0;
  while(1) {
   $183 = HEAP32[$i17>>2]|0;
   $184 = HEAP32[$3>>2]|0;
   $185 = ($183|0)<($184|0);
   if (!($185)) {
    break;
   }
   $186 = HEAP32[$bl15>>2]|0;
   $187 = +HEAPF32[$186>>2];
   HEAPF32[$xl18>>2] = $187;
   $188 = HEAP32[$br16>>2]|0;
   $189 = +HEAPF32[$188>>2];
   HEAPF32[$xr19>>2] = $189;
   $190 = +HEAPF32[$xl18>>2];
   $191 = +HEAPF32[$m>>2];
   $192 = $190 * $191;
   $193 = +HEAPF32[$xr19>>2];
   $194 = (($m) + 4|0);
   $195 = +HEAPF32[$194>>2];
   $196 = $193 * $195;
   $197 = $192 + $196;
   HEAPF32[$u20>>2] = $197;
   $198 = +HEAPF32[$xl18>>2];
   $199 = (($m) + 8|0);
   $200 = +HEAPF32[$199>>2];
   $201 = $198 * $200;
   $202 = +HEAPF32[$xr19>>2];
   $203 = (($m) + 8|0);
   $204 = (($203) + 4|0);
   $205 = +HEAPF32[$204>>2];
   $206 = $202 * $205;
   $207 = $201 + $206;
   HEAPF32[$v21>>2] = $207;
   $208 = +HEAPF32[$u20>>2];
   $209 = HEAP32[$i17>>2]|0;
   $210 = HEAP32[$ib0>>2]|0;
   $211 = (($210) + ($209<<2)|0);
   HEAPF32[$211>>2] = $208;
   $212 = +HEAPF32[$v21>>2];
   $213 = HEAP32[$i17>>2]|0;
   $214 = HEAP32[$ib1>>2]|0;
   $215 = (($214) + ($213<<2)|0);
   HEAPF32[$215>>2] = $212;
   $216 = HEAP32[$5>>2]|0;
   $217 = HEAP32[$bl15>>2]|0;
   $218 = (($217) + ($216<<2)|0);
   HEAP32[$bl15>>2] = $218;
   $219 = HEAP32[$5>>2]|0;
   $220 = HEAP32[$br16>>2]|0;
   $221 = (($220) + ($219<<2)|0);
   HEAP32[$br16>>2] = $221;
   $222 = HEAP32[$i17>>2]|0;
   $223 = (($222) + 1)|0;
   HEAP32[$i17>>2] = $223;
  }
  STACKTOP = sp;return;
  break;
 }
 default: {
  STACKTOP = sp;return;
 }
 }
}
function _lame_encode_buffer_sample_t($gfc,$nsamples,$mp3buf,$mp3buf_size) {
 $gfc = $gfc|0;
 $nsamples = $nsamples|0;
 $mp3buf = $mp3buf|0;
 $mp3buf_size = $mp3buf_size|0;
 var $$ = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0;
 var $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0.0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0;
 var $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $buf_size = 0, $cfg = 0, $ch = 0, $esv = 0;
 var $i = 0, $in_buffer = 0, $in_buffer_ptr = 0, $mf_needed = 0, $mfbuf = 0, $mp3out = 0, $mp3size = 0, $n_in = 0, $n_out = 0, $pcm_samples_per_frame = 0, $ret = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0;
 $0 = sp + 92|0;
 $1 = sp + 88|0;
 $2 = sp + 84|0;
 $3 = sp + 80|0;
 $4 = sp + 76|0;
 $cfg = sp + 72|0;
 $esv = sp + 68|0;
 $pcm_samples_per_frame = sp + 64|0;
 $mp3size = sp + 60|0;
 $ret = sp + 56|0;
 $i = sp + 52|0;
 $ch = sp + 48|0;
 $mf_needed = sp + 44|0;
 $mp3out = sp + 40|0;
 $mfbuf = sp + 32|0;
 $in_buffer = sp + 24|0;
 $in_buffer_ptr = sp + 16|0;
 $n_in = sp + 8|0;
 $n_out = sp + 4|0;
 $buf_size = sp;
 HEAP32[$1>>2] = $gfc;
 HEAP32[$2>>2] = $nsamples;
 HEAP32[$3>>2] = $mp3buf;
 HEAP32[$4>>2] = $mp3buf_size;
 $5 = HEAP32[$1>>2]|0;
 $6 = (($5) + 16|0);
 HEAP32[$cfg>>2] = $6;
 $7 = HEAP32[$1>>2]|0;
 $8 = (($7) + 27824|0);
 HEAP32[$esv>>2] = $8;
 $9 = HEAP32[$cfg>>2]|0;
 $10 = (($9) + 60|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($11*576)|0;
 HEAP32[$pcm_samples_per_frame>>2] = $12;
 HEAP32[$mp3size>>2] = 0;
 $13 = HEAP32[$1>>2]|0;
 $14 = HEAP32[$13>>2]|0;
 $15 = ($14|0)!=(-487877);
 if ($15) {
  HEAP32[$0>>2] = -3;
  $174 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($174|0);
 }
 $16 = HEAP32[$2>>2]|0;
 $17 = ($16|0)==(0);
 if ($17) {
  HEAP32[$0>>2] = 0;
  $174 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($174|0);
 }
 $18 = HEAP32[$1>>2]|0;
 $19 = HEAP32[$3>>2]|0;
 $20 = HEAP32[$4>>2]|0;
 $21 = (_copy_buffer($18,$19,$20,0)|0);
 HEAP32[$mp3out>>2] = $21;
 $22 = HEAP32[$mp3out>>2]|0;
 $23 = ($22|0)<(0);
 $24 = HEAP32[$mp3out>>2]|0;
 if ($23) {
  HEAP32[$0>>2] = $24;
  $174 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($174|0);
 }
 $25 = HEAP32[$3>>2]|0;
 $26 = (($25) + ($24)|0);
 HEAP32[$3>>2] = $26;
 $27 = HEAP32[$mp3out>>2]|0;
 $28 = HEAP32[$mp3size>>2]|0;
 $29 = (($28) + ($27))|0;
 HEAP32[$mp3size>>2] = $29;
 $30 = HEAP32[$esv>>2]|0;
 $31 = (($30) + 24328|0);
 $32 = HEAP32[$31>>2]|0;
 HEAP32[$in_buffer>>2] = $32;
 $33 = HEAP32[$esv>>2]|0;
 $34 = (($33) + 24332|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = (($in_buffer) + 4|0);
 HEAP32[$36>>2] = $35;
 $37 = HEAP32[$cfg>>2]|0;
 $38 = (_calcNeeded($37)|0);
 HEAP32[$mf_needed>>2] = $38;
 $39 = HEAP32[$esv>>2]|0;
 $40 = (($39) + 24336|0);
 HEAP32[$mfbuf>>2] = $40;
 $41 = HEAP32[$esv>>2]|0;
 $42 = (($41) + 24336|0);
 $43 = (($42) + 15936|0);
 $44 = (($mfbuf) + 4|0);
 HEAP32[$44>>2] = $43;
 L13: while(1) {
  $45 = HEAP32[$2>>2]|0;
  $46 = ($45|0)>(0);
  if (!($46)) {
   label = 26;
   break;
  }
  HEAP32[$n_in>>2] = 0;
  HEAP32[$n_out>>2] = 0;
  $47 = HEAP32[$in_buffer>>2]|0;
  HEAP32[$in_buffer_ptr>>2] = $47;
  $48 = (($in_buffer) + 4|0);
  $49 = HEAP32[$48>>2]|0;
  $50 = (($in_buffer_ptr) + 4|0);
  HEAP32[$50>>2] = $49;
  $51 = HEAP32[$1>>2]|0;
  $52 = HEAP32[$2>>2]|0;
  _fill_buffer($51,$mfbuf,$in_buffer_ptr,$52,$n_in,$n_out);
  $53 = HEAP32[$cfg>>2]|0;
  $54 = (($53) + 112|0);
  $55 = HEAP32[$54>>2]|0;
  $56 = ($55|0)!=(0);
  if ($56) {
   $57 = HEAP32[$cfg>>2]|0;
   $58 = (($57) + 120|0);
   $59 = HEAP32[$58>>2]|0;
   $60 = ($59|0)!=(0);
   if (!($60)) {
    $61 = HEAP32[$1>>2]|0;
    $62 = (($61) + 85676|0);
    $63 = HEAP32[$62>>2]|0;
    $64 = HEAP32[$esv>>2]|0;
    $65 = (($64) + 56212|0);
    $66 = HEAP32[$65>>2]|0;
    $67 = HEAP32[$mfbuf>>2]|0;
    $68 = (($67) + ($66<<2)|0);
    $69 = HEAP32[$esv>>2]|0;
    $70 = (($69) + 56212|0);
    $71 = HEAP32[$70>>2]|0;
    $72 = (($mfbuf) + 4|0);
    $73 = HEAP32[$72>>2]|0;
    $74 = (($73) + ($71<<2)|0);
    $75 = HEAP32[$n_out>>2]|0;
    $76 = HEAP32[$cfg>>2]|0;
    $77 = (($76) + 56|0);
    $78 = HEAP32[$77>>2]|0;
    $79 = (_AnalyzeSamples($63,$68,$74,$75,$78)|0);
    $80 = ($79|0)==(0);
    if ($80) {
     label = 12;
     break;
    }
   }
  }
  $81 = HEAP32[$n_in>>2]|0;
  $82 = HEAP32[$2>>2]|0;
  $83 = (($82) - ($81))|0;
  HEAP32[$2>>2] = $83;
  $84 = HEAP32[$n_in>>2]|0;
  $85 = HEAP32[$in_buffer>>2]|0;
  $86 = (($85) + ($84<<2)|0);
  HEAP32[$in_buffer>>2] = $86;
  $87 = HEAP32[$cfg>>2]|0;
  $88 = (($87) + 56|0);
  $89 = HEAP32[$88>>2]|0;
  $90 = ($89|0)==(2);
  if ($90) {
   $91 = HEAP32[$n_in>>2]|0;
   $92 = (($in_buffer) + 4|0);
   $93 = HEAP32[$92>>2]|0;
   $94 = (($93) + ($91<<2)|0);
   HEAP32[$92>>2] = $94;
  }
  $95 = HEAP32[$n_out>>2]|0;
  $96 = HEAP32[$esv>>2]|0;
  $97 = (($96) + 56212|0);
  $98 = HEAP32[$97>>2]|0;
  $99 = (($98) + ($95))|0;
  HEAP32[$97>>2] = $99;
  $100 = HEAP32[$esv>>2]|0;
  $101 = (($100) + 56208|0);
  $102 = HEAP32[$101>>2]|0;
  $103 = ($102|0)<(1);
  if ($103) {
   $104 = HEAP32[$esv>>2]|0;
   $105 = (($104) + 56208|0);
   HEAP32[$105>>2] = 1728;
  }
  $106 = HEAP32[$n_out>>2]|0;
  $107 = HEAP32[$esv>>2]|0;
  $108 = (($107) + 56208|0);
  $109 = HEAP32[$108>>2]|0;
  $110 = (($109) + ($106))|0;
  HEAP32[$108>>2] = $110;
  $111 = HEAP32[$esv>>2]|0;
  $112 = (($111) + 56212|0);
  $113 = HEAP32[$112>>2]|0;
  $114 = HEAP32[$mf_needed>>2]|0;
  $115 = ($113|0)>=($114|0);
  if (!($115)) {
   continue;
  }
  $116 = HEAP32[$4>>2]|0;
  $117 = HEAP32[$mp3size>>2]|0;
  $118 = (($116) - ($117))|0;
  HEAP32[$buf_size>>2] = $118;
  $119 = HEAP32[$4>>2]|0;
  $120 = ($119|0)==(0);
  $$ = $120 ? 0 : $118;
  HEAP32[$buf_size>>2] = $$;
  $121 = HEAP32[$1>>2]|0;
  $122 = HEAP32[$mfbuf>>2]|0;
  $123 = (($mfbuf) + 4|0);
  $124 = HEAP32[$123>>2]|0;
  $125 = HEAP32[$3>>2]|0;
  $126 = HEAP32[$buf_size>>2]|0;
  $127 = (_lame_encode_mp3_frame($121,$122,$124,$125,$126)|0);
  HEAP32[$ret>>2] = $127;
  $128 = HEAP32[$ret>>2]|0;
  $129 = ($128|0)<(0);
  $130 = HEAP32[$ret>>2]|0;
  if ($129) {
   label = 19;
   break;
  }
  $131 = HEAP32[$3>>2]|0;
  $132 = (($131) + ($130)|0);
  HEAP32[$3>>2] = $132;
  $133 = HEAP32[$ret>>2]|0;
  $134 = HEAP32[$mp3size>>2]|0;
  $135 = (($134) + ($133))|0;
  HEAP32[$mp3size>>2] = $135;
  $136 = HEAP32[$pcm_samples_per_frame>>2]|0;
  $137 = HEAP32[$esv>>2]|0;
  $138 = (($137) + 56212|0);
  $139 = HEAP32[$138>>2]|0;
  $140 = (($139) - ($136))|0;
  HEAP32[$138>>2] = $140;
  $141 = HEAP32[$pcm_samples_per_frame>>2]|0;
  $142 = HEAP32[$esv>>2]|0;
  $143 = (($142) + 56208|0);
  $144 = HEAP32[$143>>2]|0;
  $145 = (($144) - ($141))|0;
  HEAP32[$143>>2] = $145;
  HEAP32[$ch>>2] = 0;
  while(1) {
   $146 = HEAP32[$ch>>2]|0;
   $147 = HEAP32[$cfg>>2]|0;
   $148 = (($147) + 56|0);
   $149 = HEAP32[$148>>2]|0;
   $150 = ($146|0)<($149|0);
   if (!($150)) {
    continue L13;
   }
   HEAP32[$i>>2] = 0;
   while(1) {
    $151 = HEAP32[$i>>2]|0;
    $152 = HEAP32[$esv>>2]|0;
    $153 = (($152) + 56212|0);
    $154 = HEAP32[$153>>2]|0;
    $155 = ($151|0)<($154|0);
    if (!($155)) {
     break;
    }
    $156 = HEAP32[$i>>2]|0;
    $157 = HEAP32[$pcm_samples_per_frame>>2]|0;
    $158 = (($156) + ($157))|0;
    $159 = HEAP32[$ch>>2]|0;
    $160 = (($mfbuf) + ($159<<2)|0);
    $161 = HEAP32[$160>>2]|0;
    $162 = (($161) + ($158<<2)|0);
    $163 = +HEAPF32[$162>>2];
    $164 = HEAP32[$i>>2]|0;
    $165 = HEAP32[$ch>>2]|0;
    $166 = (($mfbuf) + ($165<<2)|0);
    $167 = HEAP32[$166>>2]|0;
    $168 = (($167) + ($164<<2)|0);
    HEAPF32[$168>>2] = $163;
    $169 = HEAP32[$i>>2]|0;
    $170 = (($169) + 1)|0;
    HEAP32[$i>>2] = $170;
   }
   $171 = HEAP32[$ch>>2]|0;
   $172 = (($171) + 1)|0;
   HEAP32[$ch>>2] = $172;
  }
 }
 if ((label|0) == 12) {
  HEAP32[$0>>2] = -6;
  $174 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($174|0);
 }
 else if ((label|0) == 19) {
  HEAP32[$0>>2] = $130;
  $174 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($174|0);
 }
 else if ((label|0) == 26) {
  $173 = HEAP32[$mp3size>>2]|0;
  HEAP32[$0>>2] = $173;
  $174 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($174|0);
 }
 return 0|0;
}
function _filter_coef($x) {
 $x = +$x;
 var $0 = 0, $1 = 0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $2 = 0.0, $3 = 0.0, $4 = 0, $5 = 0.0, $6 = 0.0, $7 = 0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp + 4|0;
 $1 = sp;
 HEAPF32[$1>>2] = $x;
 $2 = +HEAPF32[$1>>2];
 $3 = $2;
 $4 = $3 > 1.0;
 do {
  if ($4) {
   HEAPF32[$0>>2] = 0.0;
  } else {
   $5 = +HEAPF32[$1>>2];
   $6 = $5;
   $7 = $6 <= 0.0;
   if ($7) {
    HEAPF32[$0>>2] = 1.0;
    break;
   } else {
    $8 = +HEAPF32[$1>>2];
    $9 = $8;
    $10 = 1.570796326794896558 * $9;
    $11 = (+Math_cos((+$10)));
    $12 = $11;
    HEAPF32[$0>>2] = $12;
    break;
   }
  }
 } while(0);
 $13 = +HEAPF32[$0>>2];
 STACKTOP = sp;return (+$13);
}
function _decode1_headersB_clipchoice($pmp,$buffer,$len,$pcm_l_raw,$pcm_r_raw,$mp3data,$enc_delay,$enc_padding,$p,$psize,$decoded_sample_size,$decodeMP3_ptr) {
 $pmp = $pmp|0;
 $buffer = $buffer|0;
 $len = $len|0;
 $pcm_l_raw = $pcm_l_raw|0;
 $pcm_r_raw = $pcm_r_raw|0;
 $mp3data = $mp3data|0;
 $enc_delay = $enc_delay|0;
 $enc_padding = $enc_padding|0;
 $p = $p|0;
 $psize = $psize|0;
 $decoded_sample_size = $decoded_sample_size|0;
 $decodeMP3_ptr = $decodeMP3_ptr|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0.0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0.0, $112 = 0.0, $113 = 0.0, $114 = 0.0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0.0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0.0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0.0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0.0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0.0, $89 = 0.0, $9 = 0, $90 = 0.0, $91 = 0.0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $i = 0, $p_samples = 0, $p_samples2 = 0, $p_samples4 = 0;
 var $p_samples7 = 0, $pcm_l = 0, $pcm_l1 = 0, $pcm_l3 = 0, $pcm_l5 = 0, $pcm_r = 0, $pcm_r6 = 0, $processed_bytes = 0, $processed_samples = 0, $ret = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0;
 $0 = sp + 100|0;
 $1 = sp + 96|0;
 $2 = sp + 92|0;
 $3 = sp + 88|0;
 $4 = sp + 84|0;
 $5 = sp + 80|0;
 $6 = sp + 76|0;
 $7 = sp + 72|0;
 $8 = sp + 68|0;
 $9 = sp + 64|0;
 $10 = sp + 60|0;
 $11 = sp + 56|0;
 $processed_bytes = sp + 52|0;
 $processed_samples = sp + 48|0;
 $ret = sp + 44|0;
 $i = sp + 40|0;
 $pcm_l = sp + 36|0;
 $p_samples = sp + 32|0;
 $pcm_l1 = sp + 28|0;
 $p_samples2 = sp + 24|0;
 $pcm_l3 = sp + 20|0;
 $pcm_r = sp + 16|0;
 $p_samples4 = sp + 12|0;
 $pcm_l5 = sp + 8|0;
 $pcm_r6 = sp + 4|0;
 $p_samples7 = sp;
 HEAP32[$0>>2] = $pmp;
 HEAP32[$1>>2] = $buffer;
 HEAP32[$2>>2] = $len;
 HEAP32[$3>>2] = $pcm_l_raw;
 HEAP32[$4>>2] = $pcm_r_raw;
 HEAP32[$5>>2] = $mp3data;
 HEAP32[$6>>2] = $enc_delay;
 HEAP32[$7>>2] = $enc_padding;
 HEAP32[$8>>2] = $p;
 HEAP32[$9>>2] = $psize;
 HEAP32[$10>>2] = $decoded_sample_size;
 HEAP32[$11>>2] = $decodeMP3_ptr;
 $12 = HEAP32[$5>>2]|0;
 HEAP32[$12>>2] = 0;
 $13 = HEAP32[$11>>2]|0;
 $14 = HEAP32[$0>>2]|0;
 $15 = HEAP32[$1>>2]|0;
 $16 = HEAP32[$2>>2]|0;
 $17 = HEAP32[$8>>2]|0;
 $18 = HEAP32[$9>>2]|0;
 $19 = (FUNCTION_TABLE_iiiiiii[$13 & 1]($14,$15,$16,$17,$18,$processed_bytes)|0);
 HEAP32[$ret>>2] = $19;
 $20 = HEAP32[$0>>2]|0;
 $21 = (($20) + 24|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = ($22|0)!=(0);
 if ($23) {
  label = 4;
 } else {
  $24 = HEAP32[$0>>2]|0;
  $25 = (($24) + 60|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = ($26|0)>(0);
  if ($27) {
   label = 4;
  } else {
   $28 = HEAP32[$0>>2]|0;
   $29 = (($28) + 48|0);
   $30 = HEAP32[$29>>2]|0;
   $31 = ($30|0)>(0);
   if ($31) {
    label = 4;
   }
  }
 }
 if ((label|0) == 4) {
  $32 = HEAP32[$5>>2]|0;
  HEAP32[$32>>2] = 1;
  $33 = HEAP32[$0>>2]|0;
  $34 = (($33) + 68|0);
  $35 = HEAP32[$34>>2]|0;
  $36 = HEAP32[$5>>2]|0;
  $37 = (($36) + 4|0);
  HEAP32[$37>>2] = $35;
  $38 = HEAP32[$0>>2]|0;
  $39 = (($38) + 68|0);
  $40 = (($39) + 32|0);
  $41 = HEAP32[$40>>2]|0;
  $42 = (_freqs + ($41<<2)|0);
  $43 = HEAP32[$42>>2]|0;
  $44 = HEAP32[$5>>2]|0;
  $45 = (($44) + 8|0);
  HEAP32[$45>>2] = $43;
  $46 = HEAP32[$0>>2]|0;
  $47 = (($46) + 68|0);
  $48 = (($47) + 44|0);
  $49 = HEAP32[$48>>2]|0;
  $50 = HEAP32[$5>>2]|0;
  $51 = (($50) + 16|0);
  HEAP32[$51>>2] = $49;
  $52 = HEAP32[$0>>2]|0;
  $53 = (($52) + 68|0);
  $54 = (($53) + 48|0);
  $55 = HEAP32[$54>>2]|0;
  $56 = HEAP32[$5>>2]|0;
  $57 = (($56) + 20|0);
  HEAP32[$57>>2] = $55;
  $58 = HEAP32[$0>>2]|0;
  $59 = (($58) + 68|0);
  $60 = (($59) + 20|0);
  $61 = HEAP32[$60>>2]|0;
  $62 = HEAP32[$0>>2]|0;
  $63 = (($62) + 68|0);
  $64 = (($63) + 8|0);
  $65 = HEAP32[$64>>2]|0;
  $66 = (16392 + ($65<<4)|0);
  $67 = (($66) + ($61<<2)|0);
  $68 = HEAP32[$67>>2]|0;
  $69 = HEAP32[$5>>2]|0;
  $70 = (($69) + 24|0);
  HEAP32[$70>>2] = $68;
  $71 = HEAP32[$0>>2]|0;
  $72 = (($71) + 60|0);
  $73 = HEAP32[$72>>2]|0;
  $74 = ($73|0)>(0);
  $75 = HEAP32[$0>>2]|0;
  do {
   if ($74) {
    $76 = (($75) + 60|0);
    $77 = HEAP32[$76>>2]|0;
    $78 = (4 + ($77))|0;
    $79 = $78<<3;
    $80 = HEAP32[$5>>2]|0;
    $81 = (($80) + 8|0);
    $82 = HEAP32[$81>>2]|0;
    $83 = Math_imul($79, $82)|0;
    $84 = (+($83|0));
    $85 = HEAP32[$5>>2]|0;
    $86 = (($85) + 24|0);
    $87 = HEAP32[$86>>2]|0;
    $88 = (+($87|0));
    $89 = 1000.0 * $88;
    $90 = $84 / $89;
    $91 = $90 + 0.5;
    $92 = (~~(($91)));
    $93 = HEAP32[$5>>2]|0;
    $94 = (($93) + 12|0);
    HEAP32[$94>>2] = $92;
   } else {
    $95 = (($75) + 48|0);
    $96 = HEAP32[$95>>2]|0;
    $97 = ($96|0)>(0);
    $98 = HEAP32[$0>>2]|0;
    if ($97) {
     $99 = (($98) + 48|0);
     $100 = HEAP32[$99>>2]|0;
     $101 = (4 + ($100))|0;
     $102 = $101<<3;
     $103 = HEAP32[$5>>2]|0;
     $104 = (($103) + 8|0);
     $105 = HEAP32[$104>>2]|0;
     $106 = Math_imul($102, $105)|0;
     $107 = (+($106|0));
     $108 = HEAP32[$5>>2]|0;
     $109 = (($108) + 24|0);
     $110 = HEAP32[$109>>2]|0;
     $111 = (+($110|0));
     $112 = 1000.0 * $111;
     $113 = $107 / $112;
     $114 = $113 + 0.5;
     $115 = (~~(($114)));
     $116 = HEAP32[$5>>2]|0;
     $117 = (($116) + 12|0);
     HEAP32[$117>>2] = $115;
     break;
    } else {
     $118 = (($98) + 68|0);
     $119 = (($118) + 28|0);
     $120 = HEAP32[$119>>2]|0;
     $121 = HEAP32[$0>>2]|0;
     $122 = (($121) + 68|0);
     $123 = (($122) + 20|0);
     $124 = HEAP32[$123>>2]|0;
     $125 = (($124) - 1)|0;
     $126 = HEAP32[$0>>2]|0;
     $127 = (($126) + 68|0);
     $128 = (($127) + 8|0);
     $129 = HEAP32[$128>>2]|0;
     $130 = (_tabsel_123 + (($129*192)|0)|0);
     $131 = (($130) + ($125<<6)|0);
     $132 = (($131) + ($120<<2)|0);
     $133 = HEAP32[$132>>2]|0;
     $134 = HEAP32[$5>>2]|0;
     $135 = (($134) + 12|0);
     HEAP32[$135>>2] = $133;
     break;
    }
   }
  } while(0);
  $136 = HEAP32[$0>>2]|0;
  $137 = (($136) + 12|0);
  $138 = HEAP32[$137>>2]|0;
  $139 = ($138|0)>(0);
  if ($139) {
   $140 = HEAP32[$0>>2]|0;
   $141 = (($140) + 12|0);
   $142 = HEAP32[$141>>2]|0;
   $143 = HEAP32[$5>>2]|0;
   $144 = (($143) + 32|0);
   HEAP32[$144>>2] = $142;
   $145 = HEAP32[$5>>2]|0;
   $146 = (($145) + 24|0);
   $147 = HEAP32[$146>>2]|0;
   $148 = HEAP32[$0>>2]|0;
   $149 = (($148) + 12|0);
   $150 = HEAP32[$149>>2]|0;
   $151 = Math_imul($147, $150)|0;
   $152 = HEAP32[$5>>2]|0;
   $153 = (($152) + 28|0);
   HEAP32[$153>>2] = $151;
   $154 = HEAP32[$0>>2]|0;
   $155 = (($154) + 16|0);
   $156 = HEAP32[$155>>2]|0;
   $157 = HEAP32[$6>>2]|0;
   HEAP32[$157>>2] = $156;
   $158 = HEAP32[$0>>2]|0;
   $159 = (($158) + 20|0);
   $160 = HEAP32[$159>>2]|0;
   $161 = HEAP32[$7>>2]|0;
   HEAP32[$161>>2] = $160;
  }
 }
 $162 = HEAP32[$ret>>2]|0;
 if ((($162|0) == 1)) {
  HEAP32[$processed_samples>>2] = 0;
  $235 = HEAP32[$processed_samples>>2]|0;
  STACKTOP = sp;return ($235|0);
 } else if ((($162|0) == -1)) {
  HEAP32[$processed_samples>>2] = -1;
  $235 = HEAP32[$processed_samples>>2]|0;
  STACKTOP = sp;return ($235|0);
 } else if ((($162|0) == 0)) {
  $163 = HEAP32[$0>>2]|0;
  $164 = (($163) + 68|0);
  $165 = HEAP32[$164>>2]|0;
  if ((($165|0) == 2)) {
   $194 = HEAP32[$processed_bytes>>2]|0;
   $195 = HEAP32[$10>>2]|0;
   $196 = (($194|0) / ($195|0))&-1;
   $197 = $196 >> 1;
   HEAP32[$processed_samples>>2] = $197;
   $198 = HEAP32[$10>>2]|0;
   $199 = ($198|0)==(2);
   $200 = HEAP32[$3>>2]|0;
   if ($199) {
    HEAP32[$pcm_l3>>2] = $200;
    $201 = HEAP32[$4>>2]|0;
    HEAP32[$pcm_r>>2] = $201;
    $202 = HEAP32[$8>>2]|0;
    HEAP32[$p_samples4>>2] = $202;
    HEAP32[$i>>2] = 0;
    while(1) {
     $203 = HEAP32[$i>>2]|0;
     $204 = HEAP32[$processed_samples>>2]|0;
     $205 = ($203|0)<($204|0);
     if (!($205)) {
      break;
     }
     $206 = HEAP32[$p_samples4>>2]|0;
     $207 = (($206) + 2|0);
     HEAP32[$p_samples4>>2] = $207;
     $208 = HEAP16[$206>>1]|0;
     $209 = HEAP32[$pcm_l3>>2]|0;
     $210 = (($209) + 2|0);
     HEAP32[$pcm_l3>>2] = $210;
     HEAP16[$209>>1] = $208;
     $211 = HEAP32[$p_samples4>>2]|0;
     $212 = (($211) + 2|0);
     HEAP32[$p_samples4>>2] = $212;
     $213 = HEAP16[$211>>1]|0;
     $214 = HEAP32[$pcm_r>>2]|0;
     $215 = (($214) + 2|0);
     HEAP32[$pcm_r>>2] = $215;
     HEAP16[$214>>1] = $213;
     $216 = HEAP32[$i>>2]|0;
     $217 = (($216) + 1)|0;
     HEAP32[$i>>2] = $217;
    }
    $235 = HEAP32[$processed_samples>>2]|0;
    STACKTOP = sp;return ($235|0);
   } else {
    HEAP32[$pcm_l5>>2] = $200;
    $218 = HEAP32[$4>>2]|0;
    HEAP32[$pcm_r6>>2] = $218;
    $219 = HEAP32[$8>>2]|0;
    HEAP32[$p_samples7>>2] = $219;
    HEAP32[$i>>2] = 0;
    while(1) {
     $220 = HEAP32[$i>>2]|0;
     $221 = HEAP32[$processed_samples>>2]|0;
     $222 = ($220|0)<($221|0);
     if (!($222)) {
      break;
     }
     $223 = HEAP32[$p_samples7>>2]|0;
     $224 = (($223) + 4|0);
     HEAP32[$p_samples7>>2] = $224;
     $225 = +HEAPF32[$223>>2];
     $226 = HEAP32[$pcm_l5>>2]|0;
     $227 = (($226) + 4|0);
     HEAP32[$pcm_l5>>2] = $227;
     HEAPF32[$226>>2] = $225;
     $228 = HEAP32[$p_samples7>>2]|0;
     $229 = (($228) + 4|0);
     HEAP32[$p_samples7>>2] = $229;
     $230 = +HEAPF32[$228>>2];
     $231 = HEAP32[$pcm_r6>>2]|0;
     $232 = (($231) + 4|0);
     HEAP32[$pcm_r6>>2] = $232;
     HEAPF32[$231>>2] = $230;
     $233 = HEAP32[$i>>2]|0;
     $234 = (($233) + 1)|0;
     HEAP32[$i>>2] = $234;
    }
    $235 = HEAP32[$processed_samples>>2]|0;
    STACKTOP = sp;return ($235|0);
   }
  } else if ((($165|0) == 1)) {
   $166 = HEAP32[$processed_bytes>>2]|0;
   $167 = HEAP32[$10>>2]|0;
   $168 = (($166|0) / ($167|0))&-1;
   HEAP32[$processed_samples>>2] = $168;
   $169 = HEAP32[$10>>2]|0;
   $170 = ($169|0)==(2);
   $171 = HEAP32[$3>>2]|0;
   if ($170) {
    HEAP32[$pcm_l>>2] = $171;
    $172 = HEAP32[$8>>2]|0;
    HEAP32[$p_samples>>2] = $172;
    HEAP32[$i>>2] = 0;
    while(1) {
     $173 = HEAP32[$i>>2]|0;
     $174 = HEAP32[$processed_samples>>2]|0;
     $175 = ($173|0)<($174|0);
     if (!($175)) {
      break;
     }
     $176 = HEAP32[$p_samples>>2]|0;
     $177 = (($176) + 2|0);
     HEAP32[$p_samples>>2] = $177;
     $178 = HEAP16[$176>>1]|0;
     $179 = HEAP32[$pcm_l>>2]|0;
     $180 = (($179) + 2|0);
     HEAP32[$pcm_l>>2] = $180;
     HEAP16[$179>>1] = $178;
     $181 = HEAP32[$i>>2]|0;
     $182 = (($181) + 1)|0;
     HEAP32[$i>>2] = $182;
    }
    $235 = HEAP32[$processed_samples>>2]|0;
    STACKTOP = sp;return ($235|0);
   } else {
    HEAP32[$pcm_l1>>2] = $171;
    $183 = HEAP32[$8>>2]|0;
    HEAP32[$p_samples2>>2] = $183;
    HEAP32[$i>>2] = 0;
    while(1) {
     $184 = HEAP32[$i>>2]|0;
     $185 = HEAP32[$processed_samples>>2]|0;
     $186 = ($184|0)<($185|0);
     if (!($186)) {
      break;
     }
     $187 = HEAP32[$p_samples2>>2]|0;
     $188 = (($187) + 4|0);
     HEAP32[$p_samples2>>2] = $188;
     $189 = +HEAPF32[$187>>2];
     $190 = HEAP32[$pcm_l1>>2]|0;
     $191 = (($190) + 4|0);
     HEAP32[$pcm_l1>>2] = $191;
     HEAPF32[$190>>2] = $189;
     $192 = HEAP32[$i>>2]|0;
     $193 = (($192) + 1)|0;
     HEAP32[$i>>2] = $193;
    }
    $235 = HEAP32[$processed_samples>>2]|0;
    STACKTOP = sp;return ($235|0);
   }
  } else {
   HEAP32[$processed_samples>>2] = -1;
   $235 = HEAP32[$processed_samples>>2]|0;
   STACKTOP = sp;return ($235|0);
  }
 } else {
  HEAP32[$processed_samples>>2] = -1;
  $235 = HEAP32[$processed_samples>>2]|0;
  STACKTOP = sp;return ($235|0);
 }
 return 0|0;
}
function _hip_decode_init() {
 var $0 = 0, $1 = 0, $2 = 0, $hip = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $hip = sp;
 $0 = (_calloc(1,22000)|0);
 HEAP32[$hip>>2] = $0;
 $1 = HEAP32[$hip>>2]|0;
 (_InitMP3(($1|0))|0);
 $2 = HEAP32[$hip>>2]|0;
 STACKTOP = sp;return ($2|0);
}
function _hip_decode_exit($hip) {
 $hip = $hip|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp;
 HEAP32[$0>>2] = $hip;
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)!=(0|0);
 if (!($2)) {
  STACKTOP = sp;return 0;
 }
 $3 = HEAP32[$0>>2]|0;
 _ExitMP3(($3|0));
 $4 = HEAP32[$0>>2]|0;
 _free($4);
 STACKTOP = sp;return 0;
}
function _hip_decode1_unclipped($hip,$buffer,$len,$pcm_l,$pcm_r) {
 $hip = $hip|0;
 $buffer = $buffer|0;
 $len = $len|0;
 $pcm_l = $pcm_l|0;
 $pcm_r = $pcm_r|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $enc_delay = 0, $enc_padding = 0, $mp3data = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0;
 $0 = sp + 68|0;
 $1 = sp + 64|0;
 $2 = sp + 60|0;
 $3 = sp + 56|0;
 $4 = sp + 52|0;
 $5 = sp + 48|0;
 $mp3data = sp + 8|0;
 $enc_delay = sp + 4|0;
 $enc_padding = sp;
 HEAP32[$1>>2] = $hip;
 HEAP32[$2>>2] = $buffer;
 HEAP32[$3>>2] = $len;
 HEAP32[$4>>2] = $pcm_l;
 HEAP32[$5>>2] = $pcm_r;
 $6 = HEAP32[$1>>2]|0;
 $7 = ($6|0)!=(0|0);
 if ($7) {
  $8 = HEAP32[$1>>2]|0;
  $9 = HEAP32[$2>>2]|0;
  $10 = HEAP32[$3>>2]|0;
  $11 = HEAP32[$4>>2]|0;
  $12 = HEAP32[$5>>2]|0;
  $13 = (_decode1_headersB_clipchoice($8,$9,$10,$11,$12,$mp3data,$enc_delay,$enc_padding,7176,9216,4,1)|0);
  HEAP32[$0>>2] = $13;
  $14 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($14|0);
 } else {
  HEAP32[$0>>2] = 0;
  $14 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($14|0);
 }
 return 0|0;
}
function _hip_set_errorf($hip,$func) {
 $hip = $hip|0;
 $func = $func|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp + 4|0;
 $1 = sp;
 HEAP32[$0>>2] = $hip;
 HEAP32[$1>>2] = $func;
 $2 = HEAP32[$0>>2]|0;
 $3 = ($2|0)!=(0|0);
 if (!($3)) {
  STACKTOP = sp;return;
 }
 $4 = HEAP32[$1>>2]|0;
 $5 = HEAP32[$0>>2]|0;
 $6 = (($5) + 21996|0);
 HEAP32[$6>>2] = $4;
 STACKTOP = sp;return;
}
function _hip_set_debugf($hip,$func) {
 $hip = $hip|0;
 $func = $func|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp + 4|0;
 $1 = sp;
 HEAP32[$0>>2] = $hip;
 HEAP32[$1>>2] = $func;
 $2 = HEAP32[$0>>2]|0;
 $3 = ($2|0)!=(0|0);
 if (!($3)) {
  STACKTOP = sp;return;
 }
 $4 = HEAP32[$1>>2]|0;
 $5 = HEAP32[$0>>2]|0;
 $6 = (($5) + 21992|0);
 HEAP32[$6>>2] = $4;
 STACKTOP = sp;return;
}
function _hip_set_msgf($hip,$func) {
 $hip = $hip|0;
 $func = $func|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp + 4|0;
 $1 = sp;
 HEAP32[$0>>2] = $hip;
 HEAP32[$1>>2] = $func;
 $2 = HEAP32[$0>>2]|0;
 $3 = ($2|0)!=(0|0);
 if (!($3)) {
  STACKTOP = sp;return;
 }
 $4 = HEAP32[$1>>2]|0;
 $5 = HEAP32[$0>>2]|0;
 $6 = (($5) + 21988|0);
 HEAP32[$6>>2] = $4;
 STACKTOP = sp;return;
}
function _mdct_sub48($gfc,$w0,$w1) {
 $gfc = $gfc|0;
 $w0 = $w0|0;
 $w1 = $w1|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0.0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0.0, $113 = 0.0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0.0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0.0, $13 = 0, $130 = 0.0, $131 = 0.0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0.0, $138 = 0.0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0.0, $15 = 0, $150 = 0.0, $151 = 0.0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0.0, $158 = 0.0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0.0, $17 = 0;
 var $170 = 0.0, $171 = 0.0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0.0, $178 = 0.0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0.0, $19 = 0, $190 = 0.0, $191 = 0.0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0.0, $198 = 0.0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0.0, $21 = 0, $210 = 0.0, $211 = 0.0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0.0, $218 = 0.0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0.0, $23 = 0, $230 = 0.0, $231 = 0.0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0.0, $238 = 0.0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0.0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0.0, $261 = 0.0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0.0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0.0, $274 = 0.0, $275 = 0.0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0.0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0.0, $288 = 0.0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0.0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0.0, $301 = 0.0, $302 = 0.0, $303 = 0.0, $304 = 0.0, $305 = 0, $306 = 0, $307 = 0, $308 = 0.0, $309 = 0.0, $31 = 0, $310 = 0.0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0.0, $315 = 0, $316 = 0, $317 = 0, $318 = 0.0, $319 = 0.0, $32 = 0, $320 = 0.0, $321 = 0.0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0.0, $338 = 0, $339 = 0, $34 = 0, $340 = 0.0, $341 = 0.0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0.0, $347 = 0, $348 = 0, $349 = 0.0, $35 = 0;
 var $350 = 0.0, $351 = 0.0, $352 = 0, $353 = 0, $354 = 0, $355 = 0.0, $356 = 0, $357 = 0, $358 = 0.0, $359 = 0.0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0.0, $365 = 0, $366 = 0, $367 = 0.0, $368 = 0.0;
 var $369 = 0.0, $37 = 0, $370 = 0.0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0.0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0.0, $91 = 0.0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0.0, $99 = 0.0, $a = 0, $b = 0, $band = 0, $band0 = 0, $band1 = 0, $bd = 0, $bu = 0, $cfg = 0, $ch = 0, $esv = 0, $gi = 0, $gr = 0, $k = 0, $mdct_enc = 0, $samp = 0, $type = 0, $w = 0, $wk = 0;
 var $work = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0;
 $0 = sp + 152|0;
 $1 = sp + 148|0;
 $2 = sp + 144|0;
 $cfg = sp + 140|0;
 $esv = sp + 136|0;
 $gr = sp + 132|0;
 $k = sp + 128|0;
 $ch = sp + 124|0;
 $wk = sp + 120|0;
 $band = sp + 116|0;
 $gi = sp + 112|0;
 $mdct_enc = sp + 108|0;
 $samp = sp + 104|0;
 $type = sp + 100|0;
 $band0 = sp + 96|0;
 $band1 = sp + 92|0;
 $w = sp + 88|0;
 $work = sp + 16|0;
 $a = sp + 12|0;
 $b = sp + 8|0;
 $bu = sp + 4|0;
 $bd = sp;
 HEAP32[$0>>2] = $gfc;
 HEAP32[$1>>2] = $w0;
 HEAP32[$2>>2] = $w1;
 $3 = HEAP32[$0>>2]|0;
 $4 = (($3) + 16|0);
 HEAP32[$cfg>>2] = $4;
 $5 = HEAP32[$0>>2]|0;
 $6 = (($5) + 27824|0);
 HEAP32[$esv>>2] = $6;
 $7 = HEAP32[$1>>2]|0;
 $8 = (($7) + 1144|0);
 HEAP32[$wk>>2] = $8;
 HEAP32[$ch>>2] = 0;
 while(1) {
  $9 = HEAP32[$ch>>2]|0;
  $10 = HEAP32[$cfg>>2]|0;
  $11 = (($10) + 56|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = ($9|0)<($12|0);
  if (!($13)) {
   break;
  }
  HEAP32[$gr>>2] = 0;
  while(1) {
   $14 = HEAP32[$gr>>2]|0;
   $15 = HEAP32[$cfg>>2]|0;
   $16 = (($15) + 60|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = ($14|0)<($17|0);
   if (!($18)) {
    break;
   }
   $19 = HEAP32[$ch>>2]|0;
   $20 = HEAP32[$gr>>2]|0;
   $21 = HEAP32[$0>>2]|0;
   $22 = (($21) + 304|0);
   $23 = (($22) + (($20*10504)|0)|0);
   $24 = (($23) + (($19*5252)|0)|0);
   HEAP32[$gi>>2] = $24;
   $25 = HEAP32[$gi>>2]|0;
   HEAP32[$mdct_enc>>2] = $25;
   $26 = HEAP32[$gr>>2]|0;
   $27 = (1 - ($26))|0;
   $28 = HEAP32[$ch>>2]|0;
   $29 = HEAP32[$esv>>2]|0;
   $30 = (($29) + (($28*4608)|0)|0);
   $31 = (($30) + (($27*2304)|0)|0);
   HEAP32[$samp>>2] = $31;
   HEAP32[$k>>2] = 0;
   while(1) {
    $32 = HEAP32[$k>>2]|0;
    $33 = ($32|0)<(9);
    if (!($33)) {
     break;
    }
    $34 = HEAP32[$wk>>2]|0;
    $35 = HEAP32[$samp>>2]|0;
    _window_subband($34,$35);
    $36 = HEAP32[$wk>>2]|0;
    $37 = (($36) + 128|0);
    $38 = HEAP32[$samp>>2]|0;
    $39 = (($38) + 128|0);
    _window_subband($37,$39);
    $40 = HEAP32[$samp>>2]|0;
    $41 = (($40) + 256|0);
    HEAP32[$samp>>2] = $41;
    $42 = HEAP32[$wk>>2]|0;
    $43 = (($42) + 256|0);
    HEAP32[$wk>>2] = $43;
    HEAP32[$band>>2] = 1;
    while(1) {
     $44 = HEAP32[$band>>2]|0;
     $45 = ($44|0)<(32);
     if (!($45)) {
      break;
     }
     $46 = HEAP32[$band>>2]|0;
     $47 = (($46) - 32)|0;
     $48 = HEAP32[$samp>>2]|0;
     $49 = (($48) + ($47<<2)|0);
     $50 = +HEAPF32[$49>>2];
     $51 = $50 * -1.0;
     HEAPF32[$49>>2] = $51;
     $52 = HEAP32[$band>>2]|0;
     $53 = (($52) + 2)|0;
     HEAP32[$band>>2] = $53;
    }
    $54 = HEAP32[$k>>2]|0;
    $55 = (($54) + 1)|0;
    HEAP32[$k>>2] = $55;
   }
   HEAP32[$band>>2] = 0;
   while(1) {
    $56 = HEAP32[$band>>2]|0;
    $57 = ($56|0)<(32);
    if (!($57)) {
     break;
    }
    $58 = HEAP32[$gi>>2]|0;
    $59 = (($58) + 4788|0);
    $60 = HEAP32[$59>>2]|0;
    HEAP32[$type>>2] = $60;
    $61 = HEAP32[$gr>>2]|0;
    $62 = HEAP32[$ch>>2]|0;
    $63 = HEAP32[$esv>>2]|0;
    $64 = (($63) + (($62*4608)|0)|0);
    $65 = (($64) + (($61*2304)|0)|0);
    $66 = HEAP32[$band>>2]|0;
    $67 = (16424 + ($66<<2)|0);
    $68 = HEAP32[$67>>2]|0;
    $69 = (($65) + ($68<<2)|0);
    HEAP32[$band0>>2] = $69;
    $70 = HEAP32[$gr>>2]|0;
    $71 = (1 - ($70))|0;
    $72 = HEAP32[$ch>>2]|0;
    $73 = HEAP32[$esv>>2]|0;
    $74 = (($73) + (($72*4608)|0)|0);
    $75 = (($74) + (($71*2304)|0)|0);
    $76 = HEAP32[$band>>2]|0;
    $77 = (16424 + ($76<<2)|0);
    $78 = HEAP32[$77>>2]|0;
    $79 = (($75) + ($78<<2)|0);
    HEAP32[$band1>>2] = $79;
    $80 = HEAP32[$gi>>2]|0;
    $81 = (($80) + 4792|0);
    $82 = HEAP32[$81>>2]|0;
    $83 = ($82|0)!=(0);
    if ($83) {
     $84 = HEAP32[$band>>2]|0;
     $85 = ($84|0)<(2);
     if ($85) {
      HEAP32[$type>>2] = 0;
     }
    }
    $86 = HEAP32[$band>>2]|0;
    $87 = HEAP32[$esv>>2]|0;
    $88 = (($87) + 9216|0);
    $89 = (($88) + ($86<<2)|0);
    $90 = +HEAPF32[$89>>2];
    $91 = $90;
    $92 = $91 < 9.99999999999999979886E-13;
    do {
     if ($92) {
      $93 = HEAP32[$mdct_enc>>2]|0;
      dest=$93+0|0; stop=dest+72|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
     } else {
      $94 = HEAP32[$band>>2]|0;
      $95 = HEAP32[$esv>>2]|0;
      $96 = (($95) + 9216|0);
      $97 = (($96) + ($94<<2)|0);
      $98 = +HEAPF32[$97>>2];
      $99 = $98;
      $100 = $99 < 1.0;
      L24: do {
       if ($100) {
        HEAP32[$k>>2] = 0;
        while(1) {
         $101 = HEAP32[$k>>2]|0;
         $102 = ($101|0)<(18);
         if (!($102)) {
          break L24;
         }
         $103 = HEAP32[$band>>2]|0;
         $104 = HEAP32[$esv>>2]|0;
         $105 = (($104) + 9216|0);
         $106 = (($105) + ($103<<2)|0);
         $107 = +HEAPF32[$106>>2];
         $108 = HEAP32[$k>>2]|0;
         $109 = $108<<5;
         $110 = HEAP32[$band1>>2]|0;
         $111 = (($110) + ($109<<2)|0);
         $112 = +HEAPF32[$111>>2];
         $113 = $112 * $107;
         HEAPF32[$111>>2] = $113;
         $114 = HEAP32[$k>>2]|0;
         $115 = (($114) + 1)|0;
         HEAP32[$k>>2] = $115;
        }
       }
      } while(0);
      $116 = HEAP32[$type>>2]|0;
      $117 = ($116|0)==(2);
      if ($117) {
       HEAP32[$k>>2] = -3;
       while(1) {
        $118 = HEAP32[$k>>2]|0;
        $119 = ($118|0)<(0);
        if (!($119)) {
         break;
        }
        $120 = HEAP32[$k>>2]|0;
        $121 = (($120) + 3)|0;
        $122 = (((16552 + 288|0)) + ($121<<2)|0);
        $123 = +HEAPF32[$122>>2];
        HEAPF32[$w>>2] = $123;
        $124 = HEAP32[$k>>2]|0;
        $125 = (9 + ($124))|0;
        $126 = $125<<5;
        $127 = HEAP32[$band0>>2]|0;
        $128 = (($127) + ($126<<2)|0);
        $129 = +HEAPF32[$128>>2];
        $130 = +HEAPF32[$w>>2];
        $131 = $129 * $130;
        $132 = HEAP32[$k>>2]|0;
        $133 = (8 - ($132))|0;
        $134 = $133<<5;
        $135 = HEAP32[$band0>>2]|0;
        $136 = (($135) + ($134<<2)|0);
        $137 = +HEAPF32[$136>>2];
        $138 = $131 - $137;
        $139 = HEAP32[$k>>2]|0;
        $140 = ($139*3)|0;
        $141 = (($140) + 9)|0;
        $142 = HEAP32[$mdct_enc>>2]|0;
        $143 = (($142) + ($141<<2)|0);
        HEAPF32[$143>>2] = $138;
        $144 = HEAP32[$k>>2]|0;
        $145 = (14 - ($144))|0;
        $146 = $145<<5;
        $147 = HEAP32[$band0>>2]|0;
        $148 = (($147) + ($146<<2)|0);
        $149 = +HEAPF32[$148>>2];
        $150 = +HEAPF32[$w>>2];
        $151 = $149 * $150;
        $152 = HEAP32[$k>>2]|0;
        $153 = (15 + ($152))|0;
        $154 = $153<<5;
        $155 = HEAP32[$band0>>2]|0;
        $156 = (($155) + ($154<<2)|0);
        $157 = +HEAPF32[$156>>2];
        $158 = $151 + $157;
        $159 = HEAP32[$k>>2]|0;
        $160 = ($159*3)|0;
        $161 = (($160) + 18)|0;
        $162 = HEAP32[$mdct_enc>>2]|0;
        $163 = (($162) + ($161<<2)|0);
        HEAPF32[$163>>2] = $158;
        $164 = HEAP32[$k>>2]|0;
        $165 = (15 + ($164))|0;
        $166 = $165<<5;
        $167 = HEAP32[$band0>>2]|0;
        $168 = (($167) + ($166<<2)|0);
        $169 = +HEAPF32[$168>>2];
        $170 = +HEAPF32[$w>>2];
        $171 = $169 * $170;
        $172 = HEAP32[$k>>2]|0;
        $173 = (14 - ($172))|0;
        $174 = $173<<5;
        $175 = HEAP32[$band0>>2]|0;
        $176 = (($175) + ($174<<2)|0);
        $177 = +HEAPF32[$176>>2];
        $178 = $171 - $177;
        $179 = HEAP32[$k>>2]|0;
        $180 = ($179*3)|0;
        $181 = (($180) + 10)|0;
        $182 = HEAP32[$mdct_enc>>2]|0;
        $183 = (($182) + ($181<<2)|0);
        HEAPF32[$183>>2] = $178;
        $184 = HEAP32[$k>>2]|0;
        $185 = (2 - ($184))|0;
        $186 = $185<<5;
        $187 = HEAP32[$band1>>2]|0;
        $188 = (($187) + ($186<<2)|0);
        $189 = +HEAPF32[$188>>2];
        $190 = +HEAPF32[$w>>2];
        $191 = $189 * $190;
        $192 = HEAP32[$k>>2]|0;
        $193 = (3 + ($192))|0;
        $194 = $193<<5;
        $195 = HEAP32[$band1>>2]|0;
        $196 = (($195) + ($194<<2)|0);
        $197 = +HEAPF32[$196>>2];
        $198 = $191 + $197;
        $199 = HEAP32[$k>>2]|0;
        $200 = ($199*3)|0;
        $201 = (($200) + 19)|0;
        $202 = HEAP32[$mdct_enc>>2]|0;
        $203 = (($202) + ($201<<2)|0);
        HEAPF32[$203>>2] = $198;
        $204 = HEAP32[$k>>2]|0;
        $205 = (3 + ($204))|0;
        $206 = $205<<5;
        $207 = HEAP32[$band1>>2]|0;
        $208 = (($207) + ($206<<2)|0);
        $209 = +HEAPF32[$208>>2];
        $210 = +HEAPF32[$w>>2];
        $211 = $209 * $210;
        $212 = HEAP32[$k>>2]|0;
        $213 = (2 - ($212))|0;
        $214 = $213<<5;
        $215 = HEAP32[$band1>>2]|0;
        $216 = (($215) + ($214<<2)|0);
        $217 = +HEAPF32[$216>>2];
        $218 = $211 - $217;
        $219 = HEAP32[$k>>2]|0;
        $220 = ($219*3)|0;
        $221 = (($220) + 11)|0;
        $222 = HEAP32[$mdct_enc>>2]|0;
        $223 = (($222) + ($221<<2)|0);
        HEAPF32[$223>>2] = $218;
        $224 = HEAP32[$k>>2]|0;
        $225 = (8 - ($224))|0;
        $226 = $225<<5;
        $227 = HEAP32[$band1>>2]|0;
        $228 = (($227) + ($226<<2)|0);
        $229 = +HEAPF32[$228>>2];
        $230 = +HEAPF32[$w>>2];
        $231 = $229 * $230;
        $232 = HEAP32[$k>>2]|0;
        $233 = (9 + ($232))|0;
        $234 = $233<<5;
        $235 = HEAP32[$band1>>2]|0;
        $236 = (($235) + ($234<<2)|0);
        $237 = +HEAPF32[$236>>2];
        $238 = $231 + $237;
        $239 = HEAP32[$k>>2]|0;
        $240 = ($239*3)|0;
        $241 = (($240) + 20)|0;
        $242 = HEAP32[$mdct_enc>>2]|0;
        $243 = (($242) + ($241<<2)|0);
        HEAPF32[$243>>2] = $238;
        $244 = HEAP32[$k>>2]|0;
        $245 = (($244) + 1)|0;
        HEAP32[$k>>2] = $245;
       }
       $246 = HEAP32[$mdct_enc>>2]|0;
       _mdct_short($246);
       break;
      } else {
       HEAP32[$k>>2] = -9;
       while(1) {
        $247 = HEAP32[$k>>2]|0;
        $248 = ($247|0)<(0);
        if (!($248)) {
         break;
        }
        $249 = HEAP32[$k>>2]|0;
        $250 = (($249) + 27)|0;
        $251 = HEAP32[$type>>2]|0;
        $252 = (16552 + (($251*144)|0)|0);
        $253 = (($252) + ($250<<2)|0);
        $254 = +HEAPF32[$253>>2];
        $255 = HEAP32[$k>>2]|0;
        $256 = (($255) + 9)|0;
        $257 = $256<<5;
        $258 = HEAP32[$band1>>2]|0;
        $259 = (($258) + ($257<<2)|0);
        $260 = +HEAPF32[$259>>2];
        $261 = $254 * $260;
        $262 = HEAP32[$k>>2]|0;
        $263 = (($262) + 36)|0;
        $264 = HEAP32[$type>>2]|0;
        $265 = (16552 + (($264*144)|0)|0);
        $266 = (($265) + ($263<<2)|0);
        $267 = +HEAPF32[$266>>2];
        $268 = HEAP32[$k>>2]|0;
        $269 = (8 - ($268))|0;
        $270 = $269<<5;
        $271 = HEAP32[$band1>>2]|0;
        $272 = (($271) + ($270<<2)|0);
        $273 = +HEAPF32[$272>>2];
        $274 = $267 * $273;
        $275 = $261 + $274;
        HEAPF32[$a>>2] = $275;
        $276 = HEAP32[$k>>2]|0;
        $277 = (($276) + 9)|0;
        $278 = HEAP32[$type>>2]|0;
        $279 = (16552 + (($278*144)|0)|0);
        $280 = (($279) + ($277<<2)|0);
        $281 = +HEAPF32[$280>>2];
        $282 = HEAP32[$k>>2]|0;
        $283 = (($282) + 9)|0;
        $284 = $283<<5;
        $285 = HEAP32[$band0>>2]|0;
        $286 = (($285) + ($284<<2)|0);
        $287 = +HEAPF32[$286>>2];
        $288 = $281 * $287;
        $289 = HEAP32[$k>>2]|0;
        $290 = (($289) + 18)|0;
        $291 = HEAP32[$type>>2]|0;
        $292 = (16552 + (($291*144)|0)|0);
        $293 = (($292) + ($290<<2)|0);
        $294 = +HEAPF32[$293>>2];
        $295 = HEAP32[$k>>2]|0;
        $296 = (8 - ($295))|0;
        $297 = $296<<5;
        $298 = HEAP32[$band0>>2]|0;
        $299 = (($298) + ($297<<2)|0);
        $300 = +HEAPF32[$299>>2];
        $301 = $294 * $300;
        $302 = $288 - $301;
        HEAPF32[$b>>2] = $302;
        $303 = +HEAPF32[$a>>2];
        $304 = +HEAPF32[$b>>2];
        $305 = HEAP32[$k>>2]|0;
        $306 = (($305) + 9)|0;
        $307 = (((16552 + 300|0)) + ($306<<2)|0);
        $308 = +HEAPF32[$307>>2];
        $309 = $304 * $308;
        $310 = $303 - $309;
        $311 = HEAP32[$k>>2]|0;
        $312 = (($311) + 9)|0;
        $313 = (($work) + ($312<<2)|0);
        HEAPF32[$313>>2] = $310;
        $314 = +HEAPF32[$a>>2];
        $315 = HEAP32[$k>>2]|0;
        $316 = (($315) + 9)|0;
        $317 = (((16552 + 300|0)) + ($316<<2)|0);
        $318 = +HEAPF32[$317>>2];
        $319 = $314 * $318;
        $320 = +HEAPF32[$b>>2];
        $321 = $319 + $320;
        $322 = HEAP32[$k>>2]|0;
        $323 = (($322) + 18)|0;
        $324 = (($work) + ($323<<2)|0);
        HEAPF32[$324>>2] = $321;
        $325 = HEAP32[$k>>2]|0;
        $326 = (($325) + 1)|0;
        HEAP32[$k>>2] = $326;
       }
       $327 = HEAP32[$mdct_enc>>2]|0;
       _mdct_long($327,$work);
       break;
      }
     }
    } while(0);
    $328 = HEAP32[$type>>2]|0;
    $329 = ($328|0)!=(2);
    L43: do {
     if ($329) {
      $330 = HEAP32[$band>>2]|0;
      $331 = ($330|0)!=(0);
      if ($331) {
       HEAP32[$k>>2] = 7;
       while(1) {
        $332 = HEAP32[$k>>2]|0;
        $333 = ($332|0)>=(0);
        if (!($333)) {
         break L43;
        }
        $334 = HEAP32[$k>>2]|0;
        $335 = HEAP32[$mdct_enc>>2]|0;
        $336 = (($335) + ($334<<2)|0);
        $337 = +HEAPF32[$336>>2];
        $338 = HEAP32[$k>>2]|0;
        $339 = (((16552 + 368|0)) + ($338<<2)|0);
        $340 = +HEAPF32[$339>>2];
        $341 = $337 * $340;
        $342 = HEAP32[$k>>2]|0;
        $343 = (-1 - ($342))|0;
        $344 = HEAP32[$mdct_enc>>2]|0;
        $345 = (($344) + ($343<<2)|0);
        $346 = +HEAPF32[$345>>2];
        $347 = HEAP32[$k>>2]|0;
        $348 = (((16552 + 400|0)) + ($347<<2)|0);
        $349 = +HEAPF32[$348>>2];
        $350 = $346 * $349;
        $351 = $341 + $350;
        HEAPF32[$bu>>2] = $351;
        $352 = HEAP32[$k>>2]|0;
        $353 = HEAP32[$mdct_enc>>2]|0;
        $354 = (($353) + ($352<<2)|0);
        $355 = +HEAPF32[$354>>2];
        $356 = HEAP32[$k>>2]|0;
        $357 = (((16552 + 400|0)) + ($356<<2)|0);
        $358 = +HEAPF32[$357>>2];
        $359 = $355 * $358;
        $360 = HEAP32[$k>>2]|0;
        $361 = (-1 - ($360))|0;
        $362 = HEAP32[$mdct_enc>>2]|0;
        $363 = (($362) + ($361<<2)|0);
        $364 = +HEAPF32[$363>>2];
        $365 = HEAP32[$k>>2]|0;
        $366 = (((16552 + 368|0)) + ($365<<2)|0);
        $367 = +HEAPF32[$366>>2];
        $368 = $364 * $367;
        $369 = $359 - $368;
        HEAPF32[$bd>>2] = $369;
        $370 = +HEAPF32[$bu>>2];
        $371 = HEAP32[$k>>2]|0;
        $372 = (-1 - ($371))|0;
        $373 = HEAP32[$mdct_enc>>2]|0;
        $374 = (($373) + ($372<<2)|0);
        HEAPF32[$374>>2] = $370;
        $375 = +HEAPF32[$bd>>2];
        $376 = HEAP32[$k>>2]|0;
        $377 = HEAP32[$mdct_enc>>2]|0;
        $378 = (($377) + ($376<<2)|0);
        HEAPF32[$378>>2] = $375;
        $379 = HEAP32[$k>>2]|0;
        $380 = (($379) + -1)|0;
        HEAP32[$k>>2] = $380;
       }
      }
     }
    } while(0);
    $381 = HEAP32[$band>>2]|0;
    $382 = (($381) + 1)|0;
    HEAP32[$band>>2] = $382;
    $383 = HEAP32[$mdct_enc>>2]|0;
    $384 = (($383) + 72|0);
    HEAP32[$mdct_enc>>2] = $384;
   }
   $385 = HEAP32[$gr>>2]|0;
   $386 = (($385) + 1)|0;
   HEAP32[$gr>>2] = $386;
  }
  $387 = HEAP32[$2>>2]|0;
  $388 = (($387) + 1144|0);
  HEAP32[$wk>>2] = $388;
  $389 = HEAP32[$cfg>>2]|0;
  $390 = (($389) + 60|0);
  $391 = HEAP32[$390>>2]|0;
  $392 = ($391|0)==(1);
  if ($392) {
   $393 = HEAP32[$ch>>2]|0;
   $394 = HEAP32[$esv>>2]|0;
   $395 = (($394) + (($393*4608)|0)|0);
   $396 = HEAP32[$ch>>2]|0;
   $397 = HEAP32[$esv>>2]|0;
   $398 = (($397) + (($396*4608)|0)|0);
   $399 = (($398) + 2304|0);
   _memcpy(($395|0),($399|0),2304)|0;
  }
  $400 = HEAP32[$ch>>2]|0;
  $401 = (($400) + 1)|0;
  HEAP32[$ch>>2] = $401;
 }
 STACKTOP = sp;return;
}
function _window_subband($x1,$a) {
 $x1 = $x1|0;
 $a = $a|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0.0, $1000 = 0.0, $1001 = 0, $1002 = 0, $1003 = 0.0, $1004 = 0.0, $1005 = 0.0, $1006 = 0, $1007 = 0, $1008 = 0.0, $1009 = 0.0, $101 = 0.0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0.0;
 var $1015 = 0, $1016 = 0, $1017 = 0.0, $1018 = 0.0, $1019 = 0, $102 = 0.0, $1020 = 0, $1021 = 0.0, $1022 = 0, $1023 = 0, $1024 = 0.0, $1025 = 0.0, $1026 = 0.0, $1027 = 0, $1028 = 0, $1029 = 0.0, $103 = 0.0, $1030 = 0.0, $1031 = 0, $1032 = 0;
 var $1033 = 0, $1034 = 0, $1035 = 0.0, $1036 = 0.0, $1037 = 0, $1038 = 0, $1039 = 0.0, $104 = 0, $1040 = 0.0, $1041 = 0, $1042 = 0, $1043 = 0.0, $1044 = 0, $1045 = 0, $1046 = 0.0, $1047 = 0.0, $1048 = 0.0, $1049 = 0, $105 = 0, $1050 = 0;
 var $1051 = 0.0, $1052 = 0.0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0.0, $1058 = 0, $1059 = 0, $106 = 0.0, $1060 = 0.0, $1061 = 0.0, $1062 = 0.0, $1063 = 0.0, $1064 = 0.0, $1065 = 0, $1066 = 0, $1067 = 0.0, $1068 = 0, $1069 = 0;
 var $107 = 0, $1070 = 0.0, $1071 = 0.0, $1072 = 0.0, $1073 = 0, $1074 = 0, $1075 = 0, $1076 = 0, $1077 = 0.0, $1078 = 0, $1079 = 0, $108 = 0, $1080 = 0.0, $1081 = 0.0, $1082 = 0.0, $1083 = 0.0, $1084 = 0.0, $1085 = 0, $1086 = 0, $1087 = 0.0;
 var $1088 = 0, $1089 = 0, $109 = 0.0, $1090 = 0.0, $1091 = 0.0, $1092 = 0.0, $1093 = 0, $1094 = 0, $1095 = 0, $1096 = 0, $1097 = 0.0, $1098 = 0.0, $1099 = 0, $11 = 0.0, $110 = 0.0, $1100 = 0, $1101 = 0.0, $1102 = 0.0, $1103 = 0.0, $1104 = 0.0;
 var $1105 = 0.0, $1106 = 0, $1107 = 0, $1108 = 0.0, $1109 = 0, $111 = 0.0, $1110 = 0, $1111 = 0.0, $1112 = 0.0, $1113 = 0.0, $1114 = 0, $1115 = 0, $1116 = 0.0, $1117 = 0.0, $1118 = 0, $1119 = 0, $112 = 0.0, $1120 = 0, $1121 = 0, $1122 = 0.0;
 var $1123 = 0.0, $1124 = 0, $1125 = 0, $1126 = 0.0, $1127 = 0.0, $1128 = 0.0, $1129 = 0.0, $113 = 0.0, $1130 = 0.0, $1131 = 0, $1132 = 0, $1133 = 0.0, $1134 = 0, $1135 = 0, $1136 = 0.0, $1137 = 0.0, $1138 = 0.0, $1139 = 0, $114 = 0, $1140 = 0;
 var $1141 = 0.0, $1142 = 0.0, $1143 = 0, $1144 = 0, $1145 = 0, $1146 = 0, $1147 = 0.0, $1148 = 0, $1149 = 0, $115 = 0, $1150 = 0.0, $1151 = 0, $1152 = 0, $1153 = 0.0, $1154 = 0.0, $1155 = 0.0, $1156 = 0, $1157 = 0, $1158 = 0.0, $1159 = 0.0;
 var $116 = 0.0, $1160 = 0, $1161 = 0, $1162 = 0.0, $1163 = 0.0, $1164 = 0.0, $1165 = 0, $1166 = 0, $1167 = 0.0, $1168 = 0, $1169 = 0, $117 = 0.0, $1170 = 0.0, $1171 = 0.0, $1172 = 0, $1173 = 0, $1174 = 0.0, $1175 = 0, $1176 = 0, $1177 = 0.0;
 var $1178 = 0, $1179 = 0, $118 = 0.0, $1180 = 0.0, $1181 = 0.0, $1182 = 0.0, $1183 = 0, $1184 = 0, $1185 = 0.0, $1186 = 0.0, $1187 = 0, $1188 = 0, $1189 = 0.0, $119 = 0.0, $1190 = 0.0, $1191 = 0.0, $1192 = 0, $1193 = 0, $1194 = 0.0, $1195 = 0;
 var $1196 = 0, $1197 = 0.0, $1198 = 0.0, $1199 = 0, $12 = 0.0, $120 = 0.0, $1200 = 0, $1201 = 0.0, $1202 = 0, $1203 = 0, $1204 = 0.0, $1205 = 0, $1206 = 0, $1207 = 0.0, $1208 = 0.0, $1209 = 0.0, $121 = 0, $1210 = 0, $1211 = 0, $1212 = 0.0;
 var $1213 = 0.0, $1214 = 0, $1215 = 0, $1216 = 0.0, $1217 = 0.0, $1218 = 0.0, $1219 = 0, $122 = 0, $1220 = 0, $1221 = 0.0, $1222 = 0, $1223 = 0, $1224 = 0.0, $1225 = 0.0, $1226 = 0, $1227 = 0, $1228 = 0.0, $1229 = 0.0, $123 = 0.0, $1230 = 0;
 var $1231 = 0, $1232 = 0.0, $1233 = 0.0, $1234 = 0, $1235 = 0, $1236 = 0.0, $1237 = 0.0, $1238 = 0.0, $1239 = 0, $124 = 0, $1240 = 0, $1241 = 0.0, $1242 = 0, $1243 = 0, $1244 = 0.0, $1245 = 0.0, $1246 = 0, $1247 = 0, $1248 = 0.0, $1249 = 0.0;
 var $125 = 0, $1250 = 0, $1251 = 0, $1252 = 0.0, $1253 = 0.0, $1254 = 0, $1255 = 0, $1256 = 0.0, $1257 = 0.0, $1258 = 0.0, $1259 = 0, $126 = 0.0, $1260 = 0, $1261 = 0.0, $1262 = 0, $1263 = 0, $1264 = 0.0, $1265 = 0.0, $1266 = 0, $1267 = 0;
 var $1268 = 0.0, $1269 = 0.0, $127 = 0.0, $1270 = 0, $1271 = 0, $1272 = 0.0, $1273 = 0.0, $1274 = 0, $1275 = 0, $1276 = 0.0, $1277 = 0.0, $1278 = 0.0, $1279 = 0, $128 = 0.0, $1280 = 0, $1281 = 0.0, $1282 = 0, $1283 = 0, $1284 = 0.0, $1285 = 0.0;
 var $1286 = 0, $1287 = 0, $1288 = 0.0, $1289 = 0.0, $129 = 0.0, $1290 = 0, $1291 = 0, $1292 = 0.0, $1293 = 0.0, $1294 = 0, $1295 = 0, $1296 = 0.0, $1297 = 0.0, $1298 = 0.0, $1299 = 0, $13 = 0.0, $130 = 0.0, $1300 = 0, $1301 = 0.0, $1302 = 0;
 var $1303 = 0, $1304 = 0.0, $1305 = 0.0, $1306 = 0, $1307 = 0, $1308 = 0.0, $1309 = 0, $131 = 0, $1310 = 0, $1311 = 0.0, $1312 = 0.0, $1313 = 0.0, $1314 = 0, $1315 = 0, $1316 = 0.0, $1317 = 0, $1318 = 0, $1319 = 0.0, $132 = 0, $1320 = 0.0;
 var $1321 = 0, $1322 = 0.0, $1323 = 0, $1324 = 0, $1325 = 0.0, $1326 = 0.0, $1327 = 0.0, $1328 = 0.0, $1329 = 0.0, $133 = 0.0, $1330 = 0, $1331 = 0, $1332 = 0.0, $1333 = 0, $1334 = 0.0, $1335 = 0.0, $1336 = 0.0, $1337 = 0, $1338 = 0, $1339 = 0;
 var $134 = 0.0, $1340 = 0, $1341 = 0.0, $1342 = 0, $1343 = 0, $1344 = 0.0, $1345 = 0.0, $1346 = 0.0, $1347 = 0.0, $1348 = 0.0, $1349 = 0, $135 = 0.0, $1350 = 0, $1351 = 0.0, $1352 = 0, $1353 = 0, $1354 = 0.0, $1355 = 0.0, $1356 = 0.0, $1357 = 0;
 var $1358 = 0, $1359 = 0, $136 = 0.0, $1360 = 0, $1361 = 0.0, $1362 = 0, $1363 = 0, $1364 = 0.0, $1365 = 0.0, $1366 = 0.0, $1367 = 0.0, $1368 = 0.0, $1369 = 0, $137 = 0.0, $1370 = 0, $1371 = 0.0, $1372 = 0, $1373 = 0, $1374 = 0.0, $1375 = 0.0;
 var $1376 = 0.0, $1377 = 0, $1378 = 0, $1379 = 0, $138 = 0, $1380 = 0, $1381 = 0.0, $1382 = 0, $1383 = 0, $1384 = 0.0, $1385 = 0.0, $1386 = 0.0, $1387 = 0.0, $1388 = 0.0, $1389 = 0, $139 = 0, $1390 = 0, $1391 = 0.0, $1392 = 0, $1393 = 0;
 var $1394 = 0.0, $1395 = 0.0, $1396 = 0.0, $1397 = 0, $1398 = 0, $1399 = 0, $14 = 0, $140 = 0.0, $1400 = 0, $1401 = 0.0, $1402 = 0, $1403 = 0, $1404 = 0.0, $1405 = 0.0, $1406 = 0.0, $1407 = 0.0, $1408 = 0.0, $1409 = 0, $141 = 0, $1410 = 0;
 var $1411 = 0.0, $1412 = 0, $1413 = 0, $1414 = 0.0, $1415 = 0.0, $1416 = 0.0, $1417 = 0, $1418 = 0, $1419 = 0.0, $142 = 0, $1420 = 0.0, $1421 = 0, $1422 = 0, $1423 = 0, $1424 = 0, $1425 = 0.0, $1426 = 0, $1427 = 0, $1428 = 0.0, $1429 = 0.0;
 var $143 = 0.0, $1430 = 0.0, $1431 = 0.0, $1432 = 0.0, $1433 = 0, $1434 = 0, $1435 = 0.0, $1436 = 0, $1437 = 0, $1438 = 0.0, $1439 = 0.0, $144 = 0.0, $1440 = 0.0, $1441 = 0, $1442 = 0, $1443 = 0.0, $1444 = 0.0, $1445 = 0, $1446 = 0, $1447 = 0;
 var $1448 = 0, $1449 = 0.0, $145 = 0.0, $1450 = 0, $1451 = 0, $1452 = 0.0, $1453 = 0.0, $1454 = 0.0, $1455 = 0.0, $1456 = 0.0, $1457 = 0, $1458 = 0, $1459 = 0.0, $146 = 0.0, $1460 = 0, $1461 = 0, $1462 = 0.0, $1463 = 0.0, $1464 = 0.0, $1465 = 0;
 var $1466 = 0, $1467 = 0.0, $1468 = 0.0, $1469 = 0, $147 = 0.0, $1470 = 0, $1471 = 0, $1472 = 0, $1473 = 0.0, $1474 = 0, $1475 = 0, $1476 = 0.0, $1477 = 0.0, $1478 = 0.0, $1479 = 0.0, $148 = 0, $1480 = 0.0, $1481 = 0, $1482 = 0, $1483 = 0.0;
 var $1484 = 0, $1485 = 0, $1486 = 0.0, $1487 = 0.0, $1488 = 0.0, $1489 = 0, $149 = 0, $1490 = 0, $1491 = 0.0, $1492 = 0.0, $1493 = 0, $1494 = 0, $1495 = 0, $1496 = 0, $1497 = 0.0, $1498 = 0, $1499 = 0, $15 = 0, $150 = 0.0, $1500 = 0.0;
 var $1501 = 0.0, $1502 = 0.0, $1503 = 0, $1504 = 0, $1505 = 0, $1506 = 0, $1507 = 0.0, $1508 = 0.0, $1509 = 0.0, $151 = 0.0, $1510 = 0.0, $1511 = 0, $1512 = 0, $1513 = 0, $1514 = 0, $1515 = 0.0, $1516 = 0.0, $1517 = 0.0, $1518 = 0.0, $1519 = 0;
 var $152 = 0.0, $1520 = 0, $1521 = 0, $1522 = 0, $1523 = 0.0, $1524 = 0, $1525 = 0, $1526 = 0.0, $1527 = 0.0, $1528 = 0.0, $1529 = 0, $153 = 0.0, $1530 = 0, $1531 = 0, $1532 = 0, $1533 = 0.0, $1534 = 0.0, $1535 = 0.0, $1536 = 0.0, $1537 = 0;
 var $1538 = 0, $1539 = 0, $154 = 0.0, $1540 = 0, $1541 = 0.0, $1542 = 0.0, $1543 = 0.0, $1544 = 0.0, $1545 = 0, $1546 = 0, $1547 = 0, $1548 = 0, $1549 = 0.0, $155 = 0, $1550 = 0, $1551 = 0, $1552 = 0.0, $1553 = 0.0, $1554 = 0.0, $1555 = 0;
 var $1556 = 0, $1557 = 0, $1558 = 0, $1559 = 0.0, $156 = 0, $1560 = 0.0, $1561 = 0.0, $1562 = 0.0, $1563 = 0, $1564 = 0, $1565 = 0, $1566 = 0, $1567 = 0.0, $1568 = 0.0, $1569 = 0.0, $157 = 0.0, $1570 = 0.0, $1571 = 0, $1572 = 0, $1573 = 0;
 var $1574 = 0, $1575 = 0.0, $1576 = 0.0, $1577 = 0.0, $1578 = 0.0, $1579 = 0, $158 = 0, $1580 = 0, $1581 = 0, $1582 = 0, $1583 = 0.0, $1584 = 0.0, $1585 = 0.0, $1586 = 0.0, $1587 = 0, $1588 = 0, $1589 = 0, $159 = 0, $1590 = 0, $1591 = 0.0;
 var $1592 = 0.0, $1593 = 0.0, $1594 = 0.0, $1595 = 0, $1596 = 0, $1597 = 0, $1598 = 0, $1599 = 0.0, $16 = 0.0, $160 = 0.0, $1600 = 0.0, $1601 = 0.0, $1602 = 0.0, $1603 = 0, $1604 = 0, $1605 = 0, $1606 = 0, $1607 = 0.0, $1608 = 0, $1609 = 0.0;
 var $161 = 0.0, $1610 = 0.0, $1611 = 0.0, $1612 = 0, $1613 = 0, $1614 = 0, $1615 = 0, $1616 = 0.0, $1617 = 0.0, $1618 = 0.0, $1619 = 0.0, $162 = 0.0, $1620 = 0, $1621 = 0, $1622 = 0, $1623 = 0, $1624 = 0.0, $1625 = 0.0, $1626 = 0.0, $1627 = 0.0;
 var $1628 = 0, $1629 = 0, $163 = 0.0, $1630 = 0, $1631 = 0, $1632 = 0.0, $1633 = 0.0, $1634 = 0.0, $1635 = 0.0, $1636 = 0, $1637 = 0, $1638 = 0, $1639 = 0, $164 = 0.0, $1640 = 0.0, $1641 = 0.0, $1642 = 0.0, $1643 = 0.0, $1644 = 0, $1645 = 0;
 var $1646 = 0, $1647 = 0, $1648 = 0.0, $1649 = 0.0, $165 = 0, $1650 = 0.0, $1651 = 0.0, $1652 = 0, $1653 = 0, $1654 = 0, $1655 = 0, $1656 = 0.0, $1657 = 0.0, $1658 = 0.0, $1659 = 0.0, $166 = 0, $1660 = 0, $1661 = 0, $1662 = 0, $1663 = 0;
 var $1664 = 0.0, $1665 = 0.0, $1666 = 0.0, $1667 = 0.0, $1668 = 0, $1669 = 0, $167 = 0.0, $1670 = 0, $1671 = 0, $1672 = 0.0, $1673 = 0.0, $1674 = 0.0, $1675 = 0.0, $1676 = 0, $1677 = 0, $1678 = 0, $1679 = 0, $168 = 0.0, $1680 = 0.0, $1681 = 0.0;
 var $1682 = 0.0, $1683 = 0.0, $1684 = 0, $1685 = 0, $1686 = 0, $1687 = 0, $1688 = 0.0, $1689 = 0.0, $169 = 0.0, $1690 = 0.0, $1691 = 0.0, $1692 = 0, $1693 = 0, $1694 = 0, $1695 = 0, $1696 = 0.0, $1697 = 0.0, $1698 = 0.0, $1699 = 0.0, $17 = 0.0;
 var $170 = 0.0, $1700 = 0, $1701 = 0, $1702 = 0, $1703 = 0, $1704 = 0.0, $1705 = 0.0, $1706 = 0.0, $1707 = 0.0, $1708 = 0, $1709 = 0, $171 = 0.0, $1710 = 0, $1711 = 0, $1712 = 0.0, $1713 = 0.0, $1714 = 0.0, $1715 = 0.0, $1716 = 0, $1717 = 0;
 var $1718 = 0, $1719 = 0, $172 = 0, $1720 = 0.0, $1721 = 0.0, $1722 = 0.0, $1723 = 0.0, $1724 = 0, $1725 = 0, $1726 = 0, $1727 = 0.0, $1728 = 0, $1729 = 0, $173 = 0.0, $1730 = 0.0, $1731 = 0, $1732 = 0.0, $1733 = 0.0, $1734 = 0.0, $1735 = 0;
 var $1736 = 0, $1737 = 0.0, $1738 = 0.0, $1739 = 0, $174 = 0, $1740 = 0, $1741 = 0.0, $1742 = 0, $1743 = 0, $1744 = 0.0, $1745 = 0, $1746 = 0, $1747 = 0.0, $1748 = 0.0, $1749 = 0.0, $175 = 0, $1750 = 0, $1751 = 0, $1752 = 0.0, $1753 = 0.0;
 var $1754 = 0, $1755 = 0, $1756 = 0.0, $1757 = 0, $1758 = 0, $1759 = 0.0, $176 = 0.0, $1760 = 0, $1761 = 0, $1762 = 0.0, $1763 = 0.0, $1764 = 0.0, $1765 = 0, $1766 = 0, $1767 = 0.0, $1768 = 0.0, $1769 = 0, $177 = 0.0, $1770 = 0, $1771 = 0.0;
 var $1772 = 0, $1773 = 0, $1774 = 0.0, $1775 = 0, $1776 = 0, $1777 = 0.0, $1778 = 0.0, $1779 = 0.0, $178 = 0.0, $1780 = 0, $1781 = 0, $1782 = 0.0, $1783 = 0.0, $1784 = 0, $1785 = 0, $1786 = 0.0, $1787 = 0, $1788 = 0, $1789 = 0.0, $179 = 0.0;
 var $1790 = 0, $1791 = 0, $1792 = 0.0, $1793 = 0.0, $1794 = 0.0, $1795 = 0, $1796 = 0, $1797 = 0.0, $1798 = 0.0, $1799 = 0, $18 = 0.0, $180 = 0.0, $1800 = 0, $1801 = 0.0, $1802 = 0, $1803 = 0, $1804 = 0.0, $1805 = 0, $1806 = 0, $1807 = 0.0;
 var $1808 = 0.0, $1809 = 0.0, $181 = 0, $1810 = 0, $1811 = 0, $1812 = 0.0, $1813 = 0.0, $1814 = 0, $1815 = 0, $1816 = 0.0, $1817 = 0, $1818 = 0, $1819 = 0.0, $182 = 0, $1820 = 0, $1821 = 0, $1822 = 0.0, $1823 = 0.0, $1824 = 0.0, $1825 = 0;
 var $1826 = 0, $1827 = 0.0, $1828 = 0.0, $1829 = 0, $183 = 0.0, $1830 = 0, $1831 = 0.0, $1832 = 0, $1833 = 0, $1834 = 0.0, $1835 = 0, $1836 = 0, $1837 = 0.0, $1838 = 0.0, $1839 = 0.0, $184 = 0.0, $1840 = 0, $1841 = 0, $1842 = 0.0, $1843 = 0.0;
 var $1844 = 0, $1845 = 0, $1846 = 0.0, $1847 = 0, $1848 = 0, $1849 = 0.0, $185 = 0.0, $1850 = 0, $1851 = 0, $1852 = 0.0, $1853 = 0.0, $1854 = 0.0, $1855 = 0, $1856 = 0, $1857 = 0.0, $1858 = 0.0, $1859 = 0, $186 = 0.0, $1860 = 0, $1861 = 0.0;
 var $1862 = 0, $1863 = 0, $1864 = 0.0, $1865 = 0, $1866 = 0, $1867 = 0.0, $1868 = 0.0, $1869 = 0.0, $187 = 0.0, $1870 = 0, $1871 = 0, $1872 = 0.0, $1873 = 0.0, $1874 = 0, $1875 = 0, $1876 = 0.0, $1877 = 0, $1878 = 0, $1879 = 0.0, $188 = 0;
 var $1880 = 0, $1881 = 0, $1882 = 0.0, $1883 = 0.0, $1884 = 0.0, $1885 = 0, $1886 = 0, $1887 = 0.0, $1888 = 0.0, $1889 = 0, $189 = 0, $1890 = 0, $1891 = 0.0, $1892 = 0, $1893 = 0, $1894 = 0.0, $1895 = 0, $1896 = 0, $1897 = 0.0, $1898 = 0.0;
 var $1899 = 0.0, $19 = 0, $190 = 0.0, $1900 = 0, $1901 = 0, $1902 = 0.0, $1903 = 0.0, $1904 = 0, $1905 = 0, $1906 = 0.0, $1907 = 0, $1908 = 0, $1909 = 0.0, $191 = 0, $1910 = 0, $1911 = 0, $1912 = 0.0, $1913 = 0.0, $1914 = 0.0, $1915 = 0;
 var $1916 = 0, $1917 = 0.0, $1918 = 0.0, $1919 = 0, $192 = 0, $1920 = 0, $1921 = 0.0, $1922 = 0, $1923 = 0, $1924 = 0.0, $1925 = 0, $1926 = 0, $1927 = 0.0, $1928 = 0.0, $1929 = 0.0, $193 = 0.0, $1930 = 0, $1931 = 0, $1932 = 0.0, $1933 = 0.0;
 var $1934 = 0, $1935 = 0, $1936 = 0.0, $1937 = 0, $1938 = 0, $1939 = 0.0, $194 = 0.0, $1940 = 0, $1941 = 0, $1942 = 0.0, $1943 = 0.0, $1944 = 0.0, $1945 = 0, $1946 = 0, $1947 = 0.0, $1948 = 0.0, $1949 = 0, $195 = 0.0, $1950 = 0, $1951 = 0.0;
 var $1952 = 0, $1953 = 0, $1954 = 0.0, $1955 = 0, $1956 = 0, $1957 = 0.0, $1958 = 0.0, $1959 = 0.0, $196 = 0.0, $1960 = 0, $1961 = 0, $1962 = 0.0, $1963 = 0.0, $197 = 0.0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0.0, $201 = 0.0;
 var $202 = 0.0, $203 = 0.0, $204 = 0.0, $205 = 0, $206 = 0, $207 = 0.0, $208 = 0, $209 = 0.0, $21 = 0.0, $210 = 0.0, $211 = 0.0, $212 = 0.0, $213 = 0.0, $214 = 0, $215 = 0.0, $216 = 0.0, $217 = 0.0, $218 = 0.0, $219 = 0.0, $22 = 0;
 var $220 = 0, $221 = 0, $222 = 0.0, $223 = 0, $224 = 0, $225 = 0.0, $226 = 0.0, $227 = 0.0, $228 = 0.0, $229 = 0.0, $23 = 0, $230 = 0, $231 = 0, $232 = 0.0, $233 = 0.0, $234 = 0.0, $235 = 0.0, $236 = 0.0, $237 = 0, $238 = 0;
 var $239 = 0.0, $24 = 0.0, $240 = 0, $241 = 0, $242 = 0.0, $243 = 0.0, $244 = 0.0, $245 = 0.0, $246 = 0.0, $247 = 0, $248 = 0, $249 = 0.0, $25 = 0.0, $250 = 0.0, $251 = 0.0, $252 = 0.0, $253 = 0.0, $254 = 0, $255 = 0, $256 = 0.0;
 var $257 = 0, $258 = 0, $259 = 0.0, $26 = 0.0, $260 = 0.0, $261 = 0.0, $262 = 0.0, $263 = 0.0, $264 = 0, $265 = 0, $266 = 0.0, $267 = 0.0, $268 = 0.0, $269 = 0.0, $27 = 0.0, $270 = 0.0, $271 = 0, $272 = 0, $273 = 0.0, $274 = 0.0;
 var $275 = 0.0, $276 = 0.0, $277 = 0.0, $278 = 0.0, $279 = 0.0, $28 = 0.0, $280 = 0.0, $281 = 0.0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0.0, $29 = 0, $290 = 0.0, $291 = 0.0, $292 = 0;
 var $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0.0, $308 = 0, $309 = 0, $31 = 0.0;
 var $310 = 0.0, $311 = 0.0, $312 = 0, $313 = 0, $314 = 0.0, $315 = 0, $316 = 0, $317 = 0.0, $318 = 0.0, $319 = 0, $32 = 0.0, $320 = 0, $321 = 0.0, $322 = 0, $323 = 0, $324 = 0.0, $325 = 0.0, $326 = 0, $327 = 0, $328 = 0.0;
 var $329 = 0.0, $33 = 0.0, $330 = 0.0, $331 = 0.0, $332 = 0, $333 = 0, $334 = 0.0, $335 = 0, $336 = 0, $337 = 0.0, $338 = 0.0, $339 = 0.0, $34 = 0.0, $340 = 0.0, $341 = 0, $342 = 0, $343 = 0.0, $344 = 0, $345 = 0, $346 = 0.0;
 var $347 = 0.0, $348 = 0, $349 = 0, $35 = 0.0, $350 = 0.0, $351 = 0.0, $352 = 0.0, $353 = 0.0, $354 = 0, $355 = 0, $356 = 0.0, $357 = 0, $358 = 0.0, $359 = 0.0, $36 = 0, $360 = 0.0, $361 = 0.0, $362 = 0, $363 = 0, $364 = 0.0;
 var $365 = 0, $366 = 0, $367 = 0.0, $368 = 0.0, $369 = 0, $37 = 0, $370 = 0, $371 = 0.0, $372 = 0.0, $373 = 0.0, $374 = 0.0, $375 = 0, $376 = 0, $377 = 0.0, $378 = 0, $379 = 0, $38 = 0.0, $380 = 0.0, $381 = 0.0, $382 = 0.0;
 var $383 = 0.0, $384 = 0, $385 = 0, $386 = 0.0, $387 = 0, $388 = 0, $389 = 0.0, $39 = 0, $390 = 0.0, $391 = 0, $392 = 0, $393 = 0.0, $394 = 0.0, $395 = 0.0, $396 = 0.0, $397 = 0, $398 = 0, $399 = 0.0, $4 = 0, $40 = 0;
 var $400 = 0, $401 = 0, $402 = 0.0, $403 = 0.0, $404 = 0.0, $405 = 0.0, $406 = 0, $407 = 0, $408 = 0.0, $409 = 0, $41 = 0.0, $410 = 0, $411 = 0.0, $412 = 0.0, $413 = 0, $414 = 0, $415 = 0.0, $416 = 0.0, $417 = 0.0, $418 = 0.0;
 var $419 = 0, $42 = 0.0, $420 = 0, $421 = 0.0, $422 = 0, $423 = 0, $424 = 0.0, $425 = 0.0, $426 = 0.0, $427 = 0.0, $428 = 0, $429 = 0, $43 = 0.0, $430 = 0.0, $431 = 0, $432 = 0, $433 = 0.0, $434 = 0.0, $435 = 0, $436 = 0;
 var $437 = 0.0, $438 = 0.0, $439 = 0.0, $44 = 0.0, $440 = 0.0, $441 = 0, $442 = 0, $443 = 0.0, $444 = 0, $445 = 0, $446 = 0.0, $447 = 0.0, $448 = 0.0, $449 = 0.0, $45 = 0.0, $450 = 0, $451 = 0, $452 = 0.0, $453 = 0, $454 = 0;
 var $455 = 0.0, $456 = 0.0, $457 = 0, $458 = 0, $459 = 0.0, $46 = 0, $460 = 0.0, $461 = 0.0, $462 = 0.0, $463 = 0, $464 = 0, $465 = 0.0, $466 = 0.0, $467 = 0.0, $468 = 0.0, $469 = 0.0, $47 = 0, $470 = 0.0, $471 = 0.0, $472 = 0.0;
 var $473 = 0.0, $474 = 0, $475 = 0, $476 = 0.0, $477 = 0, $478 = 0, $479 = 0.0, $48 = 0.0, $480 = 0.0, $481 = 0.0, $482 = 0.0, $483 = 0.0, $484 = 0.0, $485 = 0, $486 = 0, $487 = 0.0, $488 = 0.0, $489 = 0.0, $49 = 0.0, $490 = 0;
 var $491 = 0, $492 = 0.0, $493 = 0.0, $494 = 0.0, $495 = 0, $496 = 0, $497 = 0.0, $498 = 0.0, $499 = 0.0, $5 = 0, $50 = 0.0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0.0, $505 = 0, $506 = 0.0, $507 = 0.0, $508 = 0;
 var $509 = 0, $51 = 0.0, $510 = 0.0, $511 = 0, $512 = 0.0, $513 = 0.0, $514 = 0.0, $515 = 0, $516 = 0, $517 = 0.0, $518 = 0.0, $519 = 0, $52 = 0.0, $520 = 0, $521 = 0, $522 = 0, $523 = 0.0, $524 = 0, $525 = 0, $526 = 0.0;
 var $527 = 0.0, $528 = 0, $529 = 0, $53 = 0, $530 = 0.0, $531 = 0, $532 = 0, $533 = 0.0, $534 = 0.0, $535 = 0.0, $536 = 0, $537 = 0, $538 = 0.0, $539 = 0.0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0.0;
 var $545 = 0, $546 = 0, $547 = 0.0, $548 = 0.0, $549 = 0, $55 = 0.0, $550 = 0, $551 = 0.0, $552 = 0, $553 = 0, $554 = 0.0, $555 = 0.0, $556 = 0.0, $557 = 0, $558 = 0, $559 = 0.0, $56 = 0, $560 = 0.0, $561 = 0, $562 = 0;
 var $563 = 0, $564 = 0, $565 = 0.0, $566 = 0, $567 = 0, $568 = 0.0, $569 = 0.0, $57 = 0, $570 = 0, $571 = 0, $572 = 0.0, $573 = 0, $574 = 0, $575 = 0.0, $576 = 0.0, $577 = 0.0, $578 = 0, $579 = 0, $58 = 0.0, $580 = 0.0;
 var $581 = 0.0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0.0, $587 = 0, $588 = 0, $589 = 0.0, $59 = 0.0, $590 = 0.0, $591 = 0, $592 = 0, $593 = 0.0, $594 = 0, $595 = 0, $596 = 0.0, $597 = 0.0, $598 = 0.0, $599 = 0;
 var $6 = 0, $60 = 0.0, $600 = 0, $601 = 0.0, $602 = 0.0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0.0, $608 = 0, $609 = 0, $61 = 0.0, $610 = 0.0, $611 = 0.0, $612 = 0, $613 = 0, $614 = 0.0, $615 = 0, $616 = 0;
 var $617 = 0.0, $618 = 0.0, $619 = 0.0, $62 = 0.0, $620 = 0, $621 = 0, $622 = 0.0, $623 = 0.0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0.0, $629 = 0, $63 = 0, $630 = 0, $631 = 0.0, $632 = 0.0, $633 = 0, $634 = 0;
 var $635 = 0.0, $636 = 0, $637 = 0, $638 = 0.0, $639 = 0.0, $64 = 0, $640 = 0.0, $641 = 0.0, $642 = 0.0, $643 = 0.0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0.0, $649 = 0, $65 = 0.0, $650 = 0, $651 = 0.0, $652 = 0.0;
 var $653 = 0, $654 = 0, $655 = 0.0, $656 = 0, $657 = 0, $658 = 0.0, $659 = 0.0, $66 = 0.0, $660 = 0.0, $661 = 0.0, $662 = 0.0, $663 = 0, $664 = 0, $665 = 0.0, $666 = 0.0, $667 = 0.0, $668 = 0.0, $669 = 0, $67 = 0.0, $670 = 0;
 var $671 = 0, $672 = 0, $673 = 0.0, $674 = 0, $675 = 0, $676 = 0.0, $677 = 0.0, $678 = 0, $679 = 0, $68 = 0.0, $680 = 0.0, $681 = 0, $682 = 0, $683 = 0.0, $684 = 0.0, $685 = 0, $686 = 0, $687 = 0.0, $688 = 0, $689 = 0;
 var $69 = 0.0, $690 = 0.0, $691 = 0.0, $692 = 0, $693 = 0, $694 = 0.0, $695 = 0, $696 = 0, $697 = 0.0, $698 = 0.0, $699 = 0.0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0.0, $705 = 0.0, $706 = 0.0;
 var $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0.0, $712 = 0, $713 = 0, $714 = 0.0, $715 = 0.0, $716 = 0.0, $717 = 0, $718 = 0, $719 = 0, $72 = 0.0, $720 = 0, $721 = 0.0, $722 = 0.0, $723 = 0.0, $724 = 0;
 var $725 = 0, $726 = 0, $727 = 0, $728 = 0.0, $729 = 0, $73 = 0, $730 = 0, $731 = 0.0, $732 = 0.0, $733 = 0.0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0.0, $739 = 0.0, $74 = 0, $740 = 0.0, $741 = 0, $742 = 0;
 var $743 = 0, $744 = 0, $745 = 0.0, $746 = 0, $747 = 0, $748 = 0.0, $749 = 0.0, $75 = 0.0, $750 = 0.0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0.0, $756 = 0.0, $757 = 0.0, $758 = 0, $759 = 0, $76 = 0.0, $760 = 0;
 var $761 = 0, $762 = 0.0, $763 = 0, $764 = 0, $765 = 0.0, $766 = 0.0, $767 = 0, $768 = 0, $769 = 0.0, $77 = 0.0, $770 = 0, $771 = 0, $772 = 0.0, $773 = 0.0, $774 = 0.0, $775 = 0, $776 = 0, $777 = 0.0, $778 = 0.0, $779 = 0;
 var $78 = 0.0, $780 = 0, $781 = 0, $782 = 0, $783 = 0.0, $784 = 0, $785 = 0, $786 = 0.0, $787 = 0.0, $788 = 0, $789 = 0, $79 = 0.0, $790 = 0.0, $791 = 0, $792 = 0, $793 = 0.0, $794 = 0.0, $795 = 0.0, $796 = 0, $797 = 0;
 var $798 = 0.0, $799 = 0.0, $8 = 0.0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0.0, $805 = 0, $806 = 0, $807 = 0.0, $808 = 0.0, $809 = 0, $81 = 0, $810 = 0, $811 = 0.0, $812 = 0, $813 = 0, $814 = 0.0;
 var $815 = 0.0, $816 = 0.0, $817 = 0, $818 = 0, $819 = 0.0, $82 = 0.0, $820 = 0.0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0.0, $826 = 0, $827 = 0, $828 = 0.0, $829 = 0.0, $83 = 0.0, $830 = 0, $831 = 0, $832 = 0.0;
 var $833 = 0, $834 = 0, $835 = 0.0, $836 = 0.0, $837 = 0.0, $838 = 0, $839 = 0, $84 = 0.0, $840 = 0.0, $841 = 0.0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0.0, $847 = 0, $848 = 0, $849 = 0.0, $85 = 0.0, $850 = 0.0;
 var $851 = 0, $852 = 0, $853 = 0.0, $854 = 0, $855 = 0, $856 = 0.0, $857 = 0.0, $858 = 0.0, $859 = 0, $86 = 0.0, $860 = 0, $861 = 0.0, $862 = 0.0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0.0, $868 = 0, $869 = 0;
 var $87 = 0, $870 = 0.0, $871 = 0.0, $872 = 0, $873 = 0, $874 = 0.0, $875 = 0, $876 = 0, $877 = 0.0, $878 = 0.0, $879 = 0.0, $88 = 0, $880 = 0, $881 = 0, $882 = 0.0, $883 = 0.0, $884 = 0, $885 = 0, $886 = 0, $887 = 0;
 var $888 = 0.0, $889 = 0.0, $89 = 0.0, $890 = 0, $891 = 0, $892 = 0.0, $893 = 0.0, $894 = 0, $895 = 0, $896 = 0.0, $897 = 0, $898 = 0, $899 = 0.0, $9 = 0, $90 = 0, $900 = 0.0, $901 = 0.0, $902 = 0, $903 = 0, $904 = 0.0;
 var $905 = 0.0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0.0, $911 = 0.0, $912 = 0, $913 = 0, $914 = 0.0, $915 = 0.0, $916 = 0, $917 = 0, $918 = 0.0, $919 = 0, $92 = 0.0, $920 = 0, $921 = 0.0, $922 = 0.0;
 var $923 = 0.0, $924 = 0, $925 = 0, $926 = 0.0, $927 = 0.0, $928 = 0, $929 = 0, $93 = 0.0, $930 = 0, $931 = 0, $932 = 0.0, $933 = 0, $934 = 0, $935 = 0.0, $936 = 0.0, $937 = 0, $938 = 0, $939 = 0.0, $94 = 0.0, $940 = 0;
 var $941 = 0, $942 = 0.0, $943 = 0.0, $944 = 0.0, $945 = 0, $946 = 0, $947 = 0.0, $948 = 0.0, $949 = 0, $95 = 0.0, $950 = 0, $951 = 0, $952 = 0, $953 = 0.0, $954 = 0, $955 = 0, $956 = 0.0, $957 = 0.0, $958 = 0, $959 = 0;
 var $96 = 0.0, $960 = 0.0, $961 = 0, $962 = 0, $963 = 0.0, $964 = 0.0, $965 = 0.0, $966 = 0, $967 = 0, $968 = 0.0, $969 = 0.0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0.0, $974 = 0, $975 = 0, $976 = 0.0, $977 = 0.0;
 var $978 = 0, $979 = 0, $98 = 0, $980 = 0.0, $981 = 0, $982 = 0.0, $983 = 0.0, $984 = 0.0, $985 = 0, $986 = 0, $987 = 0.0, $988 = 0.0, $989 = 0, $99 = 0.0, $990 = 0, $991 = 0, $992 = 0, $993 = 0.0, $994 = 0, $995 = 0;
 var $996 = 0.0, $997 = 0.0, $998 = 0, $999 = 0, $i = 0, $s = 0, $s1 = 0, $t = 0, $t2 = 0, $u = 0, $v = 0, $w = 0, $wp = 0, $x2 = 0, $xr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $0 = sp + 48|0;
 $1 = sp + 44|0;
 $i = sp + 40|0;
 $wp = sp + 36|0;
 $x2 = sp + 32|0;
 $w = sp + 28|0;
 $s = sp + 24|0;
 $t = sp + 20|0;
 $s1 = sp + 16|0;
 $t2 = sp + 12|0;
 $u = sp + 8|0;
 $v = sp + 4|0;
 $xr = sp;
 HEAP32[$0>>2] = $x1;
 HEAP32[$1>>2] = $a;
 HEAP32[$wp>>2] = ((17128 + 40|0));
 $2 = HEAP32[$0>>2]|0;
 $3 = (($2) + -248|0);
 HEAP32[$x2>>2] = $3;
 HEAP32[$i>>2] = -15;
 while(1) {
  $4 = HEAP32[$i>>2]|0;
  $5 = ($4|0)<(0);
  if (!($5)) {
   break;
  }
  $6 = HEAP32[$wp>>2]|0;
  $7 = (($6) + -40|0);
  $8 = +HEAPF32[$7>>2];
  HEAPF32[$w>>2] = $8;
  $9 = HEAP32[$x2>>2]|0;
  $10 = (($9) + -896|0);
  $11 = +HEAPF32[$10>>2];
  $12 = +HEAPF32[$w>>2];
  $13 = $11 * $12;
  HEAPF32[$s>>2] = $13;
  $14 = HEAP32[$0>>2]|0;
  $15 = (($14) + 896|0);
  $16 = +HEAPF32[$15>>2];
  $17 = +HEAPF32[$w>>2];
  $18 = $16 * $17;
  HEAPF32[$t>>2] = $18;
  $19 = HEAP32[$wp>>2]|0;
  $20 = (($19) + -36|0);
  $21 = +HEAPF32[$20>>2];
  HEAPF32[$w>>2] = $21;
  $22 = HEAP32[$x2>>2]|0;
  $23 = (($22) + -640|0);
  $24 = +HEAPF32[$23>>2];
  $25 = +HEAPF32[$w>>2];
  $26 = $24 * $25;
  $27 = +HEAPF32[$s>>2];
  $28 = $27 + $26;
  HEAPF32[$s>>2] = $28;
  $29 = HEAP32[$0>>2]|0;
  $30 = (($29) + 640|0);
  $31 = +HEAPF32[$30>>2];
  $32 = +HEAPF32[$w>>2];
  $33 = $31 * $32;
  $34 = +HEAPF32[$t>>2];
  $35 = $34 + $33;
  HEAPF32[$t>>2] = $35;
  $36 = HEAP32[$wp>>2]|0;
  $37 = (($36) + -32|0);
  $38 = +HEAPF32[$37>>2];
  HEAPF32[$w>>2] = $38;
  $39 = HEAP32[$x2>>2]|0;
  $40 = (($39) + -384|0);
  $41 = +HEAPF32[$40>>2];
  $42 = +HEAPF32[$w>>2];
  $43 = $41 * $42;
  $44 = +HEAPF32[$s>>2];
  $45 = $44 + $43;
  HEAPF32[$s>>2] = $45;
  $46 = HEAP32[$0>>2]|0;
  $47 = (($46) + 384|0);
  $48 = +HEAPF32[$47>>2];
  $49 = +HEAPF32[$w>>2];
  $50 = $48 * $49;
  $51 = +HEAPF32[$t>>2];
  $52 = $51 + $50;
  HEAPF32[$t>>2] = $52;
  $53 = HEAP32[$wp>>2]|0;
  $54 = (($53) + -28|0);
  $55 = +HEAPF32[$54>>2];
  HEAPF32[$w>>2] = $55;
  $56 = HEAP32[$x2>>2]|0;
  $57 = (($56) + -128|0);
  $58 = +HEAPF32[$57>>2];
  $59 = +HEAPF32[$w>>2];
  $60 = $58 * $59;
  $61 = +HEAPF32[$s>>2];
  $62 = $61 + $60;
  HEAPF32[$s>>2] = $62;
  $63 = HEAP32[$0>>2]|0;
  $64 = (($63) + 128|0);
  $65 = +HEAPF32[$64>>2];
  $66 = +HEAPF32[$w>>2];
  $67 = $65 * $66;
  $68 = +HEAPF32[$t>>2];
  $69 = $68 + $67;
  HEAPF32[$t>>2] = $69;
  $70 = HEAP32[$wp>>2]|0;
  $71 = (($70) + -24|0);
  $72 = +HEAPF32[$71>>2];
  HEAPF32[$w>>2] = $72;
  $73 = HEAP32[$x2>>2]|0;
  $74 = (($73) + 128|0);
  $75 = +HEAPF32[$74>>2];
  $76 = +HEAPF32[$w>>2];
  $77 = $75 * $76;
  $78 = +HEAPF32[$s>>2];
  $79 = $78 + $77;
  HEAPF32[$s>>2] = $79;
  $80 = HEAP32[$0>>2]|0;
  $81 = (($80) + -128|0);
  $82 = +HEAPF32[$81>>2];
  $83 = +HEAPF32[$w>>2];
  $84 = $82 * $83;
  $85 = +HEAPF32[$t>>2];
  $86 = $85 + $84;
  HEAPF32[$t>>2] = $86;
  $87 = HEAP32[$wp>>2]|0;
  $88 = (($87) + -20|0);
  $89 = +HEAPF32[$88>>2];
  HEAPF32[$w>>2] = $89;
  $90 = HEAP32[$x2>>2]|0;
  $91 = (($90) + 384|0);
  $92 = +HEAPF32[$91>>2];
  $93 = +HEAPF32[$w>>2];
  $94 = $92 * $93;
  $95 = +HEAPF32[$s>>2];
  $96 = $95 + $94;
  HEAPF32[$s>>2] = $96;
  $97 = HEAP32[$0>>2]|0;
  $98 = (($97) + -384|0);
  $99 = +HEAPF32[$98>>2];
  $100 = +HEAPF32[$w>>2];
  $101 = $99 * $100;
  $102 = +HEAPF32[$t>>2];
  $103 = $102 + $101;
  HEAPF32[$t>>2] = $103;
  $104 = HEAP32[$wp>>2]|0;
  $105 = (($104) + -16|0);
  $106 = +HEAPF32[$105>>2];
  HEAPF32[$w>>2] = $106;
  $107 = HEAP32[$x2>>2]|0;
  $108 = (($107) + 640|0);
  $109 = +HEAPF32[$108>>2];
  $110 = +HEAPF32[$w>>2];
  $111 = $109 * $110;
  $112 = +HEAPF32[$s>>2];
  $113 = $112 + $111;
  HEAPF32[$s>>2] = $113;
  $114 = HEAP32[$0>>2]|0;
  $115 = (($114) + -640|0);
  $116 = +HEAPF32[$115>>2];
  $117 = +HEAPF32[$w>>2];
  $118 = $116 * $117;
  $119 = +HEAPF32[$t>>2];
  $120 = $119 + $118;
  HEAPF32[$t>>2] = $120;
  $121 = HEAP32[$wp>>2]|0;
  $122 = (($121) + -12|0);
  $123 = +HEAPF32[$122>>2];
  HEAPF32[$w>>2] = $123;
  $124 = HEAP32[$x2>>2]|0;
  $125 = (($124) + 896|0);
  $126 = +HEAPF32[$125>>2];
  $127 = +HEAPF32[$w>>2];
  $128 = $126 * $127;
  $129 = +HEAPF32[$s>>2];
  $130 = $129 + $128;
  HEAPF32[$s>>2] = $130;
  $131 = HEAP32[$0>>2]|0;
  $132 = (($131) + -896|0);
  $133 = +HEAPF32[$132>>2];
  $134 = +HEAPF32[$w>>2];
  $135 = $133 * $134;
  $136 = +HEAPF32[$t>>2];
  $137 = $136 + $135;
  HEAPF32[$t>>2] = $137;
  $138 = HEAP32[$wp>>2]|0;
  $139 = (($138) + -8|0);
  $140 = +HEAPF32[$139>>2];
  HEAPF32[$w>>2] = $140;
  $141 = HEAP32[$0>>2]|0;
  $142 = (($141) + -1024|0);
  $143 = +HEAPF32[$142>>2];
  $144 = +HEAPF32[$w>>2];
  $145 = $143 * $144;
  $146 = +HEAPF32[$s>>2];
  $147 = $146 + $145;
  HEAPF32[$s>>2] = $147;
  $148 = HEAP32[$x2>>2]|0;
  $149 = (($148) + 1024|0);
  $150 = +HEAPF32[$149>>2];
  $151 = +HEAPF32[$w>>2];
  $152 = $150 * $151;
  $153 = +HEAPF32[$t>>2];
  $154 = $153 - $152;
  HEAPF32[$t>>2] = $154;
  $155 = HEAP32[$wp>>2]|0;
  $156 = (($155) + -4|0);
  $157 = +HEAPF32[$156>>2];
  HEAPF32[$w>>2] = $157;
  $158 = HEAP32[$0>>2]|0;
  $159 = (($158) + -768|0);
  $160 = +HEAPF32[$159>>2];
  $161 = +HEAPF32[$w>>2];
  $162 = $160 * $161;
  $163 = +HEAPF32[$s>>2];
  $164 = $163 + $162;
  HEAPF32[$s>>2] = $164;
  $165 = HEAP32[$x2>>2]|0;
  $166 = (($165) + 768|0);
  $167 = +HEAPF32[$166>>2];
  $168 = +HEAPF32[$w>>2];
  $169 = $167 * $168;
  $170 = +HEAPF32[$t>>2];
  $171 = $170 - $169;
  HEAPF32[$t>>2] = $171;
  $172 = HEAP32[$wp>>2]|0;
  $173 = +HEAPF32[$172>>2];
  HEAPF32[$w>>2] = $173;
  $174 = HEAP32[$0>>2]|0;
  $175 = (($174) + -512|0);
  $176 = +HEAPF32[$175>>2];
  $177 = +HEAPF32[$w>>2];
  $178 = $176 * $177;
  $179 = +HEAPF32[$s>>2];
  $180 = $179 + $178;
  HEAPF32[$s>>2] = $180;
  $181 = HEAP32[$x2>>2]|0;
  $182 = (($181) + 512|0);
  $183 = +HEAPF32[$182>>2];
  $184 = +HEAPF32[$w>>2];
  $185 = $183 * $184;
  $186 = +HEAPF32[$t>>2];
  $187 = $186 - $185;
  HEAPF32[$t>>2] = $187;
  $188 = HEAP32[$wp>>2]|0;
  $189 = (($188) + 4|0);
  $190 = +HEAPF32[$189>>2];
  HEAPF32[$w>>2] = $190;
  $191 = HEAP32[$0>>2]|0;
  $192 = (($191) + -256|0);
  $193 = +HEAPF32[$192>>2];
  $194 = +HEAPF32[$w>>2];
  $195 = $193 * $194;
  $196 = +HEAPF32[$s>>2];
  $197 = $196 + $195;
  HEAPF32[$s>>2] = $197;
  $198 = HEAP32[$x2>>2]|0;
  $199 = (($198) + 256|0);
  $200 = +HEAPF32[$199>>2];
  $201 = +HEAPF32[$w>>2];
  $202 = $200 * $201;
  $203 = +HEAPF32[$t>>2];
  $204 = $203 - $202;
  HEAPF32[$t>>2] = $204;
  $205 = HEAP32[$wp>>2]|0;
  $206 = (($205) + 8|0);
  $207 = +HEAPF32[$206>>2];
  HEAPF32[$w>>2] = $207;
  $208 = HEAP32[$0>>2]|0;
  $209 = +HEAPF32[$208>>2];
  $210 = +HEAPF32[$w>>2];
  $211 = $209 * $210;
  $212 = +HEAPF32[$s>>2];
  $213 = $212 + $211;
  HEAPF32[$s>>2] = $213;
  $214 = HEAP32[$x2>>2]|0;
  $215 = +HEAPF32[$214>>2];
  $216 = +HEAPF32[$w>>2];
  $217 = $215 * $216;
  $218 = +HEAPF32[$t>>2];
  $219 = $218 - $217;
  HEAPF32[$t>>2] = $219;
  $220 = HEAP32[$wp>>2]|0;
  $221 = (($220) + 12|0);
  $222 = +HEAPF32[$221>>2];
  HEAPF32[$w>>2] = $222;
  $223 = HEAP32[$0>>2]|0;
  $224 = (($223) + 256|0);
  $225 = +HEAPF32[$224>>2];
  $226 = +HEAPF32[$w>>2];
  $227 = $225 * $226;
  $228 = +HEAPF32[$s>>2];
  $229 = $228 + $227;
  HEAPF32[$s>>2] = $229;
  $230 = HEAP32[$x2>>2]|0;
  $231 = (($230) + -256|0);
  $232 = +HEAPF32[$231>>2];
  $233 = +HEAPF32[$w>>2];
  $234 = $232 * $233;
  $235 = +HEAPF32[$t>>2];
  $236 = $235 - $234;
  HEAPF32[$t>>2] = $236;
  $237 = HEAP32[$wp>>2]|0;
  $238 = (($237) + 16|0);
  $239 = +HEAPF32[$238>>2];
  HEAPF32[$w>>2] = $239;
  $240 = HEAP32[$0>>2]|0;
  $241 = (($240) + 512|0);
  $242 = +HEAPF32[$241>>2];
  $243 = +HEAPF32[$w>>2];
  $244 = $242 * $243;
  $245 = +HEAPF32[$s>>2];
  $246 = $245 + $244;
  HEAPF32[$s>>2] = $246;
  $247 = HEAP32[$x2>>2]|0;
  $248 = (($247) + -512|0);
  $249 = +HEAPF32[$248>>2];
  $250 = +HEAPF32[$w>>2];
  $251 = $249 * $250;
  $252 = +HEAPF32[$t>>2];
  $253 = $252 - $251;
  HEAPF32[$t>>2] = $253;
  $254 = HEAP32[$wp>>2]|0;
  $255 = (($254) + 20|0);
  $256 = +HEAPF32[$255>>2];
  HEAPF32[$w>>2] = $256;
  $257 = HEAP32[$0>>2]|0;
  $258 = (($257) + 768|0);
  $259 = +HEAPF32[$258>>2];
  $260 = +HEAPF32[$w>>2];
  $261 = $259 * $260;
  $262 = +HEAPF32[$s>>2];
  $263 = $262 + $261;
  HEAPF32[$s>>2] = $263;
  $264 = HEAP32[$x2>>2]|0;
  $265 = (($264) + -768|0);
  $266 = +HEAPF32[$265>>2];
  $267 = +HEAPF32[$w>>2];
  $268 = $266 * $267;
  $269 = +HEAPF32[$t>>2];
  $270 = $269 - $268;
  HEAPF32[$t>>2] = $270;
  $271 = HEAP32[$wp>>2]|0;
  $272 = (($271) + 24|0);
  $273 = +HEAPF32[$272>>2];
  $274 = +HEAPF32[$s>>2];
  $275 = $274 * $273;
  HEAPF32[$s>>2] = $275;
  $276 = +HEAPF32[$t>>2];
  $277 = +HEAPF32[$s>>2];
  $278 = $276 - $277;
  HEAPF32[$w>>2] = $278;
  $279 = +HEAPF32[$t>>2];
  $280 = +HEAPF32[$s>>2];
  $281 = $279 + $280;
  $282 = HEAP32[$i>>2]|0;
  $283 = $282<<1;
  $284 = (30 + ($283))|0;
  $285 = HEAP32[$1>>2]|0;
  $286 = (($285) + ($284<<2)|0);
  HEAPF32[$286>>2] = $281;
  $287 = HEAP32[$wp>>2]|0;
  $288 = (($287) + 28|0);
  $289 = +HEAPF32[$288>>2];
  $290 = +HEAPF32[$w>>2];
  $291 = $289 * $290;
  $292 = HEAP32[$i>>2]|0;
  $293 = $292<<1;
  $294 = (31 + ($293))|0;
  $295 = HEAP32[$1>>2]|0;
  $296 = (($295) + ($294<<2)|0);
  HEAPF32[$296>>2] = $291;
  $297 = HEAP32[$wp>>2]|0;
  $298 = (($297) + 72|0);
  HEAP32[$wp>>2] = $298;
  $299 = HEAP32[$0>>2]|0;
  $300 = (($299) + -4|0);
  HEAP32[$0>>2] = $300;
  $301 = HEAP32[$x2>>2]|0;
  $302 = (($301) + 4|0);
  HEAP32[$x2>>2] = $302;
  $303 = HEAP32[$i>>2]|0;
  $304 = (($303) + 1)|0;
  HEAP32[$i>>2] = $304;
 }
 $305 = HEAP32[$0>>2]|0;
 $306 = (($305) + -64|0);
 $307 = +HEAPF32[$306>>2];
 $308 = HEAP32[$wp>>2]|0;
 $309 = (($308) + -40|0);
 $310 = +HEAPF32[$309>>2];
 $311 = $307 * $310;
 HEAPF32[$t2>>2] = $311;
 $312 = HEAP32[$0>>2]|0;
 $313 = (($312) + -128|0);
 $314 = +HEAPF32[$313>>2];
 $315 = HEAP32[$wp>>2]|0;
 $316 = (($315) + -8|0);
 $317 = +HEAPF32[$316>>2];
 $318 = $314 * $317;
 HEAPF32[$s1>>2] = $318;
 $319 = HEAP32[$0>>2]|0;
 $320 = (($319) + -192|0);
 $321 = +HEAPF32[$320>>2];
 $322 = HEAP32[$0>>2]|0;
 $323 = (($322) + 64|0);
 $324 = +HEAPF32[$323>>2];
 $325 = $321 - $324;
 $326 = HEAP32[$wp>>2]|0;
 $327 = (($326) + -36|0);
 $328 = +HEAPF32[$327>>2];
 $329 = $325 * $328;
 $330 = +HEAPF32[$t2>>2];
 $331 = $330 + $329;
 HEAPF32[$t2>>2] = $331;
 $332 = HEAP32[$0>>2]|0;
 $333 = (($332) + -384|0);
 $334 = +HEAPF32[$333>>2];
 $335 = HEAP32[$wp>>2]|0;
 $336 = (($335) + -4|0);
 $337 = +HEAPF32[$336>>2];
 $338 = $334 * $337;
 $339 = +HEAPF32[$s1>>2];
 $340 = $339 + $338;
 HEAPF32[$s1>>2] = $340;
 $341 = HEAP32[$0>>2]|0;
 $342 = (($341) + -320|0);
 $343 = +HEAPF32[$342>>2];
 $344 = HEAP32[$0>>2]|0;
 $345 = (($344) + 192|0);
 $346 = +HEAPF32[$345>>2];
 $347 = $343 + $346;
 $348 = HEAP32[$wp>>2]|0;
 $349 = (($348) + -32|0);
 $350 = +HEAPF32[$349>>2];
 $351 = $347 * $350;
 $352 = +HEAPF32[$t2>>2];
 $353 = $352 + $351;
 HEAPF32[$t2>>2] = $353;
 $354 = HEAP32[$0>>2]|0;
 $355 = (($354) + -640|0);
 $356 = +HEAPF32[$355>>2];
 $357 = HEAP32[$wp>>2]|0;
 $358 = +HEAPF32[$357>>2];
 $359 = $356 * $358;
 $360 = +HEAPF32[$s1>>2];
 $361 = $360 + $359;
 HEAPF32[$s1>>2] = $361;
 $362 = HEAP32[$0>>2]|0;
 $363 = (($362) + -448|0);
 $364 = +HEAPF32[$363>>2];
 $365 = HEAP32[$0>>2]|0;
 $366 = (($365) + 320|0);
 $367 = +HEAPF32[$366>>2];
 $368 = $364 - $367;
 $369 = HEAP32[$wp>>2]|0;
 $370 = (($369) + -28|0);
 $371 = +HEAPF32[$370>>2];
 $372 = $368 * $371;
 $373 = +HEAPF32[$t2>>2];
 $374 = $373 + $372;
 HEAPF32[$t2>>2] = $374;
 $375 = HEAP32[$0>>2]|0;
 $376 = (($375) + -896|0);
 $377 = +HEAPF32[$376>>2];
 $378 = HEAP32[$wp>>2]|0;
 $379 = (($378) + 4|0);
 $380 = +HEAPF32[$379>>2];
 $381 = $377 * $380;
 $382 = +HEAPF32[$s1>>2];
 $383 = $382 + $381;
 HEAPF32[$s1>>2] = $383;
 $384 = HEAP32[$0>>2]|0;
 $385 = (($384) + -576|0);
 $386 = +HEAPF32[$385>>2];
 $387 = HEAP32[$0>>2]|0;
 $388 = (($387) + 448|0);
 $389 = +HEAPF32[$388>>2];
 $390 = $386 + $389;
 $391 = HEAP32[$wp>>2]|0;
 $392 = (($391) + -24|0);
 $393 = +HEAPF32[$392>>2];
 $394 = $390 * $393;
 $395 = +HEAPF32[$t2>>2];
 $396 = $395 + $394;
 HEAPF32[$t2>>2] = $396;
 $397 = HEAP32[$0>>2]|0;
 $398 = (($397) + 128|0);
 $399 = +HEAPF32[$398>>2];
 $400 = HEAP32[$wp>>2]|0;
 $401 = (($400) + 8|0);
 $402 = +HEAPF32[$401>>2];
 $403 = $399 * $402;
 $404 = +HEAPF32[$s1>>2];
 $405 = $404 - $403;
 HEAPF32[$s1>>2] = $405;
 $406 = HEAP32[$0>>2]|0;
 $407 = (($406) + -704|0);
 $408 = +HEAPF32[$407>>2];
 $409 = HEAP32[$0>>2]|0;
 $410 = (($409) + 576|0);
 $411 = +HEAPF32[$410>>2];
 $412 = $408 - $411;
 $413 = HEAP32[$wp>>2]|0;
 $414 = (($413) + -20|0);
 $415 = +HEAPF32[$414>>2];
 $416 = $412 * $415;
 $417 = +HEAPF32[$t2>>2];
 $418 = $417 + $416;
 HEAPF32[$t2>>2] = $418;
 $419 = HEAP32[$0>>2]|0;
 $420 = (($419) + 384|0);
 $421 = +HEAPF32[$420>>2];
 $422 = HEAP32[$wp>>2]|0;
 $423 = (($422) + 12|0);
 $424 = +HEAPF32[$423>>2];
 $425 = $421 * $424;
 $426 = +HEAPF32[$s1>>2];
 $427 = $426 - $425;
 HEAPF32[$s1>>2] = $427;
 $428 = HEAP32[$0>>2]|0;
 $429 = (($428) + -832|0);
 $430 = +HEAPF32[$429>>2];
 $431 = HEAP32[$0>>2]|0;
 $432 = (($431) + 704|0);
 $433 = +HEAPF32[$432>>2];
 $434 = $430 + $433;
 $435 = HEAP32[$wp>>2]|0;
 $436 = (($435) + -16|0);
 $437 = +HEAPF32[$436>>2];
 $438 = $434 * $437;
 $439 = +HEAPF32[$t2>>2];
 $440 = $439 + $438;
 HEAPF32[$t2>>2] = $440;
 $441 = HEAP32[$0>>2]|0;
 $442 = (($441) + 640|0);
 $443 = +HEAPF32[$442>>2];
 $444 = HEAP32[$wp>>2]|0;
 $445 = (($444) + 16|0);
 $446 = +HEAPF32[$445>>2];
 $447 = $443 * $446;
 $448 = +HEAPF32[$s1>>2];
 $449 = $448 - $447;
 HEAPF32[$s1>>2] = $449;
 $450 = HEAP32[$0>>2]|0;
 $451 = (($450) + -960|0);
 $452 = +HEAPF32[$451>>2];
 $453 = HEAP32[$0>>2]|0;
 $454 = (($453) + 832|0);
 $455 = +HEAPF32[$454>>2];
 $456 = $452 - $455;
 $457 = HEAP32[$wp>>2]|0;
 $458 = (($457) + -12|0);
 $459 = +HEAPF32[$458>>2];
 $460 = $456 * $459;
 $461 = +HEAPF32[$t2>>2];
 $462 = $461 + $460;
 HEAPF32[$t2>>2] = $462;
 $463 = HEAP32[$0>>2]|0;
 $464 = (($463) + 896|0);
 $465 = +HEAPF32[$464>>2];
 $466 = +HEAPF32[$s1>>2];
 $467 = $466 - $465;
 HEAPF32[$s1>>2] = $467;
 $468 = +HEAPF32[$s1>>2];
 $469 = +HEAPF32[$t2>>2];
 $470 = $468 - $469;
 HEAPF32[$u>>2] = $470;
 $471 = +HEAPF32[$s1>>2];
 $472 = +HEAPF32[$t2>>2];
 $473 = $471 + $472;
 HEAPF32[$v>>2] = $473;
 $474 = HEAP32[$1>>2]|0;
 $475 = (($474) + 56|0);
 $476 = +HEAPF32[$475>>2];
 HEAPF32[$t2>>2] = $476;
 $477 = HEAP32[$1>>2]|0;
 $478 = (($477) + 60|0);
 $479 = +HEAPF32[$478>>2];
 $480 = +HEAPF32[$t2>>2];
 $481 = $479 - $480;
 HEAPF32[$s1>>2] = $481;
 $482 = +HEAPF32[$v>>2];
 $483 = +HEAPF32[$t2>>2];
 $484 = $482 + $483;
 $485 = HEAP32[$1>>2]|0;
 $486 = (($485) + 124|0);
 HEAPF32[$486>>2] = $484;
 $487 = +HEAPF32[$u>>2];
 $488 = +HEAPF32[$s1>>2];
 $489 = $487 + $488;
 $490 = HEAP32[$1>>2]|0;
 $491 = (($490) + 120|0);
 HEAPF32[$491>>2] = $489;
 $492 = +HEAPF32[$u>>2];
 $493 = +HEAPF32[$s1>>2];
 $494 = $492 - $493;
 $495 = HEAP32[$1>>2]|0;
 $496 = (($495) + 60|0);
 HEAPF32[$496>>2] = $494;
 $497 = +HEAPF32[$v>>2];
 $498 = +HEAPF32[$t2>>2];
 $499 = $497 - $498;
 $500 = HEAP32[$1>>2]|0;
 $501 = (($500) + 56|0);
 HEAPF32[$501>>2] = $499;
 $502 = HEAP32[$1>>2]|0;
 $503 = (($502) + 112|0);
 $504 = +HEAPF32[$503>>2];
 $505 = HEAP32[$1>>2]|0;
 $506 = +HEAPF32[$505>>2];
 $507 = $504 - $506;
 HEAPF32[$xr>>2] = $507;
 $508 = HEAP32[$1>>2]|0;
 $509 = (($508) + 112|0);
 $510 = +HEAPF32[$509>>2];
 $511 = HEAP32[$1>>2]|0;
 $512 = +HEAPF32[$511>>2];
 $513 = $512 + $510;
 HEAPF32[$511>>2] = $513;
 $514 = +HEAPF32[$xr>>2];
 $515 = HEAP32[$wp>>2]|0;
 $516 = (($515) + -116|0);
 $517 = +HEAPF32[$516>>2];
 $518 = $514 * $517;
 $519 = HEAP32[$1>>2]|0;
 $520 = (($519) + 112|0);
 HEAPF32[$520>>2] = $518;
 $521 = HEAP32[$1>>2]|0;
 $522 = (($521) + 116|0);
 $523 = +HEAPF32[$522>>2];
 $524 = HEAP32[$1>>2]|0;
 $525 = (($524) + 4|0);
 $526 = +HEAPF32[$525>>2];
 $527 = $523 - $526;
 HEAPF32[$xr>>2] = $527;
 $528 = HEAP32[$1>>2]|0;
 $529 = (($528) + 116|0);
 $530 = +HEAPF32[$529>>2];
 $531 = HEAP32[$1>>2]|0;
 $532 = (($531) + 4|0);
 $533 = +HEAPF32[$532>>2];
 $534 = $533 + $530;
 HEAPF32[$532>>2] = $534;
 $535 = +HEAPF32[$xr>>2];
 $536 = HEAP32[$wp>>2]|0;
 $537 = (($536) + -116|0);
 $538 = +HEAPF32[$537>>2];
 $539 = $535 * $538;
 $540 = HEAP32[$1>>2]|0;
 $541 = (($540) + 116|0);
 HEAPF32[$541>>2] = $539;
 $542 = HEAP32[$1>>2]|0;
 $543 = (($542) + 104|0);
 $544 = +HEAPF32[$543>>2];
 $545 = HEAP32[$1>>2]|0;
 $546 = (($545) + 8|0);
 $547 = +HEAPF32[$546>>2];
 $548 = $544 - $547;
 HEAPF32[$xr>>2] = $548;
 $549 = HEAP32[$1>>2]|0;
 $550 = (($549) + 104|0);
 $551 = +HEAPF32[$550>>2];
 $552 = HEAP32[$1>>2]|0;
 $553 = (($552) + 8|0);
 $554 = +HEAPF32[$553>>2];
 $555 = $554 + $551;
 HEAPF32[$553>>2] = $555;
 $556 = +HEAPF32[$xr>>2];
 $557 = HEAP32[$wp>>2]|0;
 $558 = (($557) + -260|0);
 $559 = +HEAPF32[$558>>2];
 $560 = $556 * $559;
 $561 = HEAP32[$1>>2]|0;
 $562 = (($561) + 104|0);
 HEAPF32[$562>>2] = $560;
 $563 = HEAP32[$1>>2]|0;
 $564 = (($563) + 108|0);
 $565 = +HEAPF32[$564>>2];
 $566 = HEAP32[$1>>2]|0;
 $567 = (($566) + 12|0);
 $568 = +HEAPF32[$567>>2];
 $569 = $565 - $568;
 HEAPF32[$xr>>2] = $569;
 $570 = HEAP32[$1>>2]|0;
 $571 = (($570) + 108|0);
 $572 = +HEAPF32[$571>>2];
 $573 = HEAP32[$1>>2]|0;
 $574 = (($573) + 12|0);
 $575 = +HEAPF32[$574>>2];
 $576 = $575 + $572;
 HEAPF32[$574>>2] = $576;
 $577 = +HEAPF32[$xr>>2];
 $578 = HEAP32[$wp>>2]|0;
 $579 = (($578) + -260|0);
 $580 = +HEAPF32[$579>>2];
 $581 = $577 * $580;
 $582 = HEAP32[$1>>2]|0;
 $583 = (($582) + 108|0);
 HEAPF32[$583>>2] = $581;
 $584 = HEAP32[$1>>2]|0;
 $585 = (($584) + 96|0);
 $586 = +HEAPF32[$585>>2];
 $587 = HEAP32[$1>>2]|0;
 $588 = (($587) + 16|0);
 $589 = +HEAPF32[$588>>2];
 $590 = $586 - $589;
 HEAPF32[$xr>>2] = $590;
 $591 = HEAP32[$1>>2]|0;
 $592 = (($591) + 96|0);
 $593 = +HEAPF32[$592>>2];
 $594 = HEAP32[$1>>2]|0;
 $595 = (($594) + 16|0);
 $596 = +HEAPF32[$595>>2];
 $597 = $596 + $593;
 HEAPF32[$595>>2] = $597;
 $598 = +HEAPF32[$xr>>2];
 $599 = HEAP32[$wp>>2]|0;
 $600 = (($599) + -404|0);
 $601 = +HEAPF32[$600>>2];
 $602 = $598 * $601;
 $603 = HEAP32[$1>>2]|0;
 $604 = (($603) + 96|0);
 HEAPF32[$604>>2] = $602;
 $605 = HEAP32[$1>>2]|0;
 $606 = (($605) + 100|0);
 $607 = +HEAPF32[$606>>2];
 $608 = HEAP32[$1>>2]|0;
 $609 = (($608) + 20|0);
 $610 = +HEAPF32[$609>>2];
 $611 = $607 - $610;
 HEAPF32[$xr>>2] = $611;
 $612 = HEAP32[$1>>2]|0;
 $613 = (($612) + 100|0);
 $614 = +HEAPF32[$613>>2];
 $615 = HEAP32[$1>>2]|0;
 $616 = (($615) + 20|0);
 $617 = +HEAPF32[$616>>2];
 $618 = $617 + $614;
 HEAPF32[$616>>2] = $618;
 $619 = +HEAPF32[$xr>>2];
 $620 = HEAP32[$wp>>2]|0;
 $621 = (($620) + -404|0);
 $622 = +HEAPF32[$621>>2];
 $623 = $619 * $622;
 $624 = HEAP32[$1>>2]|0;
 $625 = (($624) + 100|0);
 HEAPF32[$625>>2] = $623;
 $626 = HEAP32[$1>>2]|0;
 $627 = (($626) + 88|0);
 $628 = +HEAPF32[$627>>2];
 $629 = HEAP32[$1>>2]|0;
 $630 = (($629) + 24|0);
 $631 = +HEAPF32[$630>>2];
 $632 = $628 - $631;
 HEAPF32[$xr>>2] = $632;
 $633 = HEAP32[$1>>2]|0;
 $634 = (($633) + 88|0);
 $635 = +HEAPF32[$634>>2];
 $636 = HEAP32[$1>>2]|0;
 $637 = (($636) + 24|0);
 $638 = +HEAPF32[$637>>2];
 $639 = $638 + $635;
 HEAPF32[$637>>2] = $639;
 $640 = +HEAPF32[$xr>>2];
 $641 = $640;
 $642 = $641 * 1.41421356237309514547;
 $643 = $642;
 $644 = HEAP32[$1>>2]|0;
 $645 = (($644) + 88|0);
 HEAPF32[$645>>2] = $643;
 $646 = HEAP32[$1>>2]|0;
 $647 = (($646) + 92|0);
 $648 = +HEAPF32[$647>>2];
 $649 = HEAP32[$1>>2]|0;
 $650 = (($649) + 28|0);
 $651 = +HEAPF32[$650>>2];
 $652 = $648 - $651;
 HEAPF32[$xr>>2] = $652;
 $653 = HEAP32[$1>>2]|0;
 $654 = (($653) + 92|0);
 $655 = +HEAPF32[$654>>2];
 $656 = HEAP32[$1>>2]|0;
 $657 = (($656) + 28|0);
 $658 = +HEAPF32[$657>>2];
 $659 = $658 + $655;
 HEAPF32[$657>>2] = $659;
 $660 = +HEAPF32[$xr>>2];
 $661 = $660;
 $662 = $661 * 1.41421356237309514547;
 $663 = HEAP32[$1>>2]|0;
 $664 = (($663) + 28|0);
 $665 = +HEAPF32[$664>>2];
 $666 = $665;
 $667 = $662 - $666;
 $668 = $667;
 $669 = HEAP32[$1>>2]|0;
 $670 = (($669) + 92|0);
 HEAPF32[$670>>2] = $668;
 $671 = HEAP32[$1>>2]|0;
 $672 = (($671) + 24|0);
 $673 = +HEAPF32[$672>>2];
 $674 = HEAP32[$1>>2]|0;
 $675 = (($674) + 28|0);
 $676 = +HEAPF32[$675>>2];
 $677 = $676 - $673;
 HEAPF32[$675>>2] = $677;
 $678 = HEAP32[$1>>2]|0;
 $679 = (($678) + 28|0);
 $680 = +HEAPF32[$679>>2];
 $681 = HEAP32[$1>>2]|0;
 $682 = (($681) + 88|0);
 $683 = +HEAPF32[$682>>2];
 $684 = $683 - $680;
 HEAPF32[$682>>2] = $684;
 $685 = HEAP32[$1>>2]|0;
 $686 = (($685) + 88|0);
 $687 = +HEAPF32[$686>>2];
 $688 = HEAP32[$1>>2]|0;
 $689 = (($688) + 92|0);
 $690 = +HEAPF32[$689>>2];
 $691 = $690 - $687;
 HEAPF32[$689>>2] = $691;
 $692 = HEAP32[$1>>2]|0;
 $693 = (($692) + 24|0);
 $694 = +HEAPF32[$693>>2];
 HEAPF32[$xr>>2] = $694;
 $695 = HEAP32[$1>>2]|0;
 $696 = (($695) + 124|0);
 $697 = +HEAPF32[$696>>2];
 $698 = +HEAPF32[$xr>>2];
 $699 = $697 - $698;
 $700 = HEAP32[$1>>2]|0;
 $701 = (($700) + 24|0);
 HEAPF32[$701>>2] = $699;
 $702 = HEAP32[$1>>2]|0;
 $703 = (($702) + 124|0);
 $704 = +HEAPF32[$703>>2];
 $705 = +HEAPF32[$xr>>2];
 $706 = $704 + $705;
 $707 = HEAP32[$1>>2]|0;
 $708 = (($707) + 124|0);
 HEAPF32[$708>>2] = $706;
 $709 = HEAP32[$1>>2]|0;
 $710 = (($709) + 28|0);
 $711 = +HEAPF32[$710>>2];
 HEAPF32[$xr>>2] = $711;
 $712 = HEAP32[$1>>2]|0;
 $713 = (($712) + 120|0);
 $714 = +HEAPF32[$713>>2];
 $715 = +HEAPF32[$xr>>2];
 $716 = $714 - $715;
 $717 = HEAP32[$1>>2]|0;
 $718 = (($717) + 28|0);
 HEAPF32[$718>>2] = $716;
 $719 = HEAP32[$1>>2]|0;
 $720 = (($719) + 120|0);
 $721 = +HEAPF32[$720>>2];
 $722 = +HEAPF32[$xr>>2];
 $723 = $721 + $722;
 $724 = HEAP32[$1>>2]|0;
 $725 = (($724) + 120|0);
 HEAPF32[$725>>2] = $723;
 $726 = HEAP32[$1>>2]|0;
 $727 = (($726) + 88|0);
 $728 = +HEAPF32[$727>>2];
 HEAPF32[$xr>>2] = $728;
 $729 = HEAP32[$1>>2]|0;
 $730 = (($729) + 60|0);
 $731 = +HEAPF32[$730>>2];
 $732 = +HEAPF32[$xr>>2];
 $733 = $731 - $732;
 $734 = HEAP32[$1>>2]|0;
 $735 = (($734) + 88|0);
 HEAPF32[$735>>2] = $733;
 $736 = HEAP32[$1>>2]|0;
 $737 = (($736) + 60|0);
 $738 = +HEAPF32[$737>>2];
 $739 = +HEAPF32[$xr>>2];
 $740 = $738 + $739;
 $741 = HEAP32[$1>>2]|0;
 $742 = (($741) + 60|0);
 HEAPF32[$742>>2] = $740;
 $743 = HEAP32[$1>>2]|0;
 $744 = (($743) + 92|0);
 $745 = +HEAPF32[$744>>2];
 HEAPF32[$xr>>2] = $745;
 $746 = HEAP32[$1>>2]|0;
 $747 = (($746) + 56|0);
 $748 = +HEAPF32[$747>>2];
 $749 = +HEAPF32[$xr>>2];
 $750 = $748 - $749;
 $751 = HEAP32[$1>>2]|0;
 $752 = (($751) + 92|0);
 HEAPF32[$752>>2] = $750;
 $753 = HEAP32[$1>>2]|0;
 $754 = (($753) + 56|0);
 $755 = +HEAPF32[$754>>2];
 $756 = +HEAPF32[$xr>>2];
 $757 = $755 + $756;
 $758 = HEAP32[$1>>2]|0;
 $759 = (($758) + 56|0);
 HEAPF32[$759>>2] = $757;
 $760 = HEAP32[$1>>2]|0;
 $761 = (($760) + 80|0);
 $762 = +HEAPF32[$761>>2];
 $763 = HEAP32[$1>>2]|0;
 $764 = (($763) + 32|0);
 $765 = +HEAPF32[$764>>2];
 $766 = $762 - $765;
 HEAPF32[$xr>>2] = $766;
 $767 = HEAP32[$1>>2]|0;
 $768 = (($767) + 80|0);
 $769 = +HEAPF32[$768>>2];
 $770 = HEAP32[$1>>2]|0;
 $771 = (($770) + 32|0);
 $772 = +HEAPF32[$771>>2];
 $773 = $772 + $769;
 HEAPF32[$771>>2] = $773;
 $774 = +HEAPF32[$xr>>2];
 $775 = HEAP32[$wp>>2]|0;
 $776 = (($775) + -692|0);
 $777 = +HEAPF32[$776>>2];
 $778 = $774 * $777;
 $779 = HEAP32[$1>>2]|0;
 $780 = (($779) + 80|0);
 HEAPF32[$780>>2] = $778;
 $781 = HEAP32[$1>>2]|0;
 $782 = (($781) + 84|0);
 $783 = +HEAPF32[$782>>2];
 $784 = HEAP32[$1>>2]|0;
 $785 = (($784) + 36|0);
 $786 = +HEAPF32[$785>>2];
 $787 = $783 - $786;
 HEAPF32[$xr>>2] = $787;
 $788 = HEAP32[$1>>2]|0;
 $789 = (($788) + 84|0);
 $790 = +HEAPF32[$789>>2];
 $791 = HEAP32[$1>>2]|0;
 $792 = (($791) + 36|0);
 $793 = +HEAPF32[$792>>2];
 $794 = $793 + $790;
 HEAPF32[$792>>2] = $794;
 $795 = +HEAPF32[$xr>>2];
 $796 = HEAP32[$wp>>2]|0;
 $797 = (($796) + -692|0);
 $798 = +HEAPF32[$797>>2];
 $799 = $795 * $798;
 $800 = HEAP32[$1>>2]|0;
 $801 = (($800) + 84|0);
 HEAPF32[$801>>2] = $799;
 $802 = HEAP32[$1>>2]|0;
 $803 = (($802) + 72|0);
 $804 = +HEAPF32[$803>>2];
 $805 = HEAP32[$1>>2]|0;
 $806 = (($805) + 40|0);
 $807 = +HEAPF32[$806>>2];
 $808 = $804 - $807;
 HEAPF32[$xr>>2] = $808;
 $809 = HEAP32[$1>>2]|0;
 $810 = (($809) + 72|0);
 $811 = +HEAPF32[$810>>2];
 $812 = HEAP32[$1>>2]|0;
 $813 = (($812) + 40|0);
 $814 = +HEAPF32[$813>>2];
 $815 = $814 + $811;
 HEAPF32[$813>>2] = $815;
 $816 = +HEAPF32[$xr>>2];
 $817 = HEAP32[$wp>>2]|0;
 $818 = (($817) + -836|0);
 $819 = +HEAPF32[$818>>2];
 $820 = $816 * $819;
 $821 = HEAP32[$1>>2]|0;
 $822 = (($821) + 72|0);
 HEAPF32[$822>>2] = $820;
 $823 = HEAP32[$1>>2]|0;
 $824 = (($823) + 76|0);
 $825 = +HEAPF32[$824>>2];
 $826 = HEAP32[$1>>2]|0;
 $827 = (($826) + 44|0);
 $828 = +HEAPF32[$827>>2];
 $829 = $825 - $828;
 HEAPF32[$xr>>2] = $829;
 $830 = HEAP32[$1>>2]|0;
 $831 = (($830) + 76|0);
 $832 = +HEAPF32[$831>>2];
 $833 = HEAP32[$1>>2]|0;
 $834 = (($833) + 44|0);
 $835 = +HEAPF32[$834>>2];
 $836 = $835 + $832;
 HEAPF32[$834>>2] = $836;
 $837 = +HEAPF32[$xr>>2];
 $838 = HEAP32[$wp>>2]|0;
 $839 = (($838) + -836|0);
 $840 = +HEAPF32[$839>>2];
 $841 = $837 * $840;
 $842 = HEAP32[$1>>2]|0;
 $843 = (($842) + 76|0);
 HEAPF32[$843>>2] = $841;
 $844 = HEAP32[$1>>2]|0;
 $845 = (($844) + 64|0);
 $846 = +HEAPF32[$845>>2];
 $847 = HEAP32[$1>>2]|0;
 $848 = (($847) + 48|0);
 $849 = +HEAPF32[$848>>2];
 $850 = $846 - $849;
 HEAPF32[$xr>>2] = $850;
 $851 = HEAP32[$1>>2]|0;
 $852 = (($851) + 64|0);
 $853 = +HEAPF32[$852>>2];
 $854 = HEAP32[$1>>2]|0;
 $855 = (($854) + 48|0);
 $856 = +HEAPF32[$855>>2];
 $857 = $856 + $853;
 HEAPF32[$855>>2] = $857;
 $858 = +HEAPF32[$xr>>2];
 $859 = HEAP32[$wp>>2]|0;
 $860 = (($859) + -980|0);
 $861 = +HEAPF32[$860>>2];
 $862 = $858 * $861;
 $863 = HEAP32[$1>>2]|0;
 $864 = (($863) + 64|0);
 HEAPF32[$864>>2] = $862;
 $865 = HEAP32[$1>>2]|0;
 $866 = (($865) + 68|0);
 $867 = +HEAPF32[$866>>2];
 $868 = HEAP32[$1>>2]|0;
 $869 = (($868) + 52|0);
 $870 = +HEAPF32[$869>>2];
 $871 = $867 - $870;
 HEAPF32[$xr>>2] = $871;
 $872 = HEAP32[$1>>2]|0;
 $873 = (($872) + 68|0);
 $874 = +HEAPF32[$873>>2];
 $875 = HEAP32[$1>>2]|0;
 $876 = (($875) + 52|0);
 $877 = +HEAPF32[$876>>2];
 $878 = $877 + $874;
 HEAPF32[$876>>2] = $878;
 $879 = +HEAPF32[$xr>>2];
 $880 = HEAP32[$wp>>2]|0;
 $881 = (($880) + -980|0);
 $882 = +HEAPF32[$881>>2];
 $883 = $879 * $882;
 $884 = HEAP32[$1>>2]|0;
 $885 = (($884) + 68|0);
 HEAPF32[$885>>2] = $883;
 $886 = HEAP32[$1>>2]|0;
 $887 = (($886) + 80|0);
 $888 = +HEAPF32[$887>>2];
 $889 = -$888;
 $890 = HEAP32[$1>>2]|0;
 $891 = (($890) + 96|0);
 $892 = +HEAPF32[$891>>2];
 $893 = $889 + $892;
 HEAPF32[$xr>>2] = $893;
 $894 = HEAP32[$1>>2]|0;
 $895 = (($894) + 96|0);
 $896 = +HEAPF32[$895>>2];
 $897 = HEAP32[$1>>2]|0;
 $898 = (($897) + 80|0);
 $899 = +HEAPF32[$898>>2];
 $900 = $899 + $896;
 HEAPF32[$898>>2] = $900;
 $901 = +HEAPF32[$xr>>2];
 $902 = HEAP32[$wp>>2]|0;
 $903 = (($902) + -836|0);
 $904 = +HEAPF32[$903>>2];
 $905 = $901 * $904;
 $906 = HEAP32[$1>>2]|0;
 $907 = (($906) + 96|0);
 HEAPF32[$907>>2] = $905;
 $908 = HEAP32[$1>>2]|0;
 $909 = (($908) + 84|0);
 $910 = +HEAPF32[$909>>2];
 $911 = -$910;
 $912 = HEAP32[$1>>2]|0;
 $913 = (($912) + 100|0);
 $914 = +HEAPF32[$913>>2];
 $915 = $911 + $914;
 HEAPF32[$xr>>2] = $915;
 $916 = HEAP32[$1>>2]|0;
 $917 = (($916) + 100|0);
 $918 = +HEAPF32[$917>>2];
 $919 = HEAP32[$1>>2]|0;
 $920 = (($919) + 84|0);
 $921 = +HEAPF32[$920>>2];
 $922 = $921 + $918;
 HEAPF32[$920>>2] = $922;
 $923 = +HEAPF32[$xr>>2];
 $924 = HEAP32[$wp>>2]|0;
 $925 = (($924) + -836|0);
 $926 = +HEAPF32[$925>>2];
 $927 = $923 * $926;
 $928 = HEAP32[$1>>2]|0;
 $929 = (($928) + 100|0);
 HEAPF32[$929>>2] = $927;
 $930 = HEAP32[$1>>2]|0;
 $931 = (($930) + 16|0);
 $932 = +HEAPF32[$931>>2];
 $933 = HEAP32[$1>>2]|0;
 $934 = (($933) + 32|0);
 $935 = +HEAPF32[$934>>2];
 $936 = $932 - $935;
 HEAPF32[$xr>>2] = $936;
 $937 = HEAP32[$1>>2]|0;
 $938 = (($937) + 32|0);
 $939 = +HEAPF32[$938>>2];
 $940 = HEAP32[$1>>2]|0;
 $941 = (($940) + 16|0);
 $942 = +HEAPF32[$941>>2];
 $943 = $942 + $939;
 HEAPF32[$941>>2] = $943;
 $944 = +HEAPF32[$xr>>2];
 $945 = HEAP32[$wp>>2]|0;
 $946 = (($945) + -836|0);
 $947 = +HEAPF32[$946>>2];
 $948 = $944 * $947;
 $949 = HEAP32[$1>>2]|0;
 $950 = (($949) + 32|0);
 HEAPF32[$950>>2] = $948;
 $951 = HEAP32[$1>>2]|0;
 $952 = (($951) + 20|0);
 $953 = +HEAPF32[$952>>2];
 $954 = HEAP32[$1>>2]|0;
 $955 = (($954) + 36|0);
 $956 = +HEAPF32[$955>>2];
 $957 = $953 - $956;
 HEAPF32[$xr>>2] = $957;
 $958 = HEAP32[$1>>2]|0;
 $959 = (($958) + 36|0);
 $960 = +HEAPF32[$959>>2];
 $961 = HEAP32[$1>>2]|0;
 $962 = (($961) + 20|0);
 $963 = +HEAPF32[$962>>2];
 $964 = $963 + $960;
 HEAPF32[$962>>2] = $964;
 $965 = +HEAPF32[$xr>>2];
 $966 = HEAP32[$wp>>2]|0;
 $967 = (($966) + -836|0);
 $968 = +HEAPF32[$967>>2];
 $969 = $965 * $968;
 $970 = HEAP32[$1>>2]|0;
 $971 = (($970) + 36|0);
 HEAPF32[$971>>2] = $969;
 $972 = HEAP32[$1>>2]|0;
 $973 = +HEAPF32[$972>>2];
 $974 = HEAP32[$1>>2]|0;
 $975 = (($974) + 48|0);
 $976 = +HEAPF32[$975>>2];
 $977 = $973 - $976;
 HEAPF32[$xr>>2] = $977;
 $978 = HEAP32[$1>>2]|0;
 $979 = (($978) + 48|0);
 $980 = +HEAPF32[$979>>2];
 $981 = HEAP32[$1>>2]|0;
 $982 = +HEAPF32[$981>>2];
 $983 = $982 + $980;
 HEAPF32[$981>>2] = $983;
 $984 = +HEAPF32[$xr>>2];
 $985 = HEAP32[$wp>>2]|0;
 $986 = (($985) + -260|0);
 $987 = +HEAPF32[$986>>2];
 $988 = $984 * $987;
 $989 = HEAP32[$1>>2]|0;
 $990 = (($989) + 48|0);
 HEAPF32[$990>>2] = $988;
 $991 = HEAP32[$1>>2]|0;
 $992 = (($991) + 4|0);
 $993 = +HEAPF32[$992>>2];
 $994 = HEAP32[$1>>2]|0;
 $995 = (($994) + 52|0);
 $996 = +HEAPF32[$995>>2];
 $997 = $993 - $996;
 HEAPF32[$xr>>2] = $997;
 $998 = HEAP32[$1>>2]|0;
 $999 = (($998) + 52|0);
 $1000 = +HEAPF32[$999>>2];
 $1001 = HEAP32[$1>>2]|0;
 $1002 = (($1001) + 4|0);
 $1003 = +HEAPF32[$1002>>2];
 $1004 = $1003 + $1000;
 HEAPF32[$1002>>2] = $1004;
 $1005 = +HEAPF32[$xr>>2];
 $1006 = HEAP32[$wp>>2]|0;
 $1007 = (($1006) + -260|0);
 $1008 = +HEAPF32[$1007>>2];
 $1009 = $1005 * $1008;
 $1010 = HEAP32[$1>>2]|0;
 $1011 = (($1010) + 52|0);
 HEAPF32[$1011>>2] = $1009;
 $1012 = HEAP32[$1>>2]|0;
 $1013 = (($1012) + 64|0);
 $1014 = +HEAPF32[$1013>>2];
 $1015 = HEAP32[$1>>2]|0;
 $1016 = (($1015) + 112|0);
 $1017 = +HEAPF32[$1016>>2];
 $1018 = $1014 - $1017;
 HEAPF32[$xr>>2] = $1018;
 $1019 = HEAP32[$1>>2]|0;
 $1020 = (($1019) + 112|0);
 $1021 = +HEAPF32[$1020>>2];
 $1022 = HEAP32[$1>>2]|0;
 $1023 = (($1022) + 64|0);
 $1024 = +HEAPF32[$1023>>2];
 $1025 = $1024 + $1021;
 HEAPF32[$1023>>2] = $1025;
 $1026 = +HEAPF32[$xr>>2];
 $1027 = HEAP32[$wp>>2]|0;
 $1028 = (($1027) + -260|0);
 $1029 = +HEAPF32[$1028>>2];
 $1030 = $1026 * $1029;
 $1031 = HEAP32[$1>>2]|0;
 $1032 = (($1031) + 112|0);
 HEAPF32[$1032>>2] = $1030;
 $1033 = HEAP32[$1>>2]|0;
 $1034 = (($1033) + 68|0);
 $1035 = +HEAPF32[$1034>>2];
 $1036 = -$1035;
 $1037 = HEAP32[$1>>2]|0;
 $1038 = (($1037) + 116|0);
 $1039 = +HEAPF32[$1038>>2];
 $1040 = $1036 + $1039;
 HEAPF32[$xr>>2] = $1040;
 $1041 = HEAP32[$1>>2]|0;
 $1042 = (($1041) + 116|0);
 $1043 = +HEAPF32[$1042>>2];
 $1044 = HEAP32[$1>>2]|0;
 $1045 = (($1044) + 68|0);
 $1046 = +HEAPF32[$1045>>2];
 $1047 = $1046 + $1043;
 HEAPF32[$1045>>2] = $1047;
 $1048 = +HEAPF32[$xr>>2];
 $1049 = HEAP32[$wp>>2]|0;
 $1050 = (($1049) + -260|0);
 $1051 = +HEAPF32[$1050>>2];
 $1052 = $1048 * $1051;
 $1053 = HEAP32[$1>>2]|0;
 $1054 = (($1053) + 116|0);
 HEAPF32[$1054>>2] = $1052;
 $1055 = HEAP32[$1>>2]|0;
 $1056 = (($1055) + 8|0);
 $1057 = +HEAPF32[$1056>>2];
 $1058 = HEAP32[$1>>2]|0;
 $1059 = (($1058) + 40|0);
 $1060 = +HEAPF32[$1059>>2];
 $1061 = $1057 - $1060;
 $1062 = $1061;
 $1063 = 1.41421356237309514547 * $1062;
 $1064 = $1063;
 HEAPF32[$xr>>2] = $1064;
 $1065 = HEAP32[$1>>2]|0;
 $1066 = (($1065) + 40|0);
 $1067 = +HEAPF32[$1066>>2];
 $1068 = HEAP32[$1>>2]|0;
 $1069 = (($1068) + 8|0);
 $1070 = +HEAPF32[$1069>>2];
 $1071 = $1070 + $1067;
 HEAPF32[$1069>>2] = $1071;
 $1072 = +HEAPF32[$xr>>2];
 $1073 = HEAP32[$1>>2]|0;
 $1074 = (($1073) + 40|0);
 HEAPF32[$1074>>2] = $1072;
 $1075 = HEAP32[$1>>2]|0;
 $1076 = (($1075) + 12|0);
 $1077 = +HEAPF32[$1076>>2];
 $1078 = HEAP32[$1>>2]|0;
 $1079 = (($1078) + 44|0);
 $1080 = +HEAPF32[$1079>>2];
 $1081 = $1077 - $1080;
 $1082 = $1081;
 $1083 = 1.41421356237309514547 * $1082;
 $1084 = $1083;
 HEAPF32[$xr>>2] = $1084;
 $1085 = HEAP32[$1>>2]|0;
 $1086 = (($1085) + 44|0);
 $1087 = +HEAPF32[$1086>>2];
 $1088 = HEAP32[$1>>2]|0;
 $1089 = (($1088) + 12|0);
 $1090 = +HEAPF32[$1089>>2];
 $1091 = $1090 + $1087;
 HEAPF32[$1089>>2] = $1091;
 $1092 = +HEAPF32[$xr>>2];
 $1093 = HEAP32[$1>>2]|0;
 $1094 = (($1093) + 44|0);
 HEAPF32[$1094>>2] = $1092;
 $1095 = HEAP32[$1>>2]|0;
 $1096 = (($1095) + 72|0);
 $1097 = +HEAPF32[$1096>>2];
 $1098 = -$1097;
 $1099 = HEAP32[$1>>2]|0;
 $1100 = (($1099) + 104|0);
 $1101 = +HEAPF32[$1100>>2];
 $1102 = $1098 + $1101;
 $1103 = $1102;
 $1104 = 1.41421356237309514547 * $1103;
 $1105 = $1104;
 HEAPF32[$xr>>2] = $1105;
 $1106 = HEAP32[$1>>2]|0;
 $1107 = (($1106) + 104|0);
 $1108 = +HEAPF32[$1107>>2];
 $1109 = HEAP32[$1>>2]|0;
 $1110 = (($1109) + 72|0);
 $1111 = +HEAPF32[$1110>>2];
 $1112 = $1111 + $1108;
 HEAPF32[$1110>>2] = $1112;
 $1113 = +HEAPF32[$xr>>2];
 $1114 = HEAP32[$1>>2]|0;
 $1115 = (($1114) + 72|0);
 $1116 = +HEAPF32[$1115>>2];
 $1117 = $1113 - $1116;
 $1118 = HEAP32[$1>>2]|0;
 $1119 = (($1118) + 104|0);
 HEAPF32[$1119>>2] = $1117;
 $1120 = HEAP32[$1>>2]|0;
 $1121 = (($1120) + 76|0);
 $1122 = +HEAPF32[$1121>>2];
 $1123 = -$1122;
 $1124 = HEAP32[$1>>2]|0;
 $1125 = (($1124) + 108|0);
 $1126 = +HEAPF32[$1125>>2];
 $1127 = $1123 + $1126;
 $1128 = $1127;
 $1129 = 1.41421356237309514547 * $1128;
 $1130 = $1129;
 HEAPF32[$xr>>2] = $1130;
 $1131 = HEAP32[$1>>2]|0;
 $1132 = (($1131) + 108|0);
 $1133 = +HEAPF32[$1132>>2];
 $1134 = HEAP32[$1>>2]|0;
 $1135 = (($1134) + 76|0);
 $1136 = +HEAPF32[$1135>>2];
 $1137 = $1136 + $1133;
 HEAPF32[$1135>>2] = $1137;
 $1138 = +HEAPF32[$xr>>2];
 $1139 = HEAP32[$1>>2]|0;
 $1140 = (($1139) + 76|0);
 $1141 = +HEAPF32[$1140>>2];
 $1142 = $1138 - $1141;
 $1143 = HEAP32[$1>>2]|0;
 $1144 = (($1143) + 108|0);
 HEAPF32[$1144>>2] = $1142;
 $1145 = HEAP32[$1>>2]|0;
 $1146 = (($1145) + 8|0);
 $1147 = +HEAPF32[$1146>>2];
 HEAPF32[$xr>>2] = $1147;
 $1148 = HEAP32[$1>>2]|0;
 $1149 = (($1148) + 12|0);
 $1150 = +HEAPF32[$1149>>2];
 $1151 = HEAP32[$1>>2]|0;
 $1152 = (($1151) + 76|0);
 $1153 = +HEAPF32[$1152>>2];
 $1154 = $1153 - $1150;
 HEAPF32[$1152>>2] = $1154;
 $1155 = +HEAPF32[$xr>>2];
 $1156 = HEAP32[$1>>2]|0;
 $1157 = (($1156) + 12|0);
 $1158 = +HEAPF32[$1157>>2];
 $1159 = $1158 - $1155;
 HEAPF32[$1157>>2] = $1159;
 $1160 = HEAP32[$1>>2]|0;
 $1161 = (($1160) + 124|0);
 $1162 = +HEAPF32[$1161>>2];
 $1163 = +HEAPF32[$xr>>2];
 $1164 = $1162 - $1163;
 $1165 = HEAP32[$1>>2]|0;
 $1166 = (($1165) + 8|0);
 HEAPF32[$1166>>2] = $1164;
 $1167 = +HEAPF32[$xr>>2];
 $1168 = HEAP32[$1>>2]|0;
 $1169 = (($1168) + 124|0);
 $1170 = +HEAPF32[$1169>>2];
 $1171 = $1170 + $1167;
 HEAPF32[$1169>>2] = $1171;
 $1172 = HEAP32[$1>>2]|0;
 $1173 = (($1172) + 12|0);
 $1174 = +HEAPF32[$1173>>2];
 HEAPF32[$xr>>2] = $1174;
 $1175 = HEAP32[$1>>2]|0;
 $1176 = (($1175) + 76|0);
 $1177 = +HEAPF32[$1176>>2];
 $1178 = HEAP32[$1>>2]|0;
 $1179 = (($1178) + 44|0);
 $1180 = +HEAPF32[$1179>>2];
 $1181 = $1180 - $1177;
 HEAPF32[$1179>>2] = $1181;
 $1182 = +HEAPF32[$xr>>2];
 $1183 = HEAP32[$1>>2]|0;
 $1184 = (($1183) + 72|0);
 $1185 = +HEAPF32[$1184>>2];
 $1186 = $1185 - $1182;
 HEAPF32[$1184>>2] = $1186;
 $1187 = HEAP32[$1>>2]|0;
 $1188 = (($1187) + 120|0);
 $1189 = +HEAPF32[$1188>>2];
 $1190 = +HEAPF32[$xr>>2];
 $1191 = $1189 - $1190;
 $1192 = HEAP32[$1>>2]|0;
 $1193 = (($1192) + 12|0);
 HEAPF32[$1193>>2] = $1191;
 $1194 = +HEAPF32[$xr>>2];
 $1195 = HEAP32[$1>>2]|0;
 $1196 = (($1195) + 120|0);
 $1197 = +HEAPF32[$1196>>2];
 $1198 = $1197 + $1194;
 HEAPF32[$1196>>2] = $1198;
 $1199 = HEAP32[$1>>2]|0;
 $1200 = (($1199) + 72|0);
 $1201 = +HEAPF32[$1200>>2];
 HEAPF32[$xr>>2] = $1201;
 $1202 = HEAP32[$1>>2]|0;
 $1203 = (($1202) + 44|0);
 $1204 = +HEAPF32[$1203>>2];
 $1205 = HEAP32[$1>>2]|0;
 $1206 = (($1205) + 108|0);
 $1207 = +HEAPF32[$1206>>2];
 $1208 = $1207 - $1204;
 HEAPF32[$1206>>2] = $1208;
 $1209 = +HEAPF32[$xr>>2];
 $1210 = HEAP32[$1>>2]|0;
 $1211 = (($1210) + 76|0);
 $1212 = +HEAPF32[$1211>>2];
 $1213 = $1212 - $1209;
 HEAPF32[$1211>>2] = $1213;
 $1214 = HEAP32[$1>>2]|0;
 $1215 = (($1214) + 60|0);
 $1216 = +HEAPF32[$1215>>2];
 $1217 = +HEAPF32[$xr>>2];
 $1218 = $1216 - $1217;
 $1219 = HEAP32[$1>>2]|0;
 $1220 = (($1219) + 72|0);
 HEAPF32[$1220>>2] = $1218;
 $1221 = +HEAPF32[$xr>>2];
 $1222 = HEAP32[$1>>2]|0;
 $1223 = (($1222) + 60|0);
 $1224 = +HEAPF32[$1223>>2];
 $1225 = $1224 + $1221;
 HEAPF32[$1223>>2] = $1225;
 $1226 = HEAP32[$1>>2]|0;
 $1227 = (($1226) + 76|0);
 $1228 = +HEAPF32[$1227>>2];
 HEAPF32[$xr>>2] = $1228;
 $1229 = +HEAPF32[$xr>>2];
 $1230 = HEAP32[$1>>2]|0;
 $1231 = (($1230) + 40|0);
 $1232 = +HEAPF32[$1231>>2];
 $1233 = $1232 - $1229;
 HEAPF32[$1231>>2] = $1233;
 $1234 = HEAP32[$1>>2]|0;
 $1235 = (($1234) + 56|0);
 $1236 = +HEAPF32[$1235>>2];
 $1237 = +HEAPF32[$xr>>2];
 $1238 = $1236 - $1237;
 $1239 = HEAP32[$1>>2]|0;
 $1240 = (($1239) + 76|0);
 HEAPF32[$1240>>2] = $1238;
 $1241 = +HEAPF32[$xr>>2];
 $1242 = HEAP32[$1>>2]|0;
 $1243 = (($1242) + 56|0);
 $1244 = +HEAPF32[$1243>>2];
 $1245 = $1244 + $1241;
 HEAPF32[$1243>>2] = $1245;
 $1246 = HEAP32[$1>>2]|0;
 $1247 = (($1246) + 40|0);
 $1248 = +HEAPF32[$1247>>2];
 HEAPF32[$xr>>2] = $1248;
 $1249 = +HEAPF32[$xr>>2];
 $1250 = HEAP32[$1>>2]|0;
 $1251 = (($1250) + 44|0);
 $1252 = +HEAPF32[$1251>>2];
 $1253 = $1252 - $1249;
 HEAPF32[$1251>>2] = $1253;
 $1254 = HEAP32[$1>>2]|0;
 $1255 = (($1254) + 92|0);
 $1256 = +HEAPF32[$1255>>2];
 $1257 = +HEAPF32[$xr>>2];
 $1258 = $1256 - $1257;
 $1259 = HEAP32[$1>>2]|0;
 $1260 = (($1259) + 40|0);
 HEAPF32[$1260>>2] = $1258;
 $1261 = +HEAPF32[$xr>>2];
 $1262 = HEAP32[$1>>2]|0;
 $1263 = (($1262) + 92|0);
 $1264 = +HEAPF32[$1263>>2];
 $1265 = $1264 + $1261;
 HEAPF32[$1263>>2] = $1265;
 $1266 = HEAP32[$1>>2]|0;
 $1267 = (($1266) + 44|0);
 $1268 = +HEAPF32[$1267>>2];
 HEAPF32[$xr>>2] = $1268;
 $1269 = +HEAPF32[$xr>>2];
 $1270 = HEAP32[$1>>2]|0;
 $1271 = (($1270) + 104|0);
 $1272 = +HEAPF32[$1271>>2];
 $1273 = $1272 - $1269;
 HEAPF32[$1271>>2] = $1273;
 $1274 = HEAP32[$1>>2]|0;
 $1275 = (($1274) + 88|0);
 $1276 = +HEAPF32[$1275>>2];
 $1277 = +HEAPF32[$xr>>2];
 $1278 = $1276 - $1277;
 $1279 = HEAP32[$1>>2]|0;
 $1280 = (($1279) + 44|0);
 HEAPF32[$1280>>2] = $1278;
 $1281 = +HEAPF32[$xr>>2];
 $1282 = HEAP32[$1>>2]|0;
 $1283 = (($1282) + 88|0);
 $1284 = +HEAPF32[$1283>>2];
 $1285 = $1284 + $1281;
 HEAPF32[$1283>>2] = $1285;
 $1286 = HEAP32[$1>>2]|0;
 $1287 = (($1286) + 104|0);
 $1288 = +HEAPF32[$1287>>2];
 HEAPF32[$xr>>2] = $1288;
 $1289 = +HEAPF32[$xr>>2];
 $1290 = HEAP32[$1>>2]|0;
 $1291 = (($1290) + 108|0);
 $1292 = +HEAPF32[$1291>>2];
 $1293 = $1292 - $1289;
 HEAPF32[$1291>>2] = $1293;
 $1294 = HEAP32[$1>>2]|0;
 $1295 = (($1294) + 28|0);
 $1296 = +HEAPF32[$1295>>2];
 $1297 = +HEAPF32[$xr>>2];
 $1298 = $1296 - $1297;
 $1299 = HEAP32[$1>>2]|0;
 $1300 = (($1299) + 104|0);
 HEAPF32[$1300>>2] = $1298;
 $1301 = +HEAPF32[$xr>>2];
 $1302 = HEAP32[$1>>2]|0;
 $1303 = (($1302) + 28|0);
 $1304 = +HEAPF32[$1303>>2];
 $1305 = $1304 + $1301;
 HEAPF32[$1303>>2] = $1305;
 $1306 = HEAP32[$1>>2]|0;
 $1307 = (($1306) + 108|0);
 $1308 = +HEAPF32[$1307>>2];
 HEAPF32[$xr>>2] = $1308;
 $1309 = HEAP32[$1>>2]|0;
 $1310 = (($1309) + 24|0);
 $1311 = +HEAPF32[$1310>>2];
 $1312 = +HEAPF32[$xr>>2];
 $1313 = $1311 - $1312;
 $1314 = HEAP32[$1>>2]|0;
 $1315 = (($1314) + 108|0);
 HEAPF32[$1315>>2] = $1313;
 $1316 = +HEAPF32[$xr>>2];
 $1317 = HEAP32[$1>>2]|0;
 $1318 = (($1317) + 24|0);
 $1319 = +HEAPF32[$1318>>2];
 $1320 = $1319 + $1316;
 HEAPF32[$1318>>2] = $1320;
 $1321 = HEAP32[$1>>2]|0;
 $1322 = +HEAPF32[$1321>>2];
 $1323 = HEAP32[$1>>2]|0;
 $1324 = (($1323) + 16|0);
 $1325 = +HEAPF32[$1324>>2];
 $1326 = $1322 - $1325;
 $1327 = $1326;
 $1328 = 1.41421356237309514547 * $1327;
 $1329 = $1328;
 HEAPF32[$xr>>2] = $1329;
 $1330 = HEAP32[$1>>2]|0;
 $1331 = (($1330) + 16|0);
 $1332 = +HEAPF32[$1331>>2];
 $1333 = HEAP32[$1>>2]|0;
 $1334 = +HEAPF32[$1333>>2];
 $1335 = $1334 + $1332;
 HEAPF32[$1333>>2] = $1335;
 $1336 = +HEAPF32[$xr>>2];
 $1337 = HEAP32[$1>>2]|0;
 $1338 = (($1337) + 16|0);
 HEAPF32[$1338>>2] = $1336;
 $1339 = HEAP32[$1>>2]|0;
 $1340 = (($1339) + 4|0);
 $1341 = +HEAPF32[$1340>>2];
 $1342 = HEAP32[$1>>2]|0;
 $1343 = (($1342) + 20|0);
 $1344 = +HEAPF32[$1343>>2];
 $1345 = $1341 - $1344;
 $1346 = $1345;
 $1347 = 1.41421356237309514547 * $1346;
 $1348 = $1347;
 HEAPF32[$xr>>2] = $1348;
 $1349 = HEAP32[$1>>2]|0;
 $1350 = (($1349) + 20|0);
 $1351 = +HEAPF32[$1350>>2];
 $1352 = HEAP32[$1>>2]|0;
 $1353 = (($1352) + 4|0);
 $1354 = +HEAPF32[$1353>>2];
 $1355 = $1354 + $1351;
 HEAPF32[$1353>>2] = $1355;
 $1356 = +HEAPF32[$xr>>2];
 $1357 = HEAP32[$1>>2]|0;
 $1358 = (($1357) + 20|0);
 HEAPF32[$1358>>2] = $1356;
 $1359 = HEAP32[$1>>2]|0;
 $1360 = (($1359) + 64|0);
 $1361 = +HEAPF32[$1360>>2];
 $1362 = HEAP32[$1>>2]|0;
 $1363 = (($1362) + 80|0);
 $1364 = +HEAPF32[$1363>>2];
 $1365 = $1361 - $1364;
 $1366 = $1365;
 $1367 = 1.41421356237309514547 * $1366;
 $1368 = $1367;
 HEAPF32[$xr>>2] = $1368;
 $1369 = HEAP32[$1>>2]|0;
 $1370 = (($1369) + 80|0);
 $1371 = +HEAPF32[$1370>>2];
 $1372 = HEAP32[$1>>2]|0;
 $1373 = (($1372) + 64|0);
 $1374 = +HEAPF32[$1373>>2];
 $1375 = $1374 + $1371;
 HEAPF32[$1373>>2] = $1375;
 $1376 = +HEAPF32[$xr>>2];
 $1377 = HEAP32[$1>>2]|0;
 $1378 = (($1377) + 80|0);
 HEAPF32[$1378>>2] = $1376;
 $1379 = HEAP32[$1>>2]|0;
 $1380 = (($1379) + 68|0);
 $1381 = +HEAPF32[$1380>>2];
 $1382 = HEAP32[$1>>2]|0;
 $1383 = (($1382) + 84|0);
 $1384 = +HEAPF32[$1383>>2];
 $1385 = $1381 - $1384;
 $1386 = $1385;
 $1387 = 1.41421356237309514547 * $1386;
 $1388 = $1387;
 HEAPF32[$xr>>2] = $1388;
 $1389 = HEAP32[$1>>2]|0;
 $1390 = (($1389) + 84|0);
 $1391 = +HEAPF32[$1390>>2];
 $1392 = HEAP32[$1>>2]|0;
 $1393 = (($1392) + 68|0);
 $1394 = +HEAPF32[$1393>>2];
 $1395 = $1394 + $1391;
 HEAPF32[$1393>>2] = $1395;
 $1396 = +HEAPF32[$xr>>2];
 $1397 = HEAP32[$1>>2]|0;
 $1398 = (($1397) + 84|0);
 HEAPF32[$1398>>2] = $1396;
 $1399 = HEAP32[$1>>2]|0;
 $1400 = (($1399) + 32|0);
 $1401 = +HEAPF32[$1400>>2];
 $1402 = HEAP32[$1>>2]|0;
 $1403 = (($1402) + 48|0);
 $1404 = +HEAPF32[$1403>>2];
 $1405 = $1401 - $1404;
 $1406 = $1405;
 $1407 = -1.41421356237309514547 * $1406;
 $1408 = $1407;
 HEAPF32[$xr>>2] = $1408;
 $1409 = HEAP32[$1>>2]|0;
 $1410 = (($1409) + 48|0);
 $1411 = +HEAPF32[$1410>>2];
 $1412 = HEAP32[$1>>2]|0;
 $1413 = (($1412) + 32|0);
 $1414 = +HEAPF32[$1413>>2];
 $1415 = $1414 + $1411;
 HEAPF32[$1413>>2] = $1415;
 $1416 = +HEAPF32[$xr>>2];
 $1417 = HEAP32[$1>>2]|0;
 $1418 = (($1417) + 32|0);
 $1419 = +HEAPF32[$1418>>2];
 $1420 = $1416 - $1419;
 $1421 = HEAP32[$1>>2]|0;
 $1422 = (($1421) + 48|0);
 HEAPF32[$1422>>2] = $1420;
 $1423 = HEAP32[$1>>2]|0;
 $1424 = (($1423) + 36|0);
 $1425 = +HEAPF32[$1424>>2];
 $1426 = HEAP32[$1>>2]|0;
 $1427 = (($1426) + 52|0);
 $1428 = +HEAPF32[$1427>>2];
 $1429 = $1425 - $1428;
 $1430 = $1429;
 $1431 = -1.41421356237309514547 * $1430;
 $1432 = $1431;
 HEAPF32[$xr>>2] = $1432;
 $1433 = HEAP32[$1>>2]|0;
 $1434 = (($1433) + 52|0);
 $1435 = +HEAPF32[$1434>>2];
 $1436 = HEAP32[$1>>2]|0;
 $1437 = (($1436) + 36|0);
 $1438 = +HEAPF32[$1437>>2];
 $1439 = $1438 + $1435;
 HEAPF32[$1437>>2] = $1439;
 $1440 = +HEAPF32[$xr>>2];
 $1441 = HEAP32[$1>>2]|0;
 $1442 = (($1441) + 36|0);
 $1443 = +HEAPF32[$1442>>2];
 $1444 = $1440 - $1443;
 $1445 = HEAP32[$1>>2]|0;
 $1446 = (($1445) + 52|0);
 HEAPF32[$1446>>2] = $1444;
 $1447 = HEAP32[$1>>2]|0;
 $1448 = (($1447) + 100|0);
 $1449 = +HEAPF32[$1448>>2];
 $1450 = HEAP32[$1>>2]|0;
 $1451 = (($1450) + 116|0);
 $1452 = +HEAPF32[$1451>>2];
 $1453 = $1449 - $1452;
 $1454 = $1453;
 $1455 = -1.41421356237309514547 * $1454;
 $1456 = $1455;
 HEAPF32[$xr>>2] = $1456;
 $1457 = HEAP32[$1>>2]|0;
 $1458 = (($1457) + 116|0);
 $1459 = +HEAPF32[$1458>>2];
 $1460 = HEAP32[$1>>2]|0;
 $1461 = (($1460) + 100|0);
 $1462 = +HEAPF32[$1461>>2];
 $1463 = $1462 + $1459;
 HEAPF32[$1461>>2] = $1463;
 $1464 = +HEAPF32[$xr>>2];
 $1465 = HEAP32[$1>>2]|0;
 $1466 = (($1465) + 100|0);
 $1467 = +HEAPF32[$1466>>2];
 $1468 = $1464 - $1467;
 $1469 = HEAP32[$1>>2]|0;
 $1470 = (($1469) + 116|0);
 HEAPF32[$1470>>2] = $1468;
 $1471 = HEAP32[$1>>2]|0;
 $1472 = (($1471) + 96|0);
 $1473 = +HEAPF32[$1472>>2];
 $1474 = HEAP32[$1>>2]|0;
 $1475 = (($1474) + 112|0);
 $1476 = +HEAPF32[$1475>>2];
 $1477 = $1473 + $1476;
 $1478 = $1477;
 $1479 = -1.41421356237309514547 * $1478;
 $1480 = $1479;
 HEAPF32[$xr>>2] = $1480;
 $1481 = HEAP32[$1>>2]|0;
 $1482 = (($1481) + 112|0);
 $1483 = +HEAPF32[$1482>>2];
 $1484 = HEAP32[$1>>2]|0;
 $1485 = (($1484) + 96|0);
 $1486 = +HEAPF32[$1485>>2];
 $1487 = $1486 - $1483;
 HEAPF32[$1485>>2] = $1487;
 $1488 = +HEAPF32[$xr>>2];
 $1489 = HEAP32[$1>>2]|0;
 $1490 = (($1489) + 96|0);
 $1491 = +HEAPF32[$1490>>2];
 $1492 = $1488 - $1491;
 $1493 = HEAP32[$1>>2]|0;
 $1494 = (($1493) + 112|0);
 HEAPF32[$1494>>2] = $1492;
 $1495 = HEAP32[$1>>2]|0;
 $1496 = (($1495) + 96|0);
 $1497 = +HEAPF32[$1496>>2];
 $1498 = HEAP32[$1>>2]|0;
 $1499 = (($1498) + 64|0);
 $1500 = +HEAPF32[$1499>>2];
 $1501 = $1497 - $1500;
 HEAPF32[$xr>>2] = $1501;
 $1502 = +HEAPF32[$xr>>2];
 $1503 = HEAP32[$1>>2]|0;
 $1504 = (($1503) + 96|0);
 HEAPF32[$1504>>2] = $1502;
 $1505 = HEAP32[$1>>2]|0;
 $1506 = (($1505) + 80|0);
 $1507 = +HEAPF32[$1506>>2];
 $1508 = +HEAPF32[$xr>>2];
 $1509 = $1507 - $1508;
 HEAPF32[$xr>>2] = $1509;
 $1510 = +HEAPF32[$xr>>2];
 $1511 = HEAP32[$1>>2]|0;
 $1512 = (($1511) + 80|0);
 HEAPF32[$1512>>2] = $1510;
 $1513 = HEAP32[$1>>2]|0;
 $1514 = (($1513) + 112|0);
 $1515 = +HEAPF32[$1514>>2];
 $1516 = +HEAPF32[$xr>>2];
 $1517 = $1515 - $1516;
 HEAPF32[$xr>>2] = $1517;
 $1518 = +HEAPF32[$xr>>2];
 $1519 = HEAP32[$1>>2]|0;
 $1520 = (($1519) + 112|0);
 HEAPF32[$1520>>2] = $1518;
 $1521 = HEAP32[$1>>2]|0;
 $1522 = (($1521) + 100|0);
 $1523 = +HEAPF32[$1522>>2];
 $1524 = HEAP32[$1>>2]|0;
 $1525 = (($1524) + 68|0);
 $1526 = +HEAPF32[$1525>>2];
 $1527 = $1523 - $1526;
 HEAPF32[$xr>>2] = $1527;
 $1528 = +HEAPF32[$xr>>2];
 $1529 = HEAP32[$1>>2]|0;
 $1530 = (($1529) + 100|0);
 HEAPF32[$1530>>2] = $1528;
 $1531 = HEAP32[$1>>2]|0;
 $1532 = (($1531) + 84|0);
 $1533 = +HEAPF32[$1532>>2];
 $1534 = +HEAPF32[$xr>>2];
 $1535 = $1533 - $1534;
 HEAPF32[$xr>>2] = $1535;
 $1536 = +HEAPF32[$xr>>2];
 $1537 = HEAP32[$1>>2]|0;
 $1538 = (($1537) + 84|0);
 HEAPF32[$1538>>2] = $1536;
 $1539 = HEAP32[$1>>2]|0;
 $1540 = (($1539) + 116|0);
 $1541 = +HEAPF32[$1540>>2];
 $1542 = +HEAPF32[$xr>>2];
 $1543 = $1541 - $1542;
 HEAPF32[$xr>>2] = $1543;
 $1544 = +HEAPF32[$xr>>2];
 $1545 = HEAP32[$1>>2]|0;
 $1546 = (($1545) + 116|0);
 HEAPF32[$1546>>2] = $1544;
 $1547 = HEAP32[$1>>2]|0;
 $1548 = (($1547) + 68|0);
 $1549 = +HEAPF32[$1548>>2];
 $1550 = HEAP32[$1>>2]|0;
 $1551 = (($1550) + 4|0);
 $1552 = +HEAPF32[$1551>>2];
 $1553 = $1549 - $1552;
 HEAPF32[$xr>>2] = $1553;
 $1554 = +HEAPF32[$xr>>2];
 $1555 = HEAP32[$1>>2]|0;
 $1556 = (($1555) + 68|0);
 HEAPF32[$1556>>2] = $1554;
 $1557 = HEAP32[$1>>2]|0;
 $1558 = (($1557) + 36|0);
 $1559 = +HEAPF32[$1558>>2];
 $1560 = +HEAPF32[$xr>>2];
 $1561 = $1559 - $1560;
 HEAPF32[$xr>>2] = $1561;
 $1562 = +HEAPF32[$xr>>2];
 $1563 = HEAP32[$1>>2]|0;
 $1564 = (($1563) + 36|0);
 HEAPF32[$1564>>2] = $1562;
 $1565 = HEAP32[$1>>2]|0;
 $1566 = (($1565) + 100|0);
 $1567 = +HEAPF32[$1566>>2];
 $1568 = +HEAPF32[$xr>>2];
 $1569 = $1567 - $1568;
 HEAPF32[$xr>>2] = $1569;
 $1570 = +HEAPF32[$xr>>2];
 $1571 = HEAP32[$1>>2]|0;
 $1572 = (($1571) + 100|0);
 HEAPF32[$1572>>2] = $1570;
 $1573 = HEAP32[$1>>2]|0;
 $1574 = (($1573) + 20|0);
 $1575 = +HEAPF32[$1574>>2];
 $1576 = +HEAPF32[$xr>>2];
 $1577 = $1575 - $1576;
 HEAPF32[$xr>>2] = $1577;
 $1578 = +HEAPF32[$xr>>2];
 $1579 = HEAP32[$1>>2]|0;
 $1580 = (($1579) + 20|0);
 HEAPF32[$1580>>2] = $1578;
 $1581 = HEAP32[$1>>2]|0;
 $1582 = (($1581) + 84|0);
 $1583 = +HEAPF32[$1582>>2];
 $1584 = +HEAPF32[$xr>>2];
 $1585 = $1583 - $1584;
 HEAPF32[$xr>>2] = $1585;
 $1586 = +HEAPF32[$xr>>2];
 $1587 = HEAP32[$1>>2]|0;
 $1588 = (($1587) + 84|0);
 HEAPF32[$1588>>2] = $1586;
 $1589 = HEAP32[$1>>2]|0;
 $1590 = (($1589) + 52|0);
 $1591 = +HEAPF32[$1590>>2];
 $1592 = +HEAPF32[$xr>>2];
 $1593 = $1591 - $1592;
 HEAPF32[$xr>>2] = $1593;
 $1594 = +HEAPF32[$xr>>2];
 $1595 = HEAP32[$1>>2]|0;
 $1596 = (($1595) + 52|0);
 HEAPF32[$1596>>2] = $1594;
 $1597 = HEAP32[$1>>2]|0;
 $1598 = (($1597) + 116|0);
 $1599 = +HEAPF32[$1598>>2];
 $1600 = +HEAPF32[$xr>>2];
 $1601 = $1599 - $1600;
 HEAPF32[$xr>>2] = $1601;
 $1602 = +HEAPF32[$xr>>2];
 $1603 = HEAP32[$1>>2]|0;
 $1604 = (($1603) + 116|0);
 HEAPF32[$1604>>2] = $1602;
 $1605 = HEAP32[$1>>2]|0;
 $1606 = (($1605) + 4|0);
 $1607 = +HEAPF32[$1606>>2];
 $1608 = HEAP32[$1>>2]|0;
 $1609 = +HEAPF32[$1608>>2];
 $1610 = $1607 - $1609;
 HEAPF32[$xr>>2] = $1610;
 $1611 = +HEAPF32[$xr>>2];
 $1612 = HEAP32[$1>>2]|0;
 $1613 = (($1612) + 4|0);
 HEAPF32[$1613>>2] = $1611;
 $1614 = HEAP32[$1>>2]|0;
 $1615 = (($1614) + 64|0);
 $1616 = +HEAPF32[$1615>>2];
 $1617 = +HEAPF32[$xr>>2];
 $1618 = $1616 - $1617;
 HEAPF32[$xr>>2] = $1618;
 $1619 = +HEAPF32[$xr>>2];
 $1620 = HEAP32[$1>>2]|0;
 $1621 = (($1620) + 64|0);
 HEAPF32[$1621>>2] = $1619;
 $1622 = HEAP32[$1>>2]|0;
 $1623 = (($1622) + 68|0);
 $1624 = +HEAPF32[$1623>>2];
 $1625 = +HEAPF32[$xr>>2];
 $1626 = $1624 - $1625;
 HEAPF32[$xr>>2] = $1626;
 $1627 = +HEAPF32[$xr>>2];
 $1628 = HEAP32[$1>>2]|0;
 $1629 = (($1628) + 68|0);
 HEAPF32[$1629>>2] = $1627;
 $1630 = HEAP32[$1>>2]|0;
 $1631 = (($1630) + 32|0);
 $1632 = +HEAPF32[$1631>>2];
 $1633 = +HEAPF32[$xr>>2];
 $1634 = $1632 - $1633;
 HEAPF32[$xr>>2] = $1634;
 $1635 = +HEAPF32[$xr>>2];
 $1636 = HEAP32[$1>>2]|0;
 $1637 = (($1636) + 32|0);
 HEAPF32[$1637>>2] = $1635;
 $1638 = HEAP32[$1>>2]|0;
 $1639 = (($1638) + 36|0);
 $1640 = +HEAPF32[$1639>>2];
 $1641 = +HEAPF32[$xr>>2];
 $1642 = $1640 - $1641;
 HEAPF32[$xr>>2] = $1642;
 $1643 = +HEAPF32[$xr>>2];
 $1644 = HEAP32[$1>>2]|0;
 $1645 = (($1644) + 36|0);
 HEAPF32[$1645>>2] = $1643;
 $1646 = HEAP32[$1>>2]|0;
 $1647 = (($1646) + 96|0);
 $1648 = +HEAPF32[$1647>>2];
 $1649 = +HEAPF32[$xr>>2];
 $1650 = $1648 - $1649;
 HEAPF32[$xr>>2] = $1650;
 $1651 = +HEAPF32[$xr>>2];
 $1652 = HEAP32[$1>>2]|0;
 $1653 = (($1652) + 96|0);
 HEAPF32[$1653>>2] = $1651;
 $1654 = HEAP32[$1>>2]|0;
 $1655 = (($1654) + 100|0);
 $1656 = +HEAPF32[$1655>>2];
 $1657 = +HEAPF32[$xr>>2];
 $1658 = $1656 - $1657;
 HEAPF32[$xr>>2] = $1658;
 $1659 = +HEAPF32[$xr>>2];
 $1660 = HEAP32[$1>>2]|0;
 $1661 = (($1660) + 100|0);
 HEAPF32[$1661>>2] = $1659;
 $1662 = HEAP32[$1>>2]|0;
 $1663 = (($1662) + 16|0);
 $1664 = +HEAPF32[$1663>>2];
 $1665 = +HEAPF32[$xr>>2];
 $1666 = $1664 - $1665;
 HEAPF32[$xr>>2] = $1666;
 $1667 = +HEAPF32[$xr>>2];
 $1668 = HEAP32[$1>>2]|0;
 $1669 = (($1668) + 16|0);
 HEAPF32[$1669>>2] = $1667;
 $1670 = HEAP32[$1>>2]|0;
 $1671 = (($1670) + 20|0);
 $1672 = +HEAPF32[$1671>>2];
 $1673 = +HEAPF32[$xr>>2];
 $1674 = $1672 - $1673;
 HEAPF32[$xr>>2] = $1674;
 $1675 = +HEAPF32[$xr>>2];
 $1676 = HEAP32[$1>>2]|0;
 $1677 = (($1676) + 20|0);
 HEAPF32[$1677>>2] = $1675;
 $1678 = HEAP32[$1>>2]|0;
 $1679 = (($1678) + 80|0);
 $1680 = +HEAPF32[$1679>>2];
 $1681 = +HEAPF32[$xr>>2];
 $1682 = $1680 - $1681;
 HEAPF32[$xr>>2] = $1682;
 $1683 = +HEAPF32[$xr>>2];
 $1684 = HEAP32[$1>>2]|0;
 $1685 = (($1684) + 80|0);
 HEAPF32[$1685>>2] = $1683;
 $1686 = HEAP32[$1>>2]|0;
 $1687 = (($1686) + 84|0);
 $1688 = +HEAPF32[$1687>>2];
 $1689 = +HEAPF32[$xr>>2];
 $1690 = $1688 - $1689;
 HEAPF32[$xr>>2] = $1690;
 $1691 = +HEAPF32[$xr>>2];
 $1692 = HEAP32[$1>>2]|0;
 $1693 = (($1692) + 84|0);
 HEAPF32[$1693>>2] = $1691;
 $1694 = HEAP32[$1>>2]|0;
 $1695 = (($1694) + 48|0);
 $1696 = +HEAPF32[$1695>>2];
 $1697 = +HEAPF32[$xr>>2];
 $1698 = $1696 - $1697;
 HEAPF32[$xr>>2] = $1698;
 $1699 = +HEAPF32[$xr>>2];
 $1700 = HEAP32[$1>>2]|0;
 $1701 = (($1700) + 48|0);
 HEAPF32[$1701>>2] = $1699;
 $1702 = HEAP32[$1>>2]|0;
 $1703 = (($1702) + 52|0);
 $1704 = +HEAPF32[$1703>>2];
 $1705 = +HEAPF32[$xr>>2];
 $1706 = $1704 - $1705;
 HEAPF32[$xr>>2] = $1706;
 $1707 = +HEAPF32[$xr>>2];
 $1708 = HEAP32[$1>>2]|0;
 $1709 = (($1708) + 52|0);
 HEAPF32[$1709>>2] = $1707;
 $1710 = HEAP32[$1>>2]|0;
 $1711 = (($1710) + 112|0);
 $1712 = +HEAPF32[$1711>>2];
 $1713 = +HEAPF32[$xr>>2];
 $1714 = $1712 - $1713;
 HEAPF32[$xr>>2] = $1714;
 $1715 = +HEAPF32[$xr>>2];
 $1716 = HEAP32[$1>>2]|0;
 $1717 = (($1716) + 112|0);
 HEAPF32[$1717>>2] = $1715;
 $1718 = HEAP32[$1>>2]|0;
 $1719 = (($1718) + 116|0);
 $1720 = +HEAPF32[$1719>>2];
 $1721 = +HEAPF32[$xr>>2];
 $1722 = $1720 - $1721;
 HEAPF32[$xr>>2] = $1722;
 $1723 = +HEAPF32[$xr>>2];
 $1724 = HEAP32[$1>>2]|0;
 $1725 = (($1724) + 116|0);
 HEAPF32[$1725>>2] = $1723;
 $1726 = HEAP32[$1>>2]|0;
 $1727 = +HEAPF32[$1726>>2];
 HEAPF32[$xr>>2] = $1727;
 $1728 = HEAP32[$1>>2]|0;
 $1729 = (($1728) + 124|0);
 $1730 = +HEAPF32[$1729>>2];
 $1731 = HEAP32[$1>>2]|0;
 $1732 = +HEAPF32[$1731>>2];
 $1733 = $1732 + $1730;
 HEAPF32[$1731>>2] = $1733;
 $1734 = +HEAPF32[$xr>>2];
 $1735 = HEAP32[$1>>2]|0;
 $1736 = (($1735) + 124|0);
 $1737 = +HEAPF32[$1736>>2];
 $1738 = $1737 - $1734;
 HEAPF32[$1736>>2] = $1738;
 $1739 = HEAP32[$1>>2]|0;
 $1740 = (($1739) + 4|0);
 $1741 = +HEAPF32[$1740>>2];
 HEAPF32[$xr>>2] = $1741;
 $1742 = HEAP32[$1>>2]|0;
 $1743 = (($1742) + 120|0);
 $1744 = +HEAPF32[$1743>>2];
 $1745 = HEAP32[$1>>2]|0;
 $1746 = (($1745) + 4|0);
 $1747 = +HEAPF32[$1746>>2];
 $1748 = $1747 + $1744;
 HEAPF32[$1746>>2] = $1748;
 $1749 = +HEAPF32[$xr>>2];
 $1750 = HEAP32[$1>>2]|0;
 $1751 = (($1750) + 120|0);
 $1752 = +HEAPF32[$1751>>2];
 $1753 = $1752 - $1749;
 HEAPF32[$1751>>2] = $1753;
 $1754 = HEAP32[$1>>2]|0;
 $1755 = (($1754) + 64|0);
 $1756 = +HEAPF32[$1755>>2];
 HEAPF32[$xr>>2] = $1756;
 $1757 = HEAP32[$1>>2]|0;
 $1758 = (($1757) + 60|0);
 $1759 = +HEAPF32[$1758>>2];
 $1760 = HEAP32[$1>>2]|0;
 $1761 = (($1760) + 64|0);
 $1762 = +HEAPF32[$1761>>2];
 $1763 = $1762 + $1759;
 HEAPF32[$1761>>2] = $1763;
 $1764 = +HEAPF32[$xr>>2];
 $1765 = HEAP32[$1>>2]|0;
 $1766 = (($1765) + 60|0);
 $1767 = +HEAPF32[$1766>>2];
 $1768 = $1767 - $1764;
 HEAPF32[$1766>>2] = $1768;
 $1769 = HEAP32[$1>>2]|0;
 $1770 = (($1769) + 68|0);
 $1771 = +HEAPF32[$1770>>2];
 HEAPF32[$xr>>2] = $1771;
 $1772 = HEAP32[$1>>2]|0;
 $1773 = (($1772) + 56|0);
 $1774 = +HEAPF32[$1773>>2];
 $1775 = HEAP32[$1>>2]|0;
 $1776 = (($1775) + 68|0);
 $1777 = +HEAPF32[$1776>>2];
 $1778 = $1777 + $1774;
 HEAPF32[$1776>>2] = $1778;
 $1779 = +HEAPF32[$xr>>2];
 $1780 = HEAP32[$1>>2]|0;
 $1781 = (($1780) + 56|0);
 $1782 = +HEAPF32[$1781>>2];
 $1783 = $1782 - $1779;
 HEAPF32[$1781>>2] = $1783;
 $1784 = HEAP32[$1>>2]|0;
 $1785 = (($1784) + 32|0);
 $1786 = +HEAPF32[$1785>>2];
 HEAPF32[$xr>>2] = $1786;
 $1787 = HEAP32[$1>>2]|0;
 $1788 = (($1787) + 92|0);
 $1789 = +HEAPF32[$1788>>2];
 $1790 = HEAP32[$1>>2]|0;
 $1791 = (($1790) + 32|0);
 $1792 = +HEAPF32[$1791>>2];
 $1793 = $1792 + $1789;
 HEAPF32[$1791>>2] = $1793;
 $1794 = +HEAPF32[$xr>>2];
 $1795 = HEAP32[$1>>2]|0;
 $1796 = (($1795) + 92|0);
 $1797 = +HEAPF32[$1796>>2];
 $1798 = $1797 - $1794;
 HEAPF32[$1796>>2] = $1798;
 $1799 = HEAP32[$1>>2]|0;
 $1800 = (($1799) + 36|0);
 $1801 = +HEAPF32[$1800>>2];
 HEAPF32[$xr>>2] = $1801;
 $1802 = HEAP32[$1>>2]|0;
 $1803 = (($1802) + 88|0);
 $1804 = +HEAPF32[$1803>>2];
 $1805 = HEAP32[$1>>2]|0;
 $1806 = (($1805) + 36|0);
 $1807 = +HEAPF32[$1806>>2];
 $1808 = $1807 + $1804;
 HEAPF32[$1806>>2] = $1808;
 $1809 = +HEAPF32[$xr>>2];
 $1810 = HEAP32[$1>>2]|0;
 $1811 = (($1810) + 88|0);
 $1812 = +HEAPF32[$1811>>2];
 $1813 = $1812 - $1809;
 HEAPF32[$1811>>2] = $1813;
 $1814 = HEAP32[$1>>2]|0;
 $1815 = (($1814) + 96|0);
 $1816 = +HEAPF32[$1815>>2];
 HEAPF32[$xr>>2] = $1816;
 $1817 = HEAP32[$1>>2]|0;
 $1818 = (($1817) + 28|0);
 $1819 = +HEAPF32[$1818>>2];
 $1820 = HEAP32[$1>>2]|0;
 $1821 = (($1820) + 96|0);
 $1822 = +HEAPF32[$1821>>2];
 $1823 = $1822 + $1819;
 HEAPF32[$1821>>2] = $1823;
 $1824 = +HEAPF32[$xr>>2];
 $1825 = HEAP32[$1>>2]|0;
 $1826 = (($1825) + 28|0);
 $1827 = +HEAPF32[$1826>>2];
 $1828 = $1827 - $1824;
 HEAPF32[$1826>>2] = $1828;
 $1829 = HEAP32[$1>>2]|0;
 $1830 = (($1829) + 100|0);
 $1831 = +HEAPF32[$1830>>2];
 HEAPF32[$xr>>2] = $1831;
 $1832 = HEAP32[$1>>2]|0;
 $1833 = (($1832) + 24|0);
 $1834 = +HEAPF32[$1833>>2];
 $1835 = HEAP32[$1>>2]|0;
 $1836 = (($1835) + 100|0);
 $1837 = +HEAPF32[$1836>>2];
 $1838 = $1837 + $1834;
 HEAPF32[$1836>>2] = $1838;
 $1839 = +HEAPF32[$xr>>2];
 $1840 = HEAP32[$1>>2]|0;
 $1841 = (($1840) + 24|0);
 $1842 = +HEAPF32[$1841>>2];
 $1843 = $1842 - $1839;
 HEAPF32[$1841>>2] = $1843;
 $1844 = HEAP32[$1>>2]|0;
 $1845 = (($1844) + 16|0);
 $1846 = +HEAPF32[$1845>>2];
 HEAPF32[$xr>>2] = $1846;
 $1847 = HEAP32[$1>>2]|0;
 $1848 = (($1847) + 108|0);
 $1849 = +HEAPF32[$1848>>2];
 $1850 = HEAP32[$1>>2]|0;
 $1851 = (($1850) + 16|0);
 $1852 = +HEAPF32[$1851>>2];
 $1853 = $1852 + $1849;
 HEAPF32[$1851>>2] = $1853;
 $1854 = +HEAPF32[$xr>>2];
 $1855 = HEAP32[$1>>2]|0;
 $1856 = (($1855) + 108|0);
 $1857 = +HEAPF32[$1856>>2];
 $1858 = $1857 - $1854;
 HEAPF32[$1856>>2] = $1858;
 $1859 = HEAP32[$1>>2]|0;
 $1860 = (($1859) + 20|0);
 $1861 = +HEAPF32[$1860>>2];
 HEAPF32[$xr>>2] = $1861;
 $1862 = HEAP32[$1>>2]|0;
 $1863 = (($1862) + 104|0);
 $1864 = +HEAPF32[$1863>>2];
 $1865 = HEAP32[$1>>2]|0;
 $1866 = (($1865) + 20|0);
 $1867 = +HEAPF32[$1866>>2];
 $1868 = $1867 + $1864;
 HEAPF32[$1866>>2] = $1868;
 $1869 = +HEAPF32[$xr>>2];
 $1870 = HEAP32[$1>>2]|0;
 $1871 = (($1870) + 104|0);
 $1872 = +HEAPF32[$1871>>2];
 $1873 = $1872 - $1869;
 HEAPF32[$1871>>2] = $1873;
 $1874 = HEAP32[$1>>2]|0;
 $1875 = (($1874) + 80|0);
 $1876 = +HEAPF32[$1875>>2];
 HEAPF32[$xr>>2] = $1876;
 $1877 = HEAP32[$1>>2]|0;
 $1878 = (($1877) + 44|0);
 $1879 = +HEAPF32[$1878>>2];
 $1880 = HEAP32[$1>>2]|0;
 $1881 = (($1880) + 80|0);
 $1882 = +HEAPF32[$1881>>2];
 $1883 = $1882 + $1879;
 HEAPF32[$1881>>2] = $1883;
 $1884 = +HEAPF32[$xr>>2];
 $1885 = HEAP32[$1>>2]|0;
 $1886 = (($1885) + 44|0);
 $1887 = +HEAPF32[$1886>>2];
 $1888 = $1887 - $1884;
 HEAPF32[$1886>>2] = $1888;
 $1889 = HEAP32[$1>>2]|0;
 $1890 = (($1889) + 84|0);
 $1891 = +HEAPF32[$1890>>2];
 HEAPF32[$xr>>2] = $1891;
 $1892 = HEAP32[$1>>2]|0;
 $1893 = (($1892) + 40|0);
 $1894 = +HEAPF32[$1893>>2];
 $1895 = HEAP32[$1>>2]|0;
 $1896 = (($1895) + 84|0);
 $1897 = +HEAPF32[$1896>>2];
 $1898 = $1897 + $1894;
 HEAPF32[$1896>>2] = $1898;
 $1899 = +HEAPF32[$xr>>2];
 $1900 = HEAP32[$1>>2]|0;
 $1901 = (($1900) + 40|0);
 $1902 = +HEAPF32[$1901>>2];
 $1903 = $1902 - $1899;
 HEAPF32[$1901>>2] = $1903;
 $1904 = HEAP32[$1>>2]|0;
 $1905 = (($1904) + 48|0);
 $1906 = +HEAPF32[$1905>>2];
 HEAPF32[$xr>>2] = $1906;
 $1907 = HEAP32[$1>>2]|0;
 $1908 = (($1907) + 76|0);
 $1909 = +HEAPF32[$1908>>2];
 $1910 = HEAP32[$1>>2]|0;
 $1911 = (($1910) + 48|0);
 $1912 = +HEAPF32[$1911>>2];
 $1913 = $1912 + $1909;
 HEAPF32[$1911>>2] = $1913;
 $1914 = +HEAPF32[$xr>>2];
 $1915 = HEAP32[$1>>2]|0;
 $1916 = (($1915) + 76|0);
 $1917 = +HEAPF32[$1916>>2];
 $1918 = $1917 - $1914;
 HEAPF32[$1916>>2] = $1918;
 $1919 = HEAP32[$1>>2]|0;
 $1920 = (($1919) + 52|0);
 $1921 = +HEAPF32[$1920>>2];
 HEAPF32[$xr>>2] = $1921;
 $1922 = HEAP32[$1>>2]|0;
 $1923 = (($1922) + 72|0);
 $1924 = +HEAPF32[$1923>>2];
 $1925 = HEAP32[$1>>2]|0;
 $1926 = (($1925) + 52|0);
 $1927 = +HEAPF32[$1926>>2];
 $1928 = $1927 + $1924;
 HEAPF32[$1926>>2] = $1928;
 $1929 = +HEAPF32[$xr>>2];
 $1930 = HEAP32[$1>>2]|0;
 $1931 = (($1930) + 72|0);
 $1932 = +HEAPF32[$1931>>2];
 $1933 = $1932 - $1929;
 HEAPF32[$1931>>2] = $1933;
 $1934 = HEAP32[$1>>2]|0;
 $1935 = (($1934) + 112|0);
 $1936 = +HEAPF32[$1935>>2];
 HEAPF32[$xr>>2] = $1936;
 $1937 = HEAP32[$1>>2]|0;
 $1938 = (($1937) + 12|0);
 $1939 = +HEAPF32[$1938>>2];
 $1940 = HEAP32[$1>>2]|0;
 $1941 = (($1940) + 112|0);
 $1942 = +HEAPF32[$1941>>2];
 $1943 = $1942 + $1939;
 HEAPF32[$1941>>2] = $1943;
 $1944 = +HEAPF32[$xr>>2];
 $1945 = HEAP32[$1>>2]|0;
 $1946 = (($1945) + 12|0);
 $1947 = +HEAPF32[$1946>>2];
 $1948 = $1947 - $1944;
 HEAPF32[$1946>>2] = $1948;
 $1949 = HEAP32[$1>>2]|0;
 $1950 = (($1949) + 116|0);
 $1951 = +HEAPF32[$1950>>2];
 HEAPF32[$xr>>2] = $1951;
 $1952 = HEAP32[$1>>2]|0;
 $1953 = (($1952) + 8|0);
 $1954 = +HEAPF32[$1953>>2];
 $1955 = HEAP32[$1>>2]|0;
 $1956 = (($1955) + 116|0);
 $1957 = +HEAPF32[$1956>>2];
 $1958 = $1957 + $1954;
 HEAPF32[$1956>>2] = $1958;
 $1959 = +HEAPF32[$xr>>2];
 $1960 = HEAP32[$1>>2]|0;
 $1961 = (($1960) + 8|0);
 $1962 = +HEAPF32[$1961>>2];
 $1963 = $1962 - $1959;
 HEAPF32[$1961>>2] = $1963;
 STACKTOP = sp;return;
}
function _mdct_short($inout) {
 $inout = $inout|0;
 var $0 = 0, $1 = 0, $10 = 0.0, $100 = 0.0, $101 = 0.0, $102 = 0.0, $103 = 0.0, $104 = 0.0, $105 = 0.0, $106 = 0.0, $107 = 0.0, $108 = 0, $109 = 0, $11 = 0.0, $110 = 0.0, $111 = 0.0, $112 = 0.0, $113 = 0, $114 = 0, $115 = 0.0;
 var $116 = 0.0, $117 = 0.0, $118 = 0.0, $119 = 0.0, $12 = 0, $120 = 0.0, $121 = 0.0, $122 = 0.0, $123 = 0.0, $124 = 0.0, $125 = 0.0, $126 = 0.0, $127 = 0.0, $128 = 0.0, $129 = 0.0, $13 = 0.0, $130 = 0.0, $131 = 0, $132 = 0, $133 = 0.0;
 var $134 = 0.0, $135 = 0.0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0.0, $140 = 0, $141 = 0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0;
 var $25 = 0.0, $26 = 0, $27 = 0, $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0, $32 = 0, $33 = 0.0, $34 = 0.0, $35 = 0, $36 = 0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0, $41 = 0.0, $42 = 0.0;
 var $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0.0, $50 = 0, $51 = 0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0, $56 = 0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0.0, $60 = 0.0;
 var $61 = 0.0, $62 = 0, $63 = 0, $64 = 0.0, $65 = 0.0, $66 = 0.0, $67 = 0, $68 = 0, $69 = 0.0, $7 = 0.0, $70 = 0.0, $71 = 0.0, $72 = 0.0, $73 = 0.0, $74 = 0.0, $75 = 0.0, $76 = 0.0, $77 = 0.0, $78 = 0.0, $79 = 0.0;
 var $8 = 0, $80 = 0.0, $81 = 0, $82 = 0.0, $83 = 0.0, $84 = 0.0, $85 = 0.0, $86 = 0.0, $87 = 0.0, $88 = 0.0, $89 = 0.0, $9 = 0, $90 = 0, $91 = 0, $92 = 0.0, $93 = 0.0, $94 = 0.0, $95 = 0.0, $96 = 0.0, $97 = 0.0;
 var $98 = 0.0, $99 = 0.0, $l = 0, $tc0 = 0, $tc1 = 0, $tc2 = 0, $ts0 = 0, $ts1 = 0, $ts2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = sp + 28|0;
 $l = sp + 24|0;
 $tc0 = sp + 20|0;
 $tc1 = sp + 16|0;
 $tc2 = sp + 12|0;
 $ts0 = sp + 8|0;
 $ts1 = sp + 4|0;
 $ts2 = sp;
 HEAP32[$0>>2] = $inout;
 HEAP32[$l>>2] = 0;
 while(1) {
  $1 = HEAP32[$l>>2]|0;
  $2 = ($1|0)<(3);
  if (!($2)) {
   break;
  }
  $3 = HEAP32[$0>>2]|0;
  $4 = (($3) + 24|0);
  $5 = +HEAPF32[$4>>2];
  $6 = +HEAPF32[((16552 + 288|0))>>2];
  $7 = $5 * $6;
  $8 = HEAP32[$0>>2]|0;
  $9 = (($8) + 60|0);
  $10 = +HEAPF32[$9>>2];
  $11 = $7 - $10;
  HEAPF32[$ts0>>2] = $11;
  $12 = HEAP32[$0>>2]|0;
  $13 = +HEAPF32[$12>>2];
  $14 = +HEAPF32[((16552 + 296|0))>>2];
  $15 = $13 * $14;
  $16 = HEAP32[$0>>2]|0;
  $17 = (($16) + 36|0);
  $18 = +HEAPF32[$17>>2];
  $19 = $15 - $18;
  HEAPF32[$tc0>>2] = $19;
  $20 = +HEAPF32[$ts0>>2];
  $21 = +HEAPF32[$tc0>>2];
  $22 = $20 + $21;
  HEAPF32[$tc1>>2] = $22;
  $23 = +HEAPF32[$ts0>>2];
  $24 = +HEAPF32[$tc0>>2];
  $25 = $23 - $24;
  HEAPF32[$tc2>>2] = $25;
  $26 = HEAP32[$0>>2]|0;
  $27 = (($26) + 60|0);
  $28 = +HEAPF32[$27>>2];
  $29 = +HEAPF32[((16552 + 288|0))>>2];
  $30 = $28 * $29;
  $31 = HEAP32[$0>>2]|0;
  $32 = (($31) + 24|0);
  $33 = +HEAPF32[$32>>2];
  $34 = $30 + $33;
  HEAPF32[$ts0>>2] = $34;
  $35 = HEAP32[$0>>2]|0;
  $36 = (($35) + 36|0);
  $37 = +HEAPF32[$36>>2];
  $38 = +HEAPF32[((16552 + 296|0))>>2];
  $39 = $37 * $38;
  $40 = HEAP32[$0>>2]|0;
  $41 = +HEAPF32[$40>>2];
  $42 = $39 + $41;
  HEAPF32[$tc0>>2] = $42;
  $43 = +HEAPF32[$ts0>>2];
  $44 = +HEAPF32[$tc0>>2];
  $45 = $43 + $44;
  HEAPF32[$ts1>>2] = $45;
  $46 = +HEAPF32[$ts0>>2];
  $47 = -$46;
  $48 = +HEAPF32[$tc0>>2];
  $49 = $47 + $48;
  HEAPF32[$ts2>>2] = $49;
  $50 = HEAP32[$0>>2]|0;
  $51 = (($50) + 12|0);
  $52 = +HEAPF32[$51>>2];
  $53 = +HEAPF32[((16552 + 292|0))>>2];
  $54 = $52 * $53;
  $55 = HEAP32[$0>>2]|0;
  $56 = (($55) + 48|0);
  $57 = +HEAPF32[$56>>2];
  $58 = $54 - $57;
  $59 = $58;
  $60 = $59 * 2.06997811195308909253E-11;
  $61 = $60;
  HEAPF32[$tc0>>2] = $61;
  $62 = HEAP32[$0>>2]|0;
  $63 = (($62) + 48|0);
  $64 = +HEAPF32[$63>>2];
  $65 = +HEAPF32[((16552 + 292|0))>>2];
  $66 = $64 * $65;
  $67 = HEAP32[$0>>2]|0;
  $68 = (($67) + 12|0);
  $69 = +HEAPF32[$68>>2];
  $70 = $66 + $69;
  $71 = $70;
  $72 = $71 * 2.06997811195308909253E-11;
  $73 = $72;
  HEAPF32[$ts0>>2] = $73;
  $74 = +HEAPF32[$tc1>>2];
  $75 = $74;
  $76 = $75 * 1.90752519173727988323E-11;
  $77 = +HEAPF32[$tc0>>2];
  $78 = $77;
  $79 = $76 + $78;
  $80 = $79;
  $81 = HEAP32[$0>>2]|0;
  HEAPF32[$81>>2] = $80;
  $82 = +HEAPF32[$ts1>>2];
  $83 = -$82;
  $84 = $83;
  $85 = $84 * 1.90752519173727988323E-11;
  $86 = +HEAPF32[$ts0>>2];
  $87 = $86;
  $88 = $85 + $87;
  $89 = $88;
  $90 = HEAP32[$0>>2]|0;
  $91 = (($90) + 60|0);
  HEAPF32[$91>>2] = $89;
  $92 = +HEAPF32[$tc2>>2];
  $93 = $92;
  $94 = $93 * 0.866025403784438707611;
  $95 = $94 * 1.90752519173728085259E-11;
  $96 = $95;
  HEAPF32[$tc2>>2] = $96;
  $97 = +HEAPF32[$ts1>>2];
  $98 = $97;
  $99 = $98 * 0.5;
  $100 = $99 * 1.90752519173728085259E-11;
  $101 = +HEAPF32[$ts0>>2];
  $102 = $101;
  $103 = $100 + $102;
  $104 = $103;
  HEAPF32[$ts1>>2] = $104;
  $105 = +HEAPF32[$tc2>>2];
  $106 = +HEAPF32[$ts1>>2];
  $107 = $105 - $106;
  $108 = HEAP32[$0>>2]|0;
  $109 = (($108) + 12|0);
  HEAPF32[$109>>2] = $107;
  $110 = +HEAPF32[$tc2>>2];
  $111 = +HEAPF32[$ts1>>2];
  $112 = $110 + $111;
  $113 = HEAP32[$0>>2]|0;
  $114 = (($113) + 24|0);
  HEAPF32[$114>>2] = $112;
  $115 = +HEAPF32[$tc1>>2];
  $116 = $115;
  $117 = $116 * 0.5;
  $118 = $117 * 1.90752519173728085259E-11;
  $119 = +HEAPF32[$tc0>>2];
  $120 = $119;
  $121 = $118 - $120;
  $122 = $121;
  HEAPF32[$tc1>>2] = $122;
  $123 = +HEAPF32[$ts2>>2];
  $124 = $123;
  $125 = $124 * 0.866025403784438707611;
  $126 = $125 * 1.90752519173728085259E-11;
  $127 = $126;
  HEAPF32[$ts2>>2] = $127;
  $128 = +HEAPF32[$tc1>>2];
  $129 = +HEAPF32[$ts2>>2];
  $130 = $128 + $129;
  $131 = HEAP32[$0>>2]|0;
  $132 = (($131) + 36|0);
  HEAPF32[$132>>2] = $130;
  $133 = +HEAPF32[$tc1>>2];
  $134 = +HEAPF32[$ts2>>2];
  $135 = $133 - $134;
  $136 = HEAP32[$0>>2]|0;
  $137 = (($136) + 48|0);
  HEAPF32[$137>>2] = $135;
  $138 = HEAP32[$0>>2]|0;
  $139 = (($138) + 4|0);
  HEAP32[$0>>2] = $139;
  $140 = HEAP32[$l>>2]|0;
  $141 = (($140) + 1)|0;
  HEAP32[$l>>2] = $141;
 }
 STACKTOP = sp;return;
}
function _mdct_long($out,$in) {
 $out = $out|0;
 $in = $in|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0.0, $101 = 0.0, $102 = 0.0, $103 = 0.0, $104 = 0.0, $105 = 0, $106 = 0, $107 = 0.0, $108 = 0.0, $109 = 0.0, $11 = 0.0, $110 = 0.0, $111 = 0.0, $112 = 0.0, $113 = 0.0, $114 = 0.0, $115 = 0.0;
 var $116 = 0.0, $117 = 0.0, $118 = 0.0, $119 = 0.0, $12 = 0, $120 = 0.0, $121 = 0.0, $122 = 0.0, $123 = 0.0, $124 = 0.0, $125 = 0.0, $126 = 0.0, $127 = 0.0, $128 = 0.0, $129 = 0.0, $13 = 0, $130 = 0.0, $131 = 0.0, $132 = 0.0, $133 = 0.0;
 var $134 = 0.0, $135 = 0.0, $136 = 0.0, $137 = 0.0, $138 = 0.0, $139 = 0, $14 = 0.0, $140 = 0, $141 = 0.0, $142 = 0.0, $143 = 0.0, $144 = 0, $145 = 0, $146 = 0.0, $147 = 0.0, $148 = 0.0, $149 = 0.0, $15 = 0.0, $150 = 0.0, $151 = 0.0;
 var $152 = 0.0, $153 = 0.0, $154 = 0.0, $155 = 0.0, $156 = 0.0, $157 = 0.0, $158 = 0.0, $159 = 0.0, $16 = 0, $160 = 0.0, $161 = 0.0, $162 = 0.0, $163 = 0.0, $164 = 0.0, $165 = 0.0, $166 = 0.0, $167 = 0.0, $168 = 0.0, $169 = 0.0, $17 = 0;
 var $170 = 0.0, $171 = 0.0, $172 = 0.0, $173 = 0.0, $174 = 0.0, $175 = 0.0, $176 = 0, $177 = 0, $178 = 0.0, $179 = 0.0, $18 = 0.0, $180 = 0.0, $181 = 0, $182 = 0, $183 = 0.0, $184 = 0.0, $185 = 0.0, $186 = 0.0, $187 = 0.0, $188 = 0.0;
 var $189 = 0.0, $19 = 0, $190 = 0.0, $191 = 0.0, $192 = 0.0, $193 = 0.0, $194 = 0.0, $195 = 0.0, $196 = 0.0, $197 = 0.0, $198 = 0.0, $199 = 0.0, $2 = 0, $20 = 0, $200 = 0.0, $201 = 0.0, $202 = 0.0, $203 = 0.0, $204 = 0.0, $205 = 0.0;
 var $206 = 0.0, $207 = 0.0, $208 = 0.0, $209 = 0.0, $21 = 0.0, $210 = 0.0, $211 = 0.0, $212 = 0, $213 = 0, $214 = 0.0, $215 = 0.0, $216 = 0.0, $217 = 0, $218 = 0, $219 = 0, $22 = 0.0, $220 = 0, $221 = 0.0, $222 = 0, $223 = 0.0;
 var $224 = 0.0, $225 = 0, $226 = 0, $227 = 0.0, $228 = 0, $229 = 0, $23 = 0, $230 = 0.0, $231 = 0.0, $232 = 0, $233 = 0, $234 = 0.0, $235 = 0, $236 = 0, $237 = 0.0, $238 = 0.0, $239 = 0, $24 = 0.0, $240 = 0, $241 = 0.0;
 var $242 = 0, $243 = 0, $244 = 0.0, $245 = 0.0, $246 = 0, $247 = 0, $248 = 0.0, $249 = 0, $25 = 0, $250 = 0, $251 = 0.0, $252 = 0.0, $253 = 0, $254 = 0, $255 = 0.0, $256 = 0, $257 = 0, $258 = 0.0, $259 = 0.0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0.0, $263 = 0, $264 = 0, $265 = 0.0, $266 = 0.0, $267 = 0.0, $268 = 0.0, $269 = 0.0, $27 = 0.0, $270 = 0.0, $271 = 0.0, $272 = 0.0, $273 = 0, $274 = 0, $275 = 0.0, $276 = 0.0, $277 = 0.0, $278 = 0;
 var $279 = 0.0, $28 = 0.0, $280 = 0.0, $281 = 0.0, $282 = 0.0, $283 = 0.0, $284 = 0.0, $285 = 0.0, $286 = 0.0, $287 = 0, $288 = 0, $289 = 0.0, $29 = 0, $290 = 0.0, $291 = 0.0, $292 = 0.0, $293 = 0.0, $294 = 0.0, $295 = 0.0, $296 = 0.0;
 var $297 = 0.0, $298 = 0.0, $299 = 0.0, $3 = 0, $30 = 0, $300 = 0.0, $301 = 0.0, $302 = 0, $303 = 0, $304 = 0.0, $305 = 0.0, $306 = 0.0, $307 = 0, $308 = 0, $309 = 0, $31 = 0.0, $310 = 0, $311 = 0.0, $312 = 0, $313 = 0;
 var $314 = 0.0, $315 = 0.0, $316 = 0.0, $317 = 0.0, $318 = 0, $319 = 0, $32 = 0, $320 = 0.0, $321 = 0.0, $322 = 0.0, $323 = 0.0, $324 = 0.0, $325 = 0.0, $326 = 0.0, $327 = 0.0, $328 = 0.0, $329 = 0.0, $33 = 0, $330 = 0.0, $331 = 0.0;
 var $332 = 0.0, $333 = 0.0, $334 = 0.0, $335 = 0.0, $336 = 0.0, $337 = 0.0, $338 = 0.0, $339 = 0.0, $34 = 0.0, $340 = 0.0, $341 = 0.0, $342 = 0.0, $343 = 0.0, $344 = 0.0, $345 = 0.0, $346 = 0.0, $347 = 0.0, $348 = 0.0, $349 = 0.0, $35 = 0.0;
 var $350 = 0.0, $351 = 0.0, $352 = 0.0, $353 = 0.0, $354 = 0, $355 = 0, $356 = 0.0, $357 = 0.0, $358 = 0.0, $359 = 0, $36 = 0, $360 = 0, $361 = 0.0, $362 = 0.0, $363 = 0.0, $364 = 0.0, $365 = 0.0, $366 = 0.0, $367 = 0.0, $368 = 0.0;
 var $369 = 0.0, $37 = 0, $370 = 0.0, $371 = 0.0, $372 = 0.0, $373 = 0.0, $374 = 0.0, $375 = 0.0, $376 = 0.0, $377 = 0.0, $378 = 0.0, $379 = 0.0, $38 = 0.0, $380 = 0.0, $381 = 0.0, $382 = 0.0, $383 = 0.0, $384 = 0.0, $385 = 0.0, $386 = 0.0;
 var $387 = 0.0, $388 = 0.0, $389 = 0.0, $39 = 0, $390 = 0.0, $391 = 0, $392 = 0, $393 = 0.0, $394 = 0.0, $395 = 0.0, $396 = 0, $397 = 0, $398 = 0.0, $399 = 0.0, $4 = 0.0, $40 = 0, $400 = 0.0, $401 = 0.0, $402 = 0.0, $403 = 0.0;
 var $404 = 0.0, $405 = 0.0, $406 = 0.0, $407 = 0.0, $408 = 0.0, $409 = 0.0, $41 = 0.0, $410 = 0.0, $411 = 0.0, $412 = 0.0, $413 = 0.0, $414 = 0.0, $415 = 0.0, $416 = 0.0, $417 = 0.0, $418 = 0.0, $419 = 0.0, $42 = 0.0, $420 = 0.0, $421 = 0.0;
 var $422 = 0.0, $423 = 0.0, $424 = 0.0, $425 = 0.0, $426 = 0.0, $427 = 0.0, $428 = 0, $429 = 0, $43 = 0, $430 = 0.0, $431 = 0.0, $432 = 0.0, $433 = 0, $434 = 0, $44 = 0, $45 = 0.0, $46 = 0, $47 = 0, $48 = 0.0, $49 = 0.0;
 var $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0, $57 = 0, $58 = 0.0, $59 = 0.0, $6 = 0, $60 = 0.0, $61 = 0, $62 = 0, $63 = 0.0, $64 = 0.0, $65 = 0.0, $66 = 0.0, $67 = 0.0;
 var $68 = 0.0, $69 = 0.0, $7 = 0.0, $70 = 0.0, $71 = 0, $72 = 0, $73 = 0.0, $74 = 0.0, $75 = 0.0, $76 = 0.0, $77 = 0.0, $78 = 0.0, $79 = 0.0, $8 = 0.0, $80 = 0.0, $81 = 0.0, $82 = 0.0, $83 = 0.0, $84 = 0.0, $85 = 0.0;
 var $86 = 0, $87 = 0, $88 = 0.0, $89 = 0.0, $9 = 0, $90 = 0.0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0.0, $96 = 0, $97 = 0, $98 = 0.0, $99 = 0.0, $ct = 0, $st = 0, $tc1 = 0, $tc2 = 0, $tc3 = 0;
 var $tc4 = 0, $tc5 = 0, $tc6 = 0, $tc7 = 0, $tc8 = 0, $ts1 = 0, $ts2 = 0, $ts3 = 0, $ts4 = 0, $ts5 = 0, $ts6 = 0, $ts7 = 0, $ts8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0;
 $0 = sp + 76|0;
 $1 = sp + 72|0;
 $ct = sp + 68|0;
 $st = sp + 64|0;
 $tc1 = sp + 60|0;
 $tc2 = sp + 56|0;
 $tc3 = sp + 52|0;
 $tc4 = sp + 48|0;
 $ts5 = sp + 44|0;
 $ts6 = sp + 40|0;
 $ts7 = sp + 36|0;
 $ts8 = sp + 32|0;
 $ts1 = sp + 28|0;
 $ts2 = sp + 24|0;
 $ts3 = sp + 20|0;
 $ts4 = sp + 16|0;
 $tc5 = sp + 12|0;
 $tc6 = sp + 8|0;
 $tc7 = sp + 4|0;
 $tc8 = sp;
 HEAP32[$0>>2] = $out;
 HEAP32[$1>>2] = $in;
 $2 = HEAP32[$1>>2]|0;
 $3 = (($2) + 68|0);
 $4 = +HEAPF32[$3>>2];
 $5 = HEAP32[$1>>2]|0;
 $6 = (($5) + 36|0);
 $7 = +HEAPF32[$6>>2];
 $8 = $4 - $7;
 HEAPF32[$tc1>>2] = $8;
 $9 = HEAP32[$1>>2]|0;
 $10 = (($9) + 60|0);
 $11 = +HEAPF32[$10>>2];
 $12 = HEAP32[$1>>2]|0;
 $13 = (($12) + 44|0);
 $14 = +HEAPF32[$13>>2];
 $15 = $11 - $14;
 HEAPF32[$tc3>>2] = $15;
 $16 = HEAP32[$1>>2]|0;
 $17 = (($16) + 56|0);
 $18 = +HEAPF32[$17>>2];
 $19 = HEAP32[$1>>2]|0;
 $20 = (($19) + 48|0);
 $21 = +HEAPF32[$20>>2];
 $22 = $18 - $21;
 HEAPF32[$tc4>>2] = $22;
 $23 = HEAP32[$1>>2]|0;
 $24 = +HEAPF32[$23>>2];
 $25 = HEAP32[$1>>2]|0;
 $26 = (($25) + 32|0);
 $27 = +HEAPF32[$26>>2];
 $28 = $24 + $27;
 HEAPF32[$ts5>>2] = $28;
 $29 = HEAP32[$1>>2]|0;
 $30 = (($29) + 4|0);
 $31 = +HEAPF32[$30>>2];
 $32 = HEAP32[$1>>2]|0;
 $33 = (($32) + 28|0);
 $34 = +HEAPF32[$33>>2];
 $35 = $31 + $34;
 HEAPF32[$ts6>>2] = $35;
 $36 = HEAP32[$1>>2]|0;
 $37 = (($36) + 8|0);
 $38 = +HEAPF32[$37>>2];
 $39 = HEAP32[$1>>2]|0;
 $40 = (($39) + 24|0);
 $41 = +HEAPF32[$40>>2];
 $42 = $38 + $41;
 HEAPF32[$ts7>>2] = $42;
 $43 = HEAP32[$1>>2]|0;
 $44 = (($43) + 12|0);
 $45 = +HEAPF32[$44>>2];
 $46 = HEAP32[$1>>2]|0;
 $47 = (($46) + 20|0);
 $48 = +HEAPF32[$47>>2];
 $49 = $45 + $48;
 HEAPF32[$ts8>>2] = $49;
 $50 = +HEAPF32[$ts5>>2];
 $51 = +HEAPF32[$ts7>>2];
 $52 = $50 + $51;
 $53 = +HEAPF32[$ts8>>2];
 $54 = $52 - $53;
 $55 = +HEAPF32[$ts6>>2];
 $56 = HEAP32[$1>>2]|0;
 $57 = (($56) + 16|0);
 $58 = +HEAPF32[$57>>2];
 $59 = $55 - $58;
 $60 = $54 - $59;
 $61 = HEAP32[$0>>2]|0;
 $62 = (($61) + 68|0);
 HEAPF32[$62>>2] = $60;
 $63 = +HEAPF32[$ts5>>2];
 $64 = +HEAPF32[$ts7>>2];
 $65 = $63 + $64;
 $66 = +HEAPF32[$ts8>>2];
 $67 = $65 - $66;
 $68 = +HEAPF32[((16552 + 364|0))>>2];
 $69 = $67 * $68;
 $70 = +HEAPF32[$ts6>>2];
 $71 = HEAP32[$1>>2]|0;
 $72 = (($71) + 16|0);
 $73 = +HEAPF32[$72>>2];
 $74 = $70 - $73;
 $75 = $69 + $74;
 HEAPF32[$st>>2] = $75;
 $76 = +HEAPF32[$tc1>>2];
 $77 = +HEAPF32[$tc3>>2];
 $78 = $76 - $77;
 $79 = +HEAPF32[$tc4>>2];
 $80 = $78 - $79;
 $81 = +HEAPF32[((16552 + 360|0))>>2];
 $82 = $80 * $81;
 HEAPF32[$ct>>2] = $82;
 $83 = +HEAPF32[$ct>>2];
 $84 = +HEAPF32[$st>>2];
 $85 = $83 + $84;
 $86 = HEAP32[$0>>2]|0;
 $87 = (($86) + 20|0);
 HEAPF32[$87>>2] = $85;
 $88 = +HEAPF32[$ct>>2];
 $89 = +HEAPF32[$st>>2];
 $90 = $88 - $89;
 $91 = HEAP32[$0>>2]|0;
 $92 = (($91) + 24|0);
 HEAPF32[$92>>2] = $90;
 $93 = HEAP32[$1>>2]|0;
 $94 = (($93) + 64|0);
 $95 = +HEAPF32[$94>>2];
 $96 = HEAP32[$1>>2]|0;
 $97 = (($96) + 40|0);
 $98 = +HEAPF32[$97>>2];
 $99 = $95 - $98;
 $100 = +HEAPF32[((16552 + 360|0))>>2];
 $101 = $99 * $100;
 HEAPF32[$tc2>>2] = $101;
 $102 = +HEAPF32[$ts6>>2];
 $103 = +HEAPF32[((16552 + 364|0))>>2];
 $104 = $102 * $103;
 $105 = HEAP32[$1>>2]|0;
 $106 = (($105) + 16|0);
 $107 = +HEAPF32[$106>>2];
 $108 = $104 + $107;
 HEAPF32[$ts6>>2] = $108;
 $109 = +HEAPF32[$tc1>>2];
 $110 = +HEAPF32[((16552 + 336|0))>>2];
 $111 = $109 * $110;
 $112 = +HEAPF32[$tc2>>2];
 $113 = $111 + $112;
 $114 = +HEAPF32[$tc3>>2];
 $115 = +HEAPF32[((16552 + 340|0))>>2];
 $116 = $114 * $115;
 $117 = $113 + $116;
 $118 = +HEAPF32[$tc4>>2];
 $119 = +HEAPF32[((16552 + 344|0))>>2];
 $120 = $118 * $119;
 $121 = $117 + $120;
 HEAPF32[$ct>>2] = $121;
 $122 = +HEAPF32[$ts5>>2];
 $123 = -$122;
 $124 = +HEAPF32[((16552 + 352|0))>>2];
 $125 = $123 * $124;
 $126 = +HEAPF32[$ts6>>2];
 $127 = $125 + $126;
 $128 = +HEAPF32[$ts7>>2];
 $129 = +HEAPF32[((16552 + 356|0))>>2];
 $130 = $128 * $129;
 $131 = $127 - $130;
 $132 = +HEAPF32[$ts8>>2];
 $133 = +HEAPF32[((16552 + 348|0))>>2];
 $134 = $132 * $133;
 $135 = $131 + $134;
 HEAPF32[$st>>2] = $135;
 $136 = +HEAPF32[$ct>>2];
 $137 = +HEAPF32[$st>>2];
 $138 = $136 + $137;
 $139 = HEAP32[$0>>2]|0;
 $140 = (($139) + 4|0);
 HEAPF32[$140>>2] = $138;
 $141 = +HEAPF32[$ct>>2];
 $142 = +HEAPF32[$st>>2];
 $143 = $141 - $142;
 $144 = HEAP32[$0>>2]|0;
 $145 = (($144) + 8|0);
 HEAPF32[$145>>2] = $143;
 $146 = +HEAPF32[$tc1>>2];
 $147 = +HEAPF32[((16552 + 340|0))>>2];
 $148 = $146 * $147;
 $149 = +HEAPF32[$tc2>>2];
 $150 = $148 - $149;
 $151 = +HEAPF32[$tc3>>2];
 $152 = +HEAPF32[((16552 + 344|0))>>2];
 $153 = $151 * $152;
 $154 = $150 - $153;
 $155 = +HEAPF32[$tc4>>2];
 $156 = +HEAPF32[((16552 + 336|0))>>2];
 $157 = $155 * $156;
 $158 = $154 + $157;
 HEAPF32[$ct>>2] = $158;
 $159 = +HEAPF32[$ts5>>2];
 $160 = -$159;
 $161 = +HEAPF32[((16552 + 356|0))>>2];
 $162 = $160 * $161;
 $163 = +HEAPF32[$ts6>>2];
 $164 = $162 + $163;
 $165 = +HEAPF32[$ts7>>2];
 $166 = +HEAPF32[((16552 + 348|0))>>2];
 $167 = $165 * $166;
 $168 = $164 - $167;
 $169 = +HEAPF32[$ts8>>2];
 $170 = +HEAPF32[((16552 + 352|0))>>2];
 $171 = $169 * $170;
 $172 = $168 + $171;
 HEAPF32[$st>>2] = $172;
 $173 = +HEAPF32[$ct>>2];
 $174 = +HEAPF32[$st>>2];
 $175 = $173 + $174;
 $176 = HEAP32[$0>>2]|0;
 $177 = (($176) + 36|0);
 HEAPF32[$177>>2] = $175;
 $178 = +HEAPF32[$ct>>2];
 $179 = +HEAPF32[$st>>2];
 $180 = $178 - $179;
 $181 = HEAP32[$0>>2]|0;
 $182 = (($181) + 40|0);
 HEAPF32[$182>>2] = $180;
 $183 = +HEAPF32[$tc1>>2];
 $184 = +HEAPF32[((16552 + 344|0))>>2];
 $185 = $183 * $184;
 $186 = +HEAPF32[$tc2>>2];
 $187 = $185 - $186;
 $188 = +HEAPF32[$tc3>>2];
 $189 = +HEAPF32[((16552 + 336|0))>>2];
 $190 = $188 * $189;
 $191 = $187 + $190;
 $192 = +HEAPF32[$tc4>>2];
 $193 = +HEAPF32[((16552 + 340|0))>>2];
 $194 = $192 * $193;
 $195 = $191 - $194;
 HEAPF32[$ct>>2] = $195;
 $196 = +HEAPF32[$ts5>>2];
 $197 = +HEAPF32[((16552 + 348|0))>>2];
 $198 = $196 * $197;
 $199 = +HEAPF32[$ts6>>2];
 $200 = $198 - $199;
 $201 = +HEAPF32[$ts7>>2];
 $202 = +HEAPF32[((16552 + 352|0))>>2];
 $203 = $201 * $202;
 $204 = $200 + $203;
 $205 = +HEAPF32[$ts8>>2];
 $206 = +HEAPF32[((16552 + 356|0))>>2];
 $207 = $205 * $206;
 $208 = $204 - $207;
 HEAPF32[$st>>2] = $208;
 $209 = +HEAPF32[$ct>>2];
 $210 = +HEAPF32[$st>>2];
 $211 = $209 + $210;
 $212 = HEAP32[$0>>2]|0;
 $213 = (($212) + 52|0);
 HEAPF32[$213>>2] = $211;
 $214 = +HEAPF32[$ct>>2];
 $215 = +HEAPF32[$st>>2];
 $216 = $214 - $215;
 $217 = HEAP32[$0>>2]|0;
 $218 = (($217) + 56|0);
 HEAPF32[$218>>2] = $216;
 $219 = HEAP32[$1>>2]|0;
 $220 = (($219) + 32|0);
 $221 = +HEAPF32[$220>>2];
 $222 = HEAP32[$1>>2]|0;
 $223 = +HEAPF32[$222>>2];
 $224 = $221 - $223;
 HEAPF32[$ts1>>2] = $224;
 $225 = HEAP32[$1>>2]|0;
 $226 = (($225) + 24|0);
 $227 = +HEAPF32[$226>>2];
 $228 = HEAP32[$1>>2]|0;
 $229 = (($228) + 8|0);
 $230 = +HEAPF32[$229>>2];
 $231 = $227 - $230;
 HEAPF32[$ts3>>2] = $231;
 $232 = HEAP32[$1>>2]|0;
 $233 = (($232) + 20|0);
 $234 = +HEAPF32[$233>>2];
 $235 = HEAP32[$1>>2]|0;
 $236 = (($235) + 12|0);
 $237 = +HEAPF32[$236>>2];
 $238 = $234 - $237;
 HEAPF32[$ts4>>2] = $238;
 $239 = HEAP32[$1>>2]|0;
 $240 = (($239) + 68|0);
 $241 = +HEAPF32[$240>>2];
 $242 = HEAP32[$1>>2]|0;
 $243 = (($242) + 36|0);
 $244 = +HEAPF32[$243>>2];
 $245 = $241 + $244;
 HEAPF32[$tc5>>2] = $245;
 $246 = HEAP32[$1>>2]|0;
 $247 = (($246) + 64|0);
 $248 = +HEAPF32[$247>>2];
 $249 = HEAP32[$1>>2]|0;
 $250 = (($249) + 40|0);
 $251 = +HEAPF32[$250>>2];
 $252 = $248 + $251;
 HEAPF32[$tc6>>2] = $252;
 $253 = HEAP32[$1>>2]|0;
 $254 = (($253) + 60|0);
 $255 = +HEAPF32[$254>>2];
 $256 = HEAP32[$1>>2]|0;
 $257 = (($256) + 44|0);
 $258 = +HEAPF32[$257>>2];
 $259 = $255 + $258;
 HEAPF32[$tc7>>2] = $259;
 $260 = HEAP32[$1>>2]|0;
 $261 = (($260) + 56|0);
 $262 = +HEAPF32[$261>>2];
 $263 = HEAP32[$1>>2]|0;
 $264 = (($263) + 48|0);
 $265 = +HEAPF32[$264>>2];
 $266 = $262 + $265;
 HEAPF32[$tc8>>2] = $266;
 $267 = +HEAPF32[$tc5>>2];
 $268 = +HEAPF32[$tc7>>2];
 $269 = $267 + $268;
 $270 = +HEAPF32[$tc8>>2];
 $271 = $269 + $270;
 $272 = +HEAPF32[$tc6>>2];
 $273 = HEAP32[$1>>2]|0;
 $274 = (($273) + 52|0);
 $275 = +HEAPF32[$274>>2];
 $276 = $272 + $275;
 $277 = $271 + $276;
 $278 = HEAP32[$0>>2]|0;
 HEAPF32[$278>>2] = $277;
 $279 = +HEAPF32[$tc5>>2];
 $280 = +HEAPF32[$tc7>>2];
 $281 = $279 + $280;
 $282 = +HEAPF32[$tc8>>2];
 $283 = $281 + $282;
 $284 = +HEAPF32[((16552 + 364|0))>>2];
 $285 = $283 * $284;
 $286 = +HEAPF32[$tc6>>2];
 $287 = HEAP32[$1>>2]|0;
 $288 = (($287) + 52|0);
 $289 = +HEAPF32[$288>>2];
 $290 = $286 + $289;
 $291 = $285 - $290;
 HEAPF32[$ct>>2] = $291;
 $292 = +HEAPF32[$ts1>>2];
 $293 = +HEAPF32[$ts3>>2];
 $294 = $292 - $293;
 $295 = +HEAPF32[$ts4>>2];
 $296 = $294 + $295;
 $297 = +HEAPF32[((16552 + 360|0))>>2];
 $298 = $296 * $297;
 HEAPF32[$st>>2] = $298;
 $299 = +HEAPF32[$ct>>2];
 $300 = +HEAPF32[$st>>2];
 $301 = $299 + $300;
 $302 = HEAP32[$0>>2]|0;
 $303 = (($302) + 44|0);
 HEAPF32[$303>>2] = $301;
 $304 = +HEAPF32[$ct>>2];
 $305 = +HEAPF32[$st>>2];
 $306 = $304 - $305;
 $307 = HEAP32[$0>>2]|0;
 $308 = (($307) + 48|0);
 HEAPF32[$308>>2] = $306;
 $309 = HEAP32[$1>>2]|0;
 $310 = (($309) + 28|0);
 $311 = +HEAPF32[$310>>2];
 $312 = HEAP32[$1>>2]|0;
 $313 = (($312) + 4|0);
 $314 = +HEAPF32[$313>>2];
 $315 = $311 - $314;
 $316 = +HEAPF32[((16552 + 360|0))>>2];
 $317 = $315 * $316;
 HEAPF32[$ts2>>2] = $317;
 $318 = HEAP32[$1>>2]|0;
 $319 = (($318) + 52|0);
 $320 = +HEAPF32[$319>>2];
 $321 = +HEAPF32[$tc6>>2];
 $322 = +HEAPF32[((16552 + 364|0))>>2];
 $323 = $321 * $322;
 $324 = $320 - $323;
 HEAPF32[$tc6>>2] = $324;
 $325 = +HEAPF32[$tc5>>2];
 $326 = +HEAPF32[((16552 + 348|0))>>2];
 $327 = $325 * $326;
 $328 = +HEAPF32[$tc6>>2];
 $329 = $327 - $328;
 $330 = +HEAPF32[$tc7>>2];
 $331 = +HEAPF32[((16552 + 352|0))>>2];
 $332 = $330 * $331;
 $333 = $329 + $332;
 $334 = +HEAPF32[$tc8>>2];
 $335 = +HEAPF32[((16552 + 356|0))>>2];
 $336 = $334 * $335;
 $337 = $333 + $336;
 HEAPF32[$ct>>2] = $337;
 $338 = +HEAPF32[$ts1>>2];
 $339 = +HEAPF32[((16552 + 344|0))>>2];
 $340 = $338 * $339;
 $341 = +HEAPF32[$ts2>>2];
 $342 = $340 + $341;
 $343 = +HEAPF32[$ts3>>2];
 $344 = +HEAPF32[((16552 + 336|0))>>2];
 $345 = $343 * $344;
 $346 = $342 + $345;
 $347 = +HEAPF32[$ts4>>2];
 $348 = +HEAPF32[((16552 + 340|0))>>2];
 $349 = $347 * $348;
 $350 = $346 + $349;
 HEAPF32[$st>>2] = $350;
 $351 = +HEAPF32[$ct>>2];
 $352 = +HEAPF32[$st>>2];
 $353 = $351 + $352;
 $354 = HEAP32[$0>>2]|0;
 $355 = (($354) + 12|0);
 HEAPF32[$355>>2] = $353;
 $356 = +HEAPF32[$ct>>2];
 $357 = +HEAPF32[$st>>2];
 $358 = $356 - $357;
 $359 = HEAP32[$0>>2]|0;
 $360 = (($359) + 16|0);
 HEAPF32[$360>>2] = $358;
 $361 = +HEAPF32[$tc5>>2];
 $362 = -$361;
 $363 = +HEAPF32[((16552 + 356|0))>>2];
 $364 = $362 * $363;
 $365 = +HEAPF32[$tc6>>2];
 $366 = $364 + $365;
 $367 = +HEAPF32[$tc7>>2];
 $368 = +HEAPF32[((16552 + 348|0))>>2];
 $369 = $367 * $368;
 $370 = $366 - $369;
 $371 = +HEAPF32[$tc8>>2];
 $372 = +HEAPF32[((16552 + 352|0))>>2];
 $373 = $371 * $372;
 $374 = $370 - $373;
 HEAPF32[$ct>>2] = $374;
 $375 = +HEAPF32[$ts1>>2];
 $376 = +HEAPF32[((16552 + 340|0))>>2];
 $377 = $375 * $376;
 $378 = +HEAPF32[$ts2>>2];
 $379 = $377 + $378;
 $380 = +HEAPF32[$ts3>>2];
 $381 = +HEAPF32[((16552 + 344|0))>>2];
 $382 = $380 * $381;
 $383 = $379 - $382;
 $384 = +HEAPF32[$ts4>>2];
 $385 = +HEAPF32[((16552 + 336|0))>>2];
 $386 = $384 * $385;
 $387 = $383 - $386;
 HEAPF32[$st>>2] = $387;
 $388 = +HEAPF32[$ct>>2];
 $389 = +HEAPF32[$st>>2];
 $390 = $388 + $389;
 $391 = HEAP32[$0>>2]|0;
 $392 = (($391) + 28|0);
 HEAPF32[$392>>2] = $390;
 $393 = +HEAPF32[$ct>>2];
 $394 = +HEAPF32[$st>>2];
 $395 = $393 - $394;
 $396 = HEAP32[$0>>2]|0;
 $397 = (($396) + 32|0);
 HEAPF32[$397>>2] = $395;
 $398 = +HEAPF32[$tc5>>2];
 $399 = -$398;
 $400 = +HEAPF32[((16552 + 352|0))>>2];
 $401 = $399 * $400;
 $402 = +HEAPF32[$tc6>>2];
 $403 = $401 + $402;
 $404 = +HEAPF32[$tc7>>2];
 $405 = +HEAPF32[((16552 + 356|0))>>2];
 $406 = $404 * $405;
 $407 = $403 - $406;
 $408 = +HEAPF32[$tc8>>2];
 $409 = +HEAPF32[((16552 + 348|0))>>2];
 $410 = $408 * $409;
 $411 = $407 - $410;
 HEAPF32[$ct>>2] = $411;
 $412 = +HEAPF32[$ts1>>2];
 $413 = +HEAPF32[((16552 + 336|0))>>2];
 $414 = $412 * $413;
 $415 = +HEAPF32[$ts2>>2];
 $416 = $414 - $415;
 $417 = +HEAPF32[$ts3>>2];
 $418 = +HEAPF32[((16552 + 340|0))>>2];
 $419 = $417 * $418;
 $420 = $416 + $419;
 $421 = +HEAPF32[$ts4>>2];
 $422 = +HEAPF32[((16552 + 344|0))>>2];
 $423 = $421 * $422;
 $424 = $420 - $423;
 HEAPF32[$st>>2] = $424;
 $425 = +HEAPF32[$ct>>2];
 $426 = +HEAPF32[$st>>2];
 $427 = $425 + $426;
 $428 = HEAP32[$0>>2]|0;
 $429 = (($428) + 60|0);
 HEAPF32[$429>>2] = $427;
 $430 = +HEAPF32[$ct>>2];
 $431 = +HEAPF32[$st>>2];
 $432 = $430 - $431;
 $433 = HEAP32[$0>>2]|0;
 $434 = (($433) + 64|0);
 HEAPF32[$434>>2] = $432;
 STACKTOP = sp;return;
}
function _apply_preset($gfp,$preset,$enforce) {
 $gfp = $gfp|0;
 $preset = $preset|0;
 $enforce = $enforce|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp + 12|0;
 $1 = sp + 8|0;
 $2 = sp + 4|0;
 $3 = sp;
 HEAP32[$1>>2] = $gfp;
 HEAP32[$2>>2] = $preset;
 HEAP32[$3>>2] = $enforce;
 $4 = HEAP32[$2>>2]|0;
 switch ($4|0) {
 case 1004: case 1001:  {
  HEAP32[$2>>2] = 480;
  $7 = HEAP32[$1>>2]|0;
  (_lame_set_VBR($7,4)|0);
  label = 7;
  break;
 }
 case 1005: case 1002:  {
  HEAP32[$2>>2] = 500;
  $8 = HEAP32[$1>>2]|0;
  (_lame_set_VBR($8,4)|0);
  label = 7;
  break;
 }
 case 1000:  {
  HEAP32[$2>>2] = 470;
  $5 = HEAP32[$1>>2]|0;
  (_lame_set_VBR($5,4)|0);
  label = 7;
  break;
 }
 case 1003:  {
  HEAP32[$2>>2] = 320;
  $9 = HEAP32[$2>>2]|0;
  $10 = HEAP32[$1>>2]|0;
  $11 = (($10) + 152|0);
  HEAP32[$11>>2] = $9;
  $12 = HEAP32[$1>>2]|0;
  $13 = HEAP32[$2>>2]|0;
  $14 = HEAP32[$3>>2]|0;
  (_apply_abr_preset($12,$13,$14)|0);
  $15 = HEAP32[$1>>2]|0;
  (_lame_set_VBR($15,0)|0);
  $16 = HEAP32[$2>>2]|0;
  HEAP32[$0>>2] = $16;
  break;
 }
 case 1007: case 1006:  {
  HEAP32[$2>>2] = 460;
  $6 = HEAP32[$1>>2]|0;
  (_lame_set_VBR($6,4)|0);
  label = 7;
  break;
 }
 default: {
  label = 7;
 }
 }
 L7: do {
  if ((label|0) == 7) {
   $17 = HEAP32[$2>>2]|0;
   $18 = HEAP32[$1>>2]|0;
   $19 = (($18) + 152|0);
   HEAP32[$19>>2] = $17;
   $20 = HEAP32[$2>>2]|0;
   do {
    switch ($20|0) {
    case 470:  {
     $39 = HEAP32[$1>>2]|0;
     $40 = HEAP32[$3>>2]|0;
     _apply_vbr_preset($39,3,$40);
     $41 = HEAP32[$2>>2]|0;
     HEAP32[$0>>2] = $41;
     break L7;
     break;
    }
    case 440:  {
     $30 = HEAP32[$1>>2]|0;
     $31 = HEAP32[$3>>2]|0;
     _apply_vbr_preset($30,6,$31);
     $32 = HEAP32[$2>>2]|0;
     HEAP32[$0>>2] = $32;
     break L7;
     break;
    }
    case 450:  {
     $33 = HEAP32[$1>>2]|0;
     $34 = HEAP32[$3>>2]|0;
     _apply_vbr_preset($33,5,$34);
     $35 = HEAP32[$2>>2]|0;
     HEAP32[$0>>2] = $35;
     break L7;
     break;
    }
    case 420:  {
     $24 = HEAP32[$1>>2]|0;
     $25 = HEAP32[$3>>2]|0;
     _apply_vbr_preset($24,8,$25);
     $26 = HEAP32[$2>>2]|0;
     HEAP32[$0>>2] = $26;
     break L7;
     break;
    }
    case 500:  {
     $48 = HEAP32[$1>>2]|0;
     $49 = HEAP32[$3>>2]|0;
     _apply_vbr_preset($48,0,$49);
     $50 = HEAP32[$2>>2]|0;
     HEAP32[$0>>2] = $50;
     break L7;
     break;
    }
    case 480:  {
     $42 = HEAP32[$1>>2]|0;
     $43 = HEAP32[$3>>2]|0;
     _apply_vbr_preset($42,2,$43);
     $44 = HEAP32[$2>>2]|0;
     HEAP32[$0>>2] = $44;
     break L7;
     break;
    }
    case 490:  {
     $45 = HEAP32[$1>>2]|0;
     $46 = HEAP32[$3>>2]|0;
     _apply_vbr_preset($45,1,$46);
     $47 = HEAP32[$2>>2]|0;
     HEAP32[$0>>2] = $47;
     break L7;
     break;
    }
    case 430:  {
     $27 = HEAP32[$1>>2]|0;
     $28 = HEAP32[$3>>2]|0;
     _apply_vbr_preset($27,7,$28);
     $29 = HEAP32[$2>>2]|0;
     HEAP32[$0>>2] = $29;
     break L7;
     break;
    }
    case 460:  {
     $36 = HEAP32[$1>>2]|0;
     $37 = HEAP32[$3>>2]|0;
     _apply_vbr_preset($36,4,$37);
     $38 = HEAP32[$2>>2]|0;
     HEAP32[$0>>2] = $38;
     break L7;
     break;
    }
    case 410:  {
     $21 = HEAP32[$1>>2]|0;
     $22 = HEAP32[$3>>2]|0;
     _apply_vbr_preset($21,9,$22);
     $23 = HEAP32[$2>>2]|0;
     HEAP32[$0>>2] = $23;
     break L7;
     break;
    }
    default: {
     $51 = HEAP32[$2>>2]|0;
     $52 = (8)<=($51|0);
     $53 = HEAP32[$2>>2]|0;
     $54 = ($53|0)<=(320);
     $or$cond = $52 & $54;
     $55 = HEAP32[$1>>2]|0;
     if ($or$cond) {
      $56 = HEAP32[$2>>2]|0;
      $57 = HEAP32[$3>>2]|0;
      $58 = (_apply_abr_preset($55,$56,$57)|0);
      HEAP32[$0>>2] = $58;
      break L7;
     } else {
      $59 = (($55) + 152|0);
      HEAP32[$59>>2] = 0;
      $60 = HEAP32[$2>>2]|0;
      HEAP32[$0>>2] = $60;
      break L7;
     }
    }
    }
   } while(0);
  }
 } while(0);
 $61 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($61|0);
}
function _apply_abr_preset($gfp,$preset,$enforce) {
 $gfp = $gfp|0;
 $preset = $preset|0;
 $enforce = $enforce|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0.0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0.0, $113 = 0.0, $114 = 0.0, $115 = 0.0;
 var $116 = 0.0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0.0, $123 = 0, $124 = 0, $125 = 0.0, $126 = 0, $127 = 0, $128 = 0, $129 = 0.0, $13 = 0, $130 = 0.0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0.0, $138 = 0.0, $139 = 0.0, $14 = 0, $140 = 0.0, $141 = 0.0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0.0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0.0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0.0, $16 = 0, $160 = 0.0, $161 = 0.0, $162 = 0.0, $163 = 0.0, $164 = 0.0, $165 = 0.0, $166 = 0.0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0.0, $173 = 0.0, $174 = 0.0, $175 = 0.0, $176 = 0, $177 = 0, $178 = 0, $179 = 0.0, $18 = 0, $180 = 0.0, $181 = 0.0, $182 = 0.0, $183 = 0.0, $184 = 0.0, $185 = 0.0, $186 = 0.0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0.0, $193 = 0.0, $194 = 0.0, $195 = 0.0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0.0, $203 = 0.0, $204 = 0.0, $205 = 0.0;
 var $206 = 0.0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0.0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0.0, $22 = 0, $220 = 0.0, $221 = 0.0, $222 = 0.0, $223 = 0.0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0.0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0.0, $237 = 0.0, $238 = 0.0, $239 = 0.0, $24 = 0, $240 = 0.0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0.0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0.0, $251 = 0.0, $252 = 0.0, $253 = 0.0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0.0, $46 = 0.0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0.0;
 var $63 = 0.0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0.0, $77 = 0.0, $78 = 0.0, $79 = 0.0, $8 = 0, $80 = 0.0;
 var $81 = 0.0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0.0, $88 = 0.0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0.0, $96 = 0.0, $97 = 0.0, $98 = 0.0, $99 = 0.0;
 var $actual_bitrate = 0, $r = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = sp + 16|0;
 $1 = sp + 12|0;
 $2 = sp + 8|0;
 $r = sp + 4|0;
 $actual_bitrate = sp;
 HEAP32[$0>>2] = $gfp;
 HEAP32[$1>>2] = $preset;
 HEAP32[$2>>2] = $enforce;
 $3 = HEAP32[$1>>2]|0;
 HEAP32[$actual_bitrate>>2] = $3;
 $4 = HEAP32[$1>>2]|0;
 $5 = $4&65535;
 $6 = (_nearestBitrateFullIndex($5)|0);
 HEAP32[$r>>2] = $6;
 $7 = HEAP32[$0>>2]|0;
 (_lame_set_VBR($7,3)|0);
 $8 = HEAP32[$0>>2]|0;
 $9 = HEAP32[$actual_bitrate>>2]|0;
 (_lame_set_VBR_mean_bitrate_kbps($8,$9)|0);
 $10 = HEAP32[$0>>2]|0;
 $11 = HEAP32[$0>>2]|0;
 $12 = (_lame_get_VBR_mean_bitrate_kbps($11)|0);
 $13 = (_min_int($12,320)|0);
 (_lame_set_VBR_mean_bitrate_kbps($10,$13)|0);
 $14 = HEAP32[$0>>2]|0;
 $15 = HEAP32[$0>>2]|0;
 $16 = (_lame_get_VBR_mean_bitrate_kbps($15)|0);
 $17 = (_max_int($16,8)|0);
 (_lame_set_VBR_mean_bitrate_kbps($14,$17)|0);
 $18 = HEAP32[$0>>2]|0;
 $19 = HEAP32[$0>>2]|0;
 $20 = (_lame_get_VBR_mean_bitrate_kbps($19)|0);
 (_lame_set_brate($18,$20)|0);
 $21 = HEAP32[$r>>2]|0;
 $22 = (19776 + (($21*52)|0)|0);
 $23 = (($22) + 12|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = ($24|0)>(0);
 if ($25) {
  $26 = HEAP32[$0>>2]|0;
  $27 = HEAP32[$0>>2]|0;
  $28 = (_lame_get_exp_nspsytune($27)|0);
  $29 = $28 | 2;
  (_lame_set_exp_nspsytune($26,$29)|0);
 }
 $30 = HEAP32[$r>>2]|0;
 $31 = (19776 + (($30*52)|0)|0);
 $32 = (($31) + 48|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = ($33|0)>(0);
 if ($34) {
  $35 = HEAP32[$0>>2]|0;
  (_lame_set_sfscale($35,1)|0);
 }
 $36 = HEAP32[$2>>2]|0;
 $37 = ($36|0)!=(0);
 $38 = HEAP32[$0>>2]|0;
 if ($37) {
  $39 = HEAP32[$r>>2]|0;
  $40 = (19776 + (($39*52)|0)|0);
  $41 = (($40) + 4|0);
  $42 = HEAP32[$41>>2]|0;
  (_lame_set_quant_comp($38,$42)|0);
 } else {
  $43 = (_lame_get_quant_comp($38)|0);
  $44 = (($43) - -1)|0;
  $45 = (+($44|0));
  $46 = (+Math_abs((+$45)));
  $47 = $46 > 0.0;
  if (!($47)) {
   $48 = HEAP32[$0>>2]|0;
   $49 = HEAP32[$r>>2]|0;
   $50 = (19776 + (($49*52)|0)|0);
   $51 = (($50) + 4|0);
   $52 = HEAP32[$51>>2]|0;
   (_lame_set_quant_comp($48,$52)|0);
  }
 }
 $53 = HEAP32[$2>>2]|0;
 $54 = ($53|0)!=(0);
 $55 = HEAP32[$0>>2]|0;
 if ($54) {
  $56 = HEAP32[$r>>2]|0;
  $57 = (19776 + (($56*52)|0)|0);
  $58 = (($57) + 8|0);
  $59 = HEAP32[$58>>2]|0;
  (_lame_set_quant_comp_short($55,$59)|0);
 } else {
  $60 = (_lame_get_quant_comp_short($55)|0);
  $61 = (($60) - -1)|0;
  $62 = (+($61|0));
  $63 = (+Math_abs((+$62)));
  $64 = $63 > 0.0;
  if (!($64)) {
   $65 = HEAP32[$0>>2]|0;
   $66 = HEAP32[$r>>2]|0;
   $67 = (19776 + (($66*52)|0)|0);
   $68 = (($67) + 8|0);
   $69 = HEAP32[$68>>2]|0;
   (_lame_set_quant_comp_short($65,$69)|0);
  }
 }
 $70 = HEAP32[$2>>2]|0;
 $71 = ($70|0)!=(0);
 $72 = HEAP32[$0>>2]|0;
 if ($71) {
  $73 = HEAP32[$r>>2]|0;
  $74 = (19776 + (($73*52)|0)|0);
  $75 = (($74) + 16|0);
  $76 = +HEAPF32[$75>>2];
  $77 = $76;
  _lame_set_msfix($72,$77);
 } else {
  $78 = (+_lame_get_msfix($72));
  $79 = $78 - -1.0;
  $80 = $79;
  $81 = (+Math_abs((+$80)));
  $82 = $81 > 0.0;
  if (!($82)) {
   $83 = HEAP32[$0>>2]|0;
   $84 = HEAP32[$r>>2]|0;
   $85 = (19776 + (($84*52)|0)|0);
   $86 = (($85) + 16|0);
   $87 = +HEAPF32[$86>>2];
   $88 = $87;
   _lame_set_msfix($83,$88);
  }
 }
 $89 = HEAP32[$2>>2]|0;
 $90 = ($89|0)!=(0);
 $91 = HEAP32[$0>>2]|0;
 if ($90) {
  $92 = HEAP32[$r>>2]|0;
  $93 = (19776 + (($92*52)|0)|0);
  $94 = (($93) + 20|0);
  $95 = +HEAPF32[$94>>2];
  (_lame_set_short_threshold_lrm($91,$95)|0);
 } else {
  $96 = (+_lame_get_short_threshold_lrm($91));
  $97 = $96 - -1.0;
  $98 = $97;
  $99 = (+Math_abs((+$98)));
  $100 = $99 > 0.0;
  if (!($100)) {
   $101 = HEAP32[$0>>2]|0;
   $102 = HEAP32[$r>>2]|0;
   $103 = (19776 + (($102*52)|0)|0);
   $104 = (($103) + 20|0);
   $105 = +HEAPF32[$104>>2];
   (_lame_set_short_threshold_lrm($101,$105)|0);
  }
 }
 $106 = HEAP32[$2>>2]|0;
 $107 = ($106|0)!=(0);
 $108 = HEAP32[$0>>2]|0;
 if ($107) {
  $109 = HEAP32[$r>>2]|0;
  $110 = (19776 + (($109*52)|0)|0);
  $111 = (($110) + 24|0);
  $112 = +HEAPF32[$111>>2];
  (_lame_set_short_threshold_s($108,$112)|0);
 } else {
  $113 = (+_lame_get_short_threshold_s($108));
  $114 = $113 - -1.0;
  $115 = $114;
  $116 = (+Math_abs((+$115)));
  $117 = $116 > 0.0;
  if (!($117)) {
   $118 = HEAP32[$0>>2]|0;
   $119 = HEAP32[$r>>2]|0;
   $120 = (19776 + (($119*52)|0)|0);
   $121 = (($120) + 24|0);
   $122 = +HEAPF32[$121>>2];
   (_lame_set_short_threshold_s($118,$122)|0);
  }
 }
 $123 = HEAP32[$0>>2]|0;
 $124 = HEAP32[$0>>2]|0;
 $125 = (+_lame_get_scale($124));
 $126 = HEAP32[$r>>2]|0;
 $127 = (19776 + (($126*52)|0)|0);
 $128 = (($127) + 28|0);
 $129 = +HEAPF32[$128>>2];
 $130 = $125 * $129;
 (_lame_set_scale($123,$130)|0);
 $131 = HEAP32[$2>>2]|0;
 $132 = ($131|0)!=(0);
 $133 = HEAP32[$0>>2]|0;
 if ($132) {
  $134 = HEAP32[$r>>2]|0;
  $135 = (19776 + (($134*52)|0)|0);
  $136 = (($135) + 32|0);
  $137 = +HEAPF32[$136>>2];
  (_lame_set_maskingadjust($133,$137)|0);
 } else {
  $138 = (+_lame_get_maskingadjust($133));
  $139 = $138 - 0.0;
  $140 = $139;
  $141 = (+Math_abs((+$140)));
  $142 = $141 > 0.0;
  if (!($142)) {
   $143 = HEAP32[$0>>2]|0;
   $144 = HEAP32[$r>>2]|0;
   $145 = (19776 + (($144*52)|0)|0);
   $146 = (($145) + 32|0);
   $147 = +HEAPF32[$146>>2];
   (_lame_set_maskingadjust($143,$147)|0);
  }
 }
 $148 = HEAP32[$r>>2]|0;
 $149 = (19776 + (($148*52)|0)|0);
 $150 = (($149) + 32|0);
 $151 = +HEAPF32[$150>>2];
 $152 = $151 > 0.0;
 $153 = HEAP32[$2>>2]|0;
 $154 = ($153|0)!=(0);
 $155 = HEAP32[$0>>2]|0;
 do {
  if ($152) {
   if ($154) {
    $156 = HEAP32[$r>>2]|0;
    $157 = (19776 + (($156*52)|0)|0);
    $158 = (($157) + 32|0);
    $159 = +HEAPF32[$158>>2];
    $160 = $159;
    $161 = $160 * 0.900000000000000022204;
    $162 = $161;
    (_lame_set_maskingadjust_short($155,$162)|0);
    break;
   }
   $163 = (+_lame_get_maskingadjust_short($155));
   $164 = $163 - 0.0;
   $165 = $164;
   $166 = (+Math_abs((+$165)));
   $167 = $166 > 0.0;
   if (!($167)) {
    $168 = HEAP32[$0>>2]|0;
    $169 = HEAP32[$r>>2]|0;
    $170 = (19776 + (($169*52)|0)|0);
    $171 = (($170) + 32|0);
    $172 = +HEAPF32[$171>>2];
    $173 = $172;
    $174 = $173 * 0.900000000000000022204;
    $175 = $174;
    (_lame_set_maskingadjust_short($168,$175)|0);
   }
  } else {
   if ($154) {
    $176 = HEAP32[$r>>2]|0;
    $177 = (19776 + (($176*52)|0)|0);
    $178 = (($177) + 32|0);
    $179 = +HEAPF32[$178>>2];
    $180 = $179;
    $181 = $180 * 1.10000000000000008882;
    $182 = $181;
    (_lame_set_maskingadjust_short($155,$182)|0);
    break;
   }
   $183 = (+_lame_get_maskingadjust_short($155));
   $184 = $183 - 0.0;
   $185 = $184;
   $186 = (+Math_abs((+$185)));
   $187 = $186 > 0.0;
   if (!($187)) {
    $188 = HEAP32[$0>>2]|0;
    $189 = HEAP32[$r>>2]|0;
    $190 = (19776 + (($189*52)|0)|0);
    $191 = (($190) + 32|0);
    $192 = +HEAPF32[$191>>2];
    $193 = $192;
    $194 = $193 * 1.10000000000000008882;
    $195 = $194;
    (_lame_set_maskingadjust_short($188,$195)|0);
   }
  }
 } while(0);
 $196 = HEAP32[$2>>2]|0;
 $197 = ($196|0)!=(0);
 $198 = HEAP32[$0>>2]|0;
 if ($197) {
  $199 = HEAP32[$r>>2]|0;
  $200 = (19776 + (($199*52)|0)|0);
  $201 = (($200) + 36|0);
  $202 = +HEAPF32[$201>>2];
  (_lame_set_ATHlower($198,$202)|0);
 } else {
  $203 = (+_lame_get_ATHlower($198));
  $204 = $203 - 0.0;
  $205 = $204;
  $206 = (+Math_abs((+$205)));
  $207 = $206 > 0.0;
  if (!($207)) {
   $208 = HEAP32[$0>>2]|0;
   $209 = HEAP32[$r>>2]|0;
   $210 = (19776 + (($209*52)|0)|0);
   $211 = (($210) + 36|0);
   $212 = +HEAPF32[$211>>2];
   (_lame_set_ATHlower($208,$212)|0);
  }
 }
 $213 = HEAP32[$2>>2]|0;
 $214 = ($213|0)!=(0);
 $215 = HEAP32[$0>>2]|0;
 if ($214) {
  $216 = HEAP32[$r>>2]|0;
  $217 = (19776 + (($216*52)|0)|0);
  $218 = (($217) + 40|0);
  $219 = +HEAPF32[$218>>2];
  (_lame_set_ATHcurve($215,$219)|0);
 } else {
  $220 = (+_lame_get_ATHcurve($215));
  $221 = $220 - -1.0;
  $222 = $221;
  $223 = (+Math_abs((+$222)));
  $224 = $223 > 0.0;
  if (!($224)) {
   $225 = HEAP32[$0>>2]|0;
   $226 = HEAP32[$r>>2]|0;
   $227 = (19776 + (($226*52)|0)|0);
   $228 = (($227) + 40|0);
   $229 = +HEAPF32[$228>>2];
   (_lame_set_ATHcurve($225,$229)|0);
  }
 }
 $230 = HEAP32[$2>>2]|0;
 $231 = ($230|0)!=(0);
 $232 = HEAP32[$0>>2]|0;
 if ($231) {
  $233 = HEAP32[$r>>2]|0;
  $234 = (19776 + (($233*52)|0)|0);
  $235 = (($234) + 44|0);
  $236 = +HEAPF32[$235>>2];
  (_lame_set_interChRatio($232,$236)|0);
  $247 = HEAP32[$r>>2]|0;
  $248 = (19776 + (($247*52)|0)|0);
  $249 = HEAP32[$248>>2]|0;
  $250 = (+($249|0));
  $251 = $250 / 320.0;
  $252 = 5.0 * $251;
  $253 = $252;
  $254 = HEAP32[$0>>2]|0;
  $255 = (($254) + 288|0);
  $256 = HEAP32[$255>>2]|0;
  $257 = (($256) + 16|0);
  $258 = (($257) + 264|0);
  HEAPF32[$258>>2] = $253;
  $259 = HEAP32[$1>>2]|0;
  STACKTOP = sp;return ($259|0);
 }
 $237 = (+_lame_get_interChRatio($232));
 $238 = $237 - -1.0;
 $239 = $238;
 $240 = (+Math_abs((+$239)));
 $241 = $240 > 0.0;
 if ($241) {
  $247 = HEAP32[$r>>2]|0;
  $248 = (19776 + (($247*52)|0)|0);
  $249 = HEAP32[$248>>2]|0;
  $250 = (+($249|0));
  $251 = $250 / 320.0;
  $252 = 5.0 * $251;
  $253 = $252;
  $254 = HEAP32[$0>>2]|0;
  $255 = (($254) + 288|0);
  $256 = HEAP32[$255>>2]|0;
  $257 = (($256) + 16|0);
  $258 = (($257) + 264|0);
  HEAPF32[$258>>2] = $253;
  $259 = HEAP32[$1>>2]|0;
  STACKTOP = sp;return ($259|0);
 }
 $242 = HEAP32[$0>>2]|0;
 $243 = HEAP32[$r>>2]|0;
 $244 = (19776 + (($243*52)|0)|0);
 $245 = (($244) + 44|0);
 $246 = +HEAPF32[$245>>2];
 (_lame_set_interChRatio($242,$246)|0);
 $247 = HEAP32[$r>>2]|0;
 $248 = (19776 + (($247*52)|0)|0);
 $249 = HEAP32[$248>>2]|0;
 $250 = (+($249|0));
 $251 = $250 / 320.0;
 $252 = 5.0 * $251;
 $253 = $252;
 $254 = HEAP32[$0>>2]|0;
 $255 = (($254) + 288|0);
 $256 = HEAP32[$255>>2]|0;
 $257 = (($256) + 16|0);
 $258 = (($257) + 264|0);
 HEAPF32[$258>>2] = $253;
 $259 = HEAP32[$1>>2]|0;
 STACKTOP = sp;return ($259|0);
}
function _apply_vbr_preset($gfp,$a,$enforce) {
 $gfp = $gfp|0;
 $a = $a|0;
 $enforce = $enforce|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0.0, $101 = 0.0, $102 = 0.0, $103 = 0, $104 = 0, $105 = 0, $106 = 0.0, $107 = 0.0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0.0, $114 = 0.0, $115 = 0.0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0.0, $12 = 0, $120 = 0.0, $121 = 0, $122 = 0.0, $123 = 0, $124 = 0.0, $125 = 0.0, $126 = 0.0, $127 = 0.0, $128 = 0, $129 = 0, $13 = 0, $130 = 0.0, $131 = 0.0, $132 = 0, $133 = 0.0;
 var $134 = 0, $135 = 0.0, $136 = 0.0, $137 = 0.0, $138 = 0.0, $139 = 0, $14 = 0, $140 = 0, $141 = 0.0, $142 = 0.0, $143 = 0, $144 = 0.0, $145 = 0, $146 = 0.0, $147 = 0.0, $148 = 0.0, $149 = 0.0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0.0, $163 = 0.0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0.0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0.0, $178 = 0.0, $179 = 0, $18 = 0.0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0.0, $198 = 0.0, $199 = 0.0, $2 = 0, $20 = 0.0, $200 = 0.0, $201 = 0.0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0.0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0.0, $213 = 0.0, $214 = 0.0, $215 = 0.0, $216 = 0.0, $217 = 0, $218 = 0, $219 = 0, $22 = 0.0, $220 = 0, $221 = 0.0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0.0, $228 = 0.0, $229 = 0.0, $23 = 0.0, $230 = 0.0, $231 = 0.0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0.0, $237 = 0, $238 = 0, $239 = 0, $24 = 0.0, $240 = 0, $241 = 0;
 var $242 = 0.0, $243 = 0.0, $244 = 0.0, $245 = 0.0, $246 = 0.0, $247 = 0, $248 = 0, $249 = 0, $25 = 0.0, $250 = 0, $251 = 0.0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0.0, $265 = 0.0, $266 = 0.0, $267 = 0.0, $268 = 0.0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0.0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0.0, $28 = 0.0, $280 = 0.0, $281 = 0.0, $282 = 0.0, $283 = 0.0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0.0, $289 = 0, $29 = 0.0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0.0, $295 = 0.0, $296 = 0.0;
 var $297 = 0.0, $298 = 0.0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0.0, $304 = 0, $305 = 0, $306 = 0.0, $307 = 0, $308 = 0, $309 = 0, $31 = 0.0, $310 = 0, $311 = 0, $312 = 0, $313 = 0.0;
 var $314 = 0.0, $315 = 0.0, $316 = 0.0, $317 = 0.0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0.0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0.0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0.0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0.0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0.0, $356 = 0.0, $357 = 0.0, $358 = 0.0, $359 = 0.0, $36 = 0.0, $360 = 0.0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0.0, $366 = 0.0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0.0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0.0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0.0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0.0, $390 = 0, $4 = 0, $40 = 0.0, $41 = 0, $42 = 0.0, $43 = 0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0, $49 = 0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0;
 var $53 = 0.0, $54 = 0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0, $6 = 0, $60 = 0, $61 = 0.0, $62 = 0.0, $63 = 0, $64 = 0.0, $65 = 0, $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0.0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0.0, $73 = 0.0, $74 = 0, $75 = 0.0, $76 = 0, $77 = 0.0, $78 = 0.0, $79 = 0.0, $8 = 0.0, $80 = 0.0, $81 = 0, $82 = 0, $83 = 0.0, $84 = 0.0, $85 = 0, $86 = 0.0, $87 = 0, $88 = 0.0, $89 = 0.0;
 var $9 = 0, $90 = 0.0, $91 = 0.0, $92 = 0, $93 = 0, $94 = 0.0, $95 = 0.0, $96 = 0, $97 = 0.0, $98 = 0, $99 = 0.0, $nsp = 0, $p = 0, $q = 0, $set = 0, $sf21mod = 0, $val = 0, $vbr_preset = 0, $x = 0, dest = 0;
 var label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0;
 $0 = sp + 168|0;
 $1 = sp + 164|0;
 $2 = sp + 160|0;
 $vbr_preset = sp + 156|0;
 $x = sp + 152|0;
 $p = sp + 84|0;
 $q = sp + 16|0;
 $set = sp + 12|0;
 $nsp = sp + 8|0;
 $val = sp + 4|0;
 $sf21mod = sp;
 HEAP32[$0>>2] = $gfp;
 HEAP32[$1>>2] = $a;
 HEAP32[$2>>2] = $enforce;
 $3 = HEAP32[$0>>2]|0;
 $4 = (_lame_get_VBR($3)|0);
 $5 = (_get_vbr_preset($4)|0);
 HEAP32[$vbr_preset>>2] = $5;
 $6 = HEAP32[$0>>2]|0;
 $7 = (($6) + 160|0);
 $8 = +HEAPF32[$7>>2];
 HEAPF32[$x>>2] = $8;
 $9 = HEAP32[$1>>2]|0;
 $10 = HEAP32[$vbr_preset>>2]|0;
 $11 = (($10) + (($9*68)|0)|0);
 dest=$p+0|0; src=$11+0|0; stop=dest+68|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $12 = HEAP32[$1>>2]|0;
 $13 = (($12) + 1)|0;
 $14 = HEAP32[$vbr_preset>>2]|0;
 $15 = (($14) + (($13*68)|0)|0);
 dest=$q+0|0; src=$15+0|0; stop=dest+68|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 HEAP32[$set>>2] = $p;
 $16 = (($p) + 16|0);
 $17 = +HEAPF32[$16>>2];
 $18 = +HEAPF32[$x>>2];
 $19 = (($q) + 16|0);
 $20 = +HEAPF32[$19>>2];
 $21 = (($p) + 16|0);
 $22 = +HEAPF32[$21>>2];
 $23 = $20 - $22;
 $24 = $18 * $23;
 $25 = $17 + $24;
 $26 = (($p) + 16|0);
 HEAPF32[$26>>2] = $25;
 $27 = (($p) + 20|0);
 $28 = +HEAPF32[$27>>2];
 $29 = +HEAPF32[$x>>2];
 $30 = (($q) + 20|0);
 $31 = +HEAPF32[$30>>2];
 $32 = (($p) + 20|0);
 $33 = +HEAPF32[$32>>2];
 $34 = $31 - $33;
 $35 = $29 * $34;
 $36 = $28 + $35;
 $37 = (($p) + 20|0);
 HEAPF32[$37>>2] = $36;
 $38 = (($p) + 24|0);
 $39 = +HEAPF32[$38>>2];
 $40 = +HEAPF32[$x>>2];
 $41 = (($q) + 24|0);
 $42 = +HEAPF32[$41>>2];
 $43 = (($p) + 24|0);
 $44 = +HEAPF32[$43>>2];
 $45 = $42 - $44;
 $46 = $40 * $45;
 $47 = $39 + $46;
 $48 = (($p) + 24|0);
 HEAPF32[$48>>2] = $47;
 $49 = (($p) + 28|0);
 $50 = +HEAPF32[$49>>2];
 $51 = +HEAPF32[$x>>2];
 $52 = (($q) + 28|0);
 $53 = +HEAPF32[$52>>2];
 $54 = (($p) + 28|0);
 $55 = +HEAPF32[$54>>2];
 $56 = $53 - $55;
 $57 = $51 * $56;
 $58 = $50 + $57;
 $59 = (($p) + 28|0);
 HEAPF32[$59>>2] = $58;
 $60 = (($p) + 32|0);
 $61 = +HEAPF32[$60>>2];
 $62 = +HEAPF32[$x>>2];
 $63 = (($q) + 32|0);
 $64 = +HEAPF32[$63>>2];
 $65 = (($p) + 32|0);
 $66 = +HEAPF32[$65>>2];
 $67 = $64 - $66;
 $68 = $62 * $67;
 $69 = $61 + $68;
 $70 = (($p) + 32|0);
 HEAPF32[$70>>2] = $69;
 $71 = (($p) + 36|0);
 $72 = +HEAPF32[$71>>2];
 $73 = +HEAPF32[$x>>2];
 $74 = (($q) + 36|0);
 $75 = +HEAPF32[$74>>2];
 $76 = (($p) + 36|0);
 $77 = +HEAPF32[$76>>2];
 $78 = $75 - $77;
 $79 = $73 * $78;
 $80 = $72 + $79;
 $81 = (($p) + 36|0);
 HEAPF32[$81>>2] = $80;
 $82 = (($p) + 40|0);
 $83 = +HEAPF32[$82>>2];
 $84 = +HEAPF32[$x>>2];
 $85 = (($q) + 40|0);
 $86 = +HEAPF32[$85>>2];
 $87 = (($p) + 40|0);
 $88 = +HEAPF32[$87>>2];
 $89 = $86 - $88;
 $90 = $84 * $89;
 $91 = $83 + $90;
 $92 = (($p) + 40|0);
 HEAPF32[$92>>2] = $91;
 $93 = (($p) + 44|0);
 $94 = +HEAPF32[$93>>2];
 $95 = +HEAPF32[$x>>2];
 $96 = (($q) + 44|0);
 $97 = +HEAPF32[$96>>2];
 $98 = (($p) + 44|0);
 $99 = +HEAPF32[$98>>2];
 $100 = $97 - $99;
 $101 = $95 * $100;
 $102 = $94 + $101;
 $103 = (($p) + 44|0);
 HEAPF32[$103>>2] = $102;
 $104 = (($p) + 52|0);
 $105 = HEAP32[$104>>2]|0;
 $106 = (+($105|0));
 $107 = +HEAPF32[$x>>2];
 $108 = (($q) + 52|0);
 $109 = HEAP32[$108>>2]|0;
 $110 = (($p) + 52|0);
 $111 = HEAP32[$110>>2]|0;
 $112 = (($109) - ($111))|0;
 $113 = (+($112|0));
 $114 = $107 * $113;
 $115 = $106 + $114;
 $116 = (~~(($115)));
 $117 = (($p) + 52|0);
 HEAP32[$117>>2] = $116;
 $118 = (($p) + 56|0);
 $119 = +HEAPF32[$118>>2];
 $120 = +HEAPF32[$x>>2];
 $121 = (($q) + 56|0);
 $122 = +HEAPF32[$121>>2];
 $123 = (($p) + 56|0);
 $124 = +HEAPF32[$123>>2];
 $125 = $122 - $124;
 $126 = $120 * $125;
 $127 = $119 + $126;
 $128 = (($p) + 56|0);
 HEAPF32[$128>>2] = $127;
 $129 = (($p) + 60|0);
 $130 = +HEAPF32[$129>>2];
 $131 = +HEAPF32[$x>>2];
 $132 = (($q) + 60|0);
 $133 = +HEAPF32[$132>>2];
 $134 = (($p) + 60|0);
 $135 = +HEAPF32[$134>>2];
 $136 = $133 - $135;
 $137 = $131 * $136;
 $138 = $130 + $137;
 $139 = (($p) + 60|0);
 HEAPF32[$139>>2] = $138;
 $140 = (($p) + 64|0);
 $141 = +HEAPF32[$140>>2];
 $142 = +HEAPF32[$x>>2];
 $143 = (($q) + 64|0);
 $144 = +HEAPF32[$143>>2];
 $145 = (($p) + 64|0);
 $146 = +HEAPF32[$145>>2];
 $147 = $144 - $146;
 $148 = $142 * $147;
 $149 = $141 + $148;
 $150 = (($p) + 64|0);
 HEAPF32[$150>>2] = $149;
 $151 = HEAP32[$0>>2]|0;
 $152 = HEAP32[$set>>2]|0;
 $153 = HEAP32[$152>>2]|0;
 (_lame_set_VBR_q($151,$153)|0);
 $154 = HEAP32[$2>>2]|0;
 $155 = ($154|0)!=(0);
 $156 = HEAP32[$0>>2]|0;
 if ($155) {
  $157 = HEAP32[$set>>2]|0;
  $158 = (($157) + 4|0);
  $159 = HEAP32[$158>>2]|0;
  (_lame_set_quant_comp($156,$159)|0);
 } else {
  $160 = (_lame_get_quant_comp($156)|0);
  $161 = (($160) - -1)|0;
  $162 = (+($161|0));
  $163 = (+Math_abs((+$162)));
  $164 = $163 > 0.0;
  if (!($164)) {
   $165 = HEAP32[$0>>2]|0;
   $166 = HEAP32[$set>>2]|0;
   $167 = (($166) + 4|0);
   $168 = HEAP32[$167>>2]|0;
   (_lame_set_quant_comp($165,$168)|0);
  }
 }
 $169 = HEAP32[$2>>2]|0;
 $170 = ($169|0)!=(0);
 $171 = HEAP32[$0>>2]|0;
 if ($170) {
  $172 = HEAP32[$set>>2]|0;
  $173 = (($172) + 8|0);
  $174 = HEAP32[$173>>2]|0;
  (_lame_set_quant_comp_short($171,$174)|0);
 } else {
  $175 = (_lame_get_quant_comp_short($171)|0);
  $176 = (($175) - -1)|0;
  $177 = (+($176|0));
  $178 = (+Math_abs((+$177)));
  $179 = $178 > 0.0;
  if (!($179)) {
   $180 = HEAP32[$0>>2]|0;
   $181 = HEAP32[$set>>2]|0;
   $182 = (($181) + 8|0);
   $183 = HEAP32[$182>>2]|0;
   (_lame_set_quant_comp_short($180,$183)|0);
  }
 }
 $184 = HEAP32[$set>>2]|0;
 $185 = (($184) + 12|0);
 $186 = HEAP32[$185>>2]|0;
 $187 = ($186|0)!=(0);
 if ($187) {
  $188 = HEAP32[$0>>2]|0;
  $189 = HEAP32[$set>>2]|0;
  $190 = (($189) + 12|0);
  $191 = HEAP32[$190>>2]|0;
  (_lame_set_experimentalY($188,$191)|0);
 }
 $192 = HEAP32[$2>>2]|0;
 $193 = ($192|0)!=(0);
 $194 = HEAP32[$0>>2]|0;
 if ($193) {
  $195 = HEAP32[$set>>2]|0;
  $196 = (($195) + 16|0);
  $197 = +HEAPF32[$196>>2];
  (_lame_set_short_threshold_lrm($194,$197)|0);
 } else {
  $198 = (+_lame_get_short_threshold_lrm($194));
  $199 = $198 - -1.0;
  $200 = $199;
  $201 = (+Math_abs((+$200)));
  $202 = $201 > 0.0;
  if (!($202)) {
   $203 = HEAP32[$0>>2]|0;
   $204 = HEAP32[$set>>2]|0;
   $205 = (($204) + 16|0);
   $206 = +HEAPF32[$205>>2];
   (_lame_set_short_threshold_lrm($203,$206)|0);
  }
 }
 $207 = HEAP32[$2>>2]|0;
 $208 = ($207|0)!=(0);
 $209 = HEAP32[$0>>2]|0;
 if ($208) {
  $210 = HEAP32[$set>>2]|0;
  $211 = (($210) + 20|0);
  $212 = +HEAPF32[$211>>2];
  (_lame_set_short_threshold_s($209,$212)|0);
 } else {
  $213 = (+_lame_get_short_threshold_s($209));
  $214 = $213 - -1.0;
  $215 = $214;
  $216 = (+Math_abs((+$215)));
  $217 = $216 > 0.0;
  if (!($217)) {
   $218 = HEAP32[$0>>2]|0;
   $219 = HEAP32[$set>>2]|0;
   $220 = (($219) + 20|0);
   $221 = +HEAPF32[$220>>2];
   (_lame_set_short_threshold_s($218,$221)|0);
  }
 }
 $222 = HEAP32[$2>>2]|0;
 $223 = ($222|0)!=(0);
 $224 = HEAP32[$0>>2]|0;
 if ($223) {
  $225 = HEAP32[$set>>2]|0;
  $226 = (($225) + 24|0);
  $227 = +HEAPF32[$226>>2];
  (_lame_set_maskingadjust($224,$227)|0);
 } else {
  $228 = (+_lame_get_maskingadjust($224));
  $229 = $228 - 0.0;
  $230 = $229;
  $231 = (+Math_abs((+$230)));
  $232 = $231 > 0.0;
  if (!($232)) {
   $233 = HEAP32[$0>>2]|0;
   $234 = HEAP32[$set>>2]|0;
   $235 = (($234) + 24|0);
   $236 = +HEAPF32[$235>>2];
   (_lame_set_maskingadjust($233,$236)|0);
  }
 }
 $237 = HEAP32[$2>>2]|0;
 $238 = ($237|0)!=(0);
 $239 = HEAP32[$0>>2]|0;
 if ($238) {
  $240 = HEAP32[$set>>2]|0;
  $241 = (($240) + 28|0);
  $242 = +HEAPF32[$241>>2];
  (_lame_set_maskingadjust_short($239,$242)|0);
 } else {
  $243 = (+_lame_get_maskingadjust_short($239));
  $244 = $243 - 0.0;
  $245 = $244;
  $246 = (+Math_abs((+$245)));
  $247 = $246 > 0.0;
  if (!($247)) {
   $248 = HEAP32[$0>>2]|0;
   $249 = HEAP32[$set>>2]|0;
   $250 = (($249) + 28|0);
   $251 = +HEAPF32[$250>>2];
   (_lame_set_maskingadjust_short($248,$251)|0);
  }
 }
 $252 = HEAP32[$0>>2]|0;
 $253 = (_lame_get_VBR($252)|0);
 $254 = ($253|0)==(1);
 if ($254) {
  label = 29;
 } else {
  $255 = HEAP32[$0>>2]|0;
  $256 = (_lame_get_VBR($255)|0);
  $257 = ($256|0)==(4);
  if ($257) {
   label = 29;
  }
 }
 if ((label|0) == 29) {
  $258 = HEAP32[$0>>2]|0;
  (_lame_set_ATHtype($258,5)|0);
 }
 $259 = HEAP32[$2>>2]|0;
 $260 = ($259|0)!=(0);
 $261 = HEAP32[$0>>2]|0;
 if ($260) {
  $262 = HEAP32[$set>>2]|0;
  $263 = (($262) + 32|0);
  $264 = +HEAPF32[$263>>2];
  (_lame_set_ATHlower($261,$264)|0);
 } else {
  $265 = (+_lame_get_ATHlower($261));
  $266 = $265 - 0.0;
  $267 = $266;
  $268 = (+Math_abs((+$267)));
  $269 = $268 > 0.0;
  if (!($269)) {
   $270 = HEAP32[$0>>2]|0;
   $271 = HEAP32[$set>>2]|0;
   $272 = (($271) + 32|0);
   $273 = +HEAPF32[$272>>2];
   (_lame_set_ATHlower($270,$273)|0);
  }
 }
 $274 = HEAP32[$2>>2]|0;
 $275 = ($274|0)!=(0);
 $276 = HEAP32[$0>>2]|0;
 if ($275) {
  $277 = HEAP32[$set>>2]|0;
  $278 = (($277) + 36|0);
  $279 = +HEAPF32[$278>>2];
  (_lame_set_ATHcurve($276,$279)|0);
 } else {
  $280 = (+_lame_get_ATHcurve($276));
  $281 = $280 - -1.0;
  $282 = $281;
  $283 = (+Math_abs((+$282)));
  $284 = $283 > 0.0;
  if (!($284)) {
   $285 = HEAP32[$0>>2]|0;
   $286 = HEAP32[$set>>2]|0;
   $287 = (($286) + 36|0);
   $288 = +HEAPF32[$287>>2];
   (_lame_set_ATHcurve($285,$288)|0);
  }
 }
 $289 = HEAP32[$2>>2]|0;
 $290 = ($289|0)!=(0);
 $291 = HEAP32[$0>>2]|0;
 if ($290) {
  $292 = HEAP32[$set>>2]|0;
  $293 = (($292) + 40|0);
  $294 = +HEAPF32[$293>>2];
  (_lame_set_athaa_sensitivity($291,$294)|0);
 } else {
  $295 = (+_lame_get_athaa_sensitivity($291));
  $296 = $295 - 0.0;
  $297 = $296;
  $298 = (+Math_abs((+$297)));
  $299 = $298 > 0.0;
  if (!($299)) {
   $300 = HEAP32[$0>>2]|0;
   $301 = HEAP32[$set>>2]|0;
   $302 = (($301) + 40|0);
   $303 = +HEAPF32[$302>>2];
   (_lame_set_athaa_sensitivity($300,$303)|0);
  }
 }
 $304 = HEAP32[$set>>2]|0;
 $305 = (($304) + 44|0);
 $306 = +HEAPF32[$305>>2];
 $307 = $306 > 0.0;
 do {
  if ($307) {
   $308 = HEAP32[$2>>2]|0;
   $309 = ($308|0)!=(0);
   $310 = HEAP32[$0>>2]|0;
   if ($309) {
    $311 = HEAP32[$set>>2]|0;
    $312 = (($311) + 44|0);
    $313 = +HEAPF32[$312>>2];
    (_lame_set_interChRatio($310,$313)|0);
    break;
   }
   $314 = (+_lame_get_interChRatio($310));
   $315 = $314 - -1.0;
   $316 = $315;
   $317 = (+Math_abs((+$316)));
   $318 = $317 > 0.0;
   if (!($318)) {
    $319 = HEAP32[$0>>2]|0;
    $320 = HEAP32[$set>>2]|0;
    $321 = (($320) + 44|0);
    $322 = +HEAPF32[$321>>2];
    (_lame_set_interChRatio($319,$322)|0);
   }
  }
 } while(0);
 $323 = HEAP32[$set>>2]|0;
 $324 = (($323) + 48|0);
 $325 = HEAP32[$324>>2]|0;
 $326 = ($325|0)>(0);
 if ($326) {
  $327 = HEAP32[$0>>2]|0;
  $328 = HEAP32[$0>>2]|0;
  $329 = (_lame_get_exp_nspsytune($328)|0);
  $330 = $329 | 2;
  (_lame_set_exp_nspsytune($327,$330)|0);
 }
 $331 = HEAP32[$set>>2]|0;
 $332 = (($331) + 52|0);
 $333 = HEAP32[$332>>2]|0;
 $334 = ($333|0)>(0);
 if ($334) {
  $335 = HEAP32[$0>>2]|0;
  $336 = (_lame_get_exp_nspsytune($335)|0);
  HEAP32[$nsp>>2] = $336;
  $337 = HEAP32[$nsp>>2]|0;
  $338 = $337 >> 20;
  $339 = $338 & 63;
  HEAP32[$val>>2] = $339;
  $340 = HEAP32[$val>>2]|0;
  $341 = ($340|0)==(0);
  if ($341) {
   $342 = HEAP32[$set>>2]|0;
   $343 = (($342) + 52|0);
   $344 = HEAP32[$343>>2]|0;
   $345 = $344 << 20;
   $346 = HEAP32[$nsp>>2]|0;
   $347 = $345 | $346;
   HEAP32[$sf21mod>>2] = $347;
   $348 = HEAP32[$0>>2]|0;
   $349 = HEAP32[$sf21mod>>2]|0;
   (_lame_set_exp_nspsytune($348,$349)|0);
  }
 }
 $350 = HEAP32[$2>>2]|0;
 $351 = ($350|0)!=(0);
 $352 = HEAP32[$0>>2]|0;
 if ($351) {
  $353 = HEAP32[$set>>2]|0;
  $354 = (($353) + 56|0);
  $355 = +HEAPF32[$354>>2];
  $356 = $355;
  _lame_set_msfix($352,$356);
 } else {
  $357 = (+_lame_get_msfix($352));
  $358 = $357 - -1.0;
  $359 = $358;
  $360 = (+Math_abs((+$359)));
  $361 = $360 > 0.0;
  if (!($361)) {
   $362 = HEAP32[$0>>2]|0;
   $363 = HEAP32[$set>>2]|0;
   $364 = (($363) + 56|0);
   $365 = +HEAPF32[$364>>2];
   $366 = $365;
   _lame_set_msfix($362,$366);
  }
 }
 $367 = HEAP32[$2>>2]|0;
 $368 = ($367|0)==(0);
 if (!($368)) {
  $375 = HEAP32[$set>>2]|0;
  $376 = (($375) + 60|0);
  $377 = +HEAPF32[$376>>2];
  $378 = HEAP32[$0>>2]|0;
  $379 = (($378) + 288|0);
  $380 = HEAP32[$379>>2]|0;
  $381 = (($380) + 16|0);
  $382 = (($381) + 264|0);
  HEAPF32[$382>>2] = $377;
  $383 = HEAP32[$set>>2]|0;
  $384 = (($383) + 64|0);
  $385 = +HEAPF32[$384>>2];
  $386 = HEAP32[$0>>2]|0;
  $387 = (($386) + 288|0);
  $388 = HEAP32[$387>>2]|0;
  $389 = (($388) + 16|0);
  $390 = (($389) + 208|0);
  HEAPF32[$390>>2] = $385;
  STACKTOP = sp;return;
 }
 $369 = HEAP32[$1>>2]|0;
 $370 = HEAP32[$0>>2]|0;
 $371 = (($370) + 164|0);
 HEAP32[$371>>2] = $369;
 $372 = +HEAPF32[$x>>2];
 $373 = HEAP32[$0>>2]|0;
 $374 = (($373) + 160|0);
 HEAPF32[$374>>2] = $372;
 $375 = HEAP32[$set>>2]|0;
 $376 = (($375) + 60|0);
 $377 = +HEAPF32[$376>>2];
 $378 = HEAP32[$0>>2]|0;
 $379 = (($378) + 288|0);
 $380 = HEAP32[$379>>2]|0;
 $381 = (($380) + 16|0);
 $382 = (($381) + 264|0);
 HEAPF32[$382>>2] = $377;
 $383 = HEAP32[$set>>2]|0;
 $384 = (($383) + 64|0);
 $385 = +HEAPF32[$384>>2];
 $386 = HEAP32[$0>>2]|0;
 $387 = (($386) + 288|0);
 $388 = HEAP32[$387>>2]|0;
 $389 = (($388) + 16|0);
 $390 = (($389) + 208|0);
 HEAPF32[$390>>2] = $385;
 STACKTOP = sp;return;
}
function _get_vbr_preset($v) {
 $v = $v|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp + 4|0;
 $1 = sp;
 HEAP32[$1>>2] = $v;
 $2 = HEAP32[$1>>2]|0;
 if ((($2|0) == 1) | (($2|0) == 4)) {
  HEAP32[$0>>2] = 18272;
 } else {
  HEAP32[$0>>2] = 19024;
 }
 $3 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($3|0);
}
function _min_int($a,$b) {
 $a = $a|0;
 $b = $b|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp + 8|0;
 $1 = sp + 4|0;
 $2 = sp;
 HEAP32[$1>>2] = $a;
 HEAP32[$2>>2] = $b;
 $3 = HEAP32[$1>>2]|0;
 $4 = HEAP32[$2>>2]|0;
 $5 = ($3|0)<($4|0);
 if ($5) {
  $6 = HEAP32[$1>>2]|0;
  HEAP32[$0>>2] = $6;
  $8 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($8|0);
 } else {
  $7 = HEAP32[$2>>2]|0;
  HEAP32[$0>>2] = $7;
  $8 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($8|0);
 }
 return 0|0;
}
function _max_int($a,$b) {
 $a = $a|0;
 $b = $b|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp + 8|0;
 $1 = sp + 4|0;
 $2 = sp;
 HEAP32[$1>>2] = $a;
 HEAP32[$2>>2] = $b;
 $3 = HEAP32[$1>>2]|0;
 $4 = HEAP32[$2>>2]|0;
 $5 = ($3|0)>($4|0);
 if ($5) {
  $6 = HEAP32[$1>>2]|0;
  HEAP32[$0>>2] = $6;
  $8 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($8|0);
 } else {
  $7 = HEAP32[$2>>2]|0;
  HEAP32[$0>>2] = $7;
  $8 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($8|0);
 }
 return 0|0;
}
function _L3psycho_anal_vbr($gfc,$buffer,$gr_out,$masking_ratio,$masking_MS_ratio,$percep_entropy,$percep_MS_entropy,$energy,$blocktype_d) {
 $gfc = $gfc|0;
 $buffer = $buffer|0;
 $gr_out = $gr_out|0;
 $masking_ratio = $masking_ratio|0;
 $masking_MS_ratio = $masking_MS_ratio|0;
 $percep_entropy = $percep_entropy|0;
 $percep_MS_entropy = $percep_MS_entropy|0;
 $energy = $energy|0;
 $blocktype_d = $blocktype_d|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0.0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0.0, $176 = 0, $177 = 0, $178 = 0.0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0.0, $221 = 0.0, $222 = 0.0, $223 = 0.0;
 var $224 = 0.0, $225 = 0.0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0.0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0.0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0.0, $253 = 0.0, $254 = 0.0, $255 = 0.0, $256 = 0.0, $257 = 0, $258 = 0.0, $259 = 0.0, $26 = 0;
 var $260 = 0.0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0.0, $268 = 0.0, $269 = 0.0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0.0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0.0, $300 = 0, $301 = 0.0, $302 = 0.0, $303 = 0.0, $304 = 0.0, $305 = 0.0, $306 = 0.0, $307 = 0.0, $308 = 0, $309 = 0.0, $31 = 0, $310 = 0.0, $311 = 0.0, $312 = 0.0, $313 = 0.0;
 var $314 = 0, $315 = 0.0, $316 = 0.0, $317 = 0.0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0.0, $323 = 0.0, $324 = 0.0, $325 = 0.0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0.0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0.0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0.0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0.0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0.0, $405 = 0.0, $406 = 0, $407 = 0, $408 = 0, $409 = 0.0, $41 = 0.0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0.0, $419 = 0.0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0.0, $99 = 0, $ath_factor = 0, $cfg = 0, $ch01 = 0, $ch011 = 0, $ch012 = 0, $chn = 0, $const_eb = 0, $const_fftenergy_s = 0, $eb = 0, $fftenergy = 0, $fftenergy_s = 0, $force_short_block_calc = 0;
 var $gdl = 0, $gds = 0, $last_thm = 0, $mr = 0, $n_chn_psy = 0, $new_thmm = 0, $ns_attacks = 0, $pcfact = 0, $plt = 0, $ppe = 0, $prev_thm = 0, $psv = 0, $sb = 0, $sblock = 0, $sub_short_factor = 0, $t1 = 0, $t2 = 0, $thmm = 0, $thr = 0, $type = 0;
 var $uselongblock = 0, $wsamp_L = 0, $wsamp_S = 0, $wsamp_l = 0, $wsamp_s = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 21248|0;
 $0 = sp + 21236|0;
 $1 = sp + 21232|0;
 $2 = sp + 21228|0;
 $3 = sp + 21224|0;
 $4 = sp + 21220|0;
 $5 = sp + 21216|0;
 $6 = sp + 21212|0;
 $7 = sp + 21208|0;
 $8 = sp + 21204|0;
 $cfg = sp + 21200|0;
 $psv = sp + 21196|0;
 $gdl = sp + 21192|0;
 $gds = sp + 21188|0;
 $plt = sp + 21184|0;
 $last_thm = sp + 20208|0;
 $wsamp_l = sp + 20204|0;
 $wsamp_s = sp + 20200|0;
 $fftenergy = sp + 18148|0;
 $fftenergy_s = sp + 16600|0;
 $wsamp_L = sp + 8408|0;
 $wsamp_S = sp + 2264|0;
 $eb = sp + 1240|0;
 $thr = sp + 216|0;
 $sub_short_factor = sp + 168|0;
 $thmm = sp + 160|0;
 $pcfact = sp + 156|0;
 $ath_factor = sp + 152|0;
 $const_eb = sp + 148|0;
 $const_fftenergy_s = sp + 144|0;
 $ns_attacks = sp + 80|0;
 $uselongblock = sp + 72|0;
 $chn = sp + 64|0;
 $sb = sp + 60|0;
 $sblock = sp + 56|0;
 $n_chn_psy = sp + 52|0;
 $ch01 = sp + 48|0;
 $force_short_block_calc = sp + 44|0;
 $ch011 = sp + 40|0;
 $ch012 = sp + 36|0;
 $new_thmm = sp + 24|0;
 $prev_thm = sp + 20|0;
 $t1 = sp + 16|0;
 $t2 = sp + 12|0;
 $ppe = sp + 8|0;
 $type = sp + 4|0;
 $mr = sp;
 HEAP32[$0>>2] = $gfc;
 HEAP32[$1>>2] = $buffer;
 HEAP32[$2>>2] = $gr_out;
 HEAP32[$3>>2] = $masking_ratio;
 HEAP32[$4>>2] = $masking_MS_ratio;
 HEAP32[$5>>2] = $percep_entropy;
 HEAP32[$6>>2] = $percep_MS_entropy;
 HEAP32[$7>>2] = $energy;
 HEAP32[$8>>2] = $blocktype_d;
 $9 = HEAP32[$0>>2]|0;
 $10 = (($9) + 16|0);
 HEAP32[$cfg>>2] = $10;
 $11 = HEAP32[$0>>2]|0;
 $12 = (($11) + 21564|0);
 HEAP32[$psv>>2] = $12;
 $13 = HEAP32[$0>>2]|0;
 $14 = (($13) + 85800|0);
 $15 = HEAP32[$14>>2]|0;
 HEAP32[$gdl>>2] = $15;
 $16 = HEAP32[$0>>2]|0;
 $17 = (($16) + 85800|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = (($18) + 2160|0);
 HEAP32[$gds>>2] = $19;
 $20 = HEAP32[$cfg>>2]|0;
 $21 = (($20) + 124|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = ($22|0)!=(0);
 if ($23) {
  $24 = HEAP32[$0>>2]|0;
  $25 = (($24) + 85804|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = $26;
 } else {
  $27 = 0;
 }
 HEAP32[$plt>>2] = $27;
 HEAPF32[$pcfact>>2] = 0.600000023841857910156;
 $28 = HEAP32[$cfg>>2]|0;
 $29 = (($28) + 176|0);
 $30 = +HEAPF32[$29>>2];
 $31 = $30 > 0.0;
 if ($31) {
  $32 = HEAP32[$cfg>>2]|0;
  $33 = (($32) + 184|0);
  $34 = +HEAPF32[$33>>2];
  $35 = HEAP32[$0>>2]|0;
  $36 = (($35) + 85796|0);
  $37 = HEAP32[$36>>2]|0;
  $38 = (($37) + 8|0);
  $39 = +HEAPF32[$38>>2];
  $40 = $34 * $39;
  $41 = $40;
 } else {
  $41 = 1.0;
 }
 HEAPF32[$ath_factor>>2] = $41;
 HEAP32[$const_eb>>2] = $eb;
 HEAP32[$const_fftenergy_s>>2] = $fftenergy_s;
 dest=$ns_attacks+0|0; stop=dest+64|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $42 = HEAP32[$cfg>>2]|0;
 $43 = (($42) + 164|0);
 $44 = HEAP32[$43>>2]|0;
 $45 = ($44|0)==(1);
 if ($45) {
  $49 = 4;
 } else {
  $46 = HEAP32[$cfg>>2]|0;
  $47 = (($46) + 56|0);
  $48 = HEAP32[$47>>2]|0;
  $49 = $48;
 }
 HEAP32[$n_chn_psy>>2] = $49;
 $50 = HEAP32[$psv>>2]|0;
 $51 = (($50) + 4096|0);
 _memcpy(($last_thm|0),($51|0),976)|0;
 $52 = HEAP32[$0>>2]|0;
 $53 = HEAP32[$1>>2]|0;
 $54 = HEAP32[$2>>2]|0;
 $55 = HEAP32[$3>>2]|0;
 $56 = HEAP32[$4>>2]|0;
 $57 = HEAP32[$7>>2]|0;
 _vbrpsy_attack_detection($52,$53,$54,$55,$56,$57,$sub_short_factor,$ns_attacks,$uselongblock);
 $58 = HEAP32[$cfg>>2]|0;
 _vbrpsy_compute_block_type($58,$uselongblock);
 HEAP32[$chn>>2] = 0;
 while(1) {
  $59 = HEAP32[$chn>>2]|0;
  $60 = HEAP32[$n_chn_psy>>2]|0;
  $61 = ($59|0)<($60|0);
  if (!($61)) {
   break;
  }
  $62 = HEAP32[$chn>>2]|0;
  $63 = $62 & 1;
  HEAP32[$ch01>>2] = $63;
  $64 = HEAP32[$ch01>>2]|0;
  $65 = (($wsamp_L) + ($64<<12)|0);
  HEAP32[$wsamp_l>>2] = $65;
  $66 = HEAP32[$0>>2]|0;
  $67 = HEAP32[$1>>2]|0;
  $68 = HEAP32[$chn>>2]|0;
  $69 = HEAP32[$2>>2]|0;
  $70 = HEAP32[$wsamp_l>>2]|0;
  _vbrpsy_compute_fft_l($66,$67,$68,$69,$fftenergy,$70);
  $71 = HEAP32[$0>>2]|0;
  $72 = HEAP32[$2>>2]|0;
  $73 = HEAP32[$chn>>2]|0;
  _vbrpsy_compute_loudness_approximation_l($71,$72,$73,$fftenergy);
  $74 = HEAP32[$0>>2]|0;
  $75 = HEAP32[$chn>>2]|0;
  $76 = (($eb) + ($75<<8)|0);
  $77 = HEAP32[$chn>>2]|0;
  $78 = (($thr) + ($77<<8)|0);
  $79 = HEAP32[$chn>>2]|0;
  _vbrpsy_compute_masking_l($74,$fftenergy,$76,$78,$79);
  $80 = HEAP32[$chn>>2]|0;
  $81 = (($80) + 1)|0;
  HEAP32[$chn>>2] = $81;
 }
 $82 = HEAP32[$cfg>>2]|0;
 $83 = (($82) + 164|0);
 $84 = HEAP32[$83>>2]|0;
 $85 = ($84|0)==(1);
 if ($85) {
  $86 = HEAP32[$uselongblock>>2]|0;
  $87 = (($uselongblock) + 4|0);
  $88 = HEAP32[$87>>2]|0;
  $89 = (($86) + ($88))|0;
  $90 = ($89|0)==(2);
  if ($90) {
   $91 = HEAP32[$const_eb>>2]|0;
   $92 = HEAP32[$gdl>>2]|0;
   $93 = (($92) + 768|0);
   $94 = HEAP32[$0>>2]|0;
   $95 = (($94) + 85796|0);
   $96 = HEAP32[$95>>2]|0;
   $97 = (($96) + 212|0);
   $98 = +HEAPF32[$ath_factor>>2];
   $99 = HEAP32[$cfg>>2]|0;
   $100 = (($99) + 176|0);
   $101 = +HEAPF32[$100>>2];
   $102 = HEAP32[$gdl>>2]|0;
   $103 = (($102) + 2148|0);
   $104 = HEAP32[$103>>2]|0;
   _vbrpsy_compute_MS_thresholds($91,$thr,$93,$97,$98,$101,$104);
  }
 }
 HEAP32[$chn>>2] = 0;
 while(1) {
  $105 = HEAP32[$chn>>2]|0;
  $106 = HEAP32[$n_chn_psy>>2]|0;
  $107 = ($105|0)<($106|0);
  $108 = HEAP32[$0>>2]|0;
  if (!($107)) {
   break;
  }
  $109 = HEAP32[$chn>>2]|0;
  $110 = (($eb) + ($109<<8)|0);
  $111 = HEAP32[$chn>>2]|0;
  $112 = (($thr) + ($111<<8)|0);
  $113 = HEAP32[$chn>>2]|0;
  _convert_partition2scalefac_l($108,$110,$112,$113);
  $114 = HEAP32[$0>>2]|0;
  $115 = HEAP32[$chn>>2]|0;
  $116 = (($eb) + ($115<<8)|0);
  $117 = HEAP32[$chn>>2]|0;
  $118 = (($thr) + ($117<<8)|0);
  $119 = HEAP32[$chn>>2]|0;
  _convert_partition2scalefac_l_to_s($114,$116,$118,$119);
  $120 = HEAP32[$chn>>2]|0;
  $121 = (($120) + 1)|0;
  HEAP32[$chn>>2] = $121;
 }
 $122 = (($108) + 85800|0);
 $123 = HEAP32[$122>>2]|0;
 $124 = (($123) + 6500|0);
 $125 = HEAP32[$124>>2]|0;
 HEAP32[$force_short_block_calc>>2] = $125;
 HEAP32[$sblock>>2] = 0;
 while(1) {
  $126 = HEAP32[$sblock>>2]|0;
  $127 = ($126|0)<(3);
  HEAP32[$chn>>2] = 0;
  if (!($127)) {
   break;
  }
  while(1) {
   $128 = HEAP32[$chn>>2]|0;
   $129 = HEAP32[$n_chn_psy>>2]|0;
   $130 = ($128|0)<($129|0);
   if (!($130)) {
    break;
   }
   $131 = HEAP32[$chn>>2]|0;
   $132 = $131 & 1;
   HEAP32[$ch011>>2] = $132;
   $133 = HEAP32[$ch011>>2]|0;
   $134 = (($uselongblock) + ($133<<2)|0);
   $135 = HEAP32[$134>>2]|0;
   $136 = ($135|0)!=(0);
   if ($136) {
    $137 = HEAP32[$force_short_block_calc>>2]|0;
    $138 = ($137|0)!=(0);
    if ($138) {
     label = 22;
    } else {
     $139 = HEAP32[$0>>2]|0;
     $140 = HEAP32[$chn>>2]|0;
     $141 = HEAP32[$sblock>>2]|0;
     _vbrpsy_skip_masking_s($139,$140,$141);
    }
   } else {
    label = 22;
   }
   if ((label|0) == 22) {
    label = 0;
    $142 = HEAP32[$ch011>>2]|0;
    $143 = (($wsamp_S) + (($142*3072)|0)|0);
    HEAP32[$wsamp_s>>2] = $143;
    $144 = HEAP32[$0>>2]|0;
    $145 = HEAP32[$1>>2]|0;
    $146 = HEAP32[$chn>>2]|0;
    $147 = HEAP32[$sblock>>2]|0;
    $148 = HEAP32[$wsamp_s>>2]|0;
    _vbrpsy_compute_fft_s($144,$145,$146,$147,$fftenergy_s,$148);
    $149 = HEAP32[$0>>2]|0;
    $150 = HEAP32[$const_fftenergy_s>>2]|0;
    $151 = HEAP32[$chn>>2]|0;
    $152 = (($eb) + ($151<<8)|0);
    $153 = HEAP32[$chn>>2]|0;
    $154 = (($thr) + ($153<<8)|0);
    $155 = HEAP32[$chn>>2]|0;
    $156 = HEAP32[$sblock>>2]|0;
    _vbrpsy_compute_masking_s($149,$150,$152,$154,$155,$156);
   }
   $157 = HEAP32[$chn>>2]|0;
   $158 = (($157) + 1)|0;
   HEAP32[$chn>>2] = $158;
  }
  $159 = HEAP32[$cfg>>2]|0;
  $160 = (($159) + 164|0);
  $161 = HEAP32[$160>>2]|0;
  $162 = ($161|0)==(1);
  if ($162) {
   $163 = HEAP32[$uselongblock>>2]|0;
   $164 = (($uselongblock) + 4|0);
   $165 = HEAP32[$164>>2]|0;
   $166 = (($163) + ($165))|0;
   $167 = ($166|0)==(0);
   if ($167) {
    $168 = HEAP32[$const_eb>>2]|0;
    $169 = HEAP32[$gds>>2]|0;
    $170 = (($169) + 768|0);
    $171 = HEAP32[$0>>2]|0;
    $172 = (($171) + 85796|0);
    $173 = HEAP32[$172>>2]|0;
    $174 = (($173) + 468|0);
    $175 = +HEAPF32[$ath_factor>>2];
    $176 = HEAP32[$cfg>>2]|0;
    $177 = (($176) + 176|0);
    $178 = +HEAPF32[$177>>2];
    $179 = HEAP32[$gds>>2]|0;
    $180 = (($179) + 2148|0);
    $181 = HEAP32[$180>>2]|0;
    _vbrpsy_compute_MS_thresholds($168,$thr,$170,$174,$175,$178,$181);
   }
  }
  HEAP32[$chn>>2] = 0;
  while(1) {
   $182 = HEAP32[$chn>>2]|0;
   $183 = HEAP32[$n_chn_psy>>2]|0;
   $184 = ($182|0)<($183|0);
   if (!($184)) {
    break;
   }
   $185 = HEAP32[$chn>>2]|0;
   $186 = $185 & 1;
   HEAP32[$ch012>>2] = $186;
   $187 = HEAP32[$ch012>>2]|0;
   $188 = (($uselongblock) + ($187<<2)|0);
   $189 = HEAP32[$188>>2]|0;
   $190 = ($189|0)!=(0);
   if ($190) {
    $191 = HEAP32[$force_short_block_calc>>2]|0;
    $192 = ($191|0)!=(0);
    if ($192) {
     label = 31;
    }
   } else {
    label = 31;
   }
   if ((label|0) == 31) {
    label = 0;
    $193 = HEAP32[$0>>2]|0;
    $194 = HEAP32[$chn>>2]|0;
    $195 = (($eb) + ($194<<8)|0);
    $196 = HEAP32[$chn>>2]|0;
    $197 = (($thr) + ($196<<8)|0);
    $198 = HEAP32[$chn>>2]|0;
    $199 = HEAP32[$sblock>>2]|0;
    _convert_partition2scalefac_s($193,$195,$197,$198,$199);
   }
   $200 = HEAP32[$chn>>2]|0;
   $201 = (($200) + 1)|0;
   HEAP32[$chn>>2] = $201;
  }
  $202 = HEAP32[$sblock>>2]|0;
  $203 = (($202) + 1)|0;
  HEAP32[$sblock>>2] = $203;
 }
 while(1) {
  $204 = HEAP32[$chn>>2]|0;
  $205 = HEAP32[$n_chn_psy>>2]|0;
  $206 = ($204|0)<($205|0);
  if (!($206)) {
   break;
  }
  HEAP32[$sb>>2] = 0;
  while(1) {
   $207 = HEAP32[$sb>>2]|0;
   $208 = ($207|0)<(13);
   if (!($208)) {
    break;
   }
   HEAP32[$sblock>>2] = 0;
   while(1) {
    $209 = HEAP32[$sblock>>2]|0;
    $210 = ($209|0)<(3);
    if (!($210)) {
     break;
    }
    $211 = HEAP32[$sblock>>2]|0;
    $212 = HEAP32[$sb>>2]|0;
    $213 = HEAP32[$chn>>2]|0;
    $214 = HEAP32[$psv>>2]|0;
    $215 = (($214) + 4096|0);
    $216 = (($215) + (($213*244)|0)|0);
    $217 = (($216) + 88|0);
    $218 = (($217) + (($212*12)|0)|0);
    $219 = (($218) + ($211<<2)|0);
    $220 = +HEAPF32[$219>>2];
    HEAPF32[$thmm>>2] = $220;
    $221 = +HEAPF32[$thmm>>2];
    $222 = $221;
    $223 = $222 * 0.800000000000000044408;
    $224 = $223;
    HEAPF32[$thmm>>2] = $224;
    $225 = +HEAPF32[$thmm>>2];
    HEAPF32[$t2>>2] = $225;
    HEAPF32[$t1>>2] = $225;
    $226 = HEAP32[$sblock>>2]|0;
    $227 = ($226|0)>(0);
    if ($227) {
     $228 = HEAP32[$sblock>>2]|0;
     $229 = (($228) - 1)|0;
     $230 = (($new_thmm) + ($229<<2)|0);
     $231 = +HEAPF32[$230>>2];
     HEAPF32[$prev_thm>>2] = $231;
    } else {
     $232 = HEAP32[$sb>>2]|0;
     $233 = HEAP32[$chn>>2]|0;
     $234 = (($last_thm) + (($233*244)|0)|0);
     $235 = (($234) + 88|0);
     $236 = (($235) + (($232*12)|0)|0);
     $237 = (($236) + 8|0);
     $238 = +HEAPF32[$237>>2];
     HEAPF32[$prev_thm>>2] = $238;
    }
    $239 = HEAP32[$sblock>>2]|0;
    $240 = HEAP32[$chn>>2]|0;
    $241 = (($ns_attacks) + ($240<<4)|0);
    $242 = (($241) + ($239<<2)|0);
    $243 = HEAP32[$242>>2]|0;
    $244 = ($243|0)>=(2);
    if ($244) {
     label = 44;
    } else {
     $245 = HEAP32[$sblock>>2]|0;
     $246 = (($245) + 1)|0;
     $247 = HEAP32[$chn>>2]|0;
     $248 = (($ns_attacks) + ($247<<4)|0);
     $249 = (($248) + ($246<<2)|0);
     $250 = HEAP32[$249>>2]|0;
     $251 = ($250|0)==(1);
     if ($251) {
      label = 44;
     }
    }
    if ((label|0) == 44) {
     label = 0;
     $252 = +HEAPF32[$prev_thm>>2];
     $253 = +HEAPF32[$thmm>>2];
     $254 = (+_NS_INTERP($252,$253,0.360000014305114746094));
     HEAPF32[$t1>>2] = $254;
    }
    $255 = +HEAPF32[$t1>>2];
    $256 = +HEAPF32[$thmm>>2];
    $257 = $255 < $256;
    $258 = +HEAPF32[$t1>>2];
    $259 = +HEAPF32[$thmm>>2];
    $260 = $257 ? $258 : $259;
    HEAPF32[$thmm>>2] = $260;
    $261 = HEAP32[$sblock>>2]|0;
    $262 = HEAP32[$chn>>2]|0;
    $263 = (($ns_attacks) + ($262<<4)|0);
    $264 = (($263) + ($261<<2)|0);
    $265 = HEAP32[$264>>2]|0;
    $266 = ($265|0)==(1);
    do {
     if ($266) {
      $267 = +HEAPF32[$prev_thm>>2];
      $268 = +HEAPF32[$thmm>>2];
      $269 = (+_NS_INTERP($267,$268,0.180000007152557373047));
      HEAPF32[$t2>>2] = $269;
     } else {
      $270 = HEAP32[$sblock>>2]|0;
      $271 = ($270|0)==(0);
      if ($271) {
       $272 = HEAP32[$chn>>2]|0;
       $273 = HEAP32[$psv>>2]|0;
       $274 = (($273) + 6216|0);
       $275 = (($274) + ($272<<2)|0);
       $276 = HEAP32[$275>>2]|0;
       $277 = ($276|0)==(3);
       if (!($277)) {
        label = 49;
       }
      } else {
       label = 49;
      }
      if ((label|0) == 49) {
       label = 0;
       $278 = HEAP32[$sblock>>2]|0;
       $279 = ($278|0)>(0);
       if (!($279)) {
        break;
       }
       $280 = HEAP32[$sblock>>2]|0;
       $281 = (($280) - 1)|0;
       $282 = HEAP32[$chn>>2]|0;
       $283 = (($ns_attacks) + ($282<<4)|0);
       $284 = (($283) + ($281<<2)|0);
       $285 = HEAP32[$284>>2]|0;
       $286 = ($285|0)==(3);
       if (!($286)) {
        break;
       }
      }
      $287 = HEAP32[$sblock>>2]|0;
      if ((($287|0) == 0)) {
       $288 = HEAP32[$sb>>2]|0;
       $289 = HEAP32[$chn>>2]|0;
       $290 = (($last_thm) + (($289*244)|0)|0);
       $291 = (($290) + 88|0);
       $292 = (($291) + (($288*12)|0)|0);
       $293 = (($292) + 4|0);
       $294 = +HEAPF32[$293>>2];
       HEAPF32[$prev_thm>>2] = $294;
      } else if ((($287|0) == 1)) {
       $295 = HEAP32[$sb>>2]|0;
       $296 = HEAP32[$chn>>2]|0;
       $297 = (($last_thm) + (($296*244)|0)|0);
       $298 = (($297) + 88|0);
       $299 = (($298) + (($295*12)|0)|0);
       $300 = (($299) + 8|0);
       $301 = +HEAPF32[$300>>2];
       HEAPF32[$prev_thm>>2] = $301;
      } else if ((($287|0) == 2)) {
       $302 = +HEAPF32[$new_thmm>>2];
       HEAPF32[$prev_thm>>2] = $302;
      }
      $303 = +HEAPF32[$prev_thm>>2];
      $304 = +HEAPF32[$thmm>>2];
      $305 = (+_NS_INTERP($303,$304,0.180000007152557373047));
      HEAPF32[$t2>>2] = $305;
     }
    } while(0);
    $306 = +HEAPF32[$t1>>2];
    $307 = +HEAPF32[$thmm>>2];
    $308 = $306 < $307;
    $309 = +HEAPF32[$t1>>2];
    $310 = +HEAPF32[$thmm>>2];
    $311 = $308 ? $309 : $310;
    HEAPF32[$thmm>>2] = $311;
    $312 = +HEAPF32[$t2>>2];
    $313 = +HEAPF32[$thmm>>2];
    $314 = $312 < $313;
    $315 = +HEAPF32[$t2>>2];
    $316 = +HEAPF32[$thmm>>2];
    $317 = $314 ? $315 : $316;
    HEAPF32[$thmm>>2] = $317;
    $318 = HEAP32[$sblock>>2]|0;
    $319 = HEAP32[$chn>>2]|0;
    $320 = (($sub_short_factor) + (($319*12)|0)|0);
    $321 = (($320) + ($318<<2)|0);
    $322 = +HEAPF32[$321>>2];
    $323 = +HEAPF32[$thmm>>2];
    $324 = $323 * $322;
    HEAPF32[$thmm>>2] = $324;
    $325 = +HEAPF32[$thmm>>2];
    $326 = HEAP32[$sblock>>2]|0;
    $327 = (($new_thmm) + ($326<<2)|0);
    HEAPF32[$327>>2] = $325;
    $328 = HEAP32[$sblock>>2]|0;
    $329 = (($328) + 1)|0;
    HEAP32[$sblock>>2] = $329;
   }
   HEAP32[$sblock>>2] = 0;
   while(1) {
    $330 = HEAP32[$sblock>>2]|0;
    $331 = ($330|0)<(3);
    if (!($331)) {
     break;
    }
    $332 = HEAP32[$sblock>>2]|0;
    $333 = (($new_thmm) + ($332<<2)|0);
    $334 = +HEAPF32[$333>>2];
    $335 = HEAP32[$sblock>>2]|0;
    $336 = HEAP32[$sb>>2]|0;
    $337 = HEAP32[$chn>>2]|0;
    $338 = HEAP32[$psv>>2]|0;
    $339 = (($338) + 4096|0);
    $340 = (($339) + (($337*244)|0)|0);
    $341 = (($340) + 88|0);
    $342 = (($341) + (($336*12)|0)|0);
    $343 = (($342) + ($335<<2)|0);
    HEAPF32[$343>>2] = $334;
    $344 = HEAP32[$sblock>>2]|0;
    $345 = (($344) + 1)|0;
    HEAP32[$sblock>>2] = $345;
   }
   $346 = HEAP32[$sb>>2]|0;
   $347 = (($346) + 1)|0;
   HEAP32[$sb>>2] = $347;
  }
  $348 = HEAP32[$chn>>2]|0;
  $349 = (($348) + 1)|0;
  HEAP32[$chn>>2] = $349;
 }
 HEAP32[$chn>>2] = 0;
 while(1) {
  $350 = HEAP32[$chn>>2]|0;
  $351 = HEAP32[$n_chn_psy>>2]|0;
  $352 = ($350|0)<($351|0);
  if (!($352)) {
   break;
  }
  $353 = HEAP32[$chn>>2]|0;
  $354 = (($ns_attacks) + ($353<<4)|0);
  $355 = (($354) + 8|0);
  $356 = HEAP32[$355>>2]|0;
  $357 = HEAP32[$chn>>2]|0;
  $358 = HEAP32[$psv>>2]|0;
  $359 = (($358) + 6216|0);
  $360 = (($359) + ($357<<2)|0);
  HEAP32[$360>>2] = $356;
  $361 = HEAP32[$chn>>2]|0;
  $362 = (($361) + 1)|0;
  HEAP32[$chn>>2] = $362;
 }
 $363 = HEAP32[$psv>>2]|0;
 $364 = HEAP32[$cfg>>2]|0;
 $365 = (($364) + 56|0);
 $366 = HEAP32[$365>>2]|0;
 $367 = HEAP32[$8>>2]|0;
 _vbrpsy_apply_block_type($363,$366,$uselongblock,$367);
 HEAP32[$chn>>2] = 0;
 while(1) {
  $368 = HEAP32[$chn>>2]|0;
  $369 = HEAP32[$n_chn_psy>>2]|0;
  $370 = ($368|0)<($369|0);
  if (!($370)) {
   break;
  }
  $371 = HEAP32[$chn>>2]|0;
  $372 = ($371|0)>(1);
  if ($372) {
   $373 = HEAP32[$6>>2]|0;
   $374 = (($373) + -8|0);
   HEAP32[$ppe>>2] = $374;
   HEAP32[$type>>2] = 0;
   $375 = HEAP32[$8>>2]|0;
   $376 = HEAP32[$375>>2]|0;
   $377 = ($376|0)==(2);
   if ($377) {
    label = 70;
   } else {
    $378 = HEAP32[$8>>2]|0;
    $379 = (($378) + 4|0);
    $380 = HEAP32[$379>>2]|0;
    $381 = ($380|0)==(2);
    if ($381) {
     label = 70;
    }
   }
   if ((label|0) == 70) {
    label = 0;
    HEAP32[$type>>2] = 2;
   }
   $382 = HEAP32[$chn>>2]|0;
   $383 = (($382) - 2)|0;
   $384 = HEAP32[$2>>2]|0;
   $385 = HEAP32[$4>>2]|0;
   $386 = (($385) + (($384*976)|0)|0);
   $387 = (($386) + (($383*488)|0)|0);
   HEAP32[$mr>>2] = $387;
  } else {
   $388 = HEAP32[$5>>2]|0;
   HEAP32[$ppe>>2] = $388;
   $389 = HEAP32[$chn>>2]|0;
   $390 = HEAP32[$8>>2]|0;
   $391 = (($390) + ($389<<2)|0);
   $392 = HEAP32[$391>>2]|0;
   HEAP32[$type>>2] = $392;
   $393 = HEAP32[$chn>>2]|0;
   $394 = HEAP32[$2>>2]|0;
   $395 = HEAP32[$3>>2]|0;
   $396 = (($395) + (($394*976)|0)|0);
   $397 = (($396) + (($393*488)|0)|0);
   HEAP32[$mr>>2] = $397;
  }
  $398 = HEAP32[$type>>2]|0;
  $399 = ($398|0)==(2);
  $400 = HEAP32[$mr>>2]|0;
  $401 = HEAP32[$0>>2]|0;
  $402 = (($401) + 84768|0);
  $403 = (($402) + 140|0);
  $404 = +HEAPF32[$403>>2];
  if ($399) {
   $405 = (+_pecalc_s($400,$404));
   $406 = HEAP32[$chn>>2]|0;
   $407 = HEAP32[$ppe>>2]|0;
   $408 = (($407) + ($406<<2)|0);
   HEAPF32[$408>>2] = $405;
  } else {
   $409 = (+_pecalc_l($400,$404));
   $410 = HEAP32[$chn>>2]|0;
   $411 = HEAP32[$ppe>>2]|0;
   $412 = (($411) + ($410<<2)|0);
   HEAPF32[$412>>2] = $409;
  }
  $413 = HEAP32[$plt>>2]|0;
  $414 = ($413|0)!=(0|0);
  if ($414) {
   $415 = HEAP32[$chn>>2]|0;
   $416 = HEAP32[$ppe>>2]|0;
   $417 = (($416) + ($415<<2)|0);
   $418 = +HEAPF32[$417>>2];
   $419 = $418;
   $420 = HEAP32[$chn>>2]|0;
   $421 = HEAP32[$2>>2]|0;
   $422 = HEAP32[$plt>>2]|0;
   $423 = (($422) + 189240|0);
   $424 = (($423) + ($421<<5)|0);
   $425 = (($424) + ($420<<3)|0);
   HEAPF64[$425>>3] = $419;
  }
  $426 = HEAP32[$chn>>2]|0;
  $427 = (($426) + 1)|0;
  HEAP32[$chn>>2] = $427;
 }
 STACKTOP = sp;return 0;
}
function _vbrpsy_attack_detection($gfc,$buffer,$gr_out,$masking_ratio,$masking_MS_ratio,$energy,$sub_short_factor,$ns_attacks,$uselongblock) {
 $gfc = $gfc|0;
 $buffer = $buffer|0;
 $gr_out = $gr_out|0;
 $masking_ratio = $masking_ratio|0;
 $masking_MS_ratio = $masking_MS_ratio|0;
 $energy = $energy|0;
 $sub_short_factor = $sub_short_factor|0;
 $ns_attacks = $ns_attacks|0;
 $uselongblock = $uselongblock|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0.0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0.0, $162 = 0.0, $163 = 0.0, $164 = 0.0, $165 = 0, $166 = 0, $167 = 0.0, $168 = 0.0, $169 = 0.0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0.0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0.0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0.0, $2 = 0, $20 = 0, $200 = 0.0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0.0;
 var $206 = 0.0, $207 = 0.0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0.0, $218 = 0.0, $219 = 0, $22 = 0, $220 = 0.0, $221 = 0.0, $222 = 0.0, $223 = 0;
 var $224 = 0, $225 = 0.0, $226 = 0.0, $227 = 0.0, $228 = 0.0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0.0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0.0, $246 = 0.0, $247 = 0.0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0.0, $253 = 0, $254 = 0.0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0.0, $26 = 0;
 var $260 = 0.0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0.0, $266 = 0.0, $267 = 0.0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0.0, $274 = 0.0, $275 = 0.0, $276 = 0.0, $277 = 0.0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0.0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0.0, $295 = 0.0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0.0, $301 = 0.0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0.0, $307 = 0.0, $308 = 0.0, $309 = 0, $31 = 0, $310 = 0.0, $311 = 0.0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0.0, $317 = 0.0, $318 = 0.0, $319 = 0, $32 = 0, $320 = 0.0, $321 = 0.0, $322 = 0.0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0.0, $333 = 0, $334 = 0, $335 = 0.0, $336 = 0, $337 = 0, $338 = 0.0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0.0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0.0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0.0, $357 = 0.0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0.0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0.0, $382 = 0.0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0.0, $401 = 0, $402 = 0, $403 = 0.0;
 var $404 = 0.0, $405 = 0.0, $406 = 0, $407 = 0.0, $408 = 0.0, $409 = 0.0, $41 = 0, $410 = 0.0, $411 = 0, $412 = 0.0, $413 = 0.0, $414 = 0.0, $415 = 0, $416 = 0.0, $417 = 0.0, $418 = 0.0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0.0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0;
 var $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0.0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0;
 var $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0;
 var $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0;
 var $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0.0, $547 = 0, $548 = 0;
 var $549 = 0, $55 = 0.0, $550 = 0, $551 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0.0, $63 = 0.0, $64 = 0.0, $65 = 0.0, $66 = 0.0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0.0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0.0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0.0, $86 = 0.0, $87 = 0.0, $88 = 0.0;
 var $89 = 0.0, $9 = 0, $90 = 0, $91 = 0, $92 = 0.0, $93 = 0.0, $94 = 0.0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $attack_intensity = 0, $cfg = 0, $chn = 0, $en_short = 0, $en_subshort = 0, $enn = 0, $factor = 0, $firbuf = 0;
 var $i = 0, $j = 0, $l = 0, $m = 0, $n_chn_out = 0, $n_chn_psy = 0, $ns_hpfsmpl = 0, $ns_uselongblock = 0, $p = 0, $pf = 0, $pfe = 0, $plt = 0, $psv = 0, $r = 0, $sum1 = 0, $sum2 = 0, $u = 0, $v = 0, $x = 0, $x1 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 4864|0;
 $0 = sp + 4856|0;
 $1 = sp + 4852|0;
 $2 = sp + 4848|0;
 $3 = sp + 4844|0;
 $4 = sp + 4840|0;
 $5 = sp + 4836|0;
 $6 = sp + 4832|0;
 $7 = sp + 4828|0;
 $8 = sp + 4824|0;
 $ns_hpfsmpl = sp + 216|0;
 $cfg = sp + 208|0;
 $psv = sp + 204|0;
 $plt = sp + 200|0;
 $n_chn_out = sp + 196|0;
 $n_chn_psy = sp + 192|0;
 $chn = sp + 188|0;
 $i = sp + 184|0;
 $j = sp + 180|0;
 $firbuf = sp + 176|0;
 $sum1 = sp + 172|0;
 $sum2 = sp + 168|0;
 $attack_intensity = sp + 120|0;
 $en_subshort = sp + 72|0;
 $en_short = sp + 56|0;
 $pf = sp + 48|0;
 $ns_uselongblock = sp + 44|0;
 $l = sp + 40|0;
 $r = sp + 36|0;
 $pfe = sp + 32|0;
 $p = sp + 28|0;
 $enn = sp + 24|0;
 $factor = sp + 20|0;
 $x = sp + 16|0;
 $x1 = sp + 12|0;
 $u = sp + 8|0;
 $v = sp + 4|0;
 $m = sp;
 HEAP32[$0>>2] = $gfc;
 HEAP32[$1>>2] = $buffer;
 HEAP32[$2>>2] = $gr_out;
 HEAP32[$3>>2] = $masking_ratio;
 HEAP32[$4>>2] = $masking_MS_ratio;
 HEAP32[$5>>2] = $energy;
 HEAP32[$6>>2] = $sub_short_factor;
 HEAP32[$7>>2] = $ns_attacks;
 HEAP32[$8>>2] = $uselongblock;
 $9 = HEAP32[$0>>2]|0;
 $10 = (($9) + 16|0);
 HEAP32[$cfg>>2] = $10;
 $11 = HEAP32[$0>>2]|0;
 $12 = (($11) + 21564|0);
 HEAP32[$psv>>2] = $12;
 $13 = HEAP32[$cfg>>2]|0;
 $14 = (($13) + 124|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ($15|0)!=(0);
 if ($16) {
  $17 = HEAP32[$0>>2]|0;
  $18 = (($17) + 85804|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = $19;
 } else {
  $20 = 0;
 }
 HEAP32[$plt>>2] = $20;
 $21 = HEAP32[$cfg>>2]|0;
 $22 = (($21) + 56|0);
 $23 = HEAP32[$22>>2]|0;
 HEAP32[$n_chn_out>>2] = $23;
 $24 = HEAP32[$cfg>>2]|0;
 $25 = (($24) + 164|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = ($26|0)==(1);
 $28 = HEAP32[$n_chn_out>>2]|0;
 $29 = $27 ? 4 : $28;
 HEAP32[$n_chn_psy>>2] = $29;
 _memset(($ns_hpfsmpl|0),0,4608)|0;
 HEAP32[$chn>>2] = 0;
 while(1) {
  $30 = HEAP32[$chn>>2]|0;
  $31 = HEAP32[$n_chn_out>>2]|0;
  $32 = ($30|0)<($31|0);
  if (!($32)) {
   break;
  }
  $33 = HEAP32[$chn>>2]|0;
  $34 = HEAP32[$1>>2]|0;
  $35 = (($34) + ($33<<2)|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = (($36) + 1588|0);
  HEAP32[$firbuf>>2] = $37;
  HEAP32[$i>>2] = 0;
  while(1) {
   $38 = HEAP32[$i>>2]|0;
   $39 = ($38|0)<(576);
   if (!($39)) {
    break;
   }
   $40 = HEAP32[$i>>2]|0;
   $41 = (($40) + 10)|0;
   $42 = HEAP32[$firbuf>>2]|0;
   $43 = (($42) + ($41<<2)|0);
   $44 = +HEAPF32[$43>>2];
   HEAPF32[$sum1>>2] = $44;
   HEAPF32[$sum2>>2] = 0.0;
   HEAP32[$j>>2] = 0;
   while(1) {
    $45 = HEAP32[$j>>2]|0;
    $46 = ($45|0)<(9);
    if (!($46)) {
     break;
    }
    $47 = HEAP32[$j>>2]|0;
    $48 = (20992 + ($47<<2)|0);
    $49 = +HEAPF32[$48>>2];
    $50 = HEAP32[$i>>2]|0;
    $51 = HEAP32[$j>>2]|0;
    $52 = (($50) + ($51))|0;
    $53 = HEAP32[$firbuf>>2]|0;
    $54 = (($53) + ($52<<2)|0);
    $55 = +HEAPF32[$54>>2];
    $56 = HEAP32[$i>>2]|0;
    $57 = (($56) + 21)|0;
    $58 = HEAP32[$j>>2]|0;
    $59 = (($57) - ($58))|0;
    $60 = HEAP32[$firbuf>>2]|0;
    $61 = (($60) + ($59<<2)|0);
    $62 = +HEAPF32[$61>>2];
    $63 = $55 + $62;
    $64 = $49 * $63;
    $65 = +HEAPF32[$sum1>>2];
    $66 = $65 + $64;
    HEAPF32[$sum1>>2] = $66;
    $67 = HEAP32[$j>>2]|0;
    $68 = (($67) + 1)|0;
    $69 = (20992 + ($68<<2)|0);
    $70 = +HEAPF32[$69>>2];
    $71 = HEAP32[$i>>2]|0;
    $72 = HEAP32[$j>>2]|0;
    $73 = (($71) + ($72))|0;
    $74 = (($73) + 1)|0;
    $75 = HEAP32[$firbuf>>2]|0;
    $76 = (($75) + ($74<<2)|0);
    $77 = +HEAPF32[$76>>2];
    $78 = HEAP32[$i>>2]|0;
    $79 = (($78) + 21)|0;
    $80 = HEAP32[$j>>2]|0;
    $81 = (($79) - ($80))|0;
    $82 = (($81) - 1)|0;
    $83 = HEAP32[$firbuf>>2]|0;
    $84 = (($83) + ($82<<2)|0);
    $85 = +HEAPF32[$84>>2];
    $86 = $77 + $85;
    $87 = $70 * $86;
    $88 = +HEAPF32[$sum2>>2];
    $89 = $88 + $87;
    HEAPF32[$sum2>>2] = $89;
    $90 = HEAP32[$j>>2]|0;
    $91 = (($90) + 2)|0;
    HEAP32[$j>>2] = $91;
   }
   $92 = +HEAPF32[$sum1>>2];
   $93 = +HEAPF32[$sum2>>2];
   $94 = $92 + $93;
   $95 = HEAP32[$i>>2]|0;
   $96 = HEAP32[$chn>>2]|0;
   $97 = (($ns_hpfsmpl) + (($96*2304)|0)|0);
   $98 = (($97) + ($95<<2)|0);
   HEAPF32[$98>>2] = $94;
   $99 = HEAP32[$i>>2]|0;
   $100 = (($99) + 1)|0;
   HEAP32[$i>>2] = $100;
  }
  $101 = HEAP32[$chn>>2]|0;
  $102 = HEAP32[$2>>2]|0;
  $103 = HEAP32[$3>>2]|0;
  $104 = (($103) + (($102*976)|0)|0);
  $105 = (($104) + (($101*488)|0)|0);
  $106 = (($105) + 244|0);
  $107 = HEAP32[$chn>>2]|0;
  $108 = HEAP32[$psv>>2]|0;
  $109 = (($108) + 5072|0);
  $110 = (($109) + (($107*244)|0)|0);
  _memcpy(($106|0),($110|0),244)|0;
  $111 = HEAP32[$chn>>2]|0;
  $112 = HEAP32[$2>>2]|0;
  $113 = HEAP32[$3>>2]|0;
  $114 = (($113) + (($112*976)|0)|0);
  $115 = (($114) + (($111*488)|0)|0);
  $116 = HEAP32[$chn>>2]|0;
  $117 = HEAP32[$psv>>2]|0;
  $118 = (($117) + 4096|0);
  $119 = (($118) + (($116*244)|0)|0);
  _memcpy(($115|0),($119|0),244)|0;
  $120 = HEAP32[$n_chn_psy>>2]|0;
  $121 = ($120|0)>(2);
  if ($121) {
   $122 = HEAP32[$chn>>2]|0;
   $123 = HEAP32[$2>>2]|0;
   $124 = HEAP32[$4>>2]|0;
   $125 = (($124) + (($123*976)|0)|0);
   $126 = (($125) + (($122*488)|0)|0);
   $127 = (($126) + 244|0);
   $128 = HEAP32[$chn>>2]|0;
   $129 = (($128) + 2)|0;
   $130 = HEAP32[$psv>>2]|0;
   $131 = (($130) + 5072|0);
   $132 = (($131) + (($129*244)|0)|0);
   _memcpy(($127|0),($132|0),244)|0;
   $133 = HEAP32[$chn>>2]|0;
   $134 = HEAP32[$2>>2]|0;
   $135 = HEAP32[$4>>2]|0;
   $136 = (($135) + (($134*976)|0)|0);
   $137 = (($136) + (($133*488)|0)|0);
   $138 = HEAP32[$chn>>2]|0;
   $139 = (($138) + 2)|0;
   $140 = HEAP32[$psv>>2]|0;
   $141 = (($140) + 4096|0);
   $142 = (($141) + (($139*244)|0)|0);
   _memcpy(($137|0),($142|0),244)|0;
  }
  $143 = HEAP32[$chn>>2]|0;
  $144 = (($143) + 1)|0;
  HEAP32[$chn>>2] = $144;
 }
 HEAP32[$chn>>2] = 0;
 while(1) {
  $145 = HEAP32[$chn>>2]|0;
  $146 = HEAP32[$n_chn_psy>>2]|0;
  $147 = ($145|0)<($146|0);
  if (!($147)) {
   break;
  }
  ;HEAP32[$en_short+0>>2]=0|0;HEAP32[$en_short+4>>2]=0|0;HEAP32[$en_short+8>>2]=0|0;HEAP32[$en_short+12>>2]=0|0;
  $148 = HEAP32[$chn>>2]|0;
  $149 = $148 & 1;
  $150 = (($ns_hpfsmpl) + (($149*2304)|0)|0);
  HEAP32[$pf>>2] = $150;
  HEAP32[$ns_uselongblock>>2] = 1;
  $151 = HEAP32[$chn>>2]|0;
  $152 = ($151|0)==(2);
  L22: do {
   if ($152) {
    HEAP32[$i>>2] = 0;
    HEAP32[$j>>2] = 576;
    while(1) {
     $153 = HEAP32[$j>>2]|0;
     $154 = ($153|0)>(0);
     if (!($154)) {
      break L22;
     }
     $155 = HEAP32[$i>>2]|0;
     $156 = (($ns_hpfsmpl) + ($155<<2)|0);
     $157 = +HEAPF32[$156>>2];
     HEAPF32[$l>>2] = $157;
     $158 = HEAP32[$i>>2]|0;
     $159 = (($ns_hpfsmpl) + 2304|0);
     $160 = (($159) + ($158<<2)|0);
     $161 = +HEAPF32[$160>>2];
     HEAPF32[$r>>2] = $161;
     $162 = +HEAPF32[$l>>2];
     $163 = +HEAPF32[$r>>2];
     $164 = $162 + $163;
     $165 = HEAP32[$i>>2]|0;
     $166 = (($ns_hpfsmpl) + ($165<<2)|0);
     HEAPF32[$166>>2] = $164;
     $167 = +HEAPF32[$l>>2];
     $168 = +HEAPF32[$r>>2];
     $169 = $167 - $168;
     $170 = HEAP32[$i>>2]|0;
     $171 = (($ns_hpfsmpl) + 2304|0);
     $172 = (($171) + ($170<<2)|0);
     HEAPF32[$172>>2] = $169;
     $173 = HEAP32[$i>>2]|0;
     $174 = (($173) + 1)|0;
     HEAP32[$i>>2] = $174;
     $175 = HEAP32[$j>>2]|0;
     $176 = (($175) + -1)|0;
     HEAP32[$j>>2] = $176;
    }
   }
  } while(0);
  HEAP32[$i>>2] = 0;
  while(1) {
   $177 = HEAP32[$i>>2]|0;
   $178 = ($177|0)<(3);
   if (!($178)) {
    break;
   }
   $179 = HEAP32[$i>>2]|0;
   $180 = (($179) + 6)|0;
   $181 = HEAP32[$chn>>2]|0;
   $182 = HEAP32[$psv>>2]|0;
   $183 = (($182) + 6072|0);
   $184 = (($183) + (($181*36)|0)|0);
   $185 = (($184) + ($180<<2)|0);
   $186 = +HEAPF32[$185>>2];
   $187 = HEAP32[$i>>2]|0;
   $188 = (($en_subshort) + ($187<<2)|0);
   HEAPF32[$188>>2] = $186;
   $189 = HEAP32[$i>>2]|0;
   $190 = (($en_subshort) + ($189<<2)|0);
   $191 = +HEAPF32[$190>>2];
   $192 = HEAP32[$i>>2]|0;
   $193 = (($192) + 4)|0;
   $194 = HEAP32[$chn>>2]|0;
   $195 = HEAP32[$psv>>2]|0;
   $196 = (($195) + 6072|0);
   $197 = (($196) + (($194*36)|0)|0);
   $198 = (($197) + ($193<<2)|0);
   $199 = +HEAPF32[$198>>2];
   $200 = $191 / $199;
   $201 = HEAP32[$i>>2]|0;
   $202 = (($attack_intensity) + ($201<<2)|0);
   HEAPF32[$202>>2] = $200;
   $203 = HEAP32[$i>>2]|0;
   $204 = (($en_subshort) + ($203<<2)|0);
   $205 = +HEAPF32[$204>>2];
   $206 = +HEAPF32[$en_short>>2];
   $207 = $206 + $205;
   HEAPF32[$en_short>>2] = $207;
   $208 = HEAP32[$i>>2]|0;
   $209 = (($208) + 1)|0;
   HEAP32[$i>>2] = $209;
  }
  HEAP32[$i>>2] = 0;
  while(1) {
   $210 = HEAP32[$i>>2]|0;
   $211 = ($210|0)<(9);
   if (!($211)) {
    break;
   }
   $212 = HEAP32[$pf>>2]|0;
   $213 = (($212) + 256|0);
   HEAP32[$pfe>>2] = $213;
   HEAPF32[$p>>2] = 1.0;
   while(1) {
    $214 = HEAP32[$pf>>2]|0;
    $215 = HEAP32[$pfe>>2]|0;
    $216 = ($214>>>0)<($215>>>0);
    $217 = +HEAPF32[$p>>2];
    if (!($216)) {
     break;
    }
    $218 = $217;
    $219 = HEAP32[$pf>>2]|0;
    $220 = +HEAPF32[$219>>2];
    $221 = $220;
    $222 = (+Math_abs((+$221)));
    $223 = $218 < $222;
    if ($223) {
     $224 = HEAP32[$pf>>2]|0;
     $225 = +HEAPF32[$224>>2];
     $226 = $225;
     $227 = (+Math_abs((+$226)));
     $228 = $227;
     HEAPF32[$p>>2] = $228;
    }
    $229 = HEAP32[$pf>>2]|0;
    $230 = (($229) + 4|0);
    HEAP32[$pf>>2] = $230;
   }
   $231 = HEAP32[$i>>2]|0;
   $232 = (($231) + 3)|0;
   $233 = (($en_subshort) + ($232<<2)|0);
   HEAPF32[$233>>2] = $217;
   $234 = HEAP32[$i>>2]|0;
   $235 = HEAP32[$chn>>2]|0;
   $236 = HEAP32[$psv>>2]|0;
   $237 = (($236) + 6072|0);
   $238 = (($237) + (($235*36)|0)|0);
   $239 = (($238) + ($234<<2)|0);
   HEAPF32[$239>>2] = $217;
   $240 = +HEAPF32[$p>>2];
   $241 = HEAP32[$i>>2]|0;
   $242 = (($241|0) / 3)&-1;
   $243 = (1 + ($242))|0;
   $244 = (($en_short) + ($243<<2)|0);
   $245 = +HEAPF32[$244>>2];
   $246 = $245 + $240;
   HEAPF32[$244>>2] = $246;
   $247 = +HEAPF32[$p>>2];
   $248 = HEAP32[$i>>2]|0;
   $249 = (($248) + 3)|0;
   $250 = (($249) - 2)|0;
   $251 = (($en_subshort) + ($250<<2)|0);
   $252 = +HEAPF32[$251>>2];
   $253 = $247 > $252;
   do {
    if ($253) {
     $254 = +HEAPF32[$p>>2];
     $255 = HEAP32[$i>>2]|0;
     $256 = (($255) + 3)|0;
     $257 = (($256) - 2)|0;
     $258 = (($en_subshort) + ($257<<2)|0);
     $259 = +HEAPF32[$258>>2];
     $260 = $254 / $259;
     HEAPF32[$p>>2] = $260;
    } else {
     $261 = HEAP32[$i>>2]|0;
     $262 = (($261) + 3)|0;
     $263 = (($262) - 2)|0;
     $264 = (($en_subshort) + ($263<<2)|0);
     $265 = +HEAPF32[$264>>2];
     $266 = +HEAPF32[$p>>2];
     $267 = $266 * 10.0;
     $268 = $265 > $267;
     if ($268) {
      $269 = HEAP32[$i>>2]|0;
      $270 = (($269) + 3)|0;
      $271 = (($270) - 2)|0;
      $272 = (($en_subshort) + ($271<<2)|0);
      $273 = +HEAPF32[$272>>2];
      $274 = +HEAPF32[$p>>2];
      $275 = $274 * 10.0;
      $276 = $273 / $275;
      HEAPF32[$p>>2] = $276;
      break;
     } else {
      HEAPF32[$p>>2] = 0.0;
      break;
     }
    }
   } while(0);
   $277 = +HEAPF32[$p>>2];
   $278 = HEAP32[$i>>2]|0;
   $279 = (($278) + 3)|0;
   $280 = (($attack_intensity) + ($279<<2)|0);
   HEAPF32[$280>>2] = $277;
   $281 = HEAP32[$i>>2]|0;
   $282 = (($281) + 1)|0;
   HEAP32[$i>>2] = $282;
  }
  HEAP32[$i>>2] = 0;
  while(1) {
   $283 = HEAP32[$i>>2]|0;
   $284 = ($283|0)<(3);
   if (!($284)) {
    break;
   }
   $285 = HEAP32[$i>>2]|0;
   $286 = ($285*3)|0;
   $287 = (($286) + 3)|0;
   $288 = (($en_subshort) + ($287<<2)|0);
   $289 = +HEAPF32[$288>>2];
   $290 = HEAP32[$i>>2]|0;
   $291 = ($290*3)|0;
   $292 = (($291) + 4)|0;
   $293 = (($en_subshort) + ($292<<2)|0);
   $294 = +HEAPF32[$293>>2];
   $295 = $289 + $294;
   $296 = HEAP32[$i>>2]|0;
   $297 = ($296*3)|0;
   $298 = (($297) + 5)|0;
   $299 = (($en_subshort) + ($298<<2)|0);
   $300 = +HEAPF32[$299>>2];
   $301 = $295 + $300;
   HEAPF32[$enn>>2] = $301;
   HEAPF32[$factor>>2] = 1.0;
   $302 = HEAP32[$i>>2]|0;
   $303 = ($302*3)|0;
   $304 = (($303) + 5)|0;
   $305 = (($en_subshort) + ($304<<2)|0);
   $306 = +HEAPF32[$305>>2];
   $307 = $306 * 6.0;
   $308 = +HEAPF32[$enn>>2];
   $309 = $307 < $308;
   if ($309) {
    $310 = +HEAPF32[$factor>>2];
    $311 = $310 * 0.5;
    HEAPF32[$factor>>2] = $311;
    $312 = HEAP32[$i>>2]|0;
    $313 = ($312*3)|0;
    $314 = (($313) + 4)|0;
    $315 = (($en_subshort) + ($314<<2)|0);
    $316 = +HEAPF32[$315>>2];
    $317 = $316 * 6.0;
    $318 = +HEAPF32[$enn>>2];
    $319 = $317 < $318;
    if ($319) {
     $320 = +HEAPF32[$factor>>2];
     $321 = $320 * 0.5;
     HEAPF32[$factor>>2] = $321;
    }
   }
   $322 = +HEAPF32[$factor>>2];
   $323 = HEAP32[$i>>2]|0;
   $324 = HEAP32[$chn>>2]|0;
   $325 = HEAP32[$6>>2]|0;
   $326 = (($325) + (($324*12)|0)|0);
   $327 = (($326) + ($323<<2)|0);
   HEAPF32[$327>>2] = $322;
   $328 = HEAP32[$i>>2]|0;
   $329 = (($328) + 1)|0;
   HEAP32[$i>>2] = $329;
  }
  $330 = HEAP32[$plt>>2]|0;
  $331 = ($330|0)!=(0|0);
  if ($331) {
   $332 = +HEAPF32[$attack_intensity>>2];
   HEAPF32[$x>>2] = $332;
   HEAP32[$i>>2] = 1;
   while(1) {
    $333 = HEAP32[$i>>2]|0;
    $334 = ($333|0)<(12);
    if (!($334)) {
     break;
    }
    $335 = +HEAPF32[$x>>2];
    $336 = HEAP32[$i>>2]|0;
    $337 = (($attack_intensity) + ($336<<2)|0);
    $338 = +HEAPF32[$337>>2];
    $339 = $335 < $338;
    if ($339) {
     $340 = HEAP32[$i>>2]|0;
     $341 = (($attack_intensity) + ($340<<2)|0);
     $342 = +HEAPF32[$341>>2];
     HEAPF32[$x>>2] = $342;
    }
    $343 = HEAP32[$i>>2]|0;
    $344 = (($343) + 1)|0;
    HEAP32[$i>>2] = $344;
   }
   $345 = HEAP32[$chn>>2]|0;
   $346 = HEAP32[$plt>>2]|0;
   $347 = (($346) + 197112|0);
   $348 = (($347) + ($345<<3)|0);
   $349 = +HEAPF64[$348>>3];
   $350 = HEAP32[$chn>>2]|0;
   $351 = HEAP32[$2>>2]|0;
   $352 = HEAP32[$plt>>2]|0;
   $353 = (($352) + 197144|0);
   $354 = (($353) + ($351<<5)|0);
   $355 = (($354) + ($350<<3)|0);
   HEAPF64[$355>>3] = $349;
   $356 = +HEAPF32[$x>>2];
   $357 = $356;
   $358 = HEAP32[$chn>>2]|0;
   $359 = HEAP32[$plt>>2]|0;
   $360 = (($359) + 197112|0);
   $361 = (($360) + ($358<<3)|0);
   HEAPF64[$361>>3] = $357;
  }
  $362 = HEAP32[$chn>>2]|0;
  $363 = HEAP32[$0>>2]|0;
  $364 = (($363) + 85800|0);
  $365 = HEAP32[$364>>2]|0;
  $366 = (($365) + 6480|0);
  $367 = (($366) + ($362<<2)|0);
  $368 = +HEAPF32[$367>>2];
  HEAPF32[$x1>>2] = $368;
  HEAP32[$i>>2] = 0;
  while(1) {
   $369 = HEAP32[$i>>2]|0;
   $370 = ($369|0)<(12);
   if (!($370)) {
    break;
   }
   $371 = HEAP32[$i>>2]|0;
   $372 = (($371|0) / 3)&-1;
   $373 = HEAP32[$chn>>2]|0;
   $374 = HEAP32[$7>>2]|0;
   $375 = (($374) + ($373<<4)|0);
   $376 = (($375) + ($372<<2)|0);
   $377 = HEAP32[$376>>2]|0;
   $378 = ($377|0)==(0);
   if ($378) {
    $379 = HEAP32[$i>>2]|0;
    $380 = (($attack_intensity) + ($379<<2)|0);
    $381 = +HEAPF32[$380>>2];
    $382 = +HEAPF32[$x1>>2];
    $383 = $381 > $382;
    if ($383) {
     $384 = HEAP32[$i>>2]|0;
     $385 = (($384|0) % 3)&-1;
     $386 = (($385) + 1)|0;
     $387 = HEAP32[$i>>2]|0;
     $388 = (($387|0) / 3)&-1;
     $389 = HEAP32[$chn>>2]|0;
     $390 = HEAP32[$7>>2]|0;
     $391 = (($390) + ($389<<4)|0);
     $392 = (($391) + ($388<<2)|0);
     HEAP32[$392>>2] = $386;
    }
   }
   $393 = HEAP32[$i>>2]|0;
   $394 = (($393) + 1)|0;
   HEAP32[$i>>2] = $394;
  }
  HEAP32[$i>>2] = 1;
  while(1) {
   $395 = HEAP32[$i>>2]|0;
   $396 = ($395|0)<(4);
   if (!($396)) {
    break;
   }
   $397 = HEAP32[$i>>2]|0;
   $398 = (($397) - 1)|0;
   $399 = (($en_short) + ($398<<2)|0);
   $400 = +HEAPF32[$399>>2];
   HEAPF32[$u>>2] = $400;
   $401 = HEAP32[$i>>2]|0;
   $402 = (($en_short) + ($401<<2)|0);
   $403 = +HEAPF32[$402>>2];
   HEAPF32[$v>>2] = $403;
   $404 = +HEAPF32[$u>>2];
   $405 = +HEAPF32[$v>>2];
   $406 = $404 > $405;
   $407 = +HEAPF32[$u>>2];
   $408 = +HEAPF32[$v>>2];
   $409 = $406 ? $407 : $408;
   HEAPF32[$m>>2] = $409;
   $410 = +HEAPF32[$m>>2];
   $411 = $410 < 4.0E+4;
   if ($411) {
    $412 = +HEAPF32[$u>>2];
    $413 = +HEAPF32[$v>>2];
    $414 = 1.70000004768371582031 * $413;
    $415 = $412 < $414;
    if ($415) {
     $416 = +HEAPF32[$v>>2];
     $417 = +HEAPF32[$u>>2];
     $418 = 1.70000004768371582031 * $417;
     $419 = $416 < $418;
     if ($419) {
      $420 = HEAP32[$i>>2]|0;
      $421 = ($420|0)==(1);
      if ($421) {
       $422 = HEAP32[$chn>>2]|0;
       $423 = HEAP32[$7>>2]|0;
       $424 = (($423) + ($422<<4)|0);
       $425 = HEAP32[$424>>2]|0;
       $426 = HEAP32[$i>>2]|0;
       $427 = HEAP32[$chn>>2]|0;
       $428 = HEAP32[$7>>2]|0;
       $429 = (($428) + ($427<<4)|0);
       $430 = (($429) + ($426<<2)|0);
       $431 = HEAP32[$430>>2]|0;
       $432 = ($425|0)<=($431|0);
       if ($432) {
        $433 = HEAP32[$chn>>2]|0;
        $434 = HEAP32[$7>>2]|0;
        $435 = (($434) + ($433<<4)|0);
        HEAP32[$435>>2] = 0;
       }
      }
      $436 = HEAP32[$i>>2]|0;
      $437 = HEAP32[$chn>>2]|0;
      $438 = HEAP32[$7>>2]|0;
      $439 = (($438) + ($437<<4)|0);
      $440 = (($439) + ($436<<2)|0);
      HEAP32[$440>>2] = 0;
     }
    }
   }
   $441 = HEAP32[$i>>2]|0;
   $442 = (($441) + 1)|0;
   HEAP32[$i>>2] = $442;
  }
  $443 = HEAP32[$chn>>2]|0;
  $444 = HEAP32[$7>>2]|0;
  $445 = (($444) + ($443<<4)|0);
  $446 = HEAP32[$445>>2]|0;
  $447 = HEAP32[$chn>>2]|0;
  $448 = HEAP32[$psv>>2]|0;
  $449 = (($448) + 6216|0);
  $450 = (($449) + ($447<<2)|0);
  $451 = HEAP32[$450>>2]|0;
  $452 = ($446|0)<=($451|0);
  if ($452) {
   $453 = HEAP32[$chn>>2]|0;
   $454 = HEAP32[$7>>2]|0;
   $455 = (($454) + ($453<<4)|0);
   HEAP32[$455>>2] = 0;
  }
  $456 = HEAP32[$chn>>2]|0;
  $457 = HEAP32[$psv>>2]|0;
  $458 = (($457) + 6216|0);
  $459 = (($458) + ($456<<2)|0);
  $460 = HEAP32[$459>>2]|0;
  $461 = ($460|0)==(3);
  if ($461) {
   label = 69;
  } else {
   $462 = HEAP32[$chn>>2]|0;
   $463 = HEAP32[$7>>2]|0;
   $464 = (($463) + ($462<<4)|0);
   $465 = HEAP32[$464>>2]|0;
   $466 = HEAP32[$chn>>2]|0;
   $467 = HEAP32[$7>>2]|0;
   $468 = (($467) + ($466<<4)|0);
   $469 = (($468) + 4|0);
   $470 = HEAP32[$469>>2]|0;
   $471 = (($465) + ($470))|0;
   $472 = HEAP32[$chn>>2]|0;
   $473 = HEAP32[$7>>2]|0;
   $474 = (($473) + ($472<<4)|0);
   $475 = (($474) + 8|0);
   $476 = HEAP32[$475>>2]|0;
   $477 = (($471) + ($476))|0;
   $478 = HEAP32[$chn>>2]|0;
   $479 = HEAP32[$7>>2]|0;
   $480 = (($479) + ($478<<4)|0);
   $481 = (($480) + 12|0);
   $482 = HEAP32[$481>>2]|0;
   $483 = (($477) + ($482))|0;
   $484 = ($483|0)!=(0);
   if ($484) {
    label = 69;
   }
  }
  if ((label|0) == 69) {
   label = 0;
   HEAP32[$ns_uselongblock>>2] = 0;
   $485 = HEAP32[$chn>>2]|0;
   $486 = HEAP32[$7>>2]|0;
   $487 = (($486) + ($485<<4)|0);
   $488 = (($487) + 4|0);
   $489 = HEAP32[$488>>2]|0;
   $490 = ($489|0)!=(0);
   if ($490) {
    $491 = HEAP32[$chn>>2]|0;
    $492 = HEAP32[$7>>2]|0;
    $493 = (($492) + ($491<<4)|0);
    $494 = HEAP32[$493>>2]|0;
    $495 = ($494|0)!=(0);
    if ($495) {
     $496 = HEAP32[$chn>>2]|0;
     $497 = HEAP32[$7>>2]|0;
     $498 = (($497) + ($496<<4)|0);
     $499 = (($498) + 4|0);
     HEAP32[$499>>2] = 0;
    }
   }
   $500 = HEAP32[$chn>>2]|0;
   $501 = HEAP32[$7>>2]|0;
   $502 = (($501) + ($500<<4)|0);
   $503 = (($502) + 8|0);
   $504 = HEAP32[$503>>2]|0;
   $505 = ($504|0)!=(0);
   if ($505) {
    $506 = HEAP32[$chn>>2]|0;
    $507 = HEAP32[$7>>2]|0;
    $508 = (($507) + ($506<<4)|0);
    $509 = (($508) + 4|0);
    $510 = HEAP32[$509>>2]|0;
    $511 = ($510|0)!=(0);
    if ($511) {
     $512 = HEAP32[$chn>>2]|0;
     $513 = HEAP32[$7>>2]|0;
     $514 = (($513) + ($512<<4)|0);
     $515 = (($514) + 8|0);
     HEAP32[$515>>2] = 0;
    }
   }
   $516 = HEAP32[$chn>>2]|0;
   $517 = HEAP32[$7>>2]|0;
   $518 = (($517) + ($516<<4)|0);
   $519 = (($518) + 12|0);
   $520 = HEAP32[$519>>2]|0;
   $521 = ($520|0)!=(0);
   if ($521) {
    $522 = HEAP32[$chn>>2]|0;
    $523 = HEAP32[$7>>2]|0;
    $524 = (($523) + ($522<<4)|0);
    $525 = (($524) + 8|0);
    $526 = HEAP32[$525>>2]|0;
    $527 = ($526|0)!=(0);
    if ($527) {
     $528 = HEAP32[$chn>>2]|0;
     $529 = HEAP32[$7>>2]|0;
     $530 = (($529) + ($528<<4)|0);
     $531 = (($530) + 12|0);
     HEAP32[$531>>2] = 0;
    }
   }
  }
  $532 = HEAP32[$chn>>2]|0;
  $533 = ($532|0)<(2);
  $534 = HEAP32[$ns_uselongblock>>2]|0;
  if ($533) {
   $535 = HEAP32[$chn>>2]|0;
   $536 = HEAP32[$8>>2]|0;
   $537 = (($536) + ($535<<2)|0);
   HEAP32[$537>>2] = $534;
  } else {
   $538 = ($534|0)==(0);
   if ($538) {
    $539 = HEAP32[$8>>2]|0;
    $540 = (($539) + 4|0);
    HEAP32[$540>>2] = 0;
    $541 = HEAP32[$8>>2]|0;
    HEAP32[$541>>2] = 0;
   }
  }
  $542 = HEAP32[$chn>>2]|0;
  $543 = HEAP32[$psv>>2]|0;
  $544 = (($543) + 6056|0);
  $545 = (($544) + ($542<<2)|0);
  $546 = +HEAPF32[$545>>2];
  $547 = HEAP32[$chn>>2]|0;
  $548 = HEAP32[$5>>2]|0;
  $549 = (($548) + ($547<<2)|0);
  HEAPF32[$549>>2] = $546;
  $550 = HEAP32[$chn>>2]|0;
  $551 = (($550) + 1)|0;
  HEAP32[$chn>>2] = $551;
 }
 STACKTOP = sp;return;
}
function _vbrpsy_compute_block_type($cfg,$uselongblock) {
 $cfg = $cfg|0;
 $uselongblock = $uselongblock|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $chn = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp + 8|0;
 $1 = sp + 4|0;
 $chn = sp;
 HEAP32[$0>>2] = $cfg;
 HEAP32[$1>>2] = $uselongblock;
 $2 = HEAP32[$0>>2]|0;
 $3 = (($2) + 168|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(1);
 do {
  if ($5) {
   $6 = HEAP32[$1>>2]|0;
   $7 = HEAP32[$6>>2]|0;
   $8 = ($7|0)!=(0);
   if ($8) {
    $9 = HEAP32[$1>>2]|0;
    $10 = (($9) + 4|0);
    $11 = HEAP32[$10>>2]|0;
    $12 = ($11|0)!=(0);
    if ($12) {
     break;
    }
   }
   $13 = HEAP32[$1>>2]|0;
   $14 = (($13) + 4|0);
   HEAP32[$14>>2] = 0;
   $15 = HEAP32[$1>>2]|0;
   HEAP32[$15>>2] = 0;
  }
 } while(0);
 HEAP32[$chn>>2] = 0;
 while(1) {
  $16 = HEAP32[$chn>>2]|0;
  $17 = HEAP32[$0>>2]|0;
  $18 = (($17) + 56|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = ($16|0)<($19|0);
  if (!($20)) {
   break;
  }
  $21 = HEAP32[$0>>2]|0;
  $22 = (($21) + 168|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = ($23|0)==(2);
  if ($24) {
   $25 = HEAP32[$chn>>2]|0;
   $26 = HEAP32[$1>>2]|0;
   $27 = (($26) + ($25<<2)|0);
   HEAP32[$27>>2] = 1;
  }
  $28 = HEAP32[$0>>2]|0;
  $29 = (($28) + 168|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = ($30|0)==(3);
  if ($31) {
   $32 = HEAP32[$chn>>2]|0;
   $33 = HEAP32[$1>>2]|0;
   $34 = (($33) + ($32<<2)|0);
   HEAP32[$34>>2] = 0;
  }
  $35 = HEAP32[$chn>>2]|0;
  $36 = (($35) + 1)|0;
  HEAP32[$chn>>2] = $36;
 }
 STACKTOP = sp;return;
}
function _vbrpsy_compute_fft_l($gfc,$buffer,$chn,$gr_out,$fftenergy,$wsamp_l) {
 $gfc = $gfc|0;
 $buffer = $buffer|0;
 $chn = $chn|0;
 $gr_out = $gr_out|0;
 $fftenergy = $fftenergy|0;
 $wsamp_l = $wsamp_l|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0.0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0.0, $126 = 0.0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0.0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0, $42 = 0, $43 = 0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0.0, $56 = 0, $57 = 0, $58 = 0.0, $59 = 0, $6 = 0, $60 = 0.0, $61 = 0.0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0.0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0.0, $74 = 0.0, $75 = 0.0, $76 = 0.0, $77 = 0.0, $78 = 0.0, $79 = 0.0, $8 = 0, $80 = 0.0, $81 = 0.0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0.0, $94 = 0.0, $95 = 0.0, $96 = 0, $97 = 0, $98 = 0.0, $99 = 0, $cfg = 0, $im = 0, $j = 0, $l = 0, $plt = 0;
 var $psv = 0, $r = 0, $re = 0, $sqrt2_half = 0, $totalenergy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $0 = sp + 60|0;
 $1 = sp + 56|0;
 $2 = sp + 52|0;
 $3 = sp + 48|0;
 $4 = sp + 44|0;
 $5 = sp + 40|0;
 $cfg = sp + 36|0;
 $psv = sp + 32|0;
 $plt = sp + 28|0;
 $j = sp + 24|0;
 $sqrt2_half = sp + 20|0;
 $l = sp + 16|0;
 $r = sp + 12|0;
 $re = sp + 8|0;
 $im = sp + 4|0;
 $totalenergy = sp;
 HEAP32[$0>>2] = $gfc;
 HEAP32[$1>>2] = $buffer;
 HEAP32[$2>>2] = $chn;
 HEAP32[$3>>2] = $gr_out;
 HEAP32[$4>>2] = $fftenergy;
 HEAP32[$5>>2] = $wsamp_l;
 $6 = HEAP32[$0>>2]|0;
 $7 = (($6) + 16|0);
 HEAP32[$cfg>>2] = $7;
 $8 = HEAP32[$0>>2]|0;
 $9 = (($8) + 21564|0);
 HEAP32[$psv>>2] = $9;
 $10 = HEAP32[$cfg>>2]|0;
 $11 = (($10) + 124|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($12|0)!=(0);
 if ($13) {
  $14 = HEAP32[$0>>2]|0;
  $15 = (($14) + 85804|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = $16;
 } else {
  $17 = 0;
 }
 HEAP32[$plt>>2] = $17;
 $18 = HEAP32[$2>>2]|0;
 $19 = ($18|0)<(2);
 L4: do {
  if ($19) {
   $20 = HEAP32[$0>>2]|0;
   $21 = HEAP32[$5>>2]|0;
   $22 = HEAP32[$2>>2]|0;
   $23 = HEAP32[$1>>2]|0;
   _fft_long($20,$21,$22,$23);
  } else {
   $24 = HEAP32[$2>>2]|0;
   $25 = ($24|0)==(2);
   if ($25) {
    HEAPF32[$sqrt2_half>>2] = 0.707106769084930419921;
    HEAP32[$j>>2] = 1023;
    while(1) {
     $26 = HEAP32[$j>>2]|0;
     $27 = ($26|0)>=(0);
     if (!($27)) {
      break L4;
     }
     $28 = HEAP32[$j>>2]|0;
     $29 = HEAP32[$5>>2]|0;
     $30 = (($29) + ($28<<2)|0);
     $31 = +HEAPF32[$30>>2];
     HEAPF32[$l>>2] = $31;
     $32 = HEAP32[$j>>2]|0;
     $33 = HEAP32[$5>>2]|0;
     $34 = (($33) + 4096|0);
     $35 = (($34) + ($32<<2)|0);
     $36 = +HEAPF32[$35>>2];
     HEAPF32[$r>>2] = $36;
     $37 = +HEAPF32[$l>>2];
     $38 = +HEAPF32[$r>>2];
     $39 = $37 + $38;
     $40 = $39 * 0.707106769084930419921;
     $41 = HEAP32[$j>>2]|0;
     $42 = HEAP32[$5>>2]|0;
     $43 = (($42) + ($41<<2)|0);
     HEAPF32[$43>>2] = $40;
     $44 = +HEAPF32[$l>>2];
     $45 = +HEAPF32[$r>>2];
     $46 = $44 - $45;
     $47 = $46 * 0.707106769084930419921;
     $48 = HEAP32[$j>>2]|0;
     $49 = HEAP32[$5>>2]|0;
     $50 = (($49) + 4096|0);
     $51 = (($50) + ($48<<2)|0);
     HEAPF32[$51>>2] = $47;
     $52 = HEAP32[$j>>2]|0;
     $53 = (($52) + -1)|0;
     HEAP32[$j>>2] = $53;
    }
   }
  }
 } while(0);
 $54 = HEAP32[$5>>2]|0;
 $55 = +HEAPF32[$54>>2];
 $56 = HEAP32[$4>>2]|0;
 HEAPF32[$56>>2] = $55;
 $57 = HEAP32[$4>>2]|0;
 $58 = +HEAPF32[$57>>2];
 $59 = HEAP32[$4>>2]|0;
 $60 = +HEAPF32[$59>>2];
 $61 = $60 * $58;
 HEAPF32[$59>>2] = $61;
 HEAP32[$j>>2] = 511;
 while(1) {
  $62 = HEAP32[$j>>2]|0;
  $63 = ($62|0)>=(0);
  if (!($63)) {
   break;
  }
  $64 = HEAP32[$j>>2]|0;
  $65 = (512 - ($64))|0;
  $66 = HEAP32[$5>>2]|0;
  $67 = (($66) + ($65<<2)|0);
  $68 = +HEAPF32[$67>>2];
  HEAPF32[$re>>2] = $68;
  $69 = HEAP32[$j>>2]|0;
  $70 = (512 + ($69))|0;
  $71 = HEAP32[$5>>2]|0;
  $72 = (($71) + ($70<<2)|0);
  $73 = +HEAPF32[$72>>2];
  HEAPF32[$im>>2] = $73;
  $74 = +HEAPF32[$re>>2];
  $75 = +HEAPF32[$re>>2];
  $76 = $74 * $75;
  $77 = +HEAPF32[$im>>2];
  $78 = +HEAPF32[$im>>2];
  $79 = $77 * $78;
  $80 = $76 + $79;
  $81 = $80 * 0.5;
  $82 = HEAP32[$j>>2]|0;
  $83 = (512 - ($82))|0;
  $84 = HEAP32[$4>>2]|0;
  $85 = (($84) + ($83<<2)|0);
  HEAPF32[$85>>2] = $81;
  $86 = HEAP32[$j>>2]|0;
  $87 = (($86) + -1)|0;
  HEAP32[$j>>2] = $87;
 }
 HEAPF32[$totalenergy>>2] = 0.0;
 HEAP32[$j>>2] = 11;
 while(1) {
  $88 = HEAP32[$j>>2]|0;
  $89 = ($88|0)<(513);
  if (!($89)) {
   break;
  }
  $90 = HEAP32[$j>>2]|0;
  $91 = HEAP32[$4>>2]|0;
  $92 = (($91) + ($90<<2)|0);
  $93 = +HEAPF32[$92>>2];
  $94 = +HEAPF32[$totalenergy>>2];
  $95 = $94 + $93;
  HEAPF32[$totalenergy>>2] = $95;
  $96 = HEAP32[$j>>2]|0;
  $97 = (($96) + 1)|0;
  HEAP32[$j>>2] = $97;
 }
 $98 = +HEAPF32[$totalenergy>>2];
 $99 = HEAP32[$2>>2]|0;
 $100 = HEAP32[$psv>>2]|0;
 $101 = (($100) + 6056|0);
 $102 = (($101) + ($99<<2)|0);
 HEAPF32[$102>>2] = $98;
 $103 = HEAP32[$plt>>2]|0;
 $104 = ($103|0)!=(0|0);
 if (!($104)) {
  STACKTOP = sp;return;
 }
 HEAP32[$j>>2] = 0;
 while(1) {
  $105 = HEAP32[$j>>2]|0;
  $106 = ($105|0)<(513);
  if (!($106)) {
   break;
  }
  $107 = HEAP32[$j>>2]|0;
  $108 = HEAP32[$2>>2]|0;
  $109 = HEAP32[$plt>>2]|0;
  $110 = (($109) + 90936|0);
  $111 = (($110) + ($108<<13)|0);
  $112 = (($111) + ($107<<3)|0);
  $113 = +HEAPF64[$112>>3];
  $114 = HEAP32[$j>>2]|0;
  $115 = HEAP32[$2>>2]|0;
  $116 = HEAP32[$3>>2]|0;
  $117 = HEAP32[$plt>>2]|0;
  $118 = (($117) + 123704|0);
  $119 = (($118) + ($116<<15)|0);
  $120 = (($119) + ($115<<13)|0);
  $121 = (($120) + ($114<<3)|0);
  HEAPF64[$121>>3] = $113;
  $122 = HEAP32[$j>>2]|0;
  $123 = HEAP32[$4>>2]|0;
  $124 = (($123) + ($122<<2)|0);
  $125 = +HEAPF32[$124>>2];
  $126 = $125;
  $127 = HEAP32[$j>>2]|0;
  $128 = HEAP32[$2>>2]|0;
  $129 = HEAP32[$plt>>2]|0;
  $130 = (($129) + 90936|0);
  $131 = (($130) + ($128<<13)|0);
  $132 = (($131) + ($127<<3)|0);
  HEAPF64[$132>>3] = $126;
  $133 = HEAP32[$j>>2]|0;
  $134 = (($133) + 1)|0;
  HEAP32[$j>>2] = $134;
 }
 STACKTOP = sp;return;
}
function _vbrpsy_compute_loudness_approximation_l($gfc,$gr_out,$chn,$fftenergy) {
 $gfc = $gfc|0;
 $gr_out = $gr_out|0;
 $chn = $chn|0;
 $fftenergy = $fftenergy|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0.0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0.0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $psv = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = sp + 16|0;
 $1 = sp + 12|0;
 $2 = sp + 8|0;
 $3 = sp + 4|0;
 $psv = sp;
 HEAP32[$0>>2] = $gfc;
 HEAP32[$1>>2] = $gr_out;
 HEAP32[$2>>2] = $chn;
 HEAP32[$3>>2] = $fftenergy;
 $4 = HEAP32[$0>>2]|0;
 $5 = (($4) + 21564|0);
 HEAP32[$psv>>2] = $5;
 $6 = HEAP32[$2>>2]|0;
 $7 = ($6|0)<(2);
 if (!($7)) {
  STACKTOP = sp;return;
 }
 $8 = HEAP32[$2>>2]|0;
 $9 = HEAP32[$psv>>2]|0;
 $10 = (($9) + 6048|0);
 $11 = (($10) + ($8<<2)|0);
 $12 = +HEAPF32[$11>>2];
 $13 = HEAP32[$2>>2]|0;
 $14 = HEAP32[$1>>2]|0;
 $15 = HEAP32[$0>>2]|0;
 $16 = (($15) + 27804|0);
 $17 = (($16) + ($14<<3)|0);
 $18 = (($17) + ($13<<2)|0);
 HEAPF32[$18>>2] = $12;
 $19 = HEAP32[$3>>2]|0;
 $20 = HEAP32[$0>>2]|0;
 $21 = (($20) + 85796|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = (($22) + 724|0);
 $24 = (+_psycho_loudness_approx($19,$23));
 $25 = HEAP32[$2>>2]|0;
 $26 = HEAP32[$psv>>2]|0;
 $27 = (($26) + 6048|0);
 $28 = (($27) + ($25<<2)|0);
 HEAPF32[$28>>2] = $24;
 STACKTOP = sp;return;
}
function _vbrpsy_compute_masking_l($gfc,$fftenergy,$eb_l,$thr,$chn) {
 $gfc = $gfc|0;
 $fftenergy = $fftenergy|0;
 $eb_l = $eb_l|0;
 $thr = $thr|0;
 $chn = $chn|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0.0, $101 = 0.0, $102 = 0.0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0.0, $108 = 0.0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0.0, $122 = 0.0, $123 = 0.0, $124 = 0.0, $125 = 0.0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0.0, $139 = 0.0, $14 = 0, $140 = 0.0, $141 = 0, $142 = 0.0, $143 = 0.0, $144 = 0, $145 = 0.0, $146 = 0.0, $147 = 0.0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0.0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0.0, $156 = 0.0, $157 = 0.0, $158 = 0, $159 = 0.0, $16 = 0, $160 = 0.0, $161 = 0, $162 = 0, $163 = 0, $164 = 0.0, $165 = 0.0, $166 = 0.0, $167 = 0.0, $168 = 0.0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0.0, $176 = 0.0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0.0, $183 = 0.0, $184 = 0.0, $185 = 0, $186 = 0.0, $187 = 0.0, $188 = 0;
 var $189 = 0.0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0.0, $198 = 0.0, $199 = 0, $2 = 0, $20 = 0, $200 = 0.0, $201 = 0.0, $202 = 0.0, $203 = 0.0, $204 = 0.0, $205 = 0;
 var $206 = 0.0, $207 = 0.0, $208 = 0.0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0.0, $218 = 0, $219 = 0, $22 = 0.0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0.0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0.0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0.0, $238 = 0.0, $239 = 0.0, $24 = 0, $240 = 0.0, $241 = 0.0;
 var $242 = 0.0, $243 = 0, $244 = 0, $245 = 0, $246 = 0.0, $247 = 0.0, $248 = 0, $249 = 0.0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0.0, $254 = 0, $255 = 0.0, $256 = 0, $257 = 0, $258 = 0, $259 = 0.0, $26 = 0.0;
 var $260 = 0.0, $261 = 0, $262 = 0, $263 = 0, $264 = 0.0, $265 = 0, $266 = 0, $267 = 0, $268 = 0.0, $269 = 0, $27 = 0.0, $270 = 0, $271 = 0, $272 = 0, $273 = 0.0, $274 = 0, $275 = 0, $276 = 0, $277 = 0.0, $278 = 0;
 var $279 = 0.0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0.0, $284 = 0.0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0.0, $56 = 0, $57 = 0, $58 = 0, $59 = 0.0, $6 = 0, $60 = 0.0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0.0, $67 = 0.0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0.0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0.0, $93 = 0.0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0.0, $avg = 0, $avg_mask = 0, $b = 0;
 var $dd = 0, $dd_n = 0, $delta = 0, $ecb = 0, $ecb_limit = 0, $ecb_limit1 = 0, $ecb_limit_1 = 0, $ecb_limit_2 = 0, $gdl = 0, $k = 0, $kk = 0, $last = 0, $mask_idx_l = 0, $masking_lower = 0, $max = 0, $psv = 0, $t = 0, $x = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 672|0;
 $0 = sp + 600|0;
 $1 = sp + 596|0;
 $2 = sp + 592|0;
 $3 = sp + 588|0;
 $4 = sp + 584|0;
 $psv = sp + 580|0;
 $gdl = sp + 576|0;
 $max = sp + 320|0;
 $avg = sp + 64|0;
 $mask_idx_l = sp + 604|0;
 $k = sp + 60|0;
 $b = sp + 56|0;
 $x = sp + 52|0;
 $ecb = sp + 48|0;
 $avg_mask = sp + 44|0;
 $t = sp + 40|0;
 $masking_lower = sp + 36|0;
 $kk = sp + 32|0;
 $last = sp + 28|0;
 $delta = sp + 24|0;
 $dd = sp + 20|0;
 $dd_n = sp + 16|0;
 $ecb_limit = sp + 12|0;
 $ecb_limit_2 = sp + 8|0;
 $ecb_limit_1 = sp + 4|0;
 $ecb_limit1 = sp;
 HEAP32[$0>>2] = $gfc;
 HEAP32[$1>>2] = $fftenergy;
 HEAP32[$2>>2] = $eb_l;
 HEAP32[$3>>2] = $thr;
 HEAP32[$4>>2] = $chn;
 $5 = HEAP32[$0>>2]|0;
 $6 = (($5) + 21564|0);
 HEAP32[$psv>>2] = $6;
 $7 = HEAP32[$0>>2]|0;
 $8 = (($7) + 85800|0);
 $9 = HEAP32[$8>>2]|0;
 HEAP32[$gdl>>2] = $9;
 $10 = HEAP32[$gdl>>2]|0;
 $11 = HEAP32[$1>>2]|0;
 $12 = HEAP32[$2>>2]|0;
 _calc_energy($10,$11,$12,$max,$avg);
 $13 = HEAP32[$0>>2]|0;
 _calc_mask_index_l($13,$max,$avg,$mask_idx_l);
 HEAP32[$k>>2] = 0;
 HEAP32[$b>>2] = 0;
 while(1) {
  $14 = HEAP32[$b>>2]|0;
  $15 = HEAP32[$gdl>>2]|0;
  $16 = (($15) + 2148|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = ($14|0)<($17|0);
  if (!($18)) {
   break;
  }
  $19 = HEAP32[$b>>2]|0;
  $20 = HEAP32[$gdl>>2]|0;
  $21 = (($20) + ($19<<2)|0);
  $22 = +HEAPF32[$21>>2];
  $23 = HEAP32[$0>>2]|0;
  $24 = (($23) + 84768|0);
  $25 = (($24) + 140|0);
  $26 = +HEAPF32[$25>>2];
  $27 = $22 * $26;
  HEAPF32[$masking_lower>>2] = $27;
  $28 = HEAP32[$b>>2]|0;
  $29 = HEAP32[$gdl>>2]|0;
  $30 = (($29) + 1204|0);
  $31 = (($30) + ($28<<3)|0);
  $32 = HEAP32[$31>>2]|0;
  HEAP32[$kk>>2] = $32;
  $33 = HEAP32[$b>>2]|0;
  $34 = HEAP32[$gdl>>2]|0;
  $35 = (($34) + 1204|0);
  $36 = (($35) + ($33<<3)|0);
  $37 = (($36) + 4|0);
  $38 = HEAP32[$37>>2]|0;
  HEAP32[$last>>2] = $38;
  $39 = HEAP32[$b>>2]|0;
  $40 = (($mask_idx_l) + ($39)|0);
  $41 = HEAP8[$40>>0]|0;
  $42 = $41&255;
  $43 = (_mask_add_delta($42)|0);
  HEAP32[$delta>>2] = $43;
  HEAP32[$dd>>2] = 0;
  HEAP32[$dd_n>>2] = 0;
  $44 = HEAP32[$kk>>2]|0;
  $45 = (($mask_idx_l) + ($44)|0);
  $46 = HEAP8[$45>>0]|0;
  $47 = $46&255;
  HEAP32[$dd>>2] = $47;
  $48 = HEAP32[$dd_n>>2]|0;
  $49 = (($48) + 1)|0;
  HEAP32[$dd_n>>2] = $49;
  $50 = HEAP32[$k>>2]|0;
  $51 = HEAP32[$gdl>>2]|0;
  $52 = (($51) + 2156|0);
  $53 = HEAP32[$52>>2]|0;
  $54 = (($53) + ($50<<2)|0);
  $55 = +HEAPF32[$54>>2];
  $56 = HEAP32[$kk>>2]|0;
  $57 = HEAP32[$2>>2]|0;
  $58 = (($57) + ($56<<2)|0);
  $59 = +HEAPF32[$58>>2];
  $60 = $55 * $59;
  $61 = HEAP32[$kk>>2]|0;
  $62 = (($mask_idx_l) + ($61)|0);
  $63 = HEAP8[$62>>0]|0;
  $64 = $63&255;
  $65 = (20872 + ($64<<2)|0);
  $66 = +HEAPF32[$65>>2];
  $67 = $60 * $66;
  HEAPF32[$ecb>>2] = $67;
  $68 = HEAP32[$k>>2]|0;
  $69 = (($68) + 1)|0;
  HEAP32[$k>>2] = $69;
  $70 = HEAP32[$kk>>2]|0;
  $71 = (($70) + 1)|0;
  HEAP32[$kk>>2] = $71;
  while(1) {
   $72 = HEAP32[$kk>>2]|0;
   $73 = HEAP32[$last>>2]|0;
   $74 = ($72|0)<=($73|0);
   if (!($74)) {
    break;
   }
   $75 = HEAP32[$kk>>2]|0;
   $76 = (($mask_idx_l) + ($75)|0);
   $77 = HEAP8[$76>>0]|0;
   $78 = $77&255;
   $79 = HEAP32[$dd>>2]|0;
   $80 = (($79) + ($78))|0;
   HEAP32[$dd>>2] = $80;
   $81 = HEAP32[$dd_n>>2]|0;
   $82 = (($81) + 1)|0;
   HEAP32[$dd_n>>2] = $82;
   $83 = HEAP32[$k>>2]|0;
   $84 = HEAP32[$gdl>>2]|0;
   $85 = (($84) + 2156|0);
   $86 = HEAP32[$85>>2]|0;
   $87 = (($86) + ($83<<2)|0);
   $88 = +HEAPF32[$87>>2];
   $89 = HEAP32[$kk>>2]|0;
   $90 = HEAP32[$2>>2]|0;
   $91 = (($90) + ($89<<2)|0);
   $92 = +HEAPF32[$91>>2];
   $93 = $88 * $92;
   $94 = HEAP32[$kk>>2]|0;
   $95 = (($mask_idx_l) + ($94)|0);
   $96 = HEAP8[$95>>0]|0;
   $97 = $96&255;
   $98 = (20872 + ($97<<2)|0);
   $99 = +HEAPF32[$98>>2];
   $100 = $93 * $99;
   HEAPF32[$x>>2] = $100;
   $101 = +HEAPF32[$ecb>>2];
   $102 = +HEAPF32[$x>>2];
   $103 = HEAP32[$kk>>2]|0;
   $104 = HEAP32[$b>>2]|0;
   $105 = (($103) - ($104))|0;
   $106 = HEAP32[$delta>>2]|0;
   $107 = (+_vbrpsy_mask_add($101,$102,$105,$106));
   HEAPF32[$t>>2] = $107;
   $108 = +HEAPF32[$t>>2];
   HEAPF32[$ecb>>2] = $108;
   $109 = HEAP32[$k>>2]|0;
   $110 = (($109) + 1)|0;
   HEAP32[$k>>2] = $110;
   $111 = HEAP32[$kk>>2]|0;
   $112 = (($111) + 1)|0;
   HEAP32[$kk>>2] = $112;
  }
  $113 = HEAP32[$dd>>2]|0;
  $114 = $113<<1;
  $115 = (1 + ($114))|0;
  $116 = HEAP32[$dd_n>>2]|0;
  $117 = $116<<1;
  $118 = (($115|0) / ($117|0))&-1;
  HEAP32[$dd>>2] = $118;
  $119 = HEAP32[$dd>>2]|0;
  $120 = (20872 + ($119<<2)|0);
  $121 = +HEAPF32[$120>>2];
  $122 = $121 * 0.5;
  HEAPF32[$avg_mask>>2] = $122;
  $123 = +HEAPF32[$avg_mask>>2];
  $124 = +HEAPF32[$ecb>>2];
  $125 = $124 * $123;
  HEAPF32[$ecb>>2] = $125;
  $126 = HEAP32[$4>>2]|0;
  $127 = $126 & 1;
  $128 = HEAP32[$psv>>2]|0;
  $129 = (($128) + 6232|0);
  $130 = (($129) + ($127<<2)|0);
  $131 = HEAP32[$130>>2]|0;
  $132 = ($131|0)==(2);
  $133 = HEAP32[$b>>2]|0;
  $134 = HEAP32[$4>>2]|0;
  $135 = HEAP32[$psv>>2]|0;
  do {
   if ($132) {
    $136 = (($135) + ($134<<8)|0);
    $137 = (($136) + ($133<<2)|0);
    $138 = +HEAPF32[$137>>2];
    $139 = 2.0 * $138;
    HEAPF32[$ecb_limit>>2] = $139;
    $140 = +HEAPF32[$ecb_limit>>2];
    $141 = $140 > 0.0;
    $142 = +HEAPF32[$ecb>>2];
    if ($141) {
     $143 = +HEAPF32[$ecb_limit>>2];
     $144 = $142 < $143;
     $145 = +HEAPF32[$ecb>>2];
     $146 = +HEAPF32[$ecb_limit>>2];
     $147 = $144 ? $145 : $146;
     $148 = HEAP32[$b>>2]|0;
     $149 = HEAP32[$3>>2]|0;
     $150 = (($149) + ($148<<2)|0);
     HEAPF32[$150>>2] = $147;
     break;
    }
    $151 = $142;
    $152 = HEAP32[$b>>2]|0;
    $153 = HEAP32[$2>>2]|0;
    $154 = (($153) + ($152<<2)|0);
    $155 = +HEAPF32[$154>>2];
    $156 = $155;
    $157 = $156 * 0.299999999999999988898;
    $158 = $151 < $157;
    if ($158) {
     $159 = +HEAPF32[$ecb>>2];
     $160 = $159;
     $168 = $160;
    } else {
     $161 = HEAP32[$b>>2]|0;
     $162 = HEAP32[$2>>2]|0;
     $163 = (($162) + ($161<<2)|0);
     $164 = +HEAPF32[$163>>2];
     $165 = $164;
     $166 = $165 * 0.299999999999999988898;
     $168 = $166;
    }
    $167 = $168;
    $169 = HEAP32[$b>>2]|0;
    $170 = HEAP32[$3>>2]|0;
    $171 = (($170) + ($169<<2)|0);
    HEAPF32[$171>>2] = $167;
   } else {
    $172 = (($135) + 1024|0);
    $173 = (($172) + ($134<<8)|0);
    $174 = (($173) + ($133<<2)|0);
    $175 = +HEAPF32[$174>>2];
    $176 = 16.0 * $175;
    HEAPF32[$ecb_limit_2>>2] = $176;
    $177 = HEAP32[$b>>2]|0;
    $178 = HEAP32[$4>>2]|0;
    $179 = HEAP32[$psv>>2]|0;
    $180 = (($179) + ($178<<8)|0);
    $181 = (($180) + ($177<<2)|0);
    $182 = +HEAPF32[$181>>2];
    $183 = 2.0 * $182;
    HEAPF32[$ecb_limit_1>>2] = $183;
    $184 = +HEAPF32[$ecb_limit_2>>2];
    $185 = $184 <= 0.0;
    if ($185) {
     $186 = +HEAPF32[$ecb>>2];
     HEAPF32[$ecb_limit_2>>2] = $186;
    }
    $187 = +HEAPF32[$ecb_limit_1>>2];
    $188 = $187 <= 0.0;
    if ($188) {
     $189 = +HEAPF32[$ecb>>2];
     HEAPF32[$ecb_limit_1>>2] = $189;
    }
    $190 = HEAP32[$4>>2]|0;
    $191 = $190 & 1;
    $192 = HEAP32[$psv>>2]|0;
    $193 = (($192) + 6232|0);
    $194 = (($193) + ($191<<2)|0);
    $195 = HEAP32[$194>>2]|0;
    $196 = ($195|0)==(0);
    $197 = +HEAPF32[$ecb_limit_1>>2];
    if ($196) {
     $198 = +HEAPF32[$ecb_limit_2>>2];
     $199 = $197 < $198;
     $200 = +HEAPF32[$ecb_limit_1>>2];
     $201 = +HEAPF32[$ecb_limit_2>>2];
     $202 = $199 ? $200 : $201;
     HEAPF32[$ecb_limit1>>2] = $202;
    } else {
     HEAPF32[$ecb_limit1>>2] = $197;
    }
    $203 = +HEAPF32[$ecb>>2];
    $204 = +HEAPF32[$ecb_limit1>>2];
    $205 = $203 < $204;
    $206 = +HEAPF32[$ecb>>2];
    $207 = +HEAPF32[$ecb_limit1>>2];
    $208 = $205 ? $206 : $207;
    $209 = HEAP32[$b>>2]|0;
    $210 = HEAP32[$3>>2]|0;
    $211 = (($210) + ($209<<2)|0);
    HEAPF32[$211>>2] = $208;
   }
  } while(0);
  $212 = HEAP32[$b>>2]|0;
  $213 = HEAP32[$4>>2]|0;
  $214 = HEAP32[$psv>>2]|0;
  $215 = (($214) + ($213<<8)|0);
  $216 = (($215) + ($212<<2)|0);
  $217 = +HEAPF32[$216>>2];
  $218 = HEAP32[$b>>2]|0;
  $219 = HEAP32[$4>>2]|0;
  $220 = HEAP32[$psv>>2]|0;
  $221 = (($220) + 1024|0);
  $222 = (($221) + ($219<<8)|0);
  $223 = (($222) + ($218<<2)|0);
  HEAPF32[$223>>2] = $217;
  $224 = +HEAPF32[$ecb>>2];
  $225 = HEAP32[$b>>2]|0;
  $226 = HEAP32[$4>>2]|0;
  $227 = HEAP32[$psv>>2]|0;
  $228 = (($227) + ($226<<8)|0);
  $229 = (($228) + ($225<<2)|0);
  HEAPF32[$229>>2] = $224;
  $230 = HEAP32[$b>>2]|0;
  $231 = (($max) + ($230<<2)|0);
  $232 = +HEAPF32[$231>>2];
  HEAPF32[$x>>2] = $232;
  $233 = HEAP32[$b>>2]|0;
  $234 = HEAP32[$gdl>>2]|0;
  $235 = (($234) + 256|0);
  $236 = (($235) + ($233<<2)|0);
  $237 = +HEAPF32[$236>>2];
  $238 = +HEAPF32[$x>>2];
  $239 = $238 * $237;
  HEAPF32[$x>>2] = $239;
  $240 = +HEAPF32[$avg_mask>>2];
  $241 = +HEAPF32[$x>>2];
  $242 = $241 * $240;
  HEAPF32[$x>>2] = $242;
  $243 = HEAP32[$b>>2]|0;
  $244 = HEAP32[$3>>2]|0;
  $245 = (($244) + ($243<<2)|0);
  $246 = +HEAPF32[$245>>2];
  $247 = +HEAPF32[$x>>2];
  $248 = $246 > $247;
  if ($248) {
   $249 = +HEAPF32[$x>>2];
   $250 = HEAP32[$b>>2]|0;
   $251 = HEAP32[$3>>2]|0;
   $252 = (($251) + ($250<<2)|0);
   HEAPF32[$252>>2] = $249;
  }
  $253 = +HEAPF32[$masking_lower>>2];
  $254 = $253 > 1.0;
  if ($254) {
   $255 = +HEAPF32[$masking_lower>>2];
   $256 = HEAP32[$b>>2]|0;
   $257 = HEAP32[$3>>2]|0;
   $258 = (($257) + ($256<<2)|0);
   $259 = +HEAPF32[$258>>2];
   $260 = $259 * $255;
   HEAPF32[$258>>2] = $260;
  }
  $261 = HEAP32[$b>>2]|0;
  $262 = HEAP32[$3>>2]|0;
  $263 = (($262) + ($261<<2)|0);
  $264 = +HEAPF32[$263>>2];
  $265 = HEAP32[$b>>2]|0;
  $266 = HEAP32[$2>>2]|0;
  $267 = (($266) + ($265<<2)|0);
  $268 = +HEAPF32[$267>>2];
  $269 = $264 > $268;
  if ($269) {
   $270 = HEAP32[$b>>2]|0;
   $271 = HEAP32[$2>>2]|0;
   $272 = (($271) + ($270<<2)|0);
   $273 = +HEAPF32[$272>>2];
   $274 = HEAP32[$b>>2]|0;
   $275 = HEAP32[$3>>2]|0;
   $276 = (($275) + ($274<<2)|0);
   HEAPF32[$276>>2] = $273;
  }
  $277 = +HEAPF32[$masking_lower>>2];
  $278 = $277 < 1.0;
  if ($278) {
   $279 = +HEAPF32[$masking_lower>>2];
   $280 = HEAP32[$b>>2]|0;
   $281 = HEAP32[$3>>2]|0;
   $282 = (($281) + ($280<<2)|0);
   $283 = +HEAPF32[$282>>2];
   $284 = $283 * $279;
   HEAPF32[$282>>2] = $284;
  }
  $285 = HEAP32[$b>>2]|0;
  $286 = (($285) + 1)|0;
  HEAP32[$b>>2] = $286;
 }
 while(1) {
  $287 = HEAP32[$b>>2]|0;
  $288 = ($287|0)<(64);
  if (!($288)) {
   break;
  }
  $289 = HEAP32[$b>>2]|0;
  $290 = HEAP32[$2>>2]|0;
  $291 = (($290) + ($289<<2)|0);
  HEAPF32[$291>>2] = 0.0;
  $292 = HEAP32[$b>>2]|0;
  $293 = HEAP32[$3>>2]|0;
  $294 = (($293) + ($292<<2)|0);
  HEAPF32[$294>>2] = 0.0;
  $295 = HEAP32[$b>>2]|0;
  $296 = (($295) + 1)|0;
  HEAP32[$b>>2] = $296;
 }
 STACKTOP = sp;return;
}
function _vbrpsy_compute_MS_thresholds($eb,$thr,$cb_mld,$ath_cb,$athlower,$msfix,$n) {
 $eb = $eb|0;
 $thr = $thr|0;
 $cb_mld = $cb_mld|0;
 $ath_cb = $ath_cb|0;
 $athlower = +$athlower;
 $msfix = +$msfix;
 $n = $n|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0.0, $101 = 0.0, $102 = 0.0, $103 = 0, $104 = 0.0, $105 = 0.0, $106 = 0.0, $107 = 0.0, $108 = 0.0, $109 = 0, $11 = 0, $110 = 0.0, $111 = 0.0, $112 = 0.0, $113 = 0.0, $114 = 0.0, $115 = 0;
 var $116 = 0.0, $117 = 0.0, $118 = 0.0, $119 = 0.0, $12 = 0, $120 = 0.0, $121 = 0, $122 = 0.0, $123 = 0.0, $124 = 0.0, $125 = 0.0, $126 = 0.0, $127 = 0.0, $128 = 0.0, $129 = 0, $13 = 0, $130 = 0.0, $131 = 0.0, $132 = 0.0, $133 = 0.0;
 var $134 = 0, $135 = 0.0, $136 = 0.0, $137 = 0.0, $138 = 0.0, $139 = 0.0, $14 = 0, $140 = 0.0, $141 = 0.0, $142 = 0.0, $143 = 0.0, $144 = 0.0, $145 = 0.0, $146 = 0.0, $147 = 0.0, $148 = 0, $149 = 0.0, $15 = 0, $150 = 0.0, $151 = 0.0;
 var $152 = 0.0, $153 = 0.0, $154 = 0, $155 = 0.0, $156 = 0.0, $157 = 0.0, $158 = 0.0, $159 = 0.0, $16 = 0.0, $160 = 0, $161 = 0.0, $162 = 0.0, $163 = 0.0, $164 = 0, $165 = 0.0, $166 = 0.0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0.0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0.0, $22 = 0, $23 = 0, $24 = 0, $25 = 0.0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0.0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0.0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0, $45 = 0.0, $46 = 0.0;
 var $47 = 0.0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0, $56 = 0, $57 = 0, $58 = 0.0, $59 = 0.0, $6 = 0, $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0, $64 = 0.0;
 var $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0, $7 = 0.0, $70 = 0.0, $71 = 0.0, $72 = 0.0, $73 = 0.0, $74 = 0.0, $75 = 0, $76 = 0.0, $77 = 0.0, $78 = 0.0, $79 = 0.0, $8 = 0.0, $80 = 0.0, $81 = 0, $82 = 0.0;
 var $83 = 0.0, $84 = 0.0, $85 = 0.0, $86 = 0.0, $87 = 0.0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0.0, $93 = 0.0, $94 = 0.0, $95 = 0.0, $96 = 0.0, $97 = 0, $98 = 0.0, $99 = 0.0, $ath = 0, $b = 0;
 var $ebM = 0, $ebS = 0, $f = 0, $mld_m = 0, $mld_s = 0, $msfix2 = 0, $rmid = 0, $rside = 0, $thmL = 0, $thmLR = 0, $thmM = 0, $thmMS = 0, $thmR = 0, $thmS = 0, $tmp_l = 0, $tmp_m = 0, $tmp_r = 0, $tmp_s = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0;
 $0 = sp + 104|0;
 $1 = sp + 100|0;
 $2 = sp + 96|0;
 $3 = sp + 92|0;
 $4 = sp + 88|0;
 $5 = sp + 84|0;
 $6 = sp + 80|0;
 $msfix2 = sp + 76|0;
 $rside = sp + 72|0;
 $rmid = sp + 68|0;
 $b = sp + 64|0;
 $ebM = sp + 60|0;
 $ebS = sp + 56|0;
 $thmL = sp + 52|0;
 $thmR = sp + 48|0;
 $thmM = sp + 44|0;
 $thmS = sp + 40|0;
 $mld_m = sp + 36|0;
 $mld_s = sp + 32|0;
 $tmp_m = sp + 28|0;
 $tmp_s = sp + 24|0;
 $thmLR = sp + 20|0;
 $thmMS = sp + 16|0;
 $ath = sp + 12|0;
 $tmp_l = sp + 8|0;
 $tmp_r = sp + 4|0;
 $f = sp;
 HEAP32[$0>>2] = $eb;
 HEAP32[$1>>2] = $thr;
 HEAP32[$2>>2] = $cb_mld;
 HEAP32[$3>>2] = $ath_cb;
 HEAPF32[$4>>2] = $athlower;
 HEAPF32[$5>>2] = $msfix;
 HEAP32[$6>>2] = $n;
 $7 = +HEAPF32[$5>>2];
 $8 = $7 * 2.0;
 HEAPF32[$msfix2>>2] = $8;
 HEAP32[$b>>2] = 0;
 while(1) {
  $9 = HEAP32[$b>>2]|0;
  $10 = HEAP32[$6>>2]|0;
  $11 = ($9|0)<($10|0);
  if (!($11)) {
   break;
  }
  $12 = HEAP32[$b>>2]|0;
  $13 = HEAP32[$0>>2]|0;
  $14 = (($13) + 512|0);
  $15 = (($14) + ($12<<2)|0);
  $16 = +HEAPF32[$15>>2];
  HEAPF32[$ebM>>2] = $16;
  $17 = HEAP32[$b>>2]|0;
  $18 = HEAP32[$0>>2]|0;
  $19 = (($18) + 768|0);
  $20 = (($19) + ($17<<2)|0);
  $21 = +HEAPF32[$20>>2];
  HEAPF32[$ebS>>2] = $21;
  $22 = HEAP32[$b>>2]|0;
  $23 = HEAP32[$1>>2]|0;
  $24 = (($23) + ($22<<2)|0);
  $25 = +HEAPF32[$24>>2];
  HEAPF32[$thmL>>2] = $25;
  $26 = HEAP32[$b>>2]|0;
  $27 = HEAP32[$1>>2]|0;
  $28 = (($27) + 256|0);
  $29 = (($28) + ($26<<2)|0);
  $30 = +HEAPF32[$29>>2];
  HEAPF32[$thmR>>2] = $30;
  $31 = HEAP32[$b>>2]|0;
  $32 = HEAP32[$1>>2]|0;
  $33 = (($32) + 512|0);
  $34 = (($33) + ($31<<2)|0);
  $35 = +HEAPF32[$34>>2];
  HEAPF32[$thmM>>2] = $35;
  $36 = HEAP32[$b>>2]|0;
  $37 = HEAP32[$1>>2]|0;
  $38 = (($37) + 768|0);
  $39 = (($38) + ($36<<2)|0);
  $40 = +HEAPF32[$39>>2];
  HEAPF32[$thmS>>2] = $40;
  $41 = +HEAPF32[$thmL>>2];
  $42 = +HEAPF32[$thmR>>2];
  $43 = 1.58000004291534423828 * $42;
  $44 = $41 <= $43;
  if ($44) {
   $45 = +HEAPF32[$thmR>>2];
   $46 = +HEAPF32[$thmL>>2];
   $47 = 1.58000004291534423828 * $46;
   $48 = $45 <= $47;
   if ($48) {
    $49 = HEAP32[$b>>2]|0;
    $50 = HEAP32[$2>>2]|0;
    $51 = (($50) + ($49<<2)|0);
    $52 = +HEAPF32[$51>>2];
    $53 = +HEAPF32[$ebS>>2];
    $54 = $52 * $53;
    HEAPF32[$mld_m>>2] = $54;
    $55 = HEAP32[$b>>2]|0;
    $56 = HEAP32[$2>>2]|0;
    $57 = (($56) + ($55<<2)|0);
    $58 = +HEAPF32[$57>>2];
    $59 = +HEAPF32[$ebM>>2];
    $60 = $58 * $59;
    HEAPF32[$mld_s>>2] = $60;
    $61 = +HEAPF32[$thmS>>2];
    $62 = +HEAPF32[$mld_m>>2];
    $63 = $61 < $62;
    $64 = +HEAPF32[$thmS>>2];
    $65 = +HEAPF32[$mld_m>>2];
    $66 = $63 ? $64 : $65;
    HEAPF32[$tmp_m>>2] = $66;
    $67 = +HEAPF32[$thmM>>2];
    $68 = +HEAPF32[$mld_s>>2];
    $69 = $67 < $68;
    $70 = +HEAPF32[$thmM>>2];
    $71 = +HEAPF32[$mld_s>>2];
    $72 = $69 ? $70 : $71;
    HEAPF32[$tmp_s>>2] = $72;
    $73 = +HEAPF32[$thmM>>2];
    $74 = +HEAPF32[$tmp_m>>2];
    $75 = $73 > $74;
    $76 = +HEAPF32[$thmM>>2];
    $77 = +HEAPF32[$tmp_m>>2];
    $78 = $75 ? $76 : $77;
    HEAPF32[$rmid>>2] = $78;
    $79 = +HEAPF32[$thmS>>2];
    $80 = +HEAPF32[$tmp_s>>2];
    $81 = $79 > $80;
    $82 = +HEAPF32[$thmS>>2];
    $83 = +HEAPF32[$tmp_s>>2];
    $84 = $81 ? $82 : $83;
    HEAPF32[$rside>>2] = $84;
   } else {
    label = 6;
   }
  } else {
   label = 6;
  }
  if ((label|0) == 6) {
   label = 0;
   $85 = +HEAPF32[$thmM>>2];
   HEAPF32[$rmid>>2] = $85;
   $86 = +HEAPF32[$thmS>>2];
   HEAPF32[$rside>>2] = $86;
  }
  $87 = +HEAPF32[$5>>2];
  $88 = $87 > 0.0;
  if ($88) {
   $89 = HEAP32[$b>>2]|0;
   $90 = HEAP32[$3>>2]|0;
   $91 = (($90) + ($89<<2)|0);
   $92 = +HEAPF32[$91>>2];
   $93 = +HEAPF32[$4>>2];
   $94 = $92 * $93;
   HEAPF32[$ath>>2] = $94;
   $95 = +HEAPF32[$thmL>>2];
   $96 = +HEAPF32[$ath>>2];
   $97 = $95 > $96;
   $98 = +HEAPF32[$thmL>>2];
   $99 = +HEAPF32[$ath>>2];
   $100 = $97 ? $98 : $99;
   HEAPF32[$tmp_l>>2] = $100;
   $101 = +HEAPF32[$thmR>>2];
   $102 = +HEAPF32[$ath>>2];
   $103 = $101 > $102;
   $104 = +HEAPF32[$thmR>>2];
   $105 = +HEAPF32[$ath>>2];
   $106 = $103 ? $104 : $105;
   HEAPF32[$tmp_r>>2] = $106;
   $107 = +HEAPF32[$tmp_l>>2];
   $108 = +HEAPF32[$tmp_r>>2];
   $109 = $107 < $108;
   $110 = +HEAPF32[$tmp_l>>2];
   $111 = +HEAPF32[$tmp_r>>2];
   $112 = $109 ? $110 : $111;
   HEAPF32[$thmLR>>2] = $112;
   $113 = +HEAPF32[$rmid>>2];
   $114 = +HEAPF32[$ath>>2];
   $115 = $113 > $114;
   $116 = +HEAPF32[$rmid>>2];
   $117 = +HEAPF32[$ath>>2];
   $118 = $115 ? $116 : $117;
   HEAPF32[$thmM>>2] = $118;
   $119 = +HEAPF32[$rside>>2];
   $120 = +HEAPF32[$ath>>2];
   $121 = $119 > $120;
   $122 = +HEAPF32[$rside>>2];
   $123 = +HEAPF32[$ath>>2];
   $124 = $121 ? $122 : $123;
   HEAPF32[$thmS>>2] = $124;
   $125 = +HEAPF32[$thmM>>2];
   $126 = +HEAPF32[$thmS>>2];
   $127 = $125 + $126;
   HEAPF32[$thmMS>>2] = $127;
   $128 = +HEAPF32[$thmMS>>2];
   $129 = $128 > 0.0;
   if ($129) {
    $130 = +HEAPF32[$thmLR>>2];
    $131 = +HEAPF32[$msfix2>>2];
    $132 = $130 * $131;
    $133 = +HEAPF32[$thmMS>>2];
    $134 = $132 < $133;
    if ($134) {
     $135 = +HEAPF32[$thmLR>>2];
     $136 = +HEAPF32[$msfix2>>2];
     $137 = $135 * $136;
     $138 = +HEAPF32[$thmMS>>2];
     $139 = $137 / $138;
     HEAPF32[$f>>2] = $139;
     $140 = +HEAPF32[$f>>2];
     $141 = +HEAPF32[$thmM>>2];
     $142 = $141 * $140;
     HEAPF32[$thmM>>2] = $142;
     $143 = +HEAPF32[$f>>2];
     $144 = +HEAPF32[$thmS>>2];
     $145 = $144 * $143;
     HEAPF32[$thmS>>2] = $145;
    }
   }
   $146 = +HEAPF32[$thmM>>2];
   $147 = +HEAPF32[$rmid>>2];
   $148 = $146 < $147;
   $149 = +HEAPF32[$thmM>>2];
   $150 = +HEAPF32[$rmid>>2];
   $151 = $148 ? $149 : $150;
   HEAPF32[$rmid>>2] = $151;
   $152 = +HEAPF32[$thmS>>2];
   $153 = +HEAPF32[$rside>>2];
   $154 = $152 < $153;
   $155 = +HEAPF32[$thmS>>2];
   $156 = +HEAPF32[$rside>>2];
   $157 = $154 ? $155 : $156;
   HEAPF32[$rside>>2] = $157;
  }
  $158 = +HEAPF32[$rmid>>2];
  $159 = +HEAPF32[$ebM>>2];
  $160 = $158 > $159;
  if ($160) {
   $161 = +HEAPF32[$ebM>>2];
   HEAPF32[$rmid>>2] = $161;
  }
  $162 = +HEAPF32[$rside>>2];
  $163 = +HEAPF32[$ebS>>2];
  $164 = $162 > $163;
  if ($164) {
   $165 = +HEAPF32[$ebS>>2];
   HEAPF32[$rside>>2] = $165;
  }
  $166 = +HEAPF32[$rmid>>2];
  $167 = HEAP32[$b>>2]|0;
  $168 = HEAP32[$1>>2]|0;
  $169 = (($168) + 512|0);
  $170 = (($169) + ($167<<2)|0);
  HEAPF32[$170>>2] = $166;
  $171 = +HEAPF32[$rside>>2];
  $172 = HEAP32[$b>>2]|0;
  $173 = HEAP32[$1>>2]|0;
  $174 = (($173) + 768|0);
  $175 = (($174) + ($172<<2)|0);
  HEAPF32[$175>>2] = $171;
  $176 = HEAP32[$b>>2]|0;
  $177 = (($176) + 1)|0;
  HEAP32[$b>>2] = $177;
 }
 STACKTOP = sp;return;
}
function _convert_partition2scalefac_l($gfc,$eb,$thr,$chn) {
 $gfc = $gfc|0;
 $eb = $eb|0;
 $thr = $thr|0;
 $chn = $chn|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $enn = 0, $gdl = 0, $psv = 0, $thm = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = sp + 28|0;
 $1 = sp + 24|0;
 $2 = sp + 20|0;
 $3 = sp + 16|0;
 $psv = sp + 12|0;
 $gdl = sp + 8|0;
 $enn = sp + 4|0;
 $thm = sp;
 HEAP32[$0>>2] = $gfc;
 HEAP32[$1>>2] = $eb;
 HEAP32[$2>>2] = $thr;
 HEAP32[$3>>2] = $chn;
 $4 = HEAP32[$0>>2]|0;
 $5 = (($4) + 21564|0);
 HEAP32[$psv>>2] = $5;
 $6 = HEAP32[$0>>2]|0;
 $7 = (($6) + 85800|0);
 $8 = HEAP32[$7>>2]|0;
 HEAP32[$gdl>>2] = $8;
 $9 = HEAP32[$3>>2]|0;
 $10 = HEAP32[$psv>>2]|0;
 $11 = (($10) + 5072|0);
 $12 = (($11) + (($9*244)|0)|0);
 HEAP32[$enn>>2] = $12;
 $13 = HEAP32[$3>>2]|0;
 $14 = HEAP32[$psv>>2]|0;
 $15 = (($14) + 4096|0);
 $16 = (($15) + (($13*244)|0)|0);
 HEAP32[$thm>>2] = $16;
 $17 = HEAP32[$gdl>>2]|0;
 $18 = HEAP32[$1>>2]|0;
 $19 = HEAP32[$2>>2]|0;
 $20 = HEAP32[$enn>>2]|0;
 $21 = HEAP32[$thm>>2]|0;
 _convert_partition2scalefac($17,$18,$19,$20,$21);
 STACKTOP = sp;return;
}
function _convert_partition2scalefac_l_to_s($gfc,$eb,$thr,$chn) {
 $gfc = $gfc|0;
 $eb = $eb|0;
 $thr = $thr|0;
 $chn = $chn|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0, $19 = 0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0, $23 = 0, $24 = 0.0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0.0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $enn = 0, $gds = 0, $psv = 0, $sb = 0, $sblock = 0, $scale = 0, $thm = 0, $tmp_enn = 0, $tmp_thm = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0;
 $0 = sp + 144|0;
 $1 = sp + 140|0;
 $2 = sp + 136|0;
 $3 = sp + 132|0;
 $psv = sp + 128|0;
 $gds = sp + 124|0;
 $enn = sp + 72|0;
 $thm = sp + 20|0;
 $sb = sp + 16|0;
 $sblock = sp + 12|0;
 $scale = sp + 8|0;
 $tmp_enn = sp + 4|0;
 $tmp_thm = sp;
 HEAP32[$0>>2] = $gfc;
 HEAP32[$1>>2] = $eb;
 HEAP32[$2>>2] = $thr;
 HEAP32[$3>>2] = $chn;
 $4 = HEAP32[$0>>2]|0;
 $5 = (($4) + 21564|0);
 HEAP32[$psv>>2] = $5;
 $6 = HEAP32[$0>>2]|0;
 $7 = (($6) + 85800|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($8) + 4320|0);
 HEAP32[$gds>>2] = $9;
 $10 = HEAP32[$gds>>2]|0;
 $11 = HEAP32[$1>>2]|0;
 $12 = HEAP32[$2>>2]|0;
 _convert_partition2scalefac($10,$11,$12,$enn,$thm);
 HEAP32[$sb>>2] = 0;
 while(1) {
  $13 = HEAP32[$sb>>2]|0;
  $14 = ($13|0)<(13);
  if (!($14)) {
   break;
  }
  HEAPF32[$scale>>2] = 0.015625;
  $15 = HEAP32[$sb>>2]|0;
  $16 = (($enn) + ($15<<2)|0);
  $17 = +HEAPF32[$16>>2];
  HEAPF32[$tmp_enn>>2] = $17;
  $18 = HEAP32[$sb>>2]|0;
  $19 = (($thm) + ($18<<2)|0);
  $20 = +HEAPF32[$19>>2];
  $21 = $20 * 0.015625;
  HEAPF32[$tmp_thm>>2] = $21;
  HEAP32[$sblock>>2] = 0;
  while(1) {
   $22 = HEAP32[$sblock>>2]|0;
   $23 = ($22|0)<(3);
   if (!($23)) {
    break;
   }
   $24 = +HEAPF32[$tmp_enn>>2];
   $25 = HEAP32[$sblock>>2]|0;
   $26 = HEAP32[$sb>>2]|0;
   $27 = HEAP32[$3>>2]|0;
   $28 = HEAP32[$psv>>2]|0;
   $29 = (($28) + 5072|0);
   $30 = (($29) + (($27*244)|0)|0);
   $31 = (($30) + 88|0);
   $32 = (($31) + (($26*12)|0)|0);
   $33 = (($32) + ($25<<2)|0);
   HEAPF32[$33>>2] = $24;
   $34 = +HEAPF32[$tmp_thm>>2];
   $35 = HEAP32[$sblock>>2]|0;
   $36 = HEAP32[$sb>>2]|0;
   $37 = HEAP32[$3>>2]|0;
   $38 = HEAP32[$psv>>2]|0;
   $39 = (($38) + 4096|0);
   $40 = (($39) + (($37*244)|0)|0);
   $41 = (($40) + 88|0);
   $42 = (($41) + (($36*12)|0)|0);
   $43 = (($42) + ($35<<2)|0);
   HEAPF32[$43>>2] = $34;
   $44 = HEAP32[$sblock>>2]|0;
   $45 = (($44) + 1)|0;
   HEAP32[$sblock>>2] = $45;
  }
  $46 = HEAP32[$sb>>2]|0;
  $47 = (($46) + 1)|0;
  HEAP32[$sb>>2] = $47;
 }
 STACKTOP = sp;return;
}
function _vbrpsy_skip_masking_s($gfc,$chn,$sblock) {
 $gfc = $gfc|0;
 $chn = $chn|0;
 $sblock = $sblock|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0.0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $b = 0, $n = 0, $nbs1 = 0, $nbs2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = sp + 24|0;
 $1 = sp + 20|0;
 $2 = sp + 16|0;
 $nbs2 = sp + 12|0;
 $nbs1 = sp + 8|0;
 $n = sp + 4|0;
 $b = sp;
 HEAP32[$0>>2] = $gfc;
 HEAP32[$1>>2] = $chn;
 HEAP32[$2>>2] = $sblock;
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0);
 if (!($4)) {
  STACKTOP = sp;return;
 }
 $5 = HEAP32[$1>>2]|0;
 $6 = HEAP32[$0>>2]|0;
 $7 = (($6) + 21564|0);
 $8 = (($7) + 3072|0);
 $9 = (($8) + ($5<<8)|0);
 HEAP32[$nbs2>>2] = $9;
 $10 = HEAP32[$1>>2]|0;
 $11 = HEAP32[$0>>2]|0;
 $12 = (($11) + 21564|0);
 $13 = (($12) + 2048|0);
 $14 = (($13) + ($10<<8)|0);
 HEAP32[$nbs1>>2] = $14;
 $15 = HEAP32[$0>>2]|0;
 $16 = (($15) + 85800|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = (($17) + 2160|0);
 $19 = (($18) + 2148|0);
 $20 = HEAP32[$19>>2]|0;
 HEAP32[$n>>2] = $20;
 HEAP32[$b>>2] = 0;
 while(1) {
  $21 = HEAP32[$b>>2]|0;
  $22 = HEAP32[$n>>2]|0;
  $23 = ($21|0)<($22|0);
  if (!($23)) {
   break;
  }
  $24 = HEAP32[$b>>2]|0;
  $25 = HEAP32[$nbs1>>2]|0;
  $26 = (($25) + ($24<<2)|0);
  $27 = +HEAPF32[$26>>2];
  $28 = HEAP32[$b>>2]|0;
  $29 = HEAP32[$nbs2>>2]|0;
  $30 = (($29) + ($28<<2)|0);
  HEAPF32[$30>>2] = $27;
  $31 = HEAP32[$b>>2]|0;
  $32 = (($31) + 1)|0;
  HEAP32[$b>>2] = $32;
 }
 STACKTOP = sp;return;
}
function _vbrpsy_compute_fft_s($gfc,$buffer,$chn,$sblock,$fftenergy_s,$wsamp_s) {
 $gfc = $gfc|0;
 $buffer = $buffer|0;
 $chn = $chn|0;
 $sblock = $sblock|0;
 $fftenergy_s = $fftenergy_s|0;
 $wsamp_s = $wsamp_s|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0.0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0.0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0.0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0.0, $67 = 0.0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0.0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0.0, $84 = 0.0, $85 = 0.0, $86 = 0.0, $87 = 0.0, $88 = 0.0, $89 = 0.0, $9 = 0, $90 = 0.0, $91 = 0.0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $im = 0, $j = 0, $l = 0, $r = 0, $re = 0, $sqrt2_half = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $0 = sp + 44|0;
 $1 = sp + 40|0;
 $2 = sp + 36|0;
 $3 = sp + 32|0;
 $4 = sp + 28|0;
 $5 = sp + 24|0;
 $j = sp + 20|0;
 $sqrt2_half = sp + 16|0;
 $l = sp + 12|0;
 $r = sp + 8|0;
 $re = sp + 4|0;
 $im = sp;
 HEAP32[$0>>2] = $gfc;
 HEAP32[$1>>2] = $buffer;
 HEAP32[$2>>2] = $chn;
 HEAP32[$3>>2] = $sblock;
 HEAP32[$4>>2] = $fftenergy_s;
 HEAP32[$5>>2] = $wsamp_s;
 $6 = HEAP32[$3>>2]|0;
 $7 = ($6|0)==(0);
 if ($7) {
  $8 = HEAP32[$2>>2]|0;
  $9 = ($8|0)<(2);
  if ($9) {
   $10 = HEAP32[$0>>2]|0;
   $11 = HEAP32[$5>>2]|0;
   $12 = HEAP32[$2>>2]|0;
   $13 = HEAP32[$1>>2]|0;
   _fft_short($10,$11,$12,$13);
  }
 }
 $14 = HEAP32[$2>>2]|0;
 $15 = ($14|0)==(2);
 L5: do {
  if ($15) {
   HEAPF32[$sqrt2_half>>2] = 0.707106769084930419921;
   HEAP32[$j>>2] = 255;
   while(1) {
    $16 = HEAP32[$j>>2]|0;
    $17 = ($16|0)>=(0);
    if (!($17)) {
     break L5;
    }
    $18 = HEAP32[$j>>2]|0;
    $19 = HEAP32[$3>>2]|0;
    $20 = HEAP32[$5>>2]|0;
    $21 = (($20) + ($19<<10)|0);
    $22 = (($21) + ($18<<2)|0);
    $23 = +HEAPF32[$22>>2];
    HEAPF32[$l>>2] = $23;
    $24 = HEAP32[$j>>2]|0;
    $25 = HEAP32[$3>>2]|0;
    $26 = HEAP32[$5>>2]|0;
    $27 = (($26) + 3072|0);
    $28 = (($27) + ($25<<10)|0);
    $29 = (($28) + ($24<<2)|0);
    $30 = +HEAPF32[$29>>2];
    HEAPF32[$r>>2] = $30;
    $31 = +HEAPF32[$l>>2];
    $32 = +HEAPF32[$r>>2];
    $33 = $31 + $32;
    $34 = $33 * 0.707106769084930419921;
    $35 = HEAP32[$j>>2]|0;
    $36 = HEAP32[$3>>2]|0;
    $37 = HEAP32[$5>>2]|0;
    $38 = (($37) + ($36<<10)|0);
    $39 = (($38) + ($35<<2)|0);
    HEAPF32[$39>>2] = $34;
    $40 = +HEAPF32[$l>>2];
    $41 = +HEAPF32[$r>>2];
    $42 = $40 - $41;
    $43 = $42 * 0.707106769084930419921;
    $44 = HEAP32[$j>>2]|0;
    $45 = HEAP32[$3>>2]|0;
    $46 = HEAP32[$5>>2]|0;
    $47 = (($46) + 3072|0);
    $48 = (($47) + ($45<<10)|0);
    $49 = (($48) + ($44<<2)|0);
    HEAPF32[$49>>2] = $43;
    $50 = HEAP32[$j>>2]|0;
    $51 = (($50) + -1)|0;
    HEAP32[$j>>2] = $51;
   }
  }
 } while(0);
 $52 = HEAP32[$3>>2]|0;
 $53 = HEAP32[$5>>2]|0;
 $54 = (($53) + ($52<<10)|0);
 $55 = +HEAPF32[$54>>2];
 $56 = HEAP32[$3>>2]|0;
 $57 = HEAP32[$4>>2]|0;
 $58 = (($57) + (($56*516)|0)|0);
 HEAPF32[$58>>2] = $55;
 $59 = HEAP32[$3>>2]|0;
 $60 = HEAP32[$4>>2]|0;
 $61 = (($60) + (($59*516)|0)|0);
 $62 = +HEAPF32[$61>>2];
 $63 = HEAP32[$3>>2]|0;
 $64 = HEAP32[$4>>2]|0;
 $65 = (($64) + (($63*516)|0)|0);
 $66 = +HEAPF32[$65>>2];
 $67 = $66 * $62;
 HEAPF32[$65>>2] = $67;
 HEAP32[$j>>2] = 127;
 while(1) {
  $68 = HEAP32[$j>>2]|0;
  $69 = ($68|0)>=(0);
  if (!($69)) {
   break;
  }
  $70 = HEAP32[$j>>2]|0;
  $71 = (128 - ($70))|0;
  $72 = HEAP32[$3>>2]|0;
  $73 = HEAP32[$5>>2]|0;
  $74 = (($73) + ($72<<10)|0);
  $75 = (($74) + ($71<<2)|0);
  $76 = +HEAPF32[$75>>2];
  HEAPF32[$re>>2] = $76;
  $77 = HEAP32[$j>>2]|0;
  $78 = (128 + ($77))|0;
  $79 = HEAP32[$3>>2]|0;
  $80 = HEAP32[$5>>2]|0;
  $81 = (($80) + ($79<<10)|0);
  $82 = (($81) + ($78<<2)|0);
  $83 = +HEAPF32[$82>>2];
  HEAPF32[$im>>2] = $83;
  $84 = +HEAPF32[$re>>2];
  $85 = +HEAPF32[$re>>2];
  $86 = $84 * $85;
  $87 = +HEAPF32[$im>>2];
  $88 = +HEAPF32[$im>>2];
  $89 = $87 * $88;
  $90 = $86 + $89;
  $91 = $90 * 0.5;
  $92 = HEAP32[$j>>2]|0;
  $93 = (128 - ($92))|0;
  $94 = HEAP32[$3>>2]|0;
  $95 = HEAP32[$4>>2]|0;
  $96 = (($95) + (($94*516)|0)|0);
  $97 = (($96) + ($93<<2)|0);
  HEAPF32[$97>>2] = $91;
  $98 = HEAP32[$j>>2]|0;
  $99 = (($98) + -1)|0;
  HEAP32[$j>>2] = $99;
 }
 STACKTOP = sp;return;
}
function _vbrpsy_compute_masking_s($gfc,$fftenergy_s,$eb,$thr,$chn,$sblock) {
 $gfc = $gfc|0;
 $fftenergy_s = $fftenergy_s|0;
 $eb = $eb|0;
 $thr = $thr|0;
 $chn = $chn|0;
 $sblock = $sblock|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0.0, $101 = 0, $102 = 0, $103 = 0, $104 = 0.0, $105 = 0.0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0.0, $112 = 0.0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0.0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0.0, $138 = 0.0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0.0, $145 = 0.0, $146 = 0.0, $147 = 0.0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0.0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0.0, $166 = 0.0, $167 = 0.0, $168 = 0.0, $169 = 0.0, $17 = 0;
 var $170 = 0.0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0.0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0.0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0.0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0.0, $202 = 0.0, $203 = 0.0, $204 = 0.0, $205 = 0.0;
 var $206 = 0.0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0.0, $211 = 0.0, $212 = 0, $213 = 0.0, $214 = 0, $215 = 0, $216 = 0, $217 = 0.0, $218 = 0, $219 = 0.0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0.0;
 var $224 = 0.0, $225 = 0, $226 = 0, $227 = 0, $228 = 0.0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0.0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0.0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0.0;
 var $242 = 0, $243 = 0.0, $244 = 0, $245 = 0, $246 = 0, $247 = 0.0, $248 = 0.0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0, $37 = 0.0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0.0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0.0, $47 = 0, $48 = 0, $49 = 0.0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0.0, $55 = 0.0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0.0, $86 = 0, $87 = 0, $88 = 0, $89 = 0.0, $9 = 0, $90 = 0.0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $avg = 0, $avg_mask = 0, $b = 0, $dd = 0, $dd_n = 0, $delta = 0, $ebb = 0, $ecb = 0, $el = 0, $gds = 0, $i = 0, $j = 0, $kk = 0, $last = 0, $m = 0, $mask_idx_s = 0, $masking_lower = 0, $max = 0, $n = 0;
 var $psv = 0, $x = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 672|0;
 $0 = sp + 604|0;
 $1 = sp + 600|0;
 $2 = sp + 596|0;
 $3 = sp + 592|0;
 $4 = sp + 588|0;
 $5 = sp + 584|0;
 $psv = sp + 580|0;
 $gds = sp + 576|0;
 $max = sp + 320|0;
 $avg = sp + 64|0;
 $i = sp + 60|0;
 $j = sp + 56|0;
 $b = sp + 52|0;
 $mask_idx_s = sp + 608|0;
 $ebb = sp + 48|0;
 $m = sp + 44|0;
 $n = sp + 40|0;
 $el = sp + 36|0;
 $kk = sp + 32|0;
 $last = sp + 28|0;
 $delta = sp + 24|0;
 $dd = sp + 20|0;
 $dd_n = sp + 16|0;
 $x = sp + 12|0;
 $ecb = sp + 8|0;
 $avg_mask = sp + 4|0;
 $masking_lower = sp;
 HEAP32[$0>>2] = $gfc;
 HEAP32[$1>>2] = $fftenergy_s;
 HEAP32[$2>>2] = $eb;
 HEAP32[$3>>2] = $thr;
 HEAP32[$4>>2] = $chn;
 HEAP32[$5>>2] = $sblock;
 $6 = HEAP32[$0>>2]|0;
 $7 = (($6) + 21564|0);
 HEAP32[$psv>>2] = $7;
 $8 = HEAP32[$0>>2]|0;
 $9 = (($8) + 85800|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (($10) + 2160|0);
 HEAP32[$gds>>2] = $11;
 _memset(($max|0),0,256)|0;
 _memset(($avg|0),0,256)|0;
 HEAP32[$j>>2] = 0;
 HEAP32[$b>>2] = 0;
 while(1) {
  $12 = HEAP32[$b>>2]|0;
  $13 = HEAP32[$gds>>2]|0;
  $14 = (($13) + 2148|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = ($12|0)<($15|0);
  if (!($16)) {
   break;
  }
  HEAPF32[$ebb>>2] = 0.0;
  HEAPF32[$m>>2] = 0.0;
  $17 = HEAP32[$b>>2]|0;
  $18 = HEAP32[$gds>>2]|0;
  $19 = (($18) + 1716|0);
  $20 = (($19) + ($17<<2)|0);
  $21 = HEAP32[$20>>2]|0;
  HEAP32[$n>>2] = $21;
  HEAP32[$i>>2] = 0;
  while(1) {
   $22 = HEAP32[$i>>2]|0;
   $23 = HEAP32[$n>>2]|0;
   $24 = ($22|0)<($23|0);
   if (!($24)) {
    break;
   }
   $25 = HEAP32[$j>>2]|0;
   $26 = HEAP32[$5>>2]|0;
   $27 = HEAP32[$1>>2]|0;
   $28 = (($27) + (($26*516)|0)|0);
   $29 = (($28) + ($25<<2)|0);
   $30 = +HEAPF32[$29>>2];
   HEAPF32[$el>>2] = $30;
   $31 = +HEAPF32[$el>>2];
   $32 = +HEAPF32[$ebb>>2];
   $33 = $32 + $31;
   HEAPF32[$ebb>>2] = $33;
   $34 = +HEAPF32[$m>>2];
   $35 = +HEAPF32[$el>>2];
   $36 = $34 < $35;
   if ($36) {
    $37 = +HEAPF32[$el>>2];
    HEAPF32[$m>>2] = $37;
   }
   $38 = HEAP32[$i>>2]|0;
   $39 = (($38) + 1)|0;
   HEAP32[$i>>2] = $39;
   $40 = HEAP32[$j>>2]|0;
   $41 = (($40) + 1)|0;
   HEAP32[$j>>2] = $41;
  }
  $42 = +HEAPF32[$ebb>>2];
  $43 = HEAP32[$b>>2]|0;
  $44 = HEAP32[$2>>2]|0;
  $45 = (($44) + ($43<<2)|0);
  HEAPF32[$45>>2] = $42;
  $46 = +HEAPF32[$m>>2];
  $47 = HEAP32[$b>>2]|0;
  $48 = (($max) + ($47<<2)|0);
  HEAPF32[$48>>2] = $46;
  $49 = +HEAPF32[$ebb>>2];
  $50 = HEAP32[$b>>2]|0;
  $51 = HEAP32[$gds>>2]|0;
  $52 = (($51) + 512|0);
  $53 = (($52) + ($50<<2)|0);
  $54 = +HEAPF32[$53>>2];
  $55 = $49 * $54;
  $56 = HEAP32[$b>>2]|0;
  $57 = (($avg) + ($56<<2)|0);
  HEAPF32[$57>>2] = $55;
  $58 = HEAP32[$b>>2]|0;
  $59 = (($58) + 1)|0;
  HEAP32[$b>>2] = $59;
 }
 $60 = HEAP32[$0>>2]|0;
 _vbrpsy_calc_mask_index_s($60,$max,$avg,$mask_idx_s);
 HEAP32[$b>>2] = 0;
 HEAP32[$j>>2] = 0;
 while(1) {
  $61 = HEAP32[$b>>2]|0;
  $62 = HEAP32[$gds>>2]|0;
  $63 = (($62) + 2148|0);
  $64 = HEAP32[$63>>2]|0;
  $65 = ($61|0)<($64|0);
  if (!($65)) {
   break;
  }
  $66 = HEAP32[$b>>2]|0;
  $67 = HEAP32[$gds>>2]|0;
  $68 = (($67) + 1204|0);
  $69 = (($68) + ($66<<3)|0);
  $70 = HEAP32[$69>>2]|0;
  HEAP32[$kk>>2] = $70;
  $71 = HEAP32[$b>>2]|0;
  $72 = HEAP32[$gds>>2]|0;
  $73 = (($72) + 1204|0);
  $74 = (($73) + ($71<<3)|0);
  $75 = (($74) + 4|0);
  $76 = HEAP32[$75>>2]|0;
  HEAP32[$last>>2] = $76;
  $77 = HEAP32[$b>>2]|0;
  $78 = (($mask_idx_s) + ($77)|0);
  $79 = HEAP8[$78>>0]|0;
  $80 = $79&255;
  $81 = (_mask_add_delta($80)|0);
  HEAP32[$delta>>2] = $81;
  $82 = HEAP32[$b>>2]|0;
  $83 = HEAP32[$gds>>2]|0;
  $84 = (($83) + ($82<<2)|0);
  $85 = +HEAPF32[$84>>2];
  $86 = HEAP32[$0>>2]|0;
  $87 = (($86) + 84768|0);
  $88 = (($87) + 140|0);
  $89 = +HEAPF32[$88>>2];
  $90 = $85 * $89;
  HEAPF32[$masking_lower>>2] = $90;
  $91 = HEAP32[$kk>>2]|0;
  $92 = (($mask_idx_s) + ($91)|0);
  $93 = HEAP8[$92>>0]|0;
  $94 = $93&255;
  HEAP32[$dd>>2] = $94;
  HEAP32[$dd_n>>2] = 1;
  $95 = HEAP32[$j>>2]|0;
  $96 = HEAP32[$gds>>2]|0;
  $97 = (($96) + 2156|0);
  $98 = HEAP32[$97>>2]|0;
  $99 = (($98) + ($95<<2)|0);
  $100 = +HEAPF32[$99>>2];
  $101 = HEAP32[$kk>>2]|0;
  $102 = HEAP32[$2>>2]|0;
  $103 = (($102) + ($101<<2)|0);
  $104 = +HEAPF32[$103>>2];
  $105 = $100 * $104;
  $106 = HEAP32[$kk>>2]|0;
  $107 = (($mask_idx_s) + ($106)|0);
  $108 = HEAP8[$107>>0]|0;
  $109 = $108&255;
  $110 = (20872 + ($109<<2)|0);
  $111 = +HEAPF32[$110>>2];
  $112 = $105 * $111;
  HEAPF32[$ecb>>2] = $112;
  $113 = HEAP32[$j>>2]|0;
  $114 = (($113) + 1)|0;
  HEAP32[$j>>2] = $114;
  $115 = HEAP32[$kk>>2]|0;
  $116 = (($115) + 1)|0;
  HEAP32[$kk>>2] = $116;
  while(1) {
   $117 = HEAP32[$kk>>2]|0;
   $118 = HEAP32[$last>>2]|0;
   $119 = ($117|0)<=($118|0);
   if (!($119)) {
    break;
   }
   $120 = HEAP32[$kk>>2]|0;
   $121 = (($mask_idx_s) + ($120)|0);
   $122 = HEAP8[$121>>0]|0;
   $123 = $122&255;
   $124 = HEAP32[$dd>>2]|0;
   $125 = (($124) + ($123))|0;
   HEAP32[$dd>>2] = $125;
   $126 = HEAP32[$dd_n>>2]|0;
   $127 = (($126) + 1)|0;
   HEAP32[$dd_n>>2] = $127;
   $128 = HEAP32[$j>>2]|0;
   $129 = HEAP32[$gds>>2]|0;
   $130 = (($129) + 2156|0);
   $131 = HEAP32[$130>>2]|0;
   $132 = (($131) + ($128<<2)|0);
   $133 = +HEAPF32[$132>>2];
   $134 = HEAP32[$kk>>2]|0;
   $135 = HEAP32[$2>>2]|0;
   $136 = (($135) + ($134<<2)|0);
   $137 = +HEAPF32[$136>>2];
   $138 = $133 * $137;
   $139 = HEAP32[$kk>>2]|0;
   $140 = (($mask_idx_s) + ($139)|0);
   $141 = HEAP8[$140>>0]|0;
   $142 = $141&255;
   $143 = (20872 + ($142<<2)|0);
   $144 = +HEAPF32[$143>>2];
   $145 = $138 * $144;
   HEAPF32[$x>>2] = $145;
   $146 = +HEAPF32[$ecb>>2];
   $147 = +HEAPF32[$x>>2];
   $148 = HEAP32[$kk>>2]|0;
   $149 = HEAP32[$b>>2]|0;
   $150 = (($148) - ($149))|0;
   $151 = HEAP32[$delta>>2]|0;
   $152 = (+_vbrpsy_mask_add($146,$147,$150,$151));
   HEAPF32[$ecb>>2] = $152;
   $153 = HEAP32[$j>>2]|0;
   $154 = (($153) + 1)|0;
   HEAP32[$j>>2] = $154;
   $155 = HEAP32[$kk>>2]|0;
   $156 = (($155) + 1)|0;
   HEAP32[$kk>>2] = $156;
  }
  $157 = HEAP32[$dd>>2]|0;
  $158 = $157<<1;
  $159 = (1 + ($158))|0;
  $160 = HEAP32[$dd_n>>2]|0;
  $161 = $160<<1;
  $162 = (($159|0) / ($161|0))&-1;
  HEAP32[$dd>>2] = $162;
  $163 = HEAP32[$dd>>2]|0;
  $164 = (20872 + ($163<<2)|0);
  $165 = +HEAPF32[$164>>2];
  $166 = $165 * 0.5;
  HEAPF32[$avg_mask>>2] = $166;
  $167 = +HEAPF32[$avg_mask>>2];
  $168 = +HEAPF32[$ecb>>2];
  $169 = $168 * $167;
  HEAPF32[$ecb>>2] = $169;
  $170 = +HEAPF32[$ecb>>2];
  $171 = HEAP32[$b>>2]|0;
  $172 = HEAP32[$3>>2]|0;
  $173 = (($172) + ($171<<2)|0);
  HEAPF32[$173>>2] = $170;
  $174 = HEAP32[$b>>2]|0;
  $175 = HEAP32[$4>>2]|0;
  $176 = HEAP32[$psv>>2]|0;
  $177 = (($176) + 2048|0);
  $178 = (($177) + ($175<<8)|0);
  $179 = (($178) + ($174<<2)|0);
  $180 = +HEAPF32[$179>>2];
  $181 = HEAP32[$b>>2]|0;
  $182 = HEAP32[$4>>2]|0;
  $183 = HEAP32[$psv>>2]|0;
  $184 = (($183) + 3072|0);
  $185 = (($184) + ($182<<8)|0);
  $186 = (($185) + ($181<<2)|0);
  HEAPF32[$186>>2] = $180;
  $187 = +HEAPF32[$ecb>>2];
  $188 = HEAP32[$b>>2]|0;
  $189 = HEAP32[$4>>2]|0;
  $190 = HEAP32[$psv>>2]|0;
  $191 = (($190) + 2048|0);
  $192 = (($191) + ($189<<8)|0);
  $193 = (($192) + ($188<<2)|0);
  HEAPF32[$193>>2] = $187;
  $194 = HEAP32[$b>>2]|0;
  $195 = (($max) + ($194<<2)|0);
  $196 = +HEAPF32[$195>>2];
  HEAPF32[$x>>2] = $196;
  $197 = HEAP32[$b>>2]|0;
  $198 = HEAP32[$gds>>2]|0;
  $199 = (($198) + 256|0);
  $200 = (($199) + ($197<<2)|0);
  $201 = +HEAPF32[$200>>2];
  $202 = +HEAPF32[$x>>2];
  $203 = $202 * $201;
  HEAPF32[$x>>2] = $203;
  $204 = +HEAPF32[$avg_mask>>2];
  $205 = +HEAPF32[$x>>2];
  $206 = $205 * $204;
  HEAPF32[$x>>2] = $206;
  $207 = HEAP32[$b>>2]|0;
  $208 = HEAP32[$3>>2]|0;
  $209 = (($208) + ($207<<2)|0);
  $210 = +HEAPF32[$209>>2];
  $211 = +HEAPF32[$x>>2];
  $212 = $210 > $211;
  if ($212) {
   $213 = +HEAPF32[$x>>2];
   $214 = HEAP32[$b>>2]|0;
   $215 = HEAP32[$3>>2]|0;
   $216 = (($215) + ($214<<2)|0);
   HEAPF32[$216>>2] = $213;
  }
  $217 = +HEAPF32[$masking_lower>>2];
  $218 = $217 > 1.0;
  if ($218) {
   $219 = +HEAPF32[$masking_lower>>2];
   $220 = HEAP32[$b>>2]|0;
   $221 = HEAP32[$3>>2]|0;
   $222 = (($221) + ($220<<2)|0);
   $223 = +HEAPF32[$222>>2];
   $224 = $223 * $219;
   HEAPF32[$222>>2] = $224;
  }
  $225 = HEAP32[$b>>2]|0;
  $226 = HEAP32[$3>>2]|0;
  $227 = (($226) + ($225<<2)|0);
  $228 = +HEAPF32[$227>>2];
  $229 = HEAP32[$b>>2]|0;
  $230 = HEAP32[$2>>2]|0;
  $231 = (($230) + ($229<<2)|0);
  $232 = +HEAPF32[$231>>2];
  $233 = $228 > $232;
  if ($233) {
   $234 = HEAP32[$b>>2]|0;
   $235 = HEAP32[$2>>2]|0;
   $236 = (($235) + ($234<<2)|0);
   $237 = +HEAPF32[$236>>2];
   $238 = HEAP32[$b>>2]|0;
   $239 = HEAP32[$3>>2]|0;
   $240 = (($239) + ($238<<2)|0);
   HEAPF32[$240>>2] = $237;
  }
  $241 = +HEAPF32[$masking_lower>>2];
  $242 = $241 < 1.0;
  if ($242) {
   $243 = +HEAPF32[$masking_lower>>2];
   $244 = HEAP32[$b>>2]|0;
   $245 = HEAP32[$3>>2]|0;
   $246 = (($245) + ($244<<2)|0);
   $247 = +HEAPF32[$246>>2];
   $248 = $247 * $243;
   HEAPF32[$246>>2] = $248;
  }
  $249 = HEAP32[$b>>2]|0;
  $250 = (($249) + 1)|0;
  HEAP32[$b>>2] = $250;
 }
 while(1) {
  $251 = HEAP32[$b>>2]|0;
  $252 = ($251|0)<(64);
  if (!($252)) {
   break;
  }
  $253 = HEAP32[$b>>2]|0;
  $254 = HEAP32[$2>>2]|0;
  $255 = (($254) + ($253<<2)|0);
  HEAPF32[$255>>2] = 0.0;
  $256 = HEAP32[$b>>2]|0;
  $257 = HEAP32[$3>>2]|0;
  $258 = (($257) + ($256<<2)|0);
  HEAPF32[$258>>2] = 0.0;
  $259 = HEAP32[$b>>2]|0;
  $260 = (($259) + 1)|0;
  HEAP32[$b>>2] = $260;
 }
 STACKTOP = sp;return;
}
function _convert_partition2scalefac_s($gfc,$eb,$thr,$chn,$sblock) {
 $gfc = $gfc|0;
 $eb = $eb|0;
 $thr = $thr|0;
 $chn = $chn|0;
 $sblock = $sblock|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0.0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $enn = 0, $gds = 0, $psv = 0, $sb = 0, $thm = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0;
 $0 = sp + 132|0;
 $1 = sp + 128|0;
 $2 = sp + 124|0;
 $3 = sp + 120|0;
 $4 = sp + 116|0;
 $psv = sp + 112|0;
 $gds = sp + 108|0;
 $enn = sp + 56|0;
 $thm = sp + 4|0;
 $sb = sp;
 HEAP32[$0>>2] = $gfc;
 HEAP32[$1>>2] = $eb;
 HEAP32[$2>>2] = $thr;
 HEAP32[$3>>2] = $chn;
 HEAP32[$4>>2] = $sblock;
 $5 = HEAP32[$0>>2]|0;
 $6 = (($5) + 21564|0);
 HEAP32[$psv>>2] = $6;
 $7 = HEAP32[$0>>2]|0;
 $8 = (($7) + 85800|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (($9) + 2160|0);
 HEAP32[$gds>>2] = $10;
 $11 = HEAP32[$gds>>2]|0;
 $12 = HEAP32[$1>>2]|0;
 $13 = HEAP32[$2>>2]|0;
 _convert_partition2scalefac($11,$12,$13,$enn,$thm);
 HEAP32[$sb>>2] = 0;
 while(1) {
  $14 = HEAP32[$sb>>2]|0;
  $15 = ($14|0)<(13);
  if (!($15)) {
   break;
  }
  $16 = HEAP32[$sb>>2]|0;
  $17 = (($enn) + ($16<<2)|0);
  $18 = +HEAPF32[$17>>2];
  $19 = HEAP32[$4>>2]|0;
  $20 = HEAP32[$sb>>2]|0;
  $21 = HEAP32[$3>>2]|0;
  $22 = HEAP32[$psv>>2]|0;
  $23 = (($22) + 5072|0);
  $24 = (($23) + (($21*244)|0)|0);
  $25 = (($24) + 88|0);
  $26 = (($25) + (($20*12)|0)|0);
  $27 = (($26) + ($19<<2)|0);
  HEAPF32[$27>>2] = $18;
  $28 = HEAP32[$sb>>2]|0;
  $29 = (($thm) + ($28<<2)|0);
  $30 = +HEAPF32[$29>>2];
  $31 = HEAP32[$4>>2]|0;
  $32 = HEAP32[$sb>>2]|0;
  $33 = HEAP32[$3>>2]|0;
  $34 = HEAP32[$psv>>2]|0;
  $35 = (($34) + 4096|0);
  $36 = (($35) + (($33*244)|0)|0);
  $37 = (($36) + 88|0);
  $38 = (($37) + (($32*12)|0)|0);
  $39 = (($38) + ($31<<2)|0);
  HEAPF32[$39>>2] = $30;
  $40 = HEAP32[$sb>>2]|0;
  $41 = (($40) + 1)|0;
  HEAP32[$sb>>2] = $41;
 }
 STACKTOP = sp;return;
}
function _NS_INTERP($x,$y,$r) {
 $x = +$x;
 $y = +$y;
 $r = +$r;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0, $9 = 0.0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp + 12|0;
 $1 = sp + 8|0;
 $2 = sp + 4|0;
 $3 = sp;
 HEAPF32[$1>>2] = $x;
 HEAPF32[$2>>2] = $y;
 HEAPF32[$3>>2] = $r;
 $4 = +HEAPF32[$3>>2];
 $5 = $4 >= 1.0;
 do {
  if ($5) {
   $6 = +HEAPF32[$1>>2];
   HEAPF32[$0>>2] = $6;
  } else {
   $7 = +HEAPF32[$3>>2];
   $8 = $7 <= 0.0;
   $9 = +HEAPF32[$2>>2];
   if ($8) {
    HEAPF32[$0>>2] = $9;
    break;
   }
   $10 = $9 > 0.0;
   if ($10) {
    $11 = +HEAPF32[$1>>2];
    $12 = +HEAPF32[$2>>2];
    $13 = $11 / $12;
    $14 = +HEAPF32[$3>>2];
    $15 = (+Math_pow((+$13),(+$14)));
    $16 = +HEAPF32[$2>>2];
    $17 = $15 * $16;
    HEAPF32[$0>>2] = $17;
    break;
   } else {
    HEAPF32[$0>>2] = 0.0;
    break;
   }
  }
 } while(0);
 $18 = +HEAPF32[$0>>2];
 STACKTOP = sp;return (+$18);
}
function _vbrpsy_apply_block_type($psv,$nch,$uselongblock,$blocktype_d) {
 $psv = $psv|0;
 $nch = $nch|0;
 $uselongblock = $uselongblock|0;
 $blocktype_d = $blocktype_d|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $blocktype = 0, $chn = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = sp + 20|0;
 $1 = sp + 16|0;
 $2 = sp + 12|0;
 $3 = sp + 8|0;
 $chn = sp + 4|0;
 $blocktype = sp;
 HEAP32[$0>>2] = $psv;
 HEAP32[$1>>2] = $nch;
 HEAP32[$2>>2] = $uselongblock;
 HEAP32[$3>>2] = $blocktype_d;
 HEAP32[$chn>>2] = 0;
 while(1) {
  $4 = HEAP32[$chn>>2]|0;
  $5 = HEAP32[$1>>2]|0;
  $6 = ($4|0)<($5|0);
  if (!($6)) {
   break;
  }
  HEAP32[$blocktype>>2] = 0;
  $7 = HEAP32[$chn>>2]|0;
  $8 = HEAP32[$2>>2]|0;
  $9 = (($8) + ($7<<2)|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ($10|0)!=(0);
  if ($11) {
   $12 = HEAP32[$chn>>2]|0;
   $13 = HEAP32[$0>>2]|0;
   $14 = (($13) + 6232|0);
   $15 = (($14) + ($12<<2)|0);
   $16 = HEAP32[$15>>2]|0;
   $17 = ($16|0)==(2);
   if ($17) {
    HEAP32[$blocktype>>2] = 3;
   }
  } else {
   HEAP32[$blocktype>>2] = 2;
   $18 = HEAP32[$chn>>2]|0;
   $19 = HEAP32[$0>>2]|0;
   $20 = (($19) + 6232|0);
   $21 = (($20) + ($18<<2)|0);
   $22 = HEAP32[$21>>2]|0;
   $23 = ($22|0)==(0);
   if ($23) {
    $24 = HEAP32[$chn>>2]|0;
    $25 = HEAP32[$0>>2]|0;
    $26 = (($25) + 6232|0);
    $27 = (($26) + ($24<<2)|0);
    HEAP32[$27>>2] = 1;
   }
   $28 = HEAP32[$chn>>2]|0;
   $29 = HEAP32[$0>>2]|0;
   $30 = (($29) + 6232|0);
   $31 = (($30) + ($28<<2)|0);
   $32 = HEAP32[$31>>2]|0;
   $33 = ($32|0)==(3);
   if ($33) {
    $34 = HEAP32[$chn>>2]|0;
    $35 = HEAP32[$0>>2]|0;
    $36 = (($35) + 6232|0);
    $37 = (($36) + ($34<<2)|0);
    HEAP32[$37>>2] = 2;
   }
  }
  $38 = HEAP32[$chn>>2]|0;
  $39 = HEAP32[$0>>2]|0;
  $40 = (($39) + 6232|0);
  $41 = (($40) + ($38<<2)|0);
  $42 = HEAP32[$41>>2]|0;
  $43 = HEAP32[$chn>>2]|0;
  $44 = HEAP32[$3>>2]|0;
  $45 = (($44) + ($43<<2)|0);
  HEAP32[$45>>2] = $42;
  $46 = HEAP32[$blocktype>>2]|0;
  $47 = HEAP32[$chn>>2]|0;
  $48 = HEAP32[$0>>2]|0;
  $49 = (($48) + 6232|0);
  $50 = (($49) + ($47<<2)|0);
  HEAP32[$50>>2] = $46;
  $51 = HEAP32[$chn>>2]|0;
  $52 = (($51) + 1)|0;
  HEAP32[$chn>>2] = $52;
 }
 STACKTOP = sp;return;
}
function _pecalc_s($mr,$masking_lower) {
 $mr = $mr|0;
 $masking_lower = +$masking_lower;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0.0, $13 = 0.0, $14 = 0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0.0, $26 = 0.0;
 var $27 = 0.0, $28 = 0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0, $33 = 0, $34 = 0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0;
 var $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0.0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $en = 0, $pe_s = 0;
 var $sb = 0, $sblock = 0, $thm = 0, $x = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = sp + 28|0;
 $1 = sp + 24|0;
 $pe_s = sp + 20|0;
 $sb = sp + 16|0;
 $sblock = sp + 12|0;
 $thm = sp + 8|0;
 $x = sp + 4|0;
 $en = sp;
 HEAP32[$0>>2] = $mr;
 HEAPF32[$1>>2] = $masking_lower;
 HEAPF32[$pe_s>>2] = 309.07000732421875;
 HEAP32[$sb>>2] = 0;
 while(1) {
  $2 = HEAP32[$sb>>2]|0;
  $3 = ($2>>>0)<(12);
  if (!($3)) {
   break;
  }
  HEAP32[$sblock>>2] = 0;
  while(1) {
   $4 = HEAP32[$sblock>>2]|0;
   $5 = ($4>>>0)<(3);
   if (!($5)) {
    break;
   }
   $6 = HEAP32[$sblock>>2]|0;
   $7 = HEAP32[$sb>>2]|0;
   $8 = HEAP32[$0>>2]|0;
   $9 = (($8) + 88|0);
   $10 = (($9) + (($7*12)|0)|0);
   $11 = (($10) + ($6<<2)|0);
   $12 = +HEAPF32[$11>>2];
   HEAPF32[$thm>>2] = $12;
   $13 = +HEAPF32[$thm>>2];
   $14 = $13 > 0.0;
   do {
    if ($14) {
     $15 = +HEAPF32[$thm>>2];
     $16 = +HEAPF32[$1>>2];
     $17 = $15 * $16;
     HEAPF32[$x>>2] = $17;
     $18 = HEAP32[$sblock>>2]|0;
     $19 = HEAP32[$sb>>2]|0;
     $20 = HEAP32[$0>>2]|0;
     $21 = (($20) + 244|0);
     $22 = (($21) + 88|0);
     $23 = (($22) + (($19*12)|0)|0);
     $24 = (($23) + ($18<<2)|0);
     $25 = +HEAPF32[$24>>2];
     HEAPF32[$en>>2] = $25;
     $26 = +HEAPF32[$en>>2];
     $27 = +HEAPF32[$x>>2];
     $28 = $26 > $27;
     if ($28) {
      $29 = +HEAPF32[$en>>2];
      $30 = +HEAPF32[$x>>2];
      $31 = $30 * 1.0E+10;
      $32 = $29 > $31;
      $33 = HEAP32[$sb>>2]|0;
      $34 = (20824 + ($33<<2)|0);
      $35 = +HEAPF32[$34>>2];
      $36 = $35;
      if ($32) {
       $37 = $36 * 23.0258509299404607873;
       $38 = +HEAPF32[$pe_s>>2];
       $39 = $38;
       $40 = $39 + $37;
       $41 = $40;
       HEAPF32[$pe_s>>2] = $41;
       break;
      } else {
       $42 = +HEAPF32[$en>>2];
       $43 = +HEAPF32[$x>>2];
       $44 = $42 / $43;
       $45 = (+_fast_log2($44));
       $46 = $45;
       $47 = $46 * 0.301029995663981142506;
       $48 = $36 * $47;
       $49 = +HEAPF32[$pe_s>>2];
       $50 = $49;
       $51 = $50 + $48;
       $52 = $51;
       HEAPF32[$pe_s>>2] = $52;
       break;
      }
     }
    }
   } while(0);
   $53 = HEAP32[$sblock>>2]|0;
   $54 = (($53) + 1)|0;
   HEAP32[$sblock>>2] = $54;
  }
  $55 = HEAP32[$sb>>2]|0;
  $56 = (($55) + 1)|0;
  HEAP32[$sb>>2] = $56;
 }
 $57 = +HEAPF32[$pe_s>>2];
 STACKTOP = sp;return (+$57);
}
function _pecalc_l($mr,$masking_lower) {
 $mr = $mr|0;
 $masking_lower = +$masking_lower;
 var $0 = 0, $1 = 0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0.0, $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0;
 var $45 = 0, $46 = 0, $47 = 0.0, $5 = 0, $6 = 0, $7 = 0.0, $8 = 0.0, $9 = 0, $en = 0, $pe_l = 0, $sb = 0, $thm = 0, $x = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = sp + 24|0;
 $1 = sp + 20|0;
 $pe_l = sp + 16|0;
 $sb = sp + 12|0;
 $thm = sp + 8|0;
 $x = sp + 4|0;
 $en = sp;
 HEAP32[$0>>2] = $mr;
 HEAPF32[$1>>2] = $masking_lower;
 HEAPF32[$pe_l>>2] = 281.0574951171875;
 HEAP32[$sb>>2] = 0;
 while(1) {
  $2 = HEAP32[$sb>>2]|0;
  $3 = ($2>>>0)<(21);
  if (!($3)) {
   break;
  }
  $4 = HEAP32[$sb>>2]|0;
  $5 = HEAP32[$0>>2]|0;
  $6 = (($5) + ($4<<2)|0);
  $7 = +HEAPF32[$6>>2];
  HEAPF32[$thm>>2] = $7;
  $8 = +HEAPF32[$thm>>2];
  $9 = $8 > 0.0;
  do {
   if ($9) {
    $10 = +HEAPF32[$thm>>2];
    $11 = +HEAPF32[$1>>2];
    $12 = $10 * $11;
    HEAPF32[$x>>2] = $12;
    $13 = HEAP32[$sb>>2]|0;
    $14 = HEAP32[$0>>2]|0;
    $15 = (($14) + 244|0);
    $16 = (($15) + ($13<<2)|0);
    $17 = +HEAPF32[$16>>2];
    HEAPF32[$en>>2] = $17;
    $18 = +HEAPF32[$en>>2];
    $19 = +HEAPF32[$x>>2];
    $20 = $18 > $19;
    if ($20) {
     $21 = +HEAPF32[$en>>2];
     $22 = +HEAPF32[$x>>2];
     $23 = $22 * 1.0E+10;
     $24 = $21 > $23;
     $25 = HEAP32[$sb>>2]|0;
     $26 = (20736 + ($25<<2)|0);
     $27 = +HEAPF32[$26>>2];
     $28 = $27;
     if ($24) {
      $29 = $28 * 23.0258509299404607873;
      $30 = +HEAPF32[$pe_l>>2];
      $31 = $30;
      $32 = $31 + $29;
      $33 = $32;
      HEAPF32[$pe_l>>2] = $33;
      break;
     } else {
      $34 = +HEAPF32[$en>>2];
      $35 = +HEAPF32[$x>>2];
      $36 = $34 / $35;
      $37 = (+_fast_log2($36));
      $38 = $37;
      $39 = $38 * 0.301029995663981142506;
      $40 = $28 * $39;
      $41 = +HEAPF32[$pe_l>>2];
      $42 = $41;
      $43 = $42 + $40;
      $44 = $43;
      HEAPF32[$pe_l>>2] = $44;
      break;
     }
    }
   }
  } while(0);
  $45 = HEAP32[$sb>>2]|0;
  $46 = (($45) + 1)|0;
  HEAP32[$sb>>2] = $46;
 }
 $47 = +HEAPF32[$pe_l>>2];
 STACKTOP = sp;return (+$47);
}
function _psymodel_init($gfp) {
 $gfp = $gfp|0;
 var $$ = 0.0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0.0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0.0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0.0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0.0, $139 = 0.0, $14 = 0, $140 = 0, $141 = 0, $142 = 0.0, $143 = 0.0, $144 = 0, $145 = 0.0, $146 = 0, $147 = 0, $148 = 0.0, $149 = 0.0, $15 = 0.0, $150 = 0.0;
 var $151 = 0.0, $152 = 0.0, $153 = 0.0, $154 = 0.0, $155 = 0.0, $156 = 0.0, $157 = 0.0, $158 = 0, $159 = 0, $16 = 0.0, $160 = 0.0, $161 = 0.0, $162 = 0.0, $163 = 0.0, $164 = 0.0, $165 = 0.0, $166 = 0.0, $167 = 0.0, $168 = 0.0, $169 = 0.0;
 var $17 = 0, $170 = 0.0, $171 = 0.0, $172 = 0.0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0;
 var $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0.0, $201 = 0, $202 = 0.0, $203 = 0.0, $204 = 0.0;
 var $205 = 0.0, $206 = 0.0, $207 = 0, $208 = 0.0, $209 = 0.0, $21 = 0, $210 = 0.0, $211 = 0.0, $212 = 0.0, $213 = 0.0, $214 = 0.0, $215 = 0.0, $216 = 0.0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0.0;
 var $223 = 0.0, $224 = 0.0, $225 = 0.0, $226 = 0.0, $227 = 0.0, $228 = 0, $229 = 0.0, $23 = 0, $230 = 0.0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0.0, $236 = 0.0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0;
 var $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0.0, $246 = 0.0, $247 = 0.0, $248 = 0.0, $249 = 0.0, $25 = 0, $250 = 0.0, $251 = 0.0, $252 = 0, $253 = 0.0, $254 = 0.0, $255 = 0.0, $256 = 0, $257 = 0.0, $258 = 0.0, $259 = 0;
 var $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0.0, $264 = 0.0, $265 = 0.0, $266 = 0.0, $267 = 0.0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0.0, $274 = 0.0, $275 = 0.0, $276 = 0, $277 = 0;
 var $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0.0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0.0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0;
 var $296 = 0, $297 = 0.0, $298 = 0.0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0.0, $302 = 0.0, $303 = 0, $304 = 0.0, $305 = 0, $306 = 0, $307 = 0.0, $308 = 0.0, $309 = 0.0, $31 = 0, $310 = 0.0, $311 = 0.0, $312 = 0.0;
 var $313 = 0.0, $314 = 0.0, $315 = 0.0, $316 = 0.0, $317 = 0, $318 = 0, $319 = 0.0, $32 = 0, $320 = 0.0, $321 = 0.0, $322 = 0.0, $323 = 0.0, $324 = 0.0, $325 = 0.0, $326 = 0.0, $327 = 0.0, $328 = 0.0, $329 = 0.0, $33 = 0, $330 = 0.0;
 var $331 = 0.0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0.0, $343 = 0, $344 = 0.0, $345 = 0.0, $346 = 0.0, $347 = 0.0, $348 = 0.0, $349 = 0;
 var $35 = 0, $350 = 0.0, $351 = 0.0, $352 = 0.0, $353 = 0.0, $354 = 0.0, $355 = 0.0, $356 = 0.0, $357 = 0.0, $358 = 0.0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0.0, $366 = 0.0, $367 = 0.0;
 var $368 = 0.0, $369 = 0.0, $37 = 0, $370 = 0.0, $371 = 0, $372 = 0.0, $373 = 0.0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0.0, $379 = 0.0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0;
 var $386 = 0, $387 = 0, $388 = 0.0, $389 = 0.0, $39 = 0, $390 = 0.0, $391 = 0.0, $392 = 0.0, $393 = 0.0, $394 = 0, $395 = 0, $396 = 0.0, $397 = 0.0, $398 = 0, $399 = 0.0, $4 = 0, $40 = 0, $400 = 0.0, $401 = 0.0, $402 = 0.0;
 var $403 = 0.0, $404 = 0.0, $405 = 0.0, $406 = 0, $407 = 0, $408 = 0.0, $409 = 0.0, $41 = 0, $410 = 0, $411 = 0.0, $412 = 0.0, $413 = 0.0, $414 = 0.0, $415 = 0.0, $416 = 0.0, $417 = 0.0, $418 = 0.0, $419 = 0, $42 = 0, $420 = 0.0;
 var $421 = 0.0, $422 = 0.0, $423 = 0, $424 = 0.0, $425 = 0.0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0.0, $431 = 0.0, $432 = 0.0, $433 = 0.0, $434 = 0.0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0;
 var $44 = 0, $440 = 0, $441 = 0.0, $442 = 0.0, $443 = 0.0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0;
 var $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0.0, $467 = 0.0, $468 = 0.0, $469 = 0.0, $47 = 0, $470 = 0.0, $471 = 0.0, $472 = 0.0, $473 = 0, $474 = 0, $475 = 0;
 var $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0.0, $482 = 0.0, $483 = 0.0, $484 = 0, $485 = 0, $486 = 0, $487 = 0.0, $488 = 0.0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0;
 var $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0;
 var $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0.0, $522 = 0.0, $523 = 0.0, $524 = 0.0, $525 = 0.0, $526 = 0.0, $527 = 0.0, $528 = 0.0, $529 = 0;
 var $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0;
 var $548 = 0.0, $549 = 0.0, $55 = 0, $550 = 0, $551 = 0, $552 = 0.0, $553 = 0.0, $554 = 0.0, $555 = 0, $556 = 0.0, $557 = 0.0, $558 = 0.0, $559 = 0.0, $56 = 0, $560 = 0.0, $561 = 0.0, $562 = 0.0, $563 = 0, $564 = 0, $565 = 0;
 var $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0.0, $576 = 0.0, $577 = 0.0, $578 = 0, $579 = 0, $58 = 0, $580 = 0.0, $581 = 0.0, $582 = 0.0, $583 = 0.0;
 var $584 = 0, $585 = 0, $586 = 0, $587 = 0.0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0.0, $595 = 0.0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0;
 var $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0;
 var $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0.0, $637 = 0;
 var $638 = 0, $639 = 0.0, $64 = 0, $640 = 0.0, $641 = 0, $642 = 0.0, $643 = 0, $644 = 0.0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0.0, $654 = 0, $655 = 0;
 var $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0.0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0.0, $667 = 0, $668 = 0, $669 = 0.0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0;
 var $674 = 0.0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0.0, $681 = 0.0, $682 = 0.0, $683 = 0.0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0;
 var $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0.0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0.0, $702 = 0.0, $703 = 0.0, $704 = 0.0, $705 = 0.0, $706 = 0.0, $707 = 0.0, $708 = 0, $709 = 0;
 var $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0;
 var $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0.0, $733 = 0, $734 = 0, $735 = 0, $736 = 0.0, $737 = 0.0, $738 = 0.0, $739 = 0.0, $74 = 0, $740 = 0.0, $741 = 0.0, $742 = 0.0, $743 = 0, $744 = 0, $745 = 0;
 var $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0.0, $761 = 0, $762 = 0, $763 = 0;
 var $764 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $b = 0, $bval = 0, $bval_width = 0, $bvl_a = 0, $bvl_b = 0, $cfg = 0, $eql_balance = 0, $freq = 0, $freq3 = 0, $freq5 = 0, $freq_inc = 0, $gd = 0, $gfc = 0, $i = 0;
 var $j = 0, $k = 0, $level = 0, $level4 = 0, $m = 0, $m7 = 0, $minval_low = 0, $msfix = 0, $norm = 0, $psv = 0, $sb = 0, $sfreq = 0, $sk_l = 0, $sk_s = 0, $snr = 0, $snr2 = 0, $snr_l_a = 0, $snr_l_b = 0, $snr_s_a = 0, $snr_s_b = 0;
 var $x = 0, $x1 = 0, $x6 = 0, $xav = 0, $xbv = 0, $y = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 944|0;
 $0 = sp + 936|0;
 $1 = sp + 932|0;
 $gfc = sp + 928|0;
 $cfg = sp + 924|0;
 $psv = sp + 920|0;
 $gd = sp + 916|0;
 $i = sp + 912|0;
 $j = sp + 908|0;
 $b = sp + 904|0;
 $sb = sp + 900|0;
 $k = sp + 896|0;
 $bvl_a = sp + 892|0;
 $bvl_b = sp + 888|0;
 $snr_l_a = sp + 884|0;
 $snr_l_b = sp + 880|0;
 $snr_s_a = sp + 876|0;
 $snr_s_b = sp + 872|0;
 $bval = sp + 616|0;
 $bval_width = sp + 360|0;
 $norm = sp + 104|0;
 $sfreq = sp + 100|0;
 $xav = sp + 96|0;
 $xbv = sp + 92|0;
 $minval_low = sp + 88|0;
 $snr = sp + 24|0;
 $x = sp + 16|0;
 $freq = sp + 84|0;
 $level = sp + 80|0;
 $x1 = sp + 8|0;
 $snr2 = sp;
 $freq3 = sp + 76|0;
 $level4 = sp + 72|0;
 $msfix = sp + 68|0;
 $freq5 = sp + 64|0;
 $freq_inc = sp + 60|0;
 $eql_balance = sp + 56|0;
 $x6 = sp + 52|0;
 $y = sp + 48|0;
 $sk_s = sp + 44|0;
 $sk_l = sp + 40|0;
 $m = sp + 36|0;
 $m7 = sp + 32|0;
 HEAP32[$1>>2] = $gfp;
 $2 = HEAP32[$1>>2]|0;
 $3 = (($2) + 288|0);
 $4 = HEAP32[$3>>2]|0;
 HEAP32[$gfc>>2] = $4;
 $5 = HEAP32[$gfc>>2]|0;
 $6 = (($5) + 16|0);
 HEAP32[$cfg>>2] = $6;
 $7 = HEAP32[$gfc>>2]|0;
 $8 = (($7) + 21564|0);
 HEAP32[$psv>>2] = $8;
 HEAPF32[$bvl_a>>2] = 13.0;
 HEAPF32[$bvl_b>>2] = 24.0;
 HEAPF32[$snr_l_a>>2] = 0.0;
 HEAPF32[$snr_l_b>>2] = 0.0;
 HEAPF32[$snr_s_a>>2] = -8.25;
 HEAPF32[$snr_s_b>>2] = -4.5;
 $9 = HEAP32[$cfg>>2]|0;
 $10 = (($9) + 48|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (+($11|0));
 HEAPF32[$sfreq>>2] = $12;
 HEAPF32[$xav>>2] = 10.0;
 HEAPF32[$xbv>>2] = 12.0;
 $13 = HEAP32[$cfg>>2]|0;
 $14 = (($13) + 264|0);
 $15 = +HEAPF32[$14>>2];
 $16 = 0.0 - $15;
 HEAPF32[$minval_low>>2] = $16;
 $17 = HEAP32[$gfc>>2]|0;
 $18 = (($17) + 85800|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = ($19|0)!=(0|0);
 if ($20) {
  HEAP32[$0>>2] = 0;
  $764 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($764|0);
 }
 _memset(($norm|0),0,256)|0;
 $21 = (_calloc(1,6504)|0);
 HEAP32[$gd>>2] = $21;
 $22 = HEAP32[$gd>>2]|0;
 $23 = HEAP32[$gfc>>2]|0;
 $24 = (($23) + 85800|0);
 HEAP32[$24>>2] = $22;
 $25 = HEAP32[$1>>2]|0;
 $26 = (($25) + 144|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = HEAP32[$gd>>2]|0;
 $29 = (($28) + 6500|0);
 HEAP32[$29>>2] = $27;
 $30 = HEAP32[$psv>>2]|0;
 $31 = (($30) + 6232|0);
 $32 = (($31) + 4|0);
 HEAP32[$32>>2] = 0;
 $33 = HEAP32[$psv>>2]|0;
 $34 = (($33) + 6232|0);
 HEAP32[$34>>2] = 0;
 HEAP32[$i>>2] = 0;
 while(1) {
  $35 = HEAP32[$i>>2]|0;
  $36 = ($35|0)<(4);
  if (!($36)) {
   break;
  }
  HEAP32[$j>>2] = 0;
  while(1) {
   $37 = HEAP32[$j>>2]|0;
   $38 = ($37|0)<(64);
   if (!($38)) {
    break;
   }
   $39 = HEAP32[$j>>2]|0;
   $40 = HEAP32[$i>>2]|0;
   $41 = HEAP32[$psv>>2]|0;
   $42 = (($41) + ($40<<8)|0);
   $43 = (($42) + ($39<<2)|0);
   HEAPF32[$43>>2] = 100000002004087734272.0;
   $44 = HEAP32[$j>>2]|0;
   $45 = HEAP32[$i>>2]|0;
   $46 = HEAP32[$psv>>2]|0;
   $47 = (($46) + 1024|0);
   $48 = (($47) + ($45<<8)|0);
   $49 = (($48) + ($44<<2)|0);
   HEAPF32[$49>>2] = 100000002004087734272.0;
   $50 = HEAP32[$j>>2]|0;
   $51 = HEAP32[$i>>2]|0;
   $52 = HEAP32[$psv>>2]|0;
   $53 = (($52) + 3072|0);
   $54 = (($53) + ($51<<8)|0);
   $55 = (($54) + ($50<<2)|0);
   HEAPF32[$55>>2] = 1.0;
   $56 = HEAP32[$j>>2]|0;
   $57 = HEAP32[$i>>2]|0;
   $58 = HEAP32[$psv>>2]|0;
   $59 = (($58) + 2048|0);
   $60 = (($59) + ($57<<8)|0);
   $61 = (($60) + ($56<<2)|0);
   HEAPF32[$61>>2] = 1.0;
   $62 = HEAP32[$j>>2]|0;
   $63 = (($62) + 1)|0;
   HEAP32[$j>>2] = $63;
  }
  HEAP32[$sb>>2] = 0;
  while(1) {
   $64 = HEAP32[$sb>>2]|0;
   $65 = ($64|0)<(22);
   if (!($65)) {
    break;
   }
   $66 = HEAP32[$sb>>2]|0;
   $67 = HEAP32[$i>>2]|0;
   $68 = HEAP32[$psv>>2]|0;
   $69 = (($68) + 5072|0);
   $70 = (($69) + (($67*244)|0)|0);
   $71 = (($70) + ($66<<2)|0);
   HEAPF32[$71>>2] = 100000002004087734272.0;
   $72 = HEAP32[$sb>>2]|0;
   $73 = HEAP32[$i>>2]|0;
   $74 = HEAP32[$psv>>2]|0;
   $75 = (($74) + 4096|0);
   $76 = (($75) + (($73*244)|0)|0);
   $77 = (($76) + ($72<<2)|0);
   HEAPF32[$77>>2] = 100000002004087734272.0;
   $78 = HEAP32[$sb>>2]|0;
   $79 = (($78) + 1)|0;
   HEAP32[$sb>>2] = $79;
  }
  HEAP32[$j>>2] = 0;
  while(1) {
   $80 = HEAP32[$j>>2]|0;
   $81 = ($80|0)<(3);
   if (!($81)) {
    break;
   }
   HEAP32[$sb>>2] = 0;
   while(1) {
    $82 = HEAP32[$sb>>2]|0;
    $83 = ($82|0)<(13);
    if (!($83)) {
     break;
    }
    $84 = HEAP32[$j>>2]|0;
    $85 = HEAP32[$sb>>2]|0;
    $86 = HEAP32[$i>>2]|0;
    $87 = HEAP32[$psv>>2]|0;
    $88 = (($87) + 5072|0);
    $89 = (($88) + (($86*244)|0)|0);
    $90 = (($89) + 88|0);
    $91 = (($90) + (($85*12)|0)|0);
    $92 = (($91) + ($84<<2)|0);
    HEAPF32[$92>>2] = 100000002004087734272.0;
    $93 = HEAP32[$j>>2]|0;
    $94 = HEAP32[$sb>>2]|0;
    $95 = HEAP32[$i>>2]|0;
    $96 = HEAP32[$psv>>2]|0;
    $97 = (($96) + 4096|0);
    $98 = (($97) + (($95*244)|0)|0);
    $99 = (($98) + 88|0);
    $100 = (($99) + (($94*12)|0)|0);
    $101 = (($100) + ($93<<2)|0);
    HEAPF32[$101>>2] = 100000002004087734272.0;
    $102 = HEAP32[$sb>>2]|0;
    $103 = (($102) + 1)|0;
    HEAP32[$sb>>2] = $103;
   }
   $104 = HEAP32[$i>>2]|0;
   $105 = HEAP32[$psv>>2]|0;
   $106 = (($105) + 6216|0);
   $107 = (($106) + ($104<<2)|0);
   HEAP32[$107>>2] = 0;
   $108 = HEAP32[$j>>2]|0;
   $109 = (($108) + 1)|0;
   HEAP32[$j>>2] = $109;
  }
  HEAP32[$j>>2] = 0;
  while(1) {
   $110 = HEAP32[$j>>2]|0;
   $111 = ($110|0)<(9);
   if (!($111)) {
    break;
   }
   $112 = HEAP32[$j>>2]|0;
   $113 = HEAP32[$i>>2]|0;
   $114 = HEAP32[$psv>>2]|0;
   $115 = (($114) + 6072|0);
   $116 = (($115) + (($113*36)|0)|0);
   $117 = (($116) + ($112<<2)|0);
   HEAPF32[$117>>2] = 10.0;
   $118 = HEAP32[$j>>2]|0;
   $119 = (($118) + 1)|0;
   HEAP32[$j>>2] = $119;
  }
  $120 = HEAP32[$i>>2]|0;
  $121 = (($120) + 1)|0;
  HEAP32[$i>>2] = $121;
 }
 $122 = HEAP32[$psv>>2]|0;
 $123 = (($122) + 6048|0);
 $124 = (($123) + 4|0);
 HEAPF32[$124>>2] = 0.0;
 $125 = HEAP32[$psv>>2]|0;
 $126 = (($125) + 6048|0);
 HEAPF32[$126>>2] = 0.0;
 $127 = HEAP32[$gd>>2]|0;
 $128 = +HEAPF32[$sfreq>>2];
 $129 = HEAP32[$gfc>>2]|0;
 $130 = (($129) + 21360|0);
 _init_numline($127,$128,1024,576,22,$130);
 $131 = HEAP32[$gd>>2]|0;
 $132 = +HEAPF32[$sfreq>>2];
 _compute_bark_values($131,$132,1024,$bval,$bval_width);
 HEAP32[$i>>2] = 0;
 while(1) {
  $133 = HEAP32[$i>>2]|0;
  $134 = HEAP32[$gd>>2]|0;
  $135 = (($134) + 2148|0);
  $136 = HEAP32[$135>>2]|0;
  $137 = ($133|0)<($136|0);
  if (!($137)) {
   break;
  }
  $138 = +HEAPF32[$snr_l_a>>2];
  $139 = $138;
  HEAPF64[$snr>>3] = $139;
  $140 = HEAP32[$i>>2]|0;
  $141 = (($bval) + ($140<<2)|0);
  $142 = +HEAPF32[$141>>2];
  $143 = +HEAPF32[$bvl_a>>2];
  $144 = $142 >= $143;
  if ($144) {
   $145 = +HEAPF32[$snr_l_b>>2];
   $146 = HEAP32[$i>>2]|0;
   $147 = (($bval) + ($146<<2)|0);
   $148 = +HEAPF32[$147>>2];
   $149 = +HEAPF32[$bvl_a>>2];
   $150 = $148 - $149;
   $151 = $145 * $150;
   $152 = +HEAPF32[$bvl_b>>2];
   $153 = +HEAPF32[$bvl_a>>2];
   $154 = $152 - $153;
   $155 = $151 / $154;
   $156 = +HEAPF32[$snr_l_a>>2];
   $157 = +HEAPF32[$bvl_b>>2];
   $158 = HEAP32[$i>>2]|0;
   $159 = (($bval) + ($158<<2)|0);
   $160 = +HEAPF32[$159>>2];
   $161 = $157 - $160;
   $162 = $156 * $161;
   $163 = +HEAPF32[$bvl_b>>2];
   $164 = +HEAPF32[$bvl_a>>2];
   $165 = $163 - $164;
   $166 = $162 / $165;
   $167 = $155 + $166;
   $168 = $167;
   HEAPF64[$snr>>3] = $168;
  }
  $169 = +HEAPF64[$snr>>3];
  $170 = $169 / 10.0;
  $171 = (+Math_pow(10.0,(+$170)));
  $172 = $171;
  $173 = HEAP32[$i>>2]|0;
  $174 = (($norm) + ($173<<2)|0);
  HEAPF32[$174>>2] = $172;
  $175 = HEAP32[$i>>2]|0;
  $176 = (($175) + 1)|0;
  HEAP32[$i>>2] = $176;
 }
 $177 = HEAP32[$gd>>2]|0;
 $178 = (($177) + 2156|0);
 $179 = HEAP32[$gd>>2]|0;
 $180 = (($179) + 1204|0);
 $181 = HEAP32[$gd>>2]|0;
 $182 = (($181) + 2148|0);
 $183 = HEAP32[$182>>2]|0;
 $184 = (_init_s3_values($178,$180,$183,$bval,$bval_width,$norm)|0);
 HEAP32[$i>>2] = $184;
 $185 = HEAP32[$i>>2]|0;
 $186 = ($185|0)!=(0);
 if ($186) {
  $187 = HEAP32[$i>>2]|0;
  HEAP32[$0>>2] = $187;
  $764 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($764|0);
 }
 HEAP32[$j>>2] = 0;
 HEAP32[$i>>2] = 0;
 while(1) {
  $188 = HEAP32[$i>>2]|0;
  $189 = HEAP32[$gd>>2]|0;
  $190 = (($189) + 2148|0);
  $191 = HEAP32[$190>>2]|0;
  $192 = ($188|0)<($191|0);
  if (!($192)) {
   break;
  }
  HEAPF64[$x>>3] = 9.99999999999999953876E+36;
  HEAP32[$k>>2] = 0;
  while(1) {
   $193 = HEAP32[$k>>2]|0;
   $194 = HEAP32[$i>>2]|0;
   $195 = HEAP32[$gd>>2]|0;
   $196 = (($195) + 1716|0);
   $197 = (($196) + ($194<<2)|0);
   $198 = HEAP32[$197>>2]|0;
   $199 = ($193|0)<($198|0);
   if (!($199)) {
    break;
   }
   $200 = +HEAPF32[$sfreq>>2];
   $201 = HEAP32[$j>>2]|0;
   $202 = (+($201|0));
   $203 = $200 * $202;
   $204 = $203;
   $205 = $204 / 1024000.0;
   $206 = $205;
   HEAPF32[$freq>>2] = $206;
   $207 = HEAP32[$cfg>>2]|0;
   $208 = +HEAPF32[$freq>>2];
   $209 = $208 * 1000.0;
   $210 = (+_ATHformula($207,$209));
   $211 = $210 - 20.0;
   HEAPF32[$level>>2] = $211;
   $212 = +HEAPF32[$level>>2];
   $213 = $212;
   $214 = 0.100000000000000005551 * $213;
   $215 = (+Math_pow(10.0,(+$214)));
   $216 = $215;
   HEAPF32[$level>>2] = $216;
   $217 = HEAP32[$i>>2]|0;
   $218 = HEAP32[$gd>>2]|0;
   $219 = (($218) + 1716|0);
   $220 = (($219) + ($217<<2)|0);
   $221 = HEAP32[$220>>2]|0;
   $222 = (+($221|0));
   $223 = +HEAPF32[$level>>2];
   $224 = $223 * $222;
   HEAPF32[$level>>2] = $224;
   $225 = +HEAPF64[$x>>3];
   $226 = +HEAPF32[$level>>2];
   $227 = $226;
   $228 = $225 > $227;
   if ($228) {
    $229 = +HEAPF32[$level>>2];
    $230 = $229;
    HEAPF64[$x>>3] = $230;
   }
   $231 = HEAP32[$k>>2]|0;
   $232 = (($231) + 1)|0;
   HEAP32[$k>>2] = $232;
   $233 = HEAP32[$j>>2]|0;
   $234 = (($233) + 1)|0;
   HEAP32[$j>>2] = $234;
  }
  $235 = +HEAPF64[$x>>3];
  $236 = $235;
  $237 = HEAP32[$i>>2]|0;
  $238 = HEAP32[$gfc>>2]|0;
  $239 = (($238) + 85796|0);
  $240 = HEAP32[$239>>2]|0;
  $241 = (($240) + 212|0);
  $242 = (($241) + ($237<<2)|0);
  HEAPF32[$242>>2] = $236;
  $243 = HEAP32[$i>>2]|0;
  $244 = (($bval) + ($243<<2)|0);
  $245 = +HEAPF32[$244>>2];
  $246 = +HEAPF32[$xav>>2];
  $247 = $245 / $246;
  $248 = $247;
  $249 = $248 - 1.0;
  $250 = 20.0 * $249;
  HEAPF64[$x>>3] = $250;
  $251 = +HEAPF64[$x>>3];
  $252 = $251 > 6.0;
  if ($252) {
   HEAPF64[$x>>3] = 30.0;
  }
  $253 = +HEAPF64[$x>>3];
  $254 = +HEAPF32[$minval_low>>2];
  $255 = $254;
  $256 = $253 < $255;
  if ($256) {
   $257 = +HEAPF32[$minval_low>>2];
   $258 = $257;
   HEAPF64[$x>>3] = $258;
  }
  $259 = HEAP32[$cfg>>2]|0;
  $260 = (($259) + 48|0);
  $261 = HEAP32[$260>>2]|0;
  $262 = ($261|0)<(44000);
  if ($262) {
   HEAPF64[$x>>3] = 30.0;
  }
  $263 = +HEAPF64[$x>>3];
  $264 = $263 - 8.0;
  HEAPF64[$x>>3] = $264;
  $265 = +HEAPF64[$x>>3];
  $266 = $265 / 10.0;
  $267 = (+Math_pow(10.0,(+$266)));
  $268 = HEAP32[$i>>2]|0;
  $269 = HEAP32[$gd>>2]|0;
  $270 = (($269) + 1716|0);
  $271 = (($270) + ($268<<2)|0);
  $272 = HEAP32[$271>>2]|0;
  $273 = (+($272|0));
  $274 = $267 * $273;
  $275 = $274;
  $276 = HEAP32[$i>>2]|0;
  $277 = HEAP32[$gd>>2]|0;
  $278 = (($277) + 256|0);
  $279 = (($278) + ($276<<2)|0);
  HEAPF32[$279>>2] = $275;
  $280 = HEAP32[$i>>2]|0;
  $281 = (($280) + 1)|0;
  HEAP32[$i>>2] = $281;
 }
 $282 = HEAP32[$gd>>2]|0;
 $283 = (($282) + 2160|0);
 $284 = +HEAPF32[$sfreq>>2];
 $285 = HEAP32[$gfc>>2]|0;
 $286 = (($285) + 21360|0);
 $287 = (($286) + 92|0);
 _init_numline($283,$284,256,192,13,$287);
 $288 = HEAP32[$gd>>2]|0;
 $289 = (($288) + 2160|0);
 $290 = +HEAPF32[$sfreq>>2];
 _compute_bark_values($289,$290,256,$bval,$bval_width);
 HEAP32[$j>>2] = 0;
 HEAP32[$i>>2] = 0;
 while(1) {
  $291 = HEAP32[$i>>2]|0;
  $292 = HEAP32[$gd>>2]|0;
  $293 = (($292) + 2160|0);
  $294 = (($293) + 2148|0);
  $295 = HEAP32[$294>>2]|0;
  $296 = ($291|0)<($295|0);
  if (!($296)) {
   break;
  }
  $297 = +HEAPF32[$snr_s_a>>2];
  $298 = $297;
  HEAPF64[$snr2>>3] = $298;
  $299 = HEAP32[$i>>2]|0;
  $300 = (($bval) + ($299<<2)|0);
  $301 = +HEAPF32[$300>>2];
  $302 = +HEAPF32[$bvl_a>>2];
  $303 = $301 >= $302;
  if ($303) {
   $304 = +HEAPF32[$snr_s_b>>2];
   $305 = HEAP32[$i>>2]|0;
   $306 = (($bval) + ($305<<2)|0);
   $307 = +HEAPF32[$306>>2];
   $308 = +HEAPF32[$bvl_a>>2];
   $309 = $307 - $308;
   $310 = $304 * $309;
   $311 = +HEAPF32[$bvl_b>>2];
   $312 = +HEAPF32[$bvl_a>>2];
   $313 = $311 - $312;
   $314 = $310 / $313;
   $315 = +HEAPF32[$snr_s_a>>2];
   $316 = +HEAPF32[$bvl_b>>2];
   $317 = HEAP32[$i>>2]|0;
   $318 = (($bval) + ($317<<2)|0);
   $319 = +HEAPF32[$318>>2];
   $320 = $316 - $319;
   $321 = $315 * $320;
   $322 = +HEAPF32[$bvl_b>>2];
   $323 = +HEAPF32[$bvl_a>>2];
   $324 = $322 - $323;
   $325 = $321 / $324;
   $326 = $314 + $325;
   $327 = $326;
   HEAPF64[$snr2>>3] = $327;
  }
  $328 = +HEAPF64[$snr2>>3];
  $329 = $328 / 10.0;
  $330 = (+Math_pow(10.0,(+$329)));
  $331 = $330;
  $332 = HEAP32[$i>>2]|0;
  $333 = (($norm) + ($332<<2)|0);
  HEAPF32[$333>>2] = $331;
  HEAPF64[$x1>>3] = 9.99999999999999953876E+36;
  HEAP32[$k>>2] = 0;
  while(1) {
   $334 = HEAP32[$k>>2]|0;
   $335 = HEAP32[$i>>2]|0;
   $336 = HEAP32[$gd>>2]|0;
   $337 = (($336) + 2160|0);
   $338 = (($337) + 1716|0);
   $339 = (($338) + ($335<<2)|0);
   $340 = HEAP32[$339>>2]|0;
   $341 = ($334|0)<($340|0);
   if (!($341)) {
    break;
   }
   $342 = +HEAPF32[$sfreq>>2];
   $343 = HEAP32[$j>>2]|0;
   $344 = (+($343|0));
   $345 = $342 * $344;
   $346 = $345;
   $347 = $346 / 256000.0;
   $348 = $347;
   HEAPF32[$freq3>>2] = $348;
   $349 = HEAP32[$cfg>>2]|0;
   $350 = +HEAPF32[$freq3>>2];
   $351 = $350 * 1000.0;
   $352 = (+_ATHformula($349,$351));
   $353 = $352 - 20.0;
   HEAPF32[$level4>>2] = $353;
   $354 = +HEAPF32[$level4>>2];
   $355 = $354;
   $356 = 0.100000000000000005551 * $355;
   $357 = (+Math_pow(10.0,(+$356)));
   $358 = $357;
   HEAPF32[$level4>>2] = $358;
   $359 = HEAP32[$i>>2]|0;
   $360 = HEAP32[$gd>>2]|0;
   $361 = (($360) + 2160|0);
   $362 = (($361) + 1716|0);
   $363 = (($362) + ($359<<2)|0);
   $364 = HEAP32[$363>>2]|0;
   $365 = (+($364|0));
   $366 = +HEAPF32[$level4>>2];
   $367 = $366 * $365;
   HEAPF32[$level4>>2] = $367;
   $368 = +HEAPF64[$x1>>3];
   $369 = +HEAPF32[$level4>>2];
   $370 = $369;
   $371 = $368 > $370;
   if ($371) {
    $372 = +HEAPF32[$level4>>2];
    $373 = $372;
    HEAPF64[$x1>>3] = $373;
   }
   $374 = HEAP32[$k>>2]|0;
   $375 = (($374) + 1)|0;
   HEAP32[$k>>2] = $375;
   $376 = HEAP32[$j>>2]|0;
   $377 = (($376) + 1)|0;
   HEAP32[$j>>2] = $377;
  }
  $378 = +HEAPF64[$x1>>3];
  $379 = $378;
  $380 = HEAP32[$i>>2]|0;
  $381 = HEAP32[$gfc>>2]|0;
  $382 = (($381) + 85796|0);
  $383 = HEAP32[$382>>2]|0;
  $384 = (($383) + 468|0);
  $385 = (($384) + ($380<<2)|0);
  HEAPF32[$385>>2] = $379;
  $386 = HEAP32[$i>>2]|0;
  $387 = (($bval) + ($386<<2)|0);
  $388 = +HEAPF32[$387>>2];
  $389 = +HEAPF32[$xbv>>2];
  $390 = $388 / $389;
  $391 = $390;
  $392 = $391 - 1.0;
  $393 = 7.0 * $392;
  HEAPF64[$x1>>3] = $393;
  $394 = HEAP32[$i>>2]|0;
  $395 = (($bval) + ($394<<2)|0);
  $396 = +HEAPF32[$395>>2];
  $397 = +HEAPF32[$xbv>>2];
  $398 = $396 > $397;
  if ($398) {
   $399 = +HEAPF64[$x1>>3];
   $400 = 1.0 + $399;
   $401 = (+Math_log((+$400)));
   $402 = $401 * 3.10000000000000008882;
   $403 = 1.0 + $402;
   $404 = +HEAPF64[$x1>>3];
   $405 = $404 * $403;
   HEAPF64[$x1>>3] = $405;
  }
  $406 = HEAP32[$i>>2]|0;
  $407 = (($bval) + ($406<<2)|0);
  $408 = +HEAPF32[$407>>2];
  $409 = +HEAPF32[$xbv>>2];
  $410 = $408 < $409;
  if ($410) {
   $411 = +HEAPF64[$x1>>3];
   $412 = 1.0 - $411;
   $413 = (+Math_log((+$412)));
   $414 = $413 * 2.29999999999999982236;
   $415 = 1.0 + $414;
   $416 = +HEAPF64[$x1>>3];
   $417 = $416 * $415;
   HEAPF64[$x1>>3] = $417;
  }
  $418 = +HEAPF64[$x1>>3];
  $419 = $418 > 6.0;
  if ($419) {
   HEAPF64[$x1>>3] = 30.0;
  }
  $420 = +HEAPF64[$x1>>3];
  $421 = +HEAPF32[$minval_low>>2];
  $422 = $421;
  $423 = $420 < $422;
  if ($423) {
   $424 = +HEAPF32[$minval_low>>2];
   $425 = $424;
   HEAPF64[$x1>>3] = $425;
  }
  $426 = HEAP32[$cfg>>2]|0;
  $427 = (($426) + 48|0);
  $428 = HEAP32[$427>>2]|0;
  $429 = ($428|0)<(44000);
  if ($429) {
   HEAPF64[$x1>>3] = 30.0;
  }
  $430 = +HEAPF64[$x1>>3];
  $431 = $430 - 8.0;
  HEAPF64[$x1>>3] = $431;
  $432 = +HEAPF64[$x1>>3];
  $433 = $432 / 10.0;
  $434 = (+Math_pow(10.0,(+$433)));
  $435 = HEAP32[$i>>2]|0;
  $436 = HEAP32[$gd>>2]|0;
  $437 = (($436) + 2160|0);
  $438 = (($437) + 1716|0);
  $439 = (($438) + ($435<<2)|0);
  $440 = HEAP32[$439>>2]|0;
  $441 = (+($440|0));
  $442 = $434 * $441;
  $443 = $442;
  $444 = HEAP32[$i>>2]|0;
  $445 = HEAP32[$gd>>2]|0;
  $446 = (($445) + 2160|0);
  $447 = (($446) + 256|0);
  $448 = (($447) + ($444<<2)|0);
  HEAPF32[$448>>2] = $443;
  $449 = HEAP32[$i>>2]|0;
  $450 = (($449) + 1)|0;
  HEAP32[$i>>2] = $450;
 }
 $451 = HEAP32[$gd>>2]|0;
 $452 = (($451) + 2160|0);
 $453 = (($452) + 2156|0);
 $454 = HEAP32[$gd>>2]|0;
 $455 = (($454) + 2160|0);
 $456 = (($455) + 1204|0);
 $457 = HEAP32[$gd>>2]|0;
 $458 = (($457) + 2160|0);
 $459 = (($458) + 2148|0);
 $460 = HEAP32[$459>>2]|0;
 $461 = (_init_s3_values($453,$456,$460,$bval,$bval_width,$norm)|0);
 HEAP32[$i>>2] = $461;
 $462 = HEAP32[$i>>2]|0;
 $463 = ($462|0)!=(0);
 if ($463) {
  $464 = HEAP32[$i>>2]|0;
  HEAP32[$0>>2] = $464;
  $764 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($764|0);
 }
 _init_mask_add_max_values();
 $465 = HEAP32[$gfc>>2]|0;
 _init_fft($465);
 $466 = +HEAPF32[$sfreq>>2];
 $467 = $466;
 $468 = 0.0100000000000000002082 * $467;
 $469 = $468 / 192.0;
 $470 = -2.30258509299404590109 / $469;
 $471 = (+Math_exp((+$470)));
 $472 = $471;
 $473 = HEAP32[$gd>>2]|0;
 $474 = (($473) + 6496|0);
 HEAPF32[$474>>2] = $472;
 HEAPF32[$msfix>>2] = 3.5;
 $475 = HEAP32[$cfg>>2]|0;
 $476 = (($475) + 80|0);
 $477 = HEAP32[$476>>2]|0;
 $478 = ($477|0)!=(0);
 $$ = $478 ? 1.0 : 3.5;
 HEAPF32[$msfix>>2] = $$;
 $479 = HEAP32[$cfg>>2]|0;
 $480 = (($479) + 176|0);
 $481 = +HEAPF32[$480>>2];
 $482 = $481;
 $483 = (+Math_abs((+$482)));
 $484 = $483 > 0.0;
 if ($484) {
  $485 = HEAP32[$cfg>>2]|0;
  $486 = (($485) + 176|0);
  $487 = +HEAPF32[$486>>2];
  HEAPF32[$msfix>>2] = $487;
 }
 $488 = +HEAPF32[$msfix>>2];
 $489 = HEAP32[$cfg>>2]|0;
 $490 = (($489) + 176|0);
 HEAPF32[$490>>2] = $488;
 HEAP32[$b>>2] = 0;
 while(1) {
  $491 = HEAP32[$b>>2]|0;
  $492 = HEAP32[$gd>>2]|0;
  $493 = (($492) + 2148|0);
  $494 = HEAP32[$493>>2]|0;
  $495 = ($491|0)<($494|0);
  if (!($495)) {
   break;
  }
  $496 = HEAP32[$b>>2]|0;
  $497 = HEAP32[$gd>>2]|0;
  $498 = (($497) + 1204|0);
  $499 = (($498) + ($496<<3)|0);
  $500 = (($499) + 4|0);
  $501 = HEAP32[$500>>2]|0;
  $502 = HEAP32[$gd>>2]|0;
  $503 = (($502) + 2148|0);
  $504 = HEAP32[$503>>2]|0;
  $505 = (($504) - 1)|0;
  $506 = ($501|0)>($505|0);
  if ($506) {
   $507 = HEAP32[$gd>>2]|0;
   $508 = (($507) + 2148|0);
   $509 = HEAP32[$508>>2]|0;
   $510 = (($509) - 1)|0;
   $511 = HEAP32[$b>>2]|0;
   $512 = HEAP32[$gd>>2]|0;
   $513 = (($512) + 1204|0);
   $514 = (($513) + ($511<<3)|0);
   $515 = (($514) + 4|0);
   HEAP32[$515>>2] = $510;
  }
  $516 = HEAP32[$b>>2]|0;
  $517 = (($516) + 1)|0;
  HEAP32[$b>>2] = $517;
 }
 $518 = HEAP32[$cfg>>2]|0;
 $519 = (($518) + 60|0);
 $520 = HEAP32[$519>>2]|0;
 $521 = (+($520|0));
 $522 = 576.0 * $521;
 $523 = +HEAPF32[$sfreq>>2];
 $524 = $523;
 $525 = $522 / $524;
 $526 = -1.19999999999999995559 * $525;
 $527 = (+Math_pow(10.0,(+$526)));
 $528 = $527;
 $529 = HEAP32[$gfc>>2]|0;
 $530 = (($529) + 85796|0);
 $531 = HEAP32[$530>>2]|0;
 $532 = (($531) + 16|0);
 HEAPF32[$532>>2] = $528;
 $533 = HEAP32[$gfc>>2]|0;
 $534 = (($533) + 85796|0);
 $535 = HEAP32[$534>>2]|0;
 $536 = (($535) + 8|0);
 HEAPF32[$536>>2] = 0.00999999977648258209228;
 $537 = HEAP32[$gfc>>2]|0;
 $538 = (($537) + 85796|0);
 $539 = HEAP32[$538>>2]|0;
 $540 = (($539) + 12|0);
 HEAPF32[$540>>2] = 1.0;
 $541 = HEAP32[$cfg>>2]|0;
 $542 = (($541) + 192|0);
 $543 = HEAP32[$542>>2]|0;
 $544 = ($543|0)!=(-1);
 L103: do {
  if ($544) {
   $545 = HEAP32[$cfg>>2]|0;
   $546 = (($545) + 48|0);
   $547 = HEAP32[$546>>2]|0;
   $548 = (+($547|0));
   $549 = $548 / 1024.0;
   HEAPF32[$freq_inc>>2] = $549;
   HEAPF32[$eql_balance>>2] = 0.0;
   HEAPF32[$freq5>>2] = 0.0;
   HEAP32[$i>>2] = 0;
   while(1) {
    $550 = HEAP32[$i>>2]|0;
    $551 = ($550|0)<(512);
    if (!($551)) {
     break;
    }
    $552 = +HEAPF32[$freq_inc>>2];
    $553 = +HEAPF32[$freq5>>2];
    $554 = $553 + $552;
    HEAPF32[$freq5>>2] = $554;
    $555 = HEAP32[$cfg>>2]|0;
    $556 = +HEAPF32[$freq5>>2];
    $557 = (+_ATHformula($555,$556));
    $558 = $557 / 10.0;
    $559 = $558;
    $560 = (+Math_pow(10.0,(+$559)));
    $561 = 1.0 / $560;
    $562 = $561;
    $563 = HEAP32[$i>>2]|0;
    $564 = HEAP32[$gfc>>2]|0;
    $565 = (($564) + 85796|0);
    $566 = HEAP32[$565>>2]|0;
    $567 = (($566) + 724|0);
    $568 = (($567) + ($563<<2)|0);
    HEAPF32[$568>>2] = $562;
    $569 = HEAP32[$i>>2]|0;
    $570 = HEAP32[$gfc>>2]|0;
    $571 = (($570) + 85796|0);
    $572 = HEAP32[$571>>2]|0;
    $573 = (($572) + 724|0);
    $574 = (($573) + ($569<<2)|0);
    $575 = +HEAPF32[$574>>2];
    $576 = +HEAPF32[$eql_balance>>2];
    $577 = $576 + $575;
    HEAPF32[$eql_balance>>2] = $577;
    $578 = HEAP32[$i>>2]|0;
    $579 = (($578) + 1)|0;
    HEAP32[$i>>2] = $579;
   }
   $580 = +HEAPF32[$eql_balance>>2];
   $581 = $580;
   $582 = 1.0 / $581;
   $583 = $582;
   HEAPF32[$eql_balance>>2] = $583;
   HEAP32[$i>>2] = 512;
   while(1) {
    $584 = HEAP32[$i>>2]|0;
    $585 = (($584) + -1)|0;
    HEAP32[$i>>2] = $585;
    $586 = ($585|0)>=(0);
    if (!($586)) {
     break L103;
    }
    $587 = +HEAPF32[$eql_balance>>2];
    $588 = HEAP32[$i>>2]|0;
    $589 = HEAP32[$gfc>>2]|0;
    $590 = (($589) + 85796|0);
    $591 = HEAP32[$590>>2]|0;
    $592 = (($591) + 724|0);
    $593 = (($592) + ($588<<2)|0);
    $594 = +HEAPF32[$593>>2];
    $595 = $594 * $587;
    HEAPF32[$593>>2] = $595;
   }
  }
 } while(0);
 HEAP32[$j>>2] = 0;
 HEAP32[$b>>2] = 0;
 while(1) {
  $596 = HEAP32[$b>>2]|0;
  $597 = HEAP32[$gd>>2]|0;
  $598 = (($597) + 2160|0);
  $599 = (($598) + 2148|0);
  $600 = HEAP32[$599>>2]|0;
  $601 = ($596|0)<($600|0);
  if (!($601)) {
   break;
  }
  HEAP32[$i>>2] = 0;
  while(1) {
   $602 = HEAP32[$i>>2]|0;
   $603 = HEAP32[$b>>2]|0;
   $604 = HEAP32[$gd>>2]|0;
   $605 = (($604) + 2160|0);
   $606 = (($605) + 1716|0);
   $607 = (($606) + ($603<<2)|0);
   $608 = HEAP32[$607>>2]|0;
   $609 = ($602|0)<($608|0);
   if (!($609)) {
    break;
   }
   $610 = HEAP32[$j>>2]|0;
   $611 = (($610) + 1)|0;
   HEAP32[$j>>2] = $611;
   $612 = HEAP32[$i>>2]|0;
   $613 = (($612) + 1)|0;
   HEAP32[$i>>2] = $613;
  }
  $614 = HEAP32[$b>>2]|0;
  $615 = (($614) + 1)|0;
  HEAP32[$b>>2] = $615;
 }
 HEAP32[$j>>2] = 0;
 HEAP32[$b>>2] = 0;
 while(1) {
  $616 = HEAP32[$b>>2]|0;
  $617 = HEAP32[$gd>>2]|0;
  $618 = (($617) + 2148|0);
  $619 = HEAP32[$618>>2]|0;
  $620 = ($616|0)<($619|0);
  if (!($620)) {
   break;
  }
  HEAP32[$i>>2] = 0;
  while(1) {
   $621 = HEAP32[$i>>2]|0;
   $622 = HEAP32[$b>>2]|0;
   $623 = HEAP32[$gd>>2]|0;
   $624 = (($623) + 1716|0);
   $625 = (($624) + ($622<<2)|0);
   $626 = HEAP32[$625>>2]|0;
   $627 = ($621|0)<($626|0);
   if (!($627)) {
    break;
   }
   $628 = HEAP32[$j>>2]|0;
   $629 = (($628) + 1)|0;
   HEAP32[$j>>2] = $629;
   $630 = HEAP32[$i>>2]|0;
   $631 = (($630) + 1)|0;
   HEAP32[$i>>2] = $631;
  }
  $632 = HEAP32[$b>>2]|0;
  $633 = (($632) + 1)|0;
  HEAP32[$b>>2] = $633;
 }
 $634 = HEAP32[$1>>2]|0;
 $635 = (($634) + 264|0);
 $636 = +HEAPF32[$635>>2];
 HEAPF32[$x6>>2] = $636;
 $637 = HEAP32[$1>>2]|0;
 $638 = (($637) + 268|0);
 $639 = +HEAPF32[$638>>2];
 HEAPF32[$y>>2] = $639;
 $640 = +HEAPF32[$x6>>2];
 $641 = $640 < 0.0;
 if ($641) {
  HEAPF32[$x6>>2] = 4.40000009536743164063;
 }
 $642 = +HEAPF32[$y>>2];
 $643 = $642 < 0.0;
 if ($643) {
  HEAPF32[$y>>2] = 25.0;
 }
 $644 = +HEAPF32[$x6>>2];
 $645 = HEAP32[$gd>>2]|0;
 $646 = (($645) + 6480|0);
 $647 = (($646) + 8|0);
 HEAPF32[$647>>2] = $644;
 $648 = HEAP32[$gd>>2]|0;
 $649 = (($648) + 6480|0);
 $650 = (($649) + 4|0);
 HEAPF32[$650>>2] = $644;
 $651 = HEAP32[$gd>>2]|0;
 $652 = (($651) + 6480|0);
 HEAPF32[$652>>2] = $644;
 $653 = +HEAPF32[$y>>2];
 $654 = HEAP32[$gd>>2]|0;
 $655 = (($654) + 6480|0);
 $656 = (($655) + 12|0);
 HEAPF32[$656>>2] = $653;
 HEAPF32[$sk_s>>2] = -10.0;
 HEAPF32[$sk_l>>2] = -4.69999980926513671875;
 $657 = HEAP32[$1>>2]|0;
 $658 = (($657) + 164|0);
 $659 = HEAP32[$658>>2]|0;
 $660 = ($659|0)<(4);
 if ($660) {
  $661 = +HEAPF32[20664>>2];
  HEAPF32[$sk_s>>2] = $661;
  HEAPF32[$sk_l>>2] = $661;
 } else {
  $662 = HEAP32[$1>>2]|0;
  $663 = (($662) + 164|0);
  $664 = HEAP32[$663>>2]|0;
  $665 = (20664 + ($664<<2)|0);
  $666 = +HEAPF32[$665>>2];
  $667 = HEAP32[$1>>2]|0;
  $668 = (($667) + 160|0);
  $669 = +HEAPF32[$668>>2];
  $670 = HEAP32[$1>>2]|0;
  $671 = (($670) + 164|0);
  $672 = HEAP32[$671>>2]|0;
  $673 = (20664 + ($672<<2)|0);
  $674 = +HEAPF32[$673>>2];
  $675 = HEAP32[$1>>2]|0;
  $676 = (($675) + 164|0);
  $677 = HEAP32[$676>>2]|0;
  $678 = (($677) + 1)|0;
  $679 = (20664 + ($678<<2)|0);
  $680 = +HEAPF32[$679>>2];
  $681 = $674 - $680;
  $682 = $669 * $681;
  $683 = $666 + $682;
  HEAPF32[$sk_s>>2] = $683;
  HEAPF32[$sk_l>>2] = $683;
 }
 HEAP32[$b>>2] = 0;
 while(1) {
  $684 = HEAP32[$b>>2]|0;
  $685 = HEAP32[$gd>>2]|0;
  $686 = (($685) + 2160|0);
  $687 = (($686) + 2148|0);
  $688 = HEAP32[$687>>2]|0;
  $689 = ($684|0)<($688|0);
  if (!($689)) {
   break;
  }
  $690 = HEAP32[$gd>>2]|0;
  $691 = (($690) + 2160|0);
  $692 = (($691) + 2148|0);
  $693 = HEAP32[$692>>2]|0;
  $694 = HEAP32[$b>>2]|0;
  $695 = (($693) - ($694))|0;
  $696 = (+($695|0));
  $697 = HEAP32[$gd>>2]|0;
  $698 = (($697) + 2160|0);
  $699 = (($698) + 2148|0);
  $700 = HEAP32[$699>>2]|0;
  $701 = (+($700|0));
  $702 = $696 / $701;
  HEAPF32[$m>>2] = $702;
  $703 = +HEAPF32[$sk_s>>2];
  $704 = +HEAPF32[$m>>2];
  $705 = $703 * $704;
  $706 = $705 * 0.100000001490116119385;
  $707 = (+Math_pow(10.0,(+$706)));
  $708 = HEAP32[$b>>2]|0;
  $709 = HEAP32[$gd>>2]|0;
  $710 = (($709) + 2160|0);
  $711 = (($710) + ($708<<2)|0);
  HEAPF32[$711>>2] = $707;
  $712 = HEAP32[$b>>2]|0;
  $713 = (($712) + 1)|0;
  HEAP32[$b>>2] = $713;
 }
 while(1) {
  $714 = HEAP32[$b>>2]|0;
  $715 = ($714|0)<(64);
  if (!($715)) {
   break;
  }
  $716 = HEAP32[$b>>2]|0;
  $717 = HEAP32[$gd>>2]|0;
  $718 = (($717) + 2160|0);
  $719 = (($718) + ($716<<2)|0);
  HEAPF32[$719>>2] = 1.0;
  $720 = HEAP32[$b>>2]|0;
  $721 = (($720) + 1)|0;
  HEAP32[$b>>2] = $721;
 }
 HEAP32[$b>>2] = 0;
 while(1) {
  $722 = HEAP32[$b>>2]|0;
  $723 = HEAP32[$gd>>2]|0;
  $724 = (($723) + 2148|0);
  $725 = HEAP32[$724>>2]|0;
  $726 = ($722|0)<($725|0);
  if (!($726)) {
   break;
  }
  $727 = HEAP32[$gd>>2]|0;
  $728 = (($727) + 2148|0);
  $729 = HEAP32[$728>>2]|0;
  $730 = HEAP32[$b>>2]|0;
  $731 = (($729) - ($730))|0;
  $732 = (+($731|0));
  $733 = HEAP32[$gd>>2]|0;
  $734 = (($733) + 2148|0);
  $735 = HEAP32[$734>>2]|0;
  $736 = (+($735|0));
  $737 = $732 / $736;
  HEAPF32[$m7>>2] = $737;
  $738 = +HEAPF32[$sk_l>>2];
  $739 = +HEAPF32[$m7>>2];
  $740 = $738 * $739;
  $741 = $740 * 0.100000001490116119385;
  $742 = (+Math_pow(10.0,(+$741)));
  $743 = HEAP32[$b>>2]|0;
  $744 = HEAP32[$gd>>2]|0;
  $745 = (($744) + ($743<<2)|0);
  HEAPF32[$745>>2] = $742;
  $746 = HEAP32[$b>>2]|0;
  $747 = (($746) + 1)|0;
  HEAP32[$b>>2] = $747;
 }
 while(1) {
  $748 = HEAP32[$b>>2]|0;
  $749 = ($748|0)<(64);
  if (!($749)) {
   break;
  }
  $750 = HEAP32[$b>>2]|0;
  $751 = HEAP32[$gd>>2]|0;
  $752 = (($751) + ($750<<2)|0);
  HEAPF32[$752>>2] = 1.0;
  $753 = HEAP32[$b>>2]|0;
  $754 = (($753) + 1)|0;
  HEAP32[$b>>2] = $754;
 }
 $755 = HEAP32[$gd>>2]|0;
 $756 = (($755) + 4320|0);
 $757 = HEAP32[$gd>>2]|0;
 _memcpy(($756|0),($757|0),2160)|0;
 $758 = HEAP32[$gd>>2]|0;
 $759 = (($758) + 4320|0);
 $760 = +HEAPF32[$sfreq>>2];
 $761 = HEAP32[$gfc>>2]|0;
 $762 = (($761) + 21360|0);
 $763 = (($762) + 92|0);
 _init_numline($759,$760,1024,192,13,$763);
 HEAP32[$0>>2] = 0;
 $764 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($764|0);
}
function _init_numline($gd,$sfreq,$fft_size,$mdct_size,$sbmax,$scalepos) {
 $gd = $gd|0;
 $sfreq = +$sfreq;
 $fft_size = $fft_size|0;
 $mdct_size = $mdct_size|0;
 $sbmax = $sbmax|0;
 $scalepos = $scalepos|0;
 var $$ = 0, $0 = 0, $1 = 0, $10 = 0.0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0.0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0.0;
 var $115 = 0.0, $116 = 0.0, $117 = 0.0, $118 = 0.0, $119 = 0, $12 = 0.0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0.0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0.0, $149 = 0.0, $15 = 0.0, $150 = 0;
 var $151 = 0.0, $152 = 0.0, $153 = 0.0, $154 = 0.0, $155 = 0.0, $156 = 0, $157 = 0, $158 = 0, $159 = 0.0, $16 = 0.0, $160 = 0.0, $161 = 0, $162 = 0.0, $163 = 0.0, $164 = 0.0, $165 = 0.0, $166 = 0.0, $167 = 0, $168 = 0, $169 = 0;
 var $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0.0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0;
 var $188 = 0, $189 = 0, $19 = 0.0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0.0, $195 = 0, $196 = 0.0, $197 = 0.0, $198 = 0.0, $199 = 0, $2 = 0, $20 = 0.0, $200 = 0, $201 = 0.0, $202 = 0.0, $203 = 0, $204 = 0;
 var $205 = 0, $206 = 0.0, $207 = 0, $208 = 0, $209 = 0.0, $21 = 0, $210 = 0.0, $211 = 0.0, $212 = 0.0, $213 = 0, $214 = 0.0, $215 = 0, $216 = 0.0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0.0, $222 = 0;
 var $223 = 0.0, $224 = 0.0, $225 = 0.0, $226 = 0.0, $227 = 0, $228 = 0, $229 = 0, $23 = 0.0, $230 = 0, $231 = 0, $232 = 0, $24 = 0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0, $3 = 0, $30 = 0.0, $31 = 0.0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0.0, $36 = 0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0.0, $60 = 0, $61 = 0.0, $62 = 0.0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0.0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0.0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0.0, $88 = 0, $89 = 0.0, $9 = 0.0, $90 = 0.0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $b_frq = 0, $bark1 = 0, $bo = 0, $bo_w = 0, $deltafreq = 0, $end = 0;
 var $f_tmp = 0, $freq = 0, $i = 0, $i1 = 0, $i2 = 0, $j = 0, $j2 = 0, $mdct_freq_frac = 0, $ni = 0, $nl = 0, $nl1 = 0, $partition = 0, $sfb = 0, $start = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 2416|0;
 $0 = sp + 2404|0;
 $1 = sp + 2400|0;
 $2 = sp + 2396|0;
 $3 = sp + 2392|0;
 $4 = sp + 2388|0;
 $5 = sp + 2384|0;
 $b_frq = sp + 2124|0;
 $mdct_freq_frac = sp + 2120|0;
 $deltafreq = sp + 2116|0;
 $partition = sp + 64|0;
 $i = sp + 60|0;
 $j = sp + 56|0;
 $ni = sp + 52|0;
 $sfb = sp + 48|0;
 $bark1 = sp + 44|0;
 $j2 = sp + 40|0;
 $nl = sp + 36|0;
 $nl1 = sp + 32|0;
 $freq = sp + 28|0;
 $i1 = sp + 24|0;
 $i2 = sp + 20|0;
 $bo = sp + 16|0;
 $start = sp + 12|0;
 $end = sp + 8|0;
 $f_tmp = sp + 4|0;
 $bo_w = sp;
 HEAP32[$0>>2] = $gd;
 HEAPF32[$1>>2] = $sfreq;
 HEAP32[$2>>2] = $fft_size;
 HEAP32[$3>>2] = $mdct_size;
 HEAP32[$4>>2] = $sbmax;
 HEAP32[$5>>2] = $scalepos;
 $6 = +HEAPF32[$1>>2];
 $7 = HEAP32[$3>>2]|0;
 $8 = (+($7|0));
 $9 = 2.0 * $8;
 $10 = $6 / $9;
 HEAPF32[$mdct_freq_frac>>2] = $10;
 $11 = HEAP32[$2>>2]|0;
 $12 = (+($11|0));
 $13 = HEAP32[$3>>2]|0;
 $14 = (+($13|0));
 $15 = 2.0 * $14;
 $16 = $12 / $15;
 HEAPF32[$deltafreq>>2] = $16;
 _memset(($partition|0),0,2052)|0;
 $17 = HEAP32[$2>>2]|0;
 $18 = (+($17|0));
 $19 = +HEAPF32[$1>>2];
 $20 = $19 / $18;
 HEAPF32[$1>>2] = $20;
 HEAP32[$j>>2] = 0;
 HEAP32[$ni>>2] = 0;
 HEAP32[$i>>2] = 0;
 while(1) {
  $21 = HEAP32[$i>>2]|0;
  $22 = ($21|0)<(64);
  if (!($22)) {
   break;
  }
  $23 = +HEAPF32[$1>>2];
  $24 = HEAP32[$j>>2]|0;
  $25 = (+($24|0));
  $26 = $23 * $25;
  $27 = (+_freq2bark($26));
  HEAPF32[$bark1>>2] = $27;
  $28 = +HEAPF32[$1>>2];
  $29 = HEAP32[$j>>2]|0;
  $30 = (+($29|0));
  $31 = $28 * $30;
  $32 = HEAP32[$i>>2]|0;
  $33 = (($b_frq) + ($32<<2)|0);
  HEAPF32[$33>>2] = $31;
  $34 = HEAP32[$j>>2]|0;
  HEAP32[$j2>>2] = $34;
  while(1) {
   $35 = +HEAPF32[$1>>2];
   $36 = HEAP32[$j2>>2]|0;
   $37 = (+($36|0));
   $38 = $35 * $37;
   $39 = (+_freq2bark($38));
   $40 = +HEAPF32[$bark1>>2];
   $41 = $39 - $40;
   $42 = $41;
   $43 = $42 < 0.340000000000000024425;
   if (!($43)) {
    break;
   }
   $44 = HEAP32[$j2>>2]|0;
   $45 = HEAP32[$2>>2]|0;
   $46 = (($45|0) / 2)&-1;
   $47 = ($44|0)<=($46|0);
   if (!($47)) {
    break;
   }
   $48 = HEAP32[$j2>>2]|0;
   $49 = (($48) + 1)|0;
   HEAP32[$j2>>2] = $49;
  }
  $50 = HEAP32[$j2>>2]|0;
  $51 = HEAP32[$j>>2]|0;
  $52 = (($50) - ($51))|0;
  HEAP32[$nl>>2] = $52;
  $53 = HEAP32[$nl>>2]|0;
  $54 = HEAP32[$i>>2]|0;
  $55 = HEAP32[$0>>2]|0;
  $56 = (($55) + 1716|0);
  $57 = (($56) + ($54<<2)|0);
  HEAP32[$57>>2] = $53;
  $58 = HEAP32[$nl>>2]|0;
  $59 = ($58|0)>(0);
  if ($59) {
   $60 = HEAP32[$nl>>2]|0;
   $61 = (+($60|0));
   $62 = 1.0 / $61;
   $67 = $62;
  } else {
   $67 = 0.0;
  }
  $63 = HEAP32[$i>>2]|0;
  $64 = HEAP32[$0>>2]|0;
  $65 = (($64) + 512|0);
  $66 = (($65) + ($63<<2)|0);
  HEAPF32[$66>>2] = $67;
  $68 = HEAP32[$i>>2]|0;
  $69 = (($68) + 1)|0;
  HEAP32[$ni>>2] = $69;
  while(1) {
   $70 = HEAP32[$j>>2]|0;
   $71 = HEAP32[$j2>>2]|0;
   $72 = ($70|0)<($71|0);
   if (!($72)) {
    break;
   }
   $73 = HEAP32[$i>>2]|0;
   $74 = HEAP32[$j>>2]|0;
   $75 = (($74) + 1)|0;
   HEAP32[$j>>2] = $75;
   $76 = (($partition) + ($74<<2)|0);
   HEAP32[$76>>2] = $73;
  }
  $77 = HEAP32[$j>>2]|0;
  $78 = HEAP32[$2>>2]|0;
  $79 = (($78|0) / 2)&-1;
  $80 = ($77|0)>($79|0);
  if ($80) {
   label = 13;
   break;
  }
  $85 = HEAP32[$i>>2]|0;
  $86 = (($85) + 1)|0;
  HEAP32[$i>>2] = $86;
 }
 if ((label|0) == 13) {
  $81 = HEAP32[$2>>2]|0;
  $82 = (($81|0) / 2)&-1;
  HEAP32[$j>>2] = $82;
  $83 = HEAP32[$i>>2]|0;
  $84 = (($83) + 1)|0;
  HEAP32[$i>>2] = $84;
 }
 $87 = +HEAPF32[$1>>2];
 $88 = HEAP32[$j>>2]|0;
 $89 = (+($88|0));
 $90 = $87 * $89;
 $91 = HEAP32[$i>>2]|0;
 $92 = (($b_frq) + ($91<<2)|0);
 HEAPF32[$92>>2] = $90;
 $93 = HEAP32[$4>>2]|0;
 $94 = HEAP32[$0>>2]|0;
 $95 = (($94) + 2152|0);
 HEAP32[$95>>2] = $93;
 $96 = HEAP32[$ni>>2]|0;
 $97 = HEAP32[$0>>2]|0;
 $98 = (($97) + 2148|0);
 HEAP32[$98>>2] = $96;
 HEAP32[$j>>2] = 0;
 HEAP32[$i>>2] = 0;
 while(1) {
  $99 = HEAP32[$i>>2]|0;
  $100 = HEAP32[$0>>2]|0;
  $101 = (($100) + 2148|0);
  $102 = HEAP32[$101>>2]|0;
  $103 = ($99|0)<($102|0);
  if (!($103)) {
   break;
  }
  $104 = HEAP32[$i>>2]|0;
  $105 = HEAP32[$0>>2]|0;
  $106 = (($105) + 1716|0);
  $107 = (($106) + ($104<<2)|0);
  $108 = HEAP32[$107>>2]|0;
  HEAP32[$nl1>>2] = $108;
  $109 = +HEAPF32[$1>>2];
  $110 = HEAP32[$j>>2]|0;
  $111 = HEAP32[$nl1>>2]|0;
  $112 = (($111|0) / 2)&-1;
  $113 = (($110) + ($112))|0;
  $114 = (+($113|0));
  $115 = $109 * $114;
  HEAPF32[$freq>>2] = $115;
  $116 = +HEAPF32[$freq>>2];
  $117 = $116;
  $118 = (+_stereo_demask($117));
  $119 = HEAP32[$i>>2]|0;
  $120 = HEAP32[$0>>2]|0;
  $121 = (($120) + 768|0);
  $122 = (($121) + ($119<<2)|0);
  HEAPF32[$122>>2] = $118;
  $123 = HEAP32[$nl1>>2]|0;
  $124 = HEAP32[$j>>2]|0;
  $125 = (($124) + ($123))|0;
  HEAP32[$j>>2] = $125;
  $126 = HEAP32[$i>>2]|0;
  $127 = (($126) + 1)|0;
  HEAP32[$i>>2] = $127;
 }
 while(1) {
  $128 = HEAP32[$i>>2]|0;
  $129 = ($128|0)<(64);
  if (!($129)) {
   break;
  }
  $130 = HEAP32[$i>>2]|0;
  $131 = HEAP32[$0>>2]|0;
  $132 = (($131) + 768|0);
  $133 = (($132) + ($130<<2)|0);
  HEAPF32[$133>>2] = 1.0;
  $134 = HEAP32[$i>>2]|0;
  $135 = (($134) + 1)|0;
  HEAP32[$i>>2] = $135;
 }
 HEAP32[$sfb>>2] = 0;
 while(1) {
  $136 = HEAP32[$sfb>>2]|0;
  $137 = HEAP32[$4>>2]|0;
  $138 = ($136|0)<($137|0);
  if (!($138)) {
   break;
  }
  $139 = HEAP32[$sfb>>2]|0;
  $140 = HEAP32[$5>>2]|0;
  $141 = (($140) + ($139<<2)|0);
  $142 = HEAP32[$141>>2]|0;
  HEAP32[$start>>2] = $142;
  $143 = HEAP32[$sfb>>2]|0;
  $144 = (($143) + 1)|0;
  $145 = HEAP32[$5>>2]|0;
  $146 = (($145) + ($144<<2)|0);
  $147 = HEAP32[$146>>2]|0;
  HEAP32[$end>>2] = $147;
  $148 = +HEAPF32[$deltafreq>>2];
  $149 = $148;
  $150 = HEAP32[$start>>2]|0;
  $151 = (+($150|0));
  $152 = $151 - 0.5;
  $153 = $149 * $152;
  $154 = 0.5 + $153;
  $155 = (+Math_floor((+$154)));
  $156 = (~~(($155)));
  HEAP32[$i1>>2] = $156;
  $157 = HEAP32[$i1>>2]|0;
  $158 = ($157|0)<(0);
  $$ = $158 ? 0 : $156;
  HEAP32[$i1>>2] = $$;
  $159 = +HEAPF32[$deltafreq>>2];
  $160 = $159;
  $161 = HEAP32[$end>>2]|0;
  $162 = (+($161|0));
  $163 = $162 - 0.5;
  $164 = $160 * $163;
  $165 = 0.5 + $164;
  $166 = (+Math_floor((+$165)));
  $167 = (~~(($166)));
  HEAP32[$i2>>2] = $167;
  $168 = HEAP32[$i2>>2]|0;
  $169 = HEAP32[$2>>2]|0;
  $170 = (($169|0) / 2)&-1;
  $171 = ($168|0)>($170|0);
  if ($171) {
   $172 = HEAP32[$2>>2]|0;
   $173 = (($172|0) / 2)&-1;
   HEAP32[$i2>>2] = $173;
  }
  $174 = HEAP32[$i2>>2]|0;
  $175 = (($partition) + ($174<<2)|0);
  $176 = HEAP32[$175>>2]|0;
  HEAP32[$bo>>2] = $176;
  $177 = HEAP32[$i1>>2]|0;
  $178 = (($partition) + ($177<<2)|0);
  $179 = HEAP32[$178>>2]|0;
  $180 = HEAP32[$i2>>2]|0;
  $181 = (($partition) + ($180<<2)|0);
  $182 = HEAP32[$181>>2]|0;
  $183 = (($179) + ($182))|0;
  $184 = (($183|0) / 2)&-1;
  $185 = HEAP32[$sfb>>2]|0;
  $186 = HEAP32[$0>>2]|0;
  $187 = (($186) + 1972|0);
  $188 = (($187) + ($185<<2)|0);
  HEAP32[$188>>2] = $184;
  $189 = HEAP32[$bo>>2]|0;
  $190 = HEAP32[$sfb>>2]|0;
  $191 = HEAP32[$0>>2]|0;
  $192 = (($191) + 2060|0);
  $193 = (($192) + ($190<<2)|0);
  HEAP32[$193>>2] = $189;
  $194 = +HEAPF32[$mdct_freq_frac>>2];
  $195 = HEAP32[$end>>2]|0;
  $196 = (+($195|0));
  $197 = $194 * $196;
  HEAPF32[$f_tmp>>2] = $197;
  $198 = +HEAPF32[$f_tmp>>2];
  $199 = HEAP32[$bo>>2]|0;
  $200 = (($b_frq) + ($199<<2)|0);
  $201 = +HEAPF32[$200>>2];
  $202 = $198 - $201;
  $203 = HEAP32[$bo>>2]|0;
  $204 = (($203) + 1)|0;
  $205 = (($b_frq) + ($204<<2)|0);
  $206 = +HEAPF32[$205>>2];
  $207 = HEAP32[$bo>>2]|0;
  $208 = (($b_frq) + ($207<<2)|0);
  $209 = +HEAPF32[$208>>2];
  $210 = $206 - $209;
  $211 = $202 / $210;
  HEAPF32[$bo_w>>2] = $211;
  $212 = +HEAPF32[$bo_w>>2];
  $213 = $212 < 0.0;
  if ($213) {
   HEAPF32[$bo_w>>2] = 0.0;
  } else {
   $214 = +HEAPF32[$bo_w>>2];
   $215 = $214 > 1.0;
   if ($215) {
    HEAPF32[$bo_w>>2] = 1.0;
   }
  }
  $216 = +HEAPF32[$bo_w>>2];
  $217 = HEAP32[$sfb>>2]|0;
  $218 = HEAP32[$0>>2]|0;
  $219 = (($218) + 1112|0);
  $220 = (($219) + ($217<<2)|0);
  HEAPF32[$220>>2] = $216;
  $221 = +HEAPF32[$mdct_freq_frac>>2];
  $222 = HEAP32[$start>>2]|0;
  $223 = (+($222|0));
  $224 = $221 * $223;
  $225 = $224;
  $226 = (+_stereo_demask($225));
  $227 = HEAP32[$sfb>>2]|0;
  $228 = HEAP32[$0>>2]|0;
  $229 = (($228) + 1024|0);
  $230 = (($229) + ($227<<2)|0);
  HEAPF32[$230>>2] = $226;
  $231 = HEAP32[$sfb>>2]|0;
  $232 = (($231) + 1)|0;
  HEAP32[$sfb>>2] = $232;
 }
 STACKTOP = sp;return;
}
function _compute_bark_values($gd,$sfreq,$fft_size,$bval,$bval_width) {
 $gd = $gd|0;
 $sfreq = +$sfreq;
 $fft_size = $fft_size|0;
 $bval = $bval|0;
 $bval_width = $bval_width|0;
 var $0 = 0, $1 = 0, $10 = 0.0, $11 = 0.0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0.0, $21 = 0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0.0, $43 = 0.0, $44 = 0;
 var $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0, $53 = 0, $54 = 0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0, $60 = 0.0, $61 = 0.0, $62 = 0.0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $8 = 0, $9 = 0.0, $bark1 = 0, $bark2 = 0, $j = 0, $k = 0, $ni = 0, $w = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $0 = sp + 40|0;
 $1 = sp + 36|0;
 $2 = sp + 32|0;
 $3 = sp + 28|0;
 $4 = sp + 24|0;
 $k = sp + 20|0;
 $j = sp + 16|0;
 $ni = sp + 12|0;
 $w = sp + 8|0;
 $bark1 = sp + 4|0;
 $bark2 = sp;
 HEAP32[$0>>2] = $gd;
 HEAPF32[$1>>2] = $sfreq;
 HEAP32[$2>>2] = $fft_size;
 HEAP32[$3>>2] = $bval;
 HEAP32[$4>>2] = $bval_width;
 HEAP32[$j>>2] = 0;
 $5 = HEAP32[$0>>2]|0;
 $6 = (($5) + 2148|0);
 $7 = HEAP32[$6>>2]|0;
 HEAP32[$ni>>2] = $7;
 $8 = HEAP32[$2>>2]|0;
 $9 = (+($8|0));
 $10 = +HEAPF32[$1>>2];
 $11 = $10 / $9;
 HEAPF32[$1>>2] = $11;
 HEAP32[$k>>2] = 0;
 while(1) {
  $12 = HEAP32[$k>>2]|0;
  $13 = HEAP32[$ni>>2]|0;
  $14 = ($12|0)<($13|0);
  if (!($14)) {
   break;
  }
  $15 = HEAP32[$k>>2]|0;
  $16 = HEAP32[$0>>2]|0;
  $17 = (($16) + 1716|0);
  $18 = (($17) + ($15<<2)|0);
  $19 = HEAP32[$18>>2]|0;
  HEAP32[$w>>2] = $19;
  $20 = +HEAPF32[$1>>2];
  $21 = HEAP32[$j>>2]|0;
  $22 = (+($21|0));
  $23 = $20 * $22;
  $24 = (+_freq2bark($23));
  HEAPF32[$bark1>>2] = $24;
  $25 = +HEAPF32[$1>>2];
  $26 = HEAP32[$j>>2]|0;
  $27 = HEAP32[$w>>2]|0;
  $28 = (($26) + ($27))|0;
  $29 = (($28) - 1)|0;
  $30 = (+($29|0));
  $31 = $25 * $30;
  $32 = (+_freq2bark($31));
  HEAPF32[$bark2>>2] = $32;
  $33 = +HEAPF32[$bark1>>2];
  $34 = +HEAPF32[$bark2>>2];
  $35 = $33 + $34;
  $36 = $35;
  $37 = 0.5 * $36;
  $38 = $37;
  $39 = HEAP32[$k>>2]|0;
  $40 = HEAP32[$3>>2]|0;
  $41 = (($40) + ($39<<2)|0);
  HEAPF32[$41>>2] = $38;
  $42 = +HEAPF32[$1>>2];
  $43 = $42;
  $44 = HEAP32[$j>>2]|0;
  $45 = (+($44|0));
  $46 = $45 - 0.5;
  $47 = $43 * $46;
  $48 = $47;
  $49 = (+_freq2bark($48));
  HEAPF32[$bark1>>2] = $49;
  $50 = +HEAPF32[$1>>2];
  $51 = $50;
  $52 = HEAP32[$j>>2]|0;
  $53 = HEAP32[$w>>2]|0;
  $54 = (($52) + ($53))|0;
  $55 = (+($54|0));
  $56 = $55 - 0.5;
  $57 = $51 * $56;
  $58 = $57;
  $59 = (+_freq2bark($58));
  HEAPF32[$bark2>>2] = $59;
  $60 = +HEAPF32[$bark2>>2];
  $61 = +HEAPF32[$bark1>>2];
  $62 = $60 - $61;
  $63 = HEAP32[$k>>2]|0;
  $64 = HEAP32[$4>>2]|0;
  $65 = (($64) + ($63<<2)|0);
  HEAPF32[$65>>2] = $62;
  $66 = HEAP32[$w>>2]|0;
  $67 = HEAP32[$j>>2]|0;
  $68 = (($67) + ($66))|0;
  HEAP32[$j>>2] = $68;
  $69 = HEAP32[$k>>2]|0;
  $70 = (($69) + 1)|0;
  HEAP32[$k>>2] = $70;
 }
 STACKTOP = sp;return;
}
function _init_s3_values($p,$s3ind,$npart,$bval,$bval_width,$norm) {
 $p = $p|0;
 $s3ind = $s3ind|0;
 $npart = $npart|0;
 $bval = $bval|0;
 $bval_width = $bval_width|0;
 $norm = $norm|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0.0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0.0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0, $24 = 0, $25 = 0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0.0, $33 = 0.0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0.0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0.0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $i = 0, $j = 0, $k = 0, $numberOfNoneZero = 0, $s3 = 0, $v = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16448|0;
 $0 = sp + 16432|0;
 $1 = sp + 16428|0;
 $2 = sp + 16424|0;
 $3 = sp + 16420|0;
 $4 = sp + 16416|0;
 $5 = sp + 16412|0;
 $6 = sp + 16408|0;
 $s3 = sp + 24|0;
 $i = sp + 16|0;
 $j = sp + 12|0;
 $k = sp + 8|0;
 $numberOfNoneZero = sp + 4|0;
 $v = sp;
 HEAP32[$1>>2] = $p;
 HEAP32[$2>>2] = $s3ind;
 HEAP32[$3>>2] = $npart;
 HEAP32[$4>>2] = $bval;
 HEAP32[$5>>2] = $bval_width;
 HEAP32[$6>>2] = $norm;
 HEAP32[$numberOfNoneZero>>2] = 0;
 _memset(($s3|0),0,16384)|0;
 HEAP32[$i>>2] = 0;
 while(1) {
  $7 = HEAP32[$i>>2]|0;
  $8 = HEAP32[$3>>2]|0;
  $9 = ($7|0)<($8|0);
  if (!($9)) {
   break;
  }
  HEAP32[$j>>2] = 0;
  while(1) {
   $10 = HEAP32[$j>>2]|0;
   $11 = HEAP32[$3>>2]|0;
   $12 = ($10|0)<($11|0);
   $13 = HEAP32[$i>>2]|0;
   if (!($12)) {
    break;
   }
   $14 = HEAP32[$4>>2]|0;
   $15 = (($14) + ($13<<2)|0);
   $16 = +HEAPF32[$15>>2];
   $17 = HEAP32[$j>>2]|0;
   $18 = HEAP32[$4>>2]|0;
   $19 = (($18) + ($17<<2)|0);
   $20 = +HEAPF32[$19>>2];
   $21 = $16 - $20;
   $22 = (+_s3_func($21));
   $23 = HEAP32[$j>>2]|0;
   $24 = HEAP32[$5>>2]|0;
   $25 = (($24) + ($23<<2)|0);
   $26 = +HEAPF32[$25>>2];
   $27 = $22 * $26;
   HEAPF32[$v>>2] = $27;
   $28 = +HEAPF32[$v>>2];
   $29 = HEAP32[$i>>2]|0;
   $30 = HEAP32[$6>>2]|0;
   $31 = (($30) + ($29<<2)|0);
   $32 = +HEAPF32[$31>>2];
   $33 = $28 * $32;
   $34 = HEAP32[$j>>2]|0;
   $35 = HEAP32[$i>>2]|0;
   $36 = (($s3) + ($35<<8)|0);
   $37 = (($36) + ($34<<2)|0);
   HEAPF32[$37>>2] = $33;
   $38 = HEAP32[$j>>2]|0;
   $39 = (($38) + 1)|0;
   HEAP32[$j>>2] = $39;
  }
  $40 = (($13) + 1)|0;
  HEAP32[$i>>2] = $40;
 }
 HEAP32[$i>>2] = 0;
 while(1) {
  $41 = HEAP32[$i>>2]|0;
  $42 = HEAP32[$3>>2]|0;
  $43 = ($41|0)<($42|0);
  if (!($43)) {
   break;
  }
  HEAP32[$j>>2] = 0;
  while(1) {
   $44 = HEAP32[$j>>2]|0;
   $45 = HEAP32[$3>>2]|0;
   $46 = ($44|0)<($45|0);
   if (!($46)) {
    break;
   }
   $47 = HEAP32[$j>>2]|0;
   $48 = HEAP32[$i>>2]|0;
   $49 = (($s3) + ($48<<8)|0);
   $50 = (($49) + ($47<<2)|0);
   $51 = +HEAPF32[$50>>2];
   $52 = $51 > 0.0;
   if ($52) {
    break;
   }
   $53 = HEAP32[$j>>2]|0;
   $54 = (($53) + 1)|0;
   HEAP32[$j>>2] = $54;
  }
  $55 = HEAP32[$j>>2]|0;
  $56 = HEAP32[$i>>2]|0;
  $57 = HEAP32[$2>>2]|0;
  $58 = (($57) + ($56<<3)|0);
  HEAP32[$58>>2] = $55;
  $59 = HEAP32[$3>>2]|0;
  $60 = (($59) - 1)|0;
  HEAP32[$j>>2] = $60;
  while(1) {
   $61 = HEAP32[$j>>2]|0;
   $62 = ($61|0)>(0);
   if (!($62)) {
    break;
   }
   $63 = HEAP32[$j>>2]|0;
   $64 = HEAP32[$i>>2]|0;
   $65 = (($s3) + ($64<<8)|0);
   $66 = (($65) + ($63<<2)|0);
   $67 = +HEAPF32[$66>>2];
   $68 = $67 > 0.0;
   if ($68) {
    break;
   }
   $69 = HEAP32[$j>>2]|0;
   $70 = (($69) + -1)|0;
   HEAP32[$j>>2] = $70;
  }
  $71 = HEAP32[$j>>2]|0;
  $72 = HEAP32[$i>>2]|0;
  $73 = HEAP32[$2>>2]|0;
  $74 = (($73) + ($72<<3)|0);
  $75 = (($74) + 4|0);
  HEAP32[$75>>2] = $71;
  $76 = HEAP32[$i>>2]|0;
  $77 = HEAP32[$2>>2]|0;
  $78 = (($77) + ($76<<3)|0);
  $79 = (($78) + 4|0);
  $80 = HEAP32[$79>>2]|0;
  $81 = HEAP32[$i>>2]|0;
  $82 = HEAP32[$2>>2]|0;
  $83 = (($82) + ($81<<3)|0);
  $84 = HEAP32[$83>>2]|0;
  $85 = (($80) - ($84))|0;
  $86 = (($85) + 1)|0;
  $87 = HEAP32[$numberOfNoneZero>>2]|0;
  $88 = (($87) + ($86))|0;
  HEAP32[$numberOfNoneZero>>2] = $88;
  $89 = HEAP32[$i>>2]|0;
  $90 = (($89) + 1)|0;
  HEAP32[$i>>2] = $90;
 }
 $91 = HEAP32[$numberOfNoneZero>>2]|0;
 $92 = $91<<2;
 $93 = (_malloc($92)|0);
 $94 = HEAP32[$1>>2]|0;
 HEAP32[$94>>2] = $93;
 $95 = HEAP32[$1>>2]|0;
 $96 = HEAP32[$95>>2]|0;
 $97 = ($96|0)!=(0|0);
 if (!($97)) {
  HEAP32[$0>>2] = -1;
  $126 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($126|0);
 }
 HEAP32[$k>>2] = 0;
 HEAP32[$i>>2] = 0;
 while(1) {
  $98 = HEAP32[$i>>2]|0;
  $99 = HEAP32[$3>>2]|0;
  $100 = ($98|0)<($99|0);
  if (!($100)) {
   break;
  }
  $101 = HEAP32[$i>>2]|0;
  $102 = HEAP32[$2>>2]|0;
  $103 = (($102) + ($101<<3)|0);
  $104 = HEAP32[$103>>2]|0;
  HEAP32[$j>>2] = $104;
  while(1) {
   $105 = HEAP32[$j>>2]|0;
   $106 = HEAP32[$i>>2]|0;
   $107 = HEAP32[$2>>2]|0;
   $108 = (($107) + ($106<<3)|0);
   $109 = (($108) + 4|0);
   $110 = HEAP32[$109>>2]|0;
   $111 = ($105|0)<=($110|0);
   if (!($111)) {
    break;
   }
   $112 = HEAP32[$j>>2]|0;
   $113 = HEAP32[$i>>2]|0;
   $114 = (($s3) + ($113<<8)|0);
   $115 = (($114) + ($112<<2)|0);
   $116 = +HEAPF32[$115>>2];
   $117 = HEAP32[$k>>2]|0;
   $118 = (($117) + 1)|0;
   HEAP32[$k>>2] = $118;
   $119 = HEAP32[$1>>2]|0;
   $120 = HEAP32[$119>>2]|0;
   $121 = (($120) + ($117<<2)|0);
   HEAPF32[$121>>2] = $116;
   $122 = HEAP32[$j>>2]|0;
   $123 = (($122) + 1)|0;
   HEAP32[$j>>2] = $123;
  }
  $124 = HEAP32[$i>>2]|0;
  $125 = (($124) + 1)|0;
  HEAP32[$i>>2] = $125;
 }
 HEAP32[$0>>2] = 0;
 $126 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($126|0);
}
function _init_mask_add_max_values() {
 var $0 = 0.0, $1 = 0.0, $2 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+Math_pow(10.0,0.5625));
 $1 = $0;
 HEAPF32[20712>>2] = $1;
 $2 = (+Math_pow(10.0,1.5));
 $3 = $2;
 HEAPF32[20720>>2] = $3;
 $4 = (+Math_pow(10.0,1.5));
 $5 = $4;
 HEAPF32[20728>>2] = $5;
 STACKTOP = sp;return;
}
function _s3_func($bark) {
 $bark = +$bark;
 var $0 = 0, $1 = 0, $10 = 0.0, $11 = 0.0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0;
 var $27 = 0.0, $28 = 0.0, $29 = 0.0, $3 = 0.0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0;
 var $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0, $5 = 0.0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0.0, $60 = 0.0, $61 = 0.0, $62 = 0.0;
 var $7 = 0.0, $8 = 0.0, $9 = 0.0, $temp = 0, $tempx = 0, $tempy = 0, $x = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = sp + 20|0;
 $1 = sp + 16|0;
 $tempx = sp + 12|0;
 $x = sp + 8|0;
 $tempy = sp + 4|0;
 $temp = sp;
 HEAPF32[$1>>2] = $bark;
 $2 = +HEAPF32[$1>>2];
 HEAPF32[$tempx>>2] = $2;
 $3 = +HEAPF32[$tempx>>2];
 $4 = $3 >= 0.0;
 $5 = +HEAPF32[$tempx>>2];
 if ($4) {
  $6 = $5 * 3.0;
  HEAPF32[$tempx>>2] = $6;
 } else {
  $7 = $5;
  $8 = $7 * 1.5;
  $9 = $8;
  HEAPF32[$tempx>>2] = $9;
 }
 $10 = +HEAPF32[$tempx>>2];
 $11 = $10;
 $12 = $11 >= 0.5;
 if ($12) {
  $13 = +HEAPF32[$tempx>>2];
  $14 = $13;
  $15 = $14 <= 2.5;
  if ($15) {
   $16 = +HEAPF32[$tempx>>2];
   $17 = $16;
   $18 = $17 - 0.5;
   $19 = $18;
   HEAPF32[$temp>>2] = $19;
   $20 = +HEAPF32[$temp>>2];
   $21 = +HEAPF32[$temp>>2];
   $22 = $20 * $21;
   $23 = $22;
   $24 = +HEAPF32[$temp>>2];
   $25 = $24;
   $26 = 2.0 * $25;
   $27 = $23 - $26;
   $28 = 8.0 * $27;
   $29 = $28;
   HEAPF32[$x>>2] = $29;
  } else {
   label = 7;
  }
 } else {
  label = 7;
 }
 if ((label|0) == 7) {
  HEAPF32[$x>>2] = 0.0;
 }
 $30 = +HEAPF32[$tempx>>2];
 $31 = $30;
 $32 = $31 + 0.473999999999999976907;
 $33 = $32;
 HEAPF32[$tempx>>2] = $33;
 $34 = +HEAPF32[$tempx>>2];
 $35 = $34;
 $36 = 7.5 * $35;
 $37 = 15.8113890000000001379 + $36;
 $38 = +HEAPF32[$tempx>>2];
 $39 = +HEAPF32[$tempx>>2];
 $40 = $38 * $39;
 $41 = $40;
 $42 = 1.0 + $41;
 $43 = (+Math_sqrt((+$42)));
 $44 = 17.5 * $43;
 $45 = $37 - $44;
 $46 = $45;
 HEAPF32[$tempy>>2] = $46;
 $47 = +HEAPF32[$tempy>>2];
 $48 = $47;
 $49 = $48 <= -60.0;
 if ($49) {
  HEAPF32[$0>>2] = 0.0;
  $62 = +HEAPF32[$0>>2];
  STACKTOP = sp;return (+$62);
 } else {
  $50 = +HEAPF32[$x>>2];
  $51 = +HEAPF32[$tempy>>2];
  $52 = $50 + $51;
  $53 = $52;
  $54 = $53 * 0.230258509299404584558;
  $55 = (+Math_exp((+$54)));
  $56 = $55;
  HEAPF32[$tempx>>2] = $56;
  $57 = +HEAPF32[$tempx>>2];
  $58 = $57;
  $59 = $58 / 0.660919299999999987349;
  $60 = $59;
  HEAPF32[$tempx>>2] = $60;
  $61 = +HEAPF32[$tempx>>2];
  HEAPF32[$0>>2] = $61;
  $62 = +HEAPF32[$0>>2];
  STACKTOP = sp;return (+$62);
 }
 return +0;
}
function _stereo_demask($f) {
 $f = +$f;
 var $0 = 0, $1 = 0.0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $2 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0, $7 = 0.0, $8 = 0.0, $9 = 0.0, $arg = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp + 8|0;
 $arg = sp;
 HEAPF64[$0>>3] = $f;
 $1 = +HEAPF64[$0>>3];
 $2 = $1;
 $3 = (+_freq2bark($2));
 $4 = $3;
 HEAPF64[$arg>>3] = $4;
 $5 = +HEAPF64[$arg>>3];
 $6 = $5 < 15.5;
 $7 = +HEAPF64[$arg>>3];
 $8 = $6 ? $7 : 15.5;
 $9 = $8 / 15.5;
 HEAPF64[$arg>>3] = $9;
 $10 = +HEAPF64[$arg>>3];
 $11 = 3.141592653589793116 * $10;
 $12 = (+Math_cos((+$11)));
 $13 = 1.0 - $12;
 $14 = 1.25 * $13;
 $15 = $14 - 2.5;
 $16 = (+Math_pow(10.0,(+$15)));
 $17 = $16;
 STACKTOP = sp;return (+$17);
}
function _convert_partition2scalefac($gd,$eb,$thr,$enn_out,$thm_out) {
 $gd = $gd|0;
 $eb = $eb|0;
 $thr = $thr|0;
 $enn_out = $enn_out|0;
 $thm_out = $thm_out|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0;
 var $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0.0, $32 = 0.0, $33 = 0.0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0.0, $45 = 0, $46 = 0, $47 = 0, $48 = 0.0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0.0, $59 = 0.0, $6 = 0, $60 = 0.0, $61 = 0.0, $62 = 0, $63 = 0, $64 = 0, $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0.0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0.0, $74 = 0.0, $75 = 0.0, $76 = 0.0, $77 = 0.0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0.0, $82 = 0, $83 = 0, $84 = 0, $85 = 0.0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0.0, $9 = 0, $90 = 0.0, $91 = 0.0, $92 = 0, $93 = 0, $94 = 0, $95 = 0.0, $96 = 0.0, $97 = 0, $98 = 0, $99 = 0, $b = 0, $b_lim = 0, $bo_sb = 0, $enn = 0, $n = 0, $npart = 0, $sb = 0, $thmm = 0;
 var $w_curr = 0, $w_next = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $0 = sp + 56|0;
 $1 = sp + 52|0;
 $2 = sp + 48|0;
 $3 = sp + 44|0;
 $4 = sp + 40|0;
 $enn = sp + 36|0;
 $thmm = sp + 32|0;
 $sb = sp + 28|0;
 $b = sp + 24|0;
 $n = sp + 20|0;
 $bo_sb = sp + 16|0;
 $npart = sp + 12|0;
 $b_lim = sp + 8|0;
 $w_curr = sp + 4|0;
 $w_next = sp;
 HEAP32[$0>>2] = $gd;
 HEAP32[$1>>2] = $eb;
 HEAP32[$2>>2] = $thr;
 HEAP32[$3>>2] = $enn_out;
 HEAP32[$4>>2] = $thm_out;
 $5 = HEAP32[$0>>2]|0;
 $6 = (($5) + 2152|0);
 $7 = HEAP32[$6>>2]|0;
 HEAP32[$n>>2] = $7;
 HEAPF32[$thmm>>2] = 0.0;
 HEAPF32[$enn>>2] = 0.0;
 HEAP32[$b>>2] = 0;
 HEAP32[$sb>>2] = 0;
 while(1) {
  $8 = HEAP32[$sb>>2]|0;
  $9 = HEAP32[$n>>2]|0;
  $10 = ($8|0)<($9|0);
  if (!($10)) {
   break;
  }
  $11 = HEAP32[$sb>>2]|0;
  $12 = HEAP32[$0>>2]|0;
  $13 = (($12) + 2060|0);
  $14 = (($13) + ($11<<2)|0);
  $15 = HEAP32[$14>>2]|0;
  HEAP32[$bo_sb>>2] = $15;
  $16 = HEAP32[$0>>2]|0;
  $17 = (($16) + 2148|0);
  $18 = HEAP32[$17>>2]|0;
  HEAP32[$npart>>2] = $18;
  $19 = HEAP32[$bo_sb>>2]|0;
  $20 = HEAP32[$npart>>2]|0;
  $21 = ($19|0)<($20|0);
  $22 = HEAP32[$bo_sb>>2]|0;
  $23 = HEAP32[$npart>>2]|0;
  $24 = $21 ? $22 : $23;
  HEAP32[$b_lim>>2] = $24;
  while(1) {
   $25 = HEAP32[$b>>2]|0;
   $26 = HEAP32[$b_lim>>2]|0;
   $27 = ($25|0)<($26|0);
   $28 = HEAP32[$b>>2]|0;
   if (!($27)) {
    break;
   }
   $29 = HEAP32[$1>>2]|0;
   $30 = (($29) + ($28<<2)|0);
   $31 = +HEAPF32[$30>>2];
   $32 = +HEAPF32[$enn>>2];
   $33 = $32 + $31;
   HEAPF32[$enn>>2] = $33;
   $34 = HEAP32[$b>>2]|0;
   $35 = HEAP32[$2>>2]|0;
   $36 = (($35) + ($34<<2)|0);
   $37 = +HEAPF32[$36>>2];
   $38 = +HEAPF32[$thmm>>2];
   $39 = $38 + $37;
   HEAPF32[$thmm>>2] = $39;
   $40 = HEAP32[$b>>2]|0;
   $41 = (($40) + 1)|0;
   HEAP32[$b>>2] = $41;
  }
  $42 = HEAP32[$npart>>2]|0;
  $43 = ($28|0)>=($42|0);
  if ($43) {
   label = 7;
   break;
  }
  $54 = HEAP32[$sb>>2]|0;
  $55 = HEAP32[$0>>2]|0;
  $56 = (($55) + 1112|0);
  $57 = (($56) + ($54<<2)|0);
  $58 = +HEAPF32[$57>>2];
  HEAPF32[$w_curr>>2] = $58;
  $59 = +HEAPF32[$w_curr>>2];
  $60 = 1.0 - $59;
  HEAPF32[$w_next>>2] = $60;
  $61 = +HEAPF32[$w_curr>>2];
  $62 = HEAP32[$b>>2]|0;
  $63 = HEAP32[$1>>2]|0;
  $64 = (($63) + ($62<<2)|0);
  $65 = +HEAPF32[$64>>2];
  $66 = $61 * $65;
  $67 = +HEAPF32[$enn>>2];
  $68 = $67 + $66;
  HEAPF32[$enn>>2] = $68;
  $69 = +HEAPF32[$w_curr>>2];
  $70 = HEAP32[$b>>2]|0;
  $71 = HEAP32[$2>>2]|0;
  $72 = (($71) + ($70<<2)|0);
  $73 = +HEAPF32[$72>>2];
  $74 = $69 * $73;
  $75 = +HEAPF32[$thmm>>2];
  $76 = $75 + $74;
  HEAPF32[$thmm>>2] = $76;
  $77 = +HEAPF32[$enn>>2];
  $78 = HEAP32[$sb>>2]|0;
  $79 = HEAP32[$3>>2]|0;
  $80 = (($79) + ($78<<2)|0);
  HEAPF32[$80>>2] = $77;
  $81 = +HEAPF32[$thmm>>2];
  $82 = HEAP32[$sb>>2]|0;
  $83 = HEAP32[$4>>2]|0;
  $84 = (($83) + ($82<<2)|0);
  HEAPF32[$84>>2] = $81;
  $85 = +HEAPF32[$w_next>>2];
  $86 = HEAP32[$b>>2]|0;
  $87 = HEAP32[$1>>2]|0;
  $88 = (($87) + ($86<<2)|0);
  $89 = +HEAPF32[$88>>2];
  $90 = $85 * $89;
  HEAPF32[$enn>>2] = $90;
  $91 = +HEAPF32[$w_next>>2];
  $92 = HEAP32[$b>>2]|0;
  $93 = HEAP32[$2>>2]|0;
  $94 = (($93) + ($92<<2)|0);
  $95 = +HEAPF32[$94>>2];
  $96 = $91 * $95;
  HEAPF32[$thmm>>2] = $96;
  $97 = HEAP32[$b>>2]|0;
  $98 = (($97) + 1)|0;
  HEAP32[$b>>2] = $98;
  $99 = HEAP32[$sb>>2]|0;
  $100 = (($99) + 1)|0;
  HEAP32[$sb>>2] = $100;
 }
 if ((label|0) == 7) {
  $44 = +HEAPF32[$enn>>2];
  $45 = HEAP32[$sb>>2]|0;
  $46 = HEAP32[$3>>2]|0;
  $47 = (($46) + ($45<<2)|0);
  HEAPF32[$47>>2] = $44;
  $48 = +HEAPF32[$thmm>>2];
  $49 = HEAP32[$sb>>2]|0;
  $50 = HEAP32[$4>>2]|0;
  $51 = (($50) + ($49<<2)|0);
  HEAPF32[$51>>2] = $48;
  $52 = HEAP32[$sb>>2]|0;
  $53 = (($52) + 1)|0;
  HEAP32[$sb>>2] = $53;
 }
 while(1) {
  $101 = HEAP32[$sb>>2]|0;
  $102 = HEAP32[$n>>2]|0;
  $103 = ($101|0)<($102|0);
  if (!($103)) {
   break;
  }
  $104 = HEAP32[$sb>>2]|0;
  $105 = HEAP32[$3>>2]|0;
  $106 = (($105) + ($104<<2)|0);
  HEAPF32[$106>>2] = 0.0;
  $107 = HEAP32[$sb>>2]|0;
  $108 = HEAP32[$4>>2]|0;
  $109 = (($108) + ($107<<2)|0);
  HEAPF32[$109>>2] = 0.0;
  $110 = HEAP32[$sb>>2]|0;
  $111 = (($110) + 1)|0;
  HEAP32[$sb>>2] = $111;
 }
 STACKTOP = sp;return;
}
function _vbrpsy_calc_mask_index_s($gfc,$max,$avg,$mask_idx) {
 $gfc = $gfc|0;
 $max = $max|0;
 $avg = $avg|0;
 $mask_idx = $mask_idx|0;
 var $$ = 0, $$1 = 0, $$2 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0.0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0.0, $109 = 0.0, $11 = 0.0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0.0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0.0, $121 = 0.0, $122 = 0.0, $123 = 0.0, $124 = 0.0, $125 = 0.0, $126 = 0.0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0;
 var $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0.0, $148 = 0.0, $149 = 0.0;
 var $15 = 0, $150 = 0.0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0.0, $160 = 0, $161 = 0, $162 = 0, $163 = 0.0, $164 = 0, $165 = 0, $166 = 0, $167 = 0;
 var $168 = 0, $169 = 0.0, $17 = 0.0, $170 = 0.0, $171 = 0, $172 = 0, $173 = 0, $174 = 0.0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0.0, $18 = 0.0, $180 = 0.0, $181 = 0.0, $182 = 0.0, $183 = 0.0, $184 = 0.0, $185 = 0.0;
 var $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0.0, $2 = 0, $20 = 0, $200 = 0.0, $201 = 0.0, $202 = 0.0;
 var $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $22 = 0, $23 = 0.0, $24 = 0.0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0.0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0.0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0.0, $84 = 0.0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0.0, $9 = 0, $90 = 0.0, $91 = 0.0, $92 = 0.0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0.0, $99 = 0.0, $a = 0, $b = 0, $gds = 0, $k = 0;
 var $last_tab_entry = 0, $m = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $0 = sp + 36|0;
 $1 = sp + 32|0;
 $2 = sp + 28|0;
 $3 = sp + 24|0;
 $gds = sp + 20|0;
 $m = sp + 16|0;
 $a = sp + 12|0;
 $b = sp + 8|0;
 $k = sp + 4|0;
 $last_tab_entry = sp;
 HEAP32[$0>>2] = $gfc;
 HEAP32[$1>>2] = $max;
 HEAP32[$2>>2] = $avg;
 HEAP32[$3>>2] = $mask_idx;
 $4 = HEAP32[$0>>2]|0;
 $5 = (($4) + 85800|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($6) + 2160|0);
 HEAP32[$gds>>2] = $7;
 HEAP32[$last_tab_entry>>2] = 8;
 HEAP32[$b>>2] = 0;
 $8 = HEAP32[$b>>2]|0;
 $9 = HEAP32[$2>>2]|0;
 $10 = (($9) + ($8<<2)|0);
 $11 = +HEAPF32[$10>>2];
 $12 = HEAP32[$b>>2]|0;
 $13 = (($12) + 1)|0;
 $14 = HEAP32[$2>>2]|0;
 $15 = (($14) + ($13<<2)|0);
 $16 = +HEAPF32[$15>>2];
 $17 = $11 + $16;
 HEAPF32[$a>>2] = $17;
 $18 = +HEAPF32[$a>>2];
 $19 = $18 > 0.0;
 $20 = HEAP32[$b>>2]|0;
 if ($19) {
  $21 = HEAP32[$1>>2]|0;
  $22 = (($21) + ($20<<2)|0);
  $23 = +HEAPF32[$22>>2];
  HEAPF32[$m>>2] = $23;
  $24 = +HEAPF32[$m>>2];
  $25 = HEAP32[$b>>2]|0;
  $26 = (($25) + 1)|0;
  $27 = HEAP32[$1>>2]|0;
  $28 = (($27) + ($26<<2)|0);
  $29 = +HEAPF32[$28>>2];
  $30 = $24 < $29;
  if ($30) {
   $31 = HEAP32[$b>>2]|0;
   $32 = (($31) + 1)|0;
   $33 = HEAP32[$1>>2]|0;
   $34 = (($33) + ($32<<2)|0);
   $35 = +HEAPF32[$34>>2];
   HEAPF32[$m>>2] = $35;
  }
  $36 = +HEAPF32[$m>>2];
  $37 = $36 * 2.0;
  $38 = +HEAPF32[$a>>2];
  $39 = $37 - $38;
  $40 = 20.0 * $39;
  $41 = +HEAPF32[$a>>2];
  $42 = HEAP32[$b>>2]|0;
  $43 = HEAP32[$gds>>2]|0;
  $44 = (($43) + 1716|0);
  $45 = (($44) + ($42<<2)|0);
  $46 = HEAP32[$45>>2]|0;
  $47 = HEAP32[$b>>2]|0;
  $48 = (($47) + 1)|0;
  $49 = HEAP32[$gds>>2]|0;
  $50 = (($49) + 1716|0);
  $51 = (($50) + ($48<<2)|0);
  $52 = HEAP32[$51>>2]|0;
  $53 = (($46) + ($52))|0;
  $54 = (($53) - 1)|0;
  $55 = (+($54|0));
  $56 = $41 * $55;
  $57 = $40 / $56;
  HEAPF32[$a>>2] = $57;
  $58 = +HEAPF32[$a>>2];
  $59 = (~~(($58)));
  HEAP32[$k>>2] = $59;
  $60 = HEAP32[$k>>2]|0;
  $61 = ($60|0)>(8);
  $$ = $61 ? 8 : $59;
  HEAP32[$k>>2] = $$;
  $62 = HEAP32[$k>>2]|0;
  $63 = $62&255;
  $64 = HEAP32[$b>>2]|0;
  $65 = HEAP32[$3>>2]|0;
  $66 = (($65) + ($64)|0);
  HEAP8[$66>>0] = $63;
 } else {
  $67 = HEAP32[$3>>2]|0;
  $68 = (($67) + ($20)|0);
  HEAP8[$68>>0] = 0;
 }
 HEAP32[$b>>2] = 1;
 while(1) {
  $69 = HEAP32[$b>>2]|0;
  $70 = HEAP32[$gds>>2]|0;
  $71 = (($70) + 2148|0);
  $72 = HEAP32[$71>>2]|0;
  $73 = (($72) - 1)|0;
  $74 = ($69|0)<($73|0);
  $75 = HEAP32[$b>>2]|0;
  $76 = (($75) - 1)|0;
  $77 = HEAP32[$2>>2]|0;
  $78 = (($77) + ($76<<2)|0);
  $79 = +HEAPF32[$78>>2];
  $80 = HEAP32[$b>>2]|0;
  $81 = HEAP32[$2>>2]|0;
  $82 = (($81) + ($80<<2)|0);
  $83 = +HEAPF32[$82>>2];
  $84 = $79 + $83;
  if (!($74)) {
   break;
  }
  $85 = HEAP32[$b>>2]|0;
  $86 = (($85) + 1)|0;
  $87 = HEAP32[$2>>2]|0;
  $88 = (($87) + ($86<<2)|0);
  $89 = +HEAPF32[$88>>2];
  $90 = $84 + $89;
  HEAPF32[$a>>2] = $90;
  $91 = +HEAPF32[$a>>2];
  $92 = $91;
  $93 = $92 > 0.0;
  $94 = HEAP32[$b>>2]|0;
  if ($93) {
   $95 = (($94) - 1)|0;
   $96 = HEAP32[$1>>2]|0;
   $97 = (($96) + ($95<<2)|0);
   $98 = +HEAPF32[$97>>2];
   HEAPF32[$m>>2] = $98;
   $99 = +HEAPF32[$m>>2];
   $100 = HEAP32[$b>>2]|0;
   $101 = HEAP32[$1>>2]|0;
   $102 = (($101) + ($100<<2)|0);
   $103 = +HEAPF32[$102>>2];
   $104 = $99 < $103;
   if ($104) {
    $105 = HEAP32[$b>>2]|0;
    $106 = HEAP32[$1>>2]|0;
    $107 = (($106) + ($105<<2)|0);
    $108 = +HEAPF32[$107>>2];
    HEAPF32[$m>>2] = $108;
   }
   $109 = +HEAPF32[$m>>2];
   $110 = HEAP32[$b>>2]|0;
   $111 = (($110) + 1)|0;
   $112 = HEAP32[$1>>2]|0;
   $113 = (($112) + ($111<<2)|0);
   $114 = +HEAPF32[$113>>2];
   $115 = $109 < $114;
   if ($115) {
    $116 = HEAP32[$b>>2]|0;
    $117 = (($116) + 1)|0;
    $118 = HEAP32[$1>>2]|0;
    $119 = (($118) + ($117<<2)|0);
    $120 = +HEAPF32[$119>>2];
    HEAPF32[$m>>2] = $120;
   }
   $121 = +HEAPF32[$m>>2];
   $122 = $121 * 3.0;
   $123 = +HEAPF32[$a>>2];
   $124 = $122 - $123;
   $125 = 20.0 * $124;
   $126 = +HEAPF32[$a>>2];
   $127 = HEAP32[$b>>2]|0;
   $128 = (($127) - 1)|0;
   $129 = HEAP32[$gds>>2]|0;
   $130 = (($129) + 1716|0);
   $131 = (($130) + ($128<<2)|0);
   $132 = HEAP32[$131>>2]|0;
   $133 = HEAP32[$b>>2]|0;
   $134 = HEAP32[$gds>>2]|0;
   $135 = (($134) + 1716|0);
   $136 = (($135) + ($133<<2)|0);
   $137 = HEAP32[$136>>2]|0;
   $138 = (($132) + ($137))|0;
   $139 = HEAP32[$b>>2]|0;
   $140 = (($139) + 1)|0;
   $141 = HEAP32[$gds>>2]|0;
   $142 = (($141) + 1716|0);
   $143 = (($142) + ($140<<2)|0);
   $144 = HEAP32[$143>>2]|0;
   $145 = (($138) + ($144))|0;
   $146 = (($145) - 1)|0;
   $147 = (+($146|0));
   $148 = $126 * $147;
   $149 = $125 / $148;
   HEAPF32[$a>>2] = $149;
   $150 = +HEAPF32[$a>>2];
   $151 = (~~(($150)));
   HEAP32[$k>>2] = $151;
   $152 = HEAP32[$k>>2]|0;
   $153 = ($152|0)>(8);
   $$1 = $153 ? 8 : $151;
   HEAP32[$k>>2] = $$1;
   $154 = HEAP32[$k>>2]|0;
   $155 = $154&255;
   $156 = HEAP32[$b>>2]|0;
   $157 = HEAP32[$3>>2]|0;
   $158 = (($157) + ($156)|0);
   HEAP8[$158>>0] = $155;
  } else {
   $159 = HEAP32[$3>>2]|0;
   $160 = (($159) + ($94)|0);
   HEAP8[$160>>0] = 0;
  }
  $161 = HEAP32[$b>>2]|0;
  $162 = (($161) + 1)|0;
  HEAP32[$b>>2] = $162;
 }
 HEAPF32[$a>>2] = $84;
 $163 = +HEAPF32[$a>>2];
 $164 = $163 > 0.0;
 $165 = HEAP32[$b>>2]|0;
 if (!($164)) {
  $211 = HEAP32[$3>>2]|0;
  $212 = (($211) + ($165)|0);
  HEAP8[$212>>0] = 0;
  STACKTOP = sp;return;
 }
 $166 = (($165) - 1)|0;
 $167 = HEAP32[$1>>2]|0;
 $168 = (($167) + ($166<<2)|0);
 $169 = +HEAPF32[$168>>2];
 HEAPF32[$m>>2] = $169;
 $170 = +HEAPF32[$m>>2];
 $171 = HEAP32[$b>>2]|0;
 $172 = HEAP32[$1>>2]|0;
 $173 = (($172) + ($171<<2)|0);
 $174 = +HEAPF32[$173>>2];
 $175 = $170 < $174;
 if ($175) {
  $176 = HEAP32[$b>>2]|0;
  $177 = HEAP32[$1>>2]|0;
  $178 = (($177) + ($176<<2)|0);
  $179 = +HEAPF32[$178>>2];
  HEAPF32[$m>>2] = $179;
 }
 $180 = +HEAPF32[$m>>2];
 $181 = $180 * 2.0;
 $182 = +HEAPF32[$a>>2];
 $183 = $181 - $182;
 $184 = 20.0 * $183;
 $185 = +HEAPF32[$a>>2];
 $186 = HEAP32[$b>>2]|0;
 $187 = (($186) - 1)|0;
 $188 = HEAP32[$gds>>2]|0;
 $189 = (($188) + 1716|0);
 $190 = (($189) + ($187<<2)|0);
 $191 = HEAP32[$190>>2]|0;
 $192 = HEAP32[$b>>2]|0;
 $193 = HEAP32[$gds>>2]|0;
 $194 = (($193) + 1716|0);
 $195 = (($194) + ($192<<2)|0);
 $196 = HEAP32[$195>>2]|0;
 $197 = (($191) + ($196))|0;
 $198 = (($197) - 1)|0;
 $199 = (+($198|0));
 $200 = $185 * $199;
 $201 = $184 / $200;
 HEAPF32[$a>>2] = $201;
 $202 = +HEAPF32[$a>>2];
 $203 = (~~(($202)));
 HEAP32[$k>>2] = $203;
 $204 = HEAP32[$k>>2]|0;
 $205 = ($204|0)>(8);
 $$2 = $205 ? 8 : $203;
 HEAP32[$k>>2] = $$2;
 $206 = HEAP32[$k>>2]|0;
 $207 = $206&255;
 $208 = HEAP32[$b>>2]|0;
 $209 = HEAP32[$3>>2]|0;
 $210 = (($209) + ($208)|0);
 HEAP8[$210>>0] = $207;
 STACKTOP = sp;return;
}
function _mask_add_delta($i) {
 $i = $i|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp;
 HEAP32[$0>>2] = $i;
 $1 = HEAP32[$0>>2]|0;
 $2 = (20952 + ($1<<2)|0);
 $3 = HEAP32[$2>>2]|0;
 STACKTOP = sp;return ($3|0);
}
function _vbrpsy_mask_add($m1,$m2,$b,$delta) {
 $m1 = +$m1;
 $m2 = +$m2;
 $b = $b|0;
 $delta = $delta|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0.0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0.0, $28 = 0.0, $29 = 0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0, $42 = 0, $43 = 0.0, $44 = 0.0;
 var $45 = 0.0, $46 = 0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0.0, $50 = 0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $6 = 0, $7 = 0.0, $8 = 0, $9 = 0.0, $i = 0, $ratio = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = sp + 24|0;
 $1 = sp + 20|0;
 $2 = sp + 16|0;
 $3 = sp + 12|0;
 $4 = sp + 8|0;
 $ratio = sp + 4|0;
 $i = sp;
 HEAPF32[$1>>2] = $m1;
 HEAPF32[$2>>2] = $m2;
 HEAP32[$3>>2] = $b;
 HEAP32[$4>>2] = $delta;
 $5 = +HEAPF32[$1>>2];
 $6 = $5 < 0.0;
 if ($6) {
  HEAPF32[$1>>2] = 0.0;
 }
 $7 = +HEAPF32[$2>>2];
 $8 = $7 < 0.0;
 if ($8) {
  HEAPF32[$2>>2] = 0.0;
 }
 $9 = +HEAPF32[$1>>2];
 $10 = $9 <= 0.0;
 $11 = +HEAPF32[$2>>2];
 if ($10) {
  HEAPF32[$0>>2] = $11;
  $53 = +HEAPF32[$0>>2];
  STACKTOP = sp;return (+$53);
 }
 $12 = $11 <= 0.0;
 if ($12) {
  $13 = +HEAPF32[$1>>2];
  HEAPF32[$0>>2] = $13;
  $53 = +HEAPF32[$0>>2];
  STACKTOP = sp;return (+$53);
 }
 $14 = +HEAPF32[$2>>2];
 $15 = +HEAPF32[$1>>2];
 $16 = $14 > $15;
 if ($16) {
  $17 = +HEAPF32[$2>>2];
  $18 = +HEAPF32[$1>>2];
  $19 = $17 / $18;
  HEAPF32[$ratio>>2] = $19;
 } else {
  $20 = +HEAPF32[$1>>2];
  $21 = +HEAPF32[$2>>2];
  $22 = $20 / $21;
  HEAPF32[$ratio>>2] = $22;
 }
 $23 = HEAP32[$3>>2]|0;
 $24 = (Math_abs(($23|0))|0);
 $25 = HEAP32[$4>>2]|0;
 $26 = ($24|0)<=($25|0);
 $27 = +HEAPF32[$ratio>>2];
 if ($26) {
  $28 = +HEAPF32[20712>>2];
  $29 = $27 >= $28;
  if ($29) {
   $30 = +HEAPF32[$1>>2];
   $31 = +HEAPF32[$2>>2];
   $32 = $30 + $31;
   HEAPF32[$0>>2] = $32;
   $53 = +HEAPF32[$0>>2];
   STACKTOP = sp;return (+$53);
  } else {
   $33 = +HEAPF32[$ratio>>2];
   $34 = (+_fast_log2($33));
   $35 = $34;
   $36 = $35 * 4.8164799306236982801;
   $37 = (~~(($36)));
   HEAP32[$i>>2] = $37;
   $38 = +HEAPF32[$1>>2];
   $39 = +HEAPF32[$2>>2];
   $40 = $38 + $39;
   $41 = HEAP32[$i>>2]|0;
   $42 = (20912 + ($41<<2)|0);
   $43 = +HEAPF32[$42>>2];
   $44 = $40 * $43;
   HEAPF32[$0>>2] = $44;
   $53 = +HEAPF32[$0>>2];
   STACKTOP = sp;return (+$53);
  }
 }
 $45 = +HEAPF32[20720>>2];
 $46 = $27 < $45;
 $47 = +HEAPF32[$1>>2];
 $48 = +HEAPF32[$2>>2];
 if ($46) {
  $49 = $47 + $48;
  HEAPF32[$0>>2] = $49;
  $53 = +HEAPF32[$0>>2];
  STACKTOP = sp;return (+$53);
 }
 $50 = $47 < $48;
 if ($50) {
  $51 = +HEAPF32[$2>>2];
  HEAPF32[$1>>2] = $51;
 }
 $52 = +HEAPF32[$1>>2];
 HEAPF32[$0>>2] = $52;
 $53 = +HEAPF32[$0>>2];
 STACKTOP = sp;return (+$53);
}
function _calc_energy($l,$fftenergy,$eb,$max,$avg) {
 $l = $l|0;
 $fftenergy = $fftenergy|0;
 $eb = $eb|0;
 $max = $max|0;
 $avg = $avg|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0;
 var $27 = 0.0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0.0, $33 = 0, $34 = 0, $35 = 0, $36 = 0.0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0.0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0.0, $46 = 0.0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $b = 0, $ebb = 0, $el = 0, $i = 0, $j = 0, $m = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $0 = sp + 40|0;
 $1 = sp + 36|0;
 $2 = sp + 32|0;
 $3 = sp + 28|0;
 $4 = sp + 24|0;
 $b = sp + 20|0;
 $j = sp + 16|0;
 $ebb = sp + 12|0;
 $m = sp + 8|0;
 $i = sp + 4|0;
 $el = sp;
 HEAP32[$0>>2] = $l;
 HEAP32[$1>>2] = $fftenergy;
 HEAP32[$2>>2] = $eb;
 HEAP32[$3>>2] = $max;
 HEAP32[$4>>2] = $avg;
 HEAP32[$j>>2] = 0;
 HEAP32[$b>>2] = 0;
 while(1) {
  $5 = HEAP32[$b>>2]|0;
  $6 = HEAP32[$0>>2]|0;
  $7 = (($6) + 2148|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ($5|0)<($8|0);
  if (!($9)) {
   break;
  }
  HEAPF32[$ebb>>2] = 0.0;
  HEAPF32[$m>>2] = 0.0;
  HEAP32[$i>>2] = 0;
  while(1) {
   $10 = HEAP32[$i>>2]|0;
   $11 = HEAP32[$b>>2]|0;
   $12 = HEAP32[$0>>2]|0;
   $13 = (($12) + 1716|0);
   $14 = (($13) + ($11<<2)|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = ($10|0)<($15|0);
   if (!($16)) {
    break;
   }
   $17 = HEAP32[$j>>2]|0;
   $18 = HEAP32[$1>>2]|0;
   $19 = (($18) + ($17<<2)|0);
   $20 = +HEAPF32[$19>>2];
   HEAPF32[$el>>2] = $20;
   $21 = +HEAPF32[$el>>2];
   $22 = +HEAPF32[$ebb>>2];
   $23 = $22 + $21;
   HEAPF32[$ebb>>2] = $23;
   $24 = +HEAPF32[$m>>2];
   $25 = +HEAPF32[$el>>2];
   $26 = $24 < $25;
   if ($26) {
    $27 = +HEAPF32[$el>>2];
    HEAPF32[$m>>2] = $27;
   }
   $28 = HEAP32[$i>>2]|0;
   $29 = (($28) + 1)|0;
   HEAP32[$i>>2] = $29;
   $30 = HEAP32[$j>>2]|0;
   $31 = (($30) + 1)|0;
   HEAP32[$j>>2] = $31;
  }
  $32 = +HEAPF32[$ebb>>2];
  $33 = HEAP32[$b>>2]|0;
  $34 = HEAP32[$2>>2]|0;
  $35 = (($34) + ($33<<2)|0);
  HEAPF32[$35>>2] = $32;
  $36 = +HEAPF32[$m>>2];
  $37 = HEAP32[$b>>2]|0;
  $38 = HEAP32[$3>>2]|0;
  $39 = (($38) + ($37<<2)|0);
  HEAPF32[$39>>2] = $36;
  $40 = +HEAPF32[$ebb>>2];
  $41 = HEAP32[$b>>2]|0;
  $42 = HEAP32[$0>>2]|0;
  $43 = (($42) + 512|0);
  $44 = (($43) + ($41<<2)|0);
  $45 = +HEAPF32[$44>>2];
  $46 = $40 * $45;
  $47 = HEAP32[$b>>2]|0;
  $48 = HEAP32[$4>>2]|0;
  $49 = (($48) + ($47<<2)|0);
  HEAPF32[$49>>2] = $46;
  $50 = HEAP32[$b>>2]|0;
  $51 = (($50) + 1)|0;
  HEAP32[$b>>2] = $51;
 }
 STACKTOP = sp;return;
}
function _calc_mask_index_l($gfc,$max,$avg,$mask_idx) {
 $gfc = $gfc|0;
 $max = $max|0;
 $avg = $avg|0;
 $mask_idx = $mask_idx|0;
 var $$ = 0, $$1 = 0, $$2 = 0, $0 = 0, $1 = 0, $10 = 0.0, $100 = 0, $101 = 0.0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0.0, $107 = 0.0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0.0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0.0, $119 = 0.0, $12 = 0, $120 = 0.0, $121 = 0.0, $122 = 0.0, $123 = 0.0, $124 = 0.0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0;
 var $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0.0, $146 = 0.0, $147 = 0.0, $148 = 0.0, $149 = 0;
 var $15 = 0.0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0.0, $160 = 0, $161 = 0.0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0.0;
 var $168 = 0.0, $169 = 0, $17 = 0.0, $170 = 0, $171 = 0, $172 = 0.0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0.0, $178 = 0.0, $179 = 0.0, $18 = 0, $180 = 0.0, $181 = 0.0, $182 = 0.0, $183 = 0.0, $184 = 0, $185 = 0;
 var $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0.0, $198 = 0.0, $199 = 0.0, $2 = 0, $20 = 0, $200 = 0.0, $201 = 0, $202 = 0;
 var $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $22 = 0.0, $23 = 0.0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0.0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0.0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0.0, $83 = 0.0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0.0, $89 = 0.0, $9 = 0, $90 = 0.0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0.0, $97 = 0.0, $98 = 0, $99 = 0, $a = 0, $b = 0, $gdl = 0, $k = 0, $last_tab_entry = 0, $m = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $0 = sp + 36|0;
 $1 = sp + 32|0;
 $2 = sp + 28|0;
 $3 = sp + 24|0;
 $gdl = sp + 20|0;
 $m = sp + 16|0;
 $a = sp + 12|0;
 $b = sp + 8|0;
 $k = sp + 4|0;
 $last_tab_entry = sp;
 HEAP32[$0>>2] = $gfc;
 HEAP32[$1>>2] = $max;
 HEAP32[$2>>2] = $avg;
 HEAP32[$3>>2] = $mask_idx;
 $4 = HEAP32[$0>>2]|0;
 $5 = (($4) + 85800|0);
 $6 = HEAP32[$5>>2]|0;
 HEAP32[$gdl>>2] = $6;
 HEAP32[$last_tab_entry>>2] = 8;
 HEAP32[$b>>2] = 0;
 $7 = HEAP32[$b>>2]|0;
 $8 = HEAP32[$2>>2]|0;
 $9 = (($8) + ($7<<2)|0);
 $10 = +HEAPF32[$9>>2];
 $11 = HEAP32[$b>>2]|0;
 $12 = (($11) + 1)|0;
 $13 = HEAP32[$2>>2]|0;
 $14 = (($13) + ($12<<2)|0);
 $15 = +HEAPF32[$14>>2];
 $16 = $10 + $15;
 HEAPF32[$a>>2] = $16;
 $17 = +HEAPF32[$a>>2];
 $18 = $17 > 0.0;
 $19 = HEAP32[$b>>2]|0;
 if ($18) {
  $20 = HEAP32[$1>>2]|0;
  $21 = (($20) + ($19<<2)|0);
  $22 = +HEAPF32[$21>>2];
  HEAPF32[$m>>2] = $22;
  $23 = +HEAPF32[$m>>2];
  $24 = HEAP32[$b>>2]|0;
  $25 = (($24) + 1)|0;
  $26 = HEAP32[$1>>2]|0;
  $27 = (($26) + ($25<<2)|0);
  $28 = +HEAPF32[$27>>2];
  $29 = $23 < $28;
  if ($29) {
   $30 = HEAP32[$b>>2]|0;
   $31 = (($30) + 1)|0;
   $32 = HEAP32[$1>>2]|0;
   $33 = (($32) + ($31<<2)|0);
   $34 = +HEAPF32[$33>>2];
   HEAPF32[$m>>2] = $34;
  }
  $35 = +HEAPF32[$m>>2];
  $36 = $35 * 2.0;
  $37 = +HEAPF32[$a>>2];
  $38 = $36 - $37;
  $39 = 20.0 * $38;
  $40 = +HEAPF32[$a>>2];
  $41 = HEAP32[$b>>2]|0;
  $42 = HEAP32[$gdl>>2]|0;
  $43 = (($42) + 1716|0);
  $44 = (($43) + ($41<<2)|0);
  $45 = HEAP32[$44>>2]|0;
  $46 = HEAP32[$b>>2]|0;
  $47 = (($46) + 1)|0;
  $48 = HEAP32[$gdl>>2]|0;
  $49 = (($48) + 1716|0);
  $50 = (($49) + ($47<<2)|0);
  $51 = HEAP32[$50>>2]|0;
  $52 = (($45) + ($51))|0;
  $53 = (($52) - 1)|0;
  $54 = (+($53|0));
  $55 = $40 * $54;
  $56 = $39 / $55;
  HEAPF32[$a>>2] = $56;
  $57 = +HEAPF32[$a>>2];
  $58 = (~~(($57)));
  HEAP32[$k>>2] = $58;
  $59 = HEAP32[$k>>2]|0;
  $60 = ($59|0)>(8);
  $$ = $60 ? 8 : $58;
  HEAP32[$k>>2] = $$;
  $61 = HEAP32[$k>>2]|0;
  $62 = $61&255;
  $63 = HEAP32[$b>>2]|0;
  $64 = HEAP32[$3>>2]|0;
  $65 = (($64) + ($63)|0);
  HEAP8[$65>>0] = $62;
 } else {
  $66 = HEAP32[$3>>2]|0;
  $67 = (($66) + ($19)|0);
  HEAP8[$67>>0] = 0;
 }
 HEAP32[$b>>2] = 1;
 while(1) {
  $68 = HEAP32[$b>>2]|0;
  $69 = HEAP32[$gdl>>2]|0;
  $70 = (($69) + 2148|0);
  $71 = HEAP32[$70>>2]|0;
  $72 = (($71) - 1)|0;
  $73 = ($68|0)<($72|0);
  $74 = HEAP32[$b>>2]|0;
  $75 = (($74) - 1)|0;
  $76 = HEAP32[$2>>2]|0;
  $77 = (($76) + ($75<<2)|0);
  $78 = +HEAPF32[$77>>2];
  $79 = HEAP32[$b>>2]|0;
  $80 = HEAP32[$2>>2]|0;
  $81 = (($80) + ($79<<2)|0);
  $82 = +HEAPF32[$81>>2];
  $83 = $78 + $82;
  if (!($73)) {
   break;
  }
  $84 = HEAP32[$b>>2]|0;
  $85 = (($84) + 1)|0;
  $86 = HEAP32[$2>>2]|0;
  $87 = (($86) + ($85<<2)|0);
  $88 = +HEAPF32[$87>>2];
  $89 = $83 + $88;
  HEAPF32[$a>>2] = $89;
  $90 = +HEAPF32[$a>>2];
  $91 = $90 > 0.0;
  $92 = HEAP32[$b>>2]|0;
  if ($91) {
   $93 = (($92) - 1)|0;
   $94 = HEAP32[$1>>2]|0;
   $95 = (($94) + ($93<<2)|0);
   $96 = +HEAPF32[$95>>2];
   HEAPF32[$m>>2] = $96;
   $97 = +HEAPF32[$m>>2];
   $98 = HEAP32[$b>>2]|0;
   $99 = HEAP32[$1>>2]|0;
   $100 = (($99) + ($98<<2)|0);
   $101 = +HEAPF32[$100>>2];
   $102 = $97 < $101;
   if ($102) {
    $103 = HEAP32[$b>>2]|0;
    $104 = HEAP32[$1>>2]|0;
    $105 = (($104) + ($103<<2)|0);
    $106 = +HEAPF32[$105>>2];
    HEAPF32[$m>>2] = $106;
   }
   $107 = +HEAPF32[$m>>2];
   $108 = HEAP32[$b>>2]|0;
   $109 = (($108) + 1)|0;
   $110 = HEAP32[$1>>2]|0;
   $111 = (($110) + ($109<<2)|0);
   $112 = +HEAPF32[$111>>2];
   $113 = $107 < $112;
   if ($113) {
    $114 = HEAP32[$b>>2]|0;
    $115 = (($114) + 1)|0;
    $116 = HEAP32[$1>>2]|0;
    $117 = (($116) + ($115<<2)|0);
    $118 = +HEAPF32[$117>>2];
    HEAPF32[$m>>2] = $118;
   }
   $119 = +HEAPF32[$m>>2];
   $120 = $119 * 3.0;
   $121 = +HEAPF32[$a>>2];
   $122 = $120 - $121;
   $123 = 20.0 * $122;
   $124 = +HEAPF32[$a>>2];
   $125 = HEAP32[$b>>2]|0;
   $126 = (($125) - 1)|0;
   $127 = HEAP32[$gdl>>2]|0;
   $128 = (($127) + 1716|0);
   $129 = (($128) + ($126<<2)|0);
   $130 = HEAP32[$129>>2]|0;
   $131 = HEAP32[$b>>2]|0;
   $132 = HEAP32[$gdl>>2]|0;
   $133 = (($132) + 1716|0);
   $134 = (($133) + ($131<<2)|0);
   $135 = HEAP32[$134>>2]|0;
   $136 = (($130) + ($135))|0;
   $137 = HEAP32[$b>>2]|0;
   $138 = (($137) + 1)|0;
   $139 = HEAP32[$gdl>>2]|0;
   $140 = (($139) + 1716|0);
   $141 = (($140) + ($138<<2)|0);
   $142 = HEAP32[$141>>2]|0;
   $143 = (($136) + ($142))|0;
   $144 = (($143) - 1)|0;
   $145 = (+($144|0));
   $146 = $124 * $145;
   $147 = $123 / $146;
   HEAPF32[$a>>2] = $147;
   $148 = +HEAPF32[$a>>2];
   $149 = (~~(($148)));
   HEAP32[$k>>2] = $149;
   $150 = HEAP32[$k>>2]|0;
   $151 = ($150|0)>(8);
   $$1 = $151 ? 8 : $149;
   HEAP32[$k>>2] = $$1;
   $152 = HEAP32[$k>>2]|0;
   $153 = $152&255;
   $154 = HEAP32[$b>>2]|0;
   $155 = HEAP32[$3>>2]|0;
   $156 = (($155) + ($154)|0);
   HEAP8[$156>>0] = $153;
  } else {
   $157 = HEAP32[$3>>2]|0;
   $158 = (($157) + ($92)|0);
   HEAP8[$158>>0] = 0;
  }
  $159 = HEAP32[$b>>2]|0;
  $160 = (($159) + 1)|0;
  HEAP32[$b>>2] = $160;
 }
 HEAPF32[$a>>2] = $83;
 $161 = +HEAPF32[$a>>2];
 $162 = $161 > 0.0;
 $163 = HEAP32[$b>>2]|0;
 if (!($162)) {
  $209 = HEAP32[$3>>2]|0;
  $210 = (($209) + ($163)|0);
  HEAP8[$210>>0] = 0;
  STACKTOP = sp;return;
 }
 $164 = (($163) - 1)|0;
 $165 = HEAP32[$1>>2]|0;
 $166 = (($165) + ($164<<2)|0);
 $167 = +HEAPF32[$166>>2];
 HEAPF32[$m>>2] = $167;
 $168 = +HEAPF32[$m>>2];
 $169 = HEAP32[$b>>2]|0;
 $170 = HEAP32[$1>>2]|0;
 $171 = (($170) + ($169<<2)|0);
 $172 = +HEAPF32[$171>>2];
 $173 = $168 < $172;
 if ($173) {
  $174 = HEAP32[$b>>2]|0;
  $175 = HEAP32[$1>>2]|0;
  $176 = (($175) + ($174<<2)|0);
  $177 = +HEAPF32[$176>>2];
  HEAPF32[$m>>2] = $177;
 }
 $178 = +HEAPF32[$m>>2];
 $179 = $178 * 2.0;
 $180 = +HEAPF32[$a>>2];
 $181 = $179 - $180;
 $182 = 20.0 * $181;
 $183 = +HEAPF32[$a>>2];
 $184 = HEAP32[$b>>2]|0;
 $185 = (($184) - 1)|0;
 $186 = HEAP32[$gdl>>2]|0;
 $187 = (($186) + 1716|0);
 $188 = (($187) + ($185<<2)|0);
 $189 = HEAP32[$188>>2]|0;
 $190 = HEAP32[$b>>2]|0;
 $191 = HEAP32[$gdl>>2]|0;
 $192 = (($191) + 1716|0);
 $193 = (($192) + ($190<<2)|0);
 $194 = HEAP32[$193>>2]|0;
 $195 = (($189) + ($194))|0;
 $196 = (($195) - 1)|0;
 $197 = (+($196|0));
 $198 = $183 * $197;
 $199 = $182 / $198;
 HEAPF32[$a>>2] = $199;
 $200 = +HEAPF32[$a>>2];
 $201 = (~~(($200)));
 HEAP32[$k>>2] = $201;
 $202 = HEAP32[$k>>2]|0;
 $203 = ($202|0)>(8);
 $$2 = $203 ? 8 : $201;
 HEAP32[$k>>2] = $$2;
 $204 = HEAP32[$k>>2]|0;
 $205 = $204&255;
 $206 = HEAP32[$b>>2]|0;
 $207 = HEAP32[$3>>2]|0;
 $208 = (($207) + ($206)|0);
 HEAP8[$208>>0] = $205;
 STACKTOP = sp;return;
}
function _psycho_loudness_approx($energy,$eql_w) {
 $energy = $energy|0;
 $eql_w = $eql_w|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0.0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0.0;
 var $8 = 0, $9 = 0, $i = 0, $loudness_power = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp + 12|0;
 $1 = sp + 8|0;
 $i = sp + 4|0;
 $loudness_power = sp;
 HEAP32[$0>>2] = $energy;
 HEAP32[$1>>2] = $eql_w;
 HEAPF32[$loudness_power>>2] = 0.0;
 HEAP32[$i>>2] = 0;
 while(1) {
  $2 = HEAP32[$i>>2]|0;
  $3 = ($2|0)<(512);
  if (!($3)) {
   break;
  }
  $4 = HEAP32[$i>>2]|0;
  $5 = HEAP32[$0>>2]|0;
  $6 = (($5) + ($4<<2)|0);
  $7 = +HEAPF32[$6>>2];
  $8 = HEAP32[$i>>2]|0;
  $9 = HEAP32[$1>>2]|0;
  $10 = (($9) + ($8<<2)|0);
  $11 = +HEAPF32[$10>>2];
  $12 = $7 * $11;
  $13 = +HEAPF32[$loudness_power>>2];
  $14 = $13 + $12;
  HEAPF32[$loudness_power>>2] = $14;
  $15 = HEAP32[$i>>2]|0;
  $16 = (($15) + 1)|0;
  HEAP32[$i>>2] = $16;
 }
 $17 = +HEAPF32[$loudness_power>>2];
 $18 = $17;
 $19 = $18 * 8.97487134359663339783E-12;
 $20 = $19;
 HEAPF32[$loudness_power>>2] = $20;
 $21 = +HEAPF32[$loudness_power>>2];
 STACKTOP = sp;return (+$21);
}
function _init_xrpow_core_init($gfc) {
 $gfc = $gfc|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp;
 HEAP32[$0>>2] = $gfc;
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 85824|0);
 HEAP32[$2>>2] = 5;
 STACKTOP = sp;return;
}
function _init_xrpow_core_c($cod_info,$xrpow,$upper,$sum) {
 $cod_info = $cod_info|0;
 $xrpow = $xrpow|0;
 $upper = $upper|0;
 $sum = $sum|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0.0, $34 = 0, $35 = 0, $36 = 0.0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0.0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, $tmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = sp + 20|0;
 $1 = sp + 16|0;
 $2 = sp + 12|0;
 $3 = sp + 8|0;
 $i = sp + 4|0;
 $tmp = sp;
 HEAP32[$0>>2] = $cod_info;
 HEAP32[$1>>2] = $xrpow;
 HEAP32[$2>>2] = $upper;
 HEAP32[$3>>2] = $sum;
 $4 = HEAP32[$3>>2]|0;
 HEAPF32[$4>>2] = 0.0;
 HEAP32[$i>>2] = 0;
 while(1) {
  $5 = HEAP32[$i>>2]|0;
  $6 = HEAP32[$2>>2]|0;
  $7 = ($5|0)<=($6|0);
  if (!($7)) {
   break;
  }
  $8 = HEAP32[$i>>2]|0;
  $9 = HEAP32[$0>>2]|0;
  $10 = (($9) + ($8<<2)|0);
  $11 = +HEAPF32[$10>>2];
  $12 = $11;
  $13 = (+Math_abs((+$12)));
  $14 = $13;
  HEAPF32[$tmp>>2] = $14;
  $15 = +HEAPF32[$tmp>>2];
  $16 = HEAP32[$3>>2]|0;
  $17 = +HEAPF32[$16>>2];
  $18 = $17 + $15;
  HEAPF32[$16>>2] = $18;
  $19 = +HEAPF32[$tmp>>2];
  $20 = $19;
  $21 = +HEAPF32[$tmp>>2];
  $22 = $21;
  $23 = (+Math_sqrt((+$22)));
  $24 = $20 * $23;
  $25 = (+Math_sqrt((+$24)));
  $26 = $25;
  $27 = HEAP32[$i>>2]|0;
  $28 = HEAP32[$1>>2]|0;
  $29 = (($28) + ($27<<2)|0);
  HEAPF32[$29>>2] = $26;
  $30 = HEAP32[$i>>2]|0;
  $31 = HEAP32[$1>>2]|0;
  $32 = (($31) + ($30<<2)|0);
  $33 = +HEAPF32[$32>>2];
  $34 = HEAP32[$0>>2]|0;
  $35 = (($34) + 4764|0);
  $36 = +HEAPF32[$35>>2];
  $37 = $33 > $36;
  if ($37) {
   $38 = HEAP32[$i>>2]|0;
   $39 = HEAP32[$1>>2]|0;
   $40 = (($39) + ($38<<2)|0);
   $41 = +HEAPF32[$40>>2];
   $42 = HEAP32[$0>>2]|0;
   $43 = (($42) + 4764|0);
   HEAPF32[$43>>2] = $41;
  }
  $44 = HEAP32[$i>>2]|0;
  $45 = (($44) + 1)|0;
  HEAP32[$i>>2] = $45;
 }
 STACKTOP = sp;return;
}
function _VBR_old_iteration_loop($gfc,$pe,$ms_ener_ratio,$ratio) {
 $gfc = $gfc|0;
 $pe = $pe|0;
 $ms_ener_ratio = $ms_ener_ratio|0;
 $ratio = $ratio|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $analog_silence = 0, $bands = 0, $bits = 0, $cfg = 0, $ch = 0, $cod_info = 0, $eov = 0, $frameBits = 0, $gr = 0, $l3_side = 0, $l3_xmin = 0, $max_bits = 0, $mean_bits = 0, $min_bits = 0, $ret = 0, $used_bits = 0;
 var $xrpow = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 3104|0;
 $0 = sp + 3100|0;
 $1 = sp + 3096|0;
 $2 = sp + 3092|0;
 $3 = sp + 3088|0;
 $cfg = sp + 3084|0;
 $eov = sp + 3080|0;
 $l3_xmin = sp + 2456|0;
 $xrpow = sp + 152|0;
 $bands = sp + 136|0;
 $frameBits = sp + 72|0;
 $used_bits = sp + 68|0;
 $bits = sp + 64|0;
 $min_bits = sp + 48|0;
 $max_bits = sp + 32|0;
 $mean_bits = sp + 24|0;
 $ch = sp + 20|0;
 $gr = sp + 16|0;
 $analog_silence = sp + 12|0;
 $l3_side = sp + 8|0;
 $ret = sp + 4|0;
 $cod_info = sp;
 HEAP32[$0>>2] = $gfc;
 HEAP32[$1>>2] = $pe;
 HEAP32[$2>>2] = $ms_ener_ratio;
 HEAP32[$3>>2] = $ratio;
 $4 = HEAP32[$0>>2]|0;
 $5 = (($4) + 16|0);
 HEAP32[$cfg>>2] = $5;
 $6 = HEAP32[$0>>2]|0;
 $7 = (($6) + 84040|0);
 HEAP32[$eov>>2] = $7;
 $8 = HEAP32[$0>>2]|0;
 $9 = (($8) + 304|0);
 HEAP32[$l3_side>>2] = $9;
 $10 = HEAP32[$0>>2]|0;
 $11 = HEAP32[$1>>2]|0;
 $12 = HEAP32[$2>>2]|0;
 $13 = HEAP32[$3>>2]|0;
 $14 = (_VBR_old_prepare($10,$11,$12,$13,$l3_xmin,$frameBits,$min_bits,$max_bits,$bands)|0);
 HEAP32[$analog_silence>>2] = $14;
 while(1) {
  HEAP32[$used_bits>>2] = 0;
  HEAP32[$gr>>2] = 0;
  while(1) {
   $15 = HEAP32[$gr>>2]|0;
   $16 = HEAP32[$cfg>>2]|0;
   $17 = (($16) + 60|0);
   $18 = HEAP32[$17>>2]|0;
   $19 = ($15|0)<($18|0);
   if (!($19)) {
    break;
   }
   HEAP32[$ch>>2] = 0;
   while(1) {
    $20 = HEAP32[$ch>>2]|0;
    $21 = HEAP32[$cfg>>2]|0;
    $22 = (($21) + 56|0);
    $23 = HEAP32[$22>>2]|0;
    $24 = ($20|0)<($23|0);
    if (!($24)) {
     break;
    }
    $25 = HEAP32[$ch>>2]|0;
    $26 = HEAP32[$gr>>2]|0;
    $27 = HEAP32[$l3_side>>2]|0;
    $28 = (($27) + (($26*10504)|0)|0);
    $29 = (($28) + (($25*5252)|0)|0);
    HEAP32[$cod_info>>2] = $29;
    $30 = HEAP32[$0>>2]|0;
    $31 = HEAP32[$cod_info>>2]|0;
    $32 = (_init_xrpow($30,$31,$xrpow)|0);
    HEAP32[$ret>>2] = $32;
    $33 = HEAP32[$ret>>2]|0;
    $34 = ($33|0)==(0);
    if (!($34)) {
     $35 = HEAP32[$ch>>2]|0;
     $36 = HEAP32[$gr>>2]|0;
     $37 = (($max_bits) + ($36<<3)|0);
     $38 = (($37) + ($35<<2)|0);
     $39 = HEAP32[$38>>2]|0;
     $40 = ($39|0)==(0);
     if (!($40)) {
      $41 = HEAP32[$0>>2]|0;
      $42 = HEAP32[$cod_info>>2]|0;
      $43 = HEAP32[$ch>>2]|0;
      $44 = HEAP32[$gr>>2]|0;
      $45 = (($l3_xmin) + (($44*312)|0)|0);
      $46 = (($45) + (($43*156)|0)|0);
      $47 = HEAP32[$ch>>2]|0;
      $48 = HEAP32[$ch>>2]|0;
      $49 = HEAP32[$gr>>2]|0;
      $50 = (($min_bits) + ($49<<3)|0);
      $51 = (($50) + ($48<<2)|0);
      $52 = HEAP32[$51>>2]|0;
      $53 = HEAP32[$ch>>2]|0;
      $54 = HEAP32[$gr>>2]|0;
      $55 = (($max_bits) + ($54<<3)|0);
      $56 = (($55) + ($53<<2)|0);
      $57 = HEAP32[$56>>2]|0;
      _VBR_encode_granule($41,$42,$46,$xrpow,$47,$52,$57);
      $58 = HEAP32[$0>>2]|0;
      $59 = (($58) + 84768|0);
      $60 = (($59) + 328|0);
      $61 = HEAP32[$60>>2]|0;
      $62 = $61 & 1;
      $63 = ($62|0)!=(0);
      if ($63) {
       $64 = HEAP32[$0>>2]|0;
       $65 = HEAP32[$ch>>2]|0;
       $66 = HEAP32[$gr>>2]|0;
       $67 = HEAP32[$l3_side>>2]|0;
       $68 = (($67) + (($66*10504)|0)|0);
       $69 = (($68) + (($65*5252)|0)|0);
       $70 = HEAP32[$ch>>2]|0;
       $71 = HEAP32[$gr>>2]|0;
       $72 = (($l3_xmin) + (($71*312)|0)|0);
       $73 = (($72) + (($70*156)|0)|0);
       _trancate_smallspectrums($64,$69,$73,$xrpow);
      }
      $74 = HEAP32[$cod_info>>2]|0;
      $75 = (($74) + 4768|0);
      $76 = HEAP32[$75>>2]|0;
      $77 = HEAP32[$cod_info>>2]|0;
      $78 = (($77) + 4844|0);
      $79 = HEAP32[$78>>2]|0;
      $80 = (($76) + ($79))|0;
      HEAP32[$ret>>2] = $80;
      $81 = HEAP32[$ret>>2]|0;
      $82 = HEAP32[$used_bits>>2]|0;
      $83 = (($82) + ($81))|0;
      HEAP32[$used_bits>>2] = $83;
     }
    }
    $84 = HEAP32[$ch>>2]|0;
    $85 = (($84) + 1)|0;
    HEAP32[$ch>>2] = $85;
   }
   $86 = HEAP32[$gr>>2]|0;
   $87 = (($86) + 1)|0;
   HEAP32[$gr>>2] = $87;
  }
  $88 = HEAP32[$analog_silence>>2]|0;
  $89 = ($88|0)!=(0);
  if ($89) {
   $90 = HEAP32[$cfg>>2]|0;
   $91 = (($90) + 108|0);
   $92 = HEAP32[$91>>2]|0;
   $93 = ($92|0)!=(0);
   if ($93) {
    label = 16;
   } else {
    $94 = HEAP32[$eov>>2]|0;
    $95 = (($94) + 704|0);
    HEAP32[$95>>2] = 1;
   }
  } else {
   label = 16;
  }
  if ((label|0) == 16) {
   label = 0;
   $96 = HEAP32[$cfg>>2]|0;
   $97 = (($96) + 96|0);
   $98 = HEAP32[$97>>2]|0;
   $99 = HEAP32[$eov>>2]|0;
   $100 = (($99) + 704|0);
   HEAP32[$100>>2] = $98;
  }
  while(1) {
   $101 = HEAP32[$eov>>2]|0;
   $102 = (($101) + 704|0);
   $103 = HEAP32[$102>>2]|0;
   $104 = HEAP32[$cfg>>2]|0;
   $105 = (($104) + 100|0);
   $106 = HEAP32[$105>>2]|0;
   $107 = ($103|0)<($106|0);
   if (!($107)) {
    break;
   }
   $108 = HEAP32[$used_bits>>2]|0;
   $109 = HEAP32[$eov>>2]|0;
   $110 = (($109) + 704|0);
   $111 = HEAP32[$110>>2]|0;
   $112 = (($frameBits) + ($111<<2)|0);
   $113 = HEAP32[$112>>2]|0;
   $114 = ($108|0)<=($113|0);
   if ($114) {
    break;
   }
   $115 = HEAP32[$eov>>2]|0;
   $116 = (($115) + 704|0);
   $117 = HEAP32[$116>>2]|0;
   $118 = (($117) + 1)|0;
   HEAP32[$116>>2] = $118;
  }
  $119 = HEAP32[$0>>2]|0;
  $120 = (_ResvFrameBegin($119,$mean_bits)|0);
  HEAP32[$bits>>2] = $120;
  $121 = HEAP32[$used_bits>>2]|0;
  $122 = HEAP32[$bits>>2]|0;
  $123 = ($121|0)<=($122|0);
  if ($123) {
   break;
  }
  $124 = HEAP32[$0>>2]|0;
  _bitpressure_strategy($124,$l3_xmin,$min_bits,$max_bits);
 }
 HEAP32[$gr>>2] = 0;
 while(1) {
  $125 = HEAP32[$gr>>2]|0;
  $126 = HEAP32[$cfg>>2]|0;
  $127 = (($126) + 60|0);
  $128 = HEAP32[$127>>2]|0;
  $129 = ($125|0)<($128|0);
  if (!($129)) {
   break;
  }
  HEAP32[$ch>>2] = 0;
  while(1) {
   $130 = HEAP32[$ch>>2]|0;
   $131 = HEAP32[$cfg>>2]|0;
   $132 = (($131) + 56|0);
   $133 = HEAP32[$132>>2]|0;
   $134 = ($130|0)<($133|0);
   if (!($134)) {
    break;
   }
   $135 = HEAP32[$0>>2]|0;
   $136 = HEAP32[$gr>>2]|0;
   $137 = HEAP32[$ch>>2]|0;
   _iteration_finish_one($135,$136,$137);
   $138 = HEAP32[$ch>>2]|0;
   $139 = (($138) + 1)|0;
   HEAP32[$ch>>2] = $139;
  }
  $140 = HEAP32[$gr>>2]|0;
  $141 = (($140) + 1)|0;
  HEAP32[$gr>>2] = $141;
 }
 $142 = HEAP32[$0>>2]|0;
 $143 = HEAP32[$mean_bits>>2]|0;
 _ResvFrameEnd($142,$143);
 STACKTOP = sp;return;
}
function _VBR_old_prepare($gfc,$pe,$ms_ener_ratio,$ratio,$l3_xmin,$frameBits,$min_bits,$max_bits,$bands) {
 $gfc = $gfc|0;
 $pe = $pe|0;
 $ms_ener_ratio = $ms_ener_ratio|0;
 $ratio = $ratio|0;
 $l3_xmin = $l3_xmin|0;
 $frameBits = $frameBits|0;
 $min_bits = $min_bits|0;
 $max_bits = $max_bits|0;
 $bands = $bands|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0.0, $101 = 0.0, $102 = 0.0, $103 = 0.0, $104 = 0.0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0.0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0.0, $77 = 0.0, $78 = 0.0, $79 = 0.0;
 var $8 = 0, $80 = 0.0, $81 = 0.0, $82 = 0.0, $83 = 0.0, $84 = 0.0, $85 = 0, $86 = 0, $87 = 0, $88 = 0.0, $89 = 0.0, $9 = 0, $90 = 0.0, $91 = 0.0, $92 = 0.0, $93 = 0.0, $94 = 0, $95 = 0, $96 = 0, $97 = 0.0;
 var $98 = 0.0, $99 = 0.0, $adjust = 0, $analog_silence = 0, $avg = 0, $bits = 0, $cfg = 0, $ch = 0, $cod_info = 0, $eov = 0, $gr = 0, $masking_lower_db = 0, $mxb = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0;
 $0 = sp + 76|0;
 $1 = sp + 72|0;
 $2 = sp + 68|0;
 $3 = sp + 64|0;
 $4 = sp + 60|0;
 $5 = sp + 56|0;
 $6 = sp + 52|0;
 $7 = sp + 48|0;
 $8 = sp + 44|0;
 $cfg = sp + 40|0;
 $eov = sp + 36|0;
 $masking_lower_db = sp + 32|0;
 $adjust = sp + 28|0;
 $gr = sp + 24|0;
 $ch = sp + 20|0;
 $analog_silence = sp + 16|0;
 $avg = sp + 12|0;
 $mxb = sp + 8|0;
 $bits = sp + 4|0;
 $cod_info = sp;
 HEAP32[$0>>2] = $gfc;
 HEAP32[$1>>2] = $pe;
 HEAP32[$2>>2] = $ms_ener_ratio;
 HEAP32[$3>>2] = $ratio;
 HEAP32[$4>>2] = $l3_xmin;
 HEAP32[$5>>2] = $frameBits;
 HEAP32[$6>>2] = $min_bits;
 HEAP32[$7>>2] = $max_bits;
 HEAP32[$8>>2] = $bands;
 $9 = HEAP32[$0>>2]|0;
 $10 = (($9) + 16|0);
 HEAP32[$cfg>>2] = $10;
 $11 = HEAP32[$0>>2]|0;
 $12 = (($11) + 84040|0);
 HEAP32[$eov>>2] = $12;
 HEAPF32[$adjust>>2] = 0.0;
 HEAP32[$analog_silence>>2] = 1;
 HEAP32[$bits>>2] = 0;
 $13 = HEAP32[$cfg>>2]|0;
 $14 = (($13) + 100|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = HEAP32[$eov>>2]|0;
 $17 = (($16) + 704|0);
 HEAP32[$17>>2] = $15;
 $18 = HEAP32[$0>>2]|0;
 $19 = (_ResvFrameBegin($18,$avg)|0);
 $20 = HEAP32[$cfg>>2]|0;
 $21 = (($20) + 60|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = (($19|0) / ($22|0))&-1;
 HEAP32[$avg>>2] = $23;
 $24 = HEAP32[$0>>2]|0;
 $25 = HEAP32[$5>>2]|0;
 _get_framebits($24,$25);
 HEAP32[$gr>>2] = 0;
 while(1) {
  $26 = HEAP32[$gr>>2]|0;
  $27 = HEAP32[$cfg>>2]|0;
  $28 = (($27) + 60|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = ($26|0)<($29|0);
  if (!($30)) {
   break;
  }
  $31 = HEAP32[$0>>2]|0;
  $32 = HEAP32[$1>>2]|0;
  $33 = HEAP32[$gr>>2]|0;
  $34 = HEAP32[$7>>2]|0;
  $35 = (($34) + ($33<<3)|0);
  $36 = HEAP32[$avg>>2]|0;
  $37 = HEAP32[$gr>>2]|0;
  $38 = (_on_pe($31,$32,$35,$36,$37,0)|0);
  HEAP32[$mxb>>2] = $38;
  $39 = HEAP32[$0>>2]|0;
  $40 = (($39) + 84040|0);
  $41 = (($40) + 716|0);
  $42 = HEAP32[$41>>2]|0;
  $43 = ($42|0)==(2);
  if ($43) {
   $44 = HEAP32[$0>>2]|0;
   $45 = (($44) + 304|0);
   $46 = HEAP32[$gr>>2]|0;
   _ms_convert($45,$46);
   $47 = HEAP32[$gr>>2]|0;
   $48 = HEAP32[$7>>2]|0;
   $49 = (($48) + ($47<<3)|0);
   $50 = HEAP32[$gr>>2]|0;
   $51 = HEAP32[$2>>2]|0;
   $52 = (($51) + ($50<<2)|0);
   $53 = +HEAPF32[$52>>2];
   $54 = HEAP32[$avg>>2]|0;
   $55 = HEAP32[$mxb>>2]|0;
   _reduce_side($49,$53,$54,$55);
  }
  HEAP32[$ch>>2] = 0;
  while(1) {
   $56 = HEAP32[$ch>>2]|0;
   $57 = HEAP32[$cfg>>2]|0;
   $58 = (($57) + 56|0);
   $59 = HEAP32[$58>>2]|0;
   $60 = ($56|0)<($59|0);
   if (!($60)) {
    break;
   }
   $61 = HEAP32[$ch>>2]|0;
   $62 = HEAP32[$gr>>2]|0;
   $63 = HEAP32[$0>>2]|0;
   $64 = (($63) + 304|0);
   $65 = (($64) + (($62*10504)|0)|0);
   $66 = (($65) + (($61*5252)|0)|0);
   HEAP32[$cod_info>>2] = $66;
   $67 = HEAP32[$cod_info>>2]|0;
   $68 = (($67) + 4788|0);
   $69 = HEAP32[$68>>2]|0;
   $70 = ($69|0)!=(2);
   $71 = HEAP32[$ch>>2]|0;
   $72 = HEAP32[$gr>>2]|0;
   $73 = HEAP32[$1>>2]|0;
   $74 = (($73) + ($72<<3)|0);
   $75 = (($74) + ($71<<2)|0);
   $76 = +HEAPF32[$75>>2];
   $77 = $76;
   $78 = $77 / 300.0;
   $79 = 3.5 - $78;
   $80 = (+Math_exp((+$79)));
   $81 = 1.0 + $80;
   if ($70) {
    $82 = 1.28000000000000002665 / $81;
    $83 = $82 - 0.0500000000000000027756;
    $84 = $83;
    HEAPF32[$adjust>>2] = $84;
    $85 = HEAP32[$0>>2]|0;
    $86 = (($85) + 84768|0);
    $87 = (($86) + 144|0);
    $88 = +HEAPF32[$87>>2];
    $89 = +HEAPF32[$adjust>>2];
    $90 = $88 - $89;
    HEAPF32[$masking_lower_db>>2] = $90;
   } else {
    $91 = 2.56000000000000005329 / $81;
    $92 = $91 - 0.140000000000000013323;
    $93 = $92;
    HEAPF32[$adjust>>2] = $93;
    $94 = HEAP32[$0>>2]|0;
    $95 = (($94) + 84768|0);
    $96 = (($95) + 148|0);
    $97 = +HEAPF32[$96>>2];
    $98 = +HEAPF32[$adjust>>2];
    $99 = $97 - $98;
    HEAPF32[$masking_lower_db>>2] = $99;
   }
   $100 = +HEAPF32[$masking_lower_db>>2];
   $101 = $100;
   $102 = $101 * 0.100000000000000005551;
   $103 = (+Math_pow(10.0,(+$102)));
   $104 = $103;
   $105 = HEAP32[$0>>2]|0;
   $106 = (($105) + 84768|0);
   $107 = (($106) + 140|0);
   HEAPF32[$107>>2] = $104;
   $108 = HEAP32[$0>>2]|0;
   $109 = HEAP32[$cod_info>>2]|0;
   _init_outer_loop($108,$109);
   $110 = HEAP32[$0>>2]|0;
   $111 = HEAP32[$ch>>2]|0;
   $112 = HEAP32[$gr>>2]|0;
   $113 = HEAP32[$3>>2]|0;
   $114 = (($113) + (($112*976)|0)|0);
   $115 = (($114) + (($111*488)|0)|0);
   $116 = HEAP32[$cod_info>>2]|0;
   $117 = HEAP32[$ch>>2]|0;
   $118 = HEAP32[$gr>>2]|0;
   $119 = HEAP32[$4>>2]|0;
   $120 = (($119) + (($118*312)|0)|0);
   $121 = (($120) + (($117*156)|0)|0);
   $122 = (_calc_xmin($110,$115,$116,$121)|0);
   $123 = HEAP32[$ch>>2]|0;
   $124 = HEAP32[$gr>>2]|0;
   $125 = HEAP32[$8>>2]|0;
   $126 = (($125) + ($124<<3)|0);
   $127 = (($126) + ($123<<2)|0);
   HEAP32[$127>>2] = $122;
   $128 = HEAP32[$ch>>2]|0;
   $129 = HEAP32[$gr>>2]|0;
   $130 = HEAP32[$8>>2]|0;
   $131 = (($130) + ($129<<3)|0);
   $132 = (($131) + ($128<<2)|0);
   $133 = HEAP32[$132>>2]|0;
   $134 = ($133|0)!=(0);
   if ($134) {
    HEAP32[$analog_silence>>2] = 0;
   }
   $135 = HEAP32[$ch>>2]|0;
   $136 = HEAP32[$gr>>2]|0;
   $137 = HEAP32[$6>>2]|0;
   $138 = (($137) + ($136<<3)|0);
   $139 = (($138) + ($135<<2)|0);
   HEAP32[$139>>2] = 126;
   $140 = HEAP32[$ch>>2]|0;
   $141 = HEAP32[$gr>>2]|0;
   $142 = HEAP32[$7>>2]|0;
   $143 = (($142) + ($141<<3)|0);
   $144 = (($143) + ($140<<2)|0);
   $145 = HEAP32[$144>>2]|0;
   $146 = HEAP32[$bits>>2]|0;
   $147 = (($146) + ($145))|0;
   HEAP32[$bits>>2] = $147;
   $148 = HEAP32[$ch>>2]|0;
   $149 = (($148) + 1)|0;
   HEAP32[$ch>>2] = $149;
  }
  $150 = HEAP32[$gr>>2]|0;
  $151 = (($150) + 1)|0;
  HEAP32[$gr>>2] = $151;
 }
 HEAP32[$gr>>2] = 0;
 while(1) {
  $152 = HEAP32[$gr>>2]|0;
  $153 = HEAP32[$cfg>>2]|0;
  $154 = (($153) + 60|0);
  $155 = HEAP32[$154>>2]|0;
  $156 = ($152|0)<($155|0);
  if (!($156)) {
   break;
  }
  HEAP32[$ch>>2] = 0;
  while(1) {
   $157 = HEAP32[$ch>>2]|0;
   $158 = HEAP32[$cfg>>2]|0;
   $159 = (($158) + 56|0);
   $160 = HEAP32[$159>>2]|0;
   $161 = ($157|0)<($160|0);
   if (!($161)) {
    break;
   }
   $162 = HEAP32[$bits>>2]|0;
   $163 = HEAP32[$cfg>>2]|0;
   $164 = (($163) + 100|0);
   $165 = HEAP32[$164>>2]|0;
   $166 = HEAP32[$5>>2]|0;
   $167 = (($166) + ($165<<2)|0);
   $168 = HEAP32[$167>>2]|0;
   $169 = ($162|0)>($168|0);
   $170 = HEAP32[$bits>>2]|0;
   $171 = ($170|0)>(0);
   $or$cond = $169 & $171;
   if ($or$cond) {
    $172 = HEAP32[$cfg>>2]|0;
    $173 = (($172) + 100|0);
    $174 = HEAP32[$173>>2]|0;
    $175 = HEAP32[$5>>2]|0;
    $176 = (($175) + ($174<<2)|0);
    $177 = HEAP32[$176>>2]|0;
    $178 = HEAP32[$ch>>2]|0;
    $179 = HEAP32[$gr>>2]|0;
    $180 = HEAP32[$7>>2]|0;
    $181 = (($180) + ($179<<3)|0);
    $182 = (($181) + ($178<<2)|0);
    $183 = HEAP32[$182>>2]|0;
    $184 = Math_imul($183, $177)|0;
    HEAP32[$182>>2] = $184;
    $185 = HEAP32[$bits>>2]|0;
    $186 = HEAP32[$ch>>2]|0;
    $187 = HEAP32[$gr>>2]|0;
    $188 = HEAP32[$7>>2]|0;
    $189 = (($188) + ($187<<3)|0);
    $190 = (($189) + ($186<<2)|0);
    $191 = HEAP32[$190>>2]|0;
    $192 = (($191|0) / ($185|0))&-1;
    HEAP32[$190>>2] = $192;
   }
   $193 = HEAP32[$ch>>2]|0;
   $194 = HEAP32[$gr>>2]|0;
   $195 = HEAP32[$6>>2]|0;
   $196 = (($195) + ($194<<3)|0);
   $197 = (($196) + ($193<<2)|0);
   $198 = HEAP32[$197>>2]|0;
   $199 = HEAP32[$ch>>2]|0;
   $200 = HEAP32[$gr>>2]|0;
   $201 = HEAP32[$7>>2]|0;
   $202 = (($201) + ($200<<3)|0);
   $203 = (($202) + ($199<<2)|0);
   $204 = HEAP32[$203>>2]|0;
   $205 = ($198|0)>($204|0);
   if ($205) {
    $206 = HEAP32[$ch>>2]|0;
    $207 = HEAP32[$gr>>2]|0;
    $208 = HEAP32[$7>>2]|0;
    $209 = (($208) + ($207<<3)|0);
    $210 = (($209) + ($206<<2)|0);
    $211 = HEAP32[$210>>2]|0;
    $212 = HEAP32[$ch>>2]|0;
    $213 = HEAP32[$gr>>2]|0;
    $214 = HEAP32[$6>>2]|0;
    $215 = (($214) + ($213<<3)|0);
    $216 = (($215) + ($212<<2)|0);
    HEAP32[$216>>2] = $211;
   }
   $217 = HEAP32[$ch>>2]|0;
   $218 = (($217) + 1)|0;
   HEAP32[$ch>>2] = $218;
  }
  $219 = HEAP32[$gr>>2]|0;
  $220 = (($219) + 1)|0;
  HEAP32[$gr>>2] = $220;
 }
 $221 = HEAP32[$analog_silence>>2]|0;
 STACKTOP = sp;return ($221|0);
}
function _init_xrpow($gfc,$cod_info,$xrpow) {
 $gfc = $gfc|0;
 $cod_info = $cod_info|0;
 $xrpow = $xrpow|0;
 var $$ = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0.0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, $j = 0, $sum = 0, $upper = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = sp + 28|0;
 $1 = sp + 24|0;
 $2 = sp + 20|0;
 $3 = sp + 16|0;
 $sum = sp + 12|0;
 $i = sp + 8|0;
 $upper = sp + 4|0;
 $j = sp;
 HEAP32[$1>>2] = $gfc;
 HEAP32[$2>>2] = $cod_info;
 HEAP32[$3>>2] = $xrpow;
 HEAPF32[$sum>>2] = 0.0;
 $4 = HEAP32[$2>>2]|0;
 $5 = (($4) + 5208|0);
 $6 = HEAP32[$5>>2]|0;
 HEAP32[$upper>>2] = $6;
 $7 = HEAP32[$2>>2]|0;
 $8 = (($7) + 4764|0);
 HEAPF32[$8>>2] = 0.0;
 $9 = HEAP32[$upper>>2]|0;
 $10 = HEAP32[$3>>2]|0;
 $11 = (($10) + ($9<<2)|0);
 $12 = HEAP32[$upper>>2]|0;
 $13 = (576 - ($12))|0;
 $14 = $13<<2;
 _memset(($11|0),0,($14|0))|0;
 $15 = HEAP32[$1>>2]|0;
 $16 = (($15) + 85824|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = HEAP32[$2>>2]|0;
 $19 = HEAP32[$3>>2]|0;
 $20 = HEAP32[$upper>>2]|0;
 FUNCTION_TABLE_viiii[$17 & 7]($18,$19,$20,$sum);
 $21 = +HEAPF32[$sum>>2];
 $22 = $21 > 9.99999968265522538896E-21;
 if (!($22)) {
  $42 = HEAP32[$2>>2]|0;
  $43 = (($42) + 2304|0);
  _memset(($43|0),0,2304)|0;
  HEAP32[$0>>2] = 0;
  $44 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($44|0);
 }
 HEAP32[$j>>2] = 0;
 $23 = HEAP32[$1>>2]|0;
 $24 = (($23) + 84768|0);
 $25 = (($24) + 328|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = $26 & 2;
 $28 = ($27|0)!=(0);
 $$ = $28 ? 1 : 0;
 HEAP32[$j>>2] = $$;
 HEAP32[$i>>2] = 0;
 while(1) {
  $29 = HEAP32[$i>>2]|0;
  $30 = HEAP32[$2>>2]|0;
  $31 = (($30) + 4864|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = ($29|0)<($32|0);
  if (!($33)) {
   break;
  }
  $34 = HEAP32[$j>>2]|0;
  $35 = HEAP32[$i>>2]|0;
  $36 = HEAP32[$1>>2]|0;
  $37 = (($36) + 84768|0);
  $38 = (($37) + 168|0);
  $39 = (($38) + ($35<<2)|0);
  HEAP32[$39>>2] = $34;
  $40 = HEAP32[$i>>2]|0;
  $41 = (($40) + 1)|0;
  HEAP32[$i>>2] = $41;
 }
 HEAP32[$0>>2] = 1;
 $44 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($44|0);
}
function _VBR_encode_granule($gfc,$cod_info,$l3_xmin,$xrpow,$ch,$min_bits,$max_bits) {
 $gfc = $gfc|0;
 $cod_info = $cod_info|0;
 $l3_xmin = $l3_xmin|0;
 $xrpow = $xrpow|0;
 $ch = $ch|0;
 $min_bits = $min_bits|0;
 $max_bits = $max_bits|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $8 = 0, $9 = 0, $Max_bits = 0, $bst_cod_info = 0, $bst_xrpow = 0;
 var $dbits = 0, $found = 0, $over = 0, $real_bits = 0, $sfb21_extra = 0, $this_bits = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 7616|0;
 $0 = sp + 7612|0;
 $1 = sp + 7608|0;
 $2 = sp + 7604|0;
 $3 = sp + 7600|0;
 $4 = sp + 7596|0;
 $5 = sp + 7592|0;
 $6 = sp + 7588|0;
 $bst_cod_info = sp + 2336|0;
 $bst_xrpow = sp + 32|0;
 $Max_bits = sp + 24|0;
 $real_bits = sp + 20|0;
 $this_bits = sp + 16|0;
 $dbits = sp + 12|0;
 $over = sp + 8|0;
 $found = sp + 4|0;
 $sfb21_extra = sp;
 HEAP32[$0>>2] = $gfc;
 HEAP32[$1>>2] = $cod_info;
 HEAP32[$2>>2] = $l3_xmin;
 HEAP32[$3>>2] = $xrpow;
 HEAP32[$4>>2] = $ch;
 HEAP32[$5>>2] = $min_bits;
 HEAP32[$6>>2] = $max_bits;
 $7 = HEAP32[$6>>2]|0;
 HEAP32[$Max_bits>>2] = $7;
 $8 = HEAP32[$6>>2]|0;
 $9 = (($8) + 1)|0;
 HEAP32[$real_bits>>2] = $9;
 $10 = HEAP32[$6>>2]|0;
 $11 = HEAP32[$5>>2]|0;
 $12 = (($10) + ($11))|0;
 $13 = (($12|0) / 2)&-1;
 HEAP32[$this_bits>>2] = $13;
 HEAP32[$found>>2] = 0;
 $14 = HEAP32[$0>>2]|0;
 $15 = (($14) + 84768|0);
 $16 = (($15) + 324|0);
 $17 = HEAP32[$16>>2]|0;
 HEAP32[$sfb21_extra>>2] = $17;
 $18 = (($bst_cod_info) + 2304|0);
 _memset(($18|0),0,2304)|0;
 while(1) {
  $19 = HEAP32[$this_bits>>2]|0;
  $20 = HEAP32[$Max_bits>>2]|0;
  $21 = (($20) - 42)|0;
  $22 = ($19|0)>($21|0);
  if ($22) {
   $23 = HEAP32[$0>>2]|0;
   $24 = (($23) + 84768|0);
   $25 = (($24) + 324|0);
   HEAP32[$25>>2] = 0;
  } else {
   $26 = HEAP32[$sfb21_extra>>2]|0;
   $27 = HEAP32[$0>>2]|0;
   $28 = (($27) + 84768|0);
   $29 = (($28) + 324|0);
   HEAP32[$29>>2] = $26;
  }
  $30 = HEAP32[$0>>2]|0;
  $31 = HEAP32[$1>>2]|0;
  $32 = HEAP32[$2>>2]|0;
  $33 = HEAP32[$3>>2]|0;
  $34 = HEAP32[$4>>2]|0;
  $35 = HEAP32[$this_bits>>2]|0;
  $36 = (_outer_loop($30,$31,$32,$33,$34,$35)|0);
  HEAP32[$over>>2] = $36;
  $37 = HEAP32[$over>>2]|0;
  $38 = ($37|0)<=(0);
  if ($38) {
   HEAP32[$found>>2] = 1;
   $39 = HEAP32[$1>>2]|0;
   $40 = (($39) + 4768|0);
   $41 = HEAP32[$40>>2]|0;
   HEAP32[$real_bits>>2] = $41;
   $42 = HEAP32[$1>>2]|0;
   _memcpy(($bst_cod_info|0),($42|0),5252)|0;
   $43 = HEAP32[$3>>2]|0;
   _memcpy(($bst_xrpow|0),($43|0),2304)|0;
   $44 = HEAP32[$real_bits>>2]|0;
   $45 = (($44) - 32)|0;
   HEAP32[$6>>2] = $45;
   $46 = HEAP32[$6>>2]|0;
   $47 = HEAP32[$5>>2]|0;
   $48 = (($46) - ($47))|0;
   HEAP32[$dbits>>2] = $48;
   $49 = HEAP32[$6>>2]|0;
   $50 = HEAP32[$5>>2]|0;
   $51 = (($49) + ($50))|0;
   $52 = (($51|0) / 2)&-1;
   HEAP32[$this_bits>>2] = $52;
  } else {
   $53 = HEAP32[$this_bits>>2]|0;
   $54 = (($53) + 32)|0;
   HEAP32[$5>>2] = $54;
   $55 = HEAP32[$6>>2]|0;
   $56 = HEAP32[$5>>2]|0;
   $57 = (($55) - ($56))|0;
   HEAP32[$dbits>>2] = $57;
   $58 = HEAP32[$6>>2]|0;
   $59 = HEAP32[$5>>2]|0;
   $60 = (($58) + ($59))|0;
   $61 = (($60|0) / 2)&-1;
   HEAP32[$this_bits>>2] = $61;
   $62 = HEAP32[$found>>2]|0;
   $63 = ($62|0)!=(0);
   if ($63) {
    HEAP32[$found>>2] = 2;
    $64 = HEAP32[$1>>2]|0;
    _memcpy(($64|0),($bst_cod_info|0),5252)|0;
    $65 = HEAP32[$3>>2]|0;
    _memcpy(($65|0),($bst_xrpow|0),2304)|0;
   }
  }
  $66 = HEAP32[$dbits>>2]|0;
  $67 = ($66|0)>(12);
  if (!($67)) {
   break;
  }
 }
 $68 = HEAP32[$sfb21_extra>>2]|0;
 $69 = HEAP32[$0>>2]|0;
 $70 = (($69) + 84768|0);
 $71 = (($70) + 324|0);
 HEAP32[$71>>2] = $68;
 $72 = HEAP32[$found>>2]|0;
 $73 = ($72|0)==(2);
 if (!($73)) {
  STACKTOP = sp;return;
 }
 $74 = HEAP32[$1>>2]|0;
 $75 = (($74) + 2304|0);
 $76 = (($bst_cod_info) + 2304|0);
 _memcpy(($75|0),($76|0),2304)|0;
 STACKTOP = sp;return;
}
function _trancate_smallspectrums($gfc,$gi,$l3_xmin,$work) {
 $gfc = $gfc|0;
 $gi = $gi|0;
 $l3_xmin = $l3_xmin|0;
 $work = $work|0;
 var $$ = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0.0, $104 = 0.0, $105 = 0.0, $106 = 0.0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0.0, $12 = 0, $120 = 0.0, $121 = 0.0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0.0, $132 = 0.0;
 var $133 = 0.0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0.0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0;
 var $151 = 0, $152 = 0.0, $153 = 0.0, $154 = 0.0, $155 = 0.0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0.0, $164 = 0.0, $165 = 0.0, $166 = 0.0, $167 = 0, $168 = 0, $169 = 0;
 var $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0.0, $175 = 0.0, $176 = 0.0, $177 = 0.0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0;
 var $188 = 0.0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0.0, $197 = 0.0, $198 = 0, $199 = 0.0, $2 = 0, $20 = 0, $200 = 0.0, $201 = 0.0, $202 = 0.0, $203 = 0, $204 = 0;
 var $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0.0, $215 = 0.0, $216 = 0.0, $217 = 0.0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0;
 var $223 = 0, $224 = 0.0, $225 = 0.0, $226 = 0.0, $227 = 0.0, $228 = 0, $229 = 0.0, $23 = 0, $230 = 0.0, $231 = 0.0, $232 = 0.0, $233 = 0.0, $234 = 0.0, $235 = 0.0, $236 = 0.0, $237 = 0, $238 = 0.0, $239 = 0.0, $24 = 0, $240 = 0;
 var $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0.0, $247 = 0.0, $248 = 0.0, $249 = 0.0, $25 = 0, $250 = 0.0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0;
 var $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0.0, $58 = 0.0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0.0, $71 = 0.0, $72 = 0.0, $73 = 0.0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0.0, $8 = 0, $80 = 0.0, $81 = 0.0, $82 = 0.0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0.0;
 var $88 = 0.0, $89 = 0.0, $9 = 0, $90 = 0.0, $91 = 0, $92 = 0.0, $93 = 0.0, $94 = 0, $95 = 0, $96 = 0, $97 = 0.0, $98 = 0.0, $99 = 0.0, $allowedNoise = 0, $distort = 0, $dummy = 0, $j = 0, $noise = 0, $nsame = 0, $sfb = 0;
 var $start = 0, $trancateThreshold = 0, $width = 0, $xr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240|0;
 $0 = sp + 228|0;
 $1 = sp + 224|0;
 $2 = sp + 220|0;
 $3 = sp + 216|0;
 $sfb = sp + 212|0;
 $j = sp + 208|0;
 $width = sp + 204|0;
 $distort = sp + 48|0;
 $dummy = sp + 24|0;
 $xr = sp + 20|0;
 $allowedNoise = sp + 16|0;
 $trancateThreshold = sp + 12|0;
 $nsame = sp + 8|0;
 $start = sp + 4|0;
 $noise = sp;
 HEAP32[$0>>2] = $gfc;
 HEAP32[$1>>2] = $gi;
 HEAP32[$2>>2] = $l3_xmin;
 HEAP32[$3>>2] = $work;
 $4 = HEAP32[$0>>2]|0;
 $5 = (($4) + 84768|0);
 $6 = (($5) + 328|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $7 & 4;
 $9 = ($8|0)!=(0);
 if (!($9)) {
  $10 = HEAP32[$1>>2]|0;
  $11 = (($10) + 4788|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = ($12|0)==(2);
  if ($13) {
   STACKTOP = sp;return;
  }
 }
 $14 = HEAP32[$0>>2]|0;
 $15 = (($14) + 84768|0);
 $16 = (($15) + 328|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = $17 & 128;
 $19 = ($18|0)!=(0);
 if ($19) {
  STACKTOP = sp;return;
 }
 $20 = HEAP32[$1>>2]|0;
 $21 = HEAP32[$2>>2]|0;
 (_calc_noise($20,$21,$distort,$dummy,0)|0);
 HEAP32[$j>>2] = 0;
 while(1) {
  $22 = HEAP32[$j>>2]|0;
  $23 = ($22|0)<(576);
  if (!($23)) {
   break;
  }
  HEAPF32[$xr>>2] = 0.0;
  $24 = HEAP32[$j>>2]|0;
  $25 = HEAP32[$1>>2]|0;
  $26 = (($25) + 2304|0);
  $27 = (($26) + ($24<<2)|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = ($28|0)!=(0);
  if ($29) {
   $30 = HEAP32[$j>>2]|0;
   $31 = HEAP32[$1>>2]|0;
   $32 = (($31) + ($30<<2)|0);
   $33 = +HEAPF32[$32>>2];
   $34 = $33;
   $35 = (+Math_abs((+$34)));
   $36 = $35;
   HEAPF32[$xr>>2] = $36;
  }
  $37 = +HEAPF32[$xr>>2];
  $38 = HEAP32[$j>>2]|0;
  $39 = HEAP32[$3>>2]|0;
  $40 = (($39) + ($38<<2)|0);
  HEAPF32[$40>>2] = $37;
  $41 = HEAP32[$j>>2]|0;
  $42 = (($41) + 1)|0;
  HEAP32[$j>>2] = $42;
 }
 HEAP32[$j>>2] = 0;
 HEAP32[$sfb>>2] = 8;
 $43 = HEAP32[$1>>2]|0;
 $44 = (($43) + 4788|0);
 $45 = HEAP32[$44>>2]|0;
 $46 = ($45|0)==(2);
 $$ = $46 ? 6 : 8;
 HEAP32[$sfb>>2] = $$;
 while(1) {
  $47 = HEAP32[$sfb>>2]|0;
  $48 = HEAP32[$1>>2]|0;
  $49 = (($48) + 4872|0);
  $50 = (($49) + ($47<<2)|0);
  $51 = HEAP32[$50>>2]|0;
  HEAP32[$width>>2] = $51;
  $52 = HEAP32[$width>>2]|0;
  $53 = HEAP32[$j>>2]|0;
  $54 = (($53) + ($52))|0;
  HEAP32[$j>>2] = $54;
  $55 = HEAP32[$sfb>>2]|0;
  $56 = (($distort) + ($55<<2)|0);
  $57 = +HEAPF32[$56>>2];
  $58 = $57;
  $59 = $58 >= 1.0;
  do {
   if (!($59)) {
    $60 = HEAP32[$j>>2]|0;
    $61 = HEAP32[$width>>2]|0;
    $62 = (($60) - ($61))|0;
    $63 = HEAP32[$3>>2]|0;
    $64 = (($63) + ($62<<2)|0);
    $65 = HEAP32[$width>>2]|0;
    _qsort($64,$65,4,1);
    $66 = HEAP32[$j>>2]|0;
    $67 = (($66) - 1)|0;
    $68 = HEAP32[$3>>2]|0;
    $69 = (($68) + ($67<<2)|0);
    $70 = +HEAPF32[$69>>2];
    $71 = $70;
    $72 = (+Math_abs((+$71)));
    $73 = (+Math_abs(0.0));
    $74 = $72 > $73;
    $75 = HEAP32[$j>>2]|0;
    $76 = (($75) - 1)|0;
    $77 = HEAP32[$3>>2]|0;
    $78 = (($77) + ($76<<2)|0);
    $79 = +HEAPF32[$78>>2];
    $80 = $79;
    $81 = $80 - 0.0;
    $82 = (+Math_abs((+$81)));
    if ($74) {
     $83 = HEAP32[$j>>2]|0;
     $84 = (($83) - 1)|0;
     $85 = HEAP32[$3>>2]|0;
     $86 = (($85) + ($84<<2)|0);
     $87 = +HEAPF32[$86>>2];
     $88 = $87;
     $89 = (+Math_abs((+$88)));
     $90 = $89 * 9.99999997475242707878E-7;
     $91 = $82 <= $90;
     if ($91) {
      break;
     }
    } else {
     $92 = (+Math_abs(0.0));
     $93 = $92 * 9.99999997475242707878E-7;
     $94 = $82 <= $93;
     if ($94) {
      break;
     }
    }
    $95 = HEAP32[$sfb>>2]|0;
    $96 = (($distort) + ($95<<2)|0);
    $97 = +HEAPF32[$96>>2];
    $98 = $97;
    $99 = 1.0 - $98;
    $100 = HEAP32[$sfb>>2]|0;
    $101 = HEAP32[$2>>2]|0;
    $102 = (($101) + ($100<<2)|0);
    $103 = +HEAPF32[$102>>2];
    $104 = $103;
    $105 = $99 * $104;
    $106 = $105;
    HEAPF32[$allowedNoise>>2] = $106;
    HEAPF32[$trancateThreshold>>2] = 0.0;
    HEAP32[$start>>2] = 0;
    while(1) {
     HEAP32[$nsame>>2] = 1;
     while(1) {
      $107 = HEAP32[$start>>2]|0;
      $108 = HEAP32[$nsame>>2]|0;
      $109 = (($107) + ($108))|0;
      $110 = HEAP32[$width>>2]|0;
      $111 = ($109|0)<($110|0);
      if (!($111)) {
       break;
      }
      $112 = HEAP32[$start>>2]|0;
      $113 = HEAP32[$j>>2]|0;
      $114 = (($112) + ($113))|0;
      $115 = HEAP32[$width>>2]|0;
      $116 = (($114) - ($115))|0;
      $117 = HEAP32[$3>>2]|0;
      $118 = (($117) + ($116<<2)|0);
      $119 = +HEAPF32[$118>>2];
      $120 = $119;
      $121 = (+Math_abs((+$120)));
      $122 = HEAP32[$start>>2]|0;
      $123 = HEAP32[$j>>2]|0;
      $124 = (($122) + ($123))|0;
      $125 = HEAP32[$nsame>>2]|0;
      $126 = (($124) + ($125))|0;
      $127 = HEAP32[$width>>2]|0;
      $128 = (($126) - ($127))|0;
      $129 = HEAP32[$3>>2]|0;
      $130 = (($129) + ($128<<2)|0);
      $131 = +HEAPF32[$130>>2];
      $132 = $131;
      $133 = (+Math_abs((+$132)));
      $134 = $121 > $133;
      $135 = HEAP32[$start>>2]|0;
      $136 = HEAP32[$j>>2]|0;
      $137 = (($135) + ($136))|0;
      $138 = HEAP32[$width>>2]|0;
      $139 = (($137) - ($138))|0;
      $140 = HEAP32[$3>>2]|0;
      $141 = (($140) + ($139<<2)|0);
      $142 = +HEAPF32[$141>>2];
      $143 = HEAP32[$start>>2]|0;
      $144 = HEAP32[$j>>2]|0;
      $145 = (($143) + ($144))|0;
      $146 = HEAP32[$nsame>>2]|0;
      $147 = (($145) + ($146))|0;
      $148 = HEAP32[$width>>2]|0;
      $149 = (($147) - ($148))|0;
      $150 = HEAP32[$3>>2]|0;
      $151 = (($150) + ($149<<2)|0);
      $152 = +HEAPF32[$151>>2];
      $153 = $142 - $152;
      $154 = $153;
      $155 = (+Math_abs((+$154)));
      $156 = HEAP32[$start>>2]|0;
      $157 = HEAP32[$j>>2]|0;
      $158 = (($156) + ($157))|0;
      if ($134) {
       $159 = HEAP32[$width>>2]|0;
       $160 = (($158) - ($159))|0;
       $161 = HEAP32[$3>>2]|0;
       $162 = (($161) + ($160<<2)|0);
       $163 = +HEAPF32[$162>>2];
       $164 = $163;
       $165 = (+Math_abs((+$164)));
       $166 = $165 * 9.99999997475242707878E-7;
       $167 = $155 <= $166;
       if (!($167)) {
        break;
       }
      } else {
       $168 = HEAP32[$nsame>>2]|0;
       $169 = (($158) + ($168))|0;
       $170 = HEAP32[$width>>2]|0;
       $171 = (($169) - ($170))|0;
       $172 = HEAP32[$3>>2]|0;
       $173 = (($172) + ($171<<2)|0);
       $174 = +HEAPF32[$173>>2];
       $175 = $174;
       $176 = (+Math_abs((+$175)));
       $177 = $176 * 9.99999997475242707878E-7;
       $178 = $155 <= $177;
       if (!($178)) {
        break;
       }
      }
      $179 = HEAP32[$nsame>>2]|0;
      $180 = (($179) + 1)|0;
      HEAP32[$nsame>>2] = $180;
     }
     $181 = HEAP32[$start>>2]|0;
     $182 = HEAP32[$j>>2]|0;
     $183 = (($181) + ($182))|0;
     $184 = HEAP32[$width>>2]|0;
     $185 = (($183) - ($184))|0;
     $186 = HEAP32[$3>>2]|0;
     $187 = (($186) + ($185<<2)|0);
     $188 = +HEAPF32[$187>>2];
     $189 = HEAP32[$start>>2]|0;
     $190 = HEAP32[$j>>2]|0;
     $191 = (($189) + ($190))|0;
     $192 = HEAP32[$width>>2]|0;
     $193 = (($191) - ($192))|0;
     $194 = HEAP32[$3>>2]|0;
     $195 = (($194) + ($193<<2)|0);
     $196 = +HEAPF32[$195>>2];
     $197 = $188 * $196;
     $198 = HEAP32[$nsame>>2]|0;
     $199 = (+($198|0));
     $200 = $197 * $199;
     HEAPF32[$noise>>2] = $200;
     $201 = +HEAPF32[$allowedNoise>>2];
     $202 = +HEAPF32[$noise>>2];
     $203 = $201 < $202;
     if ($203) {
      label = 22;
      break;
     }
     $215 = +HEAPF32[$noise>>2];
     $216 = +HEAPF32[$allowedNoise>>2];
     $217 = $216 - $215;
     HEAPF32[$allowedNoise>>2] = $217;
     $218 = HEAP32[$nsame>>2]|0;
     $219 = HEAP32[$start>>2]|0;
     $220 = (($219) + ($218))|0;
     HEAP32[$start>>2] = $220;
     $221 = HEAP32[$start>>2]|0;
     $222 = HEAP32[$width>>2]|0;
     $223 = ($221|0)<($222|0);
     if (!($223)) {
      break;
     }
    }
    if ((label|0) == 22) {
     label = 0;
     $204 = HEAP32[$start>>2]|0;
     $205 = ($204|0)!=(0);
     if ($205) {
      $206 = HEAP32[$start>>2]|0;
      $207 = HEAP32[$j>>2]|0;
      $208 = (($206) + ($207))|0;
      $209 = HEAP32[$width>>2]|0;
      $210 = (($208) - ($209))|0;
      $211 = (($210) - 1)|0;
      $212 = HEAP32[$3>>2]|0;
      $213 = (($212) + ($211<<2)|0);
      $214 = +HEAPF32[$213>>2];
      HEAPF32[$trancateThreshold>>2] = $214;
     }
    }
    $224 = +HEAPF32[$trancateThreshold>>2];
    $225 = $224;
    $226 = (+Math_abs((+$225)));
    $227 = (+Math_abs(0.0));
    $228 = $226 > $227;
    $229 = +HEAPF32[$trancateThreshold>>2];
    $230 = $229;
    $231 = $230 - 0.0;
    $232 = (+Math_abs((+$231)));
    if ($228) {
     $233 = +HEAPF32[$trancateThreshold>>2];
     $234 = $233;
     $235 = (+Math_abs((+$234)));
     $236 = $235 * 9.99999997475242707878E-7;
     $237 = $232 <= $236;
     if ($237) {
      break;
     }
    } else {
     $238 = (+Math_abs(0.0));
     $239 = $238 * 9.99999997475242707878E-7;
     $240 = $232 <= $239;
     if ($240) {
      break;
     }
    }
    while(1) {
     $241 = HEAP32[$j>>2]|0;
     $242 = HEAP32[$width>>2]|0;
     $243 = (($241) - ($242))|0;
     $244 = HEAP32[$1>>2]|0;
     $245 = (($244) + ($243<<2)|0);
     $246 = +HEAPF32[$245>>2];
     $247 = $246;
     $248 = (+Math_abs((+$247)));
     $249 = +HEAPF32[$trancateThreshold>>2];
     $250 = $249;
     $251 = $248 <= $250;
     if ($251) {
      $252 = HEAP32[$j>>2]|0;
      $253 = HEAP32[$width>>2]|0;
      $254 = (($252) - ($253))|0;
      $255 = HEAP32[$1>>2]|0;
      $256 = (($255) + 2304|0);
      $257 = (($256) + ($254<<2)|0);
      HEAP32[$257>>2] = 0;
     }
     $258 = HEAP32[$width>>2]|0;
     $259 = (($258) + -1)|0;
     HEAP32[$width>>2] = $259;
     $260 = ($259|0)>(0);
     if (!($260)) {
      break;
     }
    }
   }
  } while(0);
  $261 = HEAP32[$sfb>>2]|0;
  $262 = (($261) + 1)|0;
  HEAP32[$sfb>>2] = $262;
  $263 = HEAP32[$1>>2]|0;
  $264 = (($263) + 4864|0);
  $265 = HEAP32[$264>>2]|0;
  $266 = ($262|0)<($265|0);
  if (!($266)) {
   break;
  }
 }
 $267 = HEAP32[$0>>2]|0;
 $268 = HEAP32[$1>>2]|0;
 $269 = (_noquant_count_bits($267,$268,0)|0);
 $270 = HEAP32[$1>>2]|0;
 $271 = (($270) + 4768|0);
 HEAP32[$271>>2] = $269;
 STACKTOP = sp;return;
}
function _bitpressure_strategy($gfc,$l3_xmin,$min_bits,$max_bits) {
 $gfc = $gfc|0;
 $l3_xmin = $l3_xmin|0;
 $min_bits = $min_bits|0;
 $max_bits = $max_bits|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0.0, $101 = 0.0, $102 = 0.0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0.0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0.0, $119 = 0.0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0.0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0.0, $133 = 0.0;
 var $134 = 0, $135 = 0.0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0.0, $34 = 0.0, $35 = 0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0;
 var $40 = 0.0, $41 = 0, $42 = 0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0.0, $6 = 0, $60 = 0.0, $61 = 0, $62 = 0.0, $63 = 0.0, $64 = 0.0, $65 = 0.0, $66 = 0.0, $67 = 0, $68 = 0, $69 = 0.0, $7 = 0, $70 = 0.0, $71 = 0.0, $72 = 0.0, $73 = 0, $74 = 0.0, $75 = 0.0, $76 = 0;
 var $77 = 0.0, $78 = 0.0, $79 = 0.0, $8 = 0, $80 = 0.0, $81 = 0.0, $82 = 0, $83 = 0, $84 = 0.0, $85 = 0.0, $86 = 0.0, $87 = 0.0, $88 = 0, $89 = 0.0, $9 = 0, $90 = 0.0, $91 = 0, $92 = 0.0, $93 = 0.0, $94 = 0.0;
 var $95 = 0.0, $96 = 0.0, $97 = 0, $98 = 0, $99 = 0.0, $cfg = 0, $ch = 0, $gi = 0, $gr = 0, $pxmin = 0, $sfb = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $0 = sp + 36|0;
 $1 = sp + 32|0;
 $2 = sp + 28|0;
 $3 = sp + 24|0;
 $cfg = sp + 20|0;
 $gr = sp + 16|0;
 $ch = sp + 12|0;
 $sfb = sp + 8|0;
 $gi = sp + 4|0;
 $pxmin = sp;
 HEAP32[$0>>2] = $gfc;
 HEAP32[$1>>2] = $l3_xmin;
 HEAP32[$2>>2] = $min_bits;
 HEAP32[$3>>2] = $max_bits;
 $4 = HEAP32[$0>>2]|0;
 $5 = (($4) + 16|0);
 HEAP32[$cfg>>2] = $5;
 HEAP32[$gr>>2] = 0;
 while(1) {
  $6 = HEAP32[$gr>>2]|0;
  $7 = HEAP32[$cfg>>2]|0;
  $8 = (($7) + 60|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = ($6|0)<($9|0);
  if (!($10)) {
   break;
  }
  HEAP32[$ch>>2] = 0;
  while(1) {
   $11 = HEAP32[$ch>>2]|0;
   $12 = HEAP32[$cfg>>2]|0;
   $13 = (($12) + 56|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = ($11|0)<($14|0);
   if (!($15)) {
    break;
   }
   $16 = HEAP32[$ch>>2]|0;
   $17 = HEAP32[$gr>>2]|0;
   $18 = HEAP32[$0>>2]|0;
   $19 = (($18) + 304|0);
   $20 = (($19) + (($17*10504)|0)|0);
   $21 = (($20) + (($16*5252)|0)|0);
   HEAP32[$gi>>2] = $21;
   $22 = HEAP32[$ch>>2]|0;
   $23 = HEAP32[$gr>>2]|0;
   $24 = HEAP32[$1>>2]|0;
   $25 = (($24) + (($23*312)|0)|0);
   $26 = (($25) + (($22*156)|0)|0);
   HEAP32[$pxmin>>2] = $26;
   HEAP32[$sfb>>2] = 0;
   while(1) {
    $27 = HEAP32[$sfb>>2]|0;
    $28 = HEAP32[$gi>>2]|0;
    $29 = (($28) + 4856|0);
    $30 = HEAP32[$29>>2]|0;
    $31 = ($27|0)<($30|0);
    if (!($31)) {
     break;
    }
    $32 = HEAP32[$sfb>>2]|0;
    $33 = (+($32|0));
    $34 = 0.029000000000000001471 * $33;
    $35 = HEAP32[$sfb>>2]|0;
    $36 = (+($35|0));
    $37 = $34 * $36;
    $38 = $37 / 22.0;
    $39 = $38 / 22.0;
    $40 = 1.0 + $39;
    $41 = HEAP32[$pxmin>>2]|0;
    $42 = (($41) + 4|0);
    HEAP32[$pxmin>>2] = $42;
    $43 = +HEAPF32[$41>>2];
    $44 = $43;
    $45 = $44 * $40;
    $46 = $45;
    HEAPF32[$41>>2] = $46;
    $47 = HEAP32[$sfb>>2]|0;
    $48 = (($47) + 1)|0;
    HEAP32[$sfb>>2] = $48;
   }
   $49 = HEAP32[$gi>>2]|0;
   $50 = (($49) + 4788|0);
   $51 = HEAP32[$50>>2]|0;
   $52 = ($51|0)==(2);
   L11: do {
    if ($52) {
     $53 = HEAP32[$gi>>2]|0;
     $54 = (($53) + 4852|0);
     $55 = HEAP32[$54>>2]|0;
     HEAP32[$sfb>>2] = $55;
     while(1) {
      $56 = HEAP32[$sfb>>2]|0;
      $57 = ($56|0)<(13);
      if (!($57)) {
       break L11;
      }
      $58 = HEAP32[$sfb>>2]|0;
      $59 = (+($58|0));
      $60 = 0.029000000000000001471 * $59;
      $61 = HEAP32[$sfb>>2]|0;
      $62 = (+($61|0));
      $63 = $60 * $62;
      $64 = $63 / 13.0;
      $65 = $64 / 13.0;
      $66 = 1.0 + $65;
      $67 = HEAP32[$pxmin>>2]|0;
      $68 = (($67) + 4|0);
      HEAP32[$pxmin>>2] = $68;
      $69 = +HEAPF32[$67>>2];
      $70 = $69;
      $71 = $70 * $66;
      $72 = $71;
      HEAPF32[$67>>2] = $72;
      $73 = HEAP32[$sfb>>2]|0;
      $74 = (+($73|0));
      $75 = 0.029000000000000001471 * $74;
      $76 = HEAP32[$sfb>>2]|0;
      $77 = (+($76|0));
      $78 = $75 * $77;
      $79 = $78 / 13.0;
      $80 = $79 / 13.0;
      $81 = 1.0 + $80;
      $82 = HEAP32[$pxmin>>2]|0;
      $83 = (($82) + 4|0);
      HEAP32[$pxmin>>2] = $83;
      $84 = +HEAPF32[$82>>2];
      $85 = $84;
      $86 = $85 * $81;
      $87 = $86;
      HEAPF32[$82>>2] = $87;
      $88 = HEAP32[$sfb>>2]|0;
      $89 = (+($88|0));
      $90 = 0.029000000000000001471 * $89;
      $91 = HEAP32[$sfb>>2]|0;
      $92 = (+($91|0));
      $93 = $90 * $92;
      $94 = $93 / 13.0;
      $95 = $94 / 13.0;
      $96 = 1.0 + $95;
      $97 = HEAP32[$pxmin>>2]|0;
      $98 = (($97) + 4|0);
      HEAP32[$pxmin>>2] = $98;
      $99 = +HEAPF32[$97>>2];
      $100 = $99;
      $101 = $100 * $96;
      $102 = $101;
      HEAPF32[$97>>2] = $102;
      $103 = HEAP32[$sfb>>2]|0;
      $104 = (($103) + 1)|0;
      HEAP32[$sfb>>2] = $104;
     }
    }
   } while(0);
   $105 = HEAP32[$ch>>2]|0;
   $106 = HEAP32[$gr>>2]|0;
   $107 = HEAP32[$2>>2]|0;
   $108 = (($107) + ($106<<3)|0);
   $109 = (($108) + ($105<<2)|0);
   $110 = HEAP32[$109>>2]|0;
   $111 = (+($110|0));
   $112 = HEAP32[$ch>>2]|0;
   $113 = HEAP32[$gr>>2]|0;
   $114 = HEAP32[$3>>2]|0;
   $115 = (($114) + ($113<<3)|0);
   $116 = (($115) + ($112<<2)|0);
   $117 = HEAP32[$116>>2]|0;
   $118 = (+($117|0));
   $119 = 0.900000000000000022204 * $118;
   $120 = $111 > $119;
   $121 = HEAP32[$ch>>2]|0;
   $122 = HEAP32[$gr>>2]|0;
   if ($120) {
    $123 = HEAP32[$2>>2]|0;
    $124 = (($123) + ($122<<3)|0);
    $125 = (($124) + ($121<<2)|0);
    $126 = HEAP32[$125>>2]|0;
    $127 = (+($126|0));
    $135 = $127;
   } else {
    $128 = HEAP32[$3>>2]|0;
    $129 = (($128) + ($122<<3)|0);
    $130 = (($129) + ($121<<2)|0);
    $131 = HEAP32[$130>>2]|0;
    $132 = (+($131|0));
    $133 = 0.900000000000000022204 * $132;
    $135 = $133;
   }
   $134 = (~~(($135)));
   $136 = HEAP32[$ch>>2]|0;
   $137 = HEAP32[$gr>>2]|0;
   $138 = HEAP32[$3>>2]|0;
   $139 = (($138) + ($137<<3)|0);
   $140 = (($139) + ($136<<2)|0);
   HEAP32[$140>>2] = $134;
   $141 = HEAP32[$ch>>2]|0;
   $142 = (($141) + 1)|0;
   HEAP32[$ch>>2] = $142;
  }
  $143 = HEAP32[$gr>>2]|0;
  $144 = (($143) + 1)|0;
  HEAP32[$gr>>2] = $144;
 }
 STACKTOP = sp;return;
}
function _iteration_finish_one($gfc,$gr,$ch) {
 $gfc = $gfc|0;
 $gr = $gr|0;
 $ch = $ch|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cfg = 0, $cod_info = 0, $l3_side = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = sp + 20|0;
 $1 = sp + 16|0;
 $2 = sp + 12|0;
 $cfg = sp + 8|0;
 $l3_side = sp + 4|0;
 $cod_info = sp;
 HEAP32[$0>>2] = $gfc;
 HEAP32[$1>>2] = $gr;
 HEAP32[$2>>2] = $ch;
 $3 = HEAP32[$0>>2]|0;
 $4 = (($3) + 16|0);
 HEAP32[$cfg>>2] = $4;
 $5 = HEAP32[$0>>2]|0;
 $6 = (($5) + 304|0);
 HEAP32[$l3_side>>2] = $6;
 $7 = HEAP32[$2>>2]|0;
 $8 = HEAP32[$1>>2]|0;
 $9 = HEAP32[$l3_side>>2]|0;
 $10 = (($9) + (($8*10504)|0)|0);
 $11 = (($10) + (($7*5252)|0)|0);
 HEAP32[$cod_info>>2] = $11;
 $12 = HEAP32[$0>>2]|0;
 $13 = HEAP32[$1>>2]|0;
 $14 = HEAP32[$2>>2]|0;
 $15 = HEAP32[$l3_side>>2]|0;
 _best_scalefac_store($12,$13,$14,$15);
 $16 = HEAP32[$cfg>>2]|0;
 $17 = (($16) + 20|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = ($18|0)==(1);
 if (!($19)) {
  $22 = HEAP32[$0>>2]|0;
  $23 = HEAP32[$cod_info>>2]|0;
  _ResvAdjust($22,$23);
  STACKTOP = sp;return;
 }
 $20 = HEAP32[$0>>2]|0;
 $21 = HEAP32[$cod_info>>2]|0;
 _best_huffman_divide($20,$21);
 $22 = HEAP32[$0>>2]|0;
 $23 = HEAP32[$cod_info>>2]|0;
 _ResvAdjust($22,$23);
 STACKTOP = sp;return;
}
function _VBR_new_iteration_loop($gfc,$pe,$ms_ener_ratio,$ratio) {
 $gfc = $gfc|0;
 $pe = $pe|0;
 $ms_ener_ratio = $ms_ener_ratio|0;
 $ratio = $ratio|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $analog_silence = 0, $cfg = 0, $ch = 0, $cod_info = 0, $cod_info1 = 0, $const_l3_xmin = 0, $const_max_bits = 0, $const_xrpow = 0, $eov = 0, $frameBits = 0, $fullframebits = 0, $gr = 0, $i = 0, $j = 0, $l3_side = 0, $l3_xmin = 0, $max_bits = 0, $mean_bits = 0, $pad = 0;
 var $unused = 0, $used_bits = 0, $vararg_buffer = 0, $xrpow = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 10016|0;
 $vararg_buffer = sp;
 $0 = sp + 10004|0;
 $1 = sp + 10000|0;
 $2 = sp + 9996|0;
 $3 = sp + 9992|0;
 $cfg = sp + 9988|0;
 $eov = sp + 9984|0;
 $l3_xmin = sp + 9360|0;
 $xrpow = sp + 144|0;
 $frameBits = sp + 84|0;
 $used_bits = sp + 80|0;
 $max_bits = sp + 64|0;
 $ch = sp + 60|0;
 $gr = sp + 56|0;
 $analog_silence = sp + 52|0;
 $pad = sp + 48|0;
 $l3_side = sp + 44|0;
 $const_l3_xmin = sp + 40|0;
 $const_xrpow = sp + 36|0;
 $const_max_bits = sp + 32|0;
 $cod_info = sp + 28|0;
 $i = sp + 24|0;
 $j = sp + 20|0;
 $unused = sp + 16|0;
 $mean_bits = sp + 12|0;
 $fullframebits = sp + 8|0;
 $cod_info1 = sp + 4|0;
 HEAP32[$0>>2] = $gfc;
 HEAP32[$1>>2] = $pe;
 HEAP32[$2>>2] = $ms_ener_ratio;
 HEAP32[$3>>2] = $ratio;
 $4 = HEAP32[$0>>2]|0;
 $5 = (($4) + 16|0);
 HEAP32[$cfg>>2] = $5;
 $6 = HEAP32[$0>>2]|0;
 $7 = (($6) + 84040|0);
 HEAP32[$eov>>2] = $7;
 $8 = HEAP32[$0>>2]|0;
 $9 = (($8) + 304|0);
 HEAP32[$l3_side>>2] = $9;
 HEAP32[$const_l3_xmin>>2] = $l3_xmin;
 HEAP32[$const_xrpow>>2] = $xrpow;
 HEAP32[$const_max_bits>>2] = $max_bits;
 _memset(($xrpow|0),0,9216)|0;
 $10 = HEAP32[$0>>2]|0;
 $11 = HEAP32[$1>>2]|0;
 $12 = HEAP32[$3>>2]|0;
 $13 = (_VBR_new_prepare($10,$11,$12,$l3_xmin,$frameBits,$max_bits,$pad)|0);
 HEAP32[$analog_silence>>2] = $13;
 HEAP32[$gr>>2] = 0;
 while(1) {
  $14 = HEAP32[$gr>>2]|0;
  $15 = HEAP32[$cfg>>2]|0;
  $16 = (($15) + 60|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = ($14|0)<($17|0);
  if (!($18)) {
   break;
  }
  HEAP32[$ch>>2] = 0;
  while(1) {
   $19 = HEAP32[$ch>>2]|0;
   $20 = HEAP32[$cfg>>2]|0;
   $21 = (($20) + 56|0);
   $22 = HEAP32[$21>>2]|0;
   $23 = ($19|0)<($22|0);
   if (!($23)) {
    break;
   }
   $24 = HEAP32[$ch>>2]|0;
   $25 = HEAP32[$gr>>2]|0;
   $26 = HEAP32[$l3_side>>2]|0;
   $27 = (($26) + (($25*10504)|0)|0);
   $28 = (($27) + (($24*5252)|0)|0);
   HEAP32[$cod_info>>2] = $28;
   $29 = HEAP32[$0>>2]|0;
   $30 = HEAP32[$cod_info>>2]|0;
   $31 = HEAP32[$ch>>2]|0;
   $32 = HEAP32[$gr>>2]|0;
   $33 = (($xrpow) + (($32*4608)|0)|0);
   $34 = (($33) + (($31*2304)|0)|0);
   $35 = (_init_xrpow($29,$30,$34)|0);
   $36 = (0)==($35|0);
   if ($36) {
    $37 = HEAP32[$ch>>2]|0;
    $38 = HEAP32[$gr>>2]|0;
    $39 = (($max_bits) + ($38<<3)|0);
    $40 = (($39) + ($37<<2)|0);
    HEAP32[$40>>2] = 0;
   }
   $41 = HEAP32[$ch>>2]|0;
   $42 = (($41) + 1)|0;
   HEAP32[$ch>>2] = $42;
  }
  $43 = HEAP32[$gr>>2]|0;
  $44 = (($43) + 1)|0;
  HEAP32[$gr>>2] = $44;
 }
 $45 = HEAP32[$0>>2]|0;
 $46 = HEAP32[$const_xrpow>>2]|0;
 $47 = HEAP32[$const_l3_xmin>>2]|0;
 $48 = HEAP32[$const_max_bits>>2]|0;
 $49 = (_VBR_encode_frame($45,$46,$47,$48)|0);
 HEAP32[$used_bits>>2] = $49;
 $50 = HEAP32[$cfg>>2]|0;
 $51 = (($50) + 136|0);
 $52 = HEAP32[$51>>2]|0;
 $53 = ($52|0)!=(0);
 do {
  if ($53) {
   $107 = HEAP32[$eov>>2]|0;
   $108 = (($107) + 704|0);
   HEAP32[$108>>2] = 0;
  } else {
   $54 = HEAP32[$analog_silence>>2]|0;
   $55 = ($54|0)!=(0);
   if ($55) {
    $56 = HEAP32[$cfg>>2]|0;
    $57 = (($56) + 108|0);
    $58 = HEAP32[$57>>2]|0;
    $59 = ($58|0)!=(0);
    if ($59) {
     label = 13;
    } else {
     HEAP32[$i>>2] = 1;
    }
   } else {
    label = 13;
   }
   if ((label|0) == 13) {
    $60 = HEAP32[$cfg>>2]|0;
    $61 = (($60) + 96|0);
    $62 = HEAP32[$61>>2]|0;
    HEAP32[$i>>2] = $62;
   }
   while(1) {
    $63 = HEAP32[$i>>2]|0;
    $64 = HEAP32[$cfg>>2]|0;
    $65 = (($64) + 100|0);
    $66 = HEAP32[$65>>2]|0;
    $67 = ($63|0)<($66|0);
    if (!($67)) {
     break;
    }
    $68 = HEAP32[$used_bits>>2]|0;
    $69 = HEAP32[$i>>2]|0;
    $70 = (($frameBits) + ($69<<2)|0);
    $71 = HEAP32[$70>>2]|0;
    $72 = ($68|0)<=($71|0);
    if ($72) {
     break;
    }
    $73 = HEAP32[$i>>2]|0;
    $74 = (($73) + 1)|0;
    HEAP32[$i>>2] = $74;
   }
   $75 = HEAP32[$i>>2]|0;
   $76 = HEAP32[$cfg>>2]|0;
   $77 = (($76) + 100|0);
   $78 = HEAP32[$77>>2]|0;
   $79 = ($75|0)>($78|0);
   if ($79) {
    $80 = HEAP32[$cfg>>2]|0;
    $81 = (($80) + 100|0);
    $82 = HEAP32[$81>>2]|0;
    HEAP32[$i>>2] = $82;
   }
   $83 = HEAP32[$pad>>2]|0;
   $84 = ($83|0)>(0);
   if (!($84)) {
    $104 = HEAP32[$i>>2]|0;
    $105 = HEAP32[$eov>>2]|0;
    $106 = (($105) + 704|0);
    HEAP32[$106>>2] = $104;
    break;
   }
   $85 = HEAP32[$cfg>>2]|0;
   $86 = (($85) + 100|0);
   $87 = HEAP32[$86>>2]|0;
   HEAP32[$j>>2] = $87;
   while(1) {
    $88 = HEAP32[$j>>2]|0;
    $89 = HEAP32[$i>>2]|0;
    $90 = ($88|0)>($89|0);
    if (!($90)) {
     break;
    }
    $91 = HEAP32[$j>>2]|0;
    $92 = (($frameBits) + ($91<<2)|0);
    $93 = HEAP32[$92>>2]|0;
    $94 = HEAP32[$used_bits>>2]|0;
    $95 = (($93) - ($94))|0;
    HEAP32[$unused>>2] = $95;
    $96 = HEAP32[$unused>>2]|0;
    $97 = HEAP32[$pad>>2]|0;
    $98 = ($96|0)<=($97|0);
    if ($98) {
     break;
    }
    $99 = HEAP32[$j>>2]|0;
    $100 = (($99) + -1)|0;
    HEAP32[$j>>2] = $100;
   }
   $101 = HEAP32[$j>>2]|0;
   $102 = HEAP32[$eov>>2]|0;
   $103 = (($102) + 704|0);
   HEAP32[$103>>2] = $101;
  }
 } while(0);
 $109 = HEAP32[$used_bits>>2]|0;
 $110 = HEAP32[$eov>>2]|0;
 $111 = (($110) + 704|0);
 $112 = HEAP32[$111>>2]|0;
 $113 = (($frameBits) + ($112<<2)|0);
 $114 = HEAP32[$113>>2]|0;
 $115 = ($109|0)<=($114|0);
 $116 = HEAP32[$0>>2]|0;
 if (!($115)) {
  _lame_errorf($116,21032,$vararg_buffer);
  _exit(-1);
  // unreachable;
 }
 $117 = (_ResvFrameBegin($116,$mean_bits)|0);
 HEAP32[$fullframebits>>2] = $117;
 HEAP32[$gr>>2] = 0;
 while(1) {
  $118 = HEAP32[$gr>>2]|0;
  $119 = HEAP32[$cfg>>2]|0;
  $120 = (($119) + 60|0);
  $121 = HEAP32[$120>>2]|0;
  $122 = ($118|0)<($121|0);
  if (!($122)) {
   break;
  }
  HEAP32[$ch>>2] = 0;
  while(1) {
   $123 = HEAP32[$ch>>2]|0;
   $124 = HEAP32[$cfg>>2]|0;
   $125 = (($124) + 56|0);
   $126 = HEAP32[$125>>2]|0;
   $127 = ($123|0)<($126|0);
   if (!($127)) {
    break;
   }
   $128 = HEAP32[$ch>>2]|0;
   $129 = HEAP32[$gr>>2]|0;
   $130 = HEAP32[$l3_side>>2]|0;
   $131 = (($130) + (($129*10504)|0)|0);
   $132 = (($131) + (($128*5252)|0)|0);
   HEAP32[$cod_info1>>2] = $132;
   $133 = HEAP32[$0>>2]|0;
   $134 = HEAP32[$cod_info1>>2]|0;
   _ResvAdjust($133,$134);
   $135 = HEAP32[$ch>>2]|0;
   $136 = (($135) + 1)|0;
   HEAP32[$ch>>2] = $136;
  }
  $137 = HEAP32[$gr>>2]|0;
  $138 = (($137) + 1)|0;
  HEAP32[$gr>>2] = $138;
 }
 $139 = HEAP32[$0>>2]|0;
 $140 = HEAP32[$mean_bits>>2]|0;
 _ResvFrameEnd($139,$140);
 STACKTOP = sp;return;
}
function _VBR_new_prepare($gfc,$pe,$ratio,$l3_xmin,$frameBits,$max_bits,$max_resv) {
 $gfc = $gfc|0;
 $pe = $pe|0;
 $ratio = $ratio|0;
 $l3_xmin = $l3_xmin|0;
 $frameBits = $frameBits|0;
 $max_bits = $max_bits|0;
 $max_resv = $max_resv|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0.0, $8 = 0, $80 = 0.0, $81 = 0.0, $82 = 0.0, $83 = 0.0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $analog_silence = 0, $avg = 0, $bits = 0, $cfg = 0, $ch = 0, $cod_info = 0;
 var $eov = 0, $gr = 0, $maximum_framebits = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $0 = sp + 60|0;
 $1 = sp + 56|0;
 $2 = sp + 52|0;
 $3 = sp + 48|0;
 $4 = sp + 44|0;
 $5 = sp + 40|0;
 $6 = sp + 36|0;
 $cfg = sp + 32|0;
 $eov = sp + 28|0;
 $gr = sp + 24|0;
 $ch = sp + 20|0;
 $analog_silence = sp + 16|0;
 $avg = sp + 12|0;
 $bits = sp + 8|0;
 $maximum_framebits = sp + 4|0;
 $cod_info = sp;
 HEAP32[$0>>2] = $gfc;
 HEAP32[$1>>2] = $pe;
 HEAP32[$2>>2] = $ratio;
 HEAP32[$3>>2] = $l3_xmin;
 HEAP32[$4>>2] = $frameBits;
 HEAP32[$5>>2] = $max_bits;
 HEAP32[$6>>2] = $max_resv;
 $7 = HEAP32[$0>>2]|0;
 $8 = (($7) + 16|0);
 HEAP32[$cfg>>2] = $8;
 $9 = HEAP32[$0>>2]|0;
 $10 = (($9) + 84040|0);
 HEAP32[$eov>>2] = $10;
 HEAP32[$analog_silence>>2] = 1;
 HEAP32[$bits>>2] = 0;
 $11 = HEAP32[$cfg>>2]|0;
 $12 = (($11) + 136|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ($13|0)!=(0);
 if ($14) {
  $34 = HEAP32[$eov>>2]|0;
  $35 = (($34) + 704|0);
  HEAP32[$35>>2] = 0;
  $36 = HEAP32[$0>>2]|0;
  $37 = (_ResvFrameBegin($36,$avg)|0);
  HEAP32[$maximum_framebits>>2] = $37;
  $38 = HEAP32[$maximum_framebits>>2]|0;
  $39 = HEAP32[$4>>2]|0;
  HEAP32[$39>>2] = $38;
  $40 = HEAP32[$0>>2]|0;
  $41 = (($40) + 27824|0);
  $42 = (($41) + 24320|0);
  $43 = HEAP32[$42>>2]|0;
  $44 = HEAP32[$6>>2]|0;
  HEAP32[$44>>2] = $43;
 } else {
  $15 = HEAP32[$cfg>>2]|0;
  $16 = (($15) + 100|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = HEAP32[$eov>>2]|0;
  $19 = (($18) + 704|0);
  HEAP32[$19>>2] = $17;
  $20 = HEAP32[$0>>2]|0;
  (_ResvFrameBegin($20,$avg)|0);
  $21 = HEAP32[$0>>2]|0;
  $22 = (($21) + 27824|0);
  $23 = (($22) + 24320|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = HEAP32[$6>>2]|0;
  HEAP32[$25>>2] = $24;
  $26 = HEAP32[$0>>2]|0;
  $27 = HEAP32[$4>>2]|0;
  _get_framebits($26,$27);
  $28 = HEAP32[$cfg>>2]|0;
  $29 = (($28) + 100|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = HEAP32[$4>>2]|0;
  $32 = (($31) + ($30<<2)|0);
  $33 = HEAP32[$32>>2]|0;
  HEAP32[$maximum_framebits>>2] = $33;
 }
 HEAP32[$gr>>2] = 0;
 while(1) {
  $45 = HEAP32[$gr>>2]|0;
  $46 = HEAP32[$cfg>>2]|0;
  $47 = (($46) + 60|0);
  $48 = HEAP32[$47>>2]|0;
  $49 = ($45|0)<($48|0);
  if (!($49)) {
   break;
  }
  $50 = HEAP32[$0>>2]|0;
  $51 = HEAP32[$1>>2]|0;
  $52 = HEAP32[$gr>>2]|0;
  $53 = HEAP32[$5>>2]|0;
  $54 = (($53) + ($52<<3)|0);
  $55 = HEAP32[$avg>>2]|0;
  $56 = HEAP32[$gr>>2]|0;
  (_on_pe($50,$51,$54,$55,$56,0)|0);
  $57 = HEAP32[$0>>2]|0;
  $58 = (($57) + 84040|0);
  $59 = (($58) + 716|0);
  $60 = HEAP32[$59>>2]|0;
  $61 = ($60|0)==(2);
  if ($61) {
   $62 = HEAP32[$0>>2]|0;
   $63 = (($62) + 304|0);
   $64 = HEAP32[$gr>>2]|0;
   _ms_convert($63,$64);
  }
  HEAP32[$ch>>2] = 0;
  while(1) {
   $65 = HEAP32[$ch>>2]|0;
   $66 = HEAP32[$cfg>>2]|0;
   $67 = (($66) + 56|0);
   $68 = HEAP32[$67>>2]|0;
   $69 = ($65|0)<($68|0);
   if (!($69)) {
    break;
   }
   $70 = HEAP32[$ch>>2]|0;
   $71 = HEAP32[$gr>>2]|0;
   $72 = HEAP32[$0>>2]|0;
   $73 = (($72) + 304|0);
   $74 = (($73) + (($71*10504)|0)|0);
   $75 = (($74) + (($70*5252)|0)|0);
   HEAP32[$cod_info>>2] = $75;
   $76 = HEAP32[$0>>2]|0;
   $77 = (($76) + 84768|0);
   $78 = (($77) + 144|0);
   $79 = +HEAPF32[$78>>2];
   $80 = $79;
   $81 = $80 * 0.100000000000000005551;
   $82 = (+Math_pow(10.0,(+$81)));
   $83 = $82;
   $84 = HEAP32[$0>>2]|0;
   $85 = (($84) + 84768|0);
   $86 = (($85) + 140|0);
   HEAPF32[$86>>2] = $83;
   $87 = HEAP32[$0>>2]|0;
   $88 = HEAP32[$cod_info>>2]|0;
   _init_outer_loop($87,$88);
   $89 = HEAP32[$0>>2]|0;
   $90 = HEAP32[$ch>>2]|0;
   $91 = HEAP32[$gr>>2]|0;
   $92 = HEAP32[$2>>2]|0;
   $93 = (($92) + (($91*976)|0)|0);
   $94 = (($93) + (($90*488)|0)|0);
   $95 = HEAP32[$cod_info>>2]|0;
   $96 = HEAP32[$ch>>2]|0;
   $97 = HEAP32[$gr>>2]|0;
   $98 = HEAP32[$3>>2]|0;
   $99 = (($98) + (($97*312)|0)|0);
   $100 = (($99) + (($96*156)|0)|0);
   $101 = (_calc_xmin($89,$94,$95,$100)|0);
   $102 = (0)!=($101|0);
   if ($102) {
    HEAP32[$analog_silence>>2] = 0;
   }
   $103 = HEAP32[$ch>>2]|0;
   $104 = HEAP32[$gr>>2]|0;
   $105 = HEAP32[$5>>2]|0;
   $106 = (($105) + ($104<<3)|0);
   $107 = (($106) + ($103<<2)|0);
   $108 = HEAP32[$107>>2]|0;
   $109 = HEAP32[$bits>>2]|0;
   $110 = (($109) + ($108))|0;
   HEAP32[$bits>>2] = $110;
   $111 = HEAP32[$ch>>2]|0;
   $112 = (($111) + 1)|0;
   HEAP32[$ch>>2] = $112;
  }
  $113 = HEAP32[$gr>>2]|0;
  $114 = (($113) + 1)|0;
  HEAP32[$gr>>2] = $114;
 }
 HEAP32[$gr>>2] = 0;
 while(1) {
  $115 = HEAP32[$gr>>2]|0;
  $116 = HEAP32[$cfg>>2]|0;
  $117 = (($116) + 60|0);
  $118 = HEAP32[$117>>2]|0;
  $119 = ($115|0)<($118|0);
  if (!($119)) {
   break;
  }
  HEAP32[$ch>>2] = 0;
  while(1) {
   $120 = HEAP32[$ch>>2]|0;
   $121 = HEAP32[$cfg>>2]|0;
   $122 = (($121) + 56|0);
   $123 = HEAP32[$122>>2]|0;
   $124 = ($120|0)<($123|0);
   if (!($124)) {
    break;
   }
   $125 = HEAP32[$bits>>2]|0;
   $126 = HEAP32[$maximum_framebits>>2]|0;
   $127 = ($125|0)>($126|0);
   $128 = HEAP32[$bits>>2]|0;
   $129 = ($128|0)>(0);
   $or$cond = $127 & $129;
   if ($or$cond) {
    $130 = HEAP32[$maximum_framebits>>2]|0;
    $131 = HEAP32[$ch>>2]|0;
    $132 = HEAP32[$gr>>2]|0;
    $133 = HEAP32[$5>>2]|0;
    $134 = (($133) + ($132<<3)|0);
    $135 = (($134) + ($131<<2)|0);
    $136 = HEAP32[$135>>2]|0;
    $137 = Math_imul($136, $130)|0;
    HEAP32[$135>>2] = $137;
    $138 = HEAP32[$bits>>2]|0;
    $139 = HEAP32[$ch>>2]|0;
    $140 = HEAP32[$gr>>2]|0;
    $141 = HEAP32[$5>>2]|0;
    $142 = (($141) + ($140<<3)|0);
    $143 = (($142) + ($139<<2)|0);
    $144 = HEAP32[$143>>2]|0;
    $145 = (($144|0) / ($138|0))&-1;
    HEAP32[$143>>2] = $145;
   }
   $146 = HEAP32[$ch>>2]|0;
   $147 = (($146) + 1)|0;
   HEAP32[$ch>>2] = $147;
  }
  $148 = HEAP32[$gr>>2]|0;
  $149 = (($148) + 1)|0;
  HEAP32[$gr>>2] = $149;
 }
 $150 = HEAP32[$analog_silence>>2]|0;
 $151 = ($150|0)!=(0);
 if (!($151)) {
  $153 = HEAP32[$analog_silence>>2]|0;
  STACKTOP = sp;return ($153|0);
 }
 $152 = HEAP32[$6>>2]|0;
 HEAP32[$152>>2] = 0;
 $153 = HEAP32[$analog_silence>>2]|0;
 STACKTOP = sp;return ($153|0);
}
function _ABR_iteration_loop($gfc,$pe,$ms_ener_ratio,$ratio) {
 $gfc = $gfc|0;
 $pe = $pe|0;
 $ms_ener_ratio = $ms_ener_ratio|0;
 $ratio = $ratio|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $12 = 0;
 var $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0, $47 = 0.0, $48 = 0.0, $49 = 0.0;
 var $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $adjust = 0, $analog_silence_bits = 0, $ath_over = 0, $cfg = 0, $ch = 0;
 var $cod_info = 0, $eov = 0, $gr = 0, $l3_side = 0, $l3_xmin = 0, $masking_lower_db = 0, $max_frame_bits = 0, $mean_bits = 0, $targ_bits = 0, $xrpow = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 2544|0;
 $0 = sp + 2536|0;
 $1 = sp + 2532|0;
 $2 = sp + 2528|0;
 $3 = sp + 2524|0;
 $cfg = sp + 2520|0;
 $eov = sp + 2516|0;
 $l3_xmin = sp + 2360|0;
 $xrpow = sp + 56|0;
 $targ_bits = sp + 40|0;
 $mean_bits = sp + 36|0;
 $max_frame_bits = sp + 32|0;
 $ch = sp + 28|0;
 $gr = sp + 24|0;
 $ath_over = sp + 20|0;
 $analog_silence_bits = sp + 16|0;
 $cod_info = sp + 12|0;
 $l3_side = sp + 8|0;
 $adjust = sp + 4|0;
 $masking_lower_db = sp;
 HEAP32[$0>>2] = $gfc;
 HEAP32[$1>>2] = $pe;
 HEAP32[$2>>2] = $ms_ener_ratio;
 HEAP32[$3>>2] = $ratio;
 $4 = HEAP32[$0>>2]|0;
 $5 = (($4) + 16|0);
 HEAP32[$cfg>>2] = $5;
 $6 = HEAP32[$0>>2]|0;
 $7 = (($6) + 84040|0);
 HEAP32[$eov>>2] = $7;
 $8 = HEAP32[$0>>2]|0;
 $9 = (($8) + 304|0);
 HEAP32[$l3_side>>2] = $9;
 HEAP32[$mean_bits>>2] = 0;
 $10 = HEAP32[$0>>2]|0;
 $11 = HEAP32[$1>>2]|0;
 $12 = HEAP32[$2>>2]|0;
 _calc_target_bits($10,$11,$12,$targ_bits,$analog_silence_bits,$max_frame_bits);
 HEAP32[$gr>>2] = 0;
 while(1) {
  $13 = HEAP32[$gr>>2]|0;
  $14 = HEAP32[$cfg>>2]|0;
  $15 = (($14) + 60|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = ($13|0)<($16|0);
  if (!($17)) {
   break;
  }
  $18 = HEAP32[$0>>2]|0;
  $19 = (($18) + 84040|0);
  $20 = (($19) + 716|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = ($21|0)==(2);
  if ($22) {
   $23 = HEAP32[$0>>2]|0;
   $24 = (($23) + 304|0);
   $25 = HEAP32[$gr>>2]|0;
   _ms_convert($24,$25);
  }
  HEAP32[$ch>>2] = 0;
  while(1) {
   $26 = HEAP32[$ch>>2]|0;
   $27 = HEAP32[$cfg>>2]|0;
   $28 = (($27) + 56|0);
   $29 = HEAP32[$28>>2]|0;
   $30 = ($26|0)<($29|0);
   if (!($30)) {
    break;
   }
   $31 = HEAP32[$ch>>2]|0;
   $32 = HEAP32[$gr>>2]|0;
   $33 = HEAP32[$l3_side>>2]|0;
   $34 = (($33) + (($32*10504)|0)|0);
   $35 = (($34) + (($31*5252)|0)|0);
   HEAP32[$cod_info>>2] = $35;
   $36 = HEAP32[$cod_info>>2]|0;
   $37 = (($36) + 4788|0);
   $38 = HEAP32[$37>>2]|0;
   $39 = ($38|0)!=(2);
   HEAPF32[$adjust>>2] = 0.0;
   $40 = HEAP32[$0>>2]|0;
   $41 = (($40) + 84768|0);
   if ($39) {
    $42 = (($41) + 144|0);
    $43 = +HEAPF32[$42>>2];
    $44 = +HEAPF32[$adjust>>2];
    $45 = $43 - $44;
    HEAPF32[$masking_lower_db>>2] = $45;
   } else {
    $46 = (($41) + 148|0);
    $47 = +HEAPF32[$46>>2];
    $48 = +HEAPF32[$adjust>>2];
    $49 = $47 - $48;
    HEAPF32[$masking_lower_db>>2] = $49;
   }
   $50 = +HEAPF32[$masking_lower_db>>2];
   $51 = $50;
   $52 = $51 * 0.100000000000000005551;
   $53 = (+Math_pow(10.0,(+$52)));
   $54 = $53;
   $55 = HEAP32[$0>>2]|0;
   $56 = (($55) + 84768|0);
   $57 = (($56) + 140|0);
   HEAPF32[$57>>2] = $54;
   $58 = HEAP32[$0>>2]|0;
   $59 = HEAP32[$cod_info>>2]|0;
   _init_outer_loop($58,$59);
   $60 = HEAP32[$0>>2]|0;
   $61 = HEAP32[$cod_info>>2]|0;
   $62 = (_init_xrpow($60,$61,$xrpow)|0);
   $63 = ($62|0)!=(0);
   if ($63) {
    $64 = HEAP32[$0>>2]|0;
    $65 = HEAP32[$ch>>2]|0;
    $66 = HEAP32[$gr>>2]|0;
    $67 = HEAP32[$3>>2]|0;
    $68 = (($67) + (($66*976)|0)|0);
    $69 = (($68) + (($65*488)|0)|0);
    $70 = HEAP32[$cod_info>>2]|0;
    $71 = (_calc_xmin($64,$69,$70,$l3_xmin)|0);
    HEAP32[$ath_over>>2] = $71;
    $72 = HEAP32[$ath_over>>2]|0;
    $73 = (0)==($72|0);
    if ($73) {
     $74 = HEAP32[$analog_silence_bits>>2]|0;
     $75 = HEAP32[$ch>>2]|0;
     $76 = HEAP32[$gr>>2]|0;
     $77 = (($targ_bits) + ($76<<3)|0);
     $78 = (($77) + ($75<<2)|0);
     HEAP32[$78>>2] = $74;
    }
    $79 = HEAP32[$0>>2]|0;
    $80 = HEAP32[$cod_info>>2]|0;
    $81 = HEAP32[$ch>>2]|0;
    $82 = HEAP32[$ch>>2]|0;
    $83 = HEAP32[$gr>>2]|0;
    $84 = (($targ_bits) + ($83<<3)|0);
    $85 = (($84) + ($82<<2)|0);
    $86 = HEAP32[$85>>2]|0;
    (_outer_loop($79,$80,$l3_xmin,$xrpow,$81,$86)|0);
   }
   $87 = HEAP32[$0>>2]|0;
   $88 = HEAP32[$gr>>2]|0;
   $89 = HEAP32[$ch>>2]|0;
   _iteration_finish_one($87,$88,$89);
   $90 = HEAP32[$ch>>2]|0;
   $91 = (($90) + 1)|0;
   HEAP32[$ch>>2] = $91;
  }
  $92 = HEAP32[$gr>>2]|0;
  $93 = (($92) + 1)|0;
  HEAP32[$gr>>2] = $93;
 }
 $94 = HEAP32[$cfg>>2]|0;
 $95 = (($94) + 96|0);
 $96 = HEAP32[$95>>2]|0;
 $97 = HEAP32[$eov>>2]|0;
 $98 = (($97) + 704|0);
 HEAP32[$98>>2] = $96;
 while(1) {
  $99 = HEAP32[$eov>>2]|0;
  $100 = (($99) + 704|0);
  $101 = HEAP32[$100>>2]|0;
  $102 = HEAP32[$cfg>>2]|0;
  $103 = (($102) + 100|0);
  $104 = HEAP32[$103>>2]|0;
  $105 = ($101|0)<=($104|0);
  if (!($105)) {
   label = 20;
   break;
  }
  $106 = HEAP32[$0>>2]|0;
  $107 = (_ResvFrameBegin($106,$mean_bits)|0);
  $108 = ($107|0)>=(0);
  if ($108) {
   label = 20;
   break;
  }
  $109 = HEAP32[$eov>>2]|0;
  $110 = (($109) + 704|0);
  $111 = HEAP32[$110>>2]|0;
  $112 = (($111) + 1)|0;
  HEAP32[$110>>2] = $112;
 }
 if ((label|0) == 20) {
  $113 = HEAP32[$0>>2]|0;
  $114 = HEAP32[$mean_bits>>2]|0;
  _ResvFrameEnd($113,$114);
  STACKTOP = sp;return;
 }
}
function _calc_target_bits($gfc,$pe,$ms_ener_ratio,$targ_bits,$analog_silence_bits,$max_frame_bits) {
 $gfc = $gfc|0;
 $pe = $pe|0;
 $ms_ener_ratio = $ms_ener_ratio|0;
 $targ_bits = $targ_bits|0;
 $analog_silence_bits = $analog_silence_bits|0;
 $max_frame_bits = $max_frame_bits|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0.0, $105 = 0, $106 = 0.0, $107 = 0.0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0.0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0.0, $127 = 0.0, $128 = 0.0, $129 = 0.0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0.0, $137 = 0, $138 = 0.0, $139 = 0.0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0.0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0.0, $57 = 0.0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0.0, $82 = 0.0, $83 = 0.0;
 var $84 = 0.0, $85 = 0.0, $86 = 0.0, $87 = 0.0, $88 = 0.0, $89 = 0.0, $9 = 0, $90 = 0, $91 = 0.0, $92 = 0.0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $add_bits = 0, $cfg = 0, $ch = 0;
 var $cod_info = 0, $eov = 0, $framesize = 0, $gr = 0, $l3_side = 0, $mean_bits = 0, $or$cond = 0, $res_factor = 0, $sum = 0, $totbits = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0;
 $0 = sp + 68|0;
 $1 = sp + 64|0;
 $2 = sp + 60|0;
 $3 = sp + 56|0;
 $4 = sp + 52|0;
 $5 = sp + 48|0;
 $cfg = sp + 44|0;
 $eov = sp + 40|0;
 $l3_side = sp + 36|0;
 $res_factor = sp + 32|0;
 $gr = sp + 28|0;
 $ch = sp + 24|0;
 $totbits = sp + 20|0;
 $mean_bits = sp + 16|0;
 $framesize = sp + 12|0;
 $sum = sp + 8|0;
 $add_bits = sp + 4|0;
 $cod_info = sp;
 HEAP32[$0>>2] = $gfc;
 HEAP32[$1>>2] = $pe;
 HEAP32[$2>>2] = $ms_ener_ratio;
 HEAP32[$3>>2] = $targ_bits;
 HEAP32[$4>>2] = $analog_silence_bits;
 HEAP32[$5>>2] = $max_frame_bits;
 $6 = HEAP32[$0>>2]|0;
 $7 = (($6) + 16|0);
 HEAP32[$cfg>>2] = $7;
 $8 = HEAP32[$0>>2]|0;
 $9 = (($8) + 84040|0);
 HEAP32[$eov>>2] = $9;
 $10 = HEAP32[$0>>2]|0;
 $11 = (($10) + 304|0);
 HEAP32[$l3_side>>2] = $11;
 $12 = HEAP32[$cfg>>2]|0;
 $13 = (($12) + 60|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ($14*576)|0;
 HEAP32[$framesize>>2] = $15;
 $16 = HEAP32[$cfg>>2]|0;
 $17 = (($16) + 100|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = HEAP32[$eov>>2]|0;
 $20 = (($19) + 704|0);
 HEAP32[$20>>2] = $18;
 $21 = HEAP32[$0>>2]|0;
 $22 = (_ResvFrameBegin($21,$mean_bits)|0);
 $23 = HEAP32[$5>>2]|0;
 HEAP32[$23>>2] = $22;
 $24 = HEAP32[$eov>>2]|0;
 $25 = (($24) + 704|0);
 HEAP32[$25>>2] = 1;
 $26 = HEAP32[$0>>2]|0;
 $27 = (_getframebits($26)|0);
 $28 = HEAP32[$cfg>>2]|0;
 $29 = (($28) + 8|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = $30<<3;
 $32 = (($27) - ($31))|0;
 HEAP32[$mean_bits>>2] = $32;
 $33 = HEAP32[$mean_bits>>2]|0;
 $34 = HEAP32[$cfg>>2]|0;
 $35 = (($34) + 60|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = HEAP32[$cfg>>2]|0;
 $38 = (($37) + 56|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = Math_imul($36, $39)|0;
 $41 = (($33|0) / ($40|0))&-1;
 $42 = HEAP32[$4>>2]|0;
 HEAP32[$42>>2] = $41;
 $43 = HEAP32[$cfg>>2]|0;
 $44 = (($43) + 92|0);
 $45 = HEAP32[$44>>2]|0;
 $46 = HEAP32[$framesize>>2]|0;
 $47 = Math_imul($45, $46)|0;
 $48 = ($47*1000)|0;
 HEAP32[$mean_bits>>2] = $48;
 $49 = HEAP32[$0>>2]|0;
 $50 = (($49) + 84768|0);
 $51 = (($50) + 328|0);
 $52 = HEAP32[$51>>2]|0;
 $53 = $52 & 1;
 $54 = ($53|0)!=(0);
 if ($54) {
  $55 = HEAP32[$mean_bits>>2]|0;
  $56 = (+($55|0));
  $57 = $56 * 1.09000000000000007994;
  $58 = (~~(($57)));
  HEAP32[$mean_bits>>2] = $58;
 }
 $59 = HEAP32[$cfg>>2]|0;
 $60 = (($59) + 48|0);
 $61 = HEAP32[$60>>2]|0;
 $62 = HEAP32[$mean_bits>>2]|0;
 $63 = (($62|0) / ($61|0))&-1;
 HEAP32[$mean_bits>>2] = $63;
 $64 = HEAP32[$cfg>>2]|0;
 $65 = (($64) + 8|0);
 $66 = HEAP32[$65>>2]|0;
 $67 = $66<<3;
 $68 = HEAP32[$mean_bits>>2]|0;
 $69 = (($68) - ($67))|0;
 HEAP32[$mean_bits>>2] = $69;
 $70 = HEAP32[$cfg>>2]|0;
 $71 = (($70) + 60|0);
 $72 = HEAP32[$71>>2]|0;
 $73 = HEAP32[$cfg>>2]|0;
 $74 = (($73) + 56|0);
 $75 = HEAP32[$74>>2]|0;
 $76 = Math_imul($72, $75)|0;
 $77 = HEAP32[$mean_bits>>2]|0;
 $78 = (($77|0) / ($76|0))&-1;
 HEAP32[$mean_bits>>2] = $78;
 $79 = HEAP32[$cfg>>2]|0;
 $80 = (($79) + 228|0);
 $81 = +HEAPF32[$80>>2];
 $82 = $81;
 $83 = 11.0 - $82;
 $84 = 0.0700000000000000066613 * $83;
 $85 = $84 / 5.5;
 $86 = 0.93000000000000004885 + $85;
 $87 = $86;
 HEAPF32[$res_factor>>2] = $87;
 $88 = +HEAPF32[$res_factor>>2];
 $89 = $88;
 $90 = $89 < 0.900000000000000022204;
 if ($90) {
  HEAPF32[$res_factor>>2] = 0.899999976158142089843;
 }
 $91 = +HEAPF32[$res_factor>>2];
 $92 = $91;
 $93 = $92 > 1.0;
 if ($93) {
  HEAPF32[$res_factor>>2] = 1.0;
 }
 HEAP32[$gr>>2] = 0;
 while(1) {
  $94 = HEAP32[$gr>>2]|0;
  $95 = HEAP32[$cfg>>2]|0;
  $96 = (($95) + 60|0);
  $97 = HEAP32[$96>>2]|0;
  $98 = ($94|0)<($97|0);
  if (!($98)) {
   break;
  }
  HEAP32[$sum>>2] = 0;
  HEAP32[$ch>>2] = 0;
  while(1) {
   $99 = HEAP32[$ch>>2]|0;
   $100 = HEAP32[$cfg>>2]|0;
   $101 = (($100) + 56|0);
   $102 = HEAP32[$101>>2]|0;
   $103 = ($99|0)<($102|0);
   if (!($103)) {
    break;
   }
   $104 = +HEAPF32[$res_factor>>2];
   $105 = HEAP32[$mean_bits>>2]|0;
   $106 = (+($105|0));
   $107 = $104 * $106;
   $108 = (~~(($107)));
   $109 = HEAP32[$ch>>2]|0;
   $110 = HEAP32[$gr>>2]|0;
   $111 = HEAP32[$3>>2]|0;
   $112 = (($111) + ($110<<3)|0);
   $113 = (($112) + ($109<<2)|0);
   HEAP32[$113>>2] = $108;
   $114 = HEAP32[$ch>>2]|0;
   $115 = HEAP32[$gr>>2]|0;
   $116 = HEAP32[$1>>2]|0;
   $117 = (($116) + ($115<<3)|0);
   $118 = (($117) + ($114<<2)|0);
   $119 = +HEAPF32[$118>>2];
   $120 = $119 > 700.0;
   if ($120) {
    $121 = HEAP32[$ch>>2]|0;
    $122 = HEAP32[$gr>>2]|0;
    $123 = HEAP32[$1>>2]|0;
    $124 = (($123) + ($122<<3)|0);
    $125 = (($124) + ($121<<2)|0);
    $126 = +HEAPF32[$125>>2];
    $127 = $126 - 700.0;
    $128 = $127;
    $129 = $128 / 1.39999999999999991118;
    $130 = (~~(($129)));
    HEAP32[$add_bits>>2] = $130;
    $131 = HEAP32[$ch>>2]|0;
    $132 = HEAP32[$gr>>2]|0;
    $133 = HEAP32[$l3_side>>2]|0;
    $134 = (($133) + (($132*10504)|0)|0);
    $135 = (($134) + (($131*5252)|0)|0);
    HEAP32[$cod_info>>2] = $135;
    $136 = +HEAPF32[$res_factor>>2];
    $137 = HEAP32[$mean_bits>>2]|0;
    $138 = (+($137|0));
    $139 = $136 * $138;
    $140 = (~~(($139)));
    $141 = HEAP32[$ch>>2]|0;
    $142 = HEAP32[$gr>>2]|0;
    $143 = HEAP32[$3>>2]|0;
    $144 = (($143) + ($142<<3)|0);
    $145 = (($144) + ($141<<2)|0);
    HEAP32[$145>>2] = $140;
    $146 = HEAP32[$cod_info>>2]|0;
    $147 = (($146) + 4788|0);
    $148 = HEAP32[$147>>2]|0;
    $149 = ($148|0)==(2);
    if ($149) {
     $150 = HEAP32[$add_bits>>2]|0;
     $151 = HEAP32[$mean_bits>>2]|0;
     $152 = (($151|0) / 2)&-1;
     $153 = ($150|0)<($152|0);
     if ($153) {
      $154 = HEAP32[$mean_bits>>2]|0;
      $155 = (($154|0) / 2)&-1;
      HEAP32[$add_bits>>2] = $155;
     }
    }
    $156 = HEAP32[$add_bits>>2]|0;
    $157 = HEAP32[$mean_bits>>2]|0;
    $158 = ($157*3)|0;
    $159 = (($158|0) / 2)&-1;
    $160 = ($156|0)>($159|0);
    if ($160) {
     $161 = HEAP32[$mean_bits>>2]|0;
     $162 = ($161*3)|0;
     $163 = (($162|0) / 2)&-1;
     HEAP32[$add_bits>>2] = $163;
    } else {
     $164 = HEAP32[$add_bits>>2]|0;
     $165 = ($164|0)<(0);
     if ($165) {
      HEAP32[$add_bits>>2] = 0;
     }
    }
    $166 = HEAP32[$add_bits>>2]|0;
    $167 = HEAP32[$ch>>2]|0;
    $168 = HEAP32[$gr>>2]|0;
    $169 = HEAP32[$3>>2]|0;
    $170 = (($169) + ($168<<3)|0);
    $171 = (($170) + ($167<<2)|0);
    $172 = HEAP32[$171>>2]|0;
    $173 = (($172) + ($166))|0;
    HEAP32[$171>>2] = $173;
   }
   $174 = HEAP32[$ch>>2]|0;
   $175 = HEAP32[$gr>>2]|0;
   $176 = HEAP32[$3>>2]|0;
   $177 = (($176) + ($175<<3)|0);
   $178 = (($177) + ($174<<2)|0);
   $179 = HEAP32[$178>>2]|0;
   $180 = ($179|0)>(4095);
   if ($180) {
    $181 = HEAP32[$ch>>2]|0;
    $182 = HEAP32[$gr>>2]|0;
    $183 = HEAP32[$3>>2]|0;
    $184 = (($183) + ($182<<3)|0);
    $185 = (($184) + ($181<<2)|0);
    HEAP32[$185>>2] = 4095;
   }
   $186 = HEAP32[$ch>>2]|0;
   $187 = HEAP32[$gr>>2]|0;
   $188 = HEAP32[$3>>2]|0;
   $189 = (($188) + ($187<<3)|0);
   $190 = (($189) + ($186<<2)|0);
   $191 = HEAP32[$190>>2]|0;
   $192 = HEAP32[$sum>>2]|0;
   $193 = (($192) + ($191))|0;
   HEAP32[$sum>>2] = $193;
   $194 = HEAP32[$ch>>2]|0;
   $195 = (($194) + 1)|0;
   HEAP32[$ch>>2] = $195;
  }
  $196 = HEAP32[$sum>>2]|0;
  $197 = ($196|0)>(7680);
  L32: do {
   if ($197) {
    HEAP32[$ch>>2] = 0;
    while(1) {
     $198 = HEAP32[$ch>>2]|0;
     $199 = HEAP32[$cfg>>2]|0;
     $200 = (($199) + 56|0);
     $201 = HEAP32[$200>>2]|0;
     $202 = ($198|0)<($201|0);
     if (!($202)) {
      break L32;
     }
     $203 = HEAP32[$ch>>2]|0;
     $204 = HEAP32[$gr>>2]|0;
     $205 = HEAP32[$3>>2]|0;
     $206 = (($205) + ($204<<3)|0);
     $207 = (($206) + ($203<<2)|0);
     $208 = HEAP32[$207>>2]|0;
     $209 = ($208*7680)|0;
     HEAP32[$207>>2] = $209;
     $210 = HEAP32[$sum>>2]|0;
     $211 = HEAP32[$ch>>2]|0;
     $212 = HEAP32[$gr>>2]|0;
     $213 = HEAP32[$3>>2]|0;
     $214 = (($213) + ($212<<3)|0);
     $215 = (($214) + ($211<<2)|0);
     $216 = HEAP32[$215>>2]|0;
     $217 = (($216|0) / ($210|0))&-1;
     HEAP32[$215>>2] = $217;
     $218 = HEAP32[$ch>>2]|0;
     $219 = (($218) + 1)|0;
     HEAP32[$ch>>2] = $219;
    }
   }
  } while(0);
  $220 = HEAP32[$gr>>2]|0;
  $221 = (($220) + 1)|0;
  HEAP32[$gr>>2] = $221;
 }
 $222 = HEAP32[$0>>2]|0;
 $223 = (($222) + 84040|0);
 $224 = (($223) + 716|0);
 $225 = HEAP32[$224>>2]|0;
 $226 = ($225|0)==(2);
 L39: do {
  if ($226) {
   HEAP32[$gr>>2] = 0;
   while(1) {
    $227 = HEAP32[$gr>>2]|0;
    $228 = HEAP32[$cfg>>2]|0;
    $229 = (($228) + 60|0);
    $230 = HEAP32[$229>>2]|0;
    $231 = ($227|0)<($230|0);
    if (!($231)) {
     break L39;
    }
    $232 = HEAP32[$gr>>2]|0;
    $233 = HEAP32[$3>>2]|0;
    $234 = (($233) + ($232<<3)|0);
    $235 = HEAP32[$gr>>2]|0;
    $236 = HEAP32[$2>>2]|0;
    $237 = (($236) + ($235<<2)|0);
    $238 = +HEAPF32[$237>>2];
    $239 = HEAP32[$mean_bits>>2]|0;
    $240 = HEAP32[$cfg>>2]|0;
    $241 = (($240) + 56|0);
    $242 = HEAP32[$241>>2]|0;
    $243 = Math_imul($239, $242)|0;
    _reduce_side($234,$238,$243,7680);
    $244 = HEAP32[$gr>>2]|0;
    $245 = (($244) + 1)|0;
    HEAP32[$gr>>2] = $245;
   }
  }
 } while(0);
 HEAP32[$totbits>>2] = 0;
 HEAP32[$gr>>2] = 0;
 while(1) {
  $246 = HEAP32[$gr>>2]|0;
  $247 = HEAP32[$cfg>>2]|0;
  $248 = (($247) + 60|0);
  $249 = HEAP32[$248>>2]|0;
  $250 = ($246|0)<($249|0);
  if (!($250)) {
   break;
  }
  HEAP32[$ch>>2] = 0;
  while(1) {
   $251 = HEAP32[$ch>>2]|0;
   $252 = HEAP32[$cfg>>2]|0;
   $253 = (($252) + 56|0);
   $254 = HEAP32[$253>>2]|0;
   $255 = ($251|0)<($254|0);
   if (!($255)) {
    break;
   }
   $256 = HEAP32[$ch>>2]|0;
   $257 = HEAP32[$gr>>2]|0;
   $258 = HEAP32[$3>>2]|0;
   $259 = (($258) + ($257<<3)|0);
   $260 = (($259) + ($256<<2)|0);
   $261 = HEAP32[$260>>2]|0;
   $262 = ($261|0)>(4095);
   if ($262) {
    $263 = HEAP32[$ch>>2]|0;
    $264 = HEAP32[$gr>>2]|0;
    $265 = HEAP32[$3>>2]|0;
    $266 = (($265) + ($264<<3)|0);
    $267 = (($266) + ($263<<2)|0);
    HEAP32[$267>>2] = 4095;
   }
   $268 = HEAP32[$ch>>2]|0;
   $269 = HEAP32[$gr>>2]|0;
   $270 = HEAP32[$3>>2]|0;
   $271 = (($270) + ($269<<3)|0);
   $272 = (($271) + ($268<<2)|0);
   $273 = HEAP32[$272>>2]|0;
   $274 = HEAP32[$totbits>>2]|0;
   $275 = (($274) + ($273))|0;
   HEAP32[$totbits>>2] = $275;
   $276 = HEAP32[$ch>>2]|0;
   $277 = (($276) + 1)|0;
   HEAP32[$ch>>2] = $277;
  }
  $278 = HEAP32[$gr>>2]|0;
  $279 = (($278) + 1)|0;
  HEAP32[$gr>>2] = $279;
 }
 $280 = HEAP32[$totbits>>2]|0;
 $281 = HEAP32[$5>>2]|0;
 $282 = HEAP32[$281>>2]|0;
 $283 = ($280|0)>($282|0);
 $284 = HEAP32[$totbits>>2]|0;
 $285 = ($284|0)>(0);
 $or$cond = $283 & $285;
 if (!($or$cond)) {
  STACKTOP = sp;return;
 }
 HEAP32[$gr>>2] = 0;
 while(1) {
  $286 = HEAP32[$gr>>2]|0;
  $287 = HEAP32[$cfg>>2]|0;
  $288 = (($287) + 60|0);
  $289 = HEAP32[$288>>2]|0;
  $290 = ($286|0)<($289|0);
  if (!($290)) {
   break;
  }
  HEAP32[$ch>>2] = 0;
  while(1) {
   $291 = HEAP32[$ch>>2]|0;
   $292 = HEAP32[$cfg>>2]|0;
   $293 = (($292) + 56|0);
   $294 = HEAP32[$293>>2]|0;
   $295 = ($291|0)<($294|0);
   if (!($295)) {
    break;
   }
   $296 = HEAP32[$5>>2]|0;
   $297 = HEAP32[$296>>2]|0;
   $298 = HEAP32[$ch>>2]|0;
   $299 = HEAP32[$gr>>2]|0;
   $300 = HEAP32[$3>>2]|0;
   $301 = (($300) + ($299<<3)|0);
   $302 = (($301) + ($298<<2)|0);
   $303 = HEAP32[$302>>2]|0;
   $304 = Math_imul($303, $297)|0;
   HEAP32[$302>>2] = $304;
   $305 = HEAP32[$totbits>>2]|0;
   $306 = HEAP32[$ch>>2]|0;
   $307 = HEAP32[$gr>>2]|0;
   $308 = HEAP32[$3>>2]|0;
   $309 = (($308) + ($307<<3)|0);
   $310 = (($309) + ($306<<2)|0);
   $311 = HEAP32[$310>>2]|0;
   $312 = (($311|0) / ($305|0))&-1;
   HEAP32[$310>>2] = $312;
   $313 = HEAP32[$ch>>2]|0;
   $314 = (($313) + 1)|0;
   HEAP32[$ch>>2] = $314;
  }
  $315 = HEAP32[$gr>>2]|0;
  $316 = (($315) + 1)|0;
  HEAP32[$gr>>2] = $316;
 }
 STACKTOP = sp;return;
}
function _ms_convert($l3_side,$gr) {
 $l3_side = $l3_side|0;
 $gr = $gr|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0.0;
 var $27 = 0.0, $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0.0, $i = 0, $l = 0;
 var $r = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = sp + 16|0;
 $1 = sp + 12|0;
 $i = sp + 8|0;
 $l = sp + 4|0;
 $r = sp;
 HEAP32[$0>>2] = $l3_side;
 HEAP32[$1>>2] = $gr;
 HEAP32[$i>>2] = 0;
 while(1) {
  $2 = HEAP32[$i>>2]|0;
  $3 = ($2|0)<(576);
  if (!($3)) {
   break;
  }
  $4 = HEAP32[$i>>2]|0;
  $5 = HEAP32[$1>>2]|0;
  $6 = HEAP32[$0>>2]|0;
  $7 = (($6) + (($5*10504)|0)|0);
  $8 = (($7) + ($4<<2)|0);
  $9 = +HEAPF32[$8>>2];
  HEAPF32[$l>>2] = $9;
  $10 = HEAP32[$i>>2]|0;
  $11 = HEAP32[$1>>2]|0;
  $12 = HEAP32[$0>>2]|0;
  $13 = (($12) + (($11*10504)|0)|0);
  $14 = (($13) + 5252|0);
  $15 = (($14) + ($10<<2)|0);
  $16 = +HEAPF32[$15>>2];
  HEAPF32[$r>>2] = $16;
  $17 = +HEAPF32[$l>>2];
  $18 = +HEAPF32[$r>>2];
  $19 = $17 + $18;
  $20 = $19 * 0.707106769084930419921;
  $21 = HEAP32[$i>>2]|0;
  $22 = HEAP32[$1>>2]|0;
  $23 = HEAP32[$0>>2]|0;
  $24 = (($23) + (($22*10504)|0)|0);
  $25 = (($24) + ($21<<2)|0);
  HEAPF32[$25>>2] = $20;
  $26 = +HEAPF32[$l>>2];
  $27 = +HEAPF32[$r>>2];
  $28 = $26 - $27;
  $29 = $28 * 0.707106769084930419921;
  $30 = HEAP32[$i>>2]|0;
  $31 = HEAP32[$1>>2]|0;
  $32 = HEAP32[$0>>2]|0;
  $33 = (($32) + (($31*10504)|0)|0);
  $34 = (($33) + 5252|0);
  $35 = (($34) + ($30<<2)|0);
  HEAPF32[$35>>2] = $29;
  $36 = HEAP32[$i>>2]|0;
  $37 = (($36) + 1)|0;
  HEAP32[$i>>2] = $37;
 }
 STACKTOP = sp;return;
}
function _init_outer_loop($gfc,$cod_info) {
 $gfc = $gfc|0;
 $cod_info = $cod_info|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0.0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $cfg = 0, $end = 0, $ix = 0, $ixwork = 0, $j = 0, $l = 0, $sfb = 0, $start = 0, $window = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 2352|0;
 $0 = sp + 2344|0;
 $1 = sp + 2340|0;
 $cfg = sp + 2336|0;
 $sfb = sp + 2332|0;
 $j = sp + 2328|0;
 $ixwork = sp + 24|0;
 $ix = sp + 16|0;
 $start = sp + 12|0;
 $end = sp + 8|0;
 $window = sp + 4|0;
 $l = sp;
 HEAP32[$0>>2] = $gfc;
 HEAP32[$1>>2] = $cod_info;
 $2 = HEAP32[$0>>2]|0;
 $3 = (($2) + 16|0);
 HEAP32[$cfg>>2] = $3;
 $4 = HEAP32[$1>>2]|0;
 $5 = (($4) + 4768|0);
 HEAP32[$5>>2] = 0;
 $6 = HEAP32[$1>>2]|0;
 $7 = (($6) + 4772|0);
 HEAP32[$7>>2] = 0;
 $8 = HEAP32[$1>>2]|0;
 $9 = (($8) + 4776|0);
 HEAP32[$9>>2] = 0;
 $10 = HEAP32[$1>>2]|0;
 $11 = (($10) + 4780|0);
 HEAP32[$11>>2] = 210;
 $12 = HEAP32[$1>>2]|0;
 $13 = (($12) + 4784|0);
 HEAP32[$13>>2] = 0;
 $14 = HEAP32[$1>>2]|0;
 $15 = (($14) + 4796|0);
 HEAP32[$15>>2] = 0;
 $16 = HEAP32[$1>>2]|0;
 $17 = (($16) + 4796|0);
 $18 = (($17) + 4|0);
 HEAP32[$18>>2] = 0;
 $19 = HEAP32[$1>>2]|0;
 $20 = (($19) + 4796|0);
 $21 = (($20) + 8|0);
 HEAP32[$21>>2] = 0;
 $22 = HEAP32[$1>>2]|0;
 $23 = (($22) + 4808|0);
 HEAP32[$23>>2] = 0;
 $24 = HEAP32[$1>>2]|0;
 $25 = (($24) + 4808|0);
 $26 = (($25) + 4|0);
 HEAP32[$26>>2] = 0;
 $27 = HEAP32[$1>>2]|0;
 $28 = (($27) + 4808|0);
 $29 = (($28) + 8|0);
 HEAP32[$29>>2] = 0;
 $30 = HEAP32[$1>>2]|0;
 $31 = (($30) + 4808|0);
 $32 = (($31) + 12|0);
 HEAP32[$32>>2] = 0;
 $33 = HEAP32[$1>>2]|0;
 $34 = (($33) + 4824|0);
 HEAP32[$34>>2] = 0;
 $35 = HEAP32[$1>>2]|0;
 $36 = (($35) + 4828|0);
 HEAP32[$36>>2] = 0;
 $37 = HEAP32[$1>>2]|0;
 $38 = (($37) + 4832|0);
 HEAP32[$38>>2] = 0;
 $39 = HEAP32[$1>>2]|0;
 $40 = (($39) + 4836|0);
 HEAP32[$40>>2] = 0;
 $41 = HEAP32[$1>>2]|0;
 $42 = (($41) + 4840|0);
 HEAP32[$42>>2] = 0;
 $43 = HEAP32[$1>>2]|0;
 $44 = (($43) + 4844|0);
 HEAP32[$44>>2] = 0;
 $45 = HEAP32[$cfg>>2]|0;
 $46 = (($45) + 48|0);
 $47 = HEAP32[$46>>2]|0;
 $48 = ($47|0)<=(8000);
 $49 = HEAP32[$1>>2]|0;
 $50 = (($49) + 4848|0);
 if ($48) {
  HEAP32[$50>>2] = 17;
  $51 = HEAP32[$1>>2]|0;
  $52 = (($51) + 4852|0);
  HEAP32[$52>>2] = 9;
  $53 = HEAP32[$1>>2]|0;
  $54 = (($53) + 4856|0);
  HEAP32[$54>>2] = 17;
 } else {
  HEAP32[$50>>2] = 21;
  $55 = HEAP32[$1>>2]|0;
  $56 = (($55) + 4852|0);
  HEAP32[$56>>2] = 12;
  $57 = HEAP32[$0>>2]|0;
  $58 = (($57) + 84768|0);
  $59 = (($58) + 324|0);
  $60 = HEAP32[$59>>2]|0;
  $61 = ($60|0)!=(0);
  $62 = $61 ? 22 : 21;
  $63 = HEAP32[$1>>2]|0;
  $64 = (($63) + 4856|0);
  HEAP32[$64>>2] = $62;
 }
 $65 = HEAP32[$1>>2]|0;
 $66 = (($65) + 4856|0);
 $67 = HEAP32[$66>>2]|0;
 $68 = HEAP32[$1>>2]|0;
 $69 = (($68) + 4864|0);
 HEAP32[$69>>2] = $67;
 $70 = HEAP32[$1>>2]|0;
 $71 = (($70) + 4848|0);
 $72 = HEAP32[$71>>2]|0;
 $73 = HEAP32[$1>>2]|0;
 $74 = (($73) + 4860|0);
 HEAP32[$74>>2] = $72;
 $75 = HEAP32[$1>>2]|0;
 $76 = (($75) + 4868|0);
 HEAP32[$76>>2] = 11;
 HEAP32[$sfb>>2] = 0;
 while(1) {
  $77 = HEAP32[$sfb>>2]|0;
  $78 = ($77|0)<(22);
  if (!($78)) {
   break;
  }
  $79 = HEAP32[$sfb>>2]|0;
  $80 = (($79) + 1)|0;
  $81 = HEAP32[$0>>2]|0;
  $82 = (($81) + 21360|0);
  $83 = (($82) + ($80<<2)|0);
  $84 = HEAP32[$83>>2]|0;
  $85 = HEAP32[$sfb>>2]|0;
  $86 = HEAP32[$0>>2]|0;
  $87 = (($86) + 21360|0);
  $88 = (($87) + ($85<<2)|0);
  $89 = HEAP32[$88>>2]|0;
  $90 = (($84) - ($89))|0;
  $91 = HEAP32[$sfb>>2]|0;
  $92 = HEAP32[$1>>2]|0;
  $93 = (($92) + 4872|0);
  $94 = (($93) + ($91<<2)|0);
  HEAP32[$94>>2] = $90;
  $95 = HEAP32[$sfb>>2]|0;
  $96 = HEAP32[$1>>2]|0;
  $97 = (($96) + 5028|0);
  $98 = (($97) + ($95<<2)|0);
  HEAP32[$98>>2] = 3;
  $99 = HEAP32[$sfb>>2]|0;
  $100 = (($99) + 1)|0;
  HEAP32[$sfb>>2] = $100;
 }
 $101 = HEAP32[$1>>2]|0;
 $102 = (($101) + 4788|0);
 $103 = HEAP32[$102>>2]|0;
 $104 = ($103|0)==(2);
 L9: do {
  if ($104) {
   $105 = HEAP32[$1>>2]|0;
   $106 = (($105) + 4852|0);
   HEAP32[$106>>2] = 0;
   $107 = HEAP32[$1>>2]|0;
   $108 = (($107) + 4848|0);
   HEAP32[$108>>2] = 0;
   $109 = HEAP32[$1>>2]|0;
   $110 = (($109) + 4792|0);
   $111 = HEAP32[$110>>2]|0;
   $112 = ($111|0)!=(0);
   if ($112) {
    $113 = HEAP32[$1>>2]|0;
    $114 = (($113) + 4852|0);
    HEAP32[$114>>2] = 3;
    $115 = HEAP32[$cfg>>2]|0;
    $116 = (($115) + 60|0);
    $117 = HEAP32[$116>>2]|0;
    $118 = $117<<1;
    $119 = (($118) + 4)|0;
    $120 = HEAP32[$1>>2]|0;
    $121 = (($120) + 4848|0);
    HEAP32[$121>>2] = $119;
   }
   $122 = HEAP32[$cfg>>2]|0;
   $123 = (($122) + 48|0);
   $124 = HEAP32[$123>>2]|0;
   $125 = ($124|0)<=(8000);
   $126 = HEAP32[$1>>2]|0;
   $127 = (($126) + 4848|0);
   $128 = HEAP32[$127>>2]|0;
   if ($125) {
    $129 = HEAP32[$1>>2]|0;
    $130 = (($129) + 4852|0);
    $131 = HEAP32[$130>>2]|0;
    $132 = (9 - ($131))|0;
    $133 = ($132*3)|0;
    $134 = (($128) + ($133))|0;
    $135 = HEAP32[$1>>2]|0;
    $136 = (($135) + 4864|0);
    HEAP32[$136>>2] = $134;
    $137 = HEAP32[$1>>2]|0;
    $138 = (($137) + 4848|0);
    $139 = HEAP32[$138>>2]|0;
    $140 = HEAP32[$1>>2]|0;
    $141 = (($140) + 4852|0);
    $142 = HEAP32[$141>>2]|0;
    $143 = (9 - ($142))|0;
    $144 = ($143*3)|0;
    $145 = (($139) + ($144))|0;
    $146 = HEAP32[$1>>2]|0;
    $147 = (($146) + 4860|0);
    HEAP32[$147>>2] = $145;
   } else {
    $148 = HEAP32[$0>>2]|0;
    $149 = (($148) + 84768|0);
    $150 = (($149) + 324|0);
    $151 = HEAP32[$150>>2]|0;
    $152 = ($151|0)!=(0);
    $153 = $152 ? 13 : 12;
    $154 = HEAP32[$1>>2]|0;
    $155 = (($154) + 4852|0);
    $156 = HEAP32[$155>>2]|0;
    $157 = (($153) - ($156))|0;
    $158 = ($157*3)|0;
    $159 = (($128) + ($158))|0;
    $160 = HEAP32[$1>>2]|0;
    $161 = (($160) + 4864|0);
    HEAP32[$161>>2] = $159;
    $162 = HEAP32[$1>>2]|0;
    $163 = (($162) + 4848|0);
    $164 = HEAP32[$163>>2]|0;
    $165 = HEAP32[$1>>2]|0;
    $166 = (($165) + 4852|0);
    $167 = HEAP32[$166>>2]|0;
    $168 = (12 - ($167))|0;
    $169 = ($168*3)|0;
    $170 = (($164) + ($169))|0;
    $171 = HEAP32[$1>>2]|0;
    $172 = (($171) + 4860|0);
    HEAP32[$172>>2] = $170;
   }
   $173 = HEAP32[$1>>2]|0;
   $174 = (($173) + 4860|0);
   $175 = HEAP32[$174>>2]|0;
   $176 = (($175) - 18)|0;
   $177 = HEAP32[$1>>2]|0;
   $178 = (($177) + 4868|0);
   HEAP32[$178>>2] = $176;
   $179 = HEAP32[$1>>2]|0;
   $180 = (($179) + 4848|0);
   $181 = HEAP32[$180>>2]|0;
   $182 = HEAP32[$1>>2]|0;
   $183 = (($182) + 4856|0);
   HEAP32[$183>>2] = $181;
   $184 = HEAP32[$1>>2]|0;
   $185 = (($184) + 4848|0);
   $186 = HEAP32[$185>>2]|0;
   $187 = HEAP32[$0>>2]|0;
   $188 = (($187) + 21360|0);
   $189 = (($188) + ($186<<2)|0);
   $190 = HEAP32[$189>>2]|0;
   $191 = HEAP32[$1>>2]|0;
   $192 = (($191) + ($190<<2)|0);
   HEAP32[$ix>>2] = $192;
   $193 = HEAP32[$1>>2]|0;
   _memcpy(($ixwork|0),($193|0),2304)|0;
   $194 = HEAP32[$1>>2]|0;
   $195 = (($194) + 4852|0);
   $196 = HEAP32[$195>>2]|0;
   HEAP32[$sfb>>2] = $196;
   while(1) {
    $197 = HEAP32[$sfb>>2]|0;
    $198 = ($197|0)<(13);
    if (!($198)) {
     break;
    }
    $199 = HEAP32[$sfb>>2]|0;
    $200 = HEAP32[$0>>2]|0;
    $201 = (($200) + 21360|0);
    $202 = (($201) + 92|0);
    $203 = (($202) + ($199<<2)|0);
    $204 = HEAP32[$203>>2]|0;
    HEAP32[$start>>2] = $204;
    $205 = HEAP32[$sfb>>2]|0;
    $206 = (($205) + 1)|0;
    $207 = HEAP32[$0>>2]|0;
    $208 = (($207) + 21360|0);
    $209 = (($208) + 92|0);
    $210 = (($209) + ($206<<2)|0);
    $211 = HEAP32[$210>>2]|0;
    HEAP32[$end>>2] = $211;
    HEAP32[$window>>2] = 0;
    while(1) {
     $212 = HEAP32[$window>>2]|0;
     $213 = ($212|0)<(3);
     if (!($213)) {
      break;
     }
     $214 = HEAP32[$start>>2]|0;
     HEAP32[$l>>2] = $214;
     while(1) {
      $215 = HEAP32[$l>>2]|0;
      $216 = HEAP32[$end>>2]|0;
      $217 = ($215|0)<($216|0);
      if (!($217)) {
       break;
      }
      $218 = HEAP32[$l>>2]|0;
      $219 = ($218*3)|0;
      $220 = HEAP32[$window>>2]|0;
      $221 = (($219) + ($220))|0;
      $222 = (($ixwork) + ($221<<2)|0);
      $223 = +HEAPF32[$222>>2];
      $224 = HEAP32[$ix>>2]|0;
      $225 = (($224) + 4|0);
      HEAP32[$ix>>2] = $225;
      HEAPF32[$224>>2] = $223;
      $226 = HEAP32[$l>>2]|0;
      $227 = (($226) + 1)|0;
      HEAP32[$l>>2] = $227;
     }
     $228 = HEAP32[$window>>2]|0;
     $229 = (($228) + 1)|0;
     HEAP32[$window>>2] = $229;
    }
    $230 = HEAP32[$sfb>>2]|0;
    $231 = (($230) + 1)|0;
    HEAP32[$sfb>>2] = $231;
   }
   $232 = HEAP32[$1>>2]|0;
   $233 = (($232) + 4848|0);
   $234 = HEAP32[$233>>2]|0;
   HEAP32[$j>>2] = $234;
   $235 = HEAP32[$1>>2]|0;
   $236 = (($235) + 4852|0);
   $237 = HEAP32[$236>>2]|0;
   HEAP32[$sfb>>2] = $237;
   while(1) {
    $238 = HEAP32[$sfb>>2]|0;
    $239 = ($238|0)<(13);
    if (!($239)) {
     break L9;
    }
    $240 = HEAP32[$sfb>>2]|0;
    $241 = (($240) + 1)|0;
    $242 = HEAP32[$0>>2]|0;
    $243 = (($242) + 21360|0);
    $244 = (($243) + 92|0);
    $245 = (($244) + ($241<<2)|0);
    $246 = HEAP32[$245>>2]|0;
    $247 = HEAP32[$sfb>>2]|0;
    $248 = HEAP32[$0>>2]|0;
    $249 = (($248) + 21360|0);
    $250 = (($249) + 92|0);
    $251 = (($250) + ($247<<2)|0);
    $252 = HEAP32[$251>>2]|0;
    $253 = (($246) - ($252))|0;
    $254 = HEAP32[$j>>2]|0;
    $255 = (($254) + 2)|0;
    $256 = HEAP32[$1>>2]|0;
    $257 = (($256) + 4872|0);
    $258 = (($257) + ($255<<2)|0);
    HEAP32[$258>>2] = $253;
    $259 = HEAP32[$j>>2]|0;
    $260 = (($259) + 1)|0;
    $261 = HEAP32[$1>>2]|0;
    $262 = (($261) + 4872|0);
    $263 = (($262) + ($260<<2)|0);
    HEAP32[$263>>2] = $253;
    $264 = HEAP32[$j>>2]|0;
    $265 = HEAP32[$1>>2]|0;
    $266 = (($265) + 4872|0);
    $267 = (($266) + ($264<<2)|0);
    HEAP32[$267>>2] = $253;
    $268 = HEAP32[$j>>2]|0;
    $269 = HEAP32[$1>>2]|0;
    $270 = (($269) + 5028|0);
    $271 = (($270) + ($268<<2)|0);
    HEAP32[$271>>2] = 0;
    $272 = HEAP32[$j>>2]|0;
    $273 = (($272) + 1)|0;
    $274 = HEAP32[$1>>2]|0;
    $275 = (($274) + 5028|0);
    $276 = (($275) + ($273<<2)|0);
    HEAP32[$276>>2] = 1;
    $277 = HEAP32[$j>>2]|0;
    $278 = (($277) + 2)|0;
    $279 = HEAP32[$1>>2]|0;
    $280 = (($279) + 5028|0);
    $281 = (($280) + ($278<<2)|0);
    HEAP32[$281>>2] = 2;
    $282 = HEAP32[$j>>2]|0;
    $283 = (($282) + 3)|0;
    HEAP32[$j>>2] = $283;
    $284 = HEAP32[$sfb>>2]|0;
    $285 = (($284) + 1)|0;
    HEAP32[$sfb>>2] = $285;
   }
  }
 } while(0);
 $286 = HEAP32[$1>>2]|0;
 $287 = (($286) + 5184|0);
 HEAP32[$287>>2] = 0;
 $288 = HEAP32[$1>>2]|0;
 $289 = (($288) + 5188|0);
 HEAP32[$289>>2] = 21088;
 $290 = HEAP32[$1>>2]|0;
 $291 = (($290) + 5192|0);
 HEAP32[$291>>2] = 0;
 $292 = HEAP32[$1>>2]|0;
 $293 = (($292) + 5192|0);
 $294 = (($293) + 4|0);
 HEAP32[$294>>2] = 0;
 $295 = HEAP32[$1>>2]|0;
 $296 = (($295) + 5192|0);
 $297 = (($296) + 8|0);
 HEAP32[$297>>2] = 0;
 $298 = HEAP32[$1>>2]|0;
 $299 = (($298) + 5192|0);
 $300 = (($299) + 12|0);
 HEAP32[$300>>2] = 0;
 $301 = HEAP32[$1>>2]|0;
 $302 = (($301) + 5208|0);
 HEAP32[$302>>2] = 575;
 $303 = HEAP32[$1>>2]|0;
 $304 = (($303) + 4608|0);
 _memset(($304|0),0,156)|0;
 $305 = HEAP32[$cfg>>2]|0;
 $306 = (($305) + 88|0);
 $307 = HEAP32[$306>>2]|0;
 $308 = ($307|0)!=(1);
 if (!($308)) {
  STACKTOP = sp;return;
 }
 $309 = HEAP32[$cfg>>2]|0;
 $310 = (($309) + 88|0);
 $311 = HEAP32[$310>>2]|0;
 $312 = ($311|0)!=(4);
 if (!($312)) {
  STACKTOP = sp;return;
 }
 $313 = HEAP32[$cfg>>2]|0;
 $314 = (($313) + 88|0);
 $315 = HEAP32[$314>>2]|0;
 $316 = ($315|0)!=(3);
 if (!($316)) {
  STACKTOP = sp;return;
 }
 $317 = HEAP32[$cfg>>2]|0;
 $318 = (($317) + 88|0);
 $319 = HEAP32[$318>>2]|0;
 $320 = ($319|0)!=(0);
 if (!($320)) {
  STACKTOP = sp;return;
 }
 $321 = HEAP32[$0>>2]|0;
 $322 = HEAP32[$1>>2]|0;
 _psfb21_analogsilence($321,$322);
 STACKTOP = sp;return;
}
function _outer_loop($gfc,$cod_info,$l3_xmin,$xrpow,$ch,$targ_bits) {
 $gfc = $gfc|0;
 $cod_info = $cod_info|0;
 $l3_xmin = $l3_xmin|0;
 $xrpow = $xrpow|0;
 $ch = $ch|0;
 $targ_bits = $targ_bits|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0.0, $44 = 0.0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0.0, $54 = 0.0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0.0, $61 = 0.0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $age = 0, $bEndOfSearch = 0, $bRefine = 0, $best_ggain_pass1 = 0, $best_noise_info = 0, $best_part2_3_length = 0, $better = 0, $cfg = 0, $cod_info_w = 0, $distort = 0, $huff_bits = 0, $maxggain = 0, $noise_info = 0, $prev_noise = 0;
 var $save_xrpow = 0, $search_limit = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8320|0;
 $0 = sp + 8304|0;
 $1 = sp + 8300|0;
 $2 = sp + 8296|0;
 $3 = sp + 8292|0;
 $4 = sp + 8288|0;
 $5 = sp + 8284|0;
 $6 = sp + 8280|0;
 $cfg = sp + 8276|0;
 $cod_info_w = sp + 3024|0;
 $save_xrpow = sp + 720|0;
 $distort = sp + 560|0;
 $best_noise_info = sp + 536|0;
 $huff_bits = sp + 532|0;
 $better = sp + 528|0;
 $age = sp + 524|0;
 $prev_noise = sp + 48|0;
 $best_part2_3_length = sp + 44|0;
 $bEndOfSearch = sp + 40|0;
 $bRefine = sp + 36|0;
 $best_ggain_pass1 = sp + 32|0;
 $noise_info = sp + 8|0;
 $search_limit = sp + 4|0;
 $maxggain = sp;
 HEAP32[$1>>2] = $gfc;
 HEAP32[$2>>2] = $cod_info;
 HEAP32[$3>>2] = $l3_xmin;
 HEAP32[$4>>2] = $xrpow;
 HEAP32[$5>>2] = $ch;
 HEAP32[$6>>2] = $targ_bits;
 $7 = HEAP32[$1>>2]|0;
 $8 = (($7) + 16|0);
 HEAP32[$cfg>>2] = $8;
 HEAP32[$best_part2_3_length>>2] = 9999999;
 HEAP32[$bEndOfSearch>>2] = 0;
 HEAP32[$bRefine>>2] = 0;
 HEAP32[$best_ggain_pass1>>2] = 0;
 $9 = HEAP32[$1>>2]|0;
 $10 = HEAP32[$2>>2]|0;
 $11 = HEAP32[$6>>2]|0;
 $12 = HEAP32[$5>>2]|0;
 $13 = HEAP32[$4>>2]|0;
 (_bin_search_StepSize($9,$10,$11,$12,$13)|0);
 $14 = HEAP32[$cfg>>2]|0;
 $15 = (($14) + 12|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = ($16|0)!=(0);
 if (!($17)) {
  HEAP32[$0>>2] = 100;
  $203 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($203|0);
 }
 _memset(($prev_noise|0),0,476)|0;
 $18 = HEAP32[$2>>2]|0;
 $19 = HEAP32[$3>>2]|0;
 (_calc_noise($18,$19,$distort,$best_noise_info,$prev_noise)|0);
 $20 = HEAP32[$2>>2]|0;
 $21 = (($20) + 4768|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = (($best_noise_info) + 20|0);
 HEAP32[$23>>2] = $22;
 $24 = HEAP32[$2>>2]|0;
 _memcpy(($cod_info_w|0),($24|0),5252)|0;
 HEAP32[$age>>2] = 0;
 $25 = HEAP32[$4>>2]|0;
 _memcpy(($save_xrpow|0),($25|0),2304)|0;
 while(1) {
  $26 = HEAP32[$bEndOfSearch>>2]|0;
  $27 = ($26|0)!=(0);
  $28 = $27 ^ 1;
  if (!($28)) {
   break;
  }
  while(1) {
   HEAP32[$maxggain>>2] = 255;
   $29 = HEAP32[$1>>2]|0;
   $30 = (($29) + 84768|0);
   $31 = (($30) + 328|0);
   $32 = HEAP32[$31>>2]|0;
   $33 = $32 & 2;
   $34 = ($33|0)!=(0);
   if ($34) {
    HEAP32[$search_limit>>2] = 20;
   } else {
    HEAP32[$search_limit>>2] = 3;
   }
   $35 = HEAP32[$1>>2]|0;
   $36 = (($35) + 84768|0);
   $37 = (($36) + 324|0);
   $38 = HEAP32[$37>>2]|0;
   $39 = ($38|0)!=(0);
   if ($39) {
    $40 = (($cod_info_w) + 4860|0);
    $41 = HEAP32[$40>>2]|0;
    $42 = (($distort) + ($41<<2)|0);
    $43 = +HEAPF32[$42>>2];
    $44 = $43;
    $45 = $44 > 1.0;
    if ($45) {
     break;
    }
    $46 = (($cod_info_w) + 4788|0);
    $47 = HEAP32[$46>>2]|0;
    $48 = ($47|0)==(2);
    if ($48) {
     $49 = (($cod_info_w) + 4860|0);
     $50 = HEAP32[$49>>2]|0;
     $51 = (($50) + 1)|0;
     $52 = (($distort) + ($51<<2)|0);
     $53 = +HEAPF32[$52>>2];
     $54 = $53;
     $55 = $54 > 1.0;
     if ($55) {
      break;
     }
     $56 = (($cod_info_w) + 4860|0);
     $57 = HEAP32[$56>>2]|0;
     $58 = (($57) + 2)|0;
     $59 = (($distort) + ($58<<2)|0);
     $60 = +HEAPF32[$59>>2];
     $61 = $60;
     $62 = $61 > 1.0;
     if ($62) {
      break;
     }
    }
   }
   $63 = HEAP32[$1>>2]|0;
   $64 = HEAP32[$4>>2]|0;
   $65 = HEAP32[$bRefine>>2]|0;
   $66 = (_balance_noise($63,$cod_info_w,$distort,$64,$65)|0);
   $67 = ($66|0)==(0);
   if ($67) {
    break;
   }
   $68 = (($cod_info_w) + 4836|0);
   $69 = HEAP32[$68>>2]|0;
   $70 = ($69|0)!=(0);
   if ($70) {
    HEAP32[$maxggain>>2] = 254;
   }
   $71 = HEAP32[$6>>2]|0;
   $72 = (($cod_info_w) + 4844|0);
   $73 = HEAP32[$72>>2]|0;
   $74 = (($71) - ($73))|0;
   HEAP32[$huff_bits>>2] = $74;
   $75 = HEAP32[$huff_bits>>2]|0;
   $76 = ($75|0)<=(0);
   if ($76) {
    break;
   }
   while(1) {
    $77 = HEAP32[$1>>2]|0;
    $78 = HEAP32[$4>>2]|0;
    $79 = (_count_bits($77,$78,$cod_info_w,$prev_noise)|0);
    $80 = (($cod_info_w) + 4768|0);
    HEAP32[$80>>2] = $79;
    $81 = HEAP32[$huff_bits>>2]|0;
    $82 = ($79|0)>($81|0);
    if ($82) {
     $83 = (($cod_info_w) + 4780|0);
     $84 = HEAP32[$83>>2]|0;
     $85 = HEAP32[$maxggain>>2]|0;
     $86 = ($84|0)<=($85|0);
     $204 = $86;
    } else {
     $204 = 0;
    }
    $87 = (($cod_info_w) + 4780|0);
    $88 = HEAP32[$87>>2]|0;
    if (!($204)) {
     break;
    }
    $89 = (($88) + 1)|0;
    HEAP32[$87>>2] = $89;
   }
   $90 = HEAP32[$maxggain>>2]|0;
   $91 = ($88|0)>($90|0);
   if ($91) {
    break;
   }
   $92 = (($best_noise_info) + 12|0);
   $93 = HEAP32[$92>>2]|0;
   $94 = ($93|0)==(0);
   if ($94) {
    while(1) {
     $95 = HEAP32[$1>>2]|0;
     $96 = HEAP32[$4>>2]|0;
     $97 = (_count_bits($95,$96,$cod_info_w,$prev_noise)|0);
     $98 = (($cod_info_w) + 4768|0);
     HEAP32[$98>>2] = $97;
     $99 = HEAP32[$best_part2_3_length>>2]|0;
     $100 = ($97|0)>($99|0);
     if ($100) {
      $101 = (($cod_info_w) + 4780|0);
      $102 = HEAP32[$101>>2]|0;
      $103 = HEAP32[$maxggain>>2]|0;
      $104 = ($102|0)<=($103|0);
      $205 = $104;
     } else {
      $205 = 0;
     }
     $105 = (($cod_info_w) + 4780|0);
     $106 = HEAP32[$105>>2]|0;
     if (!($205)) {
      break;
     }
     $107 = (($106) + 1)|0;
     HEAP32[$105>>2] = $107;
    }
    $108 = HEAP32[$maxggain>>2]|0;
    $109 = ($106|0)>($108|0);
    if ($109) {
     break;
    }
   }
   $110 = HEAP32[$3>>2]|0;
   (_calc_noise($cod_info_w,$110,$distort,$noise_info,$prev_noise)|0);
   $111 = (($cod_info_w) + 4768|0);
   $112 = HEAP32[$111>>2]|0;
   $113 = (($noise_info) + 20|0);
   HEAP32[$113>>2] = $112;
   $114 = HEAP32[$2>>2]|0;
   $115 = (($114) + 4788|0);
   $116 = HEAP32[$115>>2]|0;
   $117 = ($116|0)!=(2);
   $118 = HEAP32[$cfg>>2]|0;
   if ($117) {
    $119 = (($118) + 68|0);
    $120 = HEAP32[$119>>2]|0;
    HEAP32[$better>>2] = $120;
   } else {
    $121 = (($118) + 72|0);
    $122 = HEAP32[$121>>2]|0;
    HEAP32[$better>>2] = $122;
   }
   $123 = HEAP32[$better>>2]|0;
   $124 = (_quant_compare($123,$best_noise_info,$noise_info,$cod_info_w,$distort)|0);
   HEAP32[$better>>2] = $124;
   $125 = HEAP32[$better>>2]|0;
   $126 = ($125|0)!=(0);
   if ($126) {
    $127 = HEAP32[$2>>2]|0;
    $128 = (($127) + 4768|0);
    $129 = HEAP32[$128>>2]|0;
    HEAP32[$best_part2_3_length>>2] = $129;
    ;HEAP32[$best_noise_info+0>>2]=HEAP32[$noise_info+0>>2]|0;HEAP32[$best_noise_info+4>>2]=HEAP32[$noise_info+4>>2]|0;HEAP32[$best_noise_info+8>>2]=HEAP32[$noise_info+8>>2]|0;HEAP32[$best_noise_info+12>>2]=HEAP32[$noise_info+12>>2]|0;HEAP32[$best_noise_info+16>>2]=HEAP32[$noise_info+16>>2]|0;HEAP32[$best_noise_info+20>>2]=HEAP32[$noise_info+20>>2]|0;
    $130 = HEAP32[$2>>2]|0;
    _memcpy(($130|0),($cod_info_w|0),5252)|0;
    HEAP32[$age>>2] = 0;
    $131 = HEAP32[$4>>2]|0;
    _memcpy(($save_xrpow|0),($131|0),2304)|0;
   } else {
    $132 = HEAP32[$cfg>>2]|0;
    $133 = (($132) + 32|0);
    $134 = HEAP32[$133>>2]|0;
    $135 = ($134|0)==(0);
    if ($135) {
     $136 = HEAP32[$age>>2]|0;
     $137 = (($136) + 1)|0;
     HEAP32[$age>>2] = $137;
     $138 = HEAP32[$search_limit>>2]|0;
     $139 = ($137|0)>($138|0);
     if ($139) {
      $140 = (($best_noise_info) + 12|0);
      $141 = HEAP32[$140>>2]|0;
      $142 = ($141|0)==(0);
      if ($142) {
       break;
      }
     }
     $143 = HEAP32[$cfg>>2]|0;
     $144 = (($143) + 24|0);
     $145 = HEAP32[$144>>2]|0;
     $146 = ($145|0)==(3);
     if ($146) {
      $147 = HEAP32[$bRefine>>2]|0;
      $148 = ($147|0)!=(0);
      if ($148) {
       $149 = HEAP32[$age>>2]|0;
       $150 = ($149|0)>(30);
       if ($150) {
        break;
       }
      }
     }
     $151 = HEAP32[$cfg>>2]|0;
     $152 = (($151) + 24|0);
     $153 = HEAP32[$152>>2]|0;
     $154 = ($153|0)==(3);
     if ($154) {
      $155 = HEAP32[$bRefine>>2]|0;
      $156 = ($155|0)!=(0);
      if ($156) {
       $157 = (($cod_info_w) + 4780|0);
       $158 = HEAP32[$157>>2]|0;
       $159 = HEAP32[$best_ggain_pass1>>2]|0;
       $160 = (($158) - ($159))|0;
       $161 = ($160|0)>(15);
       if ($161) {
        break;
       }
      }
     }
    }
   }
   $162 = (($cod_info_w) + 4780|0);
   $163 = HEAP32[$162>>2]|0;
   $164 = (($cod_info_w) + 4836|0);
   $165 = HEAP32[$164>>2]|0;
   $166 = (($163) + ($165))|0;
   $167 = ($166|0)<(255);
   if (!($167)) {
    break;
   }
  }
  $168 = HEAP32[$cfg>>2]|0;
  $169 = (($168) + 24|0);
  $170 = HEAP32[$169>>2]|0;
  $171 = ($170|0)==(3);
  if (!($171)) {
   HEAP32[$bEndOfSearch>>2] = 1;
   continue;
  }
  $172 = HEAP32[$bRefine>>2]|0;
  $173 = ($172|0)!=(0);
  if ($173) {
   HEAP32[$bEndOfSearch>>2] = 1;
   continue;
  } else {
   $174 = HEAP32[$2>>2]|0;
   _memcpy(($cod_info_w|0),($174|0),5252)|0;
   $175 = HEAP32[$4>>2]|0;
   _memcpy(($175|0),($save_xrpow|0),2304)|0;
   HEAP32[$age>>2] = 0;
   $176 = (($cod_info_w) + 4780|0);
   $177 = HEAP32[$176>>2]|0;
   HEAP32[$best_ggain_pass1>>2] = $177;
   HEAP32[$bRefine>>2] = 1;
   continue;
  }
 }
 $178 = HEAP32[$cfg>>2]|0;
 $179 = (($178) + 88|0);
 $180 = HEAP32[$179>>2]|0;
 $181 = ($180|0)==(2);
 if ($181) {
  label = 51;
 } else {
  $182 = HEAP32[$cfg>>2]|0;
  $183 = (($182) + 88|0);
  $184 = HEAP32[$183>>2]|0;
  $185 = ($184|0)==(4);
  if ($185) {
   label = 51;
  } else {
   $186 = HEAP32[$cfg>>2]|0;
   $187 = (($186) + 88|0);
   $188 = HEAP32[$187>>2]|0;
   $189 = ($188|0)==(1);
   if ($189) {
    label = 51;
   } else {
    $191 = HEAP32[$1>>2]|0;
    $192 = (($191) + 84768|0);
    $193 = (($192) + 328|0);
    $194 = HEAP32[$193>>2]|0;
    $195 = $194 & 1;
    $196 = ($195|0)!=(0);
    if ($196) {
     $197 = HEAP32[$1>>2]|0;
     $198 = HEAP32[$2>>2]|0;
     $199 = HEAP32[$3>>2]|0;
     $200 = HEAP32[$4>>2]|0;
     _trancate_smallspectrums($197,$198,$199,$200);
    }
   }
  }
 }
 if ((label|0) == 51) {
  $190 = HEAP32[$4>>2]|0;
  _memcpy(($190|0),($save_xrpow|0),2304)|0;
 }
 $201 = (($best_noise_info) + 12|0);
 $202 = HEAP32[$201>>2]|0;
 HEAP32[$0>>2] = $202;
 $203 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($203|0);
}
function _CBR_iteration_loop($gfc,$pe,$ms_ener_ratio,$ratio) {
 $gfc = $gfc|0;
 $pe = $pe|0;
 $ms_ener_ratio = $ms_ener_ratio|0;
 $ratio = $ratio|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0.0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0, $60 = 0.0, $61 = 0.0, $62 = 0.0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $adjust = 0, $cfg = 0, $ch = 0, $cod_info = 0, $gr = 0, $l3_side = 0, $l3_xmin = 0;
 var $masking_lower_db = 0, $max_bits = 0, $mean_bits = 0, $targ_bits = 0, $xrpow = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 2528|0;
 $0 = sp + 2516|0;
 $1 = sp + 2512|0;
 $2 = sp + 2508|0;
 $3 = sp + 2504|0;
 $cfg = sp + 2500|0;
 $l3_xmin = sp + 2344|0;
 $xrpow = sp + 40|0;
 $targ_bits = sp + 32|0;
 $mean_bits = sp + 28|0;
 $max_bits = sp + 24|0;
 $gr = sp + 20|0;
 $ch = sp + 16|0;
 $l3_side = sp + 12|0;
 $cod_info = sp + 8|0;
 $adjust = sp + 4|0;
 $masking_lower_db = sp;
 HEAP32[$0>>2] = $gfc;
 HEAP32[$1>>2] = $pe;
 HEAP32[$2>>2] = $ms_ener_ratio;
 HEAP32[$3>>2] = $ratio;
 $4 = HEAP32[$0>>2]|0;
 $5 = (($4) + 16|0);
 HEAP32[$cfg>>2] = $5;
 $6 = HEAP32[$0>>2]|0;
 $7 = (($6) + 304|0);
 HEAP32[$l3_side>>2] = $7;
 $8 = HEAP32[$0>>2]|0;
 (_ResvFrameBegin($8,$mean_bits)|0);
 HEAP32[$gr>>2] = 0;
 while(1) {
  $9 = HEAP32[$gr>>2]|0;
  $10 = HEAP32[$cfg>>2]|0;
  $11 = (($10) + 60|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = ($9|0)<($12|0);
  $14 = HEAP32[$0>>2]|0;
  if (!($13)) {
   break;
  }
  $15 = HEAP32[$1>>2]|0;
  $16 = HEAP32[$mean_bits>>2]|0;
  $17 = HEAP32[$gr>>2]|0;
  $18 = HEAP32[$gr>>2]|0;
  $19 = (_on_pe($14,$15,$targ_bits,$16,$17,$18)|0);
  HEAP32[$max_bits>>2] = $19;
  $20 = HEAP32[$0>>2]|0;
  $21 = (($20) + 84040|0);
  $22 = (($21) + 716|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = ($23|0)==(2);
  if ($24) {
   $25 = HEAP32[$0>>2]|0;
   $26 = (($25) + 304|0);
   $27 = HEAP32[$gr>>2]|0;
   _ms_convert($26,$27);
   $28 = HEAP32[$gr>>2]|0;
   $29 = HEAP32[$2>>2]|0;
   $30 = (($29) + ($28<<2)|0);
   $31 = +HEAPF32[$30>>2];
   $32 = HEAP32[$mean_bits>>2]|0;
   $33 = HEAP32[$max_bits>>2]|0;
   _reduce_side($targ_bits,$31,$32,$33);
  }
  HEAP32[$ch>>2] = 0;
  while(1) {
   $34 = HEAP32[$ch>>2]|0;
   $35 = HEAP32[$cfg>>2]|0;
   $36 = (($35) + 56|0);
   $37 = HEAP32[$36>>2]|0;
   $38 = ($34|0)<($37|0);
   if (!($38)) {
    break;
   }
   $39 = HEAP32[$ch>>2]|0;
   $40 = HEAP32[$gr>>2]|0;
   $41 = HEAP32[$l3_side>>2]|0;
   $42 = (($41) + (($40*10504)|0)|0);
   $43 = (($42) + (($39*5252)|0)|0);
   HEAP32[$cod_info>>2] = $43;
   $44 = HEAP32[$cod_info>>2]|0;
   $45 = (($44) + 4788|0);
   $46 = HEAP32[$45>>2]|0;
   $47 = ($46|0)!=(2);
   HEAPF32[$adjust>>2] = 0.0;
   $48 = HEAP32[$0>>2]|0;
   $49 = (($48) + 84768|0);
   if ($47) {
    $50 = (($49) + 144|0);
    $51 = +HEAPF32[$50>>2];
    $52 = +HEAPF32[$adjust>>2];
    $53 = $51 - $52;
    HEAPF32[$masking_lower_db>>2] = $53;
   } else {
    $54 = (($49) + 148|0);
    $55 = +HEAPF32[$54>>2];
    $56 = +HEAPF32[$adjust>>2];
    $57 = $55 - $56;
    HEAPF32[$masking_lower_db>>2] = $57;
   }
   $58 = +HEAPF32[$masking_lower_db>>2];
   $59 = $58;
   $60 = $59 * 0.100000000000000005551;
   $61 = (+Math_pow(10.0,(+$60)));
   $62 = $61;
   $63 = HEAP32[$0>>2]|0;
   $64 = (($63) + 84768|0);
   $65 = (($64) + 140|0);
   HEAPF32[$65>>2] = $62;
   $66 = HEAP32[$0>>2]|0;
   $67 = HEAP32[$cod_info>>2]|0;
   _init_outer_loop($66,$67);
   $68 = HEAP32[$0>>2]|0;
   $69 = HEAP32[$cod_info>>2]|0;
   $70 = (_init_xrpow($68,$69,$xrpow)|0);
   $71 = ($70|0)!=(0);
   if ($71) {
    $72 = HEAP32[$0>>2]|0;
    $73 = HEAP32[$ch>>2]|0;
    $74 = HEAP32[$gr>>2]|0;
    $75 = HEAP32[$3>>2]|0;
    $76 = (($75) + (($74*976)|0)|0);
    $77 = (($76) + (($73*488)|0)|0);
    $78 = HEAP32[$cod_info>>2]|0;
    (_calc_xmin($72,$77,$78,$l3_xmin)|0);
    $79 = HEAP32[$0>>2]|0;
    $80 = HEAP32[$cod_info>>2]|0;
    $81 = HEAP32[$ch>>2]|0;
    $82 = HEAP32[$ch>>2]|0;
    $83 = (($targ_bits) + ($82<<2)|0);
    $84 = HEAP32[$83>>2]|0;
    (_outer_loop($79,$80,$l3_xmin,$xrpow,$81,$84)|0);
   }
   $85 = HEAP32[$0>>2]|0;
   $86 = HEAP32[$gr>>2]|0;
   $87 = HEAP32[$ch>>2]|0;
   _iteration_finish_one($85,$86,$87);
   $88 = HEAP32[$ch>>2]|0;
   $89 = (($88) + 1)|0;
   HEAP32[$ch>>2] = $89;
  }
  $90 = HEAP32[$gr>>2]|0;
  $91 = (($90) + 1)|0;
  HEAP32[$gr>>2] = $91;
 }
 $92 = HEAP32[$mean_bits>>2]|0;
 _ResvFrameEnd($14,$92);
 STACKTOP = sp;return;
}
function _bin_search_StepSize($gfc,$cod_info,$desired_rate,$ch,$xrpow) {
 $gfc = $gfc|0;
 $cod_info = $cod_info|0;
 $desired_rate = $desired_rate|0;
 $ch = $ch|0;
 $xrpow = $xrpow|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $CurrentStep = 0, $Direction = 0, $flag_GoneOver = 0, $nBits = 0, $start = 0, $step = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $0 = sp + 40|0;
 $1 = sp + 36|0;
 $2 = sp + 32|0;
 $3 = sp + 28|0;
 $4 = sp + 24|0;
 $nBits = sp + 20|0;
 $CurrentStep = sp + 16|0;
 $flag_GoneOver = sp + 12|0;
 $start = sp + 8|0;
 $Direction = sp + 4|0;
 $step = sp;
 HEAP32[$0>>2] = $gfc;
 HEAP32[$1>>2] = $cod_info;
 HEAP32[$2>>2] = $desired_rate;
 HEAP32[$3>>2] = $ch;
 HEAP32[$4>>2] = $xrpow;
 $5 = HEAP32[$3>>2]|0;
 $6 = HEAP32[$0>>2]|0;
 $7 = (($6) + 84768|0);
 $8 = (($7) + 160|0);
 $9 = (($8) + ($5<<2)|0);
 $10 = HEAP32[$9>>2]|0;
 HEAP32[$CurrentStep>>2] = $10;
 HEAP32[$flag_GoneOver>>2] = 0;
 $11 = HEAP32[$3>>2]|0;
 $12 = HEAP32[$0>>2]|0;
 $13 = (($12) + 84768|0);
 $14 = (($13) + 152|0);
 $15 = (($14) + ($11<<2)|0);
 $16 = HEAP32[$15>>2]|0;
 HEAP32[$start>>2] = $16;
 HEAP32[$Direction>>2] = 0;
 $17 = HEAP32[$start>>2]|0;
 $18 = HEAP32[$1>>2]|0;
 $19 = (($18) + 4780|0);
 HEAP32[$19>>2] = $17;
 $20 = HEAP32[$1>>2]|0;
 $21 = (($20) + 4844|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = HEAP32[$2>>2]|0;
 $24 = (($23) - ($22))|0;
 HEAP32[$2>>2] = $24;
 while(1) {
  $25 = HEAP32[$0>>2]|0;
  $26 = HEAP32[$4>>2]|0;
  $27 = HEAP32[$1>>2]|0;
  $28 = (_count_bits($25,$26,$27,0)|0);
  HEAP32[$nBits>>2] = $28;
  $29 = HEAP32[$CurrentStep>>2]|0;
  $30 = ($29|0)==(1);
  if ($30) {
   break;
  }
  $31 = HEAP32[$nBits>>2]|0;
  $32 = HEAP32[$2>>2]|0;
  $33 = ($31|0)==($32|0);
  if ($33) {
   break;
  }
  $34 = HEAP32[$nBits>>2]|0;
  $35 = HEAP32[$2>>2]|0;
  $36 = ($34|0)>($35|0);
  $37 = HEAP32[$Direction>>2]|0;
  if ($36) {
   $38 = ($37|0)==(2);
   if ($38) {
    HEAP32[$flag_GoneOver>>2] = 1;
   }
   $39 = HEAP32[$flag_GoneOver>>2]|0;
   $40 = ($39|0)!=(0);
   if ($40) {
    $41 = HEAP32[$CurrentStep>>2]|0;
    $42 = (($41|0) / 2)&-1;
    HEAP32[$CurrentStep>>2] = $42;
   }
   HEAP32[$Direction>>2] = 1;
   $43 = HEAP32[$CurrentStep>>2]|0;
   HEAP32[$step>>2] = $43;
  } else {
   $44 = ($37|0)==(1);
   if ($44) {
    HEAP32[$flag_GoneOver>>2] = 1;
   }
   $45 = HEAP32[$flag_GoneOver>>2]|0;
   $46 = ($45|0)!=(0);
   if ($46) {
    $47 = HEAP32[$CurrentStep>>2]|0;
    $48 = (($47|0) / 2)&-1;
    HEAP32[$CurrentStep>>2] = $48;
   }
   HEAP32[$Direction>>2] = 2;
   $49 = HEAP32[$CurrentStep>>2]|0;
   $50 = (0 - ($49))|0;
   HEAP32[$step>>2] = $50;
  }
  $51 = HEAP32[$step>>2]|0;
  $52 = HEAP32[$1>>2]|0;
  $53 = (($52) + 4780|0);
  $54 = HEAP32[$53>>2]|0;
  $55 = (($54) + ($51))|0;
  HEAP32[$53>>2] = $55;
  $56 = HEAP32[$1>>2]|0;
  $57 = (($56) + 4780|0);
  $58 = HEAP32[$57>>2]|0;
  $59 = ($58|0)<(0);
  if ($59) {
   $60 = HEAP32[$1>>2]|0;
   $61 = (($60) + 4780|0);
   HEAP32[$61>>2] = 0;
   HEAP32[$flag_GoneOver>>2] = 1;
  }
  $62 = HEAP32[$1>>2]|0;
  $63 = (($62) + 4780|0);
  $64 = HEAP32[$63>>2]|0;
  $65 = ($64|0)>(255);
  if (!($65)) {
   continue;
  }
  $66 = HEAP32[$1>>2]|0;
  $67 = (($66) + 4780|0);
  HEAP32[$67>>2] = 255;
  HEAP32[$flag_GoneOver>>2] = 1;
 }
 while(1) {
  $68 = HEAP32[$nBits>>2]|0;
  $69 = HEAP32[$2>>2]|0;
  $70 = ($68|0)>($69|0);
  if (!($70)) {
   label = 22;
   break;
  }
  $71 = HEAP32[$1>>2]|0;
  $72 = (($71) + 4780|0);
  $73 = HEAP32[$72>>2]|0;
  $74 = ($73|0)<(255);
  if (!($74)) {
   label = 22;
   break;
  }
  $75 = HEAP32[$1>>2]|0;
  $76 = (($75) + 4780|0);
  $77 = HEAP32[$76>>2]|0;
  $78 = (($77) + 1)|0;
  HEAP32[$76>>2] = $78;
  $79 = HEAP32[$0>>2]|0;
  $80 = HEAP32[$4>>2]|0;
  $81 = HEAP32[$1>>2]|0;
  $82 = (_count_bits($79,$80,$81,0)|0);
  HEAP32[$nBits>>2] = $82;
 }
 if ((label|0) == 22) {
  $83 = HEAP32[$start>>2]|0;
  $84 = HEAP32[$1>>2]|0;
  $85 = (($84) + 4780|0);
  $86 = HEAP32[$85>>2]|0;
  $87 = (($83) - ($86))|0;
  $88 = ($87|0)>=(4);
  $89 = $88 ? 4 : 2;
  $90 = HEAP32[$3>>2]|0;
  $91 = HEAP32[$0>>2]|0;
  $92 = (($91) + 84768|0);
  $93 = (($92) + 160|0);
  $94 = (($93) + ($90<<2)|0);
  HEAP32[$94>>2] = $89;
  $95 = HEAP32[$1>>2]|0;
  $96 = (($95) + 4780|0);
  $97 = HEAP32[$96>>2]|0;
  $98 = HEAP32[$3>>2]|0;
  $99 = HEAP32[$0>>2]|0;
  $100 = (($99) + 84768|0);
  $101 = (($100) + 152|0);
  $102 = (($101) + ($98<<2)|0);
  HEAP32[$102>>2] = $97;
  $103 = HEAP32[$nBits>>2]|0;
  $104 = HEAP32[$1>>2]|0;
  $105 = (($104) + 4768|0);
  HEAP32[$105>>2] = $103;
  $106 = HEAP32[$nBits>>2]|0;
  STACKTOP = sp;return ($106|0);
 }
 return 0|0;
}
function _balance_noise($gfc,$cod_info,$distort,$xrpow,$bRefine) {
 $gfc = $gfc|0;
 $cod_info = $cod_info|0;
 $distort = $distort|0;
 $xrpow = $xrpow|0;
 $bRefine = $bRefine|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $cfg = 0, $status = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = sp + 28|0;
 $1 = sp + 24|0;
 $2 = sp + 20|0;
 $3 = sp + 16|0;
 $4 = sp + 12|0;
 $5 = sp + 8|0;
 $cfg = sp + 4|0;
 $status = sp;
 HEAP32[$1>>2] = $gfc;
 HEAP32[$2>>2] = $cod_info;
 HEAP32[$3>>2] = $distort;
 HEAP32[$4>>2] = $xrpow;
 HEAP32[$5>>2] = $bRefine;
 $6 = HEAP32[$1>>2]|0;
 $7 = (($6) + 16|0);
 HEAP32[$cfg>>2] = $7;
 $8 = HEAP32[$1>>2]|0;
 $9 = HEAP32[$2>>2]|0;
 $10 = HEAP32[$3>>2]|0;
 $11 = HEAP32[$4>>2]|0;
 $12 = HEAP32[$5>>2]|0;
 _amp_scalefac_bands($8,$9,$10,$11,$12);
 $13 = HEAP32[$2>>2]|0;
 $14 = (_loop_break($13)|0);
 HEAP32[$status>>2] = $14;
 $15 = HEAP32[$status>>2]|0;
 $16 = ($15|0)!=(0);
 if ($16) {
  HEAP32[$0>>2] = 0;
  $61 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($61|0);
 }
 $17 = HEAP32[$1>>2]|0;
 $18 = HEAP32[$2>>2]|0;
 $19 = (_scale_bitcount($17,$18)|0);
 HEAP32[$status>>2] = $19;
 $20 = HEAP32[$status>>2]|0;
 $21 = ($20|0)!=(0);
 if (!($21)) {
  HEAP32[$0>>2] = 1;
  $61 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($61|0);
 }
 $22 = HEAP32[$cfg>>2]|0;
 $23 = (($22) + 12|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = ($24|0)>(1);
 do {
  if ($25) {
   $26 = HEAP32[$1>>2]|0;
   $27 = (($26) + 84768|0);
   $28 = (($27) + 168|0);
   _memset(($28|0),0,156)|0;
   $29 = HEAP32[$2>>2]|0;
   $30 = (($29) + 4836|0);
   $31 = HEAP32[$30>>2]|0;
   $32 = ($31|0)!=(0);
   $33 = HEAP32[$2>>2]|0;
   if (!($32)) {
    $34 = HEAP32[$4>>2]|0;
    _inc_scalefac_scale($33,$34);
    HEAP32[$status>>2] = 0;
    break;
   }
   $35 = (($33) + 4788|0);
   $36 = HEAP32[$35>>2]|0;
   $37 = ($36|0)==(2);
   if ($37) {
    $38 = HEAP32[$cfg>>2]|0;
    $39 = (($38) + 16|0);
    $40 = HEAP32[$39>>2]|0;
    $41 = ($40|0)>(0);
    if ($41) {
     $42 = HEAP32[$1>>2]|0;
     $43 = HEAP32[$2>>2]|0;
     $44 = HEAP32[$4>>2]|0;
     $45 = (_inc_subblock_gain($42,$43,$44)|0);
     $46 = ($45|0)!=(0);
     if ($46) {
      $51 = 1;
     } else {
      $47 = HEAP32[$2>>2]|0;
      $48 = (_loop_break($47)|0);
      $49 = ($48|0)!=(0);
      $51 = $49;
     }
     $50 = $51&1;
     HEAP32[$status>>2] = $50;
    }
   }
  }
 } while(0);
 $52 = HEAP32[$status>>2]|0;
 $53 = ($52|0)!=(0);
 if (!($53)) {
  $54 = HEAP32[$1>>2]|0;
  $55 = HEAP32[$2>>2]|0;
  $56 = (_scale_bitcount($54,$55)|0);
  HEAP32[$status>>2] = $56;
 }
 $57 = HEAP32[$status>>2]|0;
 $58 = ($57|0)!=(0);
 $59 = $58 ^ 1;
 $60 = $59&1;
 HEAP32[$0>>2] = $60;
 $61 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($61|0);
}
function _quant_compare($quant_comp,$best,$calc,$gi,$distort) {
 $quant_comp = $quant_comp|0;
 $best = $best|0;
 $calc = $calc|0;
 $gi = $gi|0;
 $distort = $distort|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0.0, $101 = 0.0, $102 = 0.0, $103 = 0.0, $104 = 0, $105 = 0, $106 = 0.0, $107 = 0.0, $108 = 0.0, $109 = 0.0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0.0, $114 = 0, $115 = 0;
 var $116 = 0.0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0.0, $123 = 0.0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0.0, $129 = 0, $13 = 0, $130 = 0, $131 = 0.0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0.0, $137 = 0, $138 = 0, $139 = 0.0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0.0, $145 = 0, $146 = 0, $147 = 0.0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0.0;
 var $152 = 0, $153 = 0, $154 = 0.0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0.0, $161 = 0.0, $162 = 0, $163 = 0, $164 = 0, $165 = 0.0, $166 = 0.0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0.0, $171 = 0.0, $172 = 0, $173 = 0, $174 = 0, $175 = 0.0, $176 = 0.0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0.0, $181 = 0.0, $182 = 0, $183 = 0, $184 = 0.0, $185 = 0.0, $186 = 0.0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0.0, $191 = 0, $192 = 0, $193 = 0.0, $194 = 0, $195 = 0, $196 = 0, $197 = 0.0, $198 = 0.0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0.0, $203 = 0.0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0.0, $208 = 0.0, $209 = 0, $21 = 0, $210 = 0, $211 = 0.0, $212 = 0.0, $213 = 0.0, $214 = 0, $215 = 0, $216 = 0, $217 = 0.0, $218 = 0, $219 = 0, $22 = 0, $220 = 0.0, $221 = 0, $222 = 0.0, $223 = 0.0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0.0, $228 = 0.0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0.0, $233 = 0.0, $234 = 0, $235 = 0, $236 = 0, $237 = 0.0, $238 = 0.0, $239 = 0, $24 = 0, $240 = 0, $241 = 0.0;
 var $242 = 0.0, $243 = 0.0, $244 = 0, $245 = 0, $246 = 0, $247 = 0.0, $248 = 0, $249 = 0.0, $25 = 0, $250 = 0.0, $251 = 0, $252 = 0, $253 = 0.0, $254 = 0, $255 = 0.0, $256 = 0.0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0.0, $261 = 0.0, $262 = 0, $263 = 0, $264 = 0, $265 = 0.0, $266 = 0.0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0.0, $271 = 0.0, $272 = 0, $273 = 0, $274 = 0.0, $275 = 0.0, $276 = 0.0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0.0, $281 = 0, $282 = 0.0, $283 = 0.0, $284 = 0, $285 = 0.0, $286 = 0.0, $287 = 0, $288 = 0, $289 = 0.0, $29 = 0, $290 = 0, $291 = 0.0, $292 = 0.0, $293 = 0, $294 = 0.0, $295 = 0.0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0.0, $301 = 0, $302 = 0.0, $303 = 0, $304 = 0, $305 = 0.0, $306 = 0.0, $307 = 0.0, $308 = 0, $309 = 0.0, $31 = 0, $310 = 0.0, $311 = 0.0, $312 = 0, $313 = 0;
 var $314 = 0.0, $315 = 0, $316 = 0.0, $317 = 0.0, $318 = 0.0, $319 = 0.0, $32 = 0, $320 = 0, $321 = 0.0, $322 = 0.0, $323 = 0.0, $324 = 0.0, $325 = 0, $326 = 0, $327 = 0.0, $328 = 0.0, $329 = 0.0, $33 = 0, $330 = 0.0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0.0, $335 = 0, $336 = 0, $337 = 0.0, $338 = 0, $339 = 0, $34 = 0.0, $340 = 0, $341 = 0, $342 = 0.0, $343 = 0, $344 = 0.0, $345 = 0, $346 = 0, $347 = 0.0, $348 = 0.0, $349 = 0.0, $35 = 0;
 var $350 = 0, $351 = 0.0, $352 = 0.0, $353 = 0.0, $354 = 0, $355 = 0, $356 = 0.0, $357 = 0, $358 = 0.0, $359 = 0.0, $36 = 0, $360 = 0.0, $361 = 0.0, $362 = 0, $363 = 0.0, $364 = 0.0, $365 = 0.0, $366 = 0.0, $367 = 0, $368 = 0;
 var $369 = 0.0, $37 = 0, $370 = 0.0, $371 = 0.0, $372 = 0.0, $373 = 0, $374 = 0, $375 = 0, $376 = 0.0, $377 = 0, $378 = 0, $379 = 0.0, $38 = 0.0, $380 = 0, $381 = 0, $382 = 0, $383 = 0.0, $384 = 0.0, $385 = 0.0, $386 = 0;
 var $387 = 0, $388 = 0.0, $389 = 0.0, $39 = 0.0, $390 = 0.0, $391 = 0, $392 = 0, $393 = 0, $394 = 0.0, $395 = 0, $396 = 0, $397 = 0.0, $398 = 0.0, $399 = 0.0, $4 = 0, $40 = 0, $400 = 0.0, $401 = 0, $402 = 0, $403 = 0.0;
 var $404 = 0.0, $405 = 0.0, $406 = 0.0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0.0, $411 = 0.0, $412 = 0.0, $413 = 0.0, $414 = 0, $415 = 0, $416 = 0, $417 = 0.0, $418 = 0, $419 = 0, $42 = 0, $420 = 0.0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0.0, $430 = 0, $431 = 0, $432 = 0.0, $433 = 0, $434 = 0.0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0.0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $46 = 0, $47 = 0.0, $48 = 0.0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0.0, $53 = 0.0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0.0, $73 = 0, $74 = 0.0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0.0, $85 = 0.0, $86 = 0.0;
 var $87 = 0, $88 = 0.0, $89 = 0.0, $9 = 0, $90 = 0.0, $91 = 0, $92 = 0, $93 = 0.0, $94 = 0, $95 = 0.0, $96 = 0.0, $97 = 0.0, $98 = 0.0, $99 = 0, $better = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = sp + 20|0;
 $1 = sp + 16|0;
 $2 = sp + 12|0;
 $3 = sp + 8|0;
 $4 = sp + 4|0;
 $better = sp;
 HEAP32[$0>>2] = $quant_comp;
 HEAP32[$1>>2] = $best;
 HEAP32[$2>>2] = $calc;
 HEAP32[$3>>2] = $gi;
 HEAP32[$4>>2] = $distort;
 $5 = HEAP32[$0>>2]|0;
 L1: do {
  switch ($5|0) {
  case 8:  {
   $120 = HEAP32[$4>>2]|0;
   $121 = HEAP32[$3>>2]|0;
   $122 = (+_get_klemm_noise($120,$121));
   $123 = $122;
   $124 = HEAP32[$2>>2]|0;
   $125 = (($124) + 8|0);
   HEAPF32[$125>>2] = $123;
   label = 18;
   break;
  }
  case 0:  {
   $57 = HEAP32[$2>>2]|0;
   $58 = (($57) + 12|0);
   $59 = HEAP32[$58>>2]|0;
   $60 = HEAP32[$1>>2]|0;
   $61 = (($60) + 12|0);
   $62 = HEAP32[$61>>2]|0;
   $63 = ($59|0)<($62|0);
   do {
    if ($63) {
     $119 = 1;
    } else {
     $64 = HEAP32[$2>>2]|0;
     $65 = (($64) + 12|0);
     $66 = HEAP32[$65>>2]|0;
     $67 = HEAP32[$1>>2]|0;
     $68 = (($67) + 12|0);
     $69 = HEAP32[$68>>2]|0;
     $70 = ($66|0)==($69|0);
     if ($70) {
      $71 = HEAP32[$2>>2]|0;
      $72 = +HEAPF32[$71>>2];
      $73 = HEAP32[$1>>2]|0;
      $74 = +HEAPF32[$73>>2];
      $75 = $72 < $74;
      if ($75) {
       $119 = 1;
       break;
      }
     }
     $76 = HEAP32[$2>>2]|0;
     $77 = (($76) + 12|0);
     $78 = HEAP32[$77>>2]|0;
     $79 = HEAP32[$1>>2]|0;
     $80 = (($79) + 12|0);
     $81 = HEAP32[$80>>2]|0;
     $82 = ($78|0)==($81|0);
     if ($82) {
      $83 = HEAP32[$2>>2]|0;
      $84 = +HEAPF32[$83>>2];
      $85 = $84;
      $86 = (+Math_abs((+$85)));
      $87 = HEAP32[$1>>2]|0;
      $88 = +HEAPF32[$87>>2];
      $89 = $88;
      $90 = (+Math_abs((+$89)));
      $91 = $86 > $90;
      $92 = HEAP32[$2>>2]|0;
      $93 = +HEAPF32[$92>>2];
      $94 = HEAP32[$1>>2]|0;
      $95 = +HEAPF32[$94>>2];
      $96 = $93 - $95;
      $97 = $96;
      $98 = (+Math_abs((+$97)));
      if ($91) {
       $99 = HEAP32[$2>>2]|0;
       $100 = +HEAPF32[$99>>2];
       $101 = $100;
       $102 = (+Math_abs((+$101)));
       $103 = $102 * 9.99999997475242707878E-7;
       $104 = $98 <= $103;
       if (!($104)) {
        $119 = 0;
        break;
       }
      } else {
       $105 = HEAP32[$1>>2]|0;
       $106 = +HEAPF32[$105>>2];
       $107 = $106;
       $108 = (+Math_abs((+$107)));
       $109 = $108 * 9.99999997475242707878E-7;
       $110 = $98 <= $109;
       if (!($110)) {
        $119 = 0;
        break;
       }
      }
      $111 = HEAP32[$2>>2]|0;
      $112 = (($111) + 4|0);
      $113 = +HEAPF32[$112>>2];
      $114 = HEAP32[$1>>2]|0;
      $115 = (($114) + 4|0);
      $116 = +HEAPF32[$115>>2];
      $117 = $113 < $116;
      $119 = $117;
     } else {
      $119 = 0;
     }
    }
   } while(0);
   $118 = $119&1;
   HEAP32[$better>>2] = $118;
   break;
  }
  case 2:  {
   $134 = HEAP32[$2>>2]|0;
   $135 = (($134) + 4|0);
   $136 = +HEAPF32[$135>>2];
   $137 = HEAP32[$1>>2]|0;
   $138 = (($137) + 4|0);
   $139 = +HEAPF32[$138>>2];
   $140 = $136 < $139;
   $141 = $140&1;
   HEAP32[$better>>2] = $141;
   break;
  }
  case 4:  {
   $158 = HEAP32[$2>>2]|0;
   $159 = (($158) + 8|0);
   $160 = +HEAPF32[$159>>2];
   $161 = $160;
   $162 = $161 <= 0.0;
   if ($162) {
    $163 = HEAP32[$1>>2]|0;
    $164 = (($163) + 8|0);
    $165 = +HEAPF32[$164>>2];
    $166 = $165;
    $167 = $166 > 0.200000000000000011102;
    if ($167) {
     $298 = 1;
    } else {
     label = 25;
    }
   } else {
    label = 25;
   }
   do {
    if ((label|0) == 25) {
     $168 = HEAP32[$2>>2]|0;
     $169 = (($168) + 8|0);
     $170 = +HEAPF32[$169>>2];
     $171 = $170;
     $172 = $171 <= 0.0;
     if ($172) {
      $173 = HEAP32[$1>>2]|0;
      $174 = (($173) + 8|0);
      $175 = +HEAPF32[$174>>2];
      $176 = $175;
      $177 = $176 < 0.0;
      if ($177) {
       $178 = HEAP32[$1>>2]|0;
       $179 = (($178) + 8|0);
       $180 = +HEAPF32[$179>>2];
       $181 = $180;
       $182 = HEAP32[$2>>2]|0;
       $183 = (($182) + 8|0);
       $184 = +HEAPF32[$183>>2];
       $185 = $184;
       $186 = $185 - 0.200000000000000011102;
       $187 = $181 > $186;
       if ($187) {
        $188 = HEAP32[$2>>2]|0;
        $189 = (($188) + 4|0);
        $190 = +HEAPF32[$189>>2];
        $191 = HEAP32[$1>>2]|0;
        $192 = (($191) + 4|0);
        $193 = +HEAPF32[$192>>2];
        $194 = $190 < $193;
        if ($194) {
         $298 = 1;
         break;
        }
       }
      }
     }
     $195 = HEAP32[$2>>2]|0;
     $196 = (($195) + 8|0);
     $197 = +HEAPF32[$196>>2];
     $198 = $197;
     $199 = $198 <= 0.0;
     if ($199) {
      $200 = HEAP32[$1>>2]|0;
      $201 = (($200) + 8|0);
      $202 = +HEAPF32[$201>>2];
      $203 = $202;
      $204 = $203 > 0.0;
      if ($204) {
       $205 = HEAP32[$1>>2]|0;
       $206 = (($205) + 8|0);
       $207 = +HEAPF32[$206>>2];
       $208 = $207;
       $209 = HEAP32[$2>>2]|0;
       $210 = (($209) + 8|0);
       $211 = +HEAPF32[$210>>2];
       $212 = $211;
       $213 = $212 - 0.200000000000000011102;
       $214 = $208 > $213;
       if ($214) {
        $215 = HEAP32[$2>>2]|0;
        $216 = (($215) + 4|0);
        $217 = +HEAPF32[$216>>2];
        $218 = HEAP32[$1>>2]|0;
        $219 = (($218) + 4|0);
        $220 = +HEAPF32[$219>>2];
        $221 = HEAP32[$1>>2]|0;
        $222 = +HEAPF32[$221>>2];
        $223 = $220 + $222;
        $224 = $217 < $223;
        if ($224) {
         $298 = 1;
         break;
        }
       }
      }
     }
     $225 = HEAP32[$2>>2]|0;
     $226 = (($225) + 8|0);
     $227 = +HEAPF32[$226>>2];
     $228 = $227;
     $229 = $228 > 0.0;
     if ($229) {
      $230 = HEAP32[$1>>2]|0;
      $231 = (($230) + 8|0);
      $232 = +HEAPF32[$231>>2];
      $233 = $232;
      $234 = $233 > -0.0500000000000000027756;
      if ($234) {
       $235 = HEAP32[$1>>2]|0;
       $236 = (($235) + 8|0);
       $237 = +HEAPF32[$236>>2];
       $238 = $237;
       $239 = HEAP32[$2>>2]|0;
       $240 = (($239) + 8|0);
       $241 = +HEAPF32[$240>>2];
       $242 = $241;
       $243 = $242 - 0.100000000000000005551;
       $244 = $238 > $243;
       if ($244) {
        $245 = HEAP32[$2>>2]|0;
        $246 = (($245) + 4|0);
        $247 = +HEAPF32[$246>>2];
        $248 = HEAP32[$2>>2]|0;
        $249 = +HEAPF32[$248>>2];
        $250 = $247 + $249;
        $251 = HEAP32[$1>>2]|0;
        $252 = (($251) + 4|0);
        $253 = +HEAPF32[$252>>2];
        $254 = HEAP32[$1>>2]|0;
        $255 = +HEAPF32[$254>>2];
        $256 = $253 + $255;
        $257 = $250 < $256;
        if ($257) {
         $298 = 1;
         break;
        }
       }
      }
     }
     $258 = HEAP32[$2>>2]|0;
     $259 = (($258) + 8|0);
     $260 = +HEAPF32[$259>>2];
     $261 = $260;
     $262 = $261 > 0.0;
     if ($262) {
      $263 = HEAP32[$1>>2]|0;
      $264 = (($263) + 8|0);
      $265 = +HEAPF32[$264>>2];
      $266 = $265;
      $267 = $266 > -0.100000000000000005551;
      if ($267) {
       $268 = HEAP32[$1>>2]|0;
       $269 = (($268) + 8|0);
       $270 = +HEAPF32[$269>>2];
       $271 = $270;
       $272 = HEAP32[$2>>2]|0;
       $273 = (($272) + 8|0);
       $274 = +HEAPF32[$273>>2];
       $275 = $274;
       $276 = $275 - 0.149999999999999994449;
       $277 = $271 > $276;
       if ($277) {
        $278 = HEAP32[$2>>2]|0;
        $279 = (($278) + 4|0);
        $280 = +HEAPF32[$279>>2];
        $281 = HEAP32[$2>>2]|0;
        $282 = +HEAPF32[$281>>2];
        $283 = $280 + $282;
        $284 = HEAP32[$2>>2]|0;
        $285 = +HEAPF32[$284>>2];
        $286 = $283 + $285;
        $287 = HEAP32[$1>>2]|0;
        $288 = (($287) + 4|0);
        $289 = +HEAPF32[$288>>2];
        $290 = HEAP32[$1>>2]|0;
        $291 = +HEAPF32[$290>>2];
        $292 = $289 + $291;
        $293 = HEAP32[$1>>2]|0;
        $294 = +HEAPF32[$293>>2];
        $295 = $292 + $294;
        $296 = $286 < $295;
        $298 = $296;
       } else {
        $298 = 0;
       }
      } else {
       $298 = 0;
      }
     } else {
      $298 = 0;
     }
    }
   } while(0);
   $297 = $298&1;
   HEAP32[$better>>2] = $297;
   break;
  }
  case 5:  {
   $299 = HEAP32[$2>>2]|0;
   $300 = +HEAPF32[$299>>2];
   $301 = HEAP32[$1>>2]|0;
   $302 = +HEAPF32[$301>>2];
   $303 = $300 < $302;
   do {
    if ($303) {
     $340 = 1;
    } else {
     $304 = HEAP32[$2>>2]|0;
     $305 = +HEAPF32[$304>>2];
     $306 = $305;
     $307 = (+Math_abs((+$306)));
     $308 = HEAP32[$1>>2]|0;
     $309 = +HEAPF32[$308>>2];
     $310 = $309;
     $311 = (+Math_abs((+$310)));
     $312 = $307 > $311;
     $313 = HEAP32[$2>>2]|0;
     $314 = +HEAPF32[$313>>2];
     $315 = HEAP32[$1>>2]|0;
     $316 = +HEAPF32[$315>>2];
     $317 = $314 - $316;
     $318 = $317;
     $319 = (+Math_abs((+$318)));
     if ($312) {
      $320 = HEAP32[$2>>2]|0;
      $321 = +HEAPF32[$320>>2];
      $322 = $321;
      $323 = (+Math_abs((+$322)));
      $324 = $323 * 9.99999997475242707878E-7;
      $325 = $319 <= $324;
      if (!($325)) {
       $340 = 0;
       break;
      }
     } else {
      $326 = HEAP32[$1>>2]|0;
      $327 = +HEAPF32[$326>>2];
      $328 = $327;
      $329 = (+Math_abs((+$328)));
      $330 = $329 * 9.99999997475242707878E-7;
      $331 = $319 <= $330;
      if (!($331)) {
       $340 = 0;
       break;
      }
     }
     $332 = HEAP32[$2>>2]|0;
     $333 = (($332) + 4|0);
     $334 = +HEAPF32[$333>>2];
     $335 = HEAP32[$1>>2]|0;
     $336 = (($335) + 4|0);
     $337 = +HEAPF32[$336>>2];
     $338 = $334 < $337;
     $340 = $338;
    }
   } while(0);
   $339 = $340&1;
   HEAP32[$better>>2] = $339;
   break;
  }
  case 3:  {
   $142 = HEAP32[$2>>2]|0;
   $143 = (($142) + 4|0);
   $144 = +HEAPF32[$143>>2];
   $145 = HEAP32[$1>>2]|0;
   $146 = (($145) + 4|0);
   $147 = +HEAPF32[$146>>2];
   $148 = $144 < $147;
   if ($148) {
    $149 = HEAP32[$2>>2]|0;
    $150 = (($149) + 8|0);
    $151 = +HEAPF32[$150>>2];
    $152 = HEAP32[$1>>2]|0;
    $153 = (($152) + 8|0);
    $154 = +HEAPF32[$153>>2];
    $155 = $151 < $154;
    $157 = $155;
   } else {
    $157 = 0;
   }
   $156 = $157&1;
   HEAP32[$better>>2] = $156;
   break;
  }
  case 6:  {
   $341 = HEAP32[$2>>2]|0;
   $342 = +HEAPF32[$341>>2];
   $343 = HEAP32[$1>>2]|0;
   $344 = +HEAPF32[$343>>2];
   $345 = $342 < $344;
   do {
    if ($345) {
     $423 = 1;
    } else {
     $346 = HEAP32[$2>>2]|0;
     $347 = +HEAPF32[$346>>2];
     $348 = $347;
     $349 = (+Math_abs((+$348)));
     $350 = HEAP32[$1>>2]|0;
     $351 = +HEAPF32[$350>>2];
     $352 = $351;
     $353 = (+Math_abs((+$352)));
     $354 = $349 > $353;
     $355 = HEAP32[$2>>2]|0;
     $356 = +HEAPF32[$355>>2];
     $357 = HEAP32[$1>>2]|0;
     $358 = +HEAPF32[$357>>2];
     $359 = $356 - $358;
     $360 = $359;
     $361 = (+Math_abs((+$360)));
     if ($354) {
      $362 = HEAP32[$2>>2]|0;
      $363 = +HEAPF32[$362>>2];
      $364 = $363;
      $365 = (+Math_abs((+$364)));
      $366 = $365 * 9.99999997475242707878E-7;
      $367 = $361 <= $366;
      if (!($367)) {
       $423 = 0;
       break;
      }
     } else {
      $368 = HEAP32[$1>>2]|0;
      $369 = +HEAPF32[$368>>2];
      $370 = $369;
      $371 = (+Math_abs((+$370)));
      $372 = $371 * 9.99999997475242707878E-7;
      $373 = $361 <= $372;
      if (!($373)) {
       $423 = 0;
       break;
      }
     }
     $374 = HEAP32[$2>>2]|0;
     $375 = (($374) + 8|0);
     $376 = +HEAPF32[$375>>2];
     $377 = HEAP32[$1>>2]|0;
     $378 = (($377) + 8|0);
     $379 = +HEAPF32[$378>>2];
     $380 = $376 < $379;
     if ($380) {
      $423 = 1;
     } else {
      $381 = HEAP32[$2>>2]|0;
      $382 = (($381) + 8|0);
      $383 = +HEAPF32[$382>>2];
      $384 = $383;
      $385 = (+Math_abs((+$384)));
      $386 = HEAP32[$1>>2]|0;
      $387 = (($386) + 8|0);
      $388 = +HEAPF32[$387>>2];
      $389 = $388;
      $390 = (+Math_abs((+$389)));
      $391 = $385 > $390;
      $392 = HEAP32[$2>>2]|0;
      $393 = (($392) + 8|0);
      $394 = +HEAPF32[$393>>2];
      $395 = HEAP32[$1>>2]|0;
      $396 = (($395) + 8|0);
      $397 = +HEAPF32[$396>>2];
      $398 = $394 - $397;
      $399 = $398;
      $400 = (+Math_abs((+$399)));
      if ($391) {
       $401 = HEAP32[$2>>2]|0;
       $402 = (($401) + 8|0);
       $403 = +HEAPF32[$402>>2];
       $404 = $403;
       $405 = (+Math_abs((+$404)));
       $406 = $405 * 9.99999997475242707878E-7;
       $407 = $400 <= $406;
       if (!($407)) {
        $423 = 0;
        break;
       }
      } else {
       $408 = HEAP32[$1>>2]|0;
       $409 = (($408) + 8|0);
       $410 = +HEAPF32[$409>>2];
       $411 = $410;
       $412 = (+Math_abs((+$411)));
       $413 = $412 * 9.99999997475242707878E-7;
       $414 = $400 <= $413;
       if (!($414)) {
        $423 = 0;
        break;
       }
      }
      $415 = HEAP32[$2>>2]|0;
      $416 = (($415) + 4|0);
      $417 = +HEAPF32[$416>>2];
      $418 = HEAP32[$1>>2]|0;
      $419 = (($418) + 4|0);
      $420 = +HEAPF32[$419>>2];
      $421 = $417 <= $420;
      $423 = $421;
     }
    }
   } while(0);
   $422 = $423&1;
   HEAP32[$better>>2] = $422;
   break;
  }
  case 1:  {
   label = 18;
   break;
  }
  case 7:  {
   $424 = HEAP32[$2>>2]|0;
   $425 = (($424) + 12|0);
   $426 = HEAP32[$425>>2]|0;
   $427 = HEAP32[$1>>2]|0;
   $428 = (($427) + 12|0);
   $429 = HEAP32[$428>>2]|0;
   $430 = ($426|0)<($429|0);
   if ($430) {
    $437 = 1;
   } else {
    $431 = HEAP32[$2>>2]|0;
    $432 = +HEAPF32[$431>>2];
    $433 = HEAP32[$1>>2]|0;
    $434 = +HEAPF32[$433>>2];
    $435 = $432 < $434;
    $437 = $435;
   }
   $436 = $437&1;
   HEAP32[$better>>2] = $436;
   break;
  }
  default: {
   $6 = HEAP32[$1>>2]|0;
   $7 = (($6) + 12|0);
   $8 = HEAP32[$7>>2]|0;
   $9 = ($8|0)>(0);
   $10 = HEAP32[$2>>2]|0;
   if ($9) {
    $11 = (($10) + 16|0);
    $12 = HEAP32[$11>>2]|0;
    $13 = HEAP32[$1>>2]|0;
    $14 = (($13) + 16|0);
    $15 = HEAP32[$14>>2]|0;
    $16 = ($12|0)<=($15|0);
    $17 = $16&1;
    HEAP32[$better>>2] = $17;
    $18 = HEAP32[$2>>2]|0;
    $19 = (($18) + 16|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = HEAP32[$1>>2]|0;
    $22 = (($21) + 16|0);
    $23 = HEAP32[$22>>2]|0;
    $24 = ($20|0)==($23|0);
    if (!($24)) {
     break L1;
    }
    $25 = HEAP32[$2>>2]|0;
    $26 = (($25) + 20|0);
    $27 = HEAP32[$26>>2]|0;
    $28 = HEAP32[$1>>2]|0;
    $29 = (($28) + 20|0);
    $30 = HEAP32[$29>>2]|0;
    $31 = ($27|0)<($30|0);
    $32 = $31&1;
    HEAP32[$better>>2] = $32;
    break L1;
   }
   $33 = (($10) + 8|0);
   $34 = +HEAPF32[$33>>2];
   $35 = $34 < 0.0;
   if ($35) {
    $36 = HEAP32[$2>>2]|0;
    $37 = (($36) + 8|0);
    $38 = +HEAPF32[$37>>2];
    $39 = $38 * 10.0;
    $40 = HEAP32[$2>>2]|0;
    $41 = (($40) + 20|0);
    $42 = HEAP32[$41>>2]|0;
    $43 = (+($42|0));
    $44 = $39 + $43;
    $45 = HEAP32[$1>>2]|0;
    $46 = (($45) + 8|0);
    $47 = +HEAPF32[$46>>2];
    $48 = $47 * 10.0;
    $49 = HEAP32[$1>>2]|0;
    $50 = (($49) + 20|0);
    $51 = HEAP32[$50>>2]|0;
    $52 = (+($51|0));
    $53 = $48 + $52;
    $54 = $44 <= $53;
    $56 = $54;
   } else {
    $56 = 0;
   }
   $55 = $56&1;
   HEAP32[$better>>2] = $55;
  }
  }
 } while(0);
 if ((label|0) == 18) {
  $126 = HEAP32[$2>>2]|0;
  $127 = (($126) + 8|0);
  $128 = +HEAPF32[$127>>2];
  $129 = HEAP32[$1>>2]|0;
  $130 = (($129) + 8|0);
  $131 = +HEAPF32[$130>>2];
  $132 = $128 < $131;
  $133 = $132&1;
  HEAP32[$better>>2] = $133;
 }
 $438 = HEAP32[$1>>2]|0;
 $439 = (($438) + 12|0);
 $440 = HEAP32[$439>>2]|0;
 $441 = ($440|0)==(0);
 if (!($441)) {
  $453 = HEAP32[$better>>2]|0;
  STACKTOP = sp;return ($453|0);
 }
 $442 = HEAP32[$better>>2]|0;
 $443 = ($442|0)!=(0);
 if ($443) {
  $444 = HEAP32[$2>>2]|0;
  $445 = (($444) + 20|0);
  $446 = HEAP32[$445>>2]|0;
  $447 = HEAP32[$1>>2]|0;
  $448 = (($447) + 20|0);
  $449 = HEAP32[$448>>2]|0;
  $450 = ($446|0)<($449|0);
  $452 = $450;
 } else {
  $452 = 0;
 }
 $451 = $452&1;
 HEAP32[$better>>2] = $451;
 $453 = HEAP32[$better>>2]|0;
 STACKTOP = sp;return ($453|0);
}
function _get_klemm_noise($distort,$gi) {
 $distort = $distort|0;
 $gi = $gi|0;
 var $0 = 0, $1 = 0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0, $19 = 0.0, $2 = 0, $20 = 0.0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $klemm_noise = 0, $sfb = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = sp + 16|0;
 $1 = sp + 12|0;
 $sfb = sp + 8|0;
 $klemm_noise = sp;
 HEAP32[$0>>2] = $distort;
 HEAP32[$1>>2] = $gi;
 HEAPF64[$klemm_noise>>3] = 1.00000000000000006632E-37;
 HEAP32[$sfb>>2] = 0;
 while(1) {
  $2 = HEAP32[$sfb>>2]|0;
  $3 = HEAP32[$1>>2]|0;
  $4 = (($3) + 4864|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = ($2|0)<($5|0);
  if (!($6)) {
   break;
  }
  $7 = HEAP32[$sfb>>2]|0;
  $8 = HEAP32[$0>>2]|0;
  $9 = (($8) + ($7<<2)|0);
  $10 = +HEAPF32[$9>>2];
  $11 = $10;
  $12 = (+_penalties($11));
  $13 = +HEAPF64[$klemm_noise>>3];
  $14 = $13 + $12;
  HEAPF64[$klemm_noise>>3] = $14;
  $15 = HEAP32[$sfb>>2]|0;
  $16 = (($15) + 1)|0;
  HEAP32[$sfb>>2] = $16;
 }
 $17 = +HEAPF64[$klemm_noise>>3];
 $18 = 9.99999999999999945153E-21 > $17;
 $19 = +HEAPF64[$klemm_noise>>3];
 $20 = $18 ? 9.99999999999999945153E-21 : $19;
 STACKTOP = sp;return (+$20);
}
function _penalties($noise) {
 $noise = +$noise;
 var $0 = 0, $1 = 0.0, $10 = 0.0, $11 = 0.0, $2 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp;
 HEAPF64[$0>>3] = $noise;
 $1 = +HEAPF64[$0>>3];
 $2 = 0.632000000000000006217 * $1;
 $3 = +HEAPF64[$0>>3];
 $4 = $2 * $3;
 $5 = +HEAPF64[$0>>3];
 $6 = $4 * $5;
 $7 = 0.367999999999999993783 + $6;
 $8 = $7;
 $9 = (+_fast_log2($8));
 $10 = $9;
 $11 = $10 * 0.301029995663981142506;
 STACKTOP = sp;return (+$11);
}
function _amp_scalefac_bands($gfc,$cod_info,$distort,$xrpow,$bRefine) {
 $gfc = $gfc|0;
 $cod_info = $cod_info|0;
 $distort = $distort|0;
 $xrpow = $xrpow|0;
 $bRefine = $bRefine|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0.0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0.0, $119 = 0.0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0.0, $126 = 0, $127 = 0, $128 = 0.0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0.0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $15 = 0, $16 = 0.0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0.0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0.0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0.0, $37 = 0.0, $38 = 0, $39 = 0.0;
 var $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0, $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0.0, $69 = 0.0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $cfg = 0, $ifqstep34 = 0, $j = 0, $l = 0, $noise_shaping_amp = 0, $sfb = 0, $trigger = 0, $width = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $0 = sp + 48|0;
 $1 = sp + 44|0;
 $2 = sp + 40|0;
 $3 = sp + 36|0;
 $4 = sp + 32|0;
 $cfg = sp + 28|0;
 $j = sp + 24|0;
 $sfb = sp + 20|0;
 $ifqstep34 = sp + 16|0;
 $trigger = sp + 12|0;
 $noise_shaping_amp = sp + 8|0;
 $width = sp + 4|0;
 $l = sp;
 HEAP32[$0>>2] = $gfc;
 HEAP32[$1>>2] = $cod_info;
 HEAP32[$2>>2] = $distort;
 HEAP32[$3>>2] = $xrpow;
 HEAP32[$4>>2] = $bRefine;
 $5 = HEAP32[$0>>2]|0;
 $6 = (($5) + 16|0);
 HEAP32[$cfg>>2] = $6;
 $7 = HEAP32[$1>>2]|0;
 $8 = (($7) + 4836|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)==(0);
 if ($10) {
  HEAPF32[$ifqstep34>>2] = 1.29683959484100341797;
 } else {
  HEAPF32[$ifqstep34>>2] = 1.68179285526275634766;
 }
 HEAPF32[$trigger>>2] = 0.0;
 HEAP32[$sfb>>2] = 0;
 while(1) {
  $11 = HEAP32[$sfb>>2]|0;
  $12 = HEAP32[$1>>2]|0;
  $13 = (($12) + 4860|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = ($11|0)<($14|0);
  if (!($15)) {
   break;
  }
  $16 = +HEAPF32[$trigger>>2];
  $17 = HEAP32[$sfb>>2]|0;
  $18 = HEAP32[$2>>2]|0;
  $19 = (($18) + ($17<<2)|0);
  $20 = +HEAPF32[$19>>2];
  $21 = $16 < $20;
  if ($21) {
   $22 = HEAP32[$sfb>>2]|0;
   $23 = HEAP32[$2>>2]|0;
   $24 = (($23) + ($22<<2)|0);
   $25 = +HEAPF32[$24>>2];
   HEAPF32[$trigger>>2] = $25;
  }
  $26 = HEAP32[$sfb>>2]|0;
  $27 = (($26) + 1)|0;
  HEAP32[$sfb>>2] = $27;
 }
 $28 = HEAP32[$cfg>>2]|0;
 $29 = (($28) + 24|0);
 $30 = HEAP32[$29>>2]|0;
 HEAP32[$noise_shaping_amp>>2] = $30;
 $31 = HEAP32[$noise_shaping_amp>>2]|0;
 $32 = ($31|0)==(3);
 do {
  if ($32) {
   $33 = HEAP32[$4>>2]|0;
   $34 = ($33|0)==(1);
   if ($34) {
    HEAP32[$noise_shaping_amp>>2] = 2;
    break;
   } else {
    HEAP32[$noise_shaping_amp>>2] = 1;
    break;
   }
  }
 } while(0);
 $35 = HEAP32[$noise_shaping_amp>>2]|0;
 do {
  if ((($35|0) == 1)) {
   $36 = +HEAPF32[$trigger>>2];
   $37 = $36;
   $38 = $37 > 1.0;
   $39 = +HEAPF32[$trigger>>2];
   $40 = $39;
   if ($38) {
    $41 = (+Math_pow((+$40),0.5));
    $42 = $41;
    HEAPF32[$trigger>>2] = $42;
    break;
   } else {
    $43 = $40 * 0.949999999999999955591;
    $44 = $43;
    HEAPF32[$trigger>>2] = $44;
    break;
   }
  } else if (!((($35|0) == 2))) {
   $45 = +HEAPF32[$trigger>>2];
   $46 = $45;
   $47 = $46 > 1.0;
   if ($47) {
    HEAPF32[$trigger>>2] = 1.0;
    break;
   } else {
    $48 = +HEAPF32[$trigger>>2];
    $49 = $48;
    $50 = $49 * 0.949999999999999955591;
    $51 = $50;
    HEAPF32[$trigger>>2] = $51;
    break;
   }
  }
 } while(0);
 HEAP32[$j>>2] = 0;
 HEAP32[$sfb>>2] = 0;
 while(1) {
  $52 = HEAP32[$sfb>>2]|0;
  $53 = HEAP32[$1>>2]|0;
  $54 = (($53) + 4860|0);
  $55 = HEAP32[$54>>2]|0;
  $56 = ($52|0)<($55|0);
  if (!($56)) {
   label = 33;
   break;
  }
  $57 = HEAP32[$sfb>>2]|0;
  $58 = HEAP32[$1>>2]|0;
  $59 = (($58) + 4872|0);
  $60 = (($59) + ($57<<2)|0);
  $61 = HEAP32[$60>>2]|0;
  HEAP32[$width>>2] = $61;
  $62 = HEAP32[$width>>2]|0;
  $63 = HEAP32[$j>>2]|0;
  $64 = (($63) + ($62))|0;
  HEAP32[$j>>2] = $64;
  $65 = HEAP32[$sfb>>2]|0;
  $66 = HEAP32[$2>>2]|0;
  $67 = (($66) + ($65<<2)|0);
  $68 = +HEAPF32[$67>>2];
  $69 = +HEAPF32[$trigger>>2];
  $70 = $68 < $69;
  if (!($70)) {
   $71 = HEAP32[$0>>2]|0;
   $72 = (($71) + 84768|0);
   $73 = (($72) + 328|0);
   $74 = HEAP32[$73>>2]|0;
   $75 = $74 & 2;
   $76 = ($75|0)!=(0);
   if ($76) {
    $77 = HEAP32[$sfb>>2]|0;
    $78 = HEAP32[$0>>2]|0;
    $79 = (($78) + 84768|0);
    $80 = (($79) + 168|0);
    $81 = (($80) + ($77<<2)|0);
    $82 = HEAP32[$81>>2]|0;
    $83 = ($82|0)!=(0);
    $84 = $83 ^ 1;
    $85 = $84&1;
    $86 = HEAP32[$sfb>>2]|0;
    $87 = HEAP32[$0>>2]|0;
    $88 = (($87) + 84768|0);
    $89 = (($88) + 168|0);
    $90 = (($89) + ($86<<2)|0);
    HEAP32[$90>>2] = $85;
    $91 = HEAP32[$sfb>>2]|0;
    $92 = HEAP32[$0>>2]|0;
    $93 = (($92) + 84768|0);
    $94 = (($93) + 168|0);
    $95 = (($94) + ($91<<2)|0);
    $96 = HEAP32[$95>>2]|0;
    $97 = ($96|0)!=(0);
    if (!($97)) {
     $98 = HEAP32[$cfg>>2]|0;
     $99 = (($98) + 24|0);
     $100 = HEAP32[$99>>2]|0;
     $101 = ($100|0)==(2);
     if ($101) {
      label = 33;
      break;
     }
    }
   }
   $102 = HEAP32[$sfb>>2]|0;
   $103 = HEAP32[$1>>2]|0;
   $104 = (($103) + 4608|0);
   $105 = (($104) + ($102<<2)|0);
   $106 = HEAP32[$105>>2]|0;
   $107 = (($106) + 1)|0;
   HEAP32[$105>>2] = $107;
   $108 = HEAP32[$width>>2]|0;
   $109 = (0 - ($108))|0;
   HEAP32[$l>>2] = $109;
   while(1) {
    $110 = HEAP32[$l>>2]|0;
    $111 = ($110|0)<(0);
    if (!($111)) {
     break;
    }
    $112 = +HEAPF32[$ifqstep34>>2];
    $113 = HEAP32[$j>>2]|0;
    $114 = HEAP32[$l>>2]|0;
    $115 = (($113) + ($114))|0;
    $116 = HEAP32[$3>>2]|0;
    $117 = (($116) + ($115<<2)|0);
    $118 = +HEAPF32[$117>>2];
    $119 = $118 * $112;
    HEAPF32[$117>>2] = $119;
    $120 = HEAP32[$j>>2]|0;
    $121 = HEAP32[$l>>2]|0;
    $122 = (($120) + ($121))|0;
    $123 = HEAP32[$3>>2]|0;
    $124 = (($123) + ($122<<2)|0);
    $125 = +HEAPF32[$124>>2];
    $126 = HEAP32[$1>>2]|0;
    $127 = (($126) + 4764|0);
    $128 = +HEAPF32[$127>>2];
    $129 = $125 > $128;
    if ($129) {
     $130 = HEAP32[$j>>2]|0;
     $131 = HEAP32[$l>>2]|0;
     $132 = (($130) + ($131))|0;
     $133 = HEAP32[$3>>2]|0;
     $134 = (($133) + ($132<<2)|0);
     $135 = +HEAPF32[$134>>2];
     $136 = HEAP32[$1>>2]|0;
     $137 = (($136) + 4764|0);
     HEAPF32[$137>>2] = $135;
    }
    $138 = HEAP32[$l>>2]|0;
    $139 = (($138) + 1)|0;
    HEAP32[$l>>2] = $139;
   }
   $140 = HEAP32[$cfg>>2]|0;
   $141 = (($140) + 24|0);
   $142 = HEAP32[$141>>2]|0;
   $143 = ($142|0)==(2);
   if ($143) {
    label = 33;
    break;
   }
  }
  $144 = HEAP32[$sfb>>2]|0;
  $145 = (($144) + 1)|0;
  HEAP32[$sfb>>2] = $145;
 }
 if ((label|0) == 33) {
  STACKTOP = sp;return;
 }
}
function _loop_break($cod_info) {
 $cod_info = $cod_info|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $sfb = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp + 8|0;
 $1 = sp + 4|0;
 $sfb = sp;
 HEAP32[$1>>2] = $cod_info;
 HEAP32[$sfb>>2] = 0;
 while(1) {
  $2 = HEAP32[$sfb>>2]|0;
  $3 = HEAP32[$1>>2]|0;
  $4 = (($3) + 4860|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = ($2|0)<($5|0);
  if (!($6)) {
   label = 6;
   break;
  }
  $7 = HEAP32[$sfb>>2]|0;
  $8 = HEAP32[$1>>2]|0;
  $9 = (($8) + 4608|0);
  $10 = (($9) + ($7<<2)|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = HEAP32[$sfb>>2]|0;
  $13 = HEAP32[$1>>2]|0;
  $14 = (($13) + 5028|0);
  $15 = (($14) + ($12<<2)|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = HEAP32[$1>>2]|0;
  $18 = (($17) + 4808|0);
  $19 = (($18) + ($16<<2)|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = (($11) + ($20))|0;
  $22 = ($21|0)==(0);
  if ($22) {
   label = 4;
   break;
  }
  $23 = HEAP32[$sfb>>2]|0;
  $24 = (($23) + 1)|0;
  HEAP32[$sfb>>2] = $24;
 }
 if ((label|0) == 4) {
  HEAP32[$0>>2] = 0;
  $25 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($25|0);
 }
 else if ((label|0) == 6) {
  HEAP32[$0>>2] = 1;
  $25 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($25|0);
 }
 return 0|0;
}
function _inc_scalefac_scale($cod_info,$xrpow) {
 $cod_info = $cod_info|0;
 $xrpow = $xrpow|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0.0, $44 = 0.0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0.0, $51 = 0, $52 = 0, $53 = 0.0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0.0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $8 = 0, $9 = 0, $ifqstep34 = 0, $j = 0, $l = 0;
 var $s = 0, $sfb = 0, $width = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = sp + 28|0;
 $1 = sp + 24|0;
 $l = sp + 20|0;
 $j = sp + 16|0;
 $sfb = sp + 12|0;
 $ifqstep34 = sp + 8|0;
 $width = sp + 4|0;
 $s = sp;
 HEAP32[$0>>2] = $cod_info;
 HEAP32[$1>>2] = $xrpow;
 HEAPF32[$ifqstep34>>2] = 1.29683959484100341797;
 HEAP32[$j>>2] = 0;
 HEAP32[$sfb>>2] = 0;
 while(1) {
  $2 = HEAP32[$sfb>>2]|0;
  $3 = HEAP32[$0>>2]|0;
  $4 = (($3) + 4860|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = ($2|0)<($5|0);
  if (!($6)) {
   break;
  }
  $7 = HEAP32[$sfb>>2]|0;
  $8 = HEAP32[$0>>2]|0;
  $9 = (($8) + 4872|0);
  $10 = (($9) + ($7<<2)|0);
  $11 = HEAP32[$10>>2]|0;
  HEAP32[$width>>2] = $11;
  $12 = HEAP32[$sfb>>2]|0;
  $13 = HEAP32[$0>>2]|0;
  $14 = (($13) + 4608|0);
  $15 = (($14) + ($12<<2)|0);
  $16 = HEAP32[$15>>2]|0;
  HEAP32[$s>>2] = $16;
  $17 = HEAP32[$0>>2]|0;
  $18 = (($17) + 4832|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = ($19|0)!=(0);
  if ($20) {
   $21 = HEAP32[$sfb>>2]|0;
   $22 = (21376 + ($21<<2)|0);
   $23 = HEAP32[$22>>2]|0;
   $24 = HEAP32[$s>>2]|0;
   $25 = (($24) + ($23))|0;
   HEAP32[$s>>2] = $25;
  }
  $26 = HEAP32[$width>>2]|0;
  $27 = HEAP32[$j>>2]|0;
  $28 = (($27) + ($26))|0;
  HEAP32[$j>>2] = $28;
  $29 = HEAP32[$s>>2]|0;
  $30 = $29 & 1;
  $31 = ($30|0)!=(0);
  L7: do {
   if ($31) {
    $32 = HEAP32[$s>>2]|0;
    $33 = (($32) + 1)|0;
    HEAP32[$s>>2] = $33;
    $34 = HEAP32[$width>>2]|0;
    $35 = (0 - ($34))|0;
    HEAP32[$l>>2] = $35;
    while(1) {
     $36 = HEAP32[$l>>2]|0;
     $37 = ($36|0)<(0);
     if (!($37)) {
      break L7;
     }
     $38 = HEAP32[$j>>2]|0;
     $39 = HEAP32[$l>>2]|0;
     $40 = (($38) + ($39))|0;
     $41 = HEAP32[$1>>2]|0;
     $42 = (($41) + ($40<<2)|0);
     $43 = +HEAPF32[$42>>2];
     $44 = $43 * 1.29683959484100341797;
     HEAPF32[$42>>2] = $44;
     $45 = HEAP32[$j>>2]|0;
     $46 = HEAP32[$l>>2]|0;
     $47 = (($45) + ($46))|0;
     $48 = HEAP32[$1>>2]|0;
     $49 = (($48) + ($47<<2)|0);
     $50 = +HEAPF32[$49>>2];
     $51 = HEAP32[$0>>2]|0;
     $52 = (($51) + 4764|0);
     $53 = +HEAPF32[$52>>2];
     $54 = $50 > $53;
     if ($54) {
      $55 = HEAP32[$j>>2]|0;
      $56 = HEAP32[$l>>2]|0;
      $57 = (($55) + ($56))|0;
      $58 = HEAP32[$1>>2]|0;
      $59 = (($58) + ($57<<2)|0);
      $60 = +HEAPF32[$59>>2];
      $61 = HEAP32[$0>>2]|0;
      $62 = (($61) + 4764|0);
      HEAPF32[$62>>2] = $60;
     }
     $63 = HEAP32[$l>>2]|0;
     $64 = (($63) + 1)|0;
     HEAP32[$l>>2] = $64;
    }
   }
  } while(0);
  $65 = HEAP32[$s>>2]|0;
  $66 = $65 >> 1;
  $67 = HEAP32[$sfb>>2]|0;
  $68 = HEAP32[$0>>2]|0;
  $69 = (($68) + 4608|0);
  $70 = (($69) + ($67<<2)|0);
  HEAP32[$70>>2] = $66;
  $71 = HEAP32[$sfb>>2]|0;
  $72 = (($71) + 1)|0;
  HEAP32[$sfb>>2] = $72;
 }
 $73 = HEAP32[$0>>2]|0;
 $74 = (($73) + 4832|0);
 HEAP32[$74>>2] = 0;
 $75 = HEAP32[$0>>2]|0;
 $76 = (($75) + 4836|0);
 HEAP32[$76>>2] = 1;
 STACKTOP = sp;return;
}
function _inc_subblock_gain($gfc,$cod_info,$xrpow) {
 $gfc = $gfc|0;
 $cod_info = $cod_info|0;
 $xrpow = $xrpow|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0.0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0.0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0.0, $147 = 0.0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0.0, $154 = 0, $155 = 0, $156 = 0.0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0.0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0.0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0.0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0.0, $203 = 0.0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0.0, $21 = 0, $210 = 0, $211 = 0, $212 = 0.0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0.0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $amp = 0, $amp1 = 0, $gain = 0, $j = 0, $l = 0, $s = 0, $s1 = 0, $s2 = 0, $scalefac = 0, $sfb = 0, $width = 0, $window = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $0 = sp + 60|0;
 $1 = sp + 56|0;
 $2 = sp + 52|0;
 $3 = sp + 48|0;
 $sfb = sp + 44|0;
 $window = sp + 40|0;
 $scalefac = sp + 36|0;
 $s1 = sp + 32|0;
 $s2 = sp + 28|0;
 $l = sp + 24|0;
 $j = sp + 20|0;
 $amp = sp + 16|0;
 $width = sp + 12|0;
 $s = sp + 8|0;
 $gain = sp + 4|0;
 $amp1 = sp;
 HEAP32[$1>>2] = $gfc;
 HEAP32[$2>>2] = $cod_info;
 HEAP32[$3>>2] = $xrpow;
 $4 = HEAP32[$2>>2]|0;
 $5 = (($4) + 4608|0);
 HEAP32[$scalefac>>2] = $5;
 HEAP32[$sfb>>2] = 0;
 while(1) {
  $6 = HEAP32[$sfb>>2]|0;
  $7 = HEAP32[$2>>2]|0;
  $8 = (($7) + 4848|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = ($6|0)<($9|0);
  if (!($10)) {
   break;
  }
  $11 = HEAP32[$sfb>>2]|0;
  $12 = HEAP32[$scalefac>>2]|0;
  $13 = (($12) + ($11<<2)|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = ($14|0)>=(16);
  if ($15) {
   label = 4;
   break;
  }
  $16 = HEAP32[$sfb>>2]|0;
  $17 = (($16) + 1)|0;
  HEAP32[$sfb>>2] = $17;
 }
 if ((label|0) == 4) {
  HEAP32[$0>>2] = 1;
  $226 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($226|0);
 }
 HEAP32[$window>>2] = 0;
 L9: while(1) {
  $18 = HEAP32[$window>>2]|0;
  $19 = ($18|0)<(3);
  if (!($19)) {
   label = 38;
   break;
  }
  HEAP32[$s2>>2] = 0;
  HEAP32[$s1>>2] = 0;
  $20 = HEAP32[$2>>2]|0;
  $21 = (($20) + 4848|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = HEAP32[$window>>2]|0;
  $24 = (($22) + ($23))|0;
  HEAP32[$sfb>>2] = $24;
  while(1) {
   $25 = HEAP32[$sfb>>2]|0;
   $26 = HEAP32[$2>>2]|0;
   $27 = (($26) + 4868|0);
   $28 = HEAP32[$27>>2]|0;
   $29 = ($25|0)<($28|0);
   if (!($29)) {
    break;
   }
   $30 = HEAP32[$s1>>2]|0;
   $31 = HEAP32[$sfb>>2]|0;
   $32 = HEAP32[$scalefac>>2]|0;
   $33 = (($32) + ($31<<2)|0);
   $34 = HEAP32[$33>>2]|0;
   $35 = ($30|0)<($34|0);
   if ($35) {
    $36 = HEAP32[$sfb>>2]|0;
    $37 = HEAP32[$scalefac>>2]|0;
    $38 = (($37) + ($36<<2)|0);
    $39 = HEAP32[$38>>2]|0;
    HEAP32[$s1>>2] = $39;
   }
   $40 = HEAP32[$sfb>>2]|0;
   $41 = (($40) + 3)|0;
   HEAP32[$sfb>>2] = $41;
  }
  while(1) {
   $42 = HEAP32[$sfb>>2]|0;
   $43 = HEAP32[$2>>2]|0;
   $44 = (($43) + 4860|0);
   $45 = HEAP32[$44>>2]|0;
   $46 = ($42|0)<($45|0);
   if (!($46)) {
    break;
   }
   $47 = HEAP32[$s2>>2]|0;
   $48 = HEAP32[$sfb>>2]|0;
   $49 = HEAP32[$scalefac>>2]|0;
   $50 = (($49) + ($48<<2)|0);
   $51 = HEAP32[$50>>2]|0;
   $52 = ($47|0)<($51|0);
   if ($52) {
    $53 = HEAP32[$sfb>>2]|0;
    $54 = HEAP32[$scalefac>>2]|0;
    $55 = (($54) + ($53<<2)|0);
    $56 = HEAP32[$55>>2]|0;
    HEAP32[$s2>>2] = $56;
   }
   $57 = HEAP32[$sfb>>2]|0;
   $58 = (($57) + 3)|0;
   HEAP32[$sfb>>2] = $58;
  }
  $59 = HEAP32[$s1>>2]|0;
  $60 = ($59|0)<(16);
  if ($60) {
   $61 = HEAP32[$s2>>2]|0;
   $62 = ($61|0)<(8);
   if (!($62)) {
    label = 19;
   }
  } else {
   label = 19;
  }
  L27: do {
   if ((label|0) == 19) {
    label = 0;
    $63 = HEAP32[$window>>2]|0;
    $64 = HEAP32[$2>>2]|0;
    $65 = (($64) + 4808|0);
    $66 = (($65) + ($63<<2)|0);
    $67 = HEAP32[$66>>2]|0;
    $68 = ($67|0)>=(7);
    if ($68) {
     label = 20;
     break L9;
    }
    $69 = HEAP32[$window>>2]|0;
    $70 = HEAP32[$2>>2]|0;
    $71 = (($70) + 4808|0);
    $72 = (($71) + ($69<<2)|0);
    $73 = HEAP32[$72>>2]|0;
    $74 = (($73) + 1)|0;
    HEAP32[$72>>2] = $74;
    $75 = HEAP32[$2>>2]|0;
    $76 = (($75) + 4848|0);
    $77 = HEAP32[$76>>2]|0;
    $78 = HEAP32[$1>>2]|0;
    $79 = (($78) + 21360|0);
    $80 = (($79) + ($77<<2)|0);
    $81 = HEAP32[$80>>2]|0;
    HEAP32[$j>>2] = $81;
    $82 = HEAP32[$2>>2]|0;
    $83 = (($82) + 4848|0);
    $84 = HEAP32[$83>>2]|0;
    $85 = HEAP32[$window>>2]|0;
    $86 = (($84) + ($85))|0;
    HEAP32[$sfb>>2] = $86;
    while(1) {
     $87 = HEAP32[$sfb>>2]|0;
     $88 = HEAP32[$2>>2]|0;
     $89 = (($88) + 4860|0);
     $90 = HEAP32[$89>>2]|0;
     $91 = ($87|0)<($90|0);
     if (!($91)) {
      break;
     }
     $92 = HEAP32[$sfb>>2]|0;
     $93 = HEAP32[$2>>2]|0;
     $94 = (($93) + 4872|0);
     $95 = (($94) + ($92<<2)|0);
     $96 = HEAP32[$95>>2]|0;
     HEAP32[$width>>2] = $96;
     $97 = HEAP32[$sfb>>2]|0;
     $98 = HEAP32[$scalefac>>2]|0;
     $99 = (($98) + ($97<<2)|0);
     $100 = HEAP32[$99>>2]|0;
     HEAP32[$s>>2] = $100;
     $101 = HEAP32[$s>>2]|0;
     $102 = HEAP32[$2>>2]|0;
     $103 = (($102) + 4836|0);
     $104 = HEAP32[$103>>2]|0;
     $105 = 4 >> $104;
     $106 = (($101) - ($105))|0;
     HEAP32[$s>>2] = $106;
     $107 = HEAP32[$s>>2]|0;
     $108 = ($107|0)>=(0);
     if ($108) {
      $109 = HEAP32[$s>>2]|0;
      $110 = HEAP32[$sfb>>2]|0;
      $111 = HEAP32[$scalefac>>2]|0;
      $112 = (($111) + ($110<<2)|0);
      HEAP32[$112>>2] = $109;
      $113 = HEAP32[$width>>2]|0;
      $114 = ($113*3)|0;
      $115 = HEAP32[$j>>2]|0;
      $116 = (($115) + ($114))|0;
      HEAP32[$j>>2] = $116;
     } else {
      $117 = HEAP32[$sfb>>2]|0;
      $118 = HEAP32[$scalefac>>2]|0;
      $119 = (($118) + ($117<<2)|0);
      HEAP32[$119>>2] = 0;
      $120 = HEAP32[$s>>2]|0;
      $121 = HEAP32[$2>>2]|0;
      $122 = (($121) + 4836|0);
      $123 = HEAP32[$122>>2]|0;
      $124 = (($123) + 1)|0;
      $125 = $120 << $124;
      $126 = (210 + ($125))|0;
      HEAP32[$gain>>2] = $126;
      $127 = HEAP32[$gain>>2]|0;
      $128 = (88968 + ($127<<2)|0);
      $129 = +HEAPF32[$128>>2];
      HEAPF32[$amp>>2] = $129;
      $130 = HEAP32[$width>>2]|0;
      $131 = HEAP32[$window>>2]|0;
      $132 = (($131) + 1)|0;
      $133 = Math_imul($130, $132)|0;
      $134 = HEAP32[$j>>2]|0;
      $135 = (($134) + ($133))|0;
      HEAP32[$j>>2] = $135;
      $136 = HEAP32[$width>>2]|0;
      $137 = (0 - ($136))|0;
      HEAP32[$l>>2] = $137;
      while(1) {
       $138 = HEAP32[$l>>2]|0;
       $139 = ($138|0)<(0);
       if (!($139)) {
        break;
       }
       $140 = +HEAPF32[$amp>>2];
       $141 = HEAP32[$j>>2]|0;
       $142 = HEAP32[$l>>2]|0;
       $143 = (($141) + ($142))|0;
       $144 = HEAP32[$3>>2]|0;
       $145 = (($144) + ($143<<2)|0);
       $146 = +HEAPF32[$145>>2];
       $147 = $146 * $140;
       HEAPF32[$145>>2] = $147;
       $148 = HEAP32[$j>>2]|0;
       $149 = HEAP32[$l>>2]|0;
       $150 = (($148) + ($149))|0;
       $151 = HEAP32[$3>>2]|0;
       $152 = (($151) + ($150<<2)|0);
       $153 = +HEAPF32[$152>>2];
       $154 = HEAP32[$2>>2]|0;
       $155 = (($154) + 4764|0);
       $156 = +HEAPF32[$155>>2];
       $157 = $153 > $156;
       if ($157) {
        $158 = HEAP32[$j>>2]|0;
        $159 = HEAP32[$l>>2]|0;
        $160 = (($158) + ($159))|0;
        $161 = HEAP32[$3>>2]|0;
        $162 = (($161) + ($160<<2)|0);
        $163 = +HEAPF32[$162>>2];
        $164 = HEAP32[$2>>2]|0;
        $165 = (($164) + 4764|0);
        HEAPF32[$165>>2] = $163;
       }
       $166 = HEAP32[$l>>2]|0;
       $167 = (($166) + 1)|0;
       HEAP32[$l>>2] = $167;
      }
      $168 = HEAP32[$width>>2]|0;
      $169 = HEAP32[$window>>2]|0;
      $170 = (3 - ($169))|0;
      $171 = (($170) - 1)|0;
      $172 = Math_imul($168, $171)|0;
      $173 = HEAP32[$j>>2]|0;
      $174 = (($173) + ($172))|0;
      HEAP32[$j>>2] = $174;
     }
     $175 = HEAP32[$sfb>>2]|0;
     $176 = (($175) + 3)|0;
     HEAP32[$sfb>>2] = $176;
    }
    $177 = +HEAPF32[((88968 + 808|0))>>2];
    HEAPF32[$amp1>>2] = $177;
    $178 = HEAP32[$sfb>>2]|0;
    $179 = HEAP32[$2>>2]|0;
    $180 = (($179) + 4872|0);
    $181 = (($180) + ($178<<2)|0);
    $182 = HEAP32[$181>>2]|0;
    $183 = HEAP32[$window>>2]|0;
    $184 = (($183) + 1)|0;
    $185 = Math_imul($182, $184)|0;
    $186 = HEAP32[$j>>2]|0;
    $187 = (($186) + ($185))|0;
    HEAP32[$j>>2] = $187;
    $188 = HEAP32[$sfb>>2]|0;
    $189 = HEAP32[$2>>2]|0;
    $190 = (($189) + 4872|0);
    $191 = (($190) + ($188<<2)|0);
    $192 = HEAP32[$191>>2]|0;
    $193 = (0 - ($192))|0;
    HEAP32[$l>>2] = $193;
    while(1) {
     $194 = HEAP32[$l>>2]|0;
     $195 = ($194|0)<(0);
     if (!($195)) {
      break L27;
     }
     $196 = +HEAPF32[$amp1>>2];
     $197 = HEAP32[$j>>2]|0;
     $198 = HEAP32[$l>>2]|0;
     $199 = (($197) + ($198))|0;
     $200 = HEAP32[$3>>2]|0;
     $201 = (($200) + ($199<<2)|0);
     $202 = +HEAPF32[$201>>2];
     $203 = $202 * $196;
     HEAPF32[$201>>2] = $203;
     $204 = HEAP32[$j>>2]|0;
     $205 = HEAP32[$l>>2]|0;
     $206 = (($204) + ($205))|0;
     $207 = HEAP32[$3>>2]|0;
     $208 = (($207) + ($206<<2)|0);
     $209 = +HEAPF32[$208>>2];
     $210 = HEAP32[$2>>2]|0;
     $211 = (($210) + 4764|0);
     $212 = +HEAPF32[$211>>2];
     $213 = $209 > $212;
     if ($213) {
      $214 = HEAP32[$j>>2]|0;
      $215 = HEAP32[$l>>2]|0;
      $216 = (($214) + ($215))|0;
      $217 = HEAP32[$3>>2]|0;
      $218 = (($217) + ($216<<2)|0);
      $219 = +HEAPF32[$218>>2];
      $220 = HEAP32[$2>>2]|0;
      $221 = (($220) + 4764|0);
      HEAPF32[$221>>2] = $219;
     }
     $222 = HEAP32[$l>>2]|0;
     $223 = (($222) + 1)|0;
     HEAP32[$l>>2] = $223;
    }
   }
  } while(0);
  $224 = HEAP32[$window>>2]|0;
  $225 = (($224) + 1)|0;
  HEAP32[$window>>2] = $225;
 }
 if ((label|0) == 20) {
  HEAP32[$0>>2] = 1;
  $226 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($226|0);
 }
 else if ((label|0) == 38) {
  HEAP32[$0>>2] = 0;
  $226 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($226|0);
 }
 return 0|0;
}
function _psfb21_analogsilence($gfc,$cod_info) {
 $gfc = $gfc|0;
 $cod_info = $cod_info|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0.0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0.0, $135 = 0, $136 = 0, $137 = 0.0, $138 = 0.0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0.0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0.0, $15 = 0, $150 = 0.0, $151 = 0.0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0.0, $161 = 0.0, $162 = 0.0, $163 = 0.0, $164 = 0.0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0.0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0.0, $36 = 0, $37 = 0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0.0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0.0, $49 = 0.0;
 var $5 = 0, $50 = 0.0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0.0, $6 = 0, $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0.0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $ATH = 0, $ath12 = 0, $ath21 = 0, $block = 0, $end = 0;
 var $end4 = 0, $gsfb = 0, $gsfb1 = 0, $j = 0, $j5 = 0, $start = 0, $start3 = 0, $stop = 0, $stop2 = 0, $xr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0;
 $0 = sp + 64|0;
 $1 = sp + 60|0;
 $ATH = sp + 56|0;
 $xr = sp + 52|0;
 $gsfb = sp + 48|0;
 $stop = sp + 44|0;
 $start = sp + 40|0;
 $end = sp + 36|0;
 $j = sp + 32|0;
 $ath21 = sp + 28|0;
 $block = sp + 24|0;
 $gsfb1 = sp + 20|0;
 $stop2 = sp + 16|0;
 $start3 = sp + 12|0;
 $end4 = sp + 8|0;
 $j5 = sp + 4|0;
 $ath12 = sp;
 HEAP32[$0>>2] = $gfc;
 HEAP32[$1>>2] = $cod_info;
 $2 = HEAP32[$0>>2]|0;
 $3 = (($2) + 85796|0);
 $4 = HEAP32[$3>>2]|0;
 HEAP32[$ATH>>2] = $4;
 $5 = HEAP32[$1>>2]|0;
 HEAP32[$xr>>2] = $5;
 $6 = HEAP32[$1>>2]|0;
 $7 = (($6) + 4788|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)!=(2);
 if ($9) {
  HEAP32[$stop>>2] = 0;
  HEAP32[$gsfb>>2] = 5;
  while(1) {
   $10 = HEAP32[$gsfb>>2]|0;
   $11 = ($10|0)>=(0);
   if (!($11)) {
    label = 27;
    break;
   }
   $12 = HEAP32[$stop>>2]|0;
   $13 = ($12|0)!=(0);
   $14 = $13 ^ 1;
   if (!($14)) {
    label = 27;
    break;
   }
   $15 = HEAP32[$gsfb>>2]|0;
   $16 = HEAP32[$0>>2]|0;
   $17 = (($16) + 21360|0);
   $18 = (($17) + 148|0);
   $19 = (($18) + ($15<<2)|0);
   $20 = HEAP32[$19>>2]|0;
   HEAP32[$start>>2] = $20;
   $21 = HEAP32[$gsfb>>2]|0;
   $22 = (($21) + 1)|0;
   $23 = HEAP32[$0>>2]|0;
   $24 = (($23) + 21360|0);
   $25 = (($24) + 148|0);
   $26 = (($25) + ($22<<2)|0);
   $27 = HEAP32[$26>>2]|0;
   HEAP32[$end>>2] = $27;
   $28 = HEAP32[$ATH>>2]|0;
   $29 = (($28) + 8|0);
   $30 = +HEAPF32[$29>>2];
   $31 = HEAP32[$gsfb>>2]|0;
   $32 = HEAP32[$ATH>>2]|0;
   $33 = (($32) + 164|0);
   $34 = (($33) + ($31<<2)|0);
   $35 = +HEAPF32[$34>>2];
   $36 = HEAP32[$ATH>>2]|0;
   $37 = (($36) + 20|0);
   $38 = +HEAPF32[$37>>2];
   $39 = (+_athAdjust($30,$35,$38,0.0));
   HEAPF32[$ath21>>2] = $39;
   $40 = HEAP32[$0>>2]|0;
   $41 = (($40) + 84768|0);
   $42 = (($41) + 84|0);
   $43 = +HEAPF32[$42>>2];
   $44 = $43 > 9.9999999600419720025E-13;
   if ($44) {
    $45 = HEAP32[$0>>2]|0;
    $46 = (($45) + 84768|0);
    $47 = (($46) + 84|0);
    $48 = +HEAPF32[$47>>2];
    $49 = +HEAPF32[$ath21>>2];
    $50 = $49 * $48;
    HEAPF32[$ath21>>2] = $50;
   }
   $51 = HEAP32[$end>>2]|0;
   $52 = (($51) - 1)|0;
   HEAP32[$j>>2] = $52;
   while(1) {
    $53 = HEAP32[$j>>2]|0;
    $54 = HEAP32[$start>>2]|0;
    $55 = ($53|0)>=($54|0);
    if (!($55)) {
     break;
    }
    $56 = HEAP32[$j>>2]|0;
    $57 = HEAP32[$xr>>2]|0;
    $58 = (($57) + ($56<<2)|0);
    $59 = +HEAPF32[$58>>2];
    $60 = $59;
    $61 = (+Math_abs((+$60)));
    $62 = +HEAPF32[$ath21>>2];
    $63 = $62;
    $64 = $61 < $63;
    if (!($64)) {
     label = 11;
     break;
    }
    $65 = HEAP32[$j>>2]|0;
    $66 = HEAP32[$xr>>2]|0;
    $67 = (($66) + ($65<<2)|0);
    HEAPF32[$67>>2] = 0.0;
    $68 = HEAP32[$j>>2]|0;
    $69 = (($68) + -1)|0;
    HEAP32[$j>>2] = $69;
   }
   if ((label|0) == 11) {
    label = 0;
    HEAP32[$stop>>2] = 1;
   }
   $70 = HEAP32[$gsfb>>2]|0;
   $71 = (($70) + -1)|0;
   HEAP32[$gsfb>>2] = $71;
  }
  if ((label|0) == 27) {
   STACKTOP = sp;return;
  }
 }
 HEAP32[$block>>2] = 0;
 while(1) {
  $72 = HEAP32[$block>>2]|0;
  $73 = ($72|0)<(3);
  if (!($73)) {
   break;
  }
  HEAP32[$stop2>>2] = 0;
  HEAP32[$gsfb1>>2] = 5;
  while(1) {
   $74 = HEAP32[$gsfb1>>2]|0;
   $75 = ($74|0)>=(0);
   if (!($75)) {
    break;
   }
   $76 = HEAP32[$stop2>>2]|0;
   $77 = ($76|0)!=(0);
   $78 = $77 ^ 1;
   if (!($78)) {
    break;
   }
   $79 = HEAP32[$0>>2]|0;
   $80 = (($79) + 21360|0);
   $81 = (($80) + 92|0);
   $82 = (($81) + 48|0);
   $83 = HEAP32[$82>>2]|0;
   $84 = ($83*3)|0;
   $85 = HEAP32[$0>>2]|0;
   $86 = (($85) + 21360|0);
   $87 = (($86) + 92|0);
   $88 = (($87) + 52|0);
   $89 = HEAP32[$88>>2]|0;
   $90 = HEAP32[$0>>2]|0;
   $91 = (($90) + 21360|0);
   $92 = (($91) + 92|0);
   $93 = (($92) + 48|0);
   $94 = HEAP32[$93>>2]|0;
   $95 = (($89) - ($94))|0;
   $96 = HEAP32[$block>>2]|0;
   $97 = Math_imul($95, $96)|0;
   $98 = (($84) + ($97))|0;
   $99 = HEAP32[$gsfb1>>2]|0;
   $100 = HEAP32[$0>>2]|0;
   $101 = (($100) + 21360|0);
   $102 = (($101) + 176|0);
   $103 = (($102) + ($99<<2)|0);
   $104 = HEAP32[$103>>2]|0;
   $105 = HEAP32[$0>>2]|0;
   $106 = (($105) + 21360|0);
   $107 = (($106) + 176|0);
   $108 = HEAP32[$107>>2]|0;
   $109 = (($104) - ($108))|0;
   $110 = (($98) + ($109))|0;
   HEAP32[$start3>>2] = $110;
   $111 = HEAP32[$start3>>2]|0;
   $112 = HEAP32[$gsfb1>>2]|0;
   $113 = (($112) + 1)|0;
   $114 = HEAP32[$0>>2]|0;
   $115 = (($114) + 21360|0);
   $116 = (($115) + 176|0);
   $117 = (($116) + ($113<<2)|0);
   $118 = HEAP32[$117>>2]|0;
   $119 = HEAP32[$gsfb1>>2]|0;
   $120 = HEAP32[$0>>2]|0;
   $121 = (($120) + 21360|0);
   $122 = (($121) + 176|0);
   $123 = (($122) + ($119<<2)|0);
   $124 = HEAP32[$123>>2]|0;
   $125 = (($118) - ($124))|0;
   $126 = (($111) + ($125))|0;
   HEAP32[$end4>>2] = $126;
   $127 = HEAP32[$ATH>>2]|0;
   $128 = (($127) + 8|0);
   $129 = +HEAPF32[$128>>2];
   $130 = HEAP32[$gsfb1>>2]|0;
   $131 = HEAP32[$ATH>>2]|0;
   $132 = (($131) + 188|0);
   $133 = (($132) + ($130<<2)|0);
   $134 = +HEAPF32[$133>>2];
   $135 = HEAP32[$ATH>>2]|0;
   $136 = (($135) + 20|0);
   $137 = +HEAPF32[$136>>2];
   $138 = (+_athAdjust($129,$134,$137,0.0));
   HEAPF32[$ath12>>2] = $138;
   $139 = HEAP32[$0>>2]|0;
   $140 = (($139) + 84768|0);
   $141 = (($140) + 88|0);
   $142 = (($141) + 48|0);
   $143 = +HEAPF32[$142>>2];
   $144 = $143 > 9.9999999600419720025E-13;
   if ($144) {
    $145 = HEAP32[$0>>2]|0;
    $146 = (($145) + 84768|0);
    $147 = (($146) + 88|0);
    $148 = (($147) + 48|0);
    $149 = +HEAPF32[$148>>2];
    $150 = +HEAPF32[$ath12>>2];
    $151 = $150 * $149;
    HEAPF32[$ath12>>2] = $151;
   }
   $152 = HEAP32[$end4>>2]|0;
   $153 = (($152) - 1)|0;
   HEAP32[$j5>>2] = $153;
   while(1) {
    $154 = HEAP32[$j5>>2]|0;
    $155 = HEAP32[$start3>>2]|0;
    $156 = ($154|0)>=($155|0);
    if (!($156)) {
     break;
    }
    $157 = HEAP32[$j5>>2]|0;
    $158 = HEAP32[$xr>>2]|0;
    $159 = (($158) + ($157<<2)|0);
    $160 = +HEAPF32[$159>>2];
    $161 = $160;
    $162 = (+Math_abs((+$161)));
    $163 = +HEAPF32[$ath12>>2];
    $164 = $163;
    $165 = $162 < $164;
    if (!($165)) {
     label = 24;
     break;
    }
    $166 = HEAP32[$j5>>2]|0;
    $167 = HEAP32[$xr>>2]|0;
    $168 = (($167) + ($166<<2)|0);
    HEAPF32[$168>>2] = 0.0;
    $169 = HEAP32[$j5>>2]|0;
    $170 = (($169) + -1)|0;
    HEAP32[$j5>>2] = $170;
   }
   if ((label|0) == 24) {
    label = 0;
    HEAP32[$stop2>>2] = 1;
   }
   $171 = HEAP32[$gsfb1>>2]|0;
   $172 = (($171) + -1)|0;
   HEAP32[$gsfb1>>2] = $172;
  }
  $173 = HEAP32[$block>>2]|0;
  $174 = (($173) + 1)|0;
  HEAP32[$block>>2] = $174;
 }
 STACKTOP = sp;return;
}
function _get_framebits($gfc,$frameBits) {
 $gfc = $gfc|0;
 $frameBits = $frameBits|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $bitsPerFrame = 0, $cfg = 0, $eov = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = sp + 20|0;
 $1 = sp + 16|0;
 $cfg = sp + 12|0;
 $eov = sp + 8|0;
 $bitsPerFrame = sp + 4|0;
 $i = sp;
 HEAP32[$0>>2] = $gfc;
 HEAP32[$1>>2] = $frameBits;
 $2 = HEAP32[$0>>2]|0;
 $3 = (($2) + 16|0);
 HEAP32[$cfg>>2] = $3;
 $4 = HEAP32[$0>>2]|0;
 $5 = (($4) + 84040|0);
 HEAP32[$eov>>2] = $5;
 $6 = HEAP32[$cfg>>2]|0;
 $7 = (($6) + 96|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = HEAP32[$eov>>2]|0;
 $10 = (($9) + 704|0);
 HEAP32[$10>>2] = $8;
 $11 = HEAP32[$0>>2]|0;
 $12 = (_getframebits($11)|0);
 HEAP32[$bitsPerFrame>>2] = $12;
 $13 = HEAP32[$eov>>2]|0;
 $14 = (($13) + 704|0);
 HEAP32[$14>>2] = 1;
 $15 = HEAP32[$0>>2]|0;
 $16 = (_getframebits($15)|0);
 HEAP32[$bitsPerFrame>>2] = $16;
 HEAP32[$i>>2] = 1;
 while(1) {
  $17 = HEAP32[$i>>2]|0;
  $18 = HEAP32[$cfg>>2]|0;
  $19 = (($18) + 100|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = ($17|0)<=($20|0);
  if (!($21)) {
   break;
  }
  $22 = HEAP32[$i>>2]|0;
  $23 = HEAP32[$eov>>2]|0;
  $24 = (($23) + 704|0);
  HEAP32[$24>>2] = $22;
  $25 = HEAP32[$0>>2]|0;
  $26 = (_ResvFrameBegin($25,$bitsPerFrame)|0);
  $27 = HEAP32[$i>>2]|0;
  $28 = HEAP32[$1>>2]|0;
  $29 = (($28) + ($27<<2)|0);
  HEAP32[$29>>2] = $26;
  $30 = HEAP32[$i>>2]|0;
  $31 = (($30) + 1)|0;
  HEAP32[$i>>2] = $31;
 }
 STACKTOP = sp;return;
}
function _floatcompare($v1,$v2) {
 $v1 = $v1|0;
 $v2 = $v2|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0.0, $12 = 0, $13 = 0.0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0, $8 = 0.0, $9 = 0, $a = 0, $b = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = sp + 16|0;
 $1 = sp + 12|0;
 $2 = sp + 8|0;
 $a = sp + 4|0;
 $b = sp;
 HEAP32[$1>>2] = $v1;
 HEAP32[$2>>2] = $v2;
 $3 = HEAP32[$1>>2]|0;
 HEAP32[$a>>2] = $3;
 $4 = HEAP32[$2>>2]|0;
 HEAP32[$b>>2] = $4;
 $5 = HEAP32[$a>>2]|0;
 $6 = +HEAPF32[$5>>2];
 $7 = HEAP32[$b>>2]|0;
 $8 = +HEAPF32[$7>>2];
 $9 = $6 > $8;
 do {
  if ($9) {
   HEAP32[$0>>2] = 1;
  } else {
   $10 = HEAP32[$a>>2]|0;
   $11 = +HEAPF32[$10>>2];
   $12 = HEAP32[$b>>2]|0;
   $13 = +HEAPF32[$12>>2];
   $14 = $11 < $13;
   if ($14) {
    HEAP32[$0>>2] = -1;
    break;
   } else {
    HEAP32[$0>>2] = 0;
    break;
   }
  }
 } while(0);
 $15 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($15|0);
}
function _iteration_init($gfc) {
 $gfc = $gfc|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0.0, $101 = 0.0, $102 = 0.0, $103 = 0.0, $104 = 0, $105 = 0, $106 = 0.0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0.0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0.0, $12 = 0, $120 = 0.0, $121 = 0.0, $122 = 0.0, $123 = 0.0, $124 = 0, $125 = 0, $126 = 0.0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0.0, $136 = 0, $137 = 0, $138 = 0, $139 = 0.0, $14 = 0, $140 = 0.0, $141 = 0.0, $142 = 0.0, $143 = 0.0, $144 = 0, $145 = 0, $146 = 0.0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0.0, $156 = 0, $157 = 0, $158 = 0.0, $159 = 0.0, $16 = 0, $160 = 0.0, $161 = 0.0, $162 = 0.0, $163 = 0, $164 = 0, $165 = 0.0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0.0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0.0, $176 = 0, $177 = 0, $178 = 0, $179 = 0.0, $18 = 0.0, $180 = 0.0, $181 = 0.0, $182 = 0.0, $183 = 0.0, $184 = 0, $185 = 0, $186 = 0.0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0.0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0.0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0.0, $200 = 0.0, $201 = 0.0, $202 = 0.0, $203 = 0.0, $204 = 0.0, $205 = 0;
 var $206 = 0, $207 = 0.0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0.0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0.0, $222 = 0.0, $223 = 0.0;
 var $224 = 0.0, $225 = 0.0, $226 = 0, $227 = 0, $228 = 0.0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0.0, $29 = 0.0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0.0, $34 = 0, $35 = 0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0.0, $65 = 0.0, $66 = 0.0;
 var $67 = 0.0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0.0, $77 = 0, $78 = 0, $79 = 0.0, $8 = 0, $80 = 0.0, $81 = 0.0, $82 = 0.0, $83 = 0.0, $84 = 0;
 var $85 = 0, $86 = 0.0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0.0, $96 = 0, $97 = 0, $98 = 0, $99 = 0.0, $adjust = 0, $cfg = 0, $db = 0, $i = 0;
 var $l3_side = 0, $sel = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = sp + 24|0;
 $cfg = sp + 20|0;
 $l3_side = sp + 16|0;
 $adjust = sp + 12|0;
 $db = sp + 8|0;
 $i = sp + 4|0;
 $sel = sp;
 HEAP32[$0>>2] = $gfc;
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 16|0);
 HEAP32[$cfg>>2] = $2;
 $3 = HEAP32[$0>>2]|0;
 $4 = (($3) + 304|0);
 HEAP32[$l3_side>>2] = $4;
 $5 = HEAP32[$0>>2]|0;
 $6 = (($5) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)==(0);
 if (!($8)) {
  STACKTOP = sp;return;
 }
 $9 = HEAP32[$0>>2]|0;
 $10 = (($9) + 8|0);
 HEAP32[$10>>2] = 1;
 $11 = HEAP32[$l3_side>>2]|0;
 $12 = (($11) + 21008|0);
 HEAP32[$12>>2] = 0;
 $13 = HEAP32[$0>>2]|0;
 _compute_ath($13);
 HEAPF32[23304>>2] = 0.0;
 HEAP32[$i>>2] = 1;
 while(1) {
  $14 = HEAP32[$i>>2]|0;
  $15 = ($14|0)<(8208);
  if (!($15)) {
   break;
  }
  $16 = HEAP32[$i>>2]|0;
  $17 = (+($16|0));
  $18 = $17;
  $19 = (+Math_pow((+$18),1.33333333333333325932));
  $20 = $19;
  $21 = HEAP32[$i>>2]|0;
  $22 = (23304 + ($21<<2)|0);
  HEAPF32[$22>>2] = $20;
  $23 = HEAP32[$i>>2]|0;
  $24 = (($23) + 1)|0;
  HEAP32[$i>>2] = $24;
 }
 HEAPF32[56136>>2] = 0.0;
 HEAP32[$i>>2] = 1;
 while(1) {
  $25 = HEAP32[$i>>2]|0;
  $26 = ($25|0)<(8208);
  if (!($26)) {
   break;
  }
  $27 = HEAP32[$i>>2]|0;
  $28 = (+($27|0));
  $29 = $28 - 0.5;
  $30 = HEAP32[$i>>2]|0;
  $31 = (($30) - 1)|0;
  $32 = (23304 + ($31<<2)|0);
  $33 = +HEAPF32[$32>>2];
  $34 = HEAP32[$i>>2]|0;
  $35 = (23304 + ($34<<2)|0);
  $36 = +HEAPF32[$35>>2];
  $37 = $33 + $36;
  $38 = $37;
  $39 = 0.5 * $38;
  $40 = (+Math_pow((+$39),0.75));
  $41 = $29 - $40;
  $42 = $41;
  $43 = HEAP32[$i>>2]|0;
  $44 = (56136 + ($43<<2)|0);
  HEAPF32[$44>>2] = $42;
  $45 = HEAP32[$i>>2]|0;
  $46 = (($45) + 1)|0;
  HEAP32[$i>>2] = $46;
 }
 HEAP32[$i>>2] = 0;
 while(1) {
  $47 = HEAP32[$i>>2]|0;
  $48 = ($47|0)<(257);
  if (!($48)) {
   break;
  }
  $49 = HEAP32[$i>>2]|0;
  $50 = (($49) - 210)|0;
  $51 = (+($50|0));
  $52 = $51 * -0.1875;
  $53 = (+Math_pow(2.0,(+$52)));
  $54 = $53;
  $55 = HEAP32[$i>>2]|0;
  $56 = (88968 + ($55<<2)|0);
  HEAPF32[$56>>2] = $54;
  $57 = HEAP32[$i>>2]|0;
  $58 = (($57) + 1)|0;
  HEAP32[$i>>2] = $58;
 }
 HEAP32[$i>>2] = 0;
 while(1) {
  $59 = HEAP32[$i>>2]|0;
  $60 = ($59|0)<=(373);
  if (!($60)) {
   break;
  }
  $61 = HEAP32[$i>>2]|0;
  $62 = (($61) - 210)|0;
  $63 = (($62) - 116)|0;
  $64 = (+($63|0));
  $65 = $64 * 0.25;
  $66 = (+Math_pow(2.0,(+$65)));
  $67 = $66;
  $68 = HEAP32[$i>>2]|0;
  $69 = (90000 + ($68<<2)|0);
  HEAPF32[$69>>2] = $67;
  $70 = HEAP32[$i>>2]|0;
  $71 = (($70) + 1)|0;
  HEAP32[$i>>2] = $71;
 }
 $72 = HEAP32[$0>>2]|0;
 _huffman_init($72);
 $73 = HEAP32[$0>>2]|0;
 _init_xrpow_core_init($73);
 HEAP32[$sel>>2] = 1;
 $74 = HEAP32[$cfg>>2]|0;
 $75 = (($74) + 216|0);
 $76 = +HEAPF32[$75>>2];
 $77 = HEAP32[$sel>>2]|0;
 $78 = (91496 + ($77<<4)|0);
 $79 = +HEAPF32[$78>>2];
 $80 = $76 + $79;
 HEAPF32[$db>>2] = $80;
 $81 = +HEAPF32[$db>>2];
 $82 = $81 * 0.100000001490116119385;
 $83 = (+Math_pow(10.0,(+$82)));
 HEAPF32[$adjust>>2] = $83;
 HEAP32[$i>>2] = 0;
 while(1) {
  $84 = HEAP32[$i>>2]|0;
  $85 = ($84|0)<=(6);
  if (!($85)) {
   break;
  }
  $86 = +HEAPF32[$adjust>>2];
  $87 = HEAP32[$i>>2]|0;
  $88 = HEAP32[$0>>2]|0;
  $89 = (($88) + 84768|0);
  $90 = (($89) + ($87<<2)|0);
  HEAPF32[$90>>2] = $86;
  $91 = HEAP32[$i>>2]|0;
  $92 = (($91) + 1)|0;
  HEAP32[$i>>2] = $92;
 }
 $93 = HEAP32[$cfg>>2]|0;
 $94 = (($93) + 212|0);
 $95 = +HEAPF32[$94>>2];
 $96 = HEAP32[$sel>>2]|0;
 $97 = (91496 + ($96<<4)|0);
 $98 = (($97) + 4|0);
 $99 = +HEAPF32[$98>>2];
 $100 = $95 + $99;
 HEAPF32[$db>>2] = $100;
 $101 = +HEAPF32[$db>>2];
 $102 = $101 * 0.100000001490116119385;
 $103 = (+Math_pow(10.0,(+$102)));
 HEAPF32[$adjust>>2] = $103;
 while(1) {
  $104 = HEAP32[$i>>2]|0;
  $105 = ($104|0)<=(13);
  if (!($105)) {
   break;
  }
  $106 = +HEAPF32[$adjust>>2];
  $107 = HEAP32[$i>>2]|0;
  $108 = HEAP32[$0>>2]|0;
  $109 = (($108) + 84768|0);
  $110 = (($109) + ($107<<2)|0);
  HEAPF32[$110>>2] = $106;
  $111 = HEAP32[$i>>2]|0;
  $112 = (($111) + 1)|0;
  HEAP32[$i>>2] = $112;
 }
 $113 = HEAP32[$cfg>>2]|0;
 $114 = (($113) + 220|0);
 $115 = +HEAPF32[$114>>2];
 $116 = HEAP32[$sel>>2]|0;
 $117 = (91496 + ($116<<4)|0);
 $118 = (($117) + 8|0);
 $119 = +HEAPF32[$118>>2];
 $120 = $115 + $119;
 HEAPF32[$db>>2] = $120;
 $121 = +HEAPF32[$db>>2];
 $122 = $121 * 0.100000001490116119385;
 $123 = (+Math_pow(10.0,(+$122)));
 HEAPF32[$adjust>>2] = $123;
 while(1) {
  $124 = HEAP32[$i>>2]|0;
  $125 = ($124|0)<=(20);
  if (!($125)) {
   break;
  }
  $126 = +HEAPF32[$adjust>>2];
  $127 = HEAP32[$i>>2]|0;
  $128 = HEAP32[$0>>2]|0;
  $129 = (($128) + 84768|0);
  $130 = (($129) + ($127<<2)|0);
  HEAPF32[$130>>2] = $126;
  $131 = HEAP32[$i>>2]|0;
  $132 = (($131) + 1)|0;
  HEAP32[$i>>2] = $132;
 }
 $133 = HEAP32[$cfg>>2]|0;
 $134 = (($133) + 224|0);
 $135 = +HEAPF32[$134>>2];
 $136 = HEAP32[$sel>>2]|0;
 $137 = (91496 + ($136<<4)|0);
 $138 = (($137) + 12|0);
 $139 = +HEAPF32[$138>>2];
 $140 = $135 + $139;
 HEAPF32[$db>>2] = $140;
 $141 = +HEAPF32[$db>>2];
 $142 = $141 * 0.100000001490116119385;
 $143 = (+Math_pow(10.0,(+$142)));
 HEAPF32[$adjust>>2] = $143;
 while(1) {
  $144 = HEAP32[$i>>2]|0;
  $145 = ($144|0)<(22);
  if (!($145)) {
   break;
  }
  $146 = +HEAPF32[$adjust>>2];
  $147 = HEAP32[$i>>2]|0;
  $148 = HEAP32[$0>>2]|0;
  $149 = (($148) + 84768|0);
  $150 = (($149) + ($147<<2)|0);
  HEAPF32[$150>>2] = $146;
  $151 = HEAP32[$i>>2]|0;
  $152 = (($151) + 1)|0;
  HEAP32[$i>>2] = $152;
 }
 $153 = HEAP32[$cfg>>2]|0;
 $154 = (($153) + 216|0);
 $155 = +HEAPF32[$154>>2];
 $156 = HEAP32[$sel>>2]|0;
 $157 = (91528 + ($156<<4)|0);
 $158 = +HEAPF32[$157>>2];
 $159 = $155 + $158;
 HEAPF32[$db>>2] = $159;
 $160 = +HEAPF32[$db>>2];
 $161 = $160 * 0.100000001490116119385;
 $162 = (+Math_pow(10.0,(+$161)));
 HEAPF32[$adjust>>2] = $162;
 HEAP32[$i>>2] = 0;
 while(1) {
  $163 = HEAP32[$i>>2]|0;
  $164 = ($163|0)<=(2);
  if (!($164)) {
   break;
  }
  $165 = +HEAPF32[$adjust>>2];
  $166 = HEAP32[$i>>2]|0;
  $167 = HEAP32[$0>>2]|0;
  $168 = (($167) + 84768|0);
  $169 = (($168) + 88|0);
  $170 = (($169) + ($166<<2)|0);
  HEAPF32[$170>>2] = $165;
  $171 = HEAP32[$i>>2]|0;
  $172 = (($171) + 1)|0;
  HEAP32[$i>>2] = $172;
 }
 $173 = HEAP32[$cfg>>2]|0;
 $174 = (($173) + 212|0);
 $175 = +HEAPF32[$174>>2];
 $176 = HEAP32[$sel>>2]|0;
 $177 = (91528 + ($176<<4)|0);
 $178 = (($177) + 4|0);
 $179 = +HEAPF32[$178>>2];
 $180 = $175 + $179;
 HEAPF32[$db>>2] = $180;
 $181 = +HEAPF32[$db>>2];
 $182 = $181 * 0.100000001490116119385;
 $183 = (+Math_pow(10.0,(+$182)));
 HEAPF32[$adjust>>2] = $183;
 while(1) {
  $184 = HEAP32[$i>>2]|0;
  $185 = ($184|0)<=(6);
  if (!($185)) {
   break;
  }
  $186 = +HEAPF32[$adjust>>2];
  $187 = HEAP32[$i>>2]|0;
  $188 = HEAP32[$0>>2]|0;
  $189 = (($188) + 84768|0);
  $190 = (($189) + 88|0);
  $191 = (($190) + ($187<<2)|0);
  HEAPF32[$191>>2] = $186;
  $192 = HEAP32[$i>>2]|0;
  $193 = (($192) + 1)|0;
  HEAP32[$i>>2] = $193;
 }
 $194 = HEAP32[$cfg>>2]|0;
 $195 = (($194) + 220|0);
 $196 = +HEAPF32[$195>>2];
 $197 = HEAP32[$sel>>2]|0;
 $198 = (91528 + ($197<<4)|0);
 $199 = (($198) + 8|0);
 $200 = +HEAPF32[$199>>2];
 $201 = $196 + $200;
 HEAPF32[$db>>2] = $201;
 $202 = +HEAPF32[$db>>2];
 $203 = $202 * 0.100000001490116119385;
 $204 = (+Math_pow(10.0,(+$203)));
 HEAPF32[$adjust>>2] = $204;
 while(1) {
  $205 = HEAP32[$i>>2]|0;
  $206 = ($205|0)<=(11);
  if (!($206)) {
   break;
  }
  $207 = +HEAPF32[$adjust>>2];
  $208 = HEAP32[$i>>2]|0;
  $209 = HEAP32[$0>>2]|0;
  $210 = (($209) + 84768|0);
  $211 = (($210) + 88|0);
  $212 = (($211) + ($208<<2)|0);
  HEAPF32[$212>>2] = $207;
  $213 = HEAP32[$i>>2]|0;
  $214 = (($213) + 1)|0;
  HEAP32[$i>>2] = $214;
 }
 $215 = HEAP32[$cfg>>2]|0;
 $216 = (($215) + 224|0);
 $217 = +HEAPF32[$216>>2];
 $218 = HEAP32[$sel>>2]|0;
 $219 = (91528 + ($218<<4)|0);
 $220 = (($219) + 12|0);
 $221 = +HEAPF32[$220>>2];
 $222 = $217 + $221;
 HEAPF32[$db>>2] = $222;
 $223 = +HEAPF32[$db>>2];
 $224 = $223 * 0.100000001490116119385;
 $225 = (+Math_pow(10.0,(+$224)));
 HEAPF32[$adjust>>2] = $225;
 while(1) {
  $226 = HEAP32[$i>>2]|0;
  $227 = ($226|0)<(13);
  if (!($227)) {
   break;
  }
  $228 = +HEAPF32[$adjust>>2];
  $229 = HEAP32[$i>>2]|0;
  $230 = HEAP32[$0>>2]|0;
  $231 = (($230) + 84768|0);
  $232 = (($231) + 88|0);
  $233 = (($232) + ($229<<2)|0);
  HEAPF32[$233>>2] = $228;
  $234 = HEAP32[$i>>2]|0;
  $235 = (($234) + 1)|0;
  HEAP32[$i>>2] = $235;
 }
 STACKTOP = sp;return;
}
function _compute_ath($gfc) {
 $gfc = $gfc|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0.0, $104 = 0.0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0.0, $11 = 0, $110 = 0.0, $111 = 0, $112 = 0, $113 = 0, $114 = 0.0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0.0, $143 = 0.0, $144 = 0.0, $145 = 0.0, $146 = 0, $147 = 0.0, $148 = 0.0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0.0, $153 = 0.0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0.0, $159 = 0.0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0.0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0.0, $181 = 0, $182 = 0, $183 = 0, $184 = 0.0, $185 = 0.0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0.0, $212 = 0.0, $213 = 0.0, $214 = 0.0, $215 = 0, $216 = 0.0, $217 = 0.0, $218 = 0, $219 = 0, $22 = 0.0, $220 = 0, $221 = 0.0, $222 = 0.0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0.0, $228 = 0.0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0.0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0.0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0.0, $251 = 0.0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0.0, $288 = 0.0, $289 = 0.0, $29 = 0, $290 = 0.0, $291 = 0.0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0;
 var $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0, $52 = 0, $53 = 0, $54 = 0.0, $55 = 0.0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0.0, $61 = 0.0, $62 = 0, $63 = 0, $64 = 0, $65 = 0.0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0.0, $94 = 0.0, $95 = 0.0, $96 = 0.0, $97 = 0, $98 = 0.0, $99 = 0.0, $ATH_f = 0, $ATH_l = 0, $ATH_psfb12 = 0, $ATH_psfb21 = 0;
 var $ATH_s = 0, $cfg = 0, $end = 0, $freq = 0, $freq1 = 0, $freq2 = 0, $freq3 = 0, $i = 0, $samp_freq = 0, $sfb = 0, $start = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $0 = sp + 60|0;
 $cfg = sp + 56|0;
 $ATH_l = sp + 52|0;
 $ATH_psfb21 = sp + 48|0;
 $ATH_s = sp + 44|0;
 $ATH_psfb12 = sp + 40|0;
 $sfb = sp + 36|0;
 $i = sp + 32|0;
 $start = sp + 28|0;
 $end = sp + 24|0;
 $ATH_f = sp + 20|0;
 $samp_freq = sp + 16|0;
 $freq = sp + 12|0;
 $freq1 = sp + 8|0;
 $freq2 = sp + 4|0;
 $freq3 = sp;
 HEAP32[$0>>2] = $gfc;
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 16|0);
 HEAP32[$cfg>>2] = $2;
 $3 = HEAP32[$0>>2]|0;
 $4 = (($3) + 85796|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($5) + 24|0);
 HEAP32[$ATH_l>>2] = $6;
 $7 = HEAP32[$0>>2]|0;
 $8 = (($7) + 85796|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (($9) + 164|0);
 HEAP32[$ATH_psfb21>>2] = $10;
 $11 = HEAP32[$0>>2]|0;
 $12 = (($11) + 85796|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = (($13) + 112|0);
 HEAP32[$ATH_s>>2] = $14;
 $15 = HEAP32[$0>>2]|0;
 $16 = (($15) + 85796|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = (($17) + 188|0);
 HEAP32[$ATH_psfb12>>2] = $18;
 $19 = HEAP32[$cfg>>2]|0;
 $20 = (($19) + 48|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = (+($21|0));
 HEAPF32[$samp_freq>>2] = $22;
 HEAP32[$sfb>>2] = 0;
 while(1) {
  $23 = HEAP32[$sfb>>2]|0;
  $24 = ($23|0)<(22);
  if (!($24)) {
   break;
  }
  $25 = HEAP32[$sfb>>2]|0;
  $26 = HEAP32[$0>>2]|0;
  $27 = (($26) + 21360|0);
  $28 = (($27) + ($25<<2)|0);
  $29 = HEAP32[$28>>2]|0;
  HEAP32[$start>>2] = $29;
  $30 = HEAP32[$sfb>>2]|0;
  $31 = (($30) + 1)|0;
  $32 = HEAP32[$0>>2]|0;
  $33 = (($32) + 21360|0);
  $34 = (($33) + ($31<<2)|0);
  $35 = HEAP32[$34>>2]|0;
  HEAP32[$end>>2] = $35;
  $36 = HEAP32[$sfb>>2]|0;
  $37 = HEAP32[$ATH_l>>2]|0;
  $38 = (($37) + ($36<<2)|0);
  HEAPF32[$38>>2] = 9.99999993381581251071E+36;
  $39 = HEAP32[$start>>2]|0;
  HEAP32[$i>>2] = $39;
  while(1) {
   $40 = HEAP32[$i>>2]|0;
   $41 = HEAP32[$end>>2]|0;
   $42 = ($40|0)<($41|0);
   if (!($42)) {
    break;
   }
   $43 = HEAP32[$i>>2]|0;
   $44 = (+($43|0));
   $45 = +HEAPF32[$samp_freq>>2];
   $46 = $44 * $45;
   $47 = $46 / 1152.0;
   HEAPF32[$freq>>2] = $47;
   $48 = HEAP32[$cfg>>2]|0;
   $49 = +HEAPF32[$freq>>2];
   $50 = (+_ATHmdct($48,$49));
   HEAPF32[$ATH_f>>2] = $50;
   $51 = HEAP32[$sfb>>2]|0;
   $52 = HEAP32[$ATH_l>>2]|0;
   $53 = (($52) + ($51<<2)|0);
   $54 = +HEAPF32[$53>>2];
   $55 = +HEAPF32[$ATH_f>>2];
   $56 = $54 < $55;
   if ($56) {
    $57 = HEAP32[$sfb>>2]|0;
    $58 = HEAP32[$ATH_l>>2]|0;
    $59 = (($58) + ($57<<2)|0);
    $60 = +HEAPF32[$59>>2];
    $65 = $60;
   } else {
    $61 = +HEAPF32[$ATH_f>>2];
    $65 = $61;
   }
   $62 = HEAP32[$sfb>>2]|0;
   $63 = HEAP32[$ATH_l>>2]|0;
   $64 = (($63) + ($62<<2)|0);
   HEAPF32[$64>>2] = $65;
   $66 = HEAP32[$i>>2]|0;
   $67 = (($66) + 1)|0;
   HEAP32[$i>>2] = $67;
  }
  $68 = HEAP32[$sfb>>2]|0;
  $69 = (($68) + 1)|0;
  HEAP32[$sfb>>2] = $69;
 }
 HEAP32[$sfb>>2] = 0;
 while(1) {
  $70 = HEAP32[$sfb>>2]|0;
  $71 = ($70|0)<(6);
  if (!($71)) {
   break;
  }
  $72 = HEAP32[$sfb>>2]|0;
  $73 = HEAP32[$0>>2]|0;
  $74 = (($73) + 21360|0);
  $75 = (($74) + 148|0);
  $76 = (($75) + ($72<<2)|0);
  $77 = HEAP32[$76>>2]|0;
  HEAP32[$start>>2] = $77;
  $78 = HEAP32[$sfb>>2]|0;
  $79 = (($78) + 1)|0;
  $80 = HEAP32[$0>>2]|0;
  $81 = (($80) + 21360|0);
  $82 = (($81) + 148|0);
  $83 = (($82) + ($79<<2)|0);
  $84 = HEAP32[$83>>2]|0;
  HEAP32[$end>>2] = $84;
  $85 = HEAP32[$sfb>>2]|0;
  $86 = HEAP32[$ATH_psfb21>>2]|0;
  $87 = (($86) + ($85<<2)|0);
  HEAPF32[$87>>2] = 9.99999993381581251071E+36;
  $88 = HEAP32[$start>>2]|0;
  HEAP32[$i>>2] = $88;
  while(1) {
   $89 = HEAP32[$i>>2]|0;
   $90 = HEAP32[$end>>2]|0;
   $91 = ($89|0)<($90|0);
   if (!($91)) {
    break;
   }
   $92 = HEAP32[$i>>2]|0;
   $93 = (+($92|0));
   $94 = +HEAPF32[$samp_freq>>2];
   $95 = $93 * $94;
   $96 = $95 / 1152.0;
   HEAPF32[$freq1>>2] = $96;
   $97 = HEAP32[$cfg>>2]|0;
   $98 = +HEAPF32[$freq1>>2];
   $99 = (+_ATHmdct($97,$98));
   HEAPF32[$ATH_f>>2] = $99;
   $100 = HEAP32[$sfb>>2]|0;
   $101 = HEAP32[$ATH_psfb21>>2]|0;
   $102 = (($101) + ($100<<2)|0);
   $103 = +HEAPF32[$102>>2];
   $104 = +HEAPF32[$ATH_f>>2];
   $105 = $103 < $104;
   if ($105) {
    $106 = HEAP32[$sfb>>2]|0;
    $107 = HEAP32[$ATH_psfb21>>2]|0;
    $108 = (($107) + ($106<<2)|0);
    $109 = +HEAPF32[$108>>2];
    $114 = $109;
   } else {
    $110 = +HEAPF32[$ATH_f>>2];
    $114 = $110;
   }
   $111 = HEAP32[$sfb>>2]|0;
   $112 = HEAP32[$ATH_psfb21>>2]|0;
   $113 = (($112) + ($111<<2)|0);
   HEAPF32[$113>>2] = $114;
   $115 = HEAP32[$i>>2]|0;
   $116 = (($115) + 1)|0;
   HEAP32[$i>>2] = $116;
  }
  $117 = HEAP32[$sfb>>2]|0;
  $118 = (($117) + 1)|0;
  HEAP32[$sfb>>2] = $118;
 }
 HEAP32[$sfb>>2] = 0;
 while(1) {
  $119 = HEAP32[$sfb>>2]|0;
  $120 = ($119|0)<(13);
  if (!($120)) {
   break;
  }
  $121 = HEAP32[$sfb>>2]|0;
  $122 = HEAP32[$0>>2]|0;
  $123 = (($122) + 21360|0);
  $124 = (($123) + 92|0);
  $125 = (($124) + ($121<<2)|0);
  $126 = HEAP32[$125>>2]|0;
  HEAP32[$start>>2] = $126;
  $127 = HEAP32[$sfb>>2]|0;
  $128 = (($127) + 1)|0;
  $129 = HEAP32[$0>>2]|0;
  $130 = (($129) + 21360|0);
  $131 = (($130) + 92|0);
  $132 = (($131) + ($128<<2)|0);
  $133 = HEAP32[$132>>2]|0;
  HEAP32[$end>>2] = $133;
  $134 = HEAP32[$sfb>>2]|0;
  $135 = HEAP32[$ATH_s>>2]|0;
  $136 = (($135) + ($134<<2)|0);
  HEAPF32[$136>>2] = 9.99999993381581251071E+36;
  $137 = HEAP32[$start>>2]|0;
  HEAP32[$i>>2] = $137;
  while(1) {
   $138 = HEAP32[$i>>2]|0;
   $139 = HEAP32[$end>>2]|0;
   $140 = ($138|0)<($139|0);
   if (!($140)) {
    break;
   }
   $141 = HEAP32[$i>>2]|0;
   $142 = (+($141|0));
   $143 = +HEAPF32[$samp_freq>>2];
   $144 = $142 * $143;
   $145 = $144 / 384.0;
   HEAPF32[$freq2>>2] = $145;
   $146 = HEAP32[$cfg>>2]|0;
   $147 = +HEAPF32[$freq2>>2];
   $148 = (+_ATHmdct($146,$147));
   HEAPF32[$ATH_f>>2] = $148;
   $149 = HEAP32[$sfb>>2]|0;
   $150 = HEAP32[$ATH_s>>2]|0;
   $151 = (($150) + ($149<<2)|0);
   $152 = +HEAPF32[$151>>2];
   $153 = +HEAPF32[$ATH_f>>2];
   $154 = $152 < $153;
   if ($154) {
    $155 = HEAP32[$sfb>>2]|0;
    $156 = HEAP32[$ATH_s>>2]|0;
    $157 = (($156) + ($155<<2)|0);
    $158 = +HEAPF32[$157>>2];
    $163 = $158;
   } else {
    $159 = +HEAPF32[$ATH_f>>2];
    $163 = $159;
   }
   $160 = HEAP32[$sfb>>2]|0;
   $161 = HEAP32[$ATH_s>>2]|0;
   $162 = (($161) + ($160<<2)|0);
   HEAPF32[$162>>2] = $163;
   $164 = HEAP32[$i>>2]|0;
   $165 = (($164) + 1)|0;
   HEAP32[$i>>2] = $165;
  }
  $166 = HEAP32[$sfb>>2]|0;
  $167 = (($166) + 1)|0;
  $168 = HEAP32[$0>>2]|0;
  $169 = (($168) + 21360|0);
  $170 = (($169) + 92|0);
  $171 = (($170) + ($167<<2)|0);
  $172 = HEAP32[$171>>2]|0;
  $173 = HEAP32[$sfb>>2]|0;
  $174 = HEAP32[$0>>2]|0;
  $175 = (($174) + 21360|0);
  $176 = (($175) + 92|0);
  $177 = (($176) + ($173<<2)|0);
  $178 = HEAP32[$177>>2]|0;
  $179 = (($172) - ($178))|0;
  $180 = (+($179|0));
  $181 = HEAP32[$sfb>>2]|0;
  $182 = HEAP32[$ATH_s>>2]|0;
  $183 = (($182) + ($181<<2)|0);
  $184 = +HEAPF32[$183>>2];
  $185 = $184 * $180;
  HEAPF32[$183>>2] = $185;
  $186 = HEAP32[$sfb>>2]|0;
  $187 = (($186) + 1)|0;
  HEAP32[$sfb>>2] = $187;
 }
 HEAP32[$sfb>>2] = 0;
 while(1) {
  $188 = HEAP32[$sfb>>2]|0;
  $189 = ($188|0)<(6);
  if (!($189)) {
   break;
  }
  $190 = HEAP32[$sfb>>2]|0;
  $191 = HEAP32[$0>>2]|0;
  $192 = (($191) + 21360|0);
  $193 = (($192) + 176|0);
  $194 = (($193) + ($190<<2)|0);
  $195 = HEAP32[$194>>2]|0;
  HEAP32[$start>>2] = $195;
  $196 = HEAP32[$sfb>>2]|0;
  $197 = (($196) + 1)|0;
  $198 = HEAP32[$0>>2]|0;
  $199 = (($198) + 21360|0);
  $200 = (($199) + 176|0);
  $201 = (($200) + ($197<<2)|0);
  $202 = HEAP32[$201>>2]|0;
  HEAP32[$end>>2] = $202;
  $203 = HEAP32[$sfb>>2]|0;
  $204 = HEAP32[$ATH_psfb12>>2]|0;
  $205 = (($204) + ($203<<2)|0);
  HEAPF32[$205>>2] = 9.99999993381581251071E+36;
  $206 = HEAP32[$start>>2]|0;
  HEAP32[$i>>2] = $206;
  while(1) {
   $207 = HEAP32[$i>>2]|0;
   $208 = HEAP32[$end>>2]|0;
   $209 = ($207|0)<($208|0);
   if (!($209)) {
    break;
   }
   $210 = HEAP32[$i>>2]|0;
   $211 = (+($210|0));
   $212 = +HEAPF32[$samp_freq>>2];
   $213 = $211 * $212;
   $214 = $213 / 384.0;
   HEAPF32[$freq3>>2] = $214;
   $215 = HEAP32[$cfg>>2]|0;
   $216 = +HEAPF32[$freq3>>2];
   $217 = (+_ATHmdct($215,$216));
   HEAPF32[$ATH_f>>2] = $217;
   $218 = HEAP32[$sfb>>2]|0;
   $219 = HEAP32[$ATH_psfb12>>2]|0;
   $220 = (($219) + ($218<<2)|0);
   $221 = +HEAPF32[$220>>2];
   $222 = +HEAPF32[$ATH_f>>2];
   $223 = $221 < $222;
   if ($223) {
    $224 = HEAP32[$sfb>>2]|0;
    $225 = HEAP32[$ATH_psfb12>>2]|0;
    $226 = (($225) + ($224<<2)|0);
    $227 = +HEAPF32[$226>>2];
    $232 = $227;
   } else {
    $228 = +HEAPF32[$ATH_f>>2];
    $232 = $228;
   }
   $229 = HEAP32[$sfb>>2]|0;
   $230 = HEAP32[$ATH_psfb12>>2]|0;
   $231 = (($230) + ($229<<2)|0);
   HEAPF32[$231>>2] = $232;
   $233 = HEAP32[$i>>2]|0;
   $234 = (($233) + 1)|0;
   HEAP32[$i>>2] = $234;
  }
  $235 = HEAP32[$0>>2]|0;
  $236 = (($235) + 21360|0);
  $237 = (($236) + 92|0);
  $238 = (($237) + 52|0);
  $239 = HEAP32[$238>>2]|0;
  $240 = HEAP32[$0>>2]|0;
  $241 = (($240) + 21360|0);
  $242 = (($241) + 92|0);
  $243 = (($242) + 48|0);
  $244 = HEAP32[$243>>2]|0;
  $245 = (($239) - ($244))|0;
  $246 = (+($245|0));
  $247 = HEAP32[$sfb>>2]|0;
  $248 = HEAP32[$ATH_psfb12>>2]|0;
  $249 = (($248) + ($247<<2)|0);
  $250 = +HEAPF32[$249>>2];
  $251 = $250 * $246;
  HEAPF32[$249>>2] = $251;
  $252 = HEAP32[$sfb>>2]|0;
  $253 = (($252) + 1)|0;
  HEAP32[$sfb>>2] = $253;
 }
 $254 = HEAP32[$cfg>>2]|0;
 $255 = (($254) + 204|0);
 $256 = HEAP32[$255>>2]|0;
 $257 = ($256|0)!=(0);
 if (!($257)) {
  $286 = HEAP32[$cfg>>2]|0;
  $287 = (+_ATHmdct($286,-1.0));
  $288 = $287;
  $289 = (+_log10((+$288)));
  $290 = 10.0 * $289;
  $291 = $290;
  $292 = HEAP32[$0>>2]|0;
  $293 = (($292) + 85796|0);
  $294 = HEAP32[$293>>2]|0;
  $295 = (($294) + 20|0);
  HEAPF32[$295>>2] = $291;
  STACKTOP = sp;return;
 }
 HEAP32[$sfb>>2] = 0;
 while(1) {
  $258 = HEAP32[$sfb>>2]|0;
  $259 = ($258|0)<(22);
  if (!($259)) {
   break;
  }
  $260 = HEAP32[$sfb>>2]|0;
  $261 = HEAP32[$ATH_l>>2]|0;
  $262 = (($261) + ($260<<2)|0);
  HEAPF32[$262>>2] = 9.99999968265522538896E-21;
  $263 = HEAP32[$sfb>>2]|0;
  $264 = (($263) + 1)|0;
  HEAP32[$sfb>>2] = $264;
 }
 HEAP32[$sfb>>2] = 0;
 while(1) {
  $265 = HEAP32[$sfb>>2]|0;
  $266 = ($265|0)<(6);
  if (!($266)) {
   break;
  }
  $267 = HEAP32[$sfb>>2]|0;
  $268 = HEAP32[$ATH_psfb21>>2]|0;
  $269 = (($268) + ($267<<2)|0);
  HEAPF32[$269>>2] = 9.99999968265522538896E-21;
  $270 = HEAP32[$sfb>>2]|0;
  $271 = (($270) + 1)|0;
  HEAP32[$sfb>>2] = $271;
 }
 HEAP32[$sfb>>2] = 0;
 while(1) {
  $272 = HEAP32[$sfb>>2]|0;
  $273 = ($272|0)<(13);
  if (!($273)) {
   break;
  }
  $274 = HEAP32[$sfb>>2]|0;
  $275 = HEAP32[$ATH_s>>2]|0;
  $276 = (($275) + ($274<<2)|0);
  HEAPF32[$276>>2] = 9.99999968265522538896E-21;
  $277 = HEAP32[$sfb>>2]|0;
  $278 = (($277) + 1)|0;
  HEAP32[$sfb>>2] = $278;
 }
 HEAP32[$sfb>>2] = 0;
 while(1) {
  $279 = HEAP32[$sfb>>2]|0;
  $280 = ($279|0)<(6);
  if (!($280)) {
   break;
  }
  $281 = HEAP32[$sfb>>2]|0;
  $282 = HEAP32[$ATH_psfb12>>2]|0;
  $283 = (($282) + ($281<<2)|0);
  HEAPF32[$283>>2] = 9.99999968265522538896E-21;
  $284 = HEAP32[$sfb>>2]|0;
  $285 = (($284) + 1)|0;
  HEAP32[$sfb>>2] = $285;
 }
 $286 = HEAP32[$cfg>>2]|0;
 $287 = (+_ATHmdct($286,-1.0));
 $288 = $287;
 $289 = (+_log10((+$288)));
 $290 = 10.0 * $289;
 $291 = $290;
 $292 = HEAP32[$0>>2]|0;
 $293 = (($292) + 85796|0);
 $294 = HEAP32[$293>>2]|0;
 $295 = (($294) + 20|0);
 HEAPF32[$295>>2] = $291;
 STACKTOP = sp;return;
}
function _on_pe($gfc,$pe,$targ_bits,$mean_bits,$gr,$cbr) {
 $gfc = $gfc|0;
 $pe = $pe|0;
 $targ_bits = $targ_bits|0;
 $mean_bits = $mean_bits|0;
 $gr = $gr|0;
 $cbr = $cbr|0;
 var $$ = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0;
 var $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0;
 var $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0.0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0.0;
 var $55 = 0.0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $add_bits = 0, $bits = 0, $cfg = 0, $ch = 0, $extra_bits = 0, $max_bits = 0, $or$cond = 0, $sum = 0, $tbits = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $0 = sp + 60|0;
 $1 = sp + 56|0;
 $2 = sp + 52|0;
 $3 = sp + 48|0;
 $4 = sp + 44|0;
 $5 = sp + 40|0;
 $cfg = sp + 36|0;
 $extra_bits = sp + 32|0;
 $tbits = sp + 28|0;
 $bits = sp + 24|0;
 $add_bits = sp + 16|0;
 $max_bits = sp + 8|0;
 $ch = sp + 4|0;
 $sum = sp;
 HEAP32[$0>>2] = $gfc;
 HEAP32[$1>>2] = $pe;
 HEAP32[$2>>2] = $targ_bits;
 HEAP32[$3>>2] = $mean_bits;
 HEAP32[$4>>2] = $gr;
 HEAP32[$5>>2] = $cbr;
 $6 = HEAP32[$0>>2]|0;
 $7 = (($6) + 16|0);
 HEAP32[$cfg>>2] = $7;
 HEAP32[$extra_bits>>2] = 0;
 ;HEAP32[$add_bits+0>>2]=0|0;HEAP32[$add_bits+4>>2]=0|0;
 $8 = HEAP32[$0>>2]|0;
 $9 = HEAP32[$3>>2]|0;
 $10 = HEAP32[$5>>2]|0;
 _ResvMaxBits($8,$9,$tbits,$extra_bits,$10);
 $11 = HEAP32[$tbits>>2]|0;
 $12 = HEAP32[$extra_bits>>2]|0;
 $13 = (($11) + ($12))|0;
 HEAP32[$max_bits>>2] = $13;
 $14 = HEAP32[$max_bits>>2]|0;
 $15 = ($14|0)>(7680);
 $$ = $15 ? 7680 : $13;
 HEAP32[$max_bits>>2] = $$;
 HEAP32[$bits>>2] = 0;
 HEAP32[$ch>>2] = 0;
 while(1) {
  $16 = HEAP32[$ch>>2]|0;
  $17 = HEAP32[$cfg>>2]|0;
  $18 = (($17) + 56|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = ($16|0)<($19|0);
  if (!($20)) {
   break;
  }
  $21 = HEAP32[$tbits>>2]|0;
  $22 = HEAP32[$cfg>>2]|0;
  $23 = (($22) + 56|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = (($21|0) / ($24|0))&-1;
  $26 = (4095)<($25|0);
  if ($26) {
   $35 = 4095;
  } else {
   $27 = HEAP32[$tbits>>2]|0;
   $28 = HEAP32[$cfg>>2]|0;
   $29 = (($28) + 56|0);
   $30 = HEAP32[$29>>2]|0;
   $31 = (($27|0) / ($30|0))&-1;
   $35 = $31;
  }
  $32 = HEAP32[$ch>>2]|0;
  $33 = HEAP32[$2>>2]|0;
  $34 = (($33) + ($32<<2)|0);
  HEAP32[$34>>2] = $35;
  $36 = HEAP32[$ch>>2]|0;
  $37 = HEAP32[$2>>2]|0;
  $38 = (($37) + ($36<<2)|0);
  $39 = HEAP32[$38>>2]|0;
  $40 = (+($39|0));
  $41 = HEAP32[$ch>>2]|0;
  $42 = HEAP32[$4>>2]|0;
  $43 = HEAP32[$1>>2]|0;
  $44 = (($43) + ($42<<3)|0);
  $45 = (($44) + ($41<<2)|0);
  $46 = +HEAPF32[$45>>2];
  $47 = $40 * $46;
  $48 = $47;
  $49 = $48 / 700.0;
  $50 = HEAP32[$ch>>2]|0;
  $51 = HEAP32[$2>>2]|0;
  $52 = (($51) + ($50<<2)|0);
  $53 = HEAP32[$52>>2]|0;
  $54 = (+($53|0));
  $55 = $49 - $54;
  $56 = (~~(($55)));
  $57 = HEAP32[$ch>>2]|0;
  $58 = (($add_bits) + ($57<<2)|0);
  HEAP32[$58>>2] = $56;
  $59 = HEAP32[$ch>>2]|0;
  $60 = (($add_bits) + ($59<<2)|0);
  $61 = HEAP32[$60>>2]|0;
  $62 = HEAP32[$3>>2]|0;
  $63 = ($62*3)|0;
  $64 = (($63|0) / 4)&-1;
  $65 = ($61|0)>($64|0);
  if ($65) {
   $66 = HEAP32[$3>>2]|0;
   $67 = ($66*3)|0;
   $68 = (($67|0) / 4)&-1;
   $69 = HEAP32[$ch>>2]|0;
   $70 = (($add_bits) + ($69<<2)|0);
   HEAP32[$70>>2] = $68;
  }
  $71 = HEAP32[$ch>>2]|0;
  $72 = (($add_bits) + ($71<<2)|0);
  $73 = HEAP32[$72>>2]|0;
  $74 = ($73|0)<(0);
  if ($74) {
   $75 = HEAP32[$ch>>2]|0;
   $76 = (($add_bits) + ($75<<2)|0);
   HEAP32[$76>>2] = 0;
  }
  $77 = HEAP32[$ch>>2]|0;
  $78 = (($add_bits) + ($77<<2)|0);
  $79 = HEAP32[$78>>2]|0;
  $80 = HEAP32[$ch>>2]|0;
  $81 = HEAP32[$2>>2]|0;
  $82 = (($81) + ($80<<2)|0);
  $83 = HEAP32[$82>>2]|0;
  $84 = (($79) + ($83))|0;
  $85 = ($84|0)>(4095);
  if ($85) {
   $86 = HEAP32[$ch>>2]|0;
   $87 = HEAP32[$2>>2]|0;
   $88 = (($87) + ($86<<2)|0);
   $89 = HEAP32[$88>>2]|0;
   $90 = (4095 - ($89))|0;
   $91 = (0)>($90|0);
   if ($91) {
    $99 = 0;
   } else {
    $92 = HEAP32[$ch>>2]|0;
    $93 = HEAP32[$2>>2]|0;
    $94 = (($93) + ($92<<2)|0);
    $95 = HEAP32[$94>>2]|0;
    $96 = (4095 - ($95))|0;
    $99 = $96;
   }
   $97 = HEAP32[$ch>>2]|0;
   $98 = (($add_bits) + ($97<<2)|0);
   HEAP32[$98>>2] = $99;
  }
  $100 = HEAP32[$ch>>2]|0;
  $101 = (($add_bits) + ($100<<2)|0);
  $102 = HEAP32[$101>>2]|0;
  $103 = HEAP32[$bits>>2]|0;
  $104 = (($103) + ($102))|0;
  HEAP32[$bits>>2] = $104;
  $105 = HEAP32[$ch>>2]|0;
  $106 = (($105) + 1)|0;
  HEAP32[$ch>>2] = $106;
 }
 $107 = HEAP32[$bits>>2]|0;
 $108 = HEAP32[$extra_bits>>2]|0;
 $109 = ($107|0)>($108|0);
 $110 = HEAP32[$bits>>2]|0;
 $111 = ($110|0)>(0);
 $or$cond = $109 & $111;
 L20: do {
  if ($or$cond) {
   HEAP32[$ch>>2] = 0;
   while(1) {
    $112 = HEAP32[$ch>>2]|0;
    $113 = HEAP32[$cfg>>2]|0;
    $114 = (($113) + 56|0);
    $115 = HEAP32[$114>>2]|0;
    $116 = ($112|0)<($115|0);
    if (!($116)) {
     break L20;
    }
    $117 = HEAP32[$extra_bits>>2]|0;
    $118 = HEAP32[$ch>>2]|0;
    $119 = (($add_bits) + ($118<<2)|0);
    $120 = HEAP32[$119>>2]|0;
    $121 = Math_imul($117, $120)|0;
    $122 = HEAP32[$bits>>2]|0;
    $123 = (($121|0) / ($122|0))&-1;
    $124 = HEAP32[$ch>>2]|0;
    $125 = (($add_bits) + ($124<<2)|0);
    HEAP32[$125>>2] = $123;
    $126 = HEAP32[$ch>>2]|0;
    $127 = (($126) + 1)|0;
    HEAP32[$ch>>2] = $127;
   }
  }
 } while(0);
 HEAP32[$ch>>2] = 0;
 while(1) {
  $128 = HEAP32[$ch>>2]|0;
  $129 = HEAP32[$cfg>>2]|0;
  $130 = (($129) + 56|0);
  $131 = HEAP32[$130>>2]|0;
  $132 = ($128|0)<($131|0);
  if (!($132)) {
   break;
  }
  $133 = HEAP32[$ch>>2]|0;
  $134 = (($add_bits) + ($133<<2)|0);
  $135 = HEAP32[$134>>2]|0;
  $136 = HEAP32[$ch>>2]|0;
  $137 = HEAP32[$2>>2]|0;
  $138 = (($137) + ($136<<2)|0);
  $139 = HEAP32[$138>>2]|0;
  $140 = (($139) + ($135))|0;
  HEAP32[$138>>2] = $140;
  $141 = HEAP32[$ch>>2]|0;
  $142 = (($add_bits) + ($141<<2)|0);
  $143 = HEAP32[$142>>2]|0;
  $144 = HEAP32[$extra_bits>>2]|0;
  $145 = (($144) - ($143))|0;
  HEAP32[$extra_bits>>2] = $145;
  $146 = HEAP32[$ch>>2]|0;
  $147 = (($146) + 1)|0;
  HEAP32[$ch>>2] = $147;
 }
 HEAP32[$bits>>2] = 0;
 HEAP32[$ch>>2] = 0;
 while(1) {
  $148 = HEAP32[$ch>>2]|0;
  $149 = HEAP32[$cfg>>2]|0;
  $150 = (($149) + 56|0);
  $151 = HEAP32[$150>>2]|0;
  $152 = ($148|0)<($151|0);
  if (!($152)) {
   break;
  }
  $153 = HEAP32[$ch>>2]|0;
  $154 = HEAP32[$2>>2]|0;
  $155 = (($154) + ($153<<2)|0);
  $156 = HEAP32[$155>>2]|0;
  $157 = HEAP32[$bits>>2]|0;
  $158 = (($157) + ($156))|0;
  HEAP32[$bits>>2] = $158;
  $159 = HEAP32[$ch>>2]|0;
  $160 = (($159) + 1)|0;
  HEAP32[$ch>>2] = $160;
 }
 $161 = HEAP32[$bits>>2]|0;
 $162 = ($161|0)>(7680);
 if (!($162)) {
  $187 = HEAP32[$max_bits>>2]|0;
  STACKTOP = sp;return ($187|0);
 }
 HEAP32[$sum>>2] = 0;
 HEAP32[$ch>>2] = 0;
 while(1) {
  $163 = HEAP32[$ch>>2]|0;
  $164 = HEAP32[$cfg>>2]|0;
  $165 = (($164) + 56|0);
  $166 = HEAP32[$165>>2]|0;
  $167 = ($163|0)<($166|0);
  if (!($167)) {
   break;
  }
  $168 = HEAP32[$ch>>2]|0;
  $169 = HEAP32[$2>>2]|0;
  $170 = (($169) + ($168<<2)|0);
  $171 = HEAP32[$170>>2]|0;
  $172 = ($171*7680)|0;
  HEAP32[$170>>2] = $172;
  $173 = HEAP32[$bits>>2]|0;
  $174 = HEAP32[$ch>>2]|0;
  $175 = HEAP32[$2>>2]|0;
  $176 = (($175) + ($174<<2)|0);
  $177 = HEAP32[$176>>2]|0;
  $178 = (($177|0) / ($173|0))&-1;
  HEAP32[$176>>2] = $178;
  $179 = HEAP32[$ch>>2]|0;
  $180 = HEAP32[$2>>2]|0;
  $181 = (($180) + ($179<<2)|0);
  $182 = HEAP32[$181>>2]|0;
  $183 = HEAP32[$sum>>2]|0;
  $184 = (($183) + ($182))|0;
  HEAP32[$sum>>2] = $184;
  $185 = HEAP32[$ch>>2]|0;
  $186 = (($185) + 1)|0;
  HEAP32[$ch>>2] = $186;
 }
 $187 = HEAP32[$max_bits>>2]|0;
 STACKTOP = sp;return ($187|0);
}
function _reduce_side($targ_bits,$ms_ener_ratio,$mean_bits,$max_bits) {
 $targ_bits = $targ_bits|0;
 $ms_ener_ratio = +$ms_ener_ratio;
 $mean_bits = $mean_bits|0;
 $max_bits = $max_bits|0;
 var $0 = 0, $1 = 0, $10 = 0.0, $11 = 0, $12 = 0.0, $13 = 0.0, $14 = 0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0.0, $25 = 0.0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0.0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0.0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0.0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0.0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0.0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0.0, $90 = 0, $91 = 0, $92 = 0, $fac = 0, $move_bits = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = sp + 20|0;
 $1 = sp + 16|0;
 $2 = sp + 12|0;
 $3 = sp + 8|0;
 $move_bits = sp + 4|0;
 $fac = sp;
 HEAP32[$0>>2] = $targ_bits;
 HEAPF32[$1>>2] = $ms_ener_ratio;
 HEAP32[$2>>2] = $mean_bits;
 HEAP32[$3>>2] = $max_bits;
 $4 = +HEAPF32[$1>>2];
 $5 = $4;
 $6 = 0.5 - $5;
 $7 = 0.330000000000000015543 * $6;
 $8 = $7 / 0.5;
 $9 = $8;
 HEAPF32[$fac>>2] = $9;
 $10 = +HEAPF32[$fac>>2];
 $11 = $10 < 0.0;
 if ($11) {
  HEAPF32[$fac>>2] = 0.0;
 }
 $12 = +HEAPF32[$fac>>2];
 $13 = $12;
 $14 = $13 > 0.5;
 if ($14) {
  HEAPF32[$fac>>2] = 0.5;
 }
 $15 = +HEAPF32[$fac>>2];
 $16 = $15;
 $17 = $16 * 0.5;
 $18 = HEAP32[$0>>2]|0;
 $19 = HEAP32[$18>>2]|0;
 $20 = HEAP32[$0>>2]|0;
 $21 = (($20) + 4|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = (($19) + ($22))|0;
 $24 = (+($23|0));
 $25 = $17 * $24;
 $26 = (~~(($25)));
 HEAP32[$move_bits>>2] = $26;
 $27 = HEAP32[$move_bits>>2]|0;
 $28 = HEAP32[$0>>2]|0;
 $29 = HEAP32[$28>>2]|0;
 $30 = (4095 - ($29))|0;
 $31 = ($27|0)>($30|0);
 if ($31) {
  $32 = HEAP32[$0>>2]|0;
  $33 = HEAP32[$32>>2]|0;
  $34 = (4095 - ($33))|0;
  HEAP32[$move_bits>>2] = $34;
 }
 $35 = HEAP32[$move_bits>>2]|0;
 $36 = ($35|0)<(0);
 if ($36) {
  HEAP32[$move_bits>>2] = 0;
 }
 $37 = HEAP32[$0>>2]|0;
 $38 = (($37) + 4|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = ($39|0)>=(125);
 do {
  if ($40) {
   $41 = HEAP32[$0>>2]|0;
   $42 = (($41) + 4|0);
   $43 = HEAP32[$42>>2]|0;
   $44 = HEAP32[$move_bits>>2]|0;
   $45 = (($43) - ($44))|0;
   $46 = ($45|0)>(125);
   $47 = HEAP32[$0>>2]|0;
   if (!($46)) {
    $60 = (($47) + 4|0);
    $61 = HEAP32[$60>>2]|0;
    $62 = (($61) - 125)|0;
    $63 = HEAP32[$0>>2]|0;
    $64 = HEAP32[$63>>2]|0;
    $65 = (($64) + ($62))|0;
    HEAP32[$63>>2] = $65;
    $66 = HEAP32[$0>>2]|0;
    $67 = (($66) + 4|0);
    HEAP32[$67>>2] = 125;
    break;
   }
   $48 = HEAP32[$47>>2]|0;
   $49 = HEAP32[$2>>2]|0;
   $50 = ($48|0)<($49|0);
   if ($50) {
    $51 = HEAP32[$move_bits>>2]|0;
    $52 = HEAP32[$0>>2]|0;
    $53 = HEAP32[$52>>2]|0;
    $54 = (($53) + ($51))|0;
    HEAP32[$52>>2] = $54;
   }
   $55 = HEAP32[$move_bits>>2]|0;
   $56 = HEAP32[$0>>2]|0;
   $57 = (($56) + 4|0);
   $58 = HEAP32[$57>>2]|0;
   $59 = (($58) - ($55))|0;
   HEAP32[$57>>2] = $59;
  }
 } while(0);
 $68 = HEAP32[$0>>2]|0;
 $69 = HEAP32[$68>>2]|0;
 $70 = HEAP32[$0>>2]|0;
 $71 = (($70) + 4|0);
 $72 = HEAP32[$71>>2]|0;
 $73 = (($69) + ($72))|0;
 HEAP32[$move_bits>>2] = $73;
 $74 = HEAP32[$move_bits>>2]|0;
 $75 = HEAP32[$3>>2]|0;
 $76 = ($74|0)>($75|0);
 if (!($76)) {
  STACKTOP = sp;return;
 }
 $77 = HEAP32[$3>>2]|0;
 $78 = HEAP32[$0>>2]|0;
 $79 = HEAP32[$78>>2]|0;
 $80 = Math_imul($77, $79)|0;
 $81 = HEAP32[$move_bits>>2]|0;
 $82 = (($80|0) / ($81|0))&-1;
 $83 = HEAP32[$0>>2]|0;
 HEAP32[$83>>2] = $82;
 $84 = HEAP32[$3>>2]|0;
 $85 = HEAP32[$0>>2]|0;
 $86 = (($85) + 4|0);
 $87 = HEAP32[$86>>2]|0;
 $88 = Math_imul($84, $87)|0;
 $89 = HEAP32[$move_bits>>2]|0;
 $90 = (($88|0) / ($89|0))&-1;
 $91 = HEAP32[$0>>2]|0;
 $92 = (($91) + 4|0);
 HEAP32[$92>>2] = $90;
 STACKTOP = sp;return;
}
function _athAdjust($a,$x,$athFloor,$ATHfixpoint) {
 $a = +$a;
 $x = +$x;
 $athFloor = +$athFloor;
 $ATHfixpoint = +$ATHfixpoint;
 var $0 = 0, $1 = 0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0;
 var $27 = 0.0, $28 = 0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0.0, $40 = 0.0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0.0;
 var $9 = 0.0, $o = 0, $p = 0, $u = 0, $v = 0, $w = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $0 = sp + 32|0;
 $1 = sp + 28|0;
 $2 = sp + 24|0;
 $3 = sp + 20|0;
 $o = sp + 16|0;
 $p = sp + 12|0;
 $u = sp + 8|0;
 $v = sp + 4|0;
 $w = sp;
 HEAPF32[$0>>2] = $a;
 HEAPF32[$1>>2] = $x;
 HEAPF32[$2>>2] = $athFloor;
 HEAPF32[$3>>2] = $ATHfixpoint;
 HEAPF32[$o>>2] = 90.3087310791015625;
 $4 = +HEAPF32[$3>>2];
 $5 = $4 < 1.0;
 $6 = +HEAPF32[$3>>2];
 $7 = $5 ? 94.8244476318359375 : $6;
 HEAPF32[$p>>2] = $7;
 $8 = +HEAPF32[$1>>2];
 $9 = (+_fast_log2($8));
 $10 = $9;
 $11 = $10 * 3.01029995663981164711;
 $12 = $11;
 HEAPF32[$u>>2] = $12;
 $13 = +HEAPF32[$0>>2];
 $14 = +HEAPF32[$0>>2];
 $15 = $13 * $14;
 HEAPF32[$v>>2] = $15;
 HEAPF32[$w>>2] = 0.0;
 $16 = +HEAPF32[$2>>2];
 $17 = +HEAPF32[$u>>2];
 $18 = $17 - $16;
 HEAPF32[$u>>2] = $18;
 $19 = +HEAPF32[$v>>2];
 $20 = $19 > 9.99999968265522538896E-21;
 if ($20) {
  $21 = +HEAPF32[$v>>2];
  $22 = (+_fast_log2($21));
  $23 = $22;
  $24 = $23 * 0.0333334326559875798734;
  $25 = 1.0 + $24;
  $26 = $25;
  HEAPF32[$w>>2] = $26;
 }
 $27 = +HEAPF32[$w>>2];
 $28 = $27 < 0.0;
 if ($28) {
  HEAPF32[$w>>2] = 0.0;
 }
 $29 = +HEAPF32[$w>>2];
 $30 = +HEAPF32[$u>>2];
 $31 = $30 * $29;
 HEAPF32[$u>>2] = $31;
 $32 = +HEAPF32[$2>>2];
 $33 = $32 + 90.3087310791015625;
 $34 = +HEAPF32[$p>>2];
 $35 = $33 - $34;
 $36 = +HEAPF32[$u>>2];
 $37 = $36 + $35;
 HEAPF32[$u>>2] = $37;
 $38 = +HEAPF32[$u>>2];
 $39 = 0.100000001490116119385 * $38;
 $40 = (+Math_pow(10.0,(+$39)));
 STACKTOP = sp;return (+$40);
}
function _calc_xmin($gfc,$ratio,$cod_info,$pxmin) {
 $gfc = $gfc|0;
 $ratio = $ratio|0;
 $cod_info = $cod_info|0;
 $pxmin = $pxmin|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0.0, $105 = 0.0, $106 = 0.0, $107 = 0.0, $108 = 0.0, $109 = 0, $11 = 0, $110 = 0.0, $111 = 0.0, $112 = 0.0, $113 = 0, $114 = 0.0, $115 = 0.0;
 var $116 = 0.0, $117 = 0.0, $118 = 0.0, $119 = 0.0, $12 = 0, $120 = 0.0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0.0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0.0, $139 = 0.0, $14 = 0, $140 = 0.0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0.0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0.0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0.0, $215 = 0, $216 = 0, $217 = 0.0, $218 = 0, $219 = 0, $22 = 0.0, $220 = 0.0, $221 = 0.0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0.0, $228 = 0.0, $229 = 0.0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0.0, $238 = 0.0, $239 = 0, $24 = 0, $240 = 0.0, $241 = 0.0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0.0, $25 = 0.0, $250 = 0.0, $251 = 0.0, $252 = 0.0, $253 = 0.0, $254 = 0.0, $255 = 0.0, $256 = 0.0, $257 = 0.0, $258 = 0, $259 = 0.0, $26 = 0;
 var $260 = 0.0, $261 = 0.0, $262 = 0.0, $263 = 0.0, $264 = 0, $265 = 0, $266 = 0.0, $267 = 0.0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0.0, $272 = 0.0, $273 = 0, $274 = 0.0, $275 = 0.0, $276 = 0.0, $277 = 0, $278 = 0.0;
 var $279 = 0.0, $28 = 0.0, $280 = 0.0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0.0, $289 = 0.0, $29 = 0.0, $290 = 0, $291 = 0.0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0.0, $299 = 0.0, $3 = 0, $30 = 0, $300 = 0.0, $301 = 0.0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0.0, $308 = 0.0, $309 = 0.0, $31 = 0, $310 = 0.0, $311 = 0.0, $312 = 0, $313 = 0.0;
 var $314 = 0.0, $315 = 0.0, $316 = 0, $317 = 0.0, $318 = 0.0, $319 = 0.0, $32 = 0, $320 = 0.0, $321 = 0.0, $322 = 0.0, $323 = 0.0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0.0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0.0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0.0, $345 = 0, $346 = 0, $347 = 0.0, $348 = 0, $349 = 0, $35 = 0.0;
 var $350 = 0, $351 = 0.0, $352 = 0, $353 = 0, $354 = 0.0, $355 = 0.0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0.0, $360 = 0.0, $361 = 0.0, $362 = 0, $363 = 0, $364 = 0.0, $365 = 0.0, $366 = 0, $367 = 0, $368 = 0.0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0.0, $372 = 0, $373 = 0, $374 = 0, $375 = 0.0, $376 = 0, $377 = 0, $378 = 0.0, $379 = 0.0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0.0, $385 = 0.0, $386 = 0;
 var $387 = 0, $388 = 0.0, $389 = 0.0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0.0, $43 = 0, $44 = 0.0, $45 = 0.0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0, $60 = 0.0, $61 = 0.0, $62 = 0, $63 = 0.0, $64 = 0.0, $65 = 0.0, $66 = 0.0, $67 = 0.0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0.0, $71 = 0.0, $72 = 0, $73 = 0, $74 = 0, $75 = 0.0, $76 = 0.0, $77 = 0, $78 = 0.0, $79 = 0.0, $8 = 0, $80 = 0.0, $81 = 0, $82 = 0.0, $83 = 0.0, $84 = 0.0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0.0, $9 = 0, $90 = 0.0, $91 = 0, $92 = 0.0, $93 = 0, $94 = 0, $95 = 0, $96 = 0.0, $97 = 0.0, $98 = 0.0, $99 = 0.0, $ATH = 0, $ath_over = 0, $b = 0, $cfg = 0, $e = 0;
 var $e10 = 0, $en0 = 0, $en03 = 0, $gsfb = 0, $j = 0, $k = 0, $l = 0, $l2 = 0, $limit = 0, $max_nonzero = 0, $rh1 = 0, $rh15 = 0, $rh2 = 0, $rh26 = 0, $rh3 = 0, $rh37 = 0, $sfb = 0, $sfb_l = 0, $sfb_s = 0, $tmpATH = 0;
 var $width = 0, $width1 = 0, $x = 0, $x11 = 0, $x2 = 0, $x29 = 0, $xa = 0, $xa8 = 0, $xmin = 0, $xmin4 = 0, $xr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0;
 $0 = sp + 156|0;
 $1 = sp + 152|0;
 $2 = sp + 148|0;
 $3 = sp + 144|0;
 $cfg = sp + 140|0;
 $sfb = sp + 136|0;
 $gsfb = sp + 132|0;
 $j = sp + 128|0;
 $ath_over = sp + 124|0;
 $k = sp + 120|0;
 $ATH = sp + 116|0;
 $xr = sp + 112|0;
 $max_nonzero = sp + 108|0;
 $en0 = sp + 104|0;
 $xmin = sp + 100|0;
 $rh1 = sp + 96|0;
 $rh2 = sp + 92|0;
 $rh3 = sp + 88|0;
 $width = sp + 84|0;
 $l = sp + 80|0;
 $xa = sp + 76|0;
 $x2 = sp + 72|0;
 $e = sp + 68|0;
 $x = sp + 64|0;
 $sfb_l = sp + 60|0;
 $sfb_s = sp + 56|0;
 $limit = sp + 52|0;
 $width1 = sp + 48|0;
 $b = sp + 44|0;
 $l2 = sp + 40|0;
 $tmpATH = sp + 36|0;
 $en03 = sp + 32|0;
 $xmin4 = sp + 28|0;
 $rh15 = sp + 24|0;
 $rh26 = sp + 20|0;
 $rh37 = sp + 16|0;
 $xa8 = sp + 12|0;
 $x29 = sp + 8|0;
 $e10 = sp + 4|0;
 $x11 = sp;
 HEAP32[$0>>2] = $gfc;
 HEAP32[$1>>2] = $ratio;
 HEAP32[$2>>2] = $cod_info;
 HEAP32[$3>>2] = $pxmin;
 $4 = HEAP32[$0>>2]|0;
 $5 = (($4) + 16|0);
 HEAP32[$cfg>>2] = $5;
 HEAP32[$j>>2] = 0;
 HEAP32[$ath_over>>2] = 0;
 $6 = HEAP32[$0>>2]|0;
 $7 = (($6) + 85796|0);
 $8 = HEAP32[$7>>2]|0;
 HEAP32[$ATH>>2] = $8;
 $9 = HEAP32[$2>>2]|0;
 HEAP32[$xr>>2] = $9;
 HEAP32[$gsfb>>2] = 0;
 while(1) {
  $10 = HEAP32[$gsfb>>2]|0;
  $11 = HEAP32[$2>>2]|0;
  $12 = (($11) + 4856|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ($10|0)<($13|0);
  if (!($14)) {
   break;
  }
  $15 = HEAP32[$ATH>>2]|0;
  $16 = (($15) + 8|0);
  $17 = +HEAPF32[$16>>2];
  $18 = HEAP32[$gsfb>>2]|0;
  $19 = HEAP32[$ATH>>2]|0;
  $20 = (($19) + 24|0);
  $21 = (($20) + ($18<<2)|0);
  $22 = +HEAPF32[$21>>2];
  $23 = HEAP32[$ATH>>2]|0;
  $24 = (($23) + 20|0);
  $25 = +HEAPF32[$24>>2];
  $26 = HEAP32[$cfg>>2]|0;
  $27 = (($26) + 208|0);
  $28 = +HEAPF32[$27>>2];
  $29 = (+_athAdjust($17,$22,$25,$28));
  HEAPF32[$xmin>>2] = $29;
  $30 = HEAP32[$gsfb>>2]|0;
  $31 = HEAP32[$0>>2]|0;
  $32 = (($31) + 84768|0);
  $33 = (($32) + ($30<<2)|0);
  $34 = +HEAPF32[$33>>2];
  $35 = +HEAPF32[$xmin>>2];
  $36 = $35 * $34;
  HEAPF32[$xmin>>2] = $36;
  $37 = HEAP32[$gsfb>>2]|0;
  $38 = HEAP32[$2>>2]|0;
  $39 = (($38) + 4872|0);
  $40 = (($39) + ($37<<2)|0);
  $41 = HEAP32[$40>>2]|0;
  HEAP32[$width>>2] = $41;
  $42 = +HEAPF32[$xmin>>2];
  $43 = HEAP32[$width>>2]|0;
  $44 = (+($43|0));
  $45 = $42 / $44;
  HEAPF32[$rh1>>2] = $45;
  HEAPF32[$rh2>>2] = 2.22044604925031308085E-16;
  HEAPF32[$en0>>2] = 0.0;
  HEAP32[$l>>2] = 0;
  while(1) {
   $46 = HEAP32[$l>>2]|0;
   $47 = HEAP32[$width>>2]|0;
   $48 = ($46|0)<($47|0);
   if (!($48)) {
    break;
   }
   $49 = HEAP32[$j>>2]|0;
   $50 = (($49) + 1)|0;
   HEAP32[$j>>2] = $50;
   $51 = HEAP32[$xr>>2]|0;
   $52 = (($51) + ($49<<2)|0);
   $53 = +HEAPF32[$52>>2];
   HEAPF32[$xa>>2] = $53;
   $54 = +HEAPF32[$xa>>2];
   $55 = +HEAPF32[$xa>>2];
   $56 = $54 * $55;
   HEAPF32[$x2>>2] = $56;
   $57 = +HEAPF32[$x2>>2];
   $58 = +HEAPF32[$en0>>2];
   $59 = $58 + $57;
   HEAPF32[$en0>>2] = $59;
   $60 = +HEAPF32[$x2>>2];
   $61 = +HEAPF32[$rh1>>2];
   $62 = $60 < $61;
   $63 = +HEAPF32[$x2>>2];
   $64 = +HEAPF32[$rh1>>2];
   $65 = $62 ? $63 : $64;
   $66 = +HEAPF32[$rh2>>2];
   $67 = $66 + $65;
   HEAPF32[$rh2>>2] = $67;
   $68 = HEAP32[$l>>2]|0;
   $69 = (($68) + 1)|0;
   HEAP32[$l>>2] = $69;
  }
  $70 = +HEAPF32[$en0>>2];
  $71 = +HEAPF32[$xmin>>2];
  $72 = $70 > $71;
  if ($72) {
   $73 = HEAP32[$ath_over>>2]|0;
   $74 = (($73) + 1)|0;
   HEAP32[$ath_over>>2] = $74;
  }
  $75 = +HEAPF32[$en0>>2];
  $76 = +HEAPF32[$xmin>>2];
  $77 = $75 < $76;
  do {
   if ($77) {
    $78 = +HEAPF32[$en0>>2];
    HEAPF32[$rh3>>2] = $78;
   } else {
    $79 = +HEAPF32[$rh2>>2];
    $80 = +HEAPF32[$xmin>>2];
    $81 = $79 < $80;
    if ($81) {
     $82 = +HEAPF32[$xmin>>2];
     HEAPF32[$rh3>>2] = $82;
     break;
    } else {
     $83 = +HEAPF32[$rh2>>2];
     HEAPF32[$rh3>>2] = $83;
     break;
    }
   }
  } while(0);
  $84 = +HEAPF32[$rh3>>2];
  HEAPF32[$xmin>>2] = $84;
  $85 = HEAP32[$gsfb>>2]|0;
  $86 = HEAP32[$1>>2]|0;
  $87 = (($86) + 244|0);
  $88 = (($87) + ($85<<2)|0);
  $89 = +HEAPF32[$88>>2];
  HEAPF32[$e>>2] = $89;
  $90 = +HEAPF32[$e>>2];
  $91 = $90 > 9.9999999600419720025E-13;
  if ($91) {
   $92 = +HEAPF32[$en0>>2];
   $93 = HEAP32[$gsfb>>2]|0;
   $94 = HEAP32[$1>>2]|0;
   $95 = (($94) + ($93<<2)|0);
   $96 = +HEAPF32[$95>>2];
   $97 = $92 * $96;
   $98 = +HEAPF32[$e>>2];
   $99 = $97 / $98;
   HEAPF32[$x>>2] = $99;
   $100 = HEAP32[$gsfb>>2]|0;
   $101 = HEAP32[$0>>2]|0;
   $102 = (($101) + 84768|0);
   $103 = (($102) + ($100<<2)|0);
   $104 = +HEAPF32[$103>>2];
   $105 = +HEAPF32[$x>>2];
   $106 = $105 * $104;
   HEAPF32[$x>>2] = $106;
   $107 = +HEAPF32[$xmin>>2];
   $108 = +HEAPF32[$x>>2];
   $109 = $107 < $108;
   if ($109) {
    $110 = +HEAPF32[$x>>2];
    HEAPF32[$xmin>>2] = $110;
   }
  }
  $111 = +HEAPF32[$xmin>>2];
  $112 = $111;
  $113 = $112 > 2.22044604925031308085E-16;
  if ($113) {
   $114 = +HEAPF32[$xmin>>2];
   $115 = $114;
   $117 = $115;
  } else {
   $117 = 2.22044604925031308085E-16;
  }
  $116 = $117;
  HEAPF32[$xmin>>2] = $116;
  $118 = +HEAPF32[$en0>>2];
  $119 = +HEAPF32[$xmin>>2];
  $120 = $119 + 9.99999982451670044181E-15;
  $121 = $118 > $120;
  $122 = $121 ? 1 : 0;
  $123 = $122&255;
  $124 = HEAP32[$gsfb>>2]|0;
  $125 = HEAP32[$2>>2]|0;
  $126 = (($125) + 5212|0);
  $127 = (($126) + ($124)|0);
  HEAP8[$127>>0] = $123;
  $128 = +HEAPF32[$xmin>>2];
  $129 = HEAP32[$3>>2]|0;
  $130 = (($129) + 4|0);
  HEAP32[$3>>2] = $130;
  HEAPF32[$129>>2] = $128;
  $131 = HEAP32[$gsfb>>2]|0;
  $132 = (($131) + 1)|0;
  HEAP32[$gsfb>>2] = $132;
 }
 HEAP32[$max_nonzero>>2] = 0;
 HEAP32[$k>>2] = 575;
 while(1) {
  $133 = HEAP32[$k>>2]|0;
  $134 = ($133|0)>(0);
  if (!($134)) {
   break;
  }
  $135 = HEAP32[$k>>2]|0;
  $136 = HEAP32[$xr>>2]|0;
  $137 = (($136) + ($135<<2)|0);
  $138 = +HEAPF32[$137>>2];
  $139 = $138;
  $140 = (+Math_abs((+$139)));
  $141 = $140 > 9.9999999600419720025E-13;
  $142 = HEAP32[$k>>2]|0;
  if ($141) {
   label = 22;
   break;
  }
  $143 = (($142) + -1)|0;
  HEAP32[$k>>2] = $143;
 }
 if ((label|0) == 22) {
  HEAP32[$max_nonzero>>2] = $142;
 }
 $144 = HEAP32[$2>>2]|0;
 $145 = (($144) + 4788|0);
 $146 = HEAP32[$145>>2]|0;
 $147 = ($146|0)!=(2);
 $148 = HEAP32[$max_nonzero>>2]|0;
 if ($147) {
  $149 = $148 | 1;
  HEAP32[$max_nonzero>>2] = $149;
 } else {
  $150 = (($148|0) / 6)&-1;
  HEAP32[$max_nonzero>>2] = $150;
  $151 = HEAP32[$max_nonzero>>2]|0;
  $152 = ($151*6)|0;
  HEAP32[$max_nonzero>>2] = $152;
  $153 = HEAP32[$max_nonzero>>2]|0;
  $154 = (($153) + 5)|0;
  HEAP32[$max_nonzero>>2] = $154;
 }
 $155 = HEAP32[$0>>2]|0;
 $156 = (($155) + 84768|0);
 $157 = (($156) + 324|0);
 $158 = HEAP32[$157>>2]|0;
 $159 = ($158|0)==(0);
 if ($159) {
  $160 = HEAP32[$cfg>>2]|0;
  $161 = (($160) + 48|0);
  $162 = HEAP32[$161>>2]|0;
  $163 = ($162|0)<(44000);
  if ($163) {
   $164 = HEAP32[$cfg>>2]|0;
   $165 = (($164) + 48|0);
   $166 = HEAP32[$165>>2]|0;
   $167 = ($166|0)<=(8000);
   $168 = $167 ? 17 : 21;
   HEAP32[$sfb_l>>2] = $168;
   $169 = HEAP32[$cfg>>2]|0;
   $170 = (($169) + 48|0);
   $171 = HEAP32[$170>>2]|0;
   $172 = ($171|0)<=(8000);
   $173 = $172 ? 9 : 12;
   HEAP32[$sfb_s>>2] = $173;
   HEAP32[$limit>>2] = 575;
   $174 = HEAP32[$2>>2]|0;
   $175 = (($174) + 4788|0);
   $176 = HEAP32[$175>>2]|0;
   $177 = ($176|0)!=(2);
   if ($177) {
    $178 = HEAP32[$sfb_l>>2]|0;
    $179 = HEAP32[$0>>2]|0;
    $180 = (($179) + 21360|0);
    $181 = (($180) + ($178<<2)|0);
    $182 = HEAP32[$181>>2]|0;
    $183 = (($182) - 1)|0;
    HEAP32[$limit>>2] = $183;
   } else {
    $184 = HEAP32[$sfb_s>>2]|0;
    $185 = HEAP32[$0>>2]|0;
    $186 = (($185) + 21360|0);
    $187 = (($186) + 92|0);
    $188 = (($187) + ($184<<2)|0);
    $189 = HEAP32[$188>>2]|0;
    $190 = ($189*3)|0;
    $191 = (($190) - 1)|0;
    HEAP32[$limit>>2] = $191;
   }
   $192 = HEAP32[$max_nonzero>>2]|0;
   $193 = HEAP32[$limit>>2]|0;
   $194 = ($192|0)>($193|0);
   if ($194) {
    $195 = HEAP32[$limit>>2]|0;
    HEAP32[$max_nonzero>>2] = $195;
   }
  }
 }
 $196 = HEAP32[$max_nonzero>>2]|0;
 $197 = HEAP32[$2>>2]|0;
 $198 = (($197) + 5208|0);
 HEAP32[$198>>2] = $196;
 $199 = HEAP32[$2>>2]|0;
 $200 = (($199) + 4852|0);
 $201 = HEAP32[$200>>2]|0;
 HEAP32[$sfb>>2] = $201;
 while(1) {
  $202 = HEAP32[$gsfb>>2]|0;
  $203 = HEAP32[$2>>2]|0;
  $204 = (($203) + 4864|0);
  $205 = HEAP32[$204>>2]|0;
  $206 = ($202|0)<($205|0);
  if (!($206)) {
   break;
  }
  $207 = HEAP32[$ATH>>2]|0;
  $208 = (($207) + 8|0);
  $209 = +HEAPF32[$208>>2];
  $210 = HEAP32[$sfb>>2]|0;
  $211 = HEAP32[$ATH>>2]|0;
  $212 = (($211) + 112|0);
  $213 = (($212) + ($210<<2)|0);
  $214 = +HEAPF32[$213>>2];
  $215 = HEAP32[$ATH>>2]|0;
  $216 = (($215) + 20|0);
  $217 = +HEAPF32[$216>>2];
  $218 = HEAP32[$cfg>>2]|0;
  $219 = (($218) + 208|0);
  $220 = +HEAPF32[$219>>2];
  $221 = (+_athAdjust($209,$214,$217,$220));
  HEAPF32[$tmpATH>>2] = $221;
  $222 = HEAP32[$sfb>>2]|0;
  $223 = HEAP32[$0>>2]|0;
  $224 = (($223) + 84768|0);
  $225 = (($224) + 88|0);
  $226 = (($225) + ($222<<2)|0);
  $227 = +HEAPF32[$226>>2];
  $228 = +HEAPF32[$tmpATH>>2];
  $229 = $228 * $227;
  HEAPF32[$tmpATH>>2] = $229;
  $230 = HEAP32[$gsfb>>2]|0;
  $231 = HEAP32[$2>>2]|0;
  $232 = (($231) + 4872|0);
  $233 = (($232) + ($230<<2)|0);
  $234 = HEAP32[$233>>2]|0;
  HEAP32[$width1>>2] = $234;
  HEAP32[$b>>2] = 0;
  while(1) {
   $235 = HEAP32[$b>>2]|0;
   $236 = ($235|0)<(3);
   if (!($236)) {
    break;
   }
   HEAPF32[$en03>>2] = 0.0;
   $237 = +HEAPF32[$tmpATH>>2];
   HEAPF32[$xmin4>>2] = $237;
   $238 = +HEAPF32[$tmpATH>>2];
   $239 = HEAP32[$width1>>2]|0;
   $240 = (+($239|0));
   $241 = $238 / $240;
   HEAPF32[$rh15>>2] = $241;
   HEAPF32[$rh26>>2] = 2.22044604925031308085E-16;
   HEAP32[$l2>>2] = 0;
   while(1) {
    $242 = HEAP32[$l2>>2]|0;
    $243 = HEAP32[$width1>>2]|0;
    $244 = ($242|0)<($243|0);
    if (!($244)) {
     break;
    }
    $245 = HEAP32[$j>>2]|0;
    $246 = (($245) + 1)|0;
    HEAP32[$j>>2] = $246;
    $247 = HEAP32[$xr>>2]|0;
    $248 = (($247) + ($245<<2)|0);
    $249 = +HEAPF32[$248>>2];
    HEAPF32[$xa8>>2] = $249;
    $250 = +HEAPF32[$xa8>>2];
    $251 = +HEAPF32[$xa8>>2];
    $252 = $250 * $251;
    HEAPF32[$x29>>2] = $252;
    $253 = +HEAPF32[$x29>>2];
    $254 = +HEAPF32[$en03>>2];
    $255 = $254 + $253;
    HEAPF32[$en03>>2] = $255;
    $256 = +HEAPF32[$x29>>2];
    $257 = +HEAPF32[$rh15>>2];
    $258 = $256 < $257;
    $259 = +HEAPF32[$x29>>2];
    $260 = +HEAPF32[$rh15>>2];
    $261 = $258 ? $259 : $260;
    $262 = +HEAPF32[$rh26>>2];
    $263 = $262 + $261;
    HEAPF32[$rh26>>2] = $263;
    $264 = HEAP32[$l2>>2]|0;
    $265 = (($264) + 1)|0;
    HEAP32[$l2>>2] = $265;
   }
   $266 = +HEAPF32[$en03>>2];
   $267 = +HEAPF32[$tmpATH>>2];
   $268 = $266 > $267;
   if ($268) {
    $269 = HEAP32[$ath_over>>2]|0;
    $270 = (($269) + 1)|0;
    HEAP32[$ath_over>>2] = $270;
   }
   $271 = +HEAPF32[$en03>>2];
   $272 = +HEAPF32[$tmpATH>>2];
   $273 = $271 < $272;
   do {
    if ($273) {
     $274 = +HEAPF32[$en03>>2];
     HEAPF32[$rh37>>2] = $274;
    } else {
     $275 = +HEAPF32[$rh26>>2];
     $276 = +HEAPF32[$tmpATH>>2];
     $277 = $275 < $276;
     if ($277) {
      $278 = +HEAPF32[$tmpATH>>2];
      HEAPF32[$rh37>>2] = $278;
      break;
     } else {
      $279 = +HEAPF32[$rh26>>2];
      HEAPF32[$rh37>>2] = $279;
      break;
     }
    }
   } while(0);
   $280 = +HEAPF32[$rh37>>2];
   HEAPF32[$xmin4>>2] = $280;
   $281 = HEAP32[$b>>2]|0;
   $282 = HEAP32[$sfb>>2]|0;
   $283 = HEAP32[$1>>2]|0;
   $284 = (($283) + 244|0);
   $285 = (($284) + 88|0);
   $286 = (($285) + (($282*12)|0)|0);
   $287 = (($286) + ($281<<2)|0);
   $288 = +HEAPF32[$287>>2];
   HEAPF32[$e10>>2] = $288;
   $289 = +HEAPF32[$e10>>2];
   $290 = $289 > 9.9999999600419720025E-13;
   if ($290) {
    $291 = +HEAPF32[$en03>>2];
    $292 = HEAP32[$b>>2]|0;
    $293 = HEAP32[$sfb>>2]|0;
    $294 = HEAP32[$1>>2]|0;
    $295 = (($294) + 88|0);
    $296 = (($295) + (($293*12)|0)|0);
    $297 = (($296) + ($292<<2)|0);
    $298 = +HEAPF32[$297>>2];
    $299 = $291 * $298;
    $300 = +HEAPF32[$e10>>2];
    $301 = $299 / $300;
    HEAPF32[$x11>>2] = $301;
    $302 = HEAP32[$sfb>>2]|0;
    $303 = HEAP32[$0>>2]|0;
    $304 = (($303) + 84768|0);
    $305 = (($304) + 88|0);
    $306 = (($305) + ($302<<2)|0);
    $307 = +HEAPF32[$306>>2];
    $308 = +HEAPF32[$x11>>2];
    $309 = $308 * $307;
    HEAPF32[$x11>>2] = $309;
    $310 = +HEAPF32[$xmin4>>2];
    $311 = +HEAPF32[$x11>>2];
    $312 = $310 < $311;
    if ($312) {
     $313 = +HEAPF32[$x11>>2];
     HEAPF32[$xmin4>>2] = $313;
    }
   }
   $314 = +HEAPF32[$xmin4>>2];
   $315 = $314;
   $316 = $315 > 2.22044604925031308085E-16;
   if ($316) {
    $317 = +HEAPF32[$xmin4>>2];
    $318 = $317;
    $320 = $318;
   } else {
    $320 = 2.22044604925031308085E-16;
   }
   $319 = $320;
   HEAPF32[$xmin4>>2] = $319;
   $321 = +HEAPF32[$en03>>2];
   $322 = +HEAPF32[$xmin4>>2];
   $323 = $322 + 9.99999982451670044181E-15;
   $324 = $321 > $323;
   $325 = $324 ? 1 : 0;
   $326 = $325&255;
   $327 = HEAP32[$gsfb>>2]|0;
   $328 = HEAP32[$b>>2]|0;
   $329 = (($327) + ($328))|0;
   $330 = HEAP32[$2>>2]|0;
   $331 = (($330) + 5212|0);
   $332 = (($331) + ($329)|0);
   HEAP8[$332>>0] = $326;
   $333 = +HEAPF32[$xmin4>>2];
   $334 = HEAP32[$3>>2]|0;
   $335 = (($334) + 4|0);
   HEAP32[$3>>2] = $335;
   HEAPF32[$334>>2] = $333;
   $336 = HEAP32[$b>>2]|0;
   $337 = (($336) + 1)|0;
   HEAP32[$b>>2] = $337;
  }
  $338 = HEAP32[$cfg>>2]|0;
  $339 = (($338) + 76|0);
  $340 = HEAP32[$339>>2]|0;
  $341 = ($340|0)!=(0);
  if ($341) {
   $342 = HEAP32[$3>>2]|0;
   $343 = (($342) + -12|0);
   $344 = +HEAPF32[$343>>2];
   $345 = HEAP32[$3>>2]|0;
   $346 = (($345) + -8|0);
   $347 = +HEAPF32[$346>>2];
   $348 = $344 > $347;
   if ($348) {
    $349 = HEAP32[$3>>2]|0;
    $350 = (($349) + -12|0);
    $351 = +HEAPF32[$350>>2];
    $352 = HEAP32[$3>>2]|0;
    $353 = (($352) + -8|0);
    $354 = +HEAPF32[$353>>2];
    $355 = $351 - $354;
    $356 = HEAP32[$0>>2]|0;
    $357 = (($356) + 85800|0);
    $358 = HEAP32[$357>>2]|0;
    $359 = (($358) + 6496|0);
    $360 = +HEAPF32[$359>>2];
    $361 = $355 * $360;
    $362 = HEAP32[$3>>2]|0;
    $363 = (($362) + -8|0);
    $364 = +HEAPF32[$363>>2];
    $365 = $364 + $361;
    HEAPF32[$363>>2] = $365;
   }
   $366 = HEAP32[$3>>2]|0;
   $367 = (($366) + -8|0);
   $368 = +HEAPF32[$367>>2];
   $369 = HEAP32[$3>>2]|0;
   $370 = (($369) + -4|0);
   $371 = +HEAPF32[$370>>2];
   $372 = $368 > $371;
   if ($372) {
    $373 = HEAP32[$3>>2]|0;
    $374 = (($373) + -8|0);
    $375 = +HEAPF32[$374>>2];
    $376 = HEAP32[$3>>2]|0;
    $377 = (($376) + -4|0);
    $378 = +HEAPF32[$377>>2];
    $379 = $375 - $378;
    $380 = HEAP32[$0>>2]|0;
    $381 = (($380) + 85800|0);
    $382 = HEAP32[$381>>2]|0;
    $383 = (($382) + 6496|0);
    $384 = +HEAPF32[$383>>2];
    $385 = $379 * $384;
    $386 = HEAP32[$3>>2]|0;
    $387 = (($386) + -4|0);
    $388 = +HEAPF32[$387>>2];
    $389 = $388 + $385;
    HEAPF32[$387>>2] = $389;
   }
  }
  $390 = HEAP32[$sfb>>2]|0;
  $391 = (($390) + 1)|0;
  HEAP32[$sfb>>2] = $391;
  $392 = HEAP32[$gsfb>>2]|0;
  $393 = (($392) + 3)|0;
  HEAP32[$gsfb>>2] = $393;
 }
 $394 = HEAP32[$ath_over>>2]|0;
 STACKTOP = sp;return ($394|0);
}
function _calc_noise($cod_info,$l3_xmin,$distort,$res,$prev_noise) {
 $cod_info = $cod_info|0;
 $l3_xmin = $l3_xmin|0;
 $distort = $distort|0;
 $res = $res|0;
 $prev_noise = $prev_noise|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0.0, $112 = 0.0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0.0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0.0, $126 = 0.0, $127 = 0.0, $128 = 0.0, $129 = 0, $13 = 0, $130 = 0.0, $131 = 0.0, $132 = 0.0, $133 = 0.0;
 var $134 = 0.0, $135 = 0.0, $136 = 0, $137 = 0, $138 = 0.0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0.0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0.0, $153 = 0.0, $154 = 0.0, $155 = 0.0, $156 = 0.0, $157 = 0, $158 = 0.0, $159 = 0.0, $16 = 0, $160 = 0.0, $161 = 0.0, $162 = 0, $163 = 0, $164 = 0.0, $165 = 0.0, $166 = 0.0, $167 = 0.0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0.0, $18 = 0, $180 = 0.0, $181 = 0.0, $182 = 0.0, $183 = 0.0, $184 = 0, $185 = 0.0, $186 = 0.0, $187 = 0.0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0.0, $194 = 0, $195 = 0, $196 = 0.0, $197 = 0, $198 = 0.0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0.0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0.0, $72 = 0.0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0.0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0.0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $distort_ = 0, $j = 0, $l = 0, $max_noise = 0, $noise = 0, $over = 0, $over_noise_db = 0, $r_l3_xmin = 0, $s = 0, $scalefac = 0, $sfb = 0, $step = 0, $tmp = 0, $tot_noise_db = 0, $usefullsize = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0;
 $0 = sp + 76|0;
 $1 = sp + 72|0;
 $2 = sp + 68|0;
 $3 = sp + 64|0;
 $4 = sp + 60|0;
 $sfb = sp + 56|0;
 $l = sp + 52|0;
 $over = sp + 48|0;
 $over_noise_db = sp + 44|0;
 $tot_noise_db = sp + 40|0;
 $max_noise = sp + 36|0;
 $j = sp + 32|0;
 $scalefac = sp + 28|0;
 $s = sp + 24|0;
 $r_l3_xmin = sp + 20|0;
 $distort_ = sp + 16|0;
 $noise = sp + 12|0;
 $step = sp + 8|0;
 $usefullsize = sp + 4|0;
 $tmp = sp;
 HEAP32[$0>>2] = $cod_info;
 HEAP32[$1>>2] = $l3_xmin;
 HEAP32[$2>>2] = $distort;
 HEAP32[$3>>2] = $res;
 HEAP32[$4>>2] = $prev_noise;
 HEAP32[$over>>2] = 0;
 HEAPF32[$over_noise_db>>2] = 0.0;
 HEAPF32[$tot_noise_db>>2] = 0.0;
 HEAPF32[$max_noise>>2] = -20.0;
 HEAP32[$j>>2] = 0;
 $5 = HEAP32[$0>>2]|0;
 $6 = (($5) + 4608|0);
 HEAP32[$scalefac>>2] = $6;
 $7 = HEAP32[$3>>2]|0;
 $8 = (($7) + 16|0);
 HEAP32[$8>>2] = 0;
 HEAP32[$sfb>>2] = 0;
 while(1) {
  $9 = HEAP32[$sfb>>2]|0;
  $10 = HEAP32[$0>>2]|0;
  $11 = (($10) + 4864|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = ($9|0)<($12|0);
  if (!($13)) {
   break;
  }
  $14 = HEAP32[$0>>2]|0;
  $15 = (($14) + 4780|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = HEAP32[$scalefac>>2]|0;
  $18 = (($17) + 4|0);
  HEAP32[$scalefac>>2] = $18;
  $19 = HEAP32[$17>>2]|0;
  $20 = HEAP32[$0>>2]|0;
  $21 = (($20) + 4832|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = ($22|0)!=(0);
  if ($23) {
   $24 = HEAP32[$sfb>>2]|0;
   $25 = (21376 + ($24<<2)|0);
   $26 = HEAP32[$25>>2]|0;
   $28 = $26;
  } else {
   $28 = 0;
  }
  $27 = (($19) + ($28))|0;
  $29 = HEAP32[$0>>2]|0;
  $30 = (($29) + 4836|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = (($31) + 1)|0;
  $33 = $27 << $32;
  $34 = (($16) - ($33))|0;
  $35 = HEAP32[$sfb>>2]|0;
  $36 = HEAP32[$0>>2]|0;
  $37 = (($36) + 5028|0);
  $38 = (($37) + ($35<<2)|0);
  $39 = HEAP32[$38>>2]|0;
  $40 = HEAP32[$0>>2]|0;
  $41 = (($40) + 4808|0);
  $42 = (($41) + ($39<<2)|0);
  $43 = HEAP32[$42>>2]|0;
  $44 = $43<<3;
  $45 = (($34) - ($44))|0;
  HEAP32[$s>>2] = $45;
  $46 = HEAP32[$1>>2]|0;
  $47 = (($46) + 4|0);
  HEAP32[$1>>2] = $47;
  $48 = +HEAPF32[$46>>2];
  $49 = 1.0 / $48;
  HEAPF32[$r_l3_xmin>>2] = $49;
  HEAPF32[$distort_>>2] = 0.0;
  HEAPF32[$noise>>2] = 0.0;
  $50 = HEAP32[$4>>2]|0;
  $51 = ($50|0)!=(0|0);
  if ($51) {
   $52 = HEAP32[$sfb>>2]|0;
   $53 = HEAP32[$4>>2]|0;
   $54 = (($53) + 8|0);
   $55 = (($54) + ($52<<2)|0);
   $56 = HEAP32[$55>>2]|0;
   $57 = HEAP32[$s>>2]|0;
   $58 = ($56|0)==($57|0);
   if ($58) {
    $59 = HEAP32[$sfb>>2]|0;
    $60 = HEAP32[$0>>2]|0;
    $61 = (($60) + 4872|0);
    $62 = (($61) + ($59<<2)|0);
    $63 = HEAP32[$62>>2]|0;
    $64 = HEAP32[$j>>2]|0;
    $65 = (($64) + ($63))|0;
    HEAP32[$j>>2] = $65;
    $66 = +HEAPF32[$r_l3_xmin>>2];
    $67 = HEAP32[$sfb>>2]|0;
    $68 = HEAP32[$4>>2]|0;
    $69 = (($68) + 164|0);
    $70 = (($69) + ($67<<2)|0);
    $71 = +HEAPF32[$70>>2];
    $72 = $66 * $71;
    HEAPF32[$distort_>>2] = $72;
    $73 = HEAP32[$sfb>>2]|0;
    $74 = HEAP32[$4>>2]|0;
    $75 = (($74) + 320|0);
    $76 = (($75) + ($73<<2)|0);
    $77 = +HEAPF32[$76>>2];
    HEAPF32[$noise>>2] = $77;
   } else {
    label = 8;
   }
  } else {
   label = 8;
  }
  if ((label|0) == 8) {
   label = 0;
   $78 = HEAP32[$s>>2]|0;
   $79 = (($78) + 116)|0;
   $80 = (90000 + ($79<<2)|0);
   $81 = +HEAPF32[$80>>2];
   HEAPF32[$step>>2] = $81;
   $82 = HEAP32[$sfb>>2]|0;
   $83 = HEAP32[$0>>2]|0;
   $84 = (($83) + 4872|0);
   $85 = (($84) + ($82<<2)|0);
   $86 = HEAP32[$85>>2]|0;
   $87 = $86 >> 1;
   HEAP32[$l>>2] = $87;
   $88 = HEAP32[$j>>2]|0;
   $89 = HEAP32[$sfb>>2]|0;
   $90 = HEAP32[$0>>2]|0;
   $91 = (($90) + 4872|0);
   $92 = (($91) + ($89<<2)|0);
   $93 = HEAP32[$92>>2]|0;
   $94 = (($88) + ($93))|0;
   $95 = HEAP32[$0>>2]|0;
   $96 = (($95) + 5208|0);
   $97 = HEAP32[$96>>2]|0;
   $98 = ($94|0)>($97|0);
   do {
    if ($98) {
     $99 = HEAP32[$0>>2]|0;
     $100 = (($99) + 5208|0);
     $101 = HEAP32[$100>>2]|0;
     $102 = HEAP32[$j>>2]|0;
     $103 = (($101) - ($102))|0;
     $104 = (($103) + 1)|0;
     HEAP32[$usefullsize>>2] = $104;
     $105 = HEAP32[$usefullsize>>2]|0;
     $106 = ($105|0)>(0);
     if ($106) {
      $107 = HEAP32[$usefullsize>>2]|0;
      $108 = $107 >> 1;
      HEAP32[$l>>2] = $108;
      break;
     } else {
      HEAP32[$l>>2] = 0;
      break;
     }
    }
   } while(0);
   $109 = HEAP32[$0>>2]|0;
   $110 = HEAP32[$l>>2]|0;
   $111 = +HEAPF32[$step>>2];
   $112 = (+_calc_noise_core_c($109,$j,$110,$111));
   HEAPF32[$noise>>2] = $112;
   $113 = HEAP32[$4>>2]|0;
   $114 = ($113|0)!=(0|0);
   if ($114) {
    $115 = HEAP32[$s>>2]|0;
    $116 = HEAP32[$sfb>>2]|0;
    $117 = HEAP32[$4>>2]|0;
    $118 = (($117) + 8|0);
    $119 = (($118) + ($116<<2)|0);
    HEAP32[$119>>2] = $115;
    $120 = +HEAPF32[$noise>>2];
    $121 = HEAP32[$sfb>>2]|0;
    $122 = HEAP32[$4>>2]|0;
    $123 = (($122) + 164|0);
    $124 = (($123) + ($121<<2)|0);
    HEAPF32[$124>>2] = $120;
   }
   $125 = +HEAPF32[$r_l3_xmin>>2];
   $126 = +HEAPF32[$noise>>2];
   $127 = $125 * $126;
   HEAPF32[$distort_>>2] = $127;
   $128 = +HEAPF32[$distort_>>2];
   $129 = $128 > 9.99999968265522538896E-21;
   $130 = +HEAPF32[$distort_>>2];
   $131 = $129 ? $130 : 9.99999968265522538896E-21;
   $132 = (+_fast_log2($131));
   $133 = $132;
   $134 = $133 * 0.301029995663981142506;
   $135 = $134;
   HEAPF32[$noise>>2] = $135;
   $136 = HEAP32[$4>>2]|0;
   $137 = ($136|0)!=(0|0);
   if ($137) {
    $138 = +HEAPF32[$noise>>2];
    $139 = HEAP32[$sfb>>2]|0;
    $140 = HEAP32[$4>>2]|0;
    $141 = (($140) + 320|0);
    $142 = (($141) + ($139<<2)|0);
    HEAPF32[$142>>2] = $138;
   }
  }
  $143 = +HEAPF32[$distort_>>2];
  $144 = HEAP32[$2>>2]|0;
  $145 = (($144) + 4|0);
  HEAP32[$2>>2] = $145;
  HEAPF32[$144>>2] = $143;
  $146 = HEAP32[$4>>2]|0;
  $147 = ($146|0)!=(0|0);
  if ($147) {
   $148 = HEAP32[$0>>2]|0;
   $149 = (($148) + 4780|0);
   $150 = HEAP32[$149>>2]|0;
   $151 = HEAP32[$4>>2]|0;
   HEAP32[$151>>2] = $150;
  }
  $152 = +HEAPF32[$noise>>2];
  $153 = +HEAPF32[$tot_noise_db>>2];
  $154 = $153 + $152;
  HEAPF32[$tot_noise_db>>2] = $154;
  $155 = +HEAPF32[$noise>>2];
  $156 = $155;
  $157 = $156 > 0.0;
  if ($157) {
   $158 = +HEAPF32[$noise>>2];
   $159 = $158 * 10.0;
   $160 = $159;
   $161 = $160 + 0.5;
   $162 = (~~(($161)));
   $163 = ($162|0)>(1);
   if ($163) {
    $164 = +HEAPF32[$noise>>2];
    $165 = $164 * 10.0;
    $166 = $165;
    $167 = $166 + 0.5;
    $168 = (~~(($167)));
    $169 = $168;
   } else {
    $169 = 1;
   }
   HEAP32[$tmp>>2] = $169;
   $170 = HEAP32[$tmp>>2]|0;
   $171 = HEAP32[$tmp>>2]|0;
   $172 = Math_imul($170, $171)|0;
   $173 = HEAP32[$3>>2]|0;
   $174 = (($173) + 16|0);
   $175 = HEAP32[$174>>2]|0;
   $176 = (($175) + ($172))|0;
   HEAP32[$174>>2] = $176;
   $177 = HEAP32[$over>>2]|0;
   $178 = (($177) + 1)|0;
   HEAP32[$over>>2] = $178;
   $179 = +HEAPF32[$noise>>2];
   $180 = +HEAPF32[$over_noise_db>>2];
   $181 = $180 + $179;
   HEAPF32[$over_noise_db>>2] = $181;
  }
  $182 = +HEAPF32[$max_noise>>2];
  $183 = +HEAPF32[$noise>>2];
  $184 = $182 > $183;
  $185 = +HEAPF32[$max_noise>>2];
  $186 = +HEAPF32[$noise>>2];
  $187 = $184 ? $185 : $186;
  HEAPF32[$max_noise>>2] = $187;
  $188 = HEAP32[$sfb>>2]|0;
  $189 = (($188) + 1)|0;
  HEAP32[$sfb>>2] = $189;
 }
 $190 = HEAP32[$over>>2]|0;
 $191 = HEAP32[$3>>2]|0;
 $192 = (($191) + 12|0);
 HEAP32[$192>>2] = $190;
 $193 = +HEAPF32[$tot_noise_db>>2];
 $194 = HEAP32[$3>>2]|0;
 $195 = (($194) + 4|0);
 HEAPF32[$195>>2] = $193;
 $196 = +HEAPF32[$over_noise_db>>2];
 $197 = HEAP32[$3>>2]|0;
 HEAPF32[$197>>2] = $196;
 $198 = +HEAPF32[$max_noise>>2];
 $199 = HEAP32[$3>>2]|0;
 $200 = (($199) + 8|0);
 HEAPF32[$200>>2] = $198;
 $201 = HEAP32[$over>>2]|0;
 STACKTOP = sp;return ($201|0);
}
function _calc_noise_core_c($cod_info,$startline,$l,$step) {
 $cod_info = $cod_info|0;
 $startline = $startline|0;
 $l = $l|0;
 $step = +$step;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0.0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0.0, $107 = 0.0, $108 = 0.0, $109 = 0.0, $11 = 0, $110 = 0.0, $111 = 0.0, $112 = 0, $113 = 0, $114 = 0.0, $115 = 0.0;
 var $116 = 0.0, $117 = 0.0, $118 = 0.0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0.0, $123 = 0.0, $124 = 0.0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0.0, $131 = 0.0, $132 = 0.0, $133 = 0.0;
 var $134 = 0.0, $135 = 0.0, $136 = 0, $137 = 0, $138 = 0.0, $139 = 0.0, $14 = 0, $140 = 0.0, $141 = 0.0, $142 = 0.0, $143 = 0, $144 = 0, $145 = 0.0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0.0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0.0, $31 = 0, $32 = 0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0.0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0.0, $6 = 0, $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0, $64 = 0, $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0.0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0.0, $74 = 0.0, $75 = 0.0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0.0, $82 = 0.0, $83 = 0.0, $84 = 0.0, $85 = 0, $86 = 0, $87 = 0.0, $88 = 0.0, $89 = 0.0, $9 = 0, $90 = 0.0, $91 = 0.0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0.0, $99 = 0.0, $ix = 0, $ix01 = 0, $j = 0, $noise = 0, $temp = 0, $temp1 = 0, $temp2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $0 = sp + 44|0;
 $1 = sp + 40|0;
 $2 = sp + 36|0;
 $3 = sp + 32|0;
 $noise = sp + 28|0;
 $j = sp + 24|0;
 $ix = sp + 20|0;
 $temp = sp + 16|0;
 $ix01 = sp + 8|0;
 $temp1 = sp + 4|0;
 $temp2 = sp;
 HEAP32[$0>>2] = $cod_info;
 HEAP32[$1>>2] = $startline;
 HEAP32[$2>>2] = $l;
 HEAPF32[$3>>2] = $step;
 HEAPF32[$noise>>2] = 0.0;
 $4 = HEAP32[$1>>2]|0;
 $5 = HEAP32[$4>>2]|0;
 HEAP32[$j>>2] = $5;
 $6 = HEAP32[$0>>2]|0;
 $7 = (($6) + 2304|0);
 HEAP32[$ix>>2] = $7;
 $8 = HEAP32[$j>>2]|0;
 $9 = HEAP32[$0>>2]|0;
 $10 = (($9) + 4776|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($8|0)>($11|0);
 if ($12) {
  while(1) {
   $13 = HEAP32[$2>>2]|0;
   $14 = (($13) + -1)|0;
   HEAP32[$2>>2] = $14;
   $15 = ($13|0)!=(0);
   if (!($15)) {
    break;
   }
   $16 = HEAP32[$j>>2]|0;
   $17 = HEAP32[$0>>2]|0;
   $18 = (($17) + ($16<<2)|0);
   $19 = +HEAPF32[$18>>2];
   HEAPF32[$temp>>2] = $19;
   $20 = HEAP32[$j>>2]|0;
   $21 = (($20) + 1)|0;
   HEAP32[$j>>2] = $21;
   $22 = +HEAPF32[$temp>>2];
   $23 = +HEAPF32[$temp>>2];
   $24 = $22 * $23;
   $25 = +HEAPF32[$noise>>2];
   $26 = $25 + $24;
   HEAPF32[$noise>>2] = $26;
   $27 = HEAP32[$j>>2]|0;
   $28 = HEAP32[$0>>2]|0;
   $29 = (($28) + ($27<<2)|0);
   $30 = +HEAPF32[$29>>2];
   HEAPF32[$temp>>2] = $30;
   $31 = HEAP32[$j>>2]|0;
   $32 = (($31) + 1)|0;
   HEAP32[$j>>2] = $32;
   $33 = +HEAPF32[$temp>>2];
   $34 = +HEAPF32[$temp>>2];
   $35 = $33 * $34;
   $36 = +HEAPF32[$noise>>2];
   $37 = $36 + $35;
   HEAPF32[$noise>>2] = $37;
  }
  $143 = HEAP32[$j>>2]|0;
  $144 = HEAP32[$1>>2]|0;
  HEAP32[$144>>2] = $143;
  $145 = +HEAPF32[$noise>>2];
  STACKTOP = sp;return (+$145);
 }
 $38 = HEAP32[$j>>2]|0;
 $39 = HEAP32[$0>>2]|0;
 $40 = (($39) + 4772|0);
 $41 = HEAP32[$40>>2]|0;
 $42 = ($38|0)>($41|0);
 if (!($42)) {
  while(1) {
   $92 = HEAP32[$2>>2]|0;
   $93 = (($92) + -1)|0;
   HEAP32[$2>>2] = $93;
   $94 = ($92|0)!=(0);
   if (!($94)) {
    break;
   }
   $95 = HEAP32[$j>>2]|0;
   $96 = HEAP32[$0>>2]|0;
   $97 = (($96) + ($95<<2)|0);
   $98 = +HEAPF32[$97>>2];
   $99 = $98;
   $100 = (+Math_abs((+$99)));
   $101 = HEAP32[$j>>2]|0;
   $102 = HEAP32[$ix>>2]|0;
   $103 = (($102) + ($101<<2)|0);
   $104 = HEAP32[$103>>2]|0;
   $105 = (23304 + ($104<<2)|0);
   $106 = +HEAPF32[$105>>2];
   $107 = +HEAPF32[$3>>2];
   $108 = $106 * $107;
   $109 = $108;
   $110 = $100 - $109;
   $111 = $110;
   HEAPF32[$temp2>>2] = $111;
   $112 = HEAP32[$j>>2]|0;
   $113 = (($112) + 1)|0;
   HEAP32[$j>>2] = $113;
   $114 = +HEAPF32[$temp2>>2];
   $115 = +HEAPF32[$temp2>>2];
   $116 = $114 * $115;
   $117 = +HEAPF32[$noise>>2];
   $118 = $117 + $116;
   HEAPF32[$noise>>2] = $118;
   $119 = HEAP32[$j>>2]|0;
   $120 = HEAP32[$0>>2]|0;
   $121 = (($120) + ($119<<2)|0);
   $122 = +HEAPF32[$121>>2];
   $123 = $122;
   $124 = (+Math_abs((+$123)));
   $125 = HEAP32[$j>>2]|0;
   $126 = HEAP32[$ix>>2]|0;
   $127 = (($126) + ($125<<2)|0);
   $128 = HEAP32[$127>>2]|0;
   $129 = (23304 + ($128<<2)|0);
   $130 = +HEAPF32[$129>>2];
   $131 = +HEAPF32[$3>>2];
   $132 = $130 * $131;
   $133 = $132;
   $134 = $124 - $133;
   $135 = $134;
   HEAPF32[$temp2>>2] = $135;
   $136 = HEAP32[$j>>2]|0;
   $137 = (($136) + 1)|0;
   HEAP32[$j>>2] = $137;
   $138 = +HEAPF32[$temp2>>2];
   $139 = +HEAPF32[$temp2>>2];
   $140 = $138 * $139;
   $141 = +HEAPF32[$noise>>2];
   $142 = $141 + $140;
   HEAPF32[$noise>>2] = $142;
  }
  $143 = HEAP32[$j>>2]|0;
  $144 = HEAP32[$1>>2]|0;
  HEAP32[$144>>2] = $143;
  $145 = +HEAPF32[$noise>>2];
  STACKTOP = sp;return (+$145);
 }
 HEAPF32[$ix01>>2] = 0.0;
 $43 = +HEAPF32[$3>>2];
 $44 = (($ix01) + 4|0);
 HEAPF32[$44>>2] = $43;
 while(1) {
  $45 = HEAP32[$2>>2]|0;
  $46 = (($45) + -1)|0;
  HEAP32[$2>>2] = $46;
  $47 = ($45|0)!=(0);
  if (!($47)) {
   break;
  }
  $48 = HEAP32[$j>>2]|0;
  $49 = HEAP32[$0>>2]|0;
  $50 = (($49) + ($48<<2)|0);
  $51 = +HEAPF32[$50>>2];
  $52 = $51;
  $53 = (+Math_abs((+$52)));
  $54 = HEAP32[$j>>2]|0;
  $55 = HEAP32[$ix>>2]|0;
  $56 = (($55) + ($54<<2)|0);
  $57 = HEAP32[$56>>2]|0;
  $58 = (($ix01) + ($57<<2)|0);
  $59 = +HEAPF32[$58>>2];
  $60 = $59;
  $61 = $53 - $60;
  $62 = $61;
  HEAPF32[$temp1>>2] = $62;
  $63 = HEAP32[$j>>2]|0;
  $64 = (($63) + 1)|0;
  HEAP32[$j>>2] = $64;
  $65 = +HEAPF32[$temp1>>2];
  $66 = +HEAPF32[$temp1>>2];
  $67 = $65 * $66;
  $68 = +HEAPF32[$noise>>2];
  $69 = $68 + $67;
  HEAPF32[$noise>>2] = $69;
  $70 = HEAP32[$j>>2]|0;
  $71 = HEAP32[$0>>2]|0;
  $72 = (($71) + ($70<<2)|0);
  $73 = +HEAPF32[$72>>2];
  $74 = $73;
  $75 = (+Math_abs((+$74)));
  $76 = HEAP32[$j>>2]|0;
  $77 = HEAP32[$ix>>2]|0;
  $78 = (($77) + ($76<<2)|0);
  $79 = HEAP32[$78>>2]|0;
  $80 = (($ix01) + ($79<<2)|0);
  $81 = +HEAPF32[$80>>2];
  $82 = $81;
  $83 = $75 - $82;
  $84 = $83;
  HEAPF32[$temp1>>2] = $84;
  $85 = HEAP32[$j>>2]|0;
  $86 = (($85) + 1)|0;
  HEAP32[$j>>2] = $86;
  $87 = +HEAPF32[$temp1>>2];
  $88 = +HEAPF32[$temp1>>2];
  $89 = $87 * $88;
  $90 = +HEAPF32[$noise>>2];
  $91 = $90 + $89;
  HEAPF32[$noise>>2] = $91;
 }
 $143 = HEAP32[$j>>2]|0;
 $144 = HEAP32[$1>>2]|0;
 HEAP32[$144>>2] = $143;
 $145 = +HEAPF32[$noise>>2];
 STACKTOP = sp;return (+$145);
}
function _set_frame_pinfo($gfc,$ratio) {
 $gfc = $gfc|0;
 $ratio = $ratio|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $7 = 0, $8 = 0, $9 = 0, $cfg = 0, $ch = 0, $cod_info = 0, $gr = 0, $scalefac_sav = 0, $sfb = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 192|0;
 $0 = sp + 180|0;
 $1 = sp + 176|0;
 $cfg = sp + 172|0;
 $ch = sp + 168|0;
 $gr = sp + 164|0;
 $cod_info = sp + 160|0;
 $scalefac_sav = sp + 4|0;
 $sfb = sp;
 HEAP32[$0>>2] = $gfc;
 HEAP32[$1>>2] = $ratio;
 $2 = HEAP32[$0>>2]|0;
 $3 = (($2) + 16|0);
 HEAP32[$cfg>>2] = $3;
 HEAP32[$gr>>2] = 0;
 while(1) {
  $4 = HEAP32[$gr>>2]|0;
  $5 = HEAP32[$cfg>>2]|0;
  $6 = (($5) + 60|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ($4|0)<($7|0);
  if (!($8)) {
   break;
  }
  HEAP32[$ch>>2] = 0;
  while(1) {
   $9 = HEAP32[$ch>>2]|0;
   $10 = HEAP32[$cfg>>2]|0;
   $11 = (($10) + 56|0);
   $12 = HEAP32[$11>>2]|0;
   $13 = ($9|0)<($12|0);
   if (!($13)) {
    break;
   }
   $14 = HEAP32[$ch>>2]|0;
   $15 = HEAP32[$gr>>2]|0;
   $16 = HEAP32[$0>>2]|0;
   $17 = (($16) + 304|0);
   $18 = (($17) + (($15*10504)|0)|0);
   $19 = (($18) + (($14*5252)|0)|0);
   HEAP32[$cod_info>>2] = $19;
   $20 = HEAP32[$cod_info>>2]|0;
   $21 = (($20) + 4608|0);
   _memcpy(($scalefac_sav|0),($21|0),156)|0;
   $22 = HEAP32[$gr>>2]|0;
   $23 = ($22|0)==(1);
   L7: do {
    if ($23) {
     HEAP32[$sfb>>2] = 0;
     while(1) {
      $24 = HEAP32[$sfb>>2]|0;
      $25 = HEAP32[$cod_info>>2]|0;
      $26 = (($25) + 4848|0);
      $27 = HEAP32[$26>>2]|0;
      $28 = ($24|0)<($27|0);
      if (!($28)) {
       break L7;
      }
      $29 = HEAP32[$sfb>>2]|0;
      $30 = HEAP32[$cod_info>>2]|0;
      $31 = (($30) + 4608|0);
      $32 = (($31) + ($29<<2)|0);
      $33 = HEAP32[$32>>2]|0;
      $34 = ($33|0)<(0);
      if ($34) {
       $35 = HEAP32[$sfb>>2]|0;
       $36 = HEAP32[$ch>>2]|0;
       $37 = HEAP32[$0>>2]|0;
       $38 = (($37) + 304|0);
       $39 = (($38) + (($36*5252)|0)|0);
       $40 = (($39) + 4608|0);
       $41 = (($40) + ($35<<2)|0);
       $42 = HEAP32[$41>>2]|0;
       $43 = HEAP32[$sfb>>2]|0;
       $44 = HEAP32[$cod_info>>2]|0;
       $45 = (($44) + 4608|0);
       $46 = (($45) + ($43<<2)|0);
       HEAP32[$46>>2] = $42;
      }
      $47 = HEAP32[$sfb>>2]|0;
      $48 = (($47) + 1)|0;
      HEAP32[$sfb>>2] = $48;
     }
    }
   } while(0);
   $49 = HEAP32[$0>>2]|0;
   $50 = HEAP32[$cod_info>>2]|0;
   $51 = HEAP32[$ch>>2]|0;
   $52 = HEAP32[$gr>>2]|0;
   $53 = HEAP32[$1>>2]|0;
   $54 = (($53) + (($52*976)|0)|0);
   $55 = (($54) + (($51*488)|0)|0);
   $56 = HEAP32[$gr>>2]|0;
   $57 = HEAP32[$ch>>2]|0;
   _set_pinfo($49,$50,$55,$56,$57);
   $58 = HEAP32[$cod_info>>2]|0;
   $59 = (($58) + 4608|0);
   _memcpy(($59|0),($scalefac_sav|0),156)|0;
   $60 = HEAP32[$ch>>2]|0;
   $61 = (($60) + 1)|0;
   HEAP32[$ch>>2] = $61;
  }
  $62 = HEAP32[$gr>>2]|0;
  $63 = (($62) + 1)|0;
  HEAP32[$gr>>2] = $63;
 }
 STACKTOP = sp;return;
}
function _set_pinfo($gfc,$cod_info,$ratio,$gr,$ch) {
 $gfc = $gfc|0;
 $cod_info = $cod_info|0;
 $ratio = $ratio|0;
 $gr = $gr|0;
 $ch = $ch|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0.0, $109 = 0, $11 = 0.0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0.0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0.0, $12 = 0.0, $120 = 0.0, $121 = 0.0, $122 = 0.0, $123 = 0, $124 = 0, $125 = 0, $126 = 0.0, $127 = 0.0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0.0, $135 = 0, $136 = 0.0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0.0, $141 = 0.0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0.0, $149 = 0.0, $15 = 0, $150 = 0.0, $151 = 0.0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0.0, $179 = 0.0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0.0, $184 = 0.0, $185 = 0.0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0.0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0.0, $204 = 0.0, $205 = 0.0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0.0, $217 = 0.0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0.0, $256 = 0, $257 = 0, $258 = 0, $259 = 0.0, $26 = 0;
 var $260 = 0.0, $261 = 0.0, $262 = 0.0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0.0, $268 = 0, $269 = 0.0, $27 = 0, $270 = 0.0, $271 = 0.0, $272 = 0, $273 = 0.0, $274 = 0, $275 = 0.0, $276 = 0.0, $277 = 0.0, $278 = 0.0;
 var $279 = 0.0, $28 = 0, $280 = 0.0, $281 = 0.0, $282 = 0.0, $283 = 0.0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0.0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0.0, $301 = 0.0, $302 = 0, $303 = 0, $304 = 0.0, $305 = 0.0, $306 = 0, $307 = 0.0, $308 = 0.0, $309 = 0.0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0.0, $331 = 0;
 var $332 = 0.0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0.0, $341 = 0.0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0.0, $351 = 0.0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0.0, $359 = 0.0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0.0, $367 = 0, $368 = 0.0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0.0, $376 = 0.0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0.0, $384 = 0.0, $385 = 0.0, $386 = 0.0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0.0, $406 = 0.0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0.0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0.0, $428 = 0.0, $429 = 0.0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0.0, $444 = 0.0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0;
 var $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0;
 var $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0.0, $5 = 0, $50 = 0, $500 = 0.0, $501 = 0.0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0.0, $511 = 0.0;
 var $512 = 0.0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0.0, $523 = 0.0, $524 = 0.0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0.0;
 var $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $55 = 0, $56 = 0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0;
 var $60 = 0.0, $61 = 0, $62 = 0, $63 = 0, $64 = 0.0, $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0.0, $7 = 0, $70 = 0.0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0.0, $82 = 0, $83 = 0, $84 = 0.0, $85 = 0.0, $86 = 0, $87 = 0, $88 = 0.0, $89 = 0.0, $9 = 0, $90 = 0, $91 = 0.0, $92 = 0.0, $93 = 0.0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $bw = 0, $cfg = 0, $en0 = 0, $en1 = 0, $end = 0, $i = 0, $ifqstep = 0, $j = 0, $l = 0, $l3_xmin = 0, $noise = 0, $scalefac = 0, $sfb = 0, $sfb2 = 0, $start = 0, $xfsf = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 416|0;
 $0 = sp + 404|0;
 $1 = sp + 400|0;
 $2 = sp + 396|0;
 $3 = sp + 392|0;
 $4 = sp + 388|0;
 $cfg = sp + 384|0;
 $sfb = sp + 380|0;
 $sfb2 = sp + 376|0;
 $j = sp + 372|0;
 $i = sp + 368|0;
 $l = sp + 364|0;
 $start = sp + 360|0;
 $end = sp + 356|0;
 $bw = sp + 352|0;
 $en0 = sp + 348|0;
 $en1 = sp + 344|0;
 $ifqstep = sp + 340|0;
 $scalefac = sp + 336|0;
 $l3_xmin = sp + 180|0;
 $xfsf = sp + 24|0;
 $noise = sp;
 HEAP32[$0>>2] = $gfc;
 HEAP32[$1>>2] = $cod_info;
 HEAP32[$2>>2] = $ratio;
 HEAP32[$3>>2] = $gr;
 HEAP32[$4>>2] = $ch;
 $5 = HEAP32[$0>>2]|0;
 $6 = (($5) + 16|0);
 HEAP32[$cfg>>2] = $6;
 $7 = HEAP32[$1>>2]|0;
 $8 = (($7) + 4836|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)==(0);
 $11 = $10 ? 0.5 : 1.0;
 $12 = $11;
 HEAPF32[$ifqstep>>2] = $12;
 $13 = HEAP32[$1>>2]|0;
 $14 = (($13) + 4608|0);
 HEAP32[$scalefac>>2] = $14;
 $15 = HEAP32[$0>>2]|0;
 $16 = HEAP32[$2>>2]|0;
 $17 = HEAP32[$1>>2]|0;
 (_calc_xmin($15,$16,$17,$l3_xmin)|0);
 $18 = HEAP32[$1>>2]|0;
 (_calc_noise($18,$l3_xmin,$xfsf,$noise,0)|0);
 HEAP32[$j>>2] = 0;
 $19 = HEAP32[$1>>2]|0;
 $20 = (($19) + 4848|0);
 $21 = HEAP32[$20>>2]|0;
 HEAP32[$sfb2>>2] = $21;
 $22 = HEAP32[$1>>2]|0;
 $23 = (($22) + 4788|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = ($24|0)!=(2);
 if ($25) {
  $26 = HEAP32[$1>>2]|0;
  $27 = (($26) + 4792|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = ($28|0)!=(0);
  if (!($29)) {
   HEAP32[$sfb2>>2] = 22;
  }
 }
 HEAP32[$sfb>>2] = 0;
 while(1) {
  $30 = HEAP32[$sfb>>2]|0;
  $31 = HEAP32[$sfb2>>2]|0;
  $32 = ($30|0)<($31|0);
  if (!($32)) {
   break;
  }
  $33 = HEAP32[$sfb>>2]|0;
  $34 = HEAP32[$0>>2]|0;
  $35 = (($34) + 21360|0);
  $36 = (($35) + ($33<<2)|0);
  $37 = HEAP32[$36>>2]|0;
  HEAP32[$start>>2] = $37;
  $38 = HEAP32[$sfb>>2]|0;
  $39 = (($38) + 1)|0;
  $40 = HEAP32[$0>>2]|0;
  $41 = (($40) + 21360|0);
  $42 = (($41) + ($39<<2)|0);
  $43 = HEAP32[$42>>2]|0;
  HEAP32[$end>>2] = $43;
  $44 = HEAP32[$end>>2]|0;
  $45 = HEAP32[$start>>2]|0;
  $46 = (($44) - ($45))|0;
  HEAP32[$bw>>2] = $46;
  HEAPF32[$en0>>2] = 0.0;
  while(1) {
   $47 = HEAP32[$j>>2]|0;
   $48 = HEAP32[$end>>2]|0;
   $49 = ($47|0)<($48|0);
   if (!($49)) {
    break;
   }
   $50 = HEAP32[$j>>2]|0;
   $51 = HEAP32[$1>>2]|0;
   $52 = (($51) + ($50<<2)|0);
   $53 = +HEAPF32[$52>>2];
   $54 = HEAP32[$j>>2]|0;
   $55 = HEAP32[$1>>2]|0;
   $56 = (($55) + ($54<<2)|0);
   $57 = +HEAPF32[$56>>2];
   $58 = $53 * $57;
   $59 = +HEAPF32[$en0>>2];
   $60 = $59 + $58;
   HEAPF32[$en0>>2] = $60;
   $61 = HEAP32[$j>>2]|0;
   $62 = (($61) + 1)|0;
   HEAP32[$j>>2] = $62;
  }
  $63 = HEAP32[$bw>>2]|0;
  $64 = (+($63|0));
  $65 = +HEAPF32[$en0>>2];
  $66 = $65 / $64;
  HEAPF32[$en0>>2] = $66;
  HEAPF32[$en1>>2] = 999999986991104.0;
  $67 = +HEAPF32[$en1>>2];
  $68 = +HEAPF32[$en0>>2];
  $69 = $67 * $68;
  $70 = $69;
  $71 = HEAP32[$sfb>>2]|0;
  $72 = HEAP32[$4>>2]|0;
  $73 = HEAP32[$3>>2]|0;
  $74 = HEAP32[$0>>2]|0;
  $75 = (($74) + 85804|0);
  $76 = HEAP32[$75>>2]|0;
  $77 = (($76) + 190712|0);
  $78 = (($77) + (($73*704)|0)|0);
  $79 = (($78) + (($72*176)|0)|0);
  $80 = (($79) + ($71<<3)|0);
  HEAPF64[$80>>3] = $70;
  $81 = +HEAPF32[$en1>>2];
  $82 = HEAP32[$sfb>>2]|0;
  $83 = (($l3_xmin) + ($82<<2)|0);
  $84 = +HEAPF32[$83>>2];
  $85 = $81 * $84;
  $86 = HEAP32[$sfb>>2]|0;
  $87 = (($xfsf) + ($86<<2)|0);
  $88 = +HEAPF32[$87>>2];
  $89 = $85 * $88;
  $90 = HEAP32[$bw>>2]|0;
  $91 = (+($90|0));
  $92 = $89 / $91;
  $93 = $92;
  $94 = HEAP32[$sfb>>2]|0;
  $95 = HEAP32[$4>>2]|0;
  $96 = HEAP32[$3>>2]|0;
  $97 = HEAP32[$0>>2]|0;
  $98 = (($97) + 85804|0);
  $99 = HEAP32[$98>>2]|0;
  $100 = (($99) + 201208|0);
  $101 = (($100) + (($96*352)|0)|0);
  $102 = (($101) + (($95*176)|0)|0);
  $103 = (($102) + ($94<<3)|0);
  HEAPF64[$103>>3] = $93;
  $104 = HEAP32[$sfb>>2]|0;
  $105 = HEAP32[$2>>2]|0;
  $106 = (($105) + 244|0);
  $107 = (($106) + ($104<<2)|0);
  $108 = +HEAPF32[$107>>2];
  $109 = $108 > 0.0;
  if ($109) {
   $110 = HEAP32[$cfg>>2]|0;
   $111 = (($110) + 196|0);
   $112 = HEAP32[$111>>2]|0;
   $113 = ($112|0)!=(0);
   if ($113) {
    label = 12;
   } else {
    $114 = +HEAPF32[$en0>>2];
    $115 = HEAP32[$sfb>>2]|0;
    $116 = HEAP32[$2>>2]|0;
    $117 = (($116) + 244|0);
    $118 = (($117) + ($115<<2)|0);
    $119 = +HEAPF32[$118>>2];
    $120 = $114 / $119;
    HEAPF32[$en0>>2] = $120;
   }
  } else {
   label = 12;
  }
  if ((label|0) == 12) {
   label = 0;
   HEAPF32[$en0>>2] = 0.0;
  }
  $121 = +HEAPF32[$en1>>2];
  $122 = +HEAPF32[$en0>>2];
  $123 = HEAP32[$sfb>>2]|0;
  $124 = HEAP32[$2>>2]|0;
  $125 = (($124) + ($123<<2)|0);
  $126 = +HEAPF32[$125>>2];
  $127 = $122 * $126;
  $128 = HEAP32[$sfb>>2]|0;
  $129 = HEAP32[$0>>2]|0;
  $130 = (($129) + 85796|0);
  $131 = HEAP32[$130>>2]|0;
  $132 = (($131) + 24|0);
  $133 = (($132) + ($128<<2)|0);
  $134 = +HEAPF32[$133>>2];
  $135 = $127 > $134;
  if ($135) {
   $136 = +HEAPF32[$en0>>2];
   $137 = HEAP32[$sfb>>2]|0;
   $138 = HEAP32[$2>>2]|0;
   $139 = (($138) + ($137<<2)|0);
   $140 = +HEAPF32[$139>>2];
   $141 = $136 * $140;
   $150 = $141;
  } else {
   $142 = HEAP32[$sfb>>2]|0;
   $143 = HEAP32[$0>>2]|0;
   $144 = (($143) + 85796|0);
   $145 = HEAP32[$144>>2]|0;
   $146 = (($145) + 24|0);
   $147 = (($146) + ($142<<2)|0);
   $148 = +HEAPF32[$147>>2];
   $150 = $148;
  }
  $149 = $121 * $150;
  $151 = $149;
  $152 = HEAP32[$sfb>>2]|0;
  $153 = HEAP32[$4>>2]|0;
  $154 = HEAP32[$3>>2]|0;
  $155 = HEAP32[$0>>2]|0;
  $156 = (($155) + 85804|0);
  $157 = HEAP32[$156>>2]|0;
  $158 = (($157) + 189304|0);
  $159 = (($158) + (($154*704)|0)|0);
  $160 = (($159) + (($153*176)|0)|0);
  $161 = (($160) + ($152<<3)|0);
  HEAPF64[$161>>3] = $151;
  $162 = HEAP32[$sfb>>2]|0;
  $163 = HEAP32[$4>>2]|0;
  $164 = HEAP32[$3>>2]|0;
  $165 = HEAP32[$0>>2]|0;
  $166 = (($165) + 85804|0);
  $167 = HEAP32[$166>>2]|0;
  $168 = (($167) + 199160|0);
  $169 = (($168) + (($164*352)|0)|0);
  $170 = (($169) + (($163*176)|0)|0);
  $171 = (($170) + ($162<<3)|0);
  HEAPF64[$171>>3] = 0.0;
  $172 = HEAP32[$1>>2]|0;
  $173 = (($172) + 4832|0);
  $174 = HEAP32[$173>>2]|0;
  $175 = ($174|0)!=(0);
  if ($175) {
   $176 = HEAP32[$sfb>>2]|0;
   $177 = ($176|0)>=(11);
   if ($177) {
    $178 = +HEAPF32[$ifqstep>>2];
    $179 = -$178;
    $180 = HEAP32[$sfb>>2]|0;
    $181 = (21376 + ($180<<2)|0);
    $182 = HEAP32[$181>>2]|0;
    $183 = (+($182|0));
    $184 = $179 * $183;
    $185 = $184;
    $186 = HEAP32[$sfb>>2]|0;
    $187 = HEAP32[$4>>2]|0;
    $188 = HEAP32[$3>>2]|0;
    $189 = HEAP32[$0>>2]|0;
    $190 = (($189) + 85804|0);
    $191 = HEAP32[$190>>2]|0;
    $192 = (($191) + 199160|0);
    $193 = (($192) + (($188*352)|0)|0);
    $194 = (($193) + (($187*176)|0)|0);
    $195 = (($194) + ($186<<3)|0);
    HEAPF64[$195>>3] = $185;
   }
  }
  $196 = HEAP32[$sfb>>2]|0;
  $197 = ($196|0)<(21);
  if ($197) {
   $198 = +HEAPF32[$ifqstep>>2];
   $199 = HEAP32[$sfb>>2]|0;
   $200 = HEAP32[$scalefac>>2]|0;
   $201 = (($200) + ($199<<2)|0);
   $202 = HEAP32[$201>>2]|0;
   $203 = (+($202|0));
   $204 = $198 * $203;
   $205 = $204;
   $206 = HEAP32[$sfb>>2]|0;
   $207 = HEAP32[$4>>2]|0;
   $208 = HEAP32[$3>>2]|0;
   $209 = HEAP32[$0>>2]|0;
   $210 = (($209) + 85804|0);
   $211 = HEAP32[$210>>2]|0;
   $212 = (($211) + 199160|0);
   $213 = (($212) + (($208*352)|0)|0);
   $214 = (($213) + (($207*176)|0)|0);
   $215 = (($214) + ($206<<3)|0);
   $216 = +HEAPF64[$215>>3];
   $217 = $216 - $205;
   HEAPF64[$215>>3] = $217;
  }
  $218 = HEAP32[$sfb>>2]|0;
  $219 = (($218) + 1)|0;
  HEAP32[$sfb>>2] = $219;
 }
 $220 = HEAP32[$1>>2]|0;
 $221 = (($220) + 4788|0);
 $222 = HEAP32[$221>>2]|0;
 $223 = ($222|0)==(2);
 if (!($223)) {
  $451 = HEAP32[$1>>2]|0;
  $452 = (($451) + 4780|0);
  $453 = HEAP32[$452>>2]|0;
  $454 = HEAP32[$4>>2]|0;
  $455 = HEAP32[$3>>2]|0;
  $456 = HEAP32[$0>>2]|0;
  $457 = (($456) + 85804|0);
  $458 = HEAP32[$457>>2]|0;
  $459 = (($458) + 201112|0);
  $460 = (($459) + ($455<<3)|0);
  $461 = (($460) + ($454<<2)|0);
  HEAP32[$461>>2] = $453;
  $462 = HEAP32[$1>>2]|0;
  $463 = (($462) + 4768|0);
  $464 = HEAP32[$463>>2]|0;
  $465 = HEAP32[$1>>2]|0;
  $466 = (($465) + 4844|0);
  $467 = HEAP32[$466>>2]|0;
  $468 = (($464) + ($467))|0;
  $469 = HEAP32[$4>>2]|0;
  $470 = HEAP32[$3>>2]|0;
  $471 = HEAP32[$0>>2]|0;
  $472 = (($471) + 85804|0);
  $473 = HEAP32[$472>>2]|0;
  $474 = (($473) + 203400|0);
  $475 = (($474) + ($470<<3)|0);
  $476 = (($475) + ($469<<2)|0);
  HEAP32[$476>>2] = $468;
  $477 = HEAP32[$1>>2]|0;
  $478 = (($477) + 4844|0);
  $479 = HEAP32[$478>>2]|0;
  $480 = HEAP32[$4>>2]|0;
  $481 = HEAP32[$3>>2]|0;
  $482 = HEAP32[$0>>2]|0;
  $483 = (($482) + 85804|0);
  $484 = HEAP32[$483>>2]|0;
  $485 = (($484) + 203416|0);
  $486 = (($485) + ($481<<3)|0);
  $487 = (($486) + ($480<<2)|0);
  HEAP32[$487>>2] = $479;
  $488 = (($noise) + 12|0);
  $489 = HEAP32[$488>>2]|0;
  $490 = HEAP32[$4>>2]|0;
  $491 = HEAP32[$3>>2]|0;
  $492 = HEAP32[$0>>2]|0;
  $493 = (($492) + 85804|0);
  $494 = HEAP32[$493>>2]|0;
  $495 = (($494) + 203160|0);
  $496 = (($495) + ($491<<3)|0);
  $497 = (($496) + ($490<<2)|0);
  HEAP32[$497>>2] = $489;
  $498 = (($noise) + 8|0);
  $499 = +HEAPF32[$498>>2];
  $500 = $499;
  $501 = $500 * 10.0;
  $502 = HEAP32[$4>>2]|0;
  $503 = HEAP32[$3>>2]|0;
  $504 = HEAP32[$0>>2]|0;
  $505 = (($504) + 85804|0);
  $506 = HEAP32[$505>>2]|0;
  $507 = (($506) + 203208|0);
  $508 = (($507) + ($503<<4)|0);
  $509 = (($508) + ($502<<3)|0);
  HEAPF64[$509>>3] = $501;
  $510 = +HEAPF32[$noise>>2];
  $511 = $510;
  $512 = $511 * 10.0;
  $513 = HEAP32[$4>>2]|0;
  $514 = HEAP32[$3>>2]|0;
  $515 = HEAP32[$0>>2]|0;
  $516 = (($515) + 85804|0);
  $517 = HEAP32[$516>>2]|0;
  $518 = (($517) + 203240|0);
  $519 = (($518) + ($514<<4)|0);
  $520 = (($519) + ($513<<3)|0);
  HEAPF64[$520>>3] = $512;
  $521 = (($noise) + 4|0);
  $522 = +HEAPF32[$521>>2];
  $523 = $522;
  $524 = $523 * 10.0;
  $525 = HEAP32[$4>>2]|0;
  $526 = HEAP32[$3>>2]|0;
  $527 = HEAP32[$0>>2]|0;
  $528 = (($527) + 85804|0);
  $529 = HEAP32[$528>>2]|0;
  $530 = (($529) + 203176|0);
  $531 = (($530) + ($526<<4)|0);
  $532 = (($531) + ($525<<3)|0);
  HEAPF64[$532>>3] = $524;
  $533 = (($noise) + 16|0);
  $534 = HEAP32[$533>>2]|0;
  $535 = HEAP32[$4>>2]|0;
  $536 = HEAP32[$3>>2]|0;
  $537 = HEAP32[$0>>2]|0;
  $538 = (($537) + 85804|0);
  $539 = HEAP32[$538>>2]|0;
  $540 = (($539) + 203272|0);
  $541 = (($540) + ($536<<3)|0);
  $542 = (($541) + ($535<<2)|0);
  HEAP32[$542>>2] = $534;
  STACKTOP = sp;return;
 }
 $224 = HEAP32[$sfb>>2]|0;
 HEAP32[$sfb2>>2] = $224;
 $225 = HEAP32[$1>>2]|0;
 $226 = (($225) + 4852|0);
 $227 = HEAP32[$226>>2]|0;
 HEAP32[$sfb>>2] = $227;
 while(1) {
  $228 = HEAP32[$sfb>>2]|0;
  $229 = ($228|0)<(13);
  if (!($229)) {
   break;
  }
  $230 = HEAP32[$sfb>>2]|0;
  $231 = HEAP32[$0>>2]|0;
  $232 = (($231) + 21360|0);
  $233 = (($232) + 92|0);
  $234 = (($233) + ($230<<2)|0);
  $235 = HEAP32[$234>>2]|0;
  HEAP32[$start>>2] = $235;
  $236 = HEAP32[$sfb>>2]|0;
  $237 = (($236) + 1)|0;
  $238 = HEAP32[$0>>2]|0;
  $239 = (($238) + 21360|0);
  $240 = (($239) + 92|0);
  $241 = (($240) + ($237<<2)|0);
  $242 = HEAP32[$241>>2]|0;
  HEAP32[$end>>2] = $242;
  $243 = HEAP32[$end>>2]|0;
  $244 = HEAP32[$start>>2]|0;
  $245 = (($243) - ($244))|0;
  HEAP32[$bw>>2] = $245;
  HEAP32[$i>>2] = 0;
  while(1) {
   $246 = HEAP32[$i>>2]|0;
   $247 = ($246|0)<(3);
   if (!($247)) {
    break;
   }
   HEAPF32[$en0>>2] = 0.0;
   $248 = HEAP32[$start>>2]|0;
   HEAP32[$l>>2] = $248;
   while(1) {
    $249 = HEAP32[$l>>2]|0;
    $250 = HEAP32[$end>>2]|0;
    $251 = ($249|0)<($250|0);
    if (!($251)) {
     break;
    }
    $252 = HEAP32[$j>>2]|0;
    $253 = HEAP32[$1>>2]|0;
    $254 = (($253) + ($252<<2)|0);
    $255 = +HEAPF32[$254>>2];
    $256 = HEAP32[$j>>2]|0;
    $257 = HEAP32[$1>>2]|0;
    $258 = (($257) + ($256<<2)|0);
    $259 = +HEAPF32[$258>>2];
    $260 = $255 * $259;
    $261 = +HEAPF32[$en0>>2];
    $262 = $261 + $260;
    HEAPF32[$en0>>2] = $262;
    $263 = HEAP32[$j>>2]|0;
    $264 = (($263) + 1)|0;
    HEAP32[$j>>2] = $264;
    $265 = HEAP32[$l>>2]|0;
    $266 = (($265) + 1)|0;
    HEAP32[$l>>2] = $266;
   }
   $267 = +HEAPF32[$en0>>2];
   $268 = HEAP32[$bw>>2]|0;
   $269 = (+($268|0));
   $270 = $267 / $269;
   $271 = $270;
   $272 = $271 > 9.99999999999999945153E-21;
   if ($272) {
    $273 = +HEAPF32[$en0>>2];
    $274 = HEAP32[$bw>>2]|0;
    $275 = (+($274|0));
    $276 = $273 / $275;
    $277 = $276;
    $279 = $277;
   } else {
    $279 = 9.99999999999999945153E-21;
   }
   $278 = $279;
   HEAPF32[$en0>>2] = $278;
   HEAPF32[$en1>>2] = 999999986991104.0;
   $280 = +HEAPF32[$en1>>2];
   $281 = +HEAPF32[$en0>>2];
   $282 = $280 * $281;
   $283 = $282;
   $284 = HEAP32[$sfb>>2]|0;
   $285 = ($284*3)|0;
   $286 = HEAP32[$i>>2]|0;
   $287 = (($285) + ($286))|0;
   $288 = HEAP32[$4>>2]|0;
   $289 = HEAP32[$3>>2]|0;
   $290 = HEAP32[$0>>2]|0;
   $291 = (($290) + 85804|0);
   $292 = HEAP32[$291>>2]|0;
   $293 = (($292) + 194616|0);
   $294 = (($293) + (($289*1248)|0)|0);
   $295 = (($294) + (($288*312)|0)|0);
   $296 = (($295) + ($287<<3)|0);
   HEAPF64[$296>>3] = $283;
   $297 = +HEAPF32[$en1>>2];
   $298 = HEAP32[$sfb2>>2]|0;
   $299 = (($l3_xmin) + ($298<<2)|0);
   $300 = +HEAPF32[$299>>2];
   $301 = $297 * $300;
   $302 = HEAP32[$sfb2>>2]|0;
   $303 = (($xfsf) + ($302<<2)|0);
   $304 = +HEAPF32[$303>>2];
   $305 = $301 * $304;
   $306 = HEAP32[$bw>>2]|0;
   $307 = (+($306|0));
   $308 = $305 / $307;
   $309 = $308;
   $310 = HEAP32[$sfb>>2]|0;
   $311 = ($310*3)|0;
   $312 = HEAP32[$i>>2]|0;
   $313 = (($311) + ($312))|0;
   $314 = HEAP32[$4>>2]|0;
   $315 = HEAP32[$3>>2]|0;
   $316 = HEAP32[$0>>2]|0;
   $317 = (($316) + 85804|0);
   $318 = HEAP32[$317>>2]|0;
   $319 = (($318) + 201912|0);
   $320 = (($319) + (($315*624)|0)|0);
   $321 = (($320) + (($314*312)|0)|0);
   $322 = (($321) + ($313<<3)|0);
   HEAPF64[$322>>3] = $309;
   $323 = HEAP32[$i>>2]|0;
   $324 = HEAP32[$sfb>>2]|0;
   $325 = HEAP32[$2>>2]|0;
   $326 = (($325) + 244|0);
   $327 = (($326) + 88|0);
   $328 = (($327) + (($324*12)|0)|0);
   $329 = (($328) + ($323<<2)|0);
   $330 = +HEAPF32[$329>>2];
   $331 = $330 > 0.0;
   if ($331) {
    $332 = +HEAPF32[$en0>>2];
    $333 = HEAP32[$i>>2]|0;
    $334 = HEAP32[$sfb>>2]|0;
    $335 = HEAP32[$2>>2]|0;
    $336 = (($335) + 244|0);
    $337 = (($336) + 88|0);
    $338 = (($337) + (($334*12)|0)|0);
    $339 = (($338) + ($333<<2)|0);
    $340 = +HEAPF32[$339>>2];
    $341 = $332 / $340;
    HEAPF32[$en0>>2] = $341;
   } else {
    HEAPF32[$en0>>2] = 0.0;
   }
   $342 = HEAP32[$cfg>>2]|0;
   $343 = (($342) + 196|0);
   $344 = HEAP32[$343>>2]|0;
   $345 = ($344|0)!=(0);
   if ($345) {
    label = 37;
   } else {
    $346 = HEAP32[$cfg>>2]|0;
    $347 = (($346) + 200|0);
    $348 = HEAP32[$347>>2]|0;
    $349 = ($348|0)!=(0);
    if ($349) {
     label = 37;
    }
   }
   if ((label|0) == 37) {
    label = 0;
    HEAPF32[$en0>>2] = 0.0;
   }
   $350 = +HEAPF32[$en1>>2];
   $351 = +HEAPF32[$en0>>2];
   $352 = HEAP32[$i>>2]|0;
   $353 = HEAP32[$sfb>>2]|0;
   $354 = HEAP32[$2>>2]|0;
   $355 = (($354) + 88|0);
   $356 = (($355) + (($353*12)|0)|0);
   $357 = (($356) + ($352<<2)|0);
   $358 = +HEAPF32[$357>>2];
   $359 = $351 * $358;
   $360 = HEAP32[$sfb>>2]|0;
   $361 = HEAP32[$0>>2]|0;
   $362 = (($361) + 85796|0);
   $363 = HEAP32[$362>>2]|0;
   $364 = (($363) + 112|0);
   $365 = (($364) + ($360<<2)|0);
   $366 = +HEAPF32[$365>>2];
   $367 = $359 > $366;
   if ($367) {
    $368 = +HEAPF32[$en0>>2];
    $369 = HEAP32[$i>>2]|0;
    $370 = HEAP32[$sfb>>2]|0;
    $371 = HEAP32[$2>>2]|0;
    $372 = (($371) + 88|0);
    $373 = (($372) + (($370*12)|0)|0);
    $374 = (($373) + ($369<<2)|0);
    $375 = +HEAPF32[$374>>2];
    $376 = $368 * $375;
    $385 = $376;
   } else {
    $377 = HEAP32[$sfb>>2]|0;
    $378 = HEAP32[$0>>2]|0;
    $379 = (($378) + 85796|0);
    $380 = HEAP32[$379>>2]|0;
    $381 = (($380) + 112|0);
    $382 = (($381) + ($377<<2)|0);
    $383 = +HEAPF32[$382>>2];
    $385 = $383;
   }
   $384 = $350 * $385;
   $386 = $384;
   $387 = HEAP32[$sfb>>2]|0;
   $388 = ($387*3)|0;
   $389 = HEAP32[$i>>2]|0;
   $390 = (($388) + ($389))|0;
   $391 = HEAP32[$4>>2]|0;
   $392 = HEAP32[$3>>2]|0;
   $393 = HEAP32[$0>>2]|0;
   $394 = (($393) + 85804|0);
   $395 = HEAP32[$394>>2]|0;
   $396 = (($395) + 192120|0);
   $397 = (($396) + (($392*1248)|0)|0);
   $398 = (($397) + (($391*312)|0)|0);
   $399 = (($398) + ($390<<3)|0);
   HEAPF64[$399>>3] = $386;
   $400 = HEAP32[$i>>2]|0;
   $401 = HEAP32[$1>>2]|0;
   $402 = (($401) + 4808|0);
   $403 = (($402) + ($400<<2)|0);
   $404 = HEAP32[$403>>2]|0;
   $405 = (+($404|0));
   $406 = -2.0 * $405;
   $407 = HEAP32[$sfb>>2]|0;
   $408 = ($407*3)|0;
   $409 = HEAP32[$i>>2]|0;
   $410 = (($408) + ($409))|0;
   $411 = HEAP32[$4>>2]|0;
   $412 = HEAP32[$3>>2]|0;
   $413 = HEAP32[$0>>2]|0;
   $414 = (($413) + 85804|0);
   $415 = HEAP32[$414>>2]|0;
   $416 = (($415) + 199864|0);
   $417 = (($416) + (($412*624)|0)|0);
   $418 = (($417) + (($411*312)|0)|0);
   $419 = (($418) + ($410<<3)|0);
   HEAPF64[$419>>3] = $406;
   $420 = HEAP32[$sfb>>2]|0;
   $421 = ($420|0)<(12);
   if ($421) {
    $422 = +HEAPF32[$ifqstep>>2];
    $423 = HEAP32[$sfb2>>2]|0;
    $424 = HEAP32[$scalefac>>2]|0;
    $425 = (($424) + ($423<<2)|0);
    $426 = HEAP32[$425>>2]|0;
    $427 = (+($426|0));
    $428 = $422 * $427;
    $429 = $428;
    $430 = HEAP32[$sfb>>2]|0;
    $431 = ($430*3)|0;
    $432 = HEAP32[$i>>2]|0;
    $433 = (($431) + ($432))|0;
    $434 = HEAP32[$4>>2]|0;
    $435 = HEAP32[$3>>2]|0;
    $436 = HEAP32[$0>>2]|0;
    $437 = (($436) + 85804|0);
    $438 = HEAP32[$437>>2]|0;
    $439 = (($438) + 199864|0);
    $440 = (($439) + (($435*624)|0)|0);
    $441 = (($440) + (($434*312)|0)|0);
    $442 = (($441) + ($433<<3)|0);
    $443 = +HEAPF64[$442>>3];
    $444 = $443 - $429;
    HEAPF64[$442>>3] = $444;
   }
   $445 = HEAP32[$sfb2>>2]|0;
   $446 = (($445) + 1)|0;
   HEAP32[$sfb2>>2] = $446;
   $447 = HEAP32[$i>>2]|0;
   $448 = (($447) + 1)|0;
   HEAP32[$i>>2] = $448;
  }
  $449 = HEAP32[$sfb>>2]|0;
  $450 = (($449) + 1)|0;
  HEAP32[$sfb>>2] = $450;
 }
 $451 = HEAP32[$1>>2]|0;
 $452 = (($451) + 4780|0);
 $453 = HEAP32[$452>>2]|0;
 $454 = HEAP32[$4>>2]|0;
 $455 = HEAP32[$3>>2]|0;
 $456 = HEAP32[$0>>2]|0;
 $457 = (($456) + 85804|0);
 $458 = HEAP32[$457>>2]|0;
 $459 = (($458) + 201112|0);
 $460 = (($459) + ($455<<3)|0);
 $461 = (($460) + ($454<<2)|0);
 HEAP32[$461>>2] = $453;
 $462 = HEAP32[$1>>2]|0;
 $463 = (($462) + 4768|0);
 $464 = HEAP32[$463>>2]|0;
 $465 = HEAP32[$1>>2]|0;
 $466 = (($465) + 4844|0);
 $467 = HEAP32[$466>>2]|0;
 $468 = (($464) + ($467))|0;
 $469 = HEAP32[$4>>2]|0;
 $470 = HEAP32[$3>>2]|0;
 $471 = HEAP32[$0>>2]|0;
 $472 = (($471) + 85804|0);
 $473 = HEAP32[$472>>2]|0;
 $474 = (($473) + 203400|0);
 $475 = (($474) + ($470<<3)|0);
 $476 = (($475) + ($469<<2)|0);
 HEAP32[$476>>2] = $468;
 $477 = HEAP32[$1>>2]|0;
 $478 = (($477) + 4844|0);
 $479 = HEAP32[$478>>2]|0;
 $480 = HEAP32[$4>>2]|0;
 $481 = HEAP32[$3>>2]|0;
 $482 = HEAP32[$0>>2]|0;
 $483 = (($482) + 85804|0);
 $484 = HEAP32[$483>>2]|0;
 $485 = (($484) + 203416|0);
 $486 = (($485) + ($481<<3)|0);
 $487 = (($486) + ($480<<2)|0);
 HEAP32[$487>>2] = $479;
 $488 = (($noise) + 12|0);
 $489 = HEAP32[$488>>2]|0;
 $490 = HEAP32[$4>>2]|0;
 $491 = HEAP32[$3>>2]|0;
 $492 = HEAP32[$0>>2]|0;
 $493 = (($492) + 85804|0);
 $494 = HEAP32[$493>>2]|0;
 $495 = (($494) + 203160|0);
 $496 = (($495) + ($491<<3)|0);
 $497 = (($496) + ($490<<2)|0);
 HEAP32[$497>>2] = $489;
 $498 = (($noise) + 8|0);
 $499 = +HEAPF32[$498>>2];
 $500 = $499;
 $501 = $500 * 10.0;
 $502 = HEAP32[$4>>2]|0;
 $503 = HEAP32[$3>>2]|0;
 $504 = HEAP32[$0>>2]|0;
 $505 = (($504) + 85804|0);
 $506 = HEAP32[$505>>2]|0;
 $507 = (($506) + 203208|0);
 $508 = (($507) + ($503<<4)|0);
 $509 = (($508) + ($502<<3)|0);
 HEAPF64[$509>>3] = $501;
 $510 = +HEAPF32[$noise>>2];
 $511 = $510;
 $512 = $511 * 10.0;
 $513 = HEAP32[$4>>2]|0;
 $514 = HEAP32[$3>>2]|0;
 $515 = HEAP32[$0>>2]|0;
 $516 = (($515) + 85804|0);
 $517 = HEAP32[$516>>2]|0;
 $518 = (($517) + 203240|0);
 $519 = (($518) + ($514<<4)|0);
 $520 = (($519) + ($513<<3)|0);
 HEAPF64[$520>>3] = $512;
 $521 = (($noise) + 4|0);
 $522 = +HEAPF32[$521>>2];
 $523 = $522;
 $524 = $523 * 10.0;
 $525 = HEAP32[$4>>2]|0;
 $526 = HEAP32[$3>>2]|0;
 $527 = HEAP32[$0>>2]|0;
 $528 = (($527) + 85804|0);
 $529 = HEAP32[$528>>2]|0;
 $530 = (($529) + 203176|0);
 $531 = (($530) + ($526<<4)|0);
 $532 = (($531) + ($525<<3)|0);
 HEAPF64[$532>>3] = $524;
 $533 = (($noise) + 16|0);
 $534 = HEAP32[$533>>2]|0;
 $535 = HEAP32[$4>>2]|0;
 $536 = HEAP32[$3>>2]|0;
 $537 = HEAP32[$0>>2]|0;
 $538 = (($537) + 85804|0);
 $539 = HEAP32[$538>>2]|0;
 $540 = (($539) + 203272|0);
 $541 = (($540) + ($536<<3)|0);
 $542 = (($541) + ($535<<2)|0);
 HEAP32[$542>>2] = $534;
 STACKTOP = sp;return;
}
function _ATHmdct($cfg,$f) {
 $cfg = $cfg|0;
 $f = +$f;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $3 = 0.0, $4 = 0.0;
 var $5 = 0, $6 = 0, $7 = 0.0, $8 = 0, $9 = 0, $ath = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp + 8|0;
 $1 = sp + 4|0;
 $ath = sp;
 HEAP32[$0>>2] = $cfg;
 HEAPF32[$1>>2] = $f;
 $2 = HEAP32[$0>>2]|0;
 $3 = +HEAPF32[$1>>2];
 $4 = (+_ATHformula($2,$3));
 HEAPF32[$ath>>2] = $4;
 $5 = HEAP32[$0>>2]|0;
 $6 = (($5) + 208|0);
 $7 = +HEAPF32[$6>>2];
 $8 = $7 > 0.0;
 if ($8) {
  $9 = HEAP32[$0>>2]|0;
  $10 = (($9) + 208|0);
  $11 = +HEAPF32[$10>>2];
  $12 = +HEAPF32[$ath>>2];
  $13 = $12 - $11;
  HEAPF32[$ath>>2] = $13;
 } else {
  $14 = +HEAPF32[$ath>>2];
  $15 = $14 - 100.0;
  HEAPF32[$ath>>2] = $15;
 }
 $16 = HEAP32[$0>>2]|0;
 $17 = (($16) + 180|0);
 $18 = +HEAPF32[$17>>2];
 $19 = +HEAPF32[$ath>>2];
 $20 = $19 + $18;
 HEAPF32[$ath>>2] = $20;
 $21 = +HEAPF32[$ath>>2];
 $22 = $21 * 0.100000001490116119385;
 $23 = (+Math_pow(10.0,(+$22)));
 HEAPF32[$ath>>2] = $23;
 $24 = +HEAPF32[$ath>>2];
 STACKTOP = sp;return (+$24);
}
function _ResvFrameBegin($gfc,$mean_bits) {
 $gfc = $gfc|0;
 $mean_bits = $mean_bits|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $cfg = 0, $esv = 0, $frameLength = 0, $fullFrameBits = 0;
 var $l3_side = 0, $maxmp3buf = 0, $meanBits = 0, $resvLimit = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $0 = sp + 36|0;
 $1 = sp + 32|0;
 $cfg = sp + 28|0;
 $esv = sp + 24|0;
 $fullFrameBits = sp + 20|0;
 $resvLimit = sp + 16|0;
 $maxmp3buf = sp + 12|0;
 $l3_side = sp + 8|0;
 $frameLength = sp + 4|0;
 $meanBits = sp;
 HEAP32[$0>>2] = $gfc;
 HEAP32[$1>>2] = $mean_bits;
 $2 = HEAP32[$0>>2]|0;
 $3 = (($2) + 16|0);
 HEAP32[$cfg>>2] = $3;
 $4 = HEAP32[$0>>2]|0;
 $5 = (($4) + 27824|0);
 HEAP32[$esv>>2] = $5;
 $6 = HEAP32[$0>>2]|0;
 $7 = (($6) + 304|0);
 HEAP32[$l3_side>>2] = $7;
 $8 = HEAP32[$0>>2]|0;
 $9 = (_getframebits($8)|0);
 HEAP32[$frameLength>>2] = $9;
 $10 = HEAP32[$frameLength>>2]|0;
 $11 = HEAP32[$cfg>>2]|0;
 $12 = (($11) + 8|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = $13<<3;
 $15 = (($10) - ($14))|0;
 $16 = HEAP32[$cfg>>2]|0;
 $17 = (($16) + 60|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = (($15|0) / ($18|0))&-1;
 HEAP32[$meanBits>>2] = $19;
 $20 = HEAP32[$cfg>>2]|0;
 $21 = (($20) + 60|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = $22<<11;
 $24 = (($23) - 8)|0;
 HEAP32[$resvLimit>>2] = $24;
 $25 = HEAP32[$cfg>>2]|0;
 $26 = (($25) + 132|0);
 $27 = HEAP32[$26>>2]|0;
 HEAP32[$maxmp3buf>>2] = $27;
 $28 = HEAP32[$maxmp3buf>>2]|0;
 $29 = HEAP32[$frameLength>>2]|0;
 $30 = (($28) - ($29))|0;
 $31 = HEAP32[$esv>>2]|0;
 $32 = (($31) + 24320|0);
 HEAP32[$32>>2] = $30;
 $33 = HEAP32[$esv>>2]|0;
 $34 = (($33) + 24320|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = HEAP32[$resvLimit>>2]|0;
 $37 = ($35|0)>($36|0);
 if ($37) {
  $38 = HEAP32[$resvLimit>>2]|0;
  $39 = HEAP32[$esv>>2]|0;
  $40 = (($39) + 24320|0);
  HEAP32[$40>>2] = $38;
 }
 $41 = HEAP32[$esv>>2]|0;
 $42 = (($41) + 24320|0);
 $43 = HEAP32[$42>>2]|0;
 $44 = ($43|0)<(0);
 if ($44) {
  label = 5;
 } else {
  $45 = HEAP32[$cfg>>2]|0;
  $46 = (($45) + 128|0);
  $47 = HEAP32[$46>>2]|0;
  $48 = ($47|0)!=(0);
  if ($48) {
   label = 5;
  }
 }
 if ((label|0) == 5) {
  $49 = HEAP32[$esv>>2]|0;
  $50 = (($49) + 24320|0);
  HEAP32[$50>>2] = 0;
 }
 $51 = HEAP32[$meanBits>>2]|0;
 $52 = HEAP32[$cfg>>2]|0;
 $53 = (($52) + 60|0);
 $54 = HEAP32[$53>>2]|0;
 $55 = Math_imul($51, $54)|0;
 $56 = HEAP32[$esv>>2]|0;
 $57 = (($56) + 24316|0);
 $58 = HEAP32[$57>>2]|0;
 $59 = HEAP32[$esv>>2]|0;
 $60 = (($59) + 24320|0);
 $61 = HEAP32[$60>>2]|0;
 $62 = ($58|0)<($61|0);
 $63 = HEAP32[$esv>>2]|0;
 if ($62) {
  $64 = (($63) + 24316|0);
  $65 = HEAP32[$64>>2]|0;
  $69 = $65;
 } else {
  $66 = (($63) + 24320|0);
  $67 = HEAP32[$66>>2]|0;
  $69 = $67;
 }
 $68 = (($55) + ($69))|0;
 HEAP32[$fullFrameBits>>2] = $68;
 $70 = HEAP32[$fullFrameBits>>2]|0;
 $71 = HEAP32[$maxmp3buf>>2]|0;
 $72 = ($70|0)>($71|0);
 if ($72) {
  $73 = HEAP32[$maxmp3buf>>2]|0;
  HEAP32[$fullFrameBits>>2] = $73;
 }
 $74 = HEAP32[$l3_side>>2]|0;
 $75 = (($74) + 21016|0);
 HEAP32[$75>>2] = 0;
 $76 = HEAP32[$0>>2]|0;
 $77 = (($76) + 85804|0);
 $78 = HEAP32[$77>>2]|0;
 $79 = ($78|0)!=(0|0);
 if (!($79)) {
  $93 = HEAP32[$meanBits>>2]|0;
  $94 = HEAP32[$1>>2]|0;
  HEAP32[$94>>2] = $93;
  $95 = HEAP32[$fullFrameBits>>2]|0;
  STACKTOP = sp;return ($95|0);
 }
 $80 = HEAP32[$meanBits>>2]|0;
 $81 = (($80|0) / 2)&-1;
 $82 = HEAP32[$0>>2]|0;
 $83 = (($82) + 85804|0);
 $84 = HEAP32[$83>>2]|0;
 $85 = (($84) + 203484|0);
 HEAP32[$85>>2] = $81;
 $86 = HEAP32[$esv>>2]|0;
 $87 = (($86) + 24316|0);
 $88 = HEAP32[$87>>2]|0;
 $89 = HEAP32[$0>>2]|0;
 $90 = (($89) + 85804|0);
 $91 = HEAP32[$90>>2]|0;
 $92 = (($91) + 203488|0);
 HEAP32[$92>>2] = $88;
 $93 = HEAP32[$meanBits>>2]|0;
 $94 = HEAP32[$1>>2]|0;
 HEAP32[$94>>2] = $93;
 $95 = HEAP32[$fullFrameBits>>2]|0;
 STACKTOP = sp;return ($95|0);
}
function _ResvMaxBits($gfc,$mean_bits,$targ_bits,$extra_bits,$cbr) {
 $gfc = $gfc|0;
 $mean_bits = $mean_bits|0;
 $targ_bits = $targ_bits|0;
 $extra_bits = $extra_bits|0;
 $cbr = $cbr|0;
 var $$ = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0.0, $28 = 0.0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0.0, $66 = 0.0, $67 = 0, $68 = 0.0, $69 = 0.0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $ResvMax = 0, $ResvSize = 0, $add_bits = 0, $cfg = 0, $esv = 0;
 var $extraBits = 0, $targBits = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $0 = sp + 44|0;
 $1 = sp + 40|0;
 $2 = sp + 36|0;
 $3 = sp + 32|0;
 $4 = sp + 28|0;
 $cfg = sp + 24|0;
 $esv = sp + 20|0;
 $add_bits = sp + 16|0;
 $targBits = sp + 12|0;
 $extraBits = sp + 8|0;
 $ResvSize = sp + 4|0;
 $ResvMax = sp;
 HEAP32[$0>>2] = $gfc;
 HEAP32[$1>>2] = $mean_bits;
 HEAP32[$2>>2] = $targ_bits;
 HEAP32[$3>>2] = $extra_bits;
 HEAP32[$4>>2] = $cbr;
 $5 = HEAP32[$0>>2]|0;
 $6 = (($5) + 16|0);
 HEAP32[$cfg>>2] = $6;
 $7 = HEAP32[$0>>2]|0;
 $8 = (($7) + 27824|0);
 HEAP32[$esv>>2] = $8;
 $9 = HEAP32[$esv>>2]|0;
 $10 = (($9) + 24316|0);
 $11 = HEAP32[$10>>2]|0;
 HEAP32[$ResvSize>>2] = $11;
 $12 = HEAP32[$esv>>2]|0;
 $13 = (($12) + 24320|0);
 $14 = HEAP32[$13>>2]|0;
 HEAP32[$ResvMax>>2] = $14;
 $15 = HEAP32[$4>>2]|0;
 $16 = ($15|0)!=(0);
 if ($16) {
  $17 = HEAP32[$1>>2]|0;
  $18 = HEAP32[$ResvSize>>2]|0;
  $19 = (($18) + ($17))|0;
  HEAP32[$ResvSize>>2] = $19;
 }
 $20 = HEAP32[$0>>2]|0;
 $21 = (($20) + 84768|0);
 $22 = (($21) + 328|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = $23 & 1;
 $25 = ($24|0)!=(0);
 if ($25) {
  $26 = HEAP32[$ResvMax>>2]|0;
  $27 = (+($26|0));
  $28 = $27 * 0.900000000000000022204;
  $29 = (~~(($28)));
  HEAP32[$ResvMax>>2] = $29;
 }
 $30 = HEAP32[$1>>2]|0;
 HEAP32[$targBits>>2] = $30;
 $31 = HEAP32[$ResvSize>>2]|0;
 $32 = ($31*10)|0;
 $33 = HEAP32[$ResvMax>>2]|0;
 $34 = ($33*9)|0;
 $35 = ($32|0)>($34|0);
 if ($35) {
  $36 = HEAP32[$ResvSize>>2]|0;
  $37 = HEAP32[$ResvMax>>2]|0;
  $38 = ($37*9)|0;
  $39 = (($38|0) / 10)&-1;
  $40 = (($36) - ($39))|0;
  HEAP32[$add_bits>>2] = $40;
  $41 = HEAP32[$add_bits>>2]|0;
  $42 = HEAP32[$targBits>>2]|0;
  $43 = (($42) + ($41))|0;
  HEAP32[$targBits>>2] = $43;
  $44 = HEAP32[$0>>2]|0;
  $45 = (($44) + 84768|0);
  $46 = (($45) + 328|0);
  $47 = HEAP32[$46>>2]|0;
  $48 = $47 | 128;
  HEAP32[$46>>2] = $48;
 } else {
  HEAP32[$add_bits>>2] = 0;
  $49 = HEAP32[$0>>2]|0;
  $50 = (($49) + 84768|0);
  $51 = (($50) + 328|0);
  $52 = HEAP32[$51>>2]|0;
  $53 = $52 & 127;
  HEAP32[$51>>2] = $53;
  $54 = HEAP32[$cfg>>2]|0;
  $55 = (($54) + 128|0);
  $56 = HEAP32[$55>>2]|0;
  $57 = ($56|0)!=(0);
  if (!($57)) {
   $58 = HEAP32[$0>>2]|0;
   $59 = (($58) + 84768|0);
   $60 = (($59) + 328|0);
   $61 = HEAP32[$60>>2]|0;
   $62 = $61 & 1;
   $63 = ($62|0)!=(0);
   if (!($63)) {
    $64 = HEAP32[$1>>2]|0;
    $65 = (+($64|0));
    $66 = 0.100000000000000005551 * $65;
    $67 = HEAP32[$targBits>>2]|0;
    $68 = (+($67|0));
    $69 = $68 - $66;
    $70 = (~~(($69)));
    HEAP32[$targBits>>2] = $70;
   }
  }
 }
 $71 = HEAP32[$ResvSize>>2]|0;
 $72 = HEAP32[$esv>>2]|0;
 $73 = (($72) + 24320|0);
 $74 = HEAP32[$73>>2]|0;
 $75 = ($74*6)|0;
 $76 = (($75|0) / 10)&-1;
 $77 = ($71|0)<($76|0);
 if ($77) {
  $78 = HEAP32[$ResvSize>>2]|0;
  $84 = $78;
  HEAP32[$extraBits>>2] = $84;
  $85 = HEAP32[$add_bits>>2]|0;
  $86 = HEAP32[$extraBits>>2]|0;
  $87 = (($86) - ($85))|0;
  HEAP32[$extraBits>>2] = $87;
  $88 = HEAP32[$extraBits>>2]|0;
  $89 = ($88|0)<(0);
  $$ = $89 ? 0 : $87;
  HEAP32[$extraBits>>2] = $$;
  $90 = HEAP32[$targBits>>2]|0;
  $91 = HEAP32[$2>>2]|0;
  HEAP32[$91>>2] = $90;
  $92 = HEAP32[$extraBits>>2]|0;
  $93 = HEAP32[$3>>2]|0;
  HEAP32[$93>>2] = $92;
  STACKTOP = sp;return;
 } else {
  $79 = HEAP32[$esv>>2]|0;
  $80 = (($79) + 24320|0);
  $81 = HEAP32[$80>>2]|0;
  $82 = ($81*6)|0;
  $83 = (($82|0) / 10)&-1;
  $84 = $83;
  HEAP32[$extraBits>>2] = $84;
  $85 = HEAP32[$add_bits>>2]|0;
  $86 = HEAP32[$extraBits>>2]|0;
  $87 = (($86) - ($85))|0;
  HEAP32[$extraBits>>2] = $87;
  $88 = HEAP32[$extraBits>>2]|0;
  $89 = ($88|0)<(0);
  $$ = $89 ? 0 : $87;
  HEAP32[$extraBits>>2] = $$;
  $90 = HEAP32[$targBits>>2]|0;
  $91 = HEAP32[$2>>2]|0;
  HEAP32[$91>>2] = $90;
  $92 = HEAP32[$extraBits>>2]|0;
  $93 = HEAP32[$3>>2]|0;
  HEAP32[$93>>2] = $92;
  STACKTOP = sp;return;
 }
}
function _ResvAdjust($gfc,$gi) {
 $gfc = $gfc|0;
 $gi = $gi|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp + 4|0;
 $1 = sp;
 HEAP32[$0>>2] = $gfc;
 HEAP32[$1>>2] = $gi;
 $2 = HEAP32[$1>>2]|0;
 $3 = (($2) + 4768|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = HEAP32[$1>>2]|0;
 $6 = (($5) + 4844|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($4) + ($7))|0;
 $9 = HEAP32[$0>>2]|0;
 $10 = (($9) + 27824|0);
 $11 = (($10) + 24316|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (($12) - ($8))|0;
 HEAP32[$11>>2] = $13;
 STACKTOP = sp;return;
}
function _ResvFrameEnd($gfc,$mean_bits) {
 $gfc = $gfc|0;
 $mean_bits = $mean_bits|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $9 = 0, $cfg = 0, $esv = 0, $l3_side = 0, $mdb_bytes = 0, $over_bits = 0, $stuffingBits = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = sp + 28|0;
 $1 = sp + 24|0;
 $cfg = sp + 20|0;
 $esv = sp + 16|0;
 $l3_side = sp + 12|0;
 $stuffingBits = sp + 8|0;
 $over_bits = sp + 4|0;
 $mdb_bytes = sp;
 HEAP32[$0>>2] = $gfc;
 HEAP32[$1>>2] = $mean_bits;
 $2 = HEAP32[$0>>2]|0;
 $3 = (($2) + 16|0);
 HEAP32[$cfg>>2] = $3;
 $4 = HEAP32[$0>>2]|0;
 $5 = (($4) + 27824|0);
 HEAP32[$esv>>2] = $5;
 $6 = HEAP32[$0>>2]|0;
 $7 = (($6) + 304|0);
 HEAP32[$l3_side>>2] = $7;
 $8 = HEAP32[$1>>2]|0;
 $9 = HEAP32[$cfg>>2]|0;
 $10 = (($9) + 60|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = Math_imul($8, $11)|0;
 $13 = HEAP32[$esv>>2]|0;
 $14 = (($13) + 24316|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = (($15) + ($12))|0;
 HEAP32[$14>>2] = $16;
 HEAP32[$stuffingBits>>2] = 0;
 $17 = HEAP32[$l3_side>>2]|0;
 $18 = (($17) + 21020|0);
 HEAP32[$18>>2] = 0;
 $19 = HEAP32[$l3_side>>2]|0;
 $20 = (($19) + 21016|0);
 HEAP32[$20>>2] = 0;
 $21 = HEAP32[$esv>>2]|0;
 $22 = (($21) + 24316|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = (($23|0) % 8)&-1;
 HEAP32[$over_bits>>2] = $24;
 $25 = ($24|0)!=(0);
 if ($25) {
  $26 = HEAP32[$over_bits>>2]|0;
  $27 = HEAP32[$stuffingBits>>2]|0;
  $28 = (($27) + ($26))|0;
  HEAP32[$stuffingBits>>2] = $28;
 }
 $29 = HEAP32[$esv>>2]|0;
 $30 = (($29) + 24316|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = HEAP32[$stuffingBits>>2]|0;
 $33 = (($31) - ($32))|0;
 $34 = HEAP32[$esv>>2]|0;
 $35 = (($34) + 24320|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = (($33) - ($36))|0;
 HEAP32[$over_bits>>2] = $37;
 $38 = HEAP32[$over_bits>>2]|0;
 $39 = ($38|0)>(0);
 if ($39) {
  $40 = HEAP32[$over_bits>>2]|0;
  $41 = HEAP32[$stuffingBits>>2]|0;
  $42 = (($41) + ($40))|0;
  HEAP32[$stuffingBits>>2] = $42;
 }
 $43 = HEAP32[$l3_side>>2]|0;
 $44 = (($43) + 21008|0);
 $45 = HEAP32[$44>>2]|0;
 $46 = $45<<3;
 $47 = HEAP32[$stuffingBits>>2]|0;
 $48 = ($46|0)<($47|0);
 if ($48) {
  $49 = HEAP32[$l3_side>>2]|0;
  $50 = (($49) + 21008|0);
  $51 = HEAP32[$50>>2]|0;
  $52 = $51<<3;
  $55 = $52;
 } else {
  $53 = HEAP32[$stuffingBits>>2]|0;
  $55 = $53;
 }
 $54 = (($55|0) / 8)&-1;
 HEAP32[$mdb_bytes>>2] = $54;
 $56 = HEAP32[$mdb_bytes>>2]|0;
 $57 = $56<<3;
 $58 = HEAP32[$l3_side>>2]|0;
 $59 = (($58) + 21016|0);
 $60 = HEAP32[$59>>2]|0;
 $61 = (($60) + ($57))|0;
 HEAP32[$59>>2] = $61;
 $62 = HEAP32[$mdb_bytes>>2]|0;
 $63 = $62<<3;
 $64 = HEAP32[$stuffingBits>>2]|0;
 $65 = (($64) - ($63))|0;
 HEAP32[$stuffingBits>>2] = $65;
 $66 = HEAP32[$mdb_bytes>>2]|0;
 $67 = $66<<3;
 $68 = HEAP32[$esv>>2]|0;
 $69 = (($68) + 24316|0);
 $70 = HEAP32[$69>>2]|0;
 $71 = (($70) - ($67))|0;
 HEAP32[$69>>2] = $71;
 $72 = HEAP32[$mdb_bytes>>2]|0;
 $73 = HEAP32[$l3_side>>2]|0;
 $74 = (($73) + 21008|0);
 $75 = HEAP32[$74>>2]|0;
 $76 = (($75) - ($72))|0;
 HEAP32[$74>>2] = $76;
 $77 = HEAP32[$stuffingBits>>2]|0;
 $78 = HEAP32[$l3_side>>2]|0;
 $79 = (($78) + 21020|0);
 $80 = HEAP32[$79>>2]|0;
 $81 = (($80) + ($77))|0;
 HEAP32[$79>>2] = $81;
 $82 = HEAP32[$stuffingBits>>2]|0;
 $83 = HEAP32[$esv>>2]|0;
 $84 = (($83) + 24316|0);
 $85 = HEAP32[$84>>2]|0;
 $86 = (($85) - ($82))|0;
 HEAP32[$84>>2] = $86;
 STACKTOP = sp;return;
}
function _lame_set_num_samples($gfp,$num_samples) {
 $gfp = $gfp|0;
 $num_samples = $num_samples|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp + 8|0;
 $1 = sp + 4|0;
 $2 = sp;
 HEAP32[$1>>2] = $gfp;
 HEAP32[$2>>2] = $num_samples;
 $3 = HEAP32[$1>>2]|0;
 $4 = (_is_lame_global_flags_valid($3)|0);
 $5 = ($4|0)!=(0);
 if ($5) {
  $6 = HEAP32[$2>>2]|0;
  $7 = HEAP32[$1>>2]|0;
  $8 = (($7) + 4|0);
  HEAP32[$8>>2] = $6;
  HEAP32[$0>>2] = 0;
  $9 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($9|0);
 } else {
  HEAP32[$0>>2] = -1;
  $9 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($9|0);
 }
 return 0|0;
}
function _lame_get_num_samples($gfp) {
 $gfp = $gfp|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp + 4|0;
 $1 = sp;
 HEAP32[$1>>2] = $gfp;
 $2 = HEAP32[$1>>2]|0;
 $3 = (_is_lame_global_flags_valid($2)|0);
 $4 = ($3|0)!=(0);
 if ($4) {
  $5 = HEAP32[$1>>2]|0;
  $6 = (($5) + 4|0);
  $7 = HEAP32[$6>>2]|0;
  HEAP32[$0>>2] = $7;
  $8 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($8|0);
 } else {
  HEAP32[$0>>2] = 0;
  $8 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($8|0);
 }
 return 0|0;
}
function _lame_set_in_samplerate($gfp,$in_samplerate) {
 $gfp = $gfp|0;
 $in_samplerate = $in_samplerate|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp + 8|0;
 $1 = sp + 4|0;
 $2 = sp;
 HEAP32[$1>>2] = $gfp;
 HEAP32[$2>>2] = $in_samplerate;
 $3 = HEAP32[$1>>2]|0;
 $4 = (_is_lame_global_flags_valid($3)|0);
 $5 = ($4|0)!=(0);
 if ($5) {
  $6 = HEAP32[$2>>2]|0;
  $7 = HEAP32[$1>>2]|0;
  $8 = (($7) + 12|0);
  HEAP32[$8>>2] = $6;
  HEAP32[$0>>2] = 0;
  $9 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($9|0);
 } else {
  HEAP32[$0>>2] = -1;
  $9 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($9|0);
 }
 return 0|0;
}
function _lame_get_in_samplerate($gfp) {
 $gfp = $gfp|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp + 4|0;
 $1 = sp;
 HEAP32[$1>>2] = $gfp;
 $2 = HEAP32[$1>>2]|0;
 $3 = (_is_lame_global_flags_valid($2)|0);
 $4 = ($3|0)!=(0);
 if ($4) {
  $5 = HEAP32[$1>>2]|0;
  $6 = (($5) + 12|0);
  $7 = HEAP32[$6>>2]|0;
  HEAP32[$0>>2] = $7;
  $8 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($8|0);
 } else {
  HEAP32[$0>>2] = 0;
  $8 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($8|0);
 }
 return 0|0;
}
function _lame_set_num_channels($gfp,$num_channels) {
 $gfp = $gfp|0;
 $num_channels = $num_channels|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp + 8|0;
 $1 = sp + 4|0;
 $2 = sp;
 HEAP32[$1>>2] = $gfp;
 HEAP32[$2>>2] = $num_channels;
 $3 = HEAP32[$1>>2]|0;
 $4 = (_is_lame_global_flags_valid($3)|0);
 $5 = ($4|0)!=(0);
 do {
  if ($5) {
   $6 = HEAP32[$2>>2]|0;
   $7 = (2)<($6|0);
   $8 = HEAP32[$2>>2]|0;
   $9 = (0)==($8|0);
   $or$cond = $7 | $9;
   if ($or$cond) {
    HEAP32[$0>>2] = -1;
    break;
   } else {
    $10 = HEAP32[$2>>2]|0;
    $11 = HEAP32[$1>>2]|0;
    $12 = (($11) + 8|0);
    HEAP32[$12>>2] = $10;
    HEAP32[$0>>2] = 0;
    break;
   }
  } else {
   HEAP32[$0>>2] = -1;
  }
 } while(0);
 $13 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($13|0);
}
function _lame_get_num_channels($gfp) {
 $gfp = $gfp|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp + 4|0;
 $1 = sp;
 HEAP32[$1>>2] = $gfp;
 $2 = HEAP32[$1>>2]|0;
 $3 = (_is_lame_global_flags_valid($2)|0);
 $4 = ($3|0)!=(0);
 if ($4) {
  $5 = HEAP32[$1>>2]|0;
  $6 = (($5) + 8|0);
  $7 = HEAP32[$6>>2]|0;
  HEAP32[$0>>2] = $7;
  $8 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($8|0);
 } else {
  HEAP32[$0>>2] = 0;
  $8 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($8|0);
 }
 return 0|0;
}
function _lame_set_scale($gfp,$scale) {
 $gfp = $gfp|0;
 $scale = +$scale;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp + 8|0;
 $1 = sp + 4|0;
 $2 = sp;
 HEAP32[$1>>2] = $gfp;
 HEAPF32[$2>>2] = $scale;
 $3 = HEAP32[$1>>2]|0;
 $4 = (_is_lame_global_flags_valid($3)|0);
 $5 = ($4|0)!=(0);
 if ($5) {
  $6 = +HEAPF32[$2>>2];
  $7 = HEAP32[$1>>2]|0;
  $8 = (($7) + 20|0);
  HEAPF32[$8>>2] = $6;
  HEAP32[$0>>2] = 0;
  $9 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($9|0);
 } else {
  HEAP32[$0>>2] = -1;
  $9 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($9|0);
 }
 return 0|0;
}
function _lame_get_scale($gfp) {
 $gfp = $gfp|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0.0, $8 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp + 4|0;
 $1 = sp;
 HEAP32[$1>>2] = $gfp;
 $2 = HEAP32[$1>>2]|0;
 $3 = (_is_lame_global_flags_valid($2)|0);
 $4 = ($3|0)!=(0);
 if ($4) {
  $5 = HEAP32[$1>>2]|0;
  $6 = (($5) + 20|0);
  $7 = +HEAPF32[$6>>2];
  HEAPF32[$0>>2] = $7;
  $8 = +HEAPF32[$0>>2];
  STACKTOP = sp;return (+$8);
 } else {
  HEAPF32[$0>>2] = 0.0;
  $8 = +HEAPF32[$0>>2];
  STACKTOP = sp;return (+$8);
 }
 return +0;
}
function _lame_set_out_samplerate($gfp,$out_samplerate) {
 $gfp = $gfp|0;
 $out_samplerate = $out_samplerate|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp + 8|0;
 $1 = sp + 4|0;
 $2 = sp;
 HEAP32[$1>>2] = $gfp;
 HEAP32[$2>>2] = $out_samplerate;
 $3 = HEAP32[$1>>2]|0;
 $4 = (_is_lame_global_flags_valid($3)|0);
 $5 = ($4|0)!=(0);
 if ($5) {
  $6 = HEAP32[$2>>2]|0;
  $7 = HEAP32[$1>>2]|0;
  $8 = (($7) + 16|0);
  HEAP32[$8>>2] = $6;
  HEAP32[$0>>2] = 0;
  $9 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($9|0);
 } else {
  HEAP32[$0>>2] = -1;
  $9 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($9|0);
 }
 return 0|0;
}
function _lame_get_out_samplerate($gfp) {
 $gfp = $gfp|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp + 4|0;
 $1 = sp;
 HEAP32[$1>>2] = $gfp;
 $2 = HEAP32[$1>>2]|0;
 $3 = (_is_lame_global_flags_valid($2)|0);
 $4 = ($3|0)!=(0);
 if ($4) {
  $5 = HEAP32[$1>>2]|0;
  $6 = (($5) + 16|0);
  $7 = HEAP32[$6>>2]|0;
  HEAP32[$0>>2] = $7;
  $8 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($8|0);
 } else {
  HEAP32[$0>>2] = 0;
  $8 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($8|0);
 }
 return 0|0;
}
function _lame_set_mode($gfp,$mode) {
 $gfp = $gfp|0;
 $mode = $mode|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $mpg_mode = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp + 12|0;
 $1 = sp + 8|0;
 $2 = sp + 4|0;
 $mpg_mode = sp;
 HEAP32[$1>>2] = $gfp;
 HEAP32[$2>>2] = $mode;
 $3 = HEAP32[$1>>2]|0;
 $4 = (_is_lame_global_flags_valid($3)|0);
 $5 = ($4|0)!=(0);
 if (!($5)) {
  HEAP32[$0>>2] = -1;
  $14 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($14|0);
 }
 $6 = HEAP32[$2>>2]|0;
 HEAP32[$mpg_mode>>2] = $6;
 $7 = HEAP32[$mpg_mode>>2]|0;
 $8 = ($7|0)<(0);
 $9 = HEAP32[$mpg_mode>>2]|0;
 $10 = (5)<=($9|0);
 $or$cond = $8 | $10;
 if ($or$cond) {
  HEAP32[$0>>2] = -1;
  $14 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($14|0);
 } else {
  $11 = HEAP32[$2>>2]|0;
  $12 = HEAP32[$1>>2]|0;
  $13 = (($12) + 48|0);
  HEAP32[$13>>2] = $11;
  HEAP32[$0>>2] = 0;
  $14 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($14|0);
 }
 return 0|0;
}
function _lame_get_mode($gfp) {
 $gfp = $gfp|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp + 4|0;
 $1 = sp;
 HEAP32[$1>>2] = $gfp;
 $2 = HEAP32[$1>>2]|0;
 $3 = (_is_lame_global_flags_valid($2)|0);
 $4 = ($3|0)!=(0);
 if ($4) {
  $5 = HEAP32[$1>>2]|0;
  $6 = (($5) + 48|0);
  $7 = HEAP32[$6>>2]|0;
  HEAP32[$0>>2] = $7;
  $8 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($8|0);
 } else {
  HEAP32[$0>>2] = 4;
  $8 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($8|0);
 }
 return 0|0;
}
function _lame_set_brate($gfp,$brate) {
 $gfp = $gfp|0;
 $brate = $brate|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp + 8|0;
 $1 = sp + 4|0;
 $2 = sp;
 HEAP32[$1>>2] = $gfp;
 HEAP32[$2>>2] = $brate;
 $3 = HEAP32[$1>>2]|0;
 $4 = (_is_lame_global_flags_valid($3)|0);
 $5 = ($4|0)!=(0);
 if (!($5)) {
  HEAP32[$0>>2] = -1;
  $13 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($13|0);
 }
 $6 = HEAP32[$2>>2]|0;
 $7 = HEAP32[$1>>2]|0;
 $8 = (($7) + 96|0);
 HEAP32[$8>>2] = $6;
 $9 = HEAP32[$2>>2]|0;
 $10 = ($9|0)>(320);
 if ($10) {
  $11 = HEAP32[$1>>2]|0;
  $12 = (($11) + 128|0);
  HEAP32[$12>>2] = 1;
 }
 HEAP32[$0>>2] = 0;
 $13 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($13|0);
}
function _lame_get_brate($gfp) {
 $gfp = $gfp|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp + 4|0;
 $1 = sp;
 HEAP32[$1>>2] = $gfp;
 $2 = HEAP32[$1>>2]|0;
 $3 = (_is_lame_global_flags_valid($2)|0);
 $4 = ($3|0)!=(0);
 if ($4) {
  $5 = HEAP32[$1>>2]|0;
  $6 = (($5) + 96|0);
  $7 = HEAP32[$6>>2]|0;
  HEAP32[$0>>2] = $7;
  $8 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($8|0);
 } else {
  HEAP32[$0>>2] = 0;
  $8 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($8|0);
 }
 return 0|0;
}
function _lame_set_quant_comp($gfp,$quant_type) {
 $gfp = $gfp|0;
 $quant_type = $quant_type|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp + 8|0;
 $1 = sp + 4|0;
 $2 = sp;
 HEAP32[$1>>2] = $gfp;
 HEAP32[$2>>2] = $quant_type;
 $3 = HEAP32[$1>>2]|0;
 $4 = (_is_lame_global_flags_valid($3)|0);
 $5 = ($4|0)!=(0);
 if ($5) {
  $6 = HEAP32[$2>>2]|0;
  $7 = HEAP32[$1>>2]|0;
  $8 = (($7) + 132|0);
  HEAP32[$8>>2] = $6;
  HEAP32[$0>>2] = 0;
  $9 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($9|0);
 } else {
  HEAP32[$0>>2] = -1;
  $9 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($9|0);
 }
 return 0|0;
}
function _lame_set_quant_comp_short($gfp,$quant_type) {
 $gfp = $gfp|0;
 $quant_type = $quant_type|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp + 8|0;
 $1 = sp + 4|0;
 $2 = sp;
 HEAP32[$1>>2] = $gfp;
 HEAP32[$2>>2] = $quant_type;
 $3 = HEAP32[$1>>2]|0;
 $4 = (_is_lame_global_flags_valid($3)|0);
 $5 = ($4|0)!=(0);
 if ($5) {
  $6 = HEAP32[$2>>2]|0;
  $7 = HEAP32[$1>>2]|0;
  $8 = (($7) + 136|0);
  HEAP32[$8>>2] = $6;
  HEAP32[$0>>2] = 0;
  $9 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($9|0);
 } else {
  HEAP32[$0>>2] = -1;
  $9 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($9|0);
 }
 return 0|0;
}
function _lame_get_quant_comp($gfp) {
 $gfp = $gfp|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp + 4|0;
 $1 = sp;
 HEAP32[$1>>2] = $gfp;
 $2 = HEAP32[$1>>2]|0;
 $3 = (_is_lame_global_flags_valid($2)|0);
 $4 = ($3|0)!=(0);
 if ($4) {
  $5 = HEAP32[$1>>2]|0;
  $6 = (($5) + 132|0);
  $7 = HEAP32[$6>>2]|0;
  HEAP32[$0>>2] = $7;
  $8 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($8|0);
 } else {
  HEAP32[$0>>2] = 0;
  $8 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($8|0);
 }
 return 0|0;
}
function _lame_get_quant_comp_short($gfp) {
 $gfp = $gfp|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp + 4|0;
 $1 = sp;
 HEAP32[$1>>2] = $gfp;
 $2 = HEAP32[$1>>2]|0;
 $3 = (_is_lame_global_flags_valid($2)|0);
 $4 = ($3|0)!=(0);
 if ($4) {
  $5 = HEAP32[$1>>2]|0;
  $6 = (($5) + 136|0);
  $7 = HEAP32[$6>>2]|0;
  HEAP32[$0>>2] = $7;
  $8 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($8|0);
 } else {
  HEAP32[$0>>2] = 0;
  $8 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($8|0);
 }
 return 0|0;
}
function _lame_set_experimentalY($gfp,$experimentalY) {
 $gfp = $gfp|0;
 $experimentalY = $experimentalY|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp + 8|0;
 $1 = sp + 4|0;
 $2 = sp;
 HEAP32[$1>>2] = $gfp;
 HEAP32[$2>>2] = $experimentalY;
 $3 = HEAP32[$1>>2]|0;
 $4 = (_is_lame_global_flags_valid($3)|0);
 $5 = ($4|0)!=(0);
 if ($5) {
  $6 = HEAP32[$2>>2]|0;
  $7 = HEAP32[$1>>2]|0;
  $8 = (($7) + 140|0);
  HEAP32[$8>>2] = $6;
  HEAP32[$0>>2] = 0;
  $9 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($9|0);
 } else {
  HEAP32[$0>>2] = -1;
  $9 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($9|0);
 }
 return 0|0;
}
function _lame_set_exp_nspsytune($gfp,$exp_nspsytune) {
 $gfp = $gfp|0;
 $exp_nspsytune = $exp_nspsytune|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp + 8|0;
 $1 = sp + 4|0;
 $2 = sp;
 HEAP32[$1>>2] = $gfp;
 HEAP32[$2>>2] = $exp_nspsytune;
 $3 = HEAP32[$1>>2]|0;
 $4 = (_is_lame_global_flags_valid($3)|0);
 $5 = ($4|0)!=(0);
 if ($5) {
  $6 = HEAP32[$2>>2]|0;
  $7 = HEAP32[$1>>2]|0;
  $8 = (($7) + 148|0);
  HEAP32[$8>>2] = $6;
  HEAP32[$0>>2] = 0;
  $9 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($9|0);
 } else {
  HEAP32[$0>>2] = -1;
  $9 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($9|0);
 }
 return 0|0;
}
function _lame_get_exp_nspsytune($gfp) {
 $gfp = $gfp|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp + 4|0;
 $1 = sp;
 HEAP32[$1>>2] = $gfp;
 $2 = HEAP32[$1>>2]|0;
 $3 = (_is_lame_global_flags_valid($2)|0);
 $4 = ($3|0)!=(0);
 if ($4) {
  $5 = HEAP32[$1>>2]|0;
  $6 = (($5) + 148|0);
  $7 = HEAP32[$6>>2]|0;
  HEAP32[$0>>2] = $7;
  $8 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($8|0);
 } else {
  HEAP32[$0>>2] = 0;
  $8 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($8|0);
 }
 return 0|0;
}
function _lame_set_VBR($gfp,$VBR) {
 $gfp = $gfp|0;
 $VBR = $VBR|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $vbr_q = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp + 12|0;
 $1 = sp + 8|0;
 $2 = sp + 4|0;
 $vbr_q = sp;
 HEAP32[$1>>2] = $gfp;
 HEAP32[$2>>2] = $VBR;
 $3 = HEAP32[$1>>2]|0;
 $4 = (_is_lame_global_flags_valid($3)|0);
 $5 = ($4|0)!=(0);
 if (!($5)) {
  HEAP32[$0>>2] = -1;
  $14 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($14|0);
 }
 $6 = HEAP32[$2>>2]|0;
 HEAP32[$vbr_q>>2] = $6;
 $7 = HEAP32[$vbr_q>>2]|0;
 $8 = (0)>($7|0);
 $9 = HEAP32[$vbr_q>>2]|0;
 $10 = (5)<=($9|0);
 $or$cond = $8 | $10;
 if ($or$cond) {
  HEAP32[$0>>2] = -1;
  $14 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($14|0);
 } else {
  $11 = HEAP32[$2>>2]|0;
  $12 = HEAP32[$1>>2]|0;
  $13 = (($12) + 156|0);
  HEAP32[$13>>2] = $11;
  HEAP32[$0>>2] = 0;
  $14 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($14|0);
 }
 return 0|0;
}
function _lame_get_VBR($gfp) {
 $gfp = $gfp|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp + 4|0;
 $1 = sp;
 HEAP32[$1>>2] = $gfp;
 $2 = HEAP32[$1>>2]|0;
 $3 = (_is_lame_global_flags_valid($2)|0);
 $4 = ($3|0)!=(0);
 if ($4) {
  $5 = HEAP32[$1>>2]|0;
  $6 = (($5) + 156|0);
  $7 = HEAP32[$6>>2]|0;
  HEAP32[$0>>2] = $7;
  $8 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($8|0);
 } else {
  HEAP32[$0>>2] = 0;
  $8 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($8|0);
 }
 return 0|0;
}
function _lame_set_VBR_q($gfp,$VBR_q) {
 $gfp = $gfp|0;
 $VBR_q = $VBR_q|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ret = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp + 12|0;
 $1 = sp + 8|0;
 $2 = sp + 4|0;
 $ret = sp;
 HEAP32[$1>>2] = $gfp;
 HEAP32[$2>>2] = $VBR_q;
 $3 = HEAP32[$1>>2]|0;
 $4 = (_is_lame_global_flags_valid($3)|0);
 $5 = ($4|0)!=(0);
 if (!($5)) {
  HEAP32[$0>>2] = -1;
  $16 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($16|0);
 }
 HEAP32[$ret>>2] = 0;
 $6 = HEAP32[$2>>2]|0;
 $7 = (0)>($6|0);
 if ($7) {
  HEAP32[$ret>>2] = -1;
  HEAP32[$2>>2] = 0;
 }
 $8 = HEAP32[$2>>2]|0;
 $9 = (9)<($8|0);
 if ($9) {
  HEAP32[$ret>>2] = -1;
  HEAP32[$2>>2] = 9;
 }
 $10 = HEAP32[$2>>2]|0;
 $11 = HEAP32[$1>>2]|0;
 $12 = (($11) + 164|0);
 HEAP32[$12>>2] = $10;
 $13 = HEAP32[$1>>2]|0;
 $14 = (($13) + 160|0);
 HEAPF32[$14>>2] = 0.0;
 $15 = HEAP32[$ret>>2]|0;
 HEAP32[$0>>2] = $15;
 $16 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($16|0);
}
function _lame_get_VBR_q($gfp) {
 $gfp = $gfp|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp + 4|0;
 $1 = sp;
 HEAP32[$1>>2] = $gfp;
 $2 = HEAP32[$1>>2]|0;
 $3 = (_is_lame_global_flags_valid($2)|0);
 $4 = ($3|0)!=(0);
 if ($4) {
  $5 = HEAP32[$1>>2]|0;
  $6 = (($5) + 164|0);
  $7 = HEAP32[$6>>2]|0;
  HEAP32[$0>>2] = $7;
  $8 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($8|0);
 } else {
  HEAP32[$0>>2] = 0;
  $8 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($8|0);
 }
 return 0|0;
}
function _lame_set_VBR_mean_bitrate_kbps($gfp,$VBR_mean_bitrate_kbps) {
 $gfp = $gfp|0;
 $VBR_mean_bitrate_kbps = $VBR_mean_bitrate_kbps|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp + 8|0;
 $1 = sp + 4|0;
 $2 = sp;
 HEAP32[$1>>2] = $gfp;
 HEAP32[$2>>2] = $VBR_mean_bitrate_kbps;
 $3 = HEAP32[$1>>2]|0;
 $4 = (_is_lame_global_flags_valid($3)|0);
 $5 = ($4|0)!=(0);
 if ($5) {
  $6 = HEAP32[$2>>2]|0;
  $7 = HEAP32[$1>>2]|0;
  $8 = (($7) + 168|0);
  HEAP32[$8>>2] = $6;
  HEAP32[$0>>2] = 0;
  $9 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($9|0);
 } else {
  HEAP32[$0>>2] = -1;
  $9 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($9|0);
 }
 return 0|0;
}
function _lame_get_VBR_mean_bitrate_kbps($gfp) {
 $gfp = $gfp|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp + 4|0;
 $1 = sp;
 HEAP32[$1>>2] = $gfp;
 $2 = HEAP32[$1>>2]|0;
 $3 = (_is_lame_global_flags_valid($2)|0);
 $4 = ($3|0)!=(0);
 if ($4) {
  $5 = HEAP32[$1>>2]|0;
  $6 = (($5) + 168|0);
  $7 = HEAP32[$6>>2]|0;
  HEAP32[$0>>2] = $7;
  $8 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($8|0);
 } else {
  HEAP32[$0>>2] = 0;
  $8 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($8|0);
 }
 return 0|0;
}
function _lame_set_VBR_min_bitrate_kbps($gfp,$VBR_min_bitrate_kbps) {
 $gfp = $gfp|0;
 $VBR_min_bitrate_kbps = $VBR_min_bitrate_kbps|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp + 8|0;
 $1 = sp + 4|0;
 $2 = sp;
 HEAP32[$1>>2] = $gfp;
 HEAP32[$2>>2] = $VBR_min_bitrate_kbps;
 $3 = HEAP32[$1>>2]|0;
 $4 = (_is_lame_global_flags_valid($3)|0);
 $5 = ($4|0)!=(0);
 if ($5) {
  $6 = HEAP32[$2>>2]|0;
  $7 = HEAP32[$1>>2]|0;
  $8 = (($7) + 172|0);
  HEAP32[$8>>2] = $6;
  HEAP32[$0>>2] = 0;
  $9 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($9|0);
 } else {
  HEAP32[$0>>2] = -1;
  $9 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($9|0);
 }
 return 0|0;
}
function _lame_get_VBR_min_bitrate_kbps($gfp) {
 $gfp = $gfp|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp + 4|0;
 $1 = sp;
 HEAP32[$1>>2] = $gfp;
 $2 = HEAP32[$1>>2]|0;
 $3 = (_is_lame_global_flags_valid($2)|0);
 $4 = ($3|0)!=(0);
 if ($4) {
  $5 = HEAP32[$1>>2]|0;
  $6 = (($5) + 172|0);
  $7 = HEAP32[$6>>2]|0;
  HEAP32[$0>>2] = $7;
  $8 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($8|0);
 } else {
  HEAP32[$0>>2] = 0;
  $8 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($8|0);
 }
 return 0|0;
}
function _lame_set_VBR_max_bitrate_kbps($gfp,$VBR_max_bitrate_kbps) {
 $gfp = $gfp|0;
 $VBR_max_bitrate_kbps = $VBR_max_bitrate_kbps|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp + 8|0;
 $1 = sp + 4|0;
 $2 = sp;
 HEAP32[$1>>2] = $gfp;
 HEAP32[$2>>2] = $VBR_max_bitrate_kbps;
 $3 = HEAP32[$1>>2]|0;
 $4 = (_is_lame_global_flags_valid($3)|0);
 $5 = ($4|0)!=(0);
 if ($5) {
  $6 = HEAP32[$2>>2]|0;
  $7 = HEAP32[$1>>2]|0;
  $8 = (($7) + 176|0);
  HEAP32[$8>>2] = $6;
  HEAP32[$0>>2] = 0;
  $9 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($9|0);
 } else {
  HEAP32[$0>>2] = -1;
  $9 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($9|0);
 }
 return 0|0;
}
function _lame_get_VBR_max_bitrate_kbps($gfp) {
 $gfp = $gfp|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp + 4|0;
 $1 = sp;
 HEAP32[$1>>2] = $gfp;
 $2 = HEAP32[$1>>2]|0;
 $3 = (_is_lame_global_flags_valid($2)|0);
 $4 = ($3|0)!=(0);
 if ($4) {
  $5 = HEAP32[$1>>2]|0;
  $6 = (($5) + 176|0);
  $7 = HEAP32[$6>>2]|0;
  HEAP32[$0>>2] = $7;
  $8 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($8|0);
 } else {
  HEAP32[$0>>2] = 0;
  $8 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($8|0);
 }
 return 0|0;
}
function _lame_set_maskingadjust($gfp,$adjust) {
 $gfp = $gfp|0;
 $adjust = +$adjust;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp + 8|0;
 $1 = sp + 4|0;
 $2 = sp;
 HEAP32[$1>>2] = $gfp;
 HEAPF32[$2>>2] = $adjust;
 $3 = HEAP32[$1>>2]|0;
 $4 = (_is_lame_global_flags_valid($3)|0);
 $5 = ($4|0)!=(0);
 if ($5) {
  $6 = +HEAPF32[$2>>2];
  $7 = HEAP32[$1>>2]|0;
  $8 = (($7) + 200|0);
  HEAPF32[$8>>2] = $6;
  HEAP32[$0>>2] = 0;
  $9 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($9|0);
 } else {
  HEAP32[$0>>2] = -1;
  $9 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($9|0);
 }
 return 0|0;
}
function _lame_get_maskingadjust($gfp) {
 $gfp = $gfp|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0.0, $8 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp + 4|0;
 $1 = sp;
 HEAP32[$1>>2] = $gfp;
 $2 = HEAP32[$1>>2]|0;
 $3 = (_is_lame_global_flags_valid($2)|0);
 $4 = ($3|0)!=(0);
 if ($4) {
  $5 = HEAP32[$1>>2]|0;
  $6 = (($5) + 200|0);
  $7 = +HEAPF32[$6>>2];
  HEAPF32[$0>>2] = $7;
  $8 = +HEAPF32[$0>>2];
  STACKTOP = sp;return (+$8);
 } else {
  HEAPF32[$0>>2] = 0.0;
  $8 = +HEAPF32[$0>>2];
  STACKTOP = sp;return (+$8);
 }
 return +0;
}
function _lame_set_maskingadjust_short($gfp,$adjust) {
 $gfp = $gfp|0;
 $adjust = +$adjust;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp + 8|0;
 $1 = sp + 4|0;
 $2 = sp;
 HEAP32[$1>>2] = $gfp;
 HEAPF32[$2>>2] = $adjust;
 $3 = HEAP32[$1>>2]|0;
 $4 = (_is_lame_global_flags_valid($3)|0);
 $5 = ($4|0)!=(0);
 if ($5) {
  $6 = +HEAPF32[$2>>2];
  $7 = HEAP32[$1>>2]|0;
  $8 = (($7) + 204|0);
  HEAPF32[$8>>2] = $6;
  HEAP32[$0>>2] = 0;
  $9 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($9|0);
 } else {
  HEAP32[$0>>2] = -1;
  $9 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($9|0);
 }
 return 0|0;
}
function _lame_get_maskingadjust_short($gfp) {
 $gfp = $gfp|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0.0, $8 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp + 4|0;
 $1 = sp;
 HEAP32[$1>>2] = $gfp;
 $2 = HEAP32[$1>>2]|0;
 $3 = (_is_lame_global_flags_valid($2)|0);
 $4 = ($3|0)!=(0);
 if ($4) {
  $5 = HEAP32[$1>>2]|0;
  $6 = (($5) + 204|0);
  $7 = +HEAPF32[$6>>2];
  HEAPF32[$0>>2] = $7;
  $8 = +HEAPF32[$0>>2];
  STACKTOP = sp;return (+$8);
 } else {
  HEAPF32[$0>>2] = 0.0;
  $8 = +HEAPF32[$0>>2];
  STACKTOP = sp;return (+$8);
 }
 return +0;
}
function _lame_set_ATHtype($gfp,$ATHtype) {
 $gfp = $gfp|0;
 $ATHtype = $ATHtype|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp + 8|0;
 $1 = sp + 4|0;
 $2 = sp;
 HEAP32[$1>>2] = $gfp;
 HEAP32[$2>>2] = $ATHtype;
 $3 = HEAP32[$1>>2]|0;
 $4 = (_is_lame_global_flags_valid($3)|0);
 $5 = ($4|0)!=(0);
 if ($5) {
  $6 = HEAP32[$2>>2]|0;
  $7 = HEAP32[$1>>2]|0;
  $8 = (($7) + 220|0);
  HEAP32[$8>>2] = $6;
  HEAP32[$0>>2] = 0;
  $9 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($9|0);
 } else {
  HEAP32[$0>>2] = -1;
  $9 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($9|0);
 }
 return 0|0;
}
function _lame_set_ATHcurve($gfp,$ATHcurve) {
 $gfp = $gfp|0;
 $ATHcurve = +$ATHcurve;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp + 8|0;
 $1 = sp + 4|0;
 $2 = sp;
 HEAP32[$1>>2] = $gfp;
 HEAPF32[$2>>2] = $ATHcurve;
 $3 = HEAP32[$1>>2]|0;
 $4 = (_is_lame_global_flags_valid($3)|0);
 $5 = ($4|0)!=(0);
 if ($5) {
  $6 = +HEAPF32[$2>>2];
  $7 = HEAP32[$1>>2]|0;
  $8 = (($7) + 224|0);
  HEAPF32[$8>>2] = $6;
  HEAP32[$0>>2] = 0;
  $9 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($9|0);
 } else {
  HEAP32[$0>>2] = -1;
  $9 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($9|0);
 }
 return 0|0;
}
function _lame_get_ATHcurve($gfp) {
 $gfp = $gfp|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0.0, $8 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp + 4|0;
 $1 = sp;
 HEAP32[$1>>2] = $gfp;
 $2 = HEAP32[$1>>2]|0;
 $3 = (_is_lame_global_flags_valid($2)|0);
 $4 = ($3|0)!=(0);
 if ($4) {
  $5 = HEAP32[$1>>2]|0;
  $6 = (($5) + 224|0);
  $7 = +HEAPF32[$6>>2];
  HEAPF32[$0>>2] = $7;
  $8 = +HEAPF32[$0>>2];
  STACKTOP = sp;return (+$8);
 } else {
  HEAPF32[$0>>2] = 0.0;
  $8 = +HEAPF32[$0>>2];
  STACKTOP = sp;return (+$8);
 }
 return +0;
}
function _lame_set_ATHlower($gfp,$ATHlower) {
 $gfp = $gfp|0;
 $ATHlower = +$ATHlower;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp + 8|0;
 $1 = sp + 4|0;
 $2 = sp;
 HEAP32[$1>>2] = $gfp;
 HEAPF32[$2>>2] = $ATHlower;
 $3 = HEAP32[$1>>2]|0;
 $4 = (_is_lame_global_flags_valid($3)|0);
 $5 = ($4|0)!=(0);
 if ($5) {
  $6 = +HEAPF32[$2>>2];
  $7 = HEAP32[$1>>2]|0;
  $8 = (($7) + 228|0);
  HEAPF32[$8>>2] = $6;
  HEAP32[$0>>2] = 0;
  $9 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($9|0);
 } else {
  HEAP32[$0>>2] = -1;
  $9 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($9|0);
 }
 return 0|0;
}
function _lame_get_ATHlower($gfp) {
 $gfp = $gfp|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0.0, $8 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp + 4|0;
 $1 = sp;
 HEAP32[$1>>2] = $gfp;
 $2 = HEAP32[$1>>2]|0;
 $3 = (_is_lame_global_flags_valid($2)|0);
 $4 = ($3|0)!=(0);
 if ($4) {
  $5 = HEAP32[$1>>2]|0;
  $6 = (($5) + 228|0);
  $7 = +HEAPF32[$6>>2];
  HEAPF32[$0>>2] = $7;
  $8 = +HEAPF32[$0>>2];
  STACKTOP = sp;return (+$8);
 } else {
  HEAPF32[$0>>2] = 0.0;
  $8 = +HEAPF32[$0>>2];
  STACKTOP = sp;return (+$8);
 }
 return +0;
}
function _lame_set_athaa_sensitivity($gfp,$athaa_sensitivity) {
 $gfp = $gfp|0;
 $athaa_sensitivity = +$athaa_sensitivity;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp + 8|0;
 $1 = sp + 4|0;
 $2 = sp;
 HEAP32[$1>>2] = $gfp;
 HEAPF32[$2>>2] = $athaa_sensitivity;
 $3 = HEAP32[$1>>2]|0;
 $4 = (_is_lame_global_flags_valid($3)|0);
 $5 = ($4|0)!=(0);
 if ($5) {
  $6 = +HEAPF32[$2>>2];
  $7 = HEAP32[$1>>2]|0;
  $8 = (($7) + 236|0);
  HEAPF32[$8>>2] = $6;
  HEAP32[$0>>2] = 0;
  $9 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($9|0);
 } else {
  HEAP32[$0>>2] = -1;
  $9 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($9|0);
 }
 return 0|0;
}
function _lame_get_athaa_sensitivity($gfp) {
 $gfp = $gfp|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0.0, $8 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp + 4|0;
 $1 = sp;
 HEAP32[$1>>2] = $gfp;
 $2 = HEAP32[$1>>2]|0;
 $3 = (_is_lame_global_flags_valid($2)|0);
 $4 = ($3|0)!=(0);
 if ($4) {
  $5 = HEAP32[$1>>2]|0;
  $6 = (($5) + 236|0);
  $7 = +HEAPF32[$6>>2];
  HEAPF32[$0>>2] = $7;
  $8 = +HEAPF32[$0>>2];
  STACKTOP = sp;return (+$8);
 } else {
  HEAPF32[$0>>2] = 0.0;
  $8 = +HEAPF32[$0>>2];
  STACKTOP = sp;return (+$8);
 }
 return +0;
}
function _lame_set_interChRatio($gfp,$ratio) {
 $gfp = $gfp|0;
 $ratio = +$ratio;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0.0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp + 8|0;
 $1 = sp + 4|0;
 $2 = sp;
 HEAP32[$1>>2] = $gfp;
 HEAPF32[$2>>2] = $ratio;
 $3 = HEAP32[$1>>2]|0;
 $4 = (_is_lame_global_flags_valid($3)|0);
 $5 = ($4|0)!=(0);
 if ($5) {
  $6 = +HEAPF32[$2>>2];
  $7 = 0.0 <= $6;
  if ($7) {
   $8 = +HEAPF32[$2>>2];
   $9 = $8;
   $10 = $9 <= 1.0;
   if ($10) {
    $11 = +HEAPF32[$2>>2];
    $12 = HEAP32[$1>>2]|0;
    $13 = (($12) + 248|0);
    HEAPF32[$13>>2] = $11;
    HEAP32[$0>>2] = 0;
    $14 = HEAP32[$0>>2]|0;
    STACKTOP = sp;return ($14|0);
   }
  }
 }
 HEAP32[$0>>2] = -1;
 $14 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($14|0);
}
function _lame_get_interChRatio($gfp) {
 $gfp = $gfp|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0.0, $8 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp + 4|0;
 $1 = sp;
 HEAP32[$1>>2] = $gfp;
 $2 = HEAP32[$1>>2]|0;
 $3 = (_is_lame_global_flags_valid($2)|0);
 $4 = ($3|0)!=(0);
 if ($4) {
  $5 = HEAP32[$1>>2]|0;
  $6 = (($5) + 248|0);
  $7 = +HEAPF32[$6>>2];
  HEAPF32[$0>>2] = $7;
  $8 = +HEAPF32[$0>>2];
  STACKTOP = sp;return (+$8);
 } else {
  HEAPF32[$0>>2] = 0.0;
  $8 = +HEAPF32[$0>>2];
  STACKTOP = sp;return (+$8);
 }
 return +0;
}
function _lame_set_sfscale($gfp,$val) {
 $gfp = $gfp|0;
 $val = $val|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp + 8|0;
 $1 = sp + 4|0;
 $2 = sp;
 HEAP32[$1>>2] = $gfp;
 HEAP32[$2>>2] = $val;
 $3 = HEAP32[$1>>2]|0;
 $4 = (_is_lame_global_flags_valid($3)|0);
 $5 = ($4|0)!=(0);
 if ($5) {
  $6 = HEAP32[$2>>2]|0;
  $7 = ($6|0)!=(0);
  $8 = $7 ? 2 : 1;
  $9 = HEAP32[$1>>2]|0;
  $10 = (($9) + 84|0);
  HEAP32[$10>>2] = $8;
  HEAP32[$0>>2] = 0;
  $11 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($11|0);
 } else {
  HEAP32[$0>>2] = -1;
  $11 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($11|0);
 }
 return 0|0;
}
function _lame_set_short_threshold_lrm($gfp,$lrm) {
 $gfp = $gfp|0;
 $lrm = +$lrm;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp + 8|0;
 $1 = sp + 4|0;
 $2 = sp;
 HEAP32[$1>>2] = $gfp;
 HEAPF32[$2>>2] = $lrm;
 $3 = HEAP32[$1>>2]|0;
 $4 = (_is_lame_global_flags_valid($3)|0);
 $5 = ($4|0)!=(0);
 if ($5) {
  $6 = +HEAPF32[$2>>2];
  $7 = HEAP32[$1>>2]|0;
  $8 = (($7) + 264|0);
  HEAPF32[$8>>2] = $6;
  HEAP32[$0>>2] = 0;
  $9 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($9|0);
 } else {
  HEAP32[$0>>2] = -1;
  $9 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($9|0);
 }
 return 0|0;
}
function _lame_get_short_threshold_lrm($gfp) {
 $gfp = $gfp|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0.0, $8 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp + 4|0;
 $1 = sp;
 HEAP32[$1>>2] = $gfp;
 $2 = HEAP32[$1>>2]|0;
 $3 = (_is_lame_global_flags_valid($2)|0);
 $4 = ($3|0)!=(0);
 if ($4) {
  $5 = HEAP32[$1>>2]|0;
  $6 = (($5) + 264|0);
  $7 = +HEAPF32[$6>>2];
  HEAPF32[$0>>2] = $7;
  $8 = +HEAPF32[$0>>2];
  STACKTOP = sp;return (+$8);
 } else {
  HEAPF32[$0>>2] = 0.0;
  $8 = +HEAPF32[$0>>2];
  STACKTOP = sp;return (+$8);
 }
 return +0;
}
function _lame_set_short_threshold_s($gfp,$s) {
 $gfp = $gfp|0;
 $s = +$s;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp + 8|0;
 $1 = sp + 4|0;
 $2 = sp;
 HEAP32[$1>>2] = $gfp;
 HEAPF32[$2>>2] = $s;
 $3 = HEAP32[$1>>2]|0;
 $4 = (_is_lame_global_flags_valid($3)|0);
 $5 = ($4|0)!=(0);
 if ($5) {
  $6 = +HEAPF32[$2>>2];
  $7 = HEAP32[$1>>2]|0;
  $8 = (($7) + 268|0);
  HEAPF32[$8>>2] = $6;
  HEAP32[$0>>2] = 0;
  $9 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($9|0);
 } else {
  HEAP32[$0>>2] = -1;
  $9 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($9|0);
 }
 return 0|0;
}
function _lame_get_short_threshold_s($gfp) {
 $gfp = $gfp|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0.0, $8 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp + 4|0;
 $1 = sp;
 HEAP32[$1>>2] = $gfp;
 $2 = HEAP32[$1>>2]|0;
 $3 = (_is_lame_global_flags_valid($2)|0);
 $4 = ($3|0)!=(0);
 if ($4) {
  $5 = HEAP32[$1>>2]|0;
  $6 = (($5) + 268|0);
  $7 = +HEAPF32[$6>>2];
  HEAPF32[$0>>2] = $7;
  $8 = +HEAPF32[$0>>2];
  STACKTOP = sp;return (+$8);
 } else {
  HEAPF32[$0>>2] = 0.0;
  $8 = +HEAPF32[$0>>2];
  STACKTOP = sp;return (+$8);
 }
 return +0;
}
function _lame_set_msfix($gfp,$msfix) {
 $gfp = $gfp|0;
 $msfix = +$msfix;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0.0, $6 = 0.0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp + 8|0;
 $1 = sp;
 HEAP32[$0>>2] = $gfp;
 HEAPF64[$1>>3] = $msfix;
 $2 = HEAP32[$0>>2]|0;
 $3 = (_is_lame_global_flags_valid($2)|0);
 $4 = ($3|0)!=(0);
 if (!($4)) {
  STACKTOP = sp;return;
 }
 $5 = +HEAPF64[$1>>3];
 $6 = $5;
 $7 = HEAP32[$0>>2]|0;
 $8 = (($7) + 252|0);
 HEAPF32[$8>>2] = $6;
 STACKTOP = sp;return;
}
function _lame_get_msfix($gfp) {
 $gfp = $gfp|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0.0, $8 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp + 4|0;
 $1 = sp;
 HEAP32[$1>>2] = $gfp;
 $2 = HEAP32[$1>>2]|0;
 $3 = (_is_lame_global_flags_valid($2)|0);
 $4 = ($3|0)!=(0);
 if ($4) {
  $5 = HEAP32[$1>>2]|0;
  $6 = (($5) + 252|0);
  $7 = +HEAPF32[$6>>2];
  HEAPF32[$0>>2] = $7;
  $8 = +HEAPF32[$0>>2];
  STACKTOP = sp;return (+$8);
 } else {
  HEAPF32[$0>>2] = 0.0;
  $8 = +HEAPF32[$0>>2];
  STACKTOP = sp;return (+$8);
 }
 return +0;
}
function _noquant_count_bits($gfc,$gi,$prev_noise) {
 $gfc = $gfc|0;
 $gi = $gi|0;
 $prev_noise = $prev_noise|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $a1 = 0, $a2 = 0;
 var $bits = 0, $cfg = 0, $i = 0, $ix = 0, $p = 0, $sfb = 0, $x1 = 0, $x2 = 0, $x3 = 0, $x4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $0 = sp + 60|0;
 $1 = sp + 56|0;
 $2 = sp + 52|0;
 $3 = sp + 48|0;
 $cfg = sp + 44|0;
 $bits = sp + 40|0;
 $i = sp + 36|0;
 $a1 = sp + 32|0;
 $a2 = sp + 28|0;
 $ix = sp + 24|0;
 $x4 = sp + 20|0;
 $x3 = sp + 16|0;
 $x2 = sp + 12|0;
 $x1 = sp + 8|0;
 $p = sp + 4|0;
 $sfb = sp;
 HEAP32[$1>>2] = $gfc;
 HEAP32[$2>>2] = $gi;
 HEAP32[$3>>2] = $prev_noise;
 $4 = HEAP32[$1>>2]|0;
 $5 = (($4) + 16|0);
 HEAP32[$cfg>>2] = $5;
 HEAP32[$bits>>2] = 0;
 $6 = HEAP32[$2>>2]|0;
 $7 = (($6) + 2304|0);
 HEAP32[$ix>>2] = $7;
 $8 = HEAP32[$2>>2]|0;
 $9 = (($8) + 5208|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (($10) + 2)|0;
 $12 = $11 >> 1;
 $13 = $12 << 1;
 $14 = (576)<($13|0);
 if ($14) {
  $21 = 576;
 } else {
  $15 = HEAP32[$2>>2]|0;
  $16 = (($15) + 5208|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = (($17) + 2)|0;
  $19 = $18 >> 1;
  $20 = $19 << 1;
  $21 = $20;
 }
 HEAP32[$i>>2] = $21;
 $22 = HEAP32[$3>>2]|0;
 $23 = ($22|0)!=(0|0);
 if ($23) {
  $24 = HEAP32[$3>>2]|0;
  $25 = (($24) + 4|0);
  HEAP32[$25>>2] = 0;
 }
 while(1) {
  $26 = HEAP32[$i>>2]|0;
  $27 = ($26|0)>(1);
  if (!($27)) {
   break;
  }
  $28 = HEAP32[$i>>2]|0;
  $29 = (($28) - 1)|0;
  $30 = HEAP32[$ix>>2]|0;
  $31 = (($30) + ($29<<2)|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = HEAP32[$i>>2]|0;
  $34 = (($33) - 2)|0;
  $35 = HEAP32[$ix>>2]|0;
  $36 = (($35) + ($34<<2)|0);
  $37 = HEAP32[$36>>2]|0;
  $38 = $32 | $37;
  $39 = ($38|0)!=(0);
  if ($39) {
   break;
  }
  $40 = HEAP32[$i>>2]|0;
  $41 = (($40) - 2)|0;
  HEAP32[$i>>2] = $41;
 }
 $42 = HEAP32[$i>>2]|0;
 $43 = HEAP32[$2>>2]|0;
 $44 = (($43) + 4776|0);
 HEAP32[$44>>2] = $42;
 HEAP32[$a2>>2] = 0;
 HEAP32[$a1>>2] = 0;
 while(1) {
  $45 = HEAP32[$i>>2]|0;
  $46 = ($45|0)>(3);
  if (!($46)) {
   break;
  }
  $47 = HEAP32[$i>>2]|0;
  $48 = (($47) - 4)|0;
  $49 = HEAP32[$ix>>2]|0;
  $50 = (($49) + ($48<<2)|0);
  $51 = HEAP32[$50>>2]|0;
  HEAP32[$x4>>2] = $51;
  $52 = HEAP32[$i>>2]|0;
  $53 = (($52) - 3)|0;
  $54 = HEAP32[$ix>>2]|0;
  $55 = (($54) + ($53<<2)|0);
  $56 = HEAP32[$55>>2]|0;
  HEAP32[$x3>>2] = $56;
  $57 = HEAP32[$i>>2]|0;
  $58 = (($57) - 2)|0;
  $59 = HEAP32[$ix>>2]|0;
  $60 = (($59) + ($58<<2)|0);
  $61 = HEAP32[$60>>2]|0;
  HEAP32[$x2>>2] = $61;
  $62 = HEAP32[$i>>2]|0;
  $63 = (($62) - 1)|0;
  $64 = HEAP32[$ix>>2]|0;
  $65 = (($64) + ($63<<2)|0);
  $66 = HEAP32[$65>>2]|0;
  HEAP32[$x1>>2] = $66;
  $67 = HEAP32[$x4>>2]|0;
  $68 = HEAP32[$x3>>2]|0;
  $69 = $67 | $68;
  $70 = HEAP32[$x2>>2]|0;
  $71 = $69 | $70;
  $72 = HEAP32[$x1>>2]|0;
  $73 = $71 | $72;
  $74 = ($73>>>0)>(1);
  if ($74) {
   break;
  }
  $75 = HEAP32[$x4>>2]|0;
  $76 = $75<<1;
  $77 = HEAP32[$x3>>2]|0;
  $78 = (($76) + ($77))|0;
  $79 = $78<<1;
  $80 = HEAP32[$x2>>2]|0;
  $81 = (($79) + ($80))|0;
  $82 = $81<<1;
  $83 = HEAP32[$x1>>2]|0;
  $84 = (($82) + ($83))|0;
  HEAP32[$p>>2] = $84;
  $85 = HEAP32[$p>>2]|0;
  $86 = (91568 + ($85)|0);
  $87 = HEAP8[$86>>0]|0;
  $88 = $87&255;
  $89 = HEAP32[$a1>>2]|0;
  $90 = (($89) + ($88))|0;
  HEAP32[$a1>>2] = $90;
  $91 = HEAP32[$p>>2]|0;
  $92 = (91584 + ($91)|0);
  $93 = HEAP8[$92>>0]|0;
  $94 = $93&255;
  $95 = HEAP32[$a2>>2]|0;
  $96 = (($95) + ($94))|0;
  HEAP32[$a2>>2] = $96;
  $97 = HEAP32[$i>>2]|0;
  $98 = (($97) - 4)|0;
  HEAP32[$i>>2] = $98;
 }
 $99 = HEAP32[$a1>>2]|0;
 HEAP32[$bits>>2] = $99;
 $100 = HEAP32[$2>>2]|0;
 $101 = (($100) + 4840|0);
 HEAP32[$101>>2] = 0;
 $102 = HEAP32[$a1>>2]|0;
 $103 = HEAP32[$a2>>2]|0;
 $104 = ($102|0)>($103|0);
 if ($104) {
  $105 = HEAP32[$a2>>2]|0;
  HEAP32[$bits>>2] = $105;
  $106 = HEAP32[$2>>2]|0;
  $107 = (($106) + 4840|0);
  HEAP32[$107>>2] = 1;
 }
 $108 = HEAP32[$bits>>2]|0;
 $109 = HEAP32[$2>>2]|0;
 $110 = (($109) + 5184|0);
 HEAP32[$110>>2] = $108;
 $111 = HEAP32[$i>>2]|0;
 $112 = HEAP32[$2>>2]|0;
 $113 = (($112) + 4772|0);
 HEAP32[$113>>2] = $111;
 $114 = HEAP32[$i>>2]|0;
 $115 = ($114|0)==(0);
 if ($115) {
  $116 = HEAP32[$bits>>2]|0;
  HEAP32[$0>>2] = $116;
  $277 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($277|0);
 }
 $117 = HEAP32[$2>>2]|0;
 $118 = (($117) + 4788|0);
 $119 = HEAP32[$118>>2]|0;
 $120 = ($119|0)==(2);
 do {
  if ($120) {
   $121 = HEAP32[$1>>2]|0;
   $122 = (($121) + 21360|0);
   $123 = (($122) + 92|0);
   $124 = (($123) + 12|0);
   $125 = HEAP32[$124>>2]|0;
   $126 = ($125*3)|0;
   HEAP32[$a1>>2] = $126;
   $127 = HEAP32[$a1>>2]|0;
   $128 = HEAP32[$2>>2]|0;
   $129 = (($128) + 4772|0);
   $130 = HEAP32[$129>>2]|0;
   $131 = ($127|0)>($130|0);
   if ($131) {
    $132 = HEAP32[$2>>2]|0;
    $133 = (($132) + 4772|0);
    $134 = HEAP32[$133>>2]|0;
    HEAP32[$a1>>2] = $134;
   }
   $135 = HEAP32[$2>>2]|0;
   $136 = (($135) + 4772|0);
   $137 = HEAP32[$136>>2]|0;
   HEAP32[$a2>>2] = $137;
  } else {
   $138 = HEAP32[$2>>2]|0;
   $139 = (($138) + 4788|0);
   $140 = HEAP32[$139>>2]|0;
   $141 = ($140|0)==(0);
   if ($141) {
    $142 = HEAP32[$i>>2]|0;
    $143 = (($142) - 2)|0;
    $144 = HEAP32[$1>>2]|0;
    $145 = (($144) + 84768|0);
    $146 = (($145) + 332|0);
    $147 = (($146) + ($143)|0);
    $148 = HEAP8[$147>>0]|0;
    $149 = $148 << 24 >> 24;
    $150 = HEAP32[$2>>2]|0;
    $151 = (($150) + 4824|0);
    HEAP32[$151>>2] = $149;
    HEAP32[$a1>>2] = $149;
    $152 = HEAP32[$i>>2]|0;
    $153 = (($152) - 1)|0;
    $154 = HEAP32[$1>>2]|0;
    $155 = (($154) + 84768|0);
    $156 = (($155) + 332|0);
    $157 = (($156) + ($153)|0);
    $158 = HEAP8[$157>>0]|0;
    $159 = $158 << 24 >> 24;
    $160 = HEAP32[$2>>2]|0;
    $161 = (($160) + 4828|0);
    HEAP32[$161>>2] = $159;
    HEAP32[$a2>>2] = $159;
    $162 = HEAP32[$a1>>2]|0;
    $163 = HEAP32[$a2>>2]|0;
    $164 = (($162) + ($163))|0;
    $165 = (($164) + 2)|0;
    $166 = HEAP32[$1>>2]|0;
    $167 = (($166) + 21360|0);
    $168 = (($167) + ($165<<2)|0);
    $169 = HEAP32[$168>>2]|0;
    HEAP32[$a2>>2] = $169;
    $170 = HEAP32[$a1>>2]|0;
    $171 = (($170) + 1)|0;
    $172 = HEAP32[$1>>2]|0;
    $173 = (($172) + 21360|0);
    $174 = (($173) + ($171<<2)|0);
    $175 = HEAP32[$174>>2]|0;
    HEAP32[$a1>>2] = $175;
    $176 = HEAP32[$a2>>2]|0;
    $177 = HEAP32[$i>>2]|0;
    $178 = ($176|0)<($177|0);
    if (!($178)) {
     break;
    }
    $179 = HEAP32[$1>>2]|0;
    $180 = (($179) + 85816|0);
    $181 = HEAP32[$180>>2]|0;
    $182 = HEAP32[$ix>>2]|0;
    $183 = HEAP32[$a2>>2]|0;
    $184 = (($182) + ($183<<2)|0);
    $185 = HEAP32[$ix>>2]|0;
    $186 = HEAP32[$i>>2]|0;
    $187 = (($185) + ($186<<2)|0);
    $188 = (FUNCTION_TABLE_iiii[$181 & 3]($184,$187,$bits)|0);
    $189 = HEAP32[$2>>2]|0;
    $190 = (($189) + 4796|0);
    $191 = (($190) + 8|0);
    HEAP32[$191>>2] = $188;
    break;
   } else {
    $192 = HEAP32[$2>>2]|0;
    $193 = (($192) + 4824|0);
    HEAP32[$193>>2] = 7;
    $194 = HEAP32[$2>>2]|0;
    $195 = (($194) + 4828|0);
    HEAP32[$195>>2] = 13;
    $196 = HEAP32[$1>>2]|0;
    $197 = (($196) + 21360|0);
    $198 = (($197) + 32|0);
    $199 = HEAP32[$198>>2]|0;
    HEAP32[$a1>>2] = $199;
    $200 = HEAP32[$i>>2]|0;
    HEAP32[$a2>>2] = $200;
    $201 = HEAP32[$a1>>2]|0;
    $202 = HEAP32[$a2>>2]|0;
    $203 = ($201|0)>($202|0);
    if (!($203)) {
     break;
    }
    $204 = HEAP32[$a2>>2]|0;
    HEAP32[$a1>>2] = $204;
    break;
   }
  }
 } while(0);
 $205 = HEAP32[$a1>>2]|0;
 $206 = HEAP32[$i>>2]|0;
 $207 = ($205|0)<($206|0);
 $208 = HEAP32[$a1>>2]|0;
 $209 = HEAP32[$i>>2]|0;
 $210 = $207 ? $208 : $209;
 HEAP32[$a1>>2] = $210;
 $211 = HEAP32[$a2>>2]|0;
 $212 = HEAP32[$i>>2]|0;
 $213 = ($211|0)<($212|0);
 $214 = HEAP32[$a2>>2]|0;
 $215 = HEAP32[$i>>2]|0;
 $216 = $213 ? $214 : $215;
 HEAP32[$a2>>2] = $216;
 $217 = HEAP32[$a1>>2]|0;
 $218 = (0)<($217|0);
 if ($218) {
  $219 = HEAP32[$1>>2]|0;
  $220 = (($219) + 85816|0);
  $221 = HEAP32[$220>>2]|0;
  $222 = HEAP32[$ix>>2]|0;
  $223 = HEAP32[$ix>>2]|0;
  $224 = HEAP32[$a1>>2]|0;
  $225 = (($223) + ($224<<2)|0);
  $226 = (FUNCTION_TABLE_iiii[$221 & 3]($222,$225,$bits)|0);
  $227 = HEAP32[$2>>2]|0;
  $228 = (($227) + 4796|0);
  HEAP32[$228>>2] = $226;
 }
 $229 = HEAP32[$a1>>2]|0;
 $230 = HEAP32[$a2>>2]|0;
 $231 = ($229|0)<($230|0);
 if ($231) {
  $232 = HEAP32[$1>>2]|0;
  $233 = (($232) + 85816|0);
  $234 = HEAP32[$233>>2]|0;
  $235 = HEAP32[$ix>>2]|0;
  $236 = HEAP32[$a1>>2]|0;
  $237 = (($235) + ($236<<2)|0);
  $238 = HEAP32[$ix>>2]|0;
  $239 = HEAP32[$a2>>2]|0;
  $240 = (($238) + ($239<<2)|0);
  $241 = (FUNCTION_TABLE_iiii[$234 & 3]($237,$240,$bits)|0);
  $242 = HEAP32[$2>>2]|0;
  $243 = (($242) + 4796|0);
  $244 = (($243) + 4|0);
  HEAP32[$244>>2] = $241;
 }
 $245 = HEAP32[$cfg>>2]|0;
 $246 = (($245) + 20|0);
 $247 = HEAP32[$246>>2]|0;
 $248 = ($247|0)==(2);
 if ($248) {
  $249 = HEAP32[$bits>>2]|0;
  $250 = HEAP32[$2>>2]|0;
  $251 = (($250) + 4768|0);
  HEAP32[$251>>2] = $249;
  $252 = HEAP32[$1>>2]|0;
  $253 = HEAP32[$2>>2]|0;
  _best_huffman_divide($252,$253);
  $254 = HEAP32[$2>>2]|0;
  $255 = (($254) + 4768|0);
  $256 = HEAP32[$255>>2]|0;
  HEAP32[$bits>>2] = $256;
 }
 $257 = HEAP32[$3>>2]|0;
 $258 = ($257|0)!=(0|0);
 if ($258) {
  $259 = HEAP32[$2>>2]|0;
  $260 = (($259) + 4788|0);
  $261 = HEAP32[$260>>2]|0;
  $262 = ($261|0)==(0);
  if ($262) {
   HEAP32[$sfb>>2] = 0;
   while(1) {
    $263 = HEAP32[$sfb>>2]|0;
    $264 = HEAP32[$1>>2]|0;
    $265 = (($264) + 21360|0);
    $266 = (($265) + ($263<<2)|0);
    $267 = HEAP32[$266>>2]|0;
    $268 = HEAP32[$2>>2]|0;
    $269 = (($268) + 4772|0);
    $270 = HEAP32[$269>>2]|0;
    $271 = ($267|0)<($270|0);
    $272 = HEAP32[$sfb>>2]|0;
    if (!($271)) {
     break;
    }
    $273 = (($272) + 1)|0;
    HEAP32[$sfb>>2] = $273;
   }
   $274 = HEAP32[$3>>2]|0;
   $275 = (($274) + 4|0);
   HEAP32[$275>>2] = $272;
  }
 }
 $276 = HEAP32[$bits>>2]|0;
 HEAP32[$0>>2] = $276;
 $277 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($277|0);
}
function _best_huffman_divide($gfc,$gi) {
 $gfc = $gfc|0;
 $gi = $gi|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $a1 = 0, $a2 = 0, $cfg = 0, $cod_info2 = 0, $i = 0, $ix = 0;
 var $p = 0, $r01_bits = 0, $r01_div = 0, $r0_tbl = 0, $r1_tbl = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 5664|0;
 $0 = sp + 5648|0;
 $1 = sp + 5644|0;
 $cfg = sp + 5640|0;
 $i = sp + 5636|0;
 $a1 = sp + 5632|0;
 $a2 = sp + 5628|0;
 $cod_info2 = sp + 376|0;
 $ix = sp + 372|0;
 $r01_bits = sp + 280|0;
 $r01_div = sp + 188|0;
 $r0_tbl = sp + 96|0;
 $r1_tbl = sp + 4|0;
 $p = sp;
 HEAP32[$0>>2] = $gfc;
 HEAP32[$1>>2] = $gi;
 $2 = HEAP32[$0>>2]|0;
 $3 = (($2) + 16|0);
 HEAP32[$cfg>>2] = $3;
 $4 = HEAP32[$1>>2]|0;
 $5 = (($4) + 2304|0);
 HEAP32[$ix>>2] = $5;
 $6 = HEAP32[$1>>2]|0;
 $7 = (($6) + 4788|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)==(2);
 if ($9) {
  $10 = HEAP32[$cfg>>2]|0;
  $11 = (($10) + 60|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = ($12|0)==(1);
  if ($13) {
   STACKTOP = sp;return;
  }
 }
 $14 = HEAP32[$1>>2]|0;
 _memcpy(($cod_info2|0),($14|0),5252)|0;
 $15 = HEAP32[$1>>2]|0;
 $16 = (($15) + 4788|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ($17|0)==(0);
 if ($18) {
  $19 = HEAP32[$0>>2]|0;
  $20 = HEAP32[$1>>2]|0;
  $21 = HEAP32[$ix>>2]|0;
  _recalc_divide_init($19,$20,$21,$r01_bits,$r01_div,$r0_tbl,$r1_tbl);
  $22 = HEAP32[$0>>2]|0;
  $23 = HEAP32[$1>>2]|0;
  $24 = HEAP32[$ix>>2]|0;
  _recalc_divide_sub($22,$cod_info2,$23,$24,$r01_bits,$r01_div,$r0_tbl,$r1_tbl);
 }
 $25 = (($cod_info2) + 4772|0);
 $26 = HEAP32[$25>>2]|0;
 HEAP32[$i>>2] = $26;
 $27 = HEAP32[$i>>2]|0;
 $28 = ($27|0)==(0);
 if ($28) {
  STACKTOP = sp;return;
 }
 $29 = HEAP32[$i>>2]|0;
 $30 = (($29) - 2)|0;
 $31 = HEAP32[$ix>>2]|0;
 $32 = (($31) + ($30<<2)|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = HEAP32[$i>>2]|0;
 $35 = (($34) - 1)|0;
 $36 = HEAP32[$ix>>2]|0;
 $37 = (($36) + ($35<<2)|0);
 $38 = HEAP32[$37>>2]|0;
 $39 = $33 | $38;
 $40 = ($39>>>0)>(1);
 if ($40) {
  STACKTOP = sp;return;
 }
 $41 = HEAP32[$1>>2]|0;
 $42 = (($41) + 4776|0);
 $43 = HEAP32[$42>>2]|0;
 $44 = (($43) + 2)|0;
 HEAP32[$i>>2] = $44;
 $45 = HEAP32[$i>>2]|0;
 $46 = ($45|0)>(576);
 if ($46) {
  STACKTOP = sp;return;
 }
 $47 = HEAP32[$1>>2]|0;
 _memcpy(($cod_info2|0),($47|0),5252)|0;
 $48 = HEAP32[$i>>2]|0;
 $49 = (($cod_info2) + 4776|0);
 HEAP32[$49>>2] = $48;
 HEAP32[$a2>>2] = 0;
 HEAP32[$a1>>2] = 0;
 while(1) {
  $50 = HEAP32[$i>>2]|0;
  $51 = (($cod_info2) + 4772|0);
  $52 = HEAP32[$51>>2]|0;
  $53 = ($50|0)>($52|0);
  $54 = HEAP32[$i>>2]|0;
  if (!($53)) {
   break;
  }
  $55 = (($54) - 4)|0;
  $56 = HEAP32[$ix>>2]|0;
  $57 = (($56) + ($55<<2)|0);
  $58 = HEAP32[$57>>2]|0;
  $59 = $58<<1;
  $60 = HEAP32[$i>>2]|0;
  $61 = (($60) - 3)|0;
  $62 = HEAP32[$ix>>2]|0;
  $63 = (($62) + ($61<<2)|0);
  $64 = HEAP32[$63>>2]|0;
  $65 = (($59) + ($64))|0;
  $66 = $65<<1;
  $67 = HEAP32[$i>>2]|0;
  $68 = (($67) - 2)|0;
  $69 = HEAP32[$ix>>2]|0;
  $70 = (($69) + ($68<<2)|0);
  $71 = HEAP32[$70>>2]|0;
  $72 = (($66) + ($71))|0;
  $73 = $72<<1;
  $74 = HEAP32[$i>>2]|0;
  $75 = (($74) - 1)|0;
  $76 = HEAP32[$ix>>2]|0;
  $77 = (($76) + ($75<<2)|0);
  $78 = HEAP32[$77>>2]|0;
  $79 = (($73) + ($78))|0;
  HEAP32[$p>>2] = $79;
  $80 = HEAP32[$p>>2]|0;
  $81 = (91568 + ($80)|0);
  $82 = HEAP8[$81>>0]|0;
  $83 = $82&255;
  $84 = HEAP32[$a1>>2]|0;
  $85 = (($84) + ($83))|0;
  HEAP32[$a1>>2] = $85;
  $86 = HEAP32[$p>>2]|0;
  $87 = (91584 + ($86)|0);
  $88 = HEAP8[$87>>0]|0;
  $89 = $88&255;
  $90 = HEAP32[$a2>>2]|0;
  $91 = (($90) + ($89))|0;
  HEAP32[$a2>>2] = $91;
  $92 = HEAP32[$i>>2]|0;
  $93 = (($92) - 4)|0;
  HEAP32[$i>>2] = $93;
 }
 $94 = (($cod_info2) + 4772|0);
 HEAP32[$94>>2] = $54;
 $95 = (($cod_info2) + 4840|0);
 HEAP32[$95>>2] = 0;
 $96 = HEAP32[$a1>>2]|0;
 $97 = HEAP32[$a2>>2]|0;
 $98 = ($96|0)>($97|0);
 if ($98) {
  $99 = HEAP32[$a2>>2]|0;
  HEAP32[$a1>>2] = $99;
  $100 = (($cod_info2) + 4840|0);
  HEAP32[$100>>2] = 1;
 }
 $101 = HEAP32[$a1>>2]|0;
 $102 = (($cod_info2) + 5184|0);
 HEAP32[$102>>2] = $101;
 $103 = (($cod_info2) + 4788|0);
 $104 = HEAP32[$103>>2]|0;
 $105 = ($104|0)==(0);
 if ($105) {
  $106 = HEAP32[$0>>2]|0;
  $107 = HEAP32[$1>>2]|0;
  $108 = HEAP32[$ix>>2]|0;
  _recalc_divide_sub($106,$cod_info2,$107,$108,$r01_bits,$r01_div,$r0_tbl,$r1_tbl);
  STACKTOP = sp;return;
 }
 $109 = HEAP32[$a1>>2]|0;
 $110 = (($cod_info2) + 4768|0);
 HEAP32[$110>>2] = $109;
 $111 = HEAP32[$0>>2]|0;
 $112 = (($111) + 21360|0);
 $113 = (($112) + 32|0);
 $114 = HEAP32[$113>>2]|0;
 HEAP32[$a1>>2] = $114;
 $115 = HEAP32[$a1>>2]|0;
 $116 = HEAP32[$i>>2]|0;
 $117 = ($115|0)>($116|0);
 if ($117) {
  $118 = HEAP32[$i>>2]|0;
  HEAP32[$a1>>2] = $118;
 }
 $119 = HEAP32[$a1>>2]|0;
 $120 = ($119|0)>(0);
 if ($120) {
  $121 = HEAP32[$0>>2]|0;
  $122 = (($121) + 85816|0);
  $123 = HEAP32[$122>>2]|0;
  $124 = HEAP32[$ix>>2]|0;
  $125 = HEAP32[$ix>>2]|0;
  $126 = HEAP32[$a1>>2]|0;
  $127 = (($125) + ($126<<2)|0);
  $128 = (($cod_info2) + 4768|0);
  $129 = (FUNCTION_TABLE_iiii[$123 & 3]($124,$127,$128)|0);
  $130 = (($cod_info2) + 4796|0);
  HEAP32[$130>>2] = $129;
 }
 $131 = HEAP32[$i>>2]|0;
 $132 = HEAP32[$a1>>2]|0;
 $133 = ($131|0)>($132|0);
 if ($133) {
  $134 = HEAP32[$0>>2]|0;
  $135 = (($134) + 85816|0);
  $136 = HEAP32[$135>>2]|0;
  $137 = HEAP32[$ix>>2]|0;
  $138 = HEAP32[$a1>>2]|0;
  $139 = (($137) + ($138<<2)|0);
  $140 = HEAP32[$ix>>2]|0;
  $141 = HEAP32[$i>>2]|0;
  $142 = (($140) + ($141<<2)|0);
  $143 = (($cod_info2) + 4768|0);
  $144 = (FUNCTION_TABLE_iiii[$136 & 3]($139,$142,$143)|0);
  $145 = (($cod_info2) + 4796|0);
  $146 = (($145) + 4|0);
  HEAP32[$146>>2] = $144;
 }
 $147 = HEAP32[$1>>2]|0;
 $148 = (($147) + 4768|0);
 $149 = HEAP32[$148>>2]|0;
 $150 = (($cod_info2) + 4768|0);
 $151 = HEAP32[$150>>2]|0;
 $152 = ($149|0)>($151|0);
 if (!($152)) {
  STACKTOP = sp;return;
 }
 $153 = HEAP32[$1>>2]|0;
 _memcpy(($153|0),($cod_info2|0),5252)|0;
 STACKTOP = sp;return;
}
function _count_bits($gfc,$xr,$gi,$prev_noise) {
 $gfc = $gfc|0;
 $xr = $xr|0;
 $gi = $gi|0;
 $prev_noise = $prev_noise|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0.0, $12 = 0.0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0.0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0.0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0.0, $43 = 0.0, $44 = 0.0;
 var $45 = 0.0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0.0, $77 = 0.0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $gain = 0, $ix = 0, $j = 0, $k = 0;
 var $roundfac = 0, $sfb = 0, $w = 0, $width = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $0 = sp + 48|0;
 $1 = sp + 44|0;
 $2 = sp + 40|0;
 $3 = sp + 36|0;
 $4 = sp + 32|0;
 $ix = sp + 28|0;
 $w = sp + 24|0;
 $sfb = sp + 20|0;
 $j = sp + 16|0;
 $gain = sp + 12|0;
 $roundfac = sp + 8|0;
 $width = sp + 4|0;
 $k = sp;
 HEAP32[$1>>2] = $gfc;
 HEAP32[$2>>2] = $xr;
 HEAP32[$3>>2] = $gi;
 HEAP32[$4>>2] = $prev_noise;
 $5 = HEAP32[$3>>2]|0;
 $6 = (($5) + 2304|0);
 HEAP32[$ix>>2] = $6;
 $7 = HEAP32[$3>>2]|0;
 $8 = (($7) + 4780|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (88968 + ($9<<2)|0);
 $11 = +HEAPF32[$10>>2];
 $12 = 8206.0 / $11;
 HEAPF32[$w>>2] = $12;
 $13 = HEAP32[$3>>2]|0;
 $14 = (($13) + 4764|0);
 $15 = +HEAPF32[$14>>2];
 $16 = +HEAPF32[$w>>2];
 $17 = $15 > $16;
 if ($17) {
  HEAP32[$0>>2] = 100000;
  $95 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($95|0);
 }
 $18 = HEAP32[$2>>2]|0;
 $19 = HEAP32[$ix>>2]|0;
 $20 = HEAP32[$3>>2]|0;
 $21 = (($20) + 4780|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = (88968 + ($22<<2)|0);
 $24 = +HEAPF32[$23>>2];
 $25 = HEAP32[$3>>2]|0;
 $26 = HEAP32[$4>>2]|0;
 _quantize_xrpow($18,$19,$24,$25,$26);
 $27 = HEAP32[$1>>2]|0;
 $28 = (($27) + 84768|0);
 $29 = (($28) + 328|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = $30 & 2;
 $32 = ($31|0)!=(0);
 L5: do {
  if ($32) {
   HEAP32[$j>>2] = 0;
   $33 = HEAP32[$3>>2]|0;
   $34 = (($33) + 4780|0);
   $35 = HEAP32[$34>>2]|0;
   $36 = HEAP32[$3>>2]|0;
   $37 = (($36) + 4836|0);
   $38 = HEAP32[$37>>2]|0;
   $39 = (($35) + ($38))|0;
   HEAP32[$gain>>2] = $39;
   $40 = HEAP32[$gain>>2]|0;
   $41 = (88968 + ($40<<2)|0);
   $42 = +HEAPF32[$41>>2];
   $43 = $42;
   $44 = 0.634521682242438989086 / $43;
   $45 = $44;
   HEAPF32[$roundfac>>2] = $45;
   HEAP32[$sfb>>2] = 0;
   while(1) {
    $46 = HEAP32[$sfb>>2]|0;
    $47 = HEAP32[$3>>2]|0;
    $48 = (($47) + 4860|0);
    $49 = HEAP32[$48>>2]|0;
    $50 = ($46|0)<($49|0);
    if (!($50)) {
     break L5;
    }
    $51 = HEAP32[$sfb>>2]|0;
    $52 = HEAP32[$3>>2]|0;
    $53 = (($52) + 4872|0);
    $54 = (($53) + ($51<<2)|0);
    $55 = HEAP32[$54>>2]|0;
    HEAP32[$width>>2] = $55;
    $56 = HEAP32[$sfb>>2]|0;
    $57 = HEAP32[$1>>2]|0;
    $58 = (($57) + 84768|0);
    $59 = (($58) + 168|0);
    $60 = (($59) + ($56<<2)|0);
    $61 = HEAP32[$60>>2]|0;
    $62 = ($61|0)!=(0);
    L10: do {
     if ($62) {
      $66 = HEAP32[$j>>2]|0;
      HEAP32[$k>>2] = $66;
      $67 = HEAP32[$width>>2]|0;
      $68 = HEAP32[$j>>2]|0;
      $69 = (($68) + ($67))|0;
      HEAP32[$j>>2] = $69;
      while(1) {
       $70 = HEAP32[$k>>2]|0;
       $71 = HEAP32[$j>>2]|0;
       $72 = ($70|0)<($71|0);
       if (!($72)) {
        break L10;
       }
       $73 = HEAP32[$k>>2]|0;
       $74 = HEAP32[$2>>2]|0;
       $75 = (($74) + ($73<<2)|0);
       $76 = +HEAPF32[$75>>2];
       $77 = +HEAPF32[$roundfac>>2];
       $78 = $76 >= $77;
       if ($78) {
        $79 = HEAP32[$k>>2]|0;
        $80 = HEAP32[$ix>>2]|0;
        $81 = (($80) + ($79<<2)|0);
        $82 = HEAP32[$81>>2]|0;
        $86 = $82;
       } else {
        $86 = 0;
       }
       $83 = HEAP32[$k>>2]|0;
       $84 = HEAP32[$ix>>2]|0;
       $85 = (($84) + ($83<<2)|0);
       HEAP32[$85>>2] = $86;
       $87 = HEAP32[$k>>2]|0;
       $88 = (($87) + 1)|0;
       HEAP32[$k>>2] = $88;
      }
     } else {
      $63 = HEAP32[$width>>2]|0;
      $64 = HEAP32[$j>>2]|0;
      $65 = (($64) + ($63))|0;
      HEAP32[$j>>2] = $65;
     }
    } while(0);
    $89 = HEAP32[$sfb>>2]|0;
    $90 = (($89) + 1)|0;
    HEAP32[$sfb>>2] = $90;
   }
  }
 } while(0);
 $91 = HEAP32[$1>>2]|0;
 $92 = HEAP32[$3>>2]|0;
 $93 = HEAP32[$4>>2]|0;
 $94 = (_noquant_count_bits($91,$92,$93)|0);
 HEAP32[$0>>2] = $94;
 $95 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($95|0);
}
function _quantize_xrpow($xp,$pi,$istep,$cod_info,$prev_noise) {
 $xp = $xp|0;
 $pi = $pi|0;
 $istep = +$istep;
 $cod_info = $cod_info|0;
 $prev_noise = $prev_noise|0;
 var $$ = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0;
 var $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0.0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0.0, $168 = 0, $169 = 0;
 var $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0.0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0.0, $187 = 0;
 var $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0;
 var $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0.0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0;
 var $223 = 0, $224 = 0.0, $225 = 0, $226 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0.0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0.0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $acc_iData = 0, $acc_xp = 0, $accumulate = 0, $accumulate01 = 0, $iData = 0, $j = 0, $l = 0, $prev_data_use = 0, $sfb = 0, $sfbmax = 0, $step = 0, $usefullsize = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0;
 $0 = sp + 64|0;
 $1 = sp + 60|0;
 $2 = sp + 56|0;
 $3 = sp + 52|0;
 $4 = sp + 48|0;
 $sfb = sp + 44|0;
 $sfbmax = sp + 40|0;
 $j = sp + 36|0;
 $prev_data_use = sp + 32|0;
 $iData = sp + 28|0;
 $accumulate = sp + 24|0;
 $accumulate01 = sp + 20|0;
 $acc_iData = sp + 16|0;
 $acc_xp = sp + 12|0;
 $step = sp + 8|0;
 $l = sp + 4|0;
 $usefullsize = sp;
 HEAP32[$0>>2] = $xp;
 HEAP32[$1>>2] = $pi;
 HEAPF32[$2>>2] = $istep;
 HEAP32[$3>>2] = $cod_info;
 HEAP32[$4>>2] = $prev_noise;
 HEAP32[$j>>2] = 0;
 HEAP32[$accumulate>>2] = 0;
 HEAP32[$accumulate01>>2] = 0;
 $5 = HEAP32[$1>>2]|0;
 HEAP32[$iData>>2] = $5;
 $6 = HEAP32[$0>>2]|0;
 HEAP32[$acc_xp>>2] = $6;
 $7 = HEAP32[$iData>>2]|0;
 HEAP32[$acc_iData>>2] = $7;
 $8 = HEAP32[$4>>2]|0;
 $9 = ($8|0)!=(0|0);
 if ($9) {
  $10 = HEAP32[$3>>2]|0;
  $11 = (($10) + 4780|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = HEAP32[$4>>2]|0;
  $14 = HEAP32[$13>>2]|0;
  $15 = ($12|0)==($14|0);
  $17 = $15;
 } else {
  $17 = 0;
 }
 $16 = $17&1;
 HEAP32[$prev_data_use>>2] = $16;
 $18 = HEAP32[$3>>2]|0;
 $19 = (($18) + 4788|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = ($20|0)==(2);
 if ($21) {
  HEAP32[$sfbmax>>2] = 38;
 } else {
  HEAP32[$sfbmax>>2] = 21;
 }
 HEAP32[$sfb>>2] = 0;
 while(1) {
  $22 = HEAP32[$sfb>>2]|0;
  $23 = HEAP32[$sfbmax>>2]|0;
  $24 = ($22|0)<=($23|0);
  if (!($24)) {
   break;
  }
  HEAP32[$step>>2] = -1;
  $25 = HEAP32[$prev_data_use>>2]|0;
  $26 = ($25|0)!=(0);
  if ($26) {
   label = 10;
  } else {
   $27 = HEAP32[$3>>2]|0;
   $28 = (($27) + 4788|0);
   $29 = HEAP32[$28>>2]|0;
   $30 = ($29|0)==(0);
   if ($30) {
    label = 10;
   }
  }
  if ((label|0) == 10) {
   label = 0;
   $31 = HEAP32[$3>>2]|0;
   $32 = (($31) + 4780|0);
   $33 = HEAP32[$32>>2]|0;
   $34 = HEAP32[$sfb>>2]|0;
   $35 = HEAP32[$3>>2]|0;
   $36 = (($35) + 4608|0);
   $37 = (($36) + ($34<<2)|0);
   $38 = HEAP32[$37>>2]|0;
   $39 = HEAP32[$3>>2]|0;
   $40 = (($39) + 4832|0);
   $41 = HEAP32[$40>>2]|0;
   $42 = ($41|0)!=(0);
   if ($42) {
    $43 = HEAP32[$sfb>>2]|0;
    $44 = (21376 + ($43<<2)|0);
    $45 = HEAP32[$44>>2]|0;
    $47 = $45;
   } else {
    $47 = 0;
   }
   $46 = (($38) + ($47))|0;
   $48 = HEAP32[$3>>2]|0;
   $49 = (($48) + 4836|0);
   $50 = HEAP32[$49>>2]|0;
   $51 = (($50) + 1)|0;
   $52 = $46 << $51;
   $53 = (($33) - ($52))|0;
   $54 = HEAP32[$sfb>>2]|0;
   $55 = HEAP32[$3>>2]|0;
   $56 = (($55) + 5028|0);
   $57 = (($56) + ($54<<2)|0);
   $58 = HEAP32[$57>>2]|0;
   $59 = HEAP32[$3>>2]|0;
   $60 = (($59) + 4808|0);
   $61 = (($60) + ($58<<2)|0);
   $62 = HEAP32[$61>>2]|0;
   $63 = $62<<3;
   $64 = (($53) - ($63))|0;
   HEAP32[$step>>2] = $64;
  }
  $65 = HEAP32[$prev_data_use>>2]|0;
  $66 = ($65|0)!=(0);
  if ($66) {
   $67 = HEAP32[$sfb>>2]|0;
   $68 = HEAP32[$4>>2]|0;
   $69 = (($68) + 8|0);
   $70 = (($69) + ($67<<2)|0);
   $71 = HEAP32[$70>>2]|0;
   $72 = HEAP32[$step>>2]|0;
   $73 = ($71|0)==($72|0);
   if ($73) {
    $74 = HEAP32[$accumulate>>2]|0;
    $75 = ($74|0)!=(0);
    if ($75) {
     $76 = HEAP32[$accumulate>>2]|0;
     $77 = +HEAPF32[$2>>2];
     $78 = HEAP32[$acc_xp>>2]|0;
     $79 = HEAP32[$acc_iData>>2]|0;
     _quantize_lines_xrpow($76,$77,$78,$79);
     HEAP32[$accumulate>>2] = 0;
    }
    $80 = HEAP32[$accumulate01>>2]|0;
    $81 = ($80|0)!=(0);
    if ($81) {
     $82 = HEAP32[$accumulate01>>2]|0;
     $83 = +HEAPF32[$2>>2];
     $84 = HEAP32[$acc_xp>>2]|0;
     $85 = HEAP32[$acc_iData>>2]|0;
     _quantize_lines_xrpow_01($82,$83,$84,$85);
     HEAP32[$accumulate01>>2] = 0;
    }
   } else {
    label = 19;
   }
  } else {
   label = 19;
  }
  if ((label|0) == 19) {
   label = 0;
   $86 = HEAP32[$sfb>>2]|0;
   $87 = HEAP32[$3>>2]|0;
   $88 = (($87) + 4872|0);
   $89 = (($88) + ($86<<2)|0);
   $90 = HEAP32[$89>>2]|0;
   HEAP32[$l>>2] = $90;
   $91 = HEAP32[$j>>2]|0;
   $92 = HEAP32[$sfb>>2]|0;
   $93 = HEAP32[$3>>2]|0;
   $94 = (($93) + 4872|0);
   $95 = (($94) + ($92<<2)|0);
   $96 = HEAP32[$95>>2]|0;
   $97 = (($91) + ($96))|0;
   $98 = HEAP32[$3>>2]|0;
   $99 = (($98) + 5208|0);
   $100 = HEAP32[$99>>2]|0;
   $101 = ($97|0)>($100|0);
   if ($101) {
    $102 = HEAP32[$3>>2]|0;
    $103 = (($102) + 5208|0);
    $104 = HEAP32[$103>>2]|0;
    $105 = HEAP32[$j>>2]|0;
    $106 = (($104) - ($105))|0;
    $107 = (($106) + 1)|0;
    HEAP32[$usefullsize>>2] = $107;
    $108 = HEAP32[$3>>2]|0;
    $109 = (($108) + 5208|0);
    $110 = HEAP32[$109>>2]|0;
    $111 = HEAP32[$1>>2]|0;
    $112 = (($111) + ($110<<2)|0);
    $113 = HEAP32[$3>>2]|0;
    $114 = (($113) + 5208|0);
    $115 = HEAP32[$114>>2]|0;
    $116 = (576 - ($115))|0;
    $117 = $116<<2;
    _memset(($112|0),0,($117|0))|0;
    $118 = HEAP32[$usefullsize>>2]|0;
    HEAP32[$l>>2] = $118;
    $119 = HEAP32[$l>>2]|0;
    $120 = ($119|0)<(0);
    $$ = $120 ? 0 : $118;
    HEAP32[$l>>2] = $$;
    $121 = HEAP32[$sfbmax>>2]|0;
    $122 = (($121) + 1)|0;
    HEAP32[$sfb>>2] = $122;
   }
   $123 = HEAP32[$accumulate>>2]|0;
   $124 = ($123|0)!=(0);
   if (!($124)) {
    $125 = HEAP32[$accumulate01>>2]|0;
    $126 = ($125|0)!=(0);
    if (!($126)) {
     $127 = HEAP32[$iData>>2]|0;
     HEAP32[$acc_iData>>2] = $127;
     $128 = HEAP32[$0>>2]|0;
     HEAP32[$acc_xp>>2] = $128;
    }
   }
   $129 = HEAP32[$4>>2]|0;
   $130 = ($129|0)!=(0|0);
   if ($130) {
    $131 = HEAP32[$4>>2]|0;
    $132 = (($131) + 4|0);
    $133 = HEAP32[$132>>2]|0;
    $134 = ($133|0)>(0);
    if ($134) {
     $135 = HEAP32[$sfb>>2]|0;
     $136 = HEAP32[$4>>2]|0;
     $137 = (($136) + 4|0);
     $138 = HEAP32[$137>>2]|0;
     $139 = ($135|0)>=($138|0);
     if ($139) {
      $140 = HEAP32[$sfb>>2]|0;
      $141 = HEAP32[$4>>2]|0;
      $142 = (($141) + 8|0);
      $143 = (($142) + ($140<<2)|0);
      $144 = HEAP32[$143>>2]|0;
      $145 = ($144|0)>(0);
      if ($145) {
       $146 = HEAP32[$step>>2]|0;
       $147 = HEAP32[$sfb>>2]|0;
       $148 = HEAP32[$4>>2]|0;
       $149 = (($148) + 8|0);
       $150 = (($149) + ($147<<2)|0);
       $151 = HEAP32[$150>>2]|0;
       $152 = ($146|0)>=($151|0);
       if ($152) {
        $153 = HEAP32[$accumulate>>2]|0;
        $154 = ($153|0)!=(0);
        if ($154) {
         $155 = HEAP32[$accumulate>>2]|0;
         $156 = +HEAPF32[$2>>2];
         $157 = HEAP32[$acc_xp>>2]|0;
         $158 = HEAP32[$acc_iData>>2]|0;
         _quantize_lines_xrpow($155,$156,$157,$158);
         HEAP32[$accumulate>>2] = 0;
         $159 = HEAP32[$iData>>2]|0;
         HEAP32[$acc_iData>>2] = $159;
         $160 = HEAP32[$0>>2]|0;
         HEAP32[$acc_xp>>2] = $160;
        }
        $161 = HEAP32[$l>>2]|0;
        $162 = HEAP32[$accumulate01>>2]|0;
        $163 = (($162) + ($161))|0;
        HEAP32[$accumulate01>>2] = $163;
       } else {
        label = 32;
       }
      } else {
       label = 32;
      }
     } else {
      label = 32;
     }
    } else {
     label = 32;
    }
   } else {
    label = 32;
   }
   if ((label|0) == 32) {
    label = 0;
    $164 = HEAP32[$accumulate01>>2]|0;
    $165 = ($164|0)!=(0);
    if ($165) {
     $166 = HEAP32[$accumulate01>>2]|0;
     $167 = +HEAPF32[$2>>2];
     $168 = HEAP32[$acc_xp>>2]|0;
     $169 = HEAP32[$acc_iData>>2]|0;
     _quantize_lines_xrpow_01($166,$167,$168,$169);
     HEAP32[$accumulate01>>2] = 0;
     $170 = HEAP32[$iData>>2]|0;
     HEAP32[$acc_iData>>2] = $170;
     $171 = HEAP32[$0>>2]|0;
     HEAP32[$acc_xp>>2] = $171;
    }
    $172 = HEAP32[$l>>2]|0;
    $173 = HEAP32[$accumulate>>2]|0;
    $174 = (($173) + ($172))|0;
    HEAP32[$accumulate>>2] = $174;
   }
   $175 = HEAP32[$l>>2]|0;
   $176 = ($175|0)<=(0);
   if ($176) {
    label = 36;
    break;
   }
  }
  $189 = HEAP32[$sfb>>2]|0;
  $190 = HEAP32[$sfbmax>>2]|0;
  $191 = ($189|0)<=($190|0);
  if ($191) {
   $192 = HEAP32[$sfb>>2]|0;
   $193 = HEAP32[$3>>2]|0;
   $194 = (($193) + 4872|0);
   $195 = (($194) + ($192<<2)|0);
   $196 = HEAP32[$195>>2]|0;
   $197 = HEAP32[$iData>>2]|0;
   $198 = (($197) + ($196<<2)|0);
   HEAP32[$iData>>2] = $198;
   $199 = HEAP32[$sfb>>2]|0;
   $200 = HEAP32[$3>>2]|0;
   $201 = (($200) + 4872|0);
   $202 = (($201) + ($199<<2)|0);
   $203 = HEAP32[$202>>2]|0;
   $204 = HEAP32[$0>>2]|0;
   $205 = (($204) + ($203<<2)|0);
   HEAP32[$0>>2] = $205;
   $206 = HEAP32[$sfb>>2]|0;
   $207 = HEAP32[$3>>2]|0;
   $208 = (($207) + 4872|0);
   $209 = (($208) + ($206<<2)|0);
   $210 = HEAP32[$209>>2]|0;
   $211 = HEAP32[$j>>2]|0;
   $212 = (($211) + ($210))|0;
   HEAP32[$j>>2] = $212;
  }
  $213 = HEAP32[$sfb>>2]|0;
  $214 = (($213) + 1)|0;
  HEAP32[$sfb>>2] = $214;
 }
 if ((label|0) == 36) {
  $177 = HEAP32[$accumulate01>>2]|0;
  $178 = ($177|0)!=(0);
  if ($178) {
   $179 = HEAP32[$accumulate01>>2]|0;
   $180 = +HEAPF32[$2>>2];
   $181 = HEAP32[$acc_xp>>2]|0;
   $182 = HEAP32[$acc_iData>>2]|0;
   _quantize_lines_xrpow_01($179,$180,$181,$182);
   HEAP32[$accumulate01>>2] = 0;
  }
  $183 = HEAP32[$accumulate>>2]|0;
  $184 = ($183|0)!=(0);
  if ($184) {
   $185 = HEAP32[$accumulate>>2]|0;
   $186 = +HEAPF32[$2>>2];
   $187 = HEAP32[$acc_xp>>2]|0;
   $188 = HEAP32[$acc_iData>>2]|0;
   _quantize_lines_xrpow($185,$186,$187,$188);
   HEAP32[$accumulate>>2] = 0;
  }
 }
 $215 = HEAP32[$accumulate>>2]|0;
 $216 = ($215|0)!=(0);
 if ($216) {
  $217 = HEAP32[$accumulate>>2]|0;
  $218 = +HEAPF32[$2>>2];
  $219 = HEAP32[$acc_xp>>2]|0;
  $220 = HEAP32[$acc_iData>>2]|0;
  _quantize_lines_xrpow($217,$218,$219,$220);
  HEAP32[$accumulate>>2] = 0;
 }
 $221 = HEAP32[$accumulate01>>2]|0;
 $222 = ($221|0)!=(0);
 if (!($222)) {
  STACKTOP = sp;return;
 }
 $223 = HEAP32[$accumulate01>>2]|0;
 $224 = +HEAPF32[$2>>2];
 $225 = HEAP32[$acc_xp>>2]|0;
 $226 = HEAP32[$acc_iData>>2]|0;
 _quantize_lines_xrpow_01($223,$224,$225,$226);
 HEAP32[$accumulate01>>2] = 0;
 STACKTOP = sp;return;
}
function _recalc_divide_init($gfc,$cod_info,$ix,$r01_bits,$r01_div,$r0_tbl,$r1_tbl) {
 $gfc = $gfc|0;
 $cod_info = $cod_info|0;
 $ix = $ix|0;
 $r01_bits = $r01_bits|0;
 $r01_div = $r01_div|0;
 $r0_tbl = $r0_tbl|0;
 $r1_tbl = $r1_tbl|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $a1 = 0, $a2 = 0, $bigv = 0, $bits = 0;
 var $r0 = 0, $r0bits = 0, $r0t = 0, $r1 = 0, $r1t = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $0 = sp + 60|0;
 $1 = sp + 56|0;
 $2 = sp + 52|0;
 $3 = sp + 48|0;
 $4 = sp + 44|0;
 $5 = sp + 40|0;
 $6 = sp + 36|0;
 $r0 = sp + 32|0;
 $r1 = sp + 28|0;
 $bigv = sp + 24|0;
 $r0t = sp + 20|0;
 $r1t = sp + 16|0;
 $bits = sp + 12|0;
 $a1 = sp + 8|0;
 $r0bits = sp + 4|0;
 $a2 = sp;
 HEAP32[$0>>2] = $gfc;
 HEAP32[$1>>2] = $cod_info;
 HEAP32[$2>>2] = $ix;
 HEAP32[$3>>2] = $r01_bits;
 HEAP32[$4>>2] = $r01_div;
 HEAP32[$5>>2] = $r0_tbl;
 HEAP32[$6>>2] = $r1_tbl;
 $7 = HEAP32[$1>>2]|0;
 $8 = (($7) + 4772|0);
 $9 = HEAP32[$8>>2]|0;
 HEAP32[$bigv>>2] = $9;
 HEAP32[$r0>>2] = 0;
 while(1) {
  $10 = HEAP32[$r0>>2]|0;
  $11 = ($10|0)<=(22);
  if (!($11)) {
   break;
  }
  $12 = HEAP32[$r0>>2]|0;
  $13 = HEAP32[$3>>2]|0;
  $14 = (($13) + ($12<<2)|0);
  HEAP32[$14>>2] = 100000;
  $15 = HEAP32[$r0>>2]|0;
  $16 = (($15) + 1)|0;
  HEAP32[$r0>>2] = $16;
 }
 HEAP32[$r0>>2] = 0;
 while(1) {
  $17 = HEAP32[$r0>>2]|0;
  $18 = ($17|0)<(16);
  if (!($18)) {
   label = 14;
   break;
  }
  $19 = HEAP32[$r0>>2]|0;
  $20 = (($19) + 1)|0;
  $21 = HEAP32[$0>>2]|0;
  $22 = (($21) + 21360|0);
  $23 = (($22) + ($20<<2)|0);
  $24 = HEAP32[$23>>2]|0;
  HEAP32[$a1>>2] = $24;
  $25 = HEAP32[$a1>>2]|0;
  $26 = HEAP32[$bigv>>2]|0;
  $27 = ($25|0)>=($26|0);
  if ($27) {
   label = 14;
   break;
  }
  HEAP32[$r0bits>>2] = 0;
  $28 = HEAP32[$0>>2]|0;
  $29 = (($28) + 85816|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = HEAP32[$2>>2]|0;
  $32 = HEAP32[$2>>2]|0;
  $33 = HEAP32[$a1>>2]|0;
  $34 = (($32) + ($33<<2)|0);
  $35 = (FUNCTION_TABLE_iiii[$30 & 3]($31,$34,$r0bits)|0);
  HEAP32[$r0t>>2] = $35;
  HEAP32[$r1>>2] = 0;
  while(1) {
   $36 = HEAP32[$r1>>2]|0;
   $37 = ($36|0)<(8);
   if (!($37)) {
    break;
   }
   $38 = HEAP32[$r0>>2]|0;
   $39 = HEAP32[$r1>>2]|0;
   $40 = (($38) + ($39))|0;
   $41 = (($40) + 2)|0;
   $42 = HEAP32[$0>>2]|0;
   $43 = (($42) + 21360|0);
   $44 = (($43) + ($41<<2)|0);
   $45 = HEAP32[$44>>2]|0;
   HEAP32[$a2>>2] = $45;
   $46 = HEAP32[$a2>>2]|0;
   $47 = HEAP32[$bigv>>2]|0;
   $48 = ($46|0)>=($47|0);
   if ($48) {
    break;
   }
   $49 = HEAP32[$r0bits>>2]|0;
   HEAP32[$bits>>2] = $49;
   $50 = HEAP32[$0>>2]|0;
   $51 = (($50) + 85816|0);
   $52 = HEAP32[$51>>2]|0;
   $53 = HEAP32[$2>>2]|0;
   $54 = HEAP32[$a1>>2]|0;
   $55 = (($53) + ($54<<2)|0);
   $56 = HEAP32[$2>>2]|0;
   $57 = HEAP32[$a2>>2]|0;
   $58 = (($56) + ($57<<2)|0);
   $59 = (FUNCTION_TABLE_iiii[$52 & 3]($55,$58,$bits)|0);
   HEAP32[$r1t>>2] = $59;
   $60 = HEAP32[$r0>>2]|0;
   $61 = HEAP32[$r1>>2]|0;
   $62 = (($60) + ($61))|0;
   $63 = HEAP32[$3>>2]|0;
   $64 = (($63) + ($62<<2)|0);
   $65 = HEAP32[$64>>2]|0;
   $66 = HEAP32[$bits>>2]|0;
   $67 = ($65|0)>($66|0);
   if ($67) {
    $68 = HEAP32[$bits>>2]|0;
    $69 = HEAP32[$r0>>2]|0;
    $70 = HEAP32[$r1>>2]|0;
    $71 = (($69) + ($70))|0;
    $72 = HEAP32[$3>>2]|0;
    $73 = (($72) + ($71<<2)|0);
    HEAP32[$73>>2] = $68;
    $74 = HEAP32[$r0>>2]|0;
    $75 = HEAP32[$r0>>2]|0;
    $76 = HEAP32[$r1>>2]|0;
    $77 = (($75) + ($76))|0;
    $78 = HEAP32[$4>>2]|0;
    $79 = (($78) + ($77<<2)|0);
    HEAP32[$79>>2] = $74;
    $80 = HEAP32[$r0t>>2]|0;
    $81 = HEAP32[$r0>>2]|0;
    $82 = HEAP32[$r1>>2]|0;
    $83 = (($81) + ($82))|0;
    $84 = HEAP32[$5>>2]|0;
    $85 = (($84) + ($83<<2)|0);
    HEAP32[$85>>2] = $80;
    $86 = HEAP32[$r1t>>2]|0;
    $87 = HEAP32[$r0>>2]|0;
    $88 = HEAP32[$r1>>2]|0;
    $89 = (($87) + ($88))|0;
    $90 = HEAP32[$6>>2]|0;
    $91 = (($90) + ($89<<2)|0);
    HEAP32[$91>>2] = $86;
   }
   $92 = HEAP32[$r1>>2]|0;
   $93 = (($92) + 1)|0;
   HEAP32[$r1>>2] = $93;
  }
  $94 = HEAP32[$r0>>2]|0;
  $95 = (($94) + 1)|0;
  HEAP32[$r0>>2] = $95;
 }
 if ((label|0) == 14) {
  STACKTOP = sp;return;
 }
}
function _recalc_divide_sub($gfc,$cod_info2,$gi,$ix,$r01_bits,$r01_div,$r0_tbl,$r1_tbl) {
 $gfc = $gfc|0;
 $cod_info2 = $cod_info2|0;
 $gi = $gi|0;
 $ix = $ix|0;
 $r01_bits = $r01_bits|0;
 $r01_div = $r01_div|0;
 $r0_tbl = $r0_tbl|0;
 $r1_tbl = $r1_tbl|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $a2 = 0, $bigv = 0, $bits = 0, $r2 = 0, $r2t = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $0 = sp + 48|0;
 $1 = sp + 44|0;
 $2 = sp + 40|0;
 $3 = sp + 36|0;
 $4 = sp + 32|0;
 $5 = sp + 28|0;
 $6 = sp + 24|0;
 $7 = sp + 20|0;
 $bits = sp + 16|0;
 $r2 = sp + 12|0;
 $a2 = sp + 8|0;
 $bigv = sp + 4|0;
 $r2t = sp;
 HEAP32[$0>>2] = $gfc;
 HEAP32[$1>>2] = $cod_info2;
 HEAP32[$2>>2] = $gi;
 HEAP32[$3>>2] = $ix;
 HEAP32[$4>>2] = $r01_bits;
 HEAP32[$5>>2] = $r01_div;
 HEAP32[$6>>2] = $r0_tbl;
 HEAP32[$7>>2] = $r1_tbl;
 $8 = HEAP32[$1>>2]|0;
 $9 = (($8) + 4772|0);
 $10 = HEAP32[$9>>2]|0;
 HEAP32[$bigv>>2] = $10;
 HEAP32[$r2>>2] = 2;
 while(1) {
  $11 = HEAP32[$r2>>2]|0;
  $12 = ($11|0)<(23);
  if (!($12)) {
   label = 8;
   break;
  }
  $13 = HEAP32[$r2>>2]|0;
  $14 = HEAP32[$0>>2]|0;
  $15 = (($14) + 21360|0);
  $16 = (($15) + ($13<<2)|0);
  $17 = HEAP32[$16>>2]|0;
  HEAP32[$a2>>2] = $17;
  $18 = HEAP32[$a2>>2]|0;
  $19 = HEAP32[$bigv>>2]|0;
  $20 = ($18|0)>=($19|0);
  if ($20) {
   label = 8;
   break;
  }
  $21 = HEAP32[$r2>>2]|0;
  $22 = (($21) - 2)|0;
  $23 = HEAP32[$4>>2]|0;
  $24 = (($23) + ($22<<2)|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = HEAP32[$1>>2]|0;
  $27 = (($26) + 5184|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = (($25) + ($28))|0;
  HEAP32[$bits>>2] = $29;
  $30 = HEAP32[$2>>2]|0;
  $31 = (($30) + 4768|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = HEAP32[$bits>>2]|0;
  $34 = ($32|0)<=($33|0);
  if ($34) {
   label = 8;
   break;
  }
  $35 = HEAP32[$0>>2]|0;
  $36 = (($35) + 85816|0);
  $37 = HEAP32[$36>>2]|0;
  $38 = HEAP32[$3>>2]|0;
  $39 = HEAP32[$a2>>2]|0;
  $40 = (($38) + ($39<<2)|0);
  $41 = HEAP32[$3>>2]|0;
  $42 = HEAP32[$bigv>>2]|0;
  $43 = (($41) + ($42<<2)|0);
  $44 = (FUNCTION_TABLE_iiii[$37 & 3]($40,$43,$bits)|0);
  HEAP32[$r2t>>2] = $44;
  $45 = HEAP32[$2>>2]|0;
  $46 = (($45) + 4768|0);
  $47 = HEAP32[$46>>2]|0;
  $48 = HEAP32[$bits>>2]|0;
  $49 = ($47|0)<=($48|0);
  if (!($49)) {
   $50 = HEAP32[$2>>2]|0;
   $51 = HEAP32[$1>>2]|0;
   _memcpy(($50|0),($51|0),5252)|0;
   $52 = HEAP32[$bits>>2]|0;
   $53 = HEAP32[$2>>2]|0;
   $54 = (($53) + 4768|0);
   HEAP32[$54>>2] = $52;
   $55 = HEAP32[$r2>>2]|0;
   $56 = (($55) - 2)|0;
   $57 = HEAP32[$5>>2]|0;
   $58 = (($57) + ($56<<2)|0);
   $59 = HEAP32[$58>>2]|0;
   $60 = HEAP32[$2>>2]|0;
   $61 = (($60) + 4824|0);
   HEAP32[$61>>2] = $59;
   $62 = HEAP32[$r2>>2]|0;
   $63 = (($62) - 2)|0;
   $64 = HEAP32[$r2>>2]|0;
   $65 = (($64) - 2)|0;
   $66 = HEAP32[$5>>2]|0;
   $67 = (($66) + ($65<<2)|0);
   $68 = HEAP32[$67>>2]|0;
   $69 = (($63) - ($68))|0;
   $70 = HEAP32[$2>>2]|0;
   $71 = (($70) + 4828|0);
   HEAP32[$71>>2] = $69;
   $72 = HEAP32[$r2>>2]|0;
   $73 = (($72) - 2)|0;
   $74 = HEAP32[$6>>2]|0;
   $75 = (($74) + ($73<<2)|0);
   $76 = HEAP32[$75>>2]|0;
   $77 = HEAP32[$2>>2]|0;
   $78 = (($77) + 4796|0);
   HEAP32[$78>>2] = $76;
   $79 = HEAP32[$r2>>2]|0;
   $80 = (($79) - 2)|0;
   $81 = HEAP32[$7>>2]|0;
   $82 = (($81) + ($80<<2)|0);
   $83 = HEAP32[$82>>2]|0;
   $84 = HEAP32[$2>>2]|0;
   $85 = (($84) + 4796|0);
   $86 = (($85) + 4|0);
   HEAP32[$86>>2] = $83;
   $87 = HEAP32[$r2t>>2]|0;
   $88 = HEAP32[$2>>2]|0;
   $89 = (($88) + 4796|0);
   $90 = (($89) + 8|0);
   HEAP32[$90>>2] = $87;
  }
  $91 = HEAP32[$r2>>2]|0;
  $92 = (($91) + 1)|0;
  HEAP32[$r2>>2] = $92;
 }
 if ((label|0) == 8) {
  STACKTOP = sp;return;
 }
}
function _best_scalefac_store($gfc,$gr,$ch,$l3_side) {
 $gfc = $gfc|0;
 $gr = $gr|0;
 $ch = $ch|0;
 $l3_side = $l3_side|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $cfg = 0, $gi = 0, $i = 0, $j = 0, $l = 0, $or$cond = 0, $recalc = 0, $s = 0, $sfb = 0, $width = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $0 = sp + 48|0;
 $1 = sp + 44|0;
 $2 = sp + 40|0;
 $3 = sp + 36|0;
 $cfg = sp + 32|0;
 $gi = sp + 28|0;
 $sfb = sp + 24|0;
 $i = sp + 20|0;
 $j = sp + 16|0;
 $l = sp + 12|0;
 $recalc = sp + 8|0;
 $width = sp + 4|0;
 $s = sp;
 HEAP32[$0>>2] = $gfc;
 HEAP32[$1>>2] = $gr;
 HEAP32[$2>>2] = $ch;
 HEAP32[$3>>2] = $l3_side;
 $4 = HEAP32[$0>>2]|0;
 $5 = (($4) + 16|0);
 HEAP32[$cfg>>2] = $5;
 $6 = HEAP32[$2>>2]|0;
 $7 = HEAP32[$1>>2]|0;
 $8 = HEAP32[$3>>2]|0;
 $9 = (($8) + (($7*10504)|0)|0);
 $10 = (($9) + (($6*5252)|0)|0);
 HEAP32[$gi>>2] = $10;
 HEAP32[$recalc>>2] = 0;
 HEAP32[$j>>2] = 0;
 HEAP32[$sfb>>2] = 0;
 while(1) {
  $11 = HEAP32[$sfb>>2]|0;
  $12 = HEAP32[$gi>>2]|0;
  $13 = (($12) + 4860|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = ($11|0)<($14|0);
  if (!($15)) {
   break;
  }
  $16 = HEAP32[$sfb>>2]|0;
  $17 = HEAP32[$gi>>2]|0;
  $18 = (($17) + 4872|0);
  $19 = (($18) + ($16<<2)|0);
  $20 = HEAP32[$19>>2]|0;
  HEAP32[$width>>2] = $20;
  $21 = HEAP32[$j>>2]|0;
  HEAP32[$l>>2] = $21;
  $22 = HEAP32[$width>>2]|0;
  $23 = HEAP32[$j>>2]|0;
  $24 = (($23) + ($22))|0;
  HEAP32[$j>>2] = $24;
  while(1) {
   $25 = HEAP32[$l>>2]|0;
   $26 = HEAP32[$j>>2]|0;
   $27 = ($25|0)<($26|0);
   if (!($27)) {
    break;
   }
   $28 = HEAP32[$l>>2]|0;
   $29 = HEAP32[$gi>>2]|0;
   $30 = (($29) + 2304|0);
   $31 = (($30) + ($28<<2)|0);
   $32 = HEAP32[$31>>2]|0;
   $33 = ($32|0)!=(0);
   if ($33) {
    break;
   }
   $34 = HEAP32[$l>>2]|0;
   $35 = (($34) + 1)|0;
   HEAP32[$l>>2] = $35;
  }
  $36 = HEAP32[$l>>2]|0;
  $37 = HEAP32[$j>>2]|0;
  $38 = ($36|0)==($37|0);
  if ($38) {
   HEAP32[$recalc>>2] = -2;
   $39 = HEAP32[$sfb>>2]|0;
   $40 = HEAP32[$gi>>2]|0;
   $41 = (($40) + 4608|0);
   $42 = (($41) + ($39<<2)|0);
   HEAP32[$42>>2] = -2;
  }
  $43 = HEAP32[$sfb>>2]|0;
  $44 = (($43) + 1)|0;
  HEAP32[$sfb>>2] = $44;
 }
 $45 = HEAP32[$gi>>2]|0;
 $46 = (($45) + 4836|0);
 $47 = HEAP32[$46>>2]|0;
 $48 = ($47|0)!=(0);
 if (!($48)) {
  $49 = HEAP32[$gi>>2]|0;
  $50 = (($49) + 4832|0);
  $51 = HEAP32[$50>>2]|0;
  $52 = ($51|0)!=(0);
  if (!($52)) {
   HEAP32[$s>>2] = 0;
   HEAP32[$sfb>>2] = 0;
   while(1) {
    $53 = HEAP32[$sfb>>2]|0;
    $54 = HEAP32[$gi>>2]|0;
    $55 = (($54) + 4860|0);
    $56 = HEAP32[$55>>2]|0;
    $57 = ($53|0)<($56|0);
    if (!($57)) {
     break;
    }
    $58 = HEAP32[$sfb>>2]|0;
    $59 = HEAP32[$gi>>2]|0;
    $60 = (($59) + 4608|0);
    $61 = (($60) + ($58<<2)|0);
    $62 = HEAP32[$61>>2]|0;
    $63 = ($62|0)>(0);
    if ($63) {
     $64 = HEAP32[$sfb>>2]|0;
     $65 = HEAP32[$gi>>2]|0;
     $66 = (($65) + 4608|0);
     $67 = (($66) + ($64<<2)|0);
     $68 = HEAP32[$67>>2]|0;
     $69 = HEAP32[$s>>2]|0;
     $70 = $69 | $68;
     HEAP32[$s>>2] = $70;
    }
    $71 = HEAP32[$sfb>>2]|0;
    $72 = (($71) + 1)|0;
    HEAP32[$sfb>>2] = $72;
   }
   $73 = HEAP32[$s>>2]|0;
   $74 = $73 & 1;
   $75 = ($74|0)==(0);
   $76 = HEAP32[$s>>2]|0;
   $77 = ($76|0)!=(0);
   $or$cond = $75 & $77;
   if ($or$cond) {
    HEAP32[$sfb>>2] = 0;
    while(1) {
     $78 = HEAP32[$sfb>>2]|0;
     $79 = HEAP32[$gi>>2]|0;
     $80 = (($79) + 4860|0);
     $81 = HEAP32[$80>>2]|0;
     $82 = ($78|0)<($81|0);
     if (!($82)) {
      break;
     }
     $83 = HEAP32[$sfb>>2]|0;
     $84 = HEAP32[$gi>>2]|0;
     $85 = (($84) + 4608|0);
     $86 = (($85) + ($83<<2)|0);
     $87 = HEAP32[$86>>2]|0;
     $88 = ($87|0)>(0);
     if ($88) {
      $89 = HEAP32[$sfb>>2]|0;
      $90 = HEAP32[$gi>>2]|0;
      $91 = (($90) + 4608|0);
      $92 = (($91) + ($89<<2)|0);
      $93 = HEAP32[$92>>2]|0;
      $94 = $93 >> 1;
      HEAP32[$92>>2] = $94;
     }
     $95 = HEAP32[$sfb>>2]|0;
     $96 = (($95) + 1)|0;
     HEAP32[$sfb>>2] = $96;
    }
    HEAP32[$recalc>>2] = 1;
    $97 = HEAP32[$gi>>2]|0;
    $98 = (($97) + 4836|0);
    HEAP32[$98>>2] = 1;
   }
  }
 }
 $99 = HEAP32[$gi>>2]|0;
 $100 = (($99) + 4832|0);
 $101 = HEAP32[$100>>2]|0;
 $102 = ($101|0)!=(0);
 if (!($102)) {
  $103 = HEAP32[$gi>>2]|0;
  $104 = (($103) + 4788|0);
  $105 = HEAP32[$104>>2]|0;
  $106 = ($105|0)!=(2);
  if ($106) {
   $107 = HEAP32[$cfg>>2]|0;
   $108 = (($107) + 60|0);
   $109 = HEAP32[$108>>2]|0;
   $110 = ($109|0)==(2);
   if ($110) {
    HEAP32[$sfb>>2] = 11;
    while(1) {
     $111 = HEAP32[$sfb>>2]|0;
     $112 = ($111|0)<(21);
     if (!($112)) {
      break;
     }
     $113 = HEAP32[$sfb>>2]|0;
     $114 = HEAP32[$gi>>2]|0;
     $115 = (($114) + 4608|0);
     $116 = (($115) + ($113<<2)|0);
     $117 = HEAP32[$116>>2]|0;
     $118 = HEAP32[$sfb>>2]|0;
     $119 = (21376 + ($118<<2)|0);
     $120 = HEAP32[$119>>2]|0;
     $121 = ($117|0)<($120|0);
     if ($121) {
      $122 = HEAP32[$sfb>>2]|0;
      $123 = HEAP32[$gi>>2]|0;
      $124 = (($123) + 4608|0);
      $125 = (($124) + ($122<<2)|0);
      $126 = HEAP32[$125>>2]|0;
      $127 = ($126|0)!=(-2);
      if ($127) {
       break;
      }
     }
     $128 = HEAP32[$sfb>>2]|0;
     $129 = (($128) + 1)|0;
     HEAP32[$sfb>>2] = $129;
    }
    $130 = HEAP32[$sfb>>2]|0;
    $131 = ($130|0)==(21);
    if ($131) {
     HEAP32[$sfb>>2] = 11;
     while(1) {
      $132 = HEAP32[$sfb>>2]|0;
      $133 = ($132|0)<(21);
      if (!($133)) {
       break;
      }
      $134 = HEAP32[$sfb>>2]|0;
      $135 = HEAP32[$gi>>2]|0;
      $136 = (($135) + 4608|0);
      $137 = (($136) + ($134<<2)|0);
      $138 = HEAP32[$137>>2]|0;
      $139 = ($138|0)>(0);
      if ($139) {
       $140 = HEAP32[$sfb>>2]|0;
       $141 = (21376 + ($140<<2)|0);
       $142 = HEAP32[$141>>2]|0;
       $143 = HEAP32[$sfb>>2]|0;
       $144 = HEAP32[$gi>>2]|0;
       $145 = (($144) + 4608|0);
       $146 = (($145) + ($143<<2)|0);
       $147 = HEAP32[$146>>2]|0;
       $148 = (($147) - ($142))|0;
       HEAP32[$146>>2] = $148;
      }
      $149 = HEAP32[$sfb>>2]|0;
      $150 = (($149) + 1)|0;
      HEAP32[$sfb>>2] = $150;
     }
     HEAP32[$recalc>>2] = 1;
     $151 = HEAP32[$gi>>2]|0;
     $152 = (($151) + 4832|0);
     HEAP32[$152>>2] = 1;
    }
   }
  }
 }
 HEAP32[$i>>2] = 0;
 while(1) {
  $153 = HEAP32[$i>>2]|0;
  $154 = ($153|0)<(4);
  if (!($154)) {
   break;
  }
  $155 = HEAP32[$i>>2]|0;
  $156 = HEAP32[$2>>2]|0;
  $157 = HEAP32[$3>>2]|0;
  $158 = (($157) + 21024|0);
  $159 = (($158) + ($156<<4)|0);
  $160 = (($159) + ($155<<2)|0);
  HEAP32[$160>>2] = 0;
  $161 = HEAP32[$i>>2]|0;
  $162 = (($161) + 1)|0;
  HEAP32[$i>>2] = $162;
 }
 $163 = HEAP32[$cfg>>2]|0;
 $164 = (($163) + 60|0);
 $165 = HEAP32[$164>>2]|0;
 $166 = ($165|0)==(2);
 if ($166) {
  $167 = HEAP32[$1>>2]|0;
  $168 = ($167|0)==(1);
  if ($168) {
   $169 = HEAP32[$2>>2]|0;
   $170 = HEAP32[$3>>2]|0;
   $171 = (($170) + (($169*5252)|0)|0);
   $172 = (($171) + 4788|0);
   $173 = HEAP32[$172>>2]|0;
   $174 = ($173|0)!=(2);
   if ($174) {
    $175 = HEAP32[$2>>2]|0;
    $176 = HEAP32[$3>>2]|0;
    $177 = (($176) + 10504|0);
    $178 = (($177) + (($175*5252)|0)|0);
    $179 = (($178) + 4788|0);
    $180 = HEAP32[$179>>2]|0;
    $181 = ($180|0)!=(2);
    if ($181) {
     $182 = HEAP32[$2>>2]|0;
     $183 = HEAP32[$3>>2]|0;
     _scfsi_calc($182,$183);
     HEAP32[$recalc>>2] = 0;
    }
   }
  }
 }
 HEAP32[$sfb>>2] = 0;
 while(1) {
  $184 = HEAP32[$sfb>>2]|0;
  $185 = HEAP32[$gi>>2]|0;
  $186 = (($185) + 4860|0);
  $187 = HEAP32[$186>>2]|0;
  $188 = ($184|0)<($187|0);
  if (!($188)) {
   break;
  }
  $189 = HEAP32[$sfb>>2]|0;
  $190 = HEAP32[$gi>>2]|0;
  $191 = (($190) + 4608|0);
  $192 = (($191) + ($189<<2)|0);
  $193 = HEAP32[$192>>2]|0;
  $194 = ($193|0)==(-2);
  if ($194) {
   $195 = HEAP32[$sfb>>2]|0;
   $196 = HEAP32[$gi>>2]|0;
   $197 = (($196) + 4608|0);
   $198 = (($197) + ($195<<2)|0);
   HEAP32[$198>>2] = 0;
  }
  $199 = HEAP32[$sfb>>2]|0;
  $200 = (($199) + 1)|0;
  HEAP32[$sfb>>2] = $200;
 }
 $201 = HEAP32[$recalc>>2]|0;
 $202 = ($201|0)!=(0);
 if (!($202)) {
  STACKTOP = sp;return;
 }
 $203 = HEAP32[$0>>2]|0;
 $204 = HEAP32[$gi>>2]|0;
 (_scale_bitcount($203,$204)|0);
 STACKTOP = sp;return;
}
function _scfsi_calc($ch,$l3_side) {
 $ch = $ch|0;
 $l3_side = $l3_side|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $c = 0, $c1 = 0, $c2 = 0, $g0 = 0, $gi = 0, $i = 0, $s1 = 0, $s2 = 0;
 var $sfb = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $0 = sp + 40|0;
 $1 = sp + 36|0;
 $i = sp + 32|0;
 $s1 = sp + 28|0;
 $s2 = sp + 24|0;
 $c1 = sp + 20|0;
 $c2 = sp + 16|0;
 $sfb = sp + 12|0;
 $gi = sp + 8|0;
 $g0 = sp + 4|0;
 $c = sp;
 HEAP32[$0>>2] = $ch;
 HEAP32[$1>>2] = $l3_side;
 $2 = HEAP32[$0>>2]|0;
 $3 = HEAP32[$1>>2]|0;
 $4 = (($3) + 10504|0);
 $5 = (($4) + (($2*5252)|0)|0);
 HEAP32[$gi>>2] = $5;
 $6 = HEAP32[$0>>2]|0;
 $7 = HEAP32[$1>>2]|0;
 $8 = (($7) + (($6*5252)|0)|0);
 HEAP32[$g0>>2] = $8;
 HEAP32[$i>>2] = 0;
 while(1) {
  $9 = HEAP32[$i>>2]|0;
  $10 = ($9>>>0)<(4);
  if (!($10)) {
   break;
  }
  $11 = HEAP32[$i>>2]|0;
  $12 = (97952 + ($11<<2)|0);
  $13 = HEAP32[$12>>2]|0;
  HEAP32[$sfb>>2] = $13;
  while(1) {
   $14 = HEAP32[$sfb>>2]|0;
   $15 = HEAP32[$i>>2]|0;
   $16 = (($15) + 1)|0;
   $17 = (97952 + ($16<<2)|0);
   $18 = HEAP32[$17>>2]|0;
   $19 = ($14|0)<($18|0);
   if (!($19)) {
    break;
   }
   $20 = HEAP32[$sfb>>2]|0;
   $21 = HEAP32[$g0>>2]|0;
   $22 = (($21) + 4608|0);
   $23 = (($22) + ($20<<2)|0);
   $24 = HEAP32[$23>>2]|0;
   $25 = HEAP32[$sfb>>2]|0;
   $26 = HEAP32[$gi>>2]|0;
   $27 = (($26) + 4608|0);
   $28 = (($27) + ($25<<2)|0);
   $29 = HEAP32[$28>>2]|0;
   $30 = ($24|0)!=($29|0);
   if ($30) {
    $31 = HEAP32[$sfb>>2]|0;
    $32 = HEAP32[$gi>>2]|0;
    $33 = (($32) + 4608|0);
    $34 = (($33) + ($31<<2)|0);
    $35 = HEAP32[$34>>2]|0;
    $36 = ($35|0)>=(0);
    if ($36) {
     break;
    }
   }
   $37 = HEAP32[$sfb>>2]|0;
   $38 = (($37) + 1)|0;
   HEAP32[$sfb>>2] = $38;
  }
  $39 = HEAP32[$sfb>>2]|0;
  $40 = HEAP32[$i>>2]|0;
  $41 = (($40) + 1)|0;
  $42 = (97952 + ($41<<2)|0);
  $43 = HEAP32[$42>>2]|0;
  $44 = ($39|0)==($43|0);
  if ($44) {
   $45 = HEAP32[$i>>2]|0;
   $46 = (97952 + ($45<<2)|0);
   $47 = HEAP32[$46>>2]|0;
   HEAP32[$sfb>>2] = $47;
   while(1) {
    $48 = HEAP32[$sfb>>2]|0;
    $49 = HEAP32[$i>>2]|0;
    $50 = (($49) + 1)|0;
    $51 = (97952 + ($50<<2)|0);
    $52 = HEAP32[$51>>2]|0;
    $53 = ($48|0)<($52|0);
    if (!($53)) {
     break;
    }
    $54 = HEAP32[$sfb>>2]|0;
    $55 = HEAP32[$gi>>2]|0;
    $56 = (($55) + 4608|0);
    $57 = (($56) + ($54<<2)|0);
    HEAP32[$57>>2] = -1;
    $58 = HEAP32[$sfb>>2]|0;
    $59 = (($58) + 1)|0;
    HEAP32[$sfb>>2] = $59;
   }
   $60 = HEAP32[$i>>2]|0;
   $61 = HEAP32[$0>>2]|0;
   $62 = HEAP32[$1>>2]|0;
   $63 = (($62) + 21024|0);
   $64 = (($63) + ($61<<4)|0);
   $65 = (($64) + ($60<<2)|0);
   HEAP32[$65>>2] = 1;
  }
  $66 = HEAP32[$i>>2]|0;
  $67 = (($66) + 1)|0;
  HEAP32[$i>>2] = $67;
 }
 HEAP32[$c1>>2] = 0;
 HEAP32[$s1>>2] = 0;
 HEAP32[$sfb>>2] = 0;
 while(1) {
  $68 = HEAP32[$sfb>>2]|0;
  $69 = ($68|0)<(11);
  if (!($69)) {
   break;
  }
  $70 = HEAP32[$sfb>>2]|0;
  $71 = HEAP32[$gi>>2]|0;
  $72 = (($71) + 4608|0);
  $73 = (($72) + ($70<<2)|0);
  $74 = HEAP32[$73>>2]|0;
  $75 = ($74|0)==(-1);
  if (!($75)) {
   $76 = HEAP32[$c1>>2]|0;
   $77 = (($76) + 1)|0;
   HEAP32[$c1>>2] = $77;
   $78 = HEAP32[$s1>>2]|0;
   $79 = HEAP32[$sfb>>2]|0;
   $80 = HEAP32[$gi>>2]|0;
   $81 = (($80) + 4608|0);
   $82 = (($81) + ($79<<2)|0);
   $83 = HEAP32[$82>>2]|0;
   $84 = ($78|0)<($83|0);
   if ($84) {
    $85 = HEAP32[$sfb>>2]|0;
    $86 = HEAP32[$gi>>2]|0;
    $87 = (($86) + 4608|0);
    $88 = (($87) + ($85<<2)|0);
    $89 = HEAP32[$88>>2]|0;
    HEAP32[$s1>>2] = $89;
   }
  }
  $90 = HEAP32[$sfb>>2]|0;
  $91 = (($90) + 1)|0;
  HEAP32[$sfb>>2] = $91;
 }
 HEAP32[$c2>>2] = 0;
 HEAP32[$s2>>2] = 0;
 while(1) {
  $92 = HEAP32[$sfb>>2]|0;
  $93 = ($92|0)<(21);
  if (!($93)) {
   break;
  }
  $94 = HEAP32[$sfb>>2]|0;
  $95 = HEAP32[$gi>>2]|0;
  $96 = (($95) + 4608|0);
  $97 = (($96) + ($94<<2)|0);
  $98 = HEAP32[$97>>2]|0;
  $99 = ($98|0)==(-1);
  if (!($99)) {
   $100 = HEAP32[$c2>>2]|0;
   $101 = (($100) + 1)|0;
   HEAP32[$c2>>2] = $101;
   $102 = HEAP32[$s2>>2]|0;
   $103 = HEAP32[$sfb>>2]|0;
   $104 = HEAP32[$gi>>2]|0;
   $105 = (($104) + 4608|0);
   $106 = (($105) + ($103<<2)|0);
   $107 = HEAP32[$106>>2]|0;
   $108 = ($102|0)<($107|0);
   if ($108) {
    $109 = HEAP32[$sfb>>2]|0;
    $110 = HEAP32[$gi>>2]|0;
    $111 = (($110) + 4608|0);
    $112 = (($111) + ($109<<2)|0);
    $113 = HEAP32[$112>>2]|0;
    HEAP32[$s2>>2] = $113;
   }
  }
  $114 = HEAP32[$sfb>>2]|0;
  $115 = (($114) + 1)|0;
  HEAP32[$sfb>>2] = $115;
 }
 HEAP32[$i>>2] = 0;
 while(1) {
  $116 = HEAP32[$i>>2]|0;
  $117 = ($116>>>0)<(16);
  if (!($117)) {
   break;
  }
  $118 = HEAP32[$s1>>2]|0;
  $119 = HEAP32[$i>>2]|0;
  $120 = (98808 + ($119<<2)|0);
  $121 = HEAP32[$120>>2]|0;
  $122 = ($118|0)<($121|0);
  if ($122) {
   $123 = HEAP32[$s2>>2]|0;
   $124 = HEAP32[$i>>2]|0;
   $125 = (98872 + ($124<<2)|0);
   $126 = HEAP32[$125>>2]|0;
   $127 = ($123|0)<($126|0);
   if ($127) {
    $128 = HEAP32[$i>>2]|0;
    $129 = (97976 + ($128<<2)|0);
    $130 = HEAP32[$129>>2]|0;
    $131 = HEAP32[$c1>>2]|0;
    $132 = Math_imul($130, $131)|0;
    $133 = HEAP32[$i>>2]|0;
    $134 = (98040 + ($133<<2)|0);
    $135 = HEAP32[$134>>2]|0;
    $136 = HEAP32[$c2>>2]|0;
    $137 = Math_imul($135, $136)|0;
    $138 = (($132) + ($137))|0;
    HEAP32[$c>>2] = $138;
    $139 = HEAP32[$gi>>2]|0;
    $140 = (($139) + 4844|0);
    $141 = HEAP32[$140>>2]|0;
    $142 = HEAP32[$c>>2]|0;
    $143 = ($141|0)>($142|0);
    if ($143) {
     $144 = HEAP32[$c>>2]|0;
     $145 = HEAP32[$gi>>2]|0;
     $146 = (($145) + 4844|0);
     HEAP32[$146>>2] = $144;
     $147 = HEAP32[$i>>2]|0;
     $148 = HEAP32[$gi>>2]|0;
     $149 = (($148) + 4784|0);
     HEAP32[$149>>2] = $147;
    }
   }
  }
  $150 = HEAP32[$i>>2]|0;
  $151 = (($150) + 1)|0;
  HEAP32[$i>>2] = $151;
 }
 STACKTOP = sp;return;
}
function _scale_bitcount($gfc,$cod_info) {
 $gfc = $gfc|0;
 $cod_info = $cod_info|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp + 8|0;
 $1 = sp + 4|0;
 $2 = sp;
 HEAP32[$1>>2] = $gfc;
 HEAP32[$2>>2] = $cod_info;
 $3 = HEAP32[$1>>2]|0;
 $4 = (($3) + 16|0);
 $5 = (($4) + 60|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)==(2);
 $8 = HEAP32[$1>>2]|0;
 $9 = HEAP32[$2>>2]|0;
 if ($7) {
  $10 = (_mpeg1_scale_bitcount($8,$9)|0);
  HEAP32[$0>>2] = $10;
  $12 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($12|0);
 } else {
  $11 = (_mpeg2_scale_bitcount($8,$9)|0);
  HEAP32[$0>>2] = $11;
  $12 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($12|0);
 }
 return 0|0;
}
function _mpeg1_scale_bitcount($gfc,$cod_info) {
 $gfc = $gfc|0;
 $cod_info = $cod_info|0;
 var $$ = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $k = 0, $max_slen1 = 0, $max_slen2 = 0;
 var $scalefac = 0, $sfb = 0, $tab = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = sp + 28|0;
 $1 = sp + 24|0;
 $k = sp + 20|0;
 $sfb = sp + 16|0;
 $max_slen1 = sp + 12|0;
 $max_slen2 = sp + 8|0;
 $tab = sp + 4|0;
 $scalefac = sp;
 HEAP32[$0>>2] = $gfc;
 HEAP32[$1>>2] = $cod_info;
 HEAP32[$max_slen1>>2] = 0;
 HEAP32[$max_slen2>>2] = 0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (($2) + 4608|0);
 HEAP32[$scalefac>>2] = $3;
 $4 = HEAP32[$1>>2]|0;
 $5 = (($4) + 4788|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)==(2);
 L1: do {
  if ($7) {
   HEAP32[$tab>>2] = 98616;
   $8 = HEAP32[$1>>2]|0;
   $9 = (($8) + 4792|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = ($10|0)!=(0);
   $$ = $11 ? 98680 : 98616;
   HEAP32[$tab>>2] = $$;
  } else {
   HEAP32[$tab>>2] = 98744;
   $12 = HEAP32[$1>>2]|0;
   $13 = (($12) + 4832|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = ($14|0)!=(0);
   if (!($15)) {
    HEAP32[$sfb>>2] = 11;
    while(1) {
     $16 = HEAP32[$sfb>>2]|0;
     $17 = ($16|0)<(21);
     if (!($17)) {
      break;
     }
     $18 = HEAP32[$sfb>>2]|0;
     $19 = HEAP32[$scalefac>>2]|0;
     $20 = (($19) + ($18<<2)|0);
     $21 = HEAP32[$20>>2]|0;
     $22 = HEAP32[$sfb>>2]|0;
     $23 = (21376 + ($22<<2)|0);
     $24 = HEAP32[$23>>2]|0;
     $25 = ($21|0)<($24|0);
     if ($25) {
      break;
     }
     $26 = HEAP32[$sfb>>2]|0;
     $27 = (($26) + 1)|0;
     HEAP32[$sfb>>2] = $27;
    }
    $28 = HEAP32[$sfb>>2]|0;
    $29 = ($28|0)==(21);
    if ($29) {
     $30 = HEAP32[$1>>2]|0;
     $31 = (($30) + 4832|0);
     HEAP32[$31>>2] = 1;
     HEAP32[$sfb>>2] = 11;
     while(1) {
      $32 = HEAP32[$sfb>>2]|0;
      $33 = ($32|0)<(21);
      if (!($33)) {
       break L1;
      }
      $34 = HEAP32[$sfb>>2]|0;
      $35 = (21376 + ($34<<2)|0);
      $36 = HEAP32[$35>>2]|0;
      $37 = HEAP32[$sfb>>2]|0;
      $38 = HEAP32[$scalefac>>2]|0;
      $39 = (($38) + ($37<<2)|0);
      $40 = HEAP32[$39>>2]|0;
      $41 = (($40) - ($36))|0;
      HEAP32[$39>>2] = $41;
      $42 = HEAP32[$sfb>>2]|0;
      $43 = (($42) + 1)|0;
      HEAP32[$sfb>>2] = $43;
     }
    }
   }
  }
 } while(0);
 HEAP32[$sfb>>2] = 0;
 while(1) {
  $44 = HEAP32[$sfb>>2]|0;
  $45 = HEAP32[$1>>2]|0;
  $46 = (($45) + 4868|0);
  $47 = HEAP32[$46>>2]|0;
  $48 = ($44|0)<($47|0);
  if (!($48)) {
   break;
  }
  $49 = HEAP32[$max_slen1>>2]|0;
  $50 = HEAP32[$sfb>>2]|0;
  $51 = HEAP32[$scalefac>>2]|0;
  $52 = (($51) + ($50<<2)|0);
  $53 = HEAP32[$52>>2]|0;
  $54 = ($49|0)<($53|0);
  if ($54) {
   $55 = HEAP32[$sfb>>2]|0;
   $56 = HEAP32[$scalefac>>2]|0;
   $57 = (($56) + ($55<<2)|0);
   $58 = HEAP32[$57>>2]|0;
   HEAP32[$max_slen1>>2] = $58;
  }
  $59 = HEAP32[$sfb>>2]|0;
  $60 = (($59) + 1)|0;
  HEAP32[$sfb>>2] = $60;
 }
 while(1) {
  $61 = HEAP32[$sfb>>2]|0;
  $62 = HEAP32[$1>>2]|0;
  $63 = (($62) + 4860|0);
  $64 = HEAP32[$63>>2]|0;
  $65 = ($61|0)<($64|0);
  if (!($65)) {
   break;
  }
  $66 = HEAP32[$max_slen2>>2]|0;
  $67 = HEAP32[$sfb>>2]|0;
  $68 = HEAP32[$scalefac>>2]|0;
  $69 = (($68) + ($67<<2)|0);
  $70 = HEAP32[$69>>2]|0;
  $71 = ($66|0)<($70|0);
  if ($71) {
   $72 = HEAP32[$sfb>>2]|0;
   $73 = HEAP32[$scalefac>>2]|0;
   $74 = (($73) + ($72<<2)|0);
   $75 = HEAP32[$74>>2]|0;
   HEAP32[$max_slen2>>2] = $75;
  }
  $76 = HEAP32[$sfb>>2]|0;
  $77 = (($76) + 1)|0;
  HEAP32[$sfb>>2] = $77;
 }
 $78 = HEAP32[$1>>2]|0;
 $79 = (($78) + 4844|0);
 HEAP32[$79>>2] = 100000;
 HEAP32[$k>>2] = 0;
 while(1) {
  $80 = HEAP32[$k>>2]|0;
  $81 = ($80|0)<(16);
  if (!($81)) {
   break;
  }
  $82 = HEAP32[$max_slen1>>2]|0;
  $83 = HEAP32[$k>>2]|0;
  $84 = (98808 + ($83<<2)|0);
  $85 = HEAP32[$84>>2]|0;
  $86 = ($82|0)<($85|0);
  if ($86) {
   $87 = HEAP32[$max_slen2>>2]|0;
   $88 = HEAP32[$k>>2]|0;
   $89 = (98872 + ($88<<2)|0);
   $90 = HEAP32[$89>>2]|0;
   $91 = ($87|0)<($90|0);
   if ($91) {
    $92 = HEAP32[$1>>2]|0;
    $93 = (($92) + 4844|0);
    $94 = HEAP32[$93>>2]|0;
    $95 = HEAP32[$k>>2]|0;
    $96 = HEAP32[$tab>>2]|0;
    $97 = (($96) + ($95<<2)|0);
    $98 = HEAP32[$97>>2]|0;
    $99 = ($94|0)>($98|0);
    if ($99) {
     $100 = HEAP32[$k>>2]|0;
     $101 = HEAP32[$tab>>2]|0;
     $102 = (($101) + ($100<<2)|0);
     $103 = HEAP32[$102>>2]|0;
     $104 = HEAP32[$1>>2]|0;
     $105 = (($104) + 4844|0);
     HEAP32[$105>>2] = $103;
     $106 = HEAP32[$k>>2]|0;
     $107 = HEAP32[$1>>2]|0;
     $108 = (($107) + 4784|0);
     HEAP32[$108>>2] = $106;
    }
   }
  }
  $109 = HEAP32[$k>>2]|0;
  $110 = (($109) + 1)|0;
  HEAP32[$k>>2] = $110;
 }
 $111 = HEAP32[$1>>2]|0;
 $112 = (($111) + 4844|0);
 $113 = HEAP32[$112>>2]|0;
 $114 = ($113|0)==(100000);
 $115 = $114&1;
 STACKTOP = sp;return ($115|0);
}
function _mpeg2_scale_bitcount($gfc,$cod_info) {
 $gfc = $gfc|0;
 $cod_info = $cod_info|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $i = 0, $max_sfac = 0, $nr_sfb = 0, $over = 0, $partition = 0, $partition_table = 0, $row_in_table = 0, $scalefac = 0, $sfb = 0, $slen1 = 0, $slen2 = 0, $slen3 = 0, $slen4 = 0, $table_number = 0, $vararg_buffer = 0, $window = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0;
 $vararg_buffer = sp;
 $0 = sp + 84|0;
 $1 = sp + 80|0;
 $table_number = sp + 76|0;
 $row_in_table = sp + 72|0;
 $partition = sp + 68|0;
 $nr_sfb = sp + 64|0;
 $window = sp + 60|0;
 $over = sp + 56|0;
 $i = sp + 52|0;
 $sfb = sp + 48|0;
 $max_sfac = sp + 32|0;
 $partition_table = sp + 24|0;
 $scalefac = sp + 20|0;
 $slen1 = sp + 16|0;
 $slen2 = sp + 12|0;
 $slen3 = sp + 8|0;
 $slen4 = sp + 4|0;
 HEAP32[$0>>2] = $gfc;
 HEAP32[$1>>2] = $cod_info;
 $2 = HEAP32[$1>>2]|0;
 $3 = (($2) + 4608|0);
 HEAP32[$scalefac>>2] = $3;
 $4 = HEAP32[$1>>2]|0;
 $5 = (($4) + 4832|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)!=(0);
 if ($7) {
  HEAP32[$table_number>>2] = 2;
 } else {
  HEAP32[$table_number>>2] = 0;
 }
 HEAP32[$i>>2] = 0;
 while(1) {
  $8 = HEAP32[$i>>2]|0;
  $9 = ($8|0)<(4);
  if (!($9)) {
   break;
  }
  $10 = HEAP32[$i>>2]|0;
  $11 = (($max_sfac) + ($10<<2)|0);
  HEAP32[$11>>2] = 0;
  $12 = HEAP32[$i>>2]|0;
  $13 = (($12) + 1)|0;
  HEAP32[$i>>2] = $13;
 }
 $14 = HEAP32[$1>>2]|0;
 $15 = (($14) + 4788|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = ($16|0)==(2);
 L9: do {
  if ($17) {
   HEAP32[$row_in_table>>2] = 1;
   $18 = HEAP32[$row_in_table>>2]|0;
   $19 = HEAP32[$table_number>>2]|0;
   $20 = (21088 + (($19*48)|0)|0);
   $21 = (($20) + ($18<<4)|0);
   HEAP32[$partition_table>>2] = $21;
   HEAP32[$sfb>>2] = 0;
   HEAP32[$partition>>2] = 0;
   while(1) {
    $22 = HEAP32[$partition>>2]|0;
    $23 = ($22|0)<(4);
    if (!($23)) {
     break L9;
    }
    $24 = HEAP32[$partition>>2]|0;
    $25 = HEAP32[$partition_table>>2]|0;
    $26 = (($25) + ($24<<2)|0);
    $27 = HEAP32[$26>>2]|0;
    $28 = (($27|0) / 3)&-1;
    HEAP32[$nr_sfb>>2] = $28;
    HEAP32[$i>>2] = 0;
    while(1) {
     $29 = HEAP32[$i>>2]|0;
     $30 = HEAP32[$nr_sfb>>2]|0;
     $31 = ($29|0)<($30|0);
     if (!($31)) {
      break;
     }
     HEAP32[$window>>2] = 0;
     while(1) {
      $32 = HEAP32[$window>>2]|0;
      $33 = ($32|0)<(3);
      if (!($33)) {
       break;
      }
      $34 = HEAP32[$sfb>>2]|0;
      $35 = ($34*3)|0;
      $36 = HEAP32[$window>>2]|0;
      $37 = (($35) + ($36))|0;
      $38 = HEAP32[$scalefac>>2]|0;
      $39 = (($38) + ($37<<2)|0);
      $40 = HEAP32[$39>>2]|0;
      $41 = HEAP32[$partition>>2]|0;
      $42 = (($max_sfac) + ($41<<2)|0);
      $43 = HEAP32[$42>>2]|0;
      $44 = ($40|0)>($43|0);
      if ($44) {
       $45 = HEAP32[$sfb>>2]|0;
       $46 = ($45*3)|0;
       $47 = HEAP32[$window>>2]|0;
       $48 = (($46) + ($47))|0;
       $49 = HEAP32[$scalefac>>2]|0;
       $50 = (($49) + ($48<<2)|0);
       $51 = HEAP32[$50>>2]|0;
       $52 = HEAP32[$partition>>2]|0;
       $53 = (($max_sfac) + ($52<<2)|0);
       HEAP32[$53>>2] = $51;
      }
      $54 = HEAP32[$window>>2]|0;
      $55 = (($54) + 1)|0;
      HEAP32[$window>>2] = $55;
     }
     $56 = HEAP32[$i>>2]|0;
     $57 = (($56) + 1)|0;
     HEAP32[$i>>2] = $57;
     $58 = HEAP32[$sfb>>2]|0;
     $59 = (($58) + 1)|0;
     HEAP32[$sfb>>2] = $59;
    }
    $60 = HEAP32[$partition>>2]|0;
    $61 = (($60) + 1)|0;
    HEAP32[$partition>>2] = $61;
   }
  } else {
   HEAP32[$row_in_table>>2] = 0;
   $62 = HEAP32[$row_in_table>>2]|0;
   $63 = HEAP32[$table_number>>2]|0;
   $64 = (21088 + (($63*48)|0)|0);
   $65 = (($64) + ($62<<4)|0);
   HEAP32[$partition_table>>2] = $65;
   HEAP32[$sfb>>2] = 0;
   HEAP32[$partition>>2] = 0;
   while(1) {
    $66 = HEAP32[$partition>>2]|0;
    $67 = ($66|0)<(4);
    if (!($67)) {
     break L9;
    }
    $68 = HEAP32[$partition>>2]|0;
    $69 = HEAP32[$partition_table>>2]|0;
    $70 = (($69) + ($68<<2)|0);
    $71 = HEAP32[$70>>2]|0;
    HEAP32[$nr_sfb>>2] = $71;
    HEAP32[$i>>2] = 0;
    while(1) {
     $72 = HEAP32[$i>>2]|0;
     $73 = HEAP32[$nr_sfb>>2]|0;
     $74 = ($72|0)<($73|0);
     if (!($74)) {
      break;
     }
     $75 = HEAP32[$sfb>>2]|0;
     $76 = HEAP32[$scalefac>>2]|0;
     $77 = (($76) + ($75<<2)|0);
     $78 = HEAP32[$77>>2]|0;
     $79 = HEAP32[$partition>>2]|0;
     $80 = (($max_sfac) + ($79<<2)|0);
     $81 = HEAP32[$80>>2]|0;
     $82 = ($78|0)>($81|0);
     if ($82) {
      $83 = HEAP32[$sfb>>2]|0;
      $84 = HEAP32[$scalefac>>2]|0;
      $85 = (($84) + ($83<<2)|0);
      $86 = HEAP32[$85>>2]|0;
      $87 = HEAP32[$partition>>2]|0;
      $88 = (($max_sfac) + ($87<<2)|0);
      HEAP32[$88>>2] = $86;
     }
     $89 = HEAP32[$i>>2]|0;
     $90 = (($89) + 1)|0;
     HEAP32[$i>>2] = $90;
     $91 = HEAP32[$sfb>>2]|0;
     $92 = (($91) + 1)|0;
     HEAP32[$sfb>>2] = $92;
    }
    $93 = HEAP32[$partition>>2]|0;
    $94 = (($93) + 1)|0;
    HEAP32[$partition>>2] = $94;
   }
  }
 } while(0);
 HEAP32[$over>>2] = 0;
 HEAP32[$partition>>2] = 0;
 while(1) {
  $95 = HEAP32[$partition>>2]|0;
  $96 = ($95|0)<(4);
  if (!($96)) {
   break;
  }
  $97 = HEAP32[$partition>>2]|0;
  $98 = (($max_sfac) + ($97<<2)|0);
  $99 = HEAP32[$98>>2]|0;
  $100 = HEAP32[$partition>>2]|0;
  $101 = HEAP32[$table_number>>2]|0;
  $102 = (98416 + ($101<<4)|0);
  $103 = (($102) + ($100<<2)|0);
  $104 = HEAP32[$103>>2]|0;
  $105 = ($99|0)>($104|0);
  if ($105) {
   $106 = HEAP32[$over>>2]|0;
   $107 = (($106) + 1)|0;
   HEAP32[$over>>2] = $107;
  }
  $108 = HEAP32[$partition>>2]|0;
  $109 = (($108) + 1)|0;
  HEAP32[$partition>>2] = $109;
 }
 $110 = HEAP32[$over>>2]|0;
 $111 = ($110|0)!=(0);
 do {
  if (!($111)) {
   $112 = HEAP32[$row_in_table>>2]|0;
   $113 = HEAP32[$table_number>>2]|0;
   $114 = (21088 + (($113*48)|0)|0);
   $115 = (($114) + ($112<<4)|0);
   $116 = HEAP32[$1>>2]|0;
   $117 = (($116) + 5188|0);
   HEAP32[$117>>2] = $115;
   HEAP32[$partition>>2] = 0;
   while(1) {
    $118 = HEAP32[$partition>>2]|0;
    $119 = ($118|0)<(4);
    if (!($119)) {
     break;
    }
    $120 = HEAP32[$partition>>2]|0;
    $121 = (($max_sfac) + ($120<<2)|0);
    $122 = HEAP32[$121>>2]|0;
    $123 = (98512 + ($122<<2)|0);
    $124 = HEAP32[$123>>2]|0;
    $125 = HEAP32[$partition>>2]|0;
    $126 = HEAP32[$1>>2]|0;
    $127 = (($126) + 5192|0);
    $128 = (($127) + ($125<<2)|0);
    HEAP32[$128>>2] = $124;
    $129 = HEAP32[$partition>>2]|0;
    $130 = (($129) + 1)|0;
    HEAP32[$partition>>2] = $130;
   }
   $131 = HEAP32[$1>>2]|0;
   $132 = (($131) + 5192|0);
   $133 = HEAP32[$132>>2]|0;
   HEAP32[$slen1>>2] = $133;
   $134 = HEAP32[$1>>2]|0;
   $135 = (($134) + 5192|0);
   $136 = (($135) + 4|0);
   $137 = HEAP32[$136>>2]|0;
   HEAP32[$slen2>>2] = $137;
   $138 = HEAP32[$1>>2]|0;
   $139 = (($138) + 5192|0);
   $140 = (($139) + 8|0);
   $141 = HEAP32[$140>>2]|0;
   HEAP32[$slen3>>2] = $141;
   $142 = HEAP32[$1>>2]|0;
   $143 = (($142) + 5192|0);
   $144 = (($143) + 12|0);
   $145 = HEAP32[$144>>2]|0;
   HEAP32[$slen4>>2] = $145;
   $146 = HEAP32[$table_number>>2]|0;
   if ((($146|0) == 2)) {
    $169 = HEAP32[$slen1>>2]|0;
    $170 = ($169*3)|0;
    $171 = (500 + ($170))|0;
    $172 = HEAP32[$slen2>>2]|0;
    $173 = (($171) + ($172))|0;
    $174 = HEAP32[$1>>2]|0;
    $175 = (($174) + 4784|0);
    HEAP32[$175>>2] = $173;
    break;
   } else if ((($146|0) == 1)) {
    $159 = HEAP32[$slen1>>2]|0;
    $160 = ($159*5)|0;
    $161 = HEAP32[$slen2>>2]|0;
    $162 = (($160) + ($161))|0;
    $163 = $162 << 2;
    $164 = (400 + ($163))|0;
    $165 = HEAP32[$slen3>>2]|0;
    $166 = (($164) + ($165))|0;
    $167 = HEAP32[$1>>2]|0;
    $168 = (($167) + 4784|0);
    HEAP32[$168>>2] = $166;
    break;
   } else if ((($146|0) == 0)) {
    $147 = HEAP32[$slen1>>2]|0;
    $148 = ($147*5)|0;
    $149 = HEAP32[$slen2>>2]|0;
    $150 = (($148) + ($149))|0;
    $151 = $150 << 4;
    $152 = HEAP32[$slen3>>2]|0;
    $153 = $152 << 2;
    $154 = (($151) + ($153))|0;
    $155 = HEAP32[$slen4>>2]|0;
    $156 = (($154) + ($155))|0;
    $157 = HEAP32[$1>>2]|0;
    $158 = (($157) + 4784|0);
    HEAP32[$158>>2] = $156;
    break;
   } else {
    $176 = HEAP32[$0>>2]|0;
    _lame_errorf($176,98576,$vararg_buffer);
    break;
   }
  }
 } while(0);
 $177 = HEAP32[$over>>2]|0;
 $178 = ($177|0)!=(0);
 if ($178) {
  $201 = HEAP32[$over>>2]|0;
  STACKTOP = sp;return ($201|0);
 }
 $179 = HEAP32[$1>>2]|0;
 $180 = (($179) + 4844|0);
 HEAP32[$180>>2] = 0;
 HEAP32[$partition>>2] = 0;
 while(1) {
  $181 = HEAP32[$partition>>2]|0;
  $182 = ($181|0)<(4);
  if (!($182)) {
   break;
  }
  $183 = HEAP32[$partition>>2]|0;
  $184 = HEAP32[$1>>2]|0;
  $185 = (($184) + 5192|0);
  $186 = (($185) + ($183<<2)|0);
  $187 = HEAP32[$186>>2]|0;
  $188 = HEAP32[$partition>>2]|0;
  $189 = HEAP32[$1>>2]|0;
  $190 = (($189) + 5188|0);
  $191 = HEAP32[$190>>2]|0;
  $192 = (($191) + ($188<<2)|0);
  $193 = HEAP32[$192>>2]|0;
  $194 = Math_imul($187, $193)|0;
  $195 = HEAP32[$1>>2]|0;
  $196 = (($195) + 4844|0);
  $197 = HEAP32[$196>>2]|0;
  $198 = (($197) + ($194))|0;
  HEAP32[$196>>2] = $198;
  $199 = HEAP32[$partition>>2]|0;
  $200 = (($199) + 1)|0;
  HEAP32[$partition>>2] = $200;
 }
 $201 = HEAP32[$over>>2]|0;
 STACKTOP = sp;return ($201|0);
}
function _huffman_init($gfc) {
 $gfc = $gfc|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $8 = 0, $9 = 0, $bv_index = 0, $i = 0, $scfb_anz = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp + 12|0;
 $i = sp + 8|0;
 $scfb_anz = sp + 4|0;
 $bv_index = sp;
 HEAP32[$0>>2] = $gfc;
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 85816|0);
 HEAP32[$2>>2] = 2;
 HEAP32[$i>>2] = 2;
 while(1) {
  $3 = HEAP32[$i>>2]|0;
  $4 = ($3|0)<=(576);
  if (!($4)) {
   break;
  }
  HEAP32[$scfb_anz>>2] = 0;
  while(1) {
   $5 = HEAP32[$scfb_anz>>2]|0;
   $6 = (($5) + 1)|0;
   HEAP32[$scfb_anz>>2] = $6;
   $7 = HEAP32[$0>>2]|0;
   $8 = (($7) + 21360|0);
   $9 = (($8) + ($6<<2)|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = HEAP32[$i>>2]|0;
   $12 = ($10|0)<($11|0);
   if (!($12)) {
    break;
   }
  }
  $13 = HEAP32[$scfb_anz>>2]|0;
  $14 = (98104 + ($13<<3)|0);
  $15 = HEAP32[$14>>2]|0;
  HEAP32[$bv_index>>2] = $15;
  while(1) {
   $16 = HEAP32[$bv_index>>2]|0;
   $17 = (($16) + 1)|0;
   $18 = HEAP32[$0>>2]|0;
   $19 = (($18) + 21360|0);
   $20 = (($19) + ($17<<2)|0);
   $21 = HEAP32[$20>>2]|0;
   $22 = HEAP32[$i>>2]|0;
   $23 = ($21|0)>($22|0);
   $24 = HEAP32[$bv_index>>2]|0;
   if (!($23)) {
    break;
   }
   $25 = (($24) + -1)|0;
   HEAP32[$bv_index>>2] = $25;
  }
  $26 = ($24|0)<(0);
  if ($26) {
   $27 = HEAP32[$scfb_anz>>2]|0;
   $28 = (98104 + ($27<<3)|0);
   $29 = HEAP32[$28>>2]|0;
   HEAP32[$bv_index>>2] = $29;
  }
  $30 = HEAP32[$bv_index>>2]|0;
  $31 = $30&255;
  $32 = HEAP32[$i>>2]|0;
  $33 = (($32) - 2)|0;
  $34 = HEAP32[$0>>2]|0;
  $35 = (($34) + 84768|0);
  $36 = (($35) + 332|0);
  $37 = (($36) + ($33)|0);
  HEAP8[$37>>0] = $31;
  $38 = HEAP32[$scfb_anz>>2]|0;
  $39 = (98104 + ($38<<3)|0);
  $40 = (($39) + 4|0);
  $41 = HEAP32[$40>>2]|0;
  HEAP32[$bv_index>>2] = $41;
  while(1) {
   $42 = HEAP32[$bv_index>>2]|0;
   $43 = HEAP32[$i>>2]|0;
   $44 = (($43) - 2)|0;
   $45 = HEAP32[$0>>2]|0;
   $46 = (($45) + 84768|0);
   $47 = (($46) + 332|0);
   $48 = (($47) + ($44)|0);
   $49 = HEAP8[$48>>0]|0;
   $50 = $49 << 24 >> 24;
   $51 = (($42) + ($50))|0;
   $52 = (($51) + 2)|0;
   $53 = HEAP32[$0>>2]|0;
   $54 = (($53) + 21360|0);
   $55 = (($54) + ($52<<2)|0);
   $56 = HEAP32[$55>>2]|0;
   $57 = HEAP32[$i>>2]|0;
   $58 = ($56|0)>($57|0);
   $59 = HEAP32[$bv_index>>2]|0;
   if (!($58)) {
    break;
   }
   $60 = (($59) + -1)|0;
   HEAP32[$bv_index>>2] = $60;
  }
  $61 = ($59|0)<(0);
  if ($61) {
   $62 = HEAP32[$scfb_anz>>2]|0;
   $63 = (98104 + ($62<<3)|0);
   $64 = (($63) + 4|0);
   $65 = HEAP32[$64>>2]|0;
   HEAP32[$bv_index>>2] = $65;
  }
  $66 = HEAP32[$bv_index>>2]|0;
  $67 = $66&255;
  $68 = HEAP32[$i>>2]|0;
  $69 = (($68) - 1)|0;
  $70 = HEAP32[$0>>2]|0;
  $71 = (($70) + 84768|0);
  $72 = (($71) + 332|0);
  $73 = (($72) + ($69)|0);
  HEAP8[$73>>0] = $67;
  $74 = HEAP32[$i>>2]|0;
  $75 = (($74) + 2)|0;
  HEAP32[$i>>2] = $75;
 }
 STACKTOP = sp;return;
}
function _choose_table_nonMMX($ix,$end,$_s) {
 $ix = $ix|0;
 $end = $end|0;
 $_s = $_s|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $choice = 0, $choice2 = 0, $max = 0, $s = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = sp + 28|0;
 $1 = sp + 24|0;
 $2 = sp + 20|0;
 $3 = sp + 16|0;
 $s = sp + 12|0;
 $max = sp + 8|0;
 $choice = sp + 4|0;
 $choice2 = sp;
 HEAP32[$1>>2] = $ix;
 HEAP32[$2>>2] = $end;
 HEAP32[$3>>2] = $_s;
 $4 = HEAP32[$3>>2]|0;
 HEAP32[$s>>2] = $4;
 $5 = HEAP32[$1>>2]|0;
 $6 = HEAP32[$2>>2]|0;
 $7 = (_ix_max($5,$6)|0);
 HEAP32[$max>>2] = $7;
 $8 = HEAP32[$max>>2]|0;
 $9 = ($8>>>0)<=(15);
 $10 = HEAP32[$max>>2]|0;
 if ($9) {
  $11 = (98288 + ($10<<2)|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = HEAP32[$1>>2]|0;
  $14 = HEAP32[$2>>2]|0;
  $15 = HEAP32[$max>>2]|0;
  $16 = HEAP32[$s>>2]|0;
  $17 = (FUNCTION_TABLE_iiiii[$12 & 7]($13,$14,$15,$16)|0);
  HEAP32[$0>>2] = $17;
  $50 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($50|0);
 }
 $18 = ($10>>>0)>(8206);
 if ($18) {
  $19 = HEAP32[$s>>2]|0;
  HEAP32[$19>>2] = 100000;
  HEAP32[$0>>2] = -1;
  $50 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($50|0);
 }
 $20 = HEAP32[$max>>2]|0;
 $21 = (($20) - 15)|0;
 HEAP32[$max>>2] = $21;
 HEAP32[$choice2>>2] = 24;
 while(1) {
  $22 = HEAP32[$choice2>>2]|0;
  $23 = ($22|0)<(32);
  if (!($23)) {
   break;
  }
  $24 = HEAP32[$choice2>>2]|0;
  $25 = (96088 + ($24<<4)|0);
  $26 = (($25) + 4|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = HEAP32[$max>>2]|0;
  $29 = ($27>>>0)>=($28>>>0);
  if ($29) {
   break;
  }
  $30 = HEAP32[$choice2>>2]|0;
  $31 = (($30) + 1)|0;
  HEAP32[$choice2>>2] = $31;
 }
 $32 = HEAP32[$choice2>>2]|0;
 $33 = (($32) - 8)|0;
 HEAP32[$choice>>2] = $33;
 while(1) {
  $34 = HEAP32[$choice>>2]|0;
  $35 = ($34|0)<(24);
  if (!($35)) {
   break;
  }
  $36 = HEAP32[$choice>>2]|0;
  $37 = (96088 + ($36<<4)|0);
  $38 = (($37) + 4|0);
  $39 = HEAP32[$38>>2]|0;
  $40 = HEAP32[$max>>2]|0;
  $41 = ($39>>>0)>=($40>>>0);
  if ($41) {
   break;
  }
  $42 = HEAP32[$choice>>2]|0;
  $43 = (($42) + 1)|0;
  HEAP32[$choice>>2] = $43;
 }
 $44 = HEAP32[$1>>2]|0;
 $45 = HEAP32[$2>>2]|0;
 $46 = HEAP32[$choice>>2]|0;
 $47 = HEAP32[$choice2>>2]|0;
 $48 = HEAP32[$s>>2]|0;
 $49 = (_count_bit_ESC($44,$45,$46,$47,$48)|0);
 HEAP32[$0>>2] = $49;
 $50 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($50|0);
}
function _ix_max($ix,$end) {
 $ix = $ix|0;
 $end = $end|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $max1 = 0, $max2 = 0, $x1 = 0, $x2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = sp + 20|0;
 $1 = sp + 16|0;
 $max1 = sp + 12|0;
 $max2 = sp + 8|0;
 $x1 = sp + 4|0;
 $x2 = sp;
 HEAP32[$0>>2] = $ix;
 HEAP32[$1>>2] = $end;
 HEAP32[$max1>>2] = 0;
 HEAP32[$max2>>2] = 0;
 while(1) {
  $2 = HEAP32[$0>>2]|0;
  $3 = (($2) + 4|0);
  HEAP32[$0>>2] = $3;
  $4 = HEAP32[$2>>2]|0;
  HEAP32[$x1>>2] = $4;
  $5 = HEAP32[$0>>2]|0;
  $6 = (($5) + 4|0);
  HEAP32[$0>>2] = $6;
  $7 = HEAP32[$5>>2]|0;
  HEAP32[$x2>>2] = $7;
  $8 = HEAP32[$max1>>2]|0;
  $9 = HEAP32[$x1>>2]|0;
  $10 = ($8|0)<($9|0);
  if ($10) {
   $11 = HEAP32[$x1>>2]|0;
   HEAP32[$max1>>2] = $11;
  }
  $12 = HEAP32[$max2>>2]|0;
  $13 = HEAP32[$x2>>2]|0;
  $14 = ($12|0)<($13|0);
  if ($14) {
   $15 = HEAP32[$x2>>2]|0;
   HEAP32[$max2>>2] = $15;
  }
  $16 = HEAP32[$0>>2]|0;
  $17 = HEAP32[$1>>2]|0;
  $18 = ($16>>>0)<($17>>>0);
  if (!($18)) {
   break;
  }
 }
 $19 = HEAP32[$max1>>2]|0;
 $20 = HEAP32[$max2>>2]|0;
 $21 = ($19|0)<($20|0);
 if (!($21)) {
  $23 = HEAP32[$max1>>2]|0;
  STACKTOP = sp;return ($23|0);
 }
 $22 = HEAP32[$max2>>2]|0;
 HEAP32[$max1>>2] = $22;
 $23 = HEAP32[$max1>>2]|0;
 STACKTOP = sp;return ($23|0);
}
function _count_bit_ESC($ix,$end,$t1,$t2,$s) {
 $ix = $ix|0;
 $end = $end|0;
 $t1 = $t1|0;
 $t2 = $t2|0;
 $s = $s|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $linbits = 0, $sum = 0, $sum2 = 0, $x = 0;
 var $y = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $0 = sp + 36|0;
 $1 = sp + 32|0;
 $2 = sp + 28|0;
 $3 = sp + 24|0;
 $4 = sp + 20|0;
 $linbits = sp + 16|0;
 $sum = sp + 12|0;
 $sum2 = sp + 8|0;
 $x = sp + 4|0;
 $y = sp;
 HEAP32[$0>>2] = $ix;
 HEAP32[$1>>2] = $end;
 HEAP32[$2>>2] = $t1;
 HEAP32[$3>>2] = $t2;
 HEAP32[$4>>2] = $s;
 $5 = HEAP32[$2>>2]|0;
 $6 = (96088 + ($5<<4)|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $7<<16;
 $9 = HEAP32[$3>>2]|0;
 $10 = (96088 + ($9<<4)|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (($8) + ($11))|0;
 HEAP32[$linbits>>2] = $12;
 HEAP32[$sum>>2] = 0;
 while(1) {
  $13 = HEAP32[$0>>2]|0;
  $14 = (($13) + 4|0);
  HEAP32[$0>>2] = $14;
  $15 = HEAP32[$13>>2]|0;
  HEAP32[$x>>2] = $15;
  $16 = HEAP32[$0>>2]|0;
  $17 = (($16) + 4|0);
  HEAP32[$0>>2] = $17;
  $18 = HEAP32[$16>>2]|0;
  HEAP32[$y>>2] = $18;
  $19 = HEAP32[$x>>2]|0;
  $20 = ($19>>>0)>=(15);
  if ($20) {
   HEAP32[$x>>2] = 15;
   $21 = HEAP32[$linbits>>2]|0;
   $22 = HEAP32[$sum>>2]|0;
   $23 = (($22) + ($21))|0;
   HEAP32[$sum>>2] = $23;
  }
  $24 = HEAP32[$y>>2]|0;
  $25 = ($24>>>0)>=(15);
  if ($25) {
   HEAP32[$y>>2] = 15;
   $26 = HEAP32[$linbits>>2]|0;
   $27 = HEAP32[$sum>>2]|0;
   $28 = (($27) + ($26))|0;
   HEAP32[$sum>>2] = $28;
  }
  $29 = HEAP32[$x>>2]|0;
  $30 = $29 << 4;
  HEAP32[$x>>2] = $30;
  $31 = HEAP32[$y>>2]|0;
  $32 = HEAP32[$x>>2]|0;
  $33 = (($32) + ($31))|0;
  HEAP32[$x>>2] = $33;
  $34 = HEAP32[$x>>2]|0;
  $35 = (96632 + ($34<<2)|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = HEAP32[$sum>>2]|0;
  $38 = (($37) + ($36))|0;
  HEAP32[$sum>>2] = $38;
  $39 = HEAP32[$0>>2]|0;
  $40 = HEAP32[$1>>2]|0;
  $41 = ($39>>>0)<($40>>>0);
  if (!($41)) {
   break;
  }
 }
 $42 = HEAP32[$sum>>2]|0;
 $43 = $42 & 65535;
 HEAP32[$sum2>>2] = $43;
 $44 = HEAP32[$sum>>2]|0;
 $45 = $44 >>> 16;
 HEAP32[$sum>>2] = $45;
 $46 = HEAP32[$sum>>2]|0;
 $47 = HEAP32[$sum2>>2]|0;
 $48 = ($46>>>0)>($47>>>0);
 if (!($48)) {
  $51 = HEAP32[$sum>>2]|0;
  $52 = HEAP32[$4>>2]|0;
  $53 = HEAP32[$52>>2]|0;
  $54 = (($53) + ($51))|0;
  HEAP32[$52>>2] = $54;
  $55 = HEAP32[$2>>2]|0;
  STACKTOP = sp;return ($55|0);
 }
 $49 = HEAP32[$sum2>>2]|0;
 HEAP32[$sum>>2] = $49;
 $50 = HEAP32[$3>>2]|0;
 HEAP32[$2>>2] = $50;
 $51 = HEAP32[$sum>>2]|0;
 $52 = HEAP32[$4>>2]|0;
 $53 = HEAP32[$52>>2]|0;
 $54 = (($53) + ($51))|0;
 HEAP32[$52>>2] = $54;
 $55 = HEAP32[$2>>2]|0;
 STACKTOP = sp;return ($55|0);
}
function _count_bit_null($ix,$end,$max,$s) {
 $ix = $ix|0;
 $end = $end|0;
 $max = $max|0;
 $s = $s|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp + 12|0;
 $1 = sp + 8|0;
 $2 = sp + 4|0;
 $3 = sp;
 HEAP32[$0>>2] = $ix;
 HEAP32[$1>>2] = $end;
 HEAP32[$2>>2] = $max;
 HEAP32[$3>>2] = $s;
 STACKTOP = sp;return 0;
}
function _count_bit_noESC($ix,$end,$mx,$s) {
 $ix = $ix|0;
 $end = $end|0;
 $mx = $mx|0;
 $s = $s|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $hlen1 = 0, $sum1 = 0, $x0 = 0, $x1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = sp + 28|0;
 $1 = sp + 24|0;
 $2 = sp + 20|0;
 $3 = sp + 16|0;
 $sum1 = sp + 12|0;
 $hlen1 = sp + 8|0;
 $x0 = sp + 4|0;
 $x1 = sp;
 HEAP32[$0>>2] = $ix;
 HEAP32[$1>>2] = $end;
 HEAP32[$2>>2] = $mx;
 HEAP32[$3>>2] = $s;
 HEAP32[$sum1>>2] = 0;
 $4 = HEAP32[((96088 + 28|0))>>2]|0;
 HEAP32[$hlen1>>2] = $4;
 while(1) {
  $5 = HEAP32[$0>>2]|0;
  $6 = (($5) + 4|0);
  HEAP32[$0>>2] = $6;
  $7 = HEAP32[$5>>2]|0;
  HEAP32[$x0>>2] = $7;
  $8 = HEAP32[$0>>2]|0;
  $9 = (($8) + 4|0);
  HEAP32[$0>>2] = $9;
  $10 = HEAP32[$8>>2]|0;
  HEAP32[$x1>>2] = $10;
  $11 = HEAP32[$x0>>2]|0;
  $12 = HEAP32[$x0>>2]|0;
  $13 = (($11) + ($12))|0;
  $14 = HEAP32[$x1>>2]|0;
  $15 = (($13) + ($14))|0;
  $16 = HEAP32[$hlen1>>2]|0;
  $17 = (($16) + ($15)|0);
  $18 = HEAP8[$17>>0]|0;
  $19 = $18&255;
  $20 = HEAP32[$sum1>>2]|0;
  $21 = (($20) + ($19))|0;
  HEAP32[$sum1>>2] = $21;
  $22 = HEAP32[$0>>2]|0;
  $23 = HEAP32[$1>>2]|0;
  $24 = ($22>>>0)<($23>>>0);
  if (!($24)) {
   break;
  }
 }
 $25 = HEAP32[$sum1>>2]|0;
 $26 = HEAP32[$3>>2]|0;
 $27 = HEAP32[$26>>2]|0;
 $28 = (($27) + ($25))|0;
 HEAP32[$26>>2] = $28;
 STACKTOP = sp;return 1;
}
function _count_bit_noESC_from2($ix,$end,$max,$s) {
 $ix = $ix|0;
 $end = $end|0;
 $max = $max|0;
 $s = $s|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $sum = 0, $sum2 = 0, $t1 = 0, $table = 0, $x0 = 0, $x1 = 0, $xlen = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $0 = sp + 40|0;
 $1 = sp + 36|0;
 $2 = sp + 32|0;
 $3 = sp + 28|0;
 $t1 = sp + 24|0;
 $xlen = sp + 20|0;
 $table = sp + 16|0;
 $sum = sp + 12|0;
 $sum2 = sp + 8|0;
 $x0 = sp + 4|0;
 $x1 = sp;
 HEAP32[$0>>2] = $ix;
 HEAP32[$1>>2] = $end;
 HEAP32[$2>>2] = $max;
 HEAP32[$3>>2] = $s;
 $4 = HEAP32[$2>>2]|0;
 $5 = (($4) - 1)|0;
 $6 = (98352 + ($5<<2)|0);
 $7 = HEAP32[$6>>2]|0;
 HEAP32[$t1>>2] = $7;
 $8 = HEAP32[$t1>>2]|0;
 $9 = (96088 + ($8<<4)|0);
 $10 = HEAP32[$9>>2]|0;
 HEAP32[$xlen>>2] = $10;
 $11 = HEAP32[$t1>>2]|0;
 $12 = ($11|0)==(2);
 $13 = $12 ? 97656 : 97696;
 HEAP32[$table>>2] = $13;
 HEAP32[$sum>>2] = 0;
 while(1) {
  $14 = HEAP32[$0>>2]|0;
  $15 = (($14) + 4|0);
  HEAP32[$0>>2] = $15;
  $16 = HEAP32[$14>>2]|0;
  HEAP32[$x0>>2] = $16;
  $17 = HEAP32[$0>>2]|0;
  $18 = (($17) + 4|0);
  HEAP32[$0>>2] = $18;
  $19 = HEAP32[$17>>2]|0;
  HEAP32[$x1>>2] = $19;
  $20 = HEAP32[$x0>>2]|0;
  $21 = HEAP32[$xlen>>2]|0;
  $22 = Math_imul($20, $21)|0;
  $23 = HEAP32[$x1>>2]|0;
  $24 = (($22) + ($23))|0;
  $25 = HEAP32[$table>>2]|0;
  $26 = (($25) + ($24<<2)|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = HEAP32[$sum>>2]|0;
  $29 = (($28) + ($27))|0;
  HEAP32[$sum>>2] = $29;
  $30 = HEAP32[$0>>2]|0;
  $31 = HEAP32[$1>>2]|0;
  $32 = ($30>>>0)<($31>>>0);
  if (!($32)) {
   break;
  }
 }
 $33 = HEAP32[$sum>>2]|0;
 $34 = $33 & 65535;
 HEAP32[$sum2>>2] = $34;
 $35 = HEAP32[$sum>>2]|0;
 $36 = $35 >>> 16;
 HEAP32[$sum>>2] = $36;
 $37 = HEAP32[$sum>>2]|0;
 $38 = HEAP32[$sum2>>2]|0;
 $39 = ($37>>>0)>($38>>>0);
 if (!($39)) {
  $43 = HEAP32[$sum>>2]|0;
  $44 = HEAP32[$3>>2]|0;
  $45 = HEAP32[$44>>2]|0;
  $46 = (($45) + ($43))|0;
  HEAP32[$44>>2] = $46;
  $47 = HEAP32[$t1>>2]|0;
  STACKTOP = sp;return ($47|0);
 }
 $40 = HEAP32[$sum2>>2]|0;
 HEAP32[$sum>>2] = $40;
 $41 = HEAP32[$t1>>2]|0;
 $42 = (($41) + 1)|0;
 HEAP32[$t1>>2] = $42;
 $43 = HEAP32[$sum>>2]|0;
 $44 = HEAP32[$3>>2]|0;
 $45 = HEAP32[$44>>2]|0;
 $46 = (($45) + ($43))|0;
 HEAP32[$44>>2] = $46;
 $47 = HEAP32[$t1>>2]|0;
 STACKTOP = sp;return ($47|0);
}
function _count_bit_noESC_from3($ix,$end,$max,$s) {
 $ix = $ix|0;
 $end = $end|0;
 $max = $max|0;
 $s = $s|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $8 = 0, $9 = 0, $hlen1 = 0, $hlen2 = 0;
 var $hlen3 = 0, $sum1 = 0, $sum2 = 0, $sum3 = 0, $t = 0, $t1 = 0, $x = 0, $x0 = 0, $x1 = 0, $xlen = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $0 = sp + 60|0;
 $1 = sp + 56|0;
 $2 = sp + 52|0;
 $3 = sp + 48|0;
 $t1 = sp + 44|0;
 $sum1 = sp + 40|0;
 $sum2 = sp + 36|0;
 $sum3 = sp + 32|0;
 $xlen = sp + 28|0;
 $hlen1 = sp + 24|0;
 $hlen2 = sp + 20|0;
 $hlen3 = sp + 16|0;
 $t = sp + 12|0;
 $x0 = sp + 8|0;
 $x1 = sp + 4|0;
 $x = sp;
 HEAP32[$0>>2] = $ix;
 HEAP32[$1>>2] = $end;
 HEAP32[$2>>2] = $max;
 HEAP32[$3>>2] = $s;
 $4 = HEAP32[$2>>2]|0;
 $5 = (($4) - 1)|0;
 $6 = (98352 + ($5<<2)|0);
 $7 = HEAP32[$6>>2]|0;
 HEAP32[$t1>>2] = $7;
 HEAP32[$sum1>>2] = 0;
 HEAP32[$sum2>>2] = 0;
 HEAP32[$sum3>>2] = 0;
 $8 = HEAP32[$t1>>2]|0;
 $9 = (96088 + ($8<<4)|0);
 $10 = HEAP32[$9>>2]|0;
 HEAP32[$xlen>>2] = $10;
 $11 = HEAP32[$t1>>2]|0;
 $12 = (96088 + ($11<<4)|0);
 $13 = (($12) + 12|0);
 $14 = HEAP32[$13>>2]|0;
 HEAP32[$hlen1>>2] = $14;
 $15 = HEAP32[$t1>>2]|0;
 $16 = (($15) + 1)|0;
 $17 = (96088 + ($16<<4)|0);
 $18 = (($17) + 12|0);
 $19 = HEAP32[$18>>2]|0;
 HEAP32[$hlen2>>2] = $19;
 $20 = HEAP32[$t1>>2]|0;
 $21 = (($20) + 2)|0;
 $22 = (96088 + ($21<<4)|0);
 $23 = (($22) + 12|0);
 $24 = HEAP32[$23>>2]|0;
 HEAP32[$hlen3>>2] = $24;
 while(1) {
  $25 = HEAP32[$0>>2]|0;
  $26 = (($25) + 4|0);
  HEAP32[$0>>2] = $26;
  $27 = HEAP32[$25>>2]|0;
  HEAP32[$x0>>2] = $27;
  $28 = HEAP32[$0>>2]|0;
  $29 = (($28) + 4|0);
  HEAP32[$0>>2] = $29;
  $30 = HEAP32[$28>>2]|0;
  HEAP32[$x1>>2] = $30;
  $31 = HEAP32[$x0>>2]|0;
  $32 = HEAP32[$xlen>>2]|0;
  $33 = Math_imul($31, $32)|0;
  $34 = HEAP32[$x1>>2]|0;
  $35 = (($33) + ($34))|0;
  HEAP32[$x>>2] = $35;
  $36 = HEAP32[$x>>2]|0;
  $37 = HEAP32[$hlen1>>2]|0;
  $38 = (($37) + ($36)|0);
  $39 = HEAP8[$38>>0]|0;
  $40 = $39&255;
  $41 = HEAP32[$sum1>>2]|0;
  $42 = (($41) + ($40))|0;
  HEAP32[$sum1>>2] = $42;
  $43 = HEAP32[$x>>2]|0;
  $44 = HEAP32[$hlen2>>2]|0;
  $45 = (($44) + ($43)|0);
  $46 = HEAP8[$45>>0]|0;
  $47 = $46&255;
  $48 = HEAP32[$sum2>>2]|0;
  $49 = (($48) + ($47))|0;
  HEAP32[$sum2>>2] = $49;
  $50 = HEAP32[$x>>2]|0;
  $51 = HEAP32[$hlen3>>2]|0;
  $52 = (($51) + ($50)|0);
  $53 = HEAP8[$52>>0]|0;
  $54 = $53&255;
  $55 = HEAP32[$sum3>>2]|0;
  $56 = (($55) + ($54))|0;
  HEAP32[$sum3>>2] = $56;
  $57 = HEAP32[$0>>2]|0;
  $58 = HEAP32[$1>>2]|0;
  $59 = ($57>>>0)<($58>>>0);
  if (!($59)) {
   break;
  }
 }
 $60 = HEAP32[$t1>>2]|0;
 HEAP32[$t>>2] = $60;
 $61 = HEAP32[$sum1>>2]|0;
 $62 = HEAP32[$sum2>>2]|0;
 $63 = ($61>>>0)>($62>>>0);
 if ($63) {
  $64 = HEAP32[$sum2>>2]|0;
  HEAP32[$sum1>>2] = $64;
  $65 = HEAP32[$t>>2]|0;
  $66 = (($65) + 1)|0;
  HEAP32[$t>>2] = $66;
 }
 $67 = HEAP32[$sum1>>2]|0;
 $68 = HEAP32[$sum3>>2]|0;
 $69 = ($67>>>0)>($68>>>0);
 if (!($69)) {
  $73 = HEAP32[$sum1>>2]|0;
  $74 = HEAP32[$3>>2]|0;
  $75 = HEAP32[$74>>2]|0;
  $76 = (($75) + ($73))|0;
  HEAP32[$74>>2] = $76;
  $77 = HEAP32[$t>>2]|0;
  STACKTOP = sp;return ($77|0);
 }
 $70 = HEAP32[$sum3>>2]|0;
 HEAP32[$sum1>>2] = $70;
 $71 = HEAP32[$t1>>2]|0;
 $72 = (($71) + 2)|0;
 HEAP32[$t>>2] = $72;
 $73 = HEAP32[$sum1>>2]|0;
 $74 = HEAP32[$3>>2]|0;
 $75 = HEAP32[$74>>2]|0;
 $76 = (($75) + ($73))|0;
 HEAP32[$74>>2] = $76;
 $77 = HEAP32[$t>>2]|0;
 STACKTOP = sp;return ($77|0);
}
function _quantize_lines_xrpow($l,$istep,$xp,$pi) {
 $l = $l|0;
 $istep = +$istep;
 $xp = $xp|0;
 $pi = $pi|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0.0, $101 = 0.0, $102 = 0.0, $103 = 0.0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0.0, $128 = 0, $129 = 0.0, $13 = 0, $130 = 0.0, $131 = 0.0, $132 = 0.0, $133 = 0;
 var $134 = 0, $135 = 0.0, $136 = 0.0, $137 = 0.0, $138 = 0.0, $139 = 0.0, $14 = 0.0, $140 = 0.0, $141 = 0.0, $142 = 0, $143 = 0.0, $144 = 0.0, $145 = 0.0, $146 = 0.0, $147 = 0, $148 = 0, $149 = 0.0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0.0, $155 = 0.0, $156 = 0.0, $157 = 0.0, $158 = 0, $159 = 0.0, $16 = 0.0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0.0, $166 = 0.0, $167 = 0.0, $168 = 0.0, $169 = 0, $17 = 0.0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0, $21 = 0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0, $27 = 0, $28 = 0.0;
 var $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0, $33 = 0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0;
 var $47 = 0, $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0, $53 = 0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0, $59 = 0, $6 = 0, $60 = 0.0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0, $7 = 0, $70 = 0.0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0.0, $77 = 0.0, $78 = 0.0, $79 = 0.0, $8 = 0, $80 = 0, $81 = 0, $82 = 0.0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0.0, $89 = 0.0, $9 = 0, $90 = 0.0, $91 = 0.0, $92 = 0, $93 = 0, $94 = 0.0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $fi = 0, $remaining = 0;
 var $x0 = 0, $x01 = 0, $x1 = 0, $x12 = 0, $x2 = 0, $x3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0;
 $0 = sp + 68|0;
 $1 = sp + 64|0;
 $2 = sp + 60|0;
 $3 = sp + 56|0;
 $fi = sp + 52|0;
 $remaining = sp + 48|0;
 $x0 = sp + 40|0;
 $x1 = sp + 32|0;
 $x2 = sp + 24|0;
 $x3 = sp + 16|0;
 $x01 = sp + 8|0;
 $x12 = sp;
 HEAP32[$0>>2] = $l;
 HEAPF32[$1>>2] = $istep;
 HEAP32[$2>>2] = $xp;
 HEAP32[$3>>2] = $pi;
 $4 = HEAP32[$3>>2]|0;
 HEAP32[$fi>>2] = $4;
 $5 = HEAP32[$0>>2]|0;
 $6 = $5 >>> 1;
 HEAP32[$0>>2] = $6;
 $7 = HEAP32[$0>>2]|0;
 $8 = (($7>>>0) % 2)&-1;
 HEAP32[$remaining>>2] = $8;
 $9 = HEAP32[$0>>2]|0;
 $10 = $9 >>> 1;
 HEAP32[$0>>2] = $10;
 while(1) {
  $11 = HEAP32[$0>>2]|0;
  $12 = (($11) + -1)|0;
  HEAP32[$0>>2] = $12;
  $13 = ($11|0)!=(0);
  if (!($13)) {
   break;
  }
  $14 = +HEAPF32[$1>>2];
  $15 = HEAP32[$2>>2]|0;
  $16 = +HEAPF32[$15>>2];
  $17 = $14 * $16;
  $18 = $17;
  HEAPF64[$x0>>3] = $18;
  $19 = +HEAPF32[$1>>2];
  $20 = HEAP32[$2>>2]|0;
  $21 = (($20) + 4|0);
  $22 = +HEAPF32[$21>>2];
  $23 = $19 * $22;
  $24 = $23;
  HEAPF64[$x1>>3] = $24;
  $25 = +HEAPF32[$1>>2];
  $26 = HEAP32[$2>>2]|0;
  $27 = (($26) + 8|0);
  $28 = +HEAPF32[$27>>2];
  $29 = $25 * $28;
  $30 = $29;
  HEAPF64[$x2>>3] = $30;
  $31 = +HEAPF32[$1>>2];
  $32 = HEAP32[$2>>2]|0;
  $33 = (($32) + 12|0);
  $34 = +HEAPF32[$33>>2];
  $35 = $31 * $34;
  $36 = $35;
  HEAPF64[$x3>>3] = $36;
  $37 = +HEAPF64[$x0>>3];
  $38 = $37 + 8388608.0;
  HEAPF64[$x0>>3] = $38;
  $39 = +HEAPF64[$x0>>3];
  $40 = $39;
  $41 = HEAP32[$fi>>2]|0;
  HEAPF32[$41>>2] = $40;
  $42 = +HEAPF64[$x1>>3];
  $43 = $42 + 8388608.0;
  HEAPF64[$x1>>3] = $43;
  $44 = +HEAPF64[$x1>>3];
  $45 = $44;
  $46 = HEAP32[$fi>>2]|0;
  $47 = (($46) + 4|0);
  HEAPF32[$47>>2] = $45;
  $48 = +HEAPF64[$x2>>3];
  $49 = $48 + 8388608.0;
  HEAPF64[$x2>>3] = $49;
  $50 = +HEAPF64[$x2>>3];
  $51 = $50;
  $52 = HEAP32[$fi>>2]|0;
  $53 = (($52) + 8|0);
  HEAPF32[$53>>2] = $51;
  $54 = +HEAPF64[$x3>>3];
  $55 = $54 + 8388608.0;
  HEAPF64[$x3>>3] = $55;
  $56 = +HEAPF64[$x3>>3];
  $57 = $56;
  $58 = HEAP32[$fi>>2]|0;
  $59 = (($58) + 12|0);
  HEAPF32[$59>>2] = $57;
  $60 = +HEAPF64[$x0>>3];
  $61 = HEAP32[$fi>>2]|0;
  $62 = HEAP32[$61>>2]|0;
  $63 = (($62) - 1258291200)|0;
  $64 = (56136 + ($63<<2)|0);
  $65 = +HEAPF32[$64>>2];
  $66 = $65;
  $67 = $60 + $66;
  $68 = $67;
  $69 = HEAP32[$fi>>2]|0;
  HEAPF32[$69>>2] = $68;
  $70 = +HEAPF64[$x1>>3];
  $71 = HEAP32[$fi>>2]|0;
  $72 = (($71) + 4|0);
  $73 = HEAP32[$72>>2]|0;
  $74 = (($73) - 1258291200)|0;
  $75 = (56136 + ($74<<2)|0);
  $76 = +HEAPF32[$75>>2];
  $77 = $76;
  $78 = $70 + $77;
  $79 = $78;
  $80 = HEAP32[$fi>>2]|0;
  $81 = (($80) + 4|0);
  HEAPF32[$81>>2] = $79;
  $82 = +HEAPF64[$x2>>3];
  $83 = HEAP32[$fi>>2]|0;
  $84 = (($83) + 8|0);
  $85 = HEAP32[$84>>2]|0;
  $86 = (($85) - 1258291200)|0;
  $87 = (56136 + ($86<<2)|0);
  $88 = +HEAPF32[$87>>2];
  $89 = $88;
  $90 = $82 + $89;
  $91 = $90;
  $92 = HEAP32[$fi>>2]|0;
  $93 = (($92) + 8|0);
  HEAPF32[$93>>2] = $91;
  $94 = +HEAPF64[$x3>>3];
  $95 = HEAP32[$fi>>2]|0;
  $96 = (($95) + 12|0);
  $97 = HEAP32[$96>>2]|0;
  $98 = (($97) - 1258291200)|0;
  $99 = (56136 + ($98<<2)|0);
  $100 = +HEAPF32[$99>>2];
  $101 = $100;
  $102 = $94 + $101;
  $103 = $102;
  $104 = HEAP32[$fi>>2]|0;
  $105 = (($104) + 12|0);
  HEAPF32[$105>>2] = $103;
  $106 = HEAP32[$fi>>2]|0;
  $107 = HEAP32[$106>>2]|0;
  $108 = (($107) - 1258291200)|0;
  HEAP32[$106>>2] = $108;
  $109 = HEAP32[$fi>>2]|0;
  $110 = (($109) + 4|0);
  $111 = HEAP32[$110>>2]|0;
  $112 = (($111) - 1258291200)|0;
  HEAP32[$110>>2] = $112;
  $113 = HEAP32[$fi>>2]|0;
  $114 = (($113) + 8|0);
  $115 = HEAP32[$114>>2]|0;
  $116 = (($115) - 1258291200)|0;
  HEAP32[$114>>2] = $116;
  $117 = HEAP32[$fi>>2]|0;
  $118 = (($117) + 12|0);
  $119 = HEAP32[$118>>2]|0;
  $120 = (($119) - 1258291200)|0;
  HEAP32[$118>>2] = $120;
  $121 = HEAP32[$fi>>2]|0;
  $122 = (($121) + 16|0);
  HEAP32[$fi>>2] = $122;
  $123 = HEAP32[$2>>2]|0;
  $124 = (($123) + 16|0);
  HEAP32[$2>>2] = $124;
 }
 $125 = HEAP32[$remaining>>2]|0;
 $126 = ($125|0)!=(0);
 if (!($126)) {
  STACKTOP = sp;return;
 }
 $127 = +HEAPF32[$1>>2];
 $128 = HEAP32[$2>>2]|0;
 $129 = +HEAPF32[$128>>2];
 $130 = $127 * $129;
 $131 = $130;
 HEAPF64[$x01>>3] = $131;
 $132 = +HEAPF32[$1>>2];
 $133 = HEAP32[$2>>2]|0;
 $134 = (($133) + 4|0);
 $135 = +HEAPF32[$134>>2];
 $136 = $132 * $135;
 $137 = $136;
 HEAPF64[$x12>>3] = $137;
 $138 = +HEAPF64[$x01>>3];
 $139 = $138 + 8388608.0;
 HEAPF64[$x01>>3] = $139;
 $140 = +HEAPF64[$x01>>3];
 $141 = $140;
 $142 = HEAP32[$fi>>2]|0;
 HEAPF32[$142>>2] = $141;
 $143 = +HEAPF64[$x12>>3];
 $144 = $143 + 8388608.0;
 HEAPF64[$x12>>3] = $144;
 $145 = +HEAPF64[$x12>>3];
 $146 = $145;
 $147 = HEAP32[$fi>>2]|0;
 $148 = (($147) + 4|0);
 HEAPF32[$148>>2] = $146;
 $149 = +HEAPF64[$x01>>3];
 $150 = HEAP32[$fi>>2]|0;
 $151 = HEAP32[$150>>2]|0;
 $152 = (($151) - 1258291200)|0;
 $153 = (56136 + ($152<<2)|0);
 $154 = +HEAPF32[$153>>2];
 $155 = $154;
 $156 = $149 + $155;
 $157 = $156;
 $158 = HEAP32[$fi>>2]|0;
 HEAPF32[$158>>2] = $157;
 $159 = +HEAPF64[$x12>>3];
 $160 = HEAP32[$fi>>2]|0;
 $161 = (($160) + 4|0);
 $162 = HEAP32[$161>>2]|0;
 $163 = (($162) - 1258291200)|0;
 $164 = (56136 + ($163<<2)|0);
 $165 = +HEAPF32[$164>>2];
 $166 = $165;
 $167 = $159 + $166;
 $168 = $167;
 $169 = HEAP32[$fi>>2]|0;
 $170 = (($169) + 4|0);
 HEAPF32[$170>>2] = $168;
 $171 = HEAP32[$fi>>2]|0;
 $172 = HEAP32[$171>>2]|0;
 $173 = (($172) - 1258291200)|0;
 HEAP32[$171>>2] = $173;
 $174 = HEAP32[$fi>>2]|0;
 $175 = (($174) + 4|0);
 $176 = HEAP32[$175>>2]|0;
 $177 = (($176) - 1258291200)|0;
 HEAP32[$175>>2] = $177;
 STACKTOP = sp;return;
}
function _quantize_lines_xrpow_01($l,$istep,$xr,$ix) {
 $l = $l|0;
 $istep = +$istep;
 $xr = $xr|0;
 $ix = $ix|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0, $22 = 0, $23 = 0.0, $24 = 0.0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0.0, $5 = 0.0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $compareval0 = 0;
 var $i = 0, $ix_0 = 0, $ix_1 = 0, $xr_0 = 0, $xr_1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $0 = sp + 36|0;
 $1 = sp + 32|0;
 $2 = sp + 28|0;
 $3 = sp + 24|0;
 $compareval0 = sp + 20|0;
 $i = sp + 16|0;
 $xr_0 = sp + 12|0;
 $xr_1 = sp + 8|0;
 $ix_0 = sp + 4|0;
 $ix_1 = sp;
 HEAP32[$0>>2] = $l;
 HEAPF32[$1>>2] = $istep;
 HEAP32[$2>>2] = $xr;
 HEAP32[$3>>2] = $ix;
 $4 = +HEAPF32[$1>>2];
 $5 = 0.594599962234497070313 / $4;
 HEAPF32[$compareval0>>2] = $5;
 HEAP32[$i>>2] = 0;
 while(1) {
  $6 = HEAP32[$i>>2]|0;
  $7 = HEAP32[$0>>2]|0;
  $8 = ($6>>>0)<($7>>>0);
  if (!($8)) {
   break;
  }
  $9 = HEAP32[$i>>2]|0;
  $10 = (($9) + 0)|0;
  $11 = HEAP32[$2>>2]|0;
  $12 = (($11) + ($10<<2)|0);
  $13 = +HEAPF32[$12>>2];
  HEAPF32[$xr_0>>2] = $13;
  $14 = HEAP32[$i>>2]|0;
  $15 = (($14) + 1)|0;
  $16 = HEAP32[$2>>2]|0;
  $17 = (($16) + ($15<<2)|0);
  $18 = +HEAPF32[$17>>2];
  HEAPF32[$xr_1>>2] = $18;
  $19 = +HEAPF32[$compareval0>>2];
  $20 = +HEAPF32[$xr_0>>2];
  $21 = $19 > $20;
  $22 = $21 ? 0 : 1;
  HEAP32[$ix_0>>2] = $22;
  $23 = +HEAPF32[$compareval0>>2];
  $24 = +HEAPF32[$xr_1>>2];
  $25 = $23 > $24;
  $26 = $25 ? 0 : 1;
  HEAP32[$ix_1>>2] = $26;
  $27 = HEAP32[$ix_0>>2]|0;
  $28 = HEAP32[$i>>2]|0;
  $29 = (($28) + 0)|0;
  $30 = HEAP32[$3>>2]|0;
  $31 = (($30) + ($29<<2)|0);
  HEAP32[$31>>2] = $27;
  $32 = HEAP32[$ix_1>>2]|0;
  $33 = HEAP32[$i>>2]|0;
  $34 = (($33) + 1)|0;
  $35 = HEAP32[$3>>2]|0;
  $36 = (($35) + ($34<<2)|0);
  HEAP32[$36>>2] = $32;
  $37 = HEAP32[$i>>2]|0;
  $38 = (($37) + 2)|0;
  HEAP32[$i>>2] = $38;
 }
 STACKTOP = sp;return;
}
function _free_id3tag($gfc) {
 $gfc = $gfc|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $node = 0, $p = 0, $q = 0, $r = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = sp + 16|0;
 $node = sp + 12|0;
 $p = sp + 8|0;
 $q = sp + 4|0;
 $r = sp;
 HEAP32[$0>>2] = $gfc;
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 85696|0);
 $3 = (($2) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)!=(0|0);
 if ($5) {
  $6 = HEAP32[$0>>2]|0;
  $7 = (($6) + 85696|0);
  $8 = (($7) + 8|0);
  $9 = HEAP32[$8>>2]|0;
  _free($9);
  $10 = HEAP32[$0>>2]|0;
  $11 = (($10) + 85696|0);
  $12 = (($11) + 8|0);
  HEAP32[$12>>2] = 0;
 }
 $13 = HEAP32[$0>>2]|0;
 $14 = (($13) + 85696|0);
 $15 = (($14) + 12|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = ($16|0)!=(0|0);
 if ($17) {
  $18 = HEAP32[$0>>2]|0;
  $19 = (($18) + 85696|0);
  $20 = (($19) + 12|0);
  $21 = HEAP32[$20>>2]|0;
  _free($21);
  $22 = HEAP32[$0>>2]|0;
  $23 = (($22) + 85696|0);
  $24 = (($23) + 12|0);
  HEAP32[$24>>2] = 0;
 }
 $25 = HEAP32[$0>>2]|0;
 $26 = (($25) + 85696|0);
 $27 = (($26) + 16|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = ($28|0)!=(0|0);
 if ($29) {
  $30 = HEAP32[$0>>2]|0;
  $31 = (($30) + 85696|0);
  $32 = (($31) + 16|0);
  $33 = HEAP32[$32>>2]|0;
  _free($33);
  $34 = HEAP32[$0>>2]|0;
  $35 = (($34) + 85696|0);
  $36 = (($35) + 16|0);
  HEAP32[$36>>2] = 0;
 }
 $37 = HEAP32[$0>>2]|0;
 $38 = (($37) + 85696|0);
 $39 = (($38) + 20|0);
 $40 = HEAP32[$39>>2]|0;
 $41 = ($40|0)!=(0|0);
 if ($41) {
  $42 = HEAP32[$0>>2]|0;
  $43 = (($42) + 85696|0);
  $44 = (($43) + 20|0);
  $45 = HEAP32[$44>>2]|0;
  _free($45);
  $46 = HEAP32[$0>>2]|0;
  $47 = (($46) + 85696|0);
  $48 = (($47) + 20|0);
  HEAP32[$48>>2] = 0;
 }
 $49 = HEAP32[$0>>2]|0;
 $50 = (($49) + 85696|0);
 $51 = (($50) + 32|0);
 $52 = HEAP32[$51>>2]|0;
 $53 = ($52|0)!=(0|0);
 if ($53) {
  $54 = HEAP32[$0>>2]|0;
  $55 = (($54) + 85696|0);
  $56 = (($55) + 32|0);
  $57 = HEAP32[$56>>2]|0;
  _free($57);
  $58 = HEAP32[$0>>2]|0;
  $59 = (($58) + 85696|0);
  $60 = (($59) + 32|0);
  HEAP32[$60>>2] = 0;
  $61 = HEAP32[$0>>2]|0;
  $62 = (($61) + 85696|0);
  $63 = (($62) + 36|0);
  HEAP32[$63>>2] = 0;
  $64 = HEAP32[$0>>2]|0;
  $65 = (($64) + 85696|0);
  $66 = (($65) + 44|0);
  HEAP32[$66>>2] = 0;
 }
 $67 = HEAP32[$0>>2]|0;
 $68 = (($67) + 85696|0);
 $69 = (($68) + 48|0);
 $70 = HEAP32[$69>>2]|0;
 $71 = ($70|0)!=(0|0);
 if (!($71)) {
  STACKTOP = sp;return;
 }
 $72 = HEAP32[$0>>2]|0;
 $73 = (($72) + 85696|0);
 $74 = (($73) + 48|0);
 $75 = HEAP32[$74>>2]|0;
 HEAP32[$node>>2] = $75;
 while(1) {
  $76 = HEAP32[$node>>2]|0;
  $77 = (($76) + 12|0);
  $78 = HEAP32[$77>>2]|0;
  HEAP32[$p>>2] = $78;
  $79 = HEAP32[$node>>2]|0;
  $80 = (($79) + 24|0);
  $81 = HEAP32[$80>>2]|0;
  HEAP32[$q>>2] = $81;
  $82 = HEAP32[$node>>2]|0;
  HEAP32[$r>>2] = $82;
  $83 = HEAP32[$node>>2]|0;
  $84 = HEAP32[$83>>2]|0;
  HEAP32[$node>>2] = $84;
  $85 = HEAP32[$p>>2]|0;
  _free($85);
  $86 = HEAP32[$q>>2]|0;
  _free($86);
  $87 = HEAP32[$r>>2]|0;
  _free($87);
  $88 = HEAP32[$node>>2]|0;
  $89 = ($88|0)!=(0|0);
  if (!($89)) {
   break;
  }
 }
 $90 = HEAP32[$0>>2]|0;
 $91 = (($90) + 85696|0);
 $92 = (($91) + 48|0);
 HEAP32[$92>>2] = 0;
 $93 = HEAP32[$0>>2]|0;
 $94 = (($93) + 85696|0);
 $95 = (($94) + 52|0);
 HEAP32[$95>>2] = 0;
 STACKTOP = sp;return;
}
function _freegfc($gfc) {
 $gfc = $gfc|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $i = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp + 4|0;
 $i = sp;
 HEAP32[$0>>2] = $gfc;
 HEAP32[$i>>2] = 0;
 while(1) {
  $1 = HEAP32[$i>>2]|0;
  $2 = ($1|0)<=(640);
  if (!($2)) {
   break;
  }
  $3 = HEAP32[$i>>2]|0;
  $4 = HEAP32[$0>>2]|0;
  $5 = (($4) + 27824|0);
  $6 = (($5) + 9368|0);
  $7 = (($6) + ($3<<2)|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ($8|0)!=(0|0);
  if ($9) {
   $10 = HEAP32[$i>>2]|0;
   $11 = HEAP32[$0>>2]|0;
   $12 = (($11) + 27824|0);
   $13 = (($12) + 9368|0);
   $14 = (($13) + ($10<<2)|0);
   $15 = HEAP32[$14>>2]|0;
   _free($15);
   $16 = HEAP32[$i>>2]|0;
   $17 = HEAP32[$0>>2]|0;
   $18 = (($17) + 27824|0);
   $19 = (($18) + 9368|0);
   $20 = (($19) + ($16<<2)|0);
   HEAP32[$20>>2] = 0;
  }
  $21 = HEAP32[$i>>2]|0;
  $22 = (($21) + 1)|0;
  HEAP32[$i>>2] = $22;
 }
 $23 = HEAP32[$0>>2]|0;
 $24 = (($23) + 27824|0);
 $25 = (($24) + 9360|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = ($26|0)!=(0|0);
 if ($27) {
  $28 = HEAP32[$0>>2]|0;
  $29 = (($28) + 27824|0);
  $30 = (($29) + 9360|0);
  $31 = HEAP32[$30>>2]|0;
  _free($31);
  $32 = HEAP32[$0>>2]|0;
  $33 = (($32) + 27824|0);
  $34 = (($33) + 9360|0);
  HEAP32[$34>>2] = 0;
 }
 $35 = HEAP32[$0>>2]|0;
 $36 = (($35) + 27824|0);
 $37 = (($36) + 9360|0);
 $38 = (($37) + 4|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = ($39|0)!=(0|0);
 if ($40) {
  $41 = HEAP32[$0>>2]|0;
  $42 = (($41) + 27824|0);
  $43 = (($42) + 9360|0);
  $44 = (($43) + 4|0);
  $45 = HEAP32[$44>>2]|0;
  _free($45);
  $46 = HEAP32[$0>>2]|0;
  $47 = (($46) + 27824|0);
  $48 = (($47) + 9360|0);
  $49 = (($48) + 4|0);
  HEAP32[$49>>2] = 0;
 }
 $50 = HEAP32[$0>>2]|0;
 $51 = (($50) + 284|0);
 $52 = HEAP32[$51>>2]|0;
 $53 = ($52|0)!=(0|0);
 if ($53) {
  $54 = HEAP32[$0>>2]|0;
  $55 = (($54) + 284|0);
  $56 = HEAP32[$55>>2]|0;
  _free($56);
  $57 = HEAP32[$0>>2]|0;
  $58 = (($57) + 284|0);
  HEAP32[$58>>2] = 0;
 }
 $59 = HEAP32[$0>>2]|0;
 $60 = (($59) + 85760|0);
 $61 = (($60) + 20|0);
 $62 = HEAP32[$61>>2]|0;
 $63 = ($62|0)!=(0|0);
 if ($63) {
  $64 = HEAP32[$0>>2]|0;
  $65 = (($64) + 85760|0);
  $66 = (($65) + 20|0);
  $67 = HEAP32[$66>>2]|0;
  _free($67);
  $68 = HEAP32[$0>>2]|0;
  $69 = (($68) + 85760|0);
  $70 = (($69) + 20|0);
  HEAP32[$70>>2] = 0;
  $71 = HEAP32[$0>>2]|0;
  $72 = (($71) + 85760|0);
  $73 = (($72) + 16|0);
  HEAP32[$73>>2] = 0;
 }
 $74 = HEAP32[$0>>2]|0;
 $75 = (($74) + 85796|0);
 $76 = HEAP32[$75>>2]|0;
 $77 = ($76|0)!=(0|0);
 if ($77) {
  $78 = HEAP32[$0>>2]|0;
  $79 = (($78) + 85796|0);
  $80 = HEAP32[$79>>2]|0;
  _free($80);
 }
 $81 = HEAP32[$0>>2]|0;
 $82 = (($81) + 85676|0);
 $83 = HEAP32[$82>>2]|0;
 $84 = ($83|0)!=(0|0);
 if ($84) {
  $85 = HEAP32[$0>>2]|0;
  $86 = (($85) + 85676|0);
  $87 = HEAP32[$86>>2]|0;
  _free($87);
 }
 $88 = HEAP32[$0>>2]|0;
 $89 = (($88) + 27824|0);
 $90 = (($89) + 24328|0);
 $91 = HEAP32[$90>>2]|0;
 $92 = ($91|0)!=(0|0);
 if ($92) {
  $93 = HEAP32[$0>>2]|0;
  $94 = (($93) + 27824|0);
  $95 = (($94) + 24328|0);
  $96 = HEAP32[$95>>2]|0;
  _free($96);
 }
 $97 = HEAP32[$0>>2]|0;
 $98 = (($97) + 27824|0);
 $99 = (($98) + 24332|0);
 $100 = HEAP32[$99>>2]|0;
 $101 = ($100|0)!=(0|0);
 if ($101) {
  $102 = HEAP32[$0>>2]|0;
  $103 = (($102) + 27824|0);
  $104 = (($103) + 24332|0);
  $105 = HEAP32[$104>>2]|0;
  _free($105);
 }
 $106 = HEAP32[$0>>2]|0;
 _free_id3tag($106);
 $107 = HEAP32[$0>>2]|0;
 $108 = (($107) + 85808|0);
 $109 = HEAP32[$108>>2]|0;
 $110 = ($109|0)!=(0|0);
 if (!($110)) {
  $116 = HEAP32[$0>>2]|0;
  _free_global_data($116);
  $117 = HEAP32[$0>>2]|0;
  _free($117);
  STACKTOP = sp;return;
 }
 $111 = HEAP32[$0>>2]|0;
 $112 = (($111) + 85808|0);
 $113 = HEAP32[$112>>2]|0;
 (_hip_decode_exit($113)|0);
 $114 = HEAP32[$0>>2]|0;
 $115 = (($114) + 85808|0);
 HEAP32[$115>>2] = 0;
 $116 = HEAP32[$0>>2]|0;
 _free_global_data($116);
 $117 = HEAP32[$0>>2]|0;
 _free($117);
 STACKTOP = sp;return;
}
function _free_global_data($gfc) {
 $gfc = $gfc|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp;
 HEAP32[$0>>2] = $gfc;
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)!=(0|0);
 if (!($2)) {
  STACKTOP = sp;return;
 }
 $3 = HEAP32[$0>>2]|0;
 $4 = (($3) + 85800|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)!=(0|0);
 if (!($6)) {
  STACKTOP = sp;return;
 }
 $7 = HEAP32[$0>>2]|0;
 $8 = (($7) + 85800|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (($9) + 2156|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($11|0)!=(0|0);
 if ($12) {
  $13 = HEAP32[$0>>2]|0;
  $14 = (($13) + 85800|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = (($15) + 2156|0);
  $17 = HEAP32[$16>>2]|0;
  _free($17);
 }
 $18 = HEAP32[$0>>2]|0;
 $19 = (($18) + 85800|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = (($20) + 2160|0);
 $22 = (($21) + 2156|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = ($23|0)!=(0|0);
 if ($24) {
  $25 = HEAP32[$0>>2]|0;
  $26 = (($25) + 85800|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = (($27) + 2160|0);
  $29 = (($28) + 2156|0);
  $30 = HEAP32[$29>>2]|0;
  _free($30);
 }
 $31 = HEAP32[$0>>2]|0;
 $32 = (($31) + 85800|0);
 $33 = HEAP32[$32>>2]|0;
 _free($33);
 $34 = HEAP32[$0>>2]|0;
 $35 = (($34) + 85800|0);
 HEAP32[$35>>2] = 0;
 STACKTOP = sp;return;
}
function _ATHformula($cfg,$f) {
 $cfg = $cfg|0;
 $f = +$f;
 var $0 = 0, $1 = 0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0, $21 = 0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0;
 var $3 = 0, $4 = 0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, $ath = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp + 8|0;
 $1 = sp + 4|0;
 $ath = sp;
 HEAP32[$0>>2] = $cfg;
 HEAPF32[$1>>2] = $f;
 $2 = HEAP32[$0>>2]|0;
 $3 = (($2) + 192|0);
 $4 = HEAP32[$3>>2]|0;
 switch ($4|0) {
 case 5:  {
  $19 = +HEAPF32[$1>>2];
  $20 = HEAP32[$0>>2]|0;
  $21 = (($20) + 188|0);
  $22 = +HEAPF32[$21>>2];
  $23 = (+_ATHformula_GB($19,$22,3.41000008583068847656,16.1000003814697265625));
  HEAPF32[$ath>>2] = $23;
  break;
 }
 case 0:  {
  $5 = +HEAPF32[$1>>2];
  $6 = (+_ATHformula_GB($5,9.0,0.100000001490116119385,24.0));
  HEAPF32[$ath>>2] = $6;
  break;
 }
 case 3:  {
  $11 = +HEAPF32[$1>>2];
  $12 = (+_ATHformula_GB($11,1.0,0.100000001490116119385,24.0));
  $13 = $12 + 6.0;
  HEAPF32[$ath>>2] = $13;
  break;
 }
 case 2:  {
  $9 = +HEAPF32[$1>>2];
  $10 = (+_ATHformula_GB($9,0.0,0.100000001490116119385,24.0));
  HEAPF32[$ath>>2] = $10;
  break;
 }
 case 4:  {
  $14 = +HEAPF32[$1>>2];
  $15 = HEAP32[$0>>2]|0;
  $16 = (($15) + 188|0);
  $17 = +HEAPF32[$16>>2];
  $18 = (+_ATHformula_GB($14,$17,0.100000001490116119385,24.0));
  HEAPF32[$ath>>2] = $18;
  break;
 }
 case 1:  {
  $7 = +HEAPF32[$1>>2];
  $8 = (+_ATHformula_GB($7,-1.0,0.100000001490116119385,24.0));
  HEAPF32[$ath>>2] = $8;
  break;
 }
 default: {
  $24 = +HEAPF32[$1>>2];
  $25 = (+_ATHformula_GB($24,0.0,0.100000001490116119385,24.0));
  HEAPF32[$ath>>2] = $25;
 }
 }
 $26 = +HEAPF32[$ath>>2];
 STACKTOP = sp;return (+$26);
}
function _ATHformula_GB($f,$value,$f_min,$f_max) {
 $f = +$f;
 $value = +$value;
 $f_min = +$f_min;
 $f_max = +$f_max;
 var $0 = 0, $1 = 0, $10 = 0.0, $11 = 0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0;
 var $27 = 0.0, $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0.0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0;
 var $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0.0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $6 = 0, $7 = 0.0, $8 = 0.0, $9 = 0.0, $ath = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = sp + 16|0;
 $1 = sp + 12|0;
 $2 = sp + 8|0;
 $3 = sp + 4|0;
 $ath = sp;
 HEAPF32[$0>>2] = $f;
 HEAPF32[$1>>2] = $value;
 HEAPF32[$2>>2] = $f_min;
 HEAPF32[$3>>2] = $f_max;
 $4 = +HEAPF32[$0>>2];
 $5 = $4;
 $6 = $5 < -0.299999999999999988898;
 if ($6) {
  HEAPF32[$0>>2] = 3410.0;
 }
 $7 = +HEAPF32[$0>>2];
 $8 = $7 / 1000.0;
 HEAPF32[$0>>2] = $8;
 $9 = +HEAPF32[$2>>2];
 $10 = +HEAPF32[$0>>2];
 $11 = $9 > $10;
 $12 = +HEAPF32[$2>>2];
 $13 = +HEAPF32[$0>>2];
 $14 = $11 ? $12 : $13;
 HEAPF32[$0>>2] = $14;
 $15 = +HEAPF32[$3>>2];
 $16 = +HEAPF32[$0>>2];
 $17 = $15 < $16;
 $18 = +HEAPF32[$3>>2];
 $19 = +HEAPF32[$0>>2];
 $20 = $17 ? $18 : $19;
 HEAPF32[$0>>2] = $20;
 $21 = +HEAPF32[$0>>2];
 $22 = $21;
 $23 = (+Math_pow((+$22),-0.800000000000000044408));
 $24 = 3.64000000000000012434 * $23;
 $25 = +HEAPF32[$0>>2];
 $26 = $25;
 $27 = $26 - 3.39999999999999991118;
 $28 = (+Math_pow((+$27),2.0));
 $29 = -0.599999999999999977796 * $28;
 $30 = (+Math_exp((+$29)));
 $31 = 6.79999999999999982236 * $30;
 $32 = $24 - $31;
 $33 = +HEAPF32[$0>>2];
 $34 = $33;
 $35 = $34 - 8.69999999999999928946;
 $36 = (+Math_pow((+$35),2.0));
 $37 = -0.149999999999999994449 * $36;
 $38 = (+Math_exp((+$37)));
 $39 = 6.0 * $38;
 $40 = $32 + $39;
 $41 = +HEAPF32[$1>>2];
 $42 = $41;
 $43 = 0.0400000000000000008327 * $42;
 $44 = 0.599999999999999977796 + $43;
 $45 = $44 * 0.00100000000000000002082;
 $46 = +HEAPF32[$0>>2];
 $47 = $46;
 $48 = (+Math_pow((+$47),4.0));
 $49 = $45 * $48;
 $50 = $40 + $49;
 $51 = $50;
 HEAPF32[$ath>>2] = $51;
 $52 = +HEAPF32[$ath>>2];
 STACKTOP = sp;return (+$52);
}
function _freq2bark($freq) {
 $freq = +$freq;
 var $0 = 0, $1 = 0.0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0;
 var $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp;
 HEAPF32[$0>>2] = $freq;
 $1 = +HEAPF32[$0>>2];
 $2 = $1 < 0.0;
 if ($2) {
  HEAPF32[$0>>2] = 0.0;
 }
 $3 = +HEAPF32[$0>>2];
 $4 = $3;
 $5 = $4 * 0.00100000000000000002082;
 $6 = $5;
 HEAPF32[$0>>2] = $6;
 $7 = +HEAPF32[$0>>2];
 $8 = $7;
 $9 = 0.760000000000000008881 * $8;
 $10 = (+Math_atan((+$9)));
 $11 = 13.0 * $10;
 $12 = +HEAPF32[$0>>2];
 $13 = +HEAPF32[$0>>2];
 $14 = $12 * $13;
 $15 = $14;
 $16 = $15 / 56.25;
 $17 = (+Math_atan((+$16)));
 $18 = 3.5 * $17;
 $19 = $11 + $18;
 $20 = $19;
 STACKTOP = sp;return (+$20);
}
function _FindNearestBitrate($bRate,$version,$samplerate) {
 $bRate = $bRate|0;
 $version = $version|0;
 $samplerate = $samplerate|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $bitrate = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = sp + 16|0;
 $1 = sp + 12|0;
 $2 = sp + 8|0;
 $bitrate = sp + 4|0;
 $i = sp;
 HEAP32[$0>>2] = $bRate;
 HEAP32[$1>>2] = $version;
 HEAP32[$2>>2] = $samplerate;
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)<(16000);
 if ($4) {
  HEAP32[$1>>2] = 2;
 }
 $5 = HEAP32[$1>>2]|0;
 $6 = (97760 + ($5<<6)|0);
 $7 = (($6) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 HEAP32[$bitrate>>2] = $8;
 HEAP32[$i>>2] = 2;
 while(1) {
  $9 = HEAP32[$i>>2]|0;
  $10 = ($9|0)<=(14);
  if (!($10)) {
   break;
  }
  $11 = HEAP32[$i>>2]|0;
  $12 = HEAP32[$1>>2]|0;
  $13 = (97760 + ($12<<6)|0);
  $14 = (($13) + ($11<<2)|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = ($15|0)>(0);
  if ($16) {
   $17 = HEAP32[$i>>2]|0;
   $18 = HEAP32[$1>>2]|0;
   $19 = (97760 + ($18<<6)|0);
   $20 = (($19) + ($17<<2)|0);
   $21 = HEAP32[$20>>2]|0;
   $22 = HEAP32[$0>>2]|0;
   $23 = (($21) - ($22))|0;
   $24 = ($23|0)>(0);
   $25 = HEAP32[$i>>2]|0;
   $26 = HEAP32[$1>>2]|0;
   $27 = (97760 + ($26<<6)|0);
   $28 = (($27) + ($25<<2)|0);
   $29 = HEAP32[$28>>2]|0;
   $30 = HEAP32[$0>>2]|0;
   $31 = (($29) - ($30))|0;
   $32 = (0 - ($31))|0;
   $33 = $24 ? $31 : $32;
   $34 = HEAP32[$bitrate>>2]|0;
   $35 = HEAP32[$0>>2]|0;
   $36 = (($34) - ($35))|0;
   $37 = ($36|0)>(0);
   $38 = HEAP32[$bitrate>>2]|0;
   $39 = HEAP32[$0>>2]|0;
   $40 = (($38) - ($39))|0;
   $41 = (0 - ($40))|0;
   $42 = $37 ? $40 : $41;
   $43 = ($33|0)<($42|0);
   if ($43) {
    $44 = HEAP32[$i>>2]|0;
    $45 = HEAP32[$1>>2]|0;
    $46 = (97760 + ($45<<6)|0);
    $47 = (($46) + ($44<<2)|0);
    $48 = HEAP32[$47>>2]|0;
    HEAP32[$bitrate>>2] = $48;
   }
  }
  $49 = HEAP32[$i>>2]|0;
  $50 = (($49) + 1)|0;
  HEAP32[$i>>2] = $50;
 }
 $51 = HEAP32[$bitrate>>2]|0;
 STACKTOP = sp;return ($51|0);
}
function _nearestBitrateFullIndex($bitrate) {
 $bitrate = $bitrate|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $b = 0, $lower_range = 0, $lower_range_kbps = 0, $upper_range = 0, $upper_range_kbps = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = sp + 20|0;
 $1 = sp + 24|0;
 $lower_range = sp + 16|0;
 $lower_range_kbps = sp + 12|0;
 $upper_range = sp + 8|0;
 $upper_range_kbps = sp + 4|0;
 $b = sp;
 HEAP16[$1>>1] = $bitrate;
 HEAP32[$lower_range>>2] = 0;
 HEAP32[$lower_range_kbps>>2] = 0;
 HEAP32[$upper_range>>2] = 0;
 HEAP32[$upper_range_kbps>>2] = 0;
 $2 = HEAP32[((98936 + 64|0))>>2]|0;
 HEAP32[$upper_range_kbps>>2] = $2;
 HEAP32[$upper_range>>2] = 16;
 $3 = HEAP32[((98936 + 64|0))>>2]|0;
 HEAP32[$lower_range_kbps>>2] = $3;
 HEAP32[$lower_range>>2] = 16;
 HEAP32[$b>>2] = 0;
 while(1) {
  $4 = HEAP32[$b>>2]|0;
  $5 = ($4|0)<(16);
  if (!($5)) {
   break;
  }
  $6 = HEAP16[$1>>1]|0;
  $7 = $6&65535;
  $8 = HEAP32[$b>>2]|0;
  $9 = (($8) + 1)|0;
  $10 = (98936 + ($9<<2)|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ($7|0)>($11|0);
  if ($12) {
   $13 = HEAP16[$1>>1]|0;
   $14 = $13&65535;
   $21 = $14;
  } else {
   $15 = HEAP32[$b>>2]|0;
   $16 = (($15) + 1)|0;
   $17 = (98936 + ($16<<2)|0);
   $18 = HEAP32[$17>>2]|0;
   $21 = $18;
  }
  $19 = HEAP16[$1>>1]|0;
  $20 = $19&65535;
  $22 = ($21|0)!=($20|0);
  $23 = HEAP32[$b>>2]|0;
  $24 = (($23) + 1)|0;
  if ($22) {
   label = 7;
   break;
  }
  HEAP32[$b>>2] = $24;
 }
 if ((label|0) == 7) {
  $25 = (98936 + ($24<<2)|0);
  $26 = HEAP32[$25>>2]|0;
  HEAP32[$upper_range_kbps>>2] = $26;
  $27 = HEAP32[$b>>2]|0;
  $28 = (($27) + 1)|0;
  HEAP32[$upper_range>>2] = $28;
  $29 = HEAP32[$b>>2]|0;
  $30 = (98936 + ($29<<2)|0);
  $31 = HEAP32[$30>>2]|0;
  HEAP32[$lower_range_kbps>>2] = $31;
  $32 = HEAP32[$b>>2]|0;
  HEAP32[$lower_range>>2] = $32;
 }
 $33 = HEAP32[$upper_range_kbps>>2]|0;
 $34 = HEAP16[$1>>1]|0;
 $35 = $34&65535;
 $36 = (($33) - ($35))|0;
 $37 = HEAP16[$1>>1]|0;
 $38 = $37&65535;
 $39 = HEAP32[$lower_range_kbps>>2]|0;
 $40 = (($38) - ($39))|0;
 $41 = ($36|0)>($40|0);
 if ($41) {
  $42 = HEAP32[$lower_range>>2]|0;
  HEAP32[$0>>2] = $42;
  $44 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($44|0);
 } else {
  $43 = HEAP32[$upper_range>>2]|0;
  HEAP32[$0>>2] = $43;
  $44 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($44|0);
 }
 return 0|0;
}
function _map2MP3Frequency($freq) {
 $freq = $freq|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp + 4|0;
 $1 = sp;
 HEAP32[$1>>2] = $freq;
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)<=(8000);
 do {
  if ($3) {
   HEAP32[$0>>2] = 8000;
  } else {
   $4 = HEAP32[$1>>2]|0;
   $5 = ($4|0)<=(11025);
   if ($5) {
    HEAP32[$0>>2] = 11025;
    break;
   }
   $6 = HEAP32[$1>>2]|0;
   $7 = ($6|0)<=(12000);
   if ($7) {
    HEAP32[$0>>2] = 12000;
    break;
   }
   $8 = HEAP32[$1>>2]|0;
   $9 = ($8|0)<=(16000);
   if ($9) {
    HEAP32[$0>>2] = 16000;
    break;
   }
   $10 = HEAP32[$1>>2]|0;
   $11 = ($10|0)<=(22050);
   if ($11) {
    HEAP32[$0>>2] = 22050;
    break;
   }
   $12 = HEAP32[$1>>2]|0;
   $13 = ($12|0)<=(24000);
   if ($13) {
    HEAP32[$0>>2] = 24000;
    break;
   }
   $14 = HEAP32[$1>>2]|0;
   $15 = ($14|0)<=(32000);
   if ($15) {
    HEAP32[$0>>2] = 32000;
    break;
   }
   $16 = HEAP32[$1>>2]|0;
   $17 = ($16|0)<=(44100);
   if ($17) {
    HEAP32[$0>>2] = 44100;
    break;
   } else {
    HEAP32[$0>>2] = 48000;
    break;
   }
  }
 } while(0);
 $18 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($18|0);
}
function _BitrateIndex($bRate,$version,$samplerate) {
 $bRate = $bRate|0;
 $version = $version|0;
 $samplerate = $samplerate|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = sp + 16|0;
 $1 = sp + 12|0;
 $2 = sp + 8|0;
 $3 = sp + 4|0;
 $i = sp;
 HEAP32[$1>>2] = $bRate;
 HEAP32[$2>>2] = $version;
 HEAP32[$3>>2] = $samplerate;
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)<(16000);
 if ($5) {
  HEAP32[$2>>2] = 2;
 }
 HEAP32[$i>>2] = 0;
 while(1) {
  $6 = HEAP32[$i>>2]|0;
  $7 = ($6|0)<=(14);
  if (!($7)) {
   label = 9;
   break;
  }
  $8 = HEAP32[$i>>2]|0;
  $9 = HEAP32[$2>>2]|0;
  $10 = (97760 + ($9<<6)|0);
  $11 = (($10) + ($8<<2)|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = ($12|0)>(0);
  if ($13) {
   $14 = HEAP32[$i>>2]|0;
   $15 = HEAP32[$2>>2]|0;
   $16 = (97760 + ($15<<6)|0);
   $17 = (($16) + ($14<<2)|0);
   $18 = HEAP32[$17>>2]|0;
   $19 = HEAP32[$1>>2]|0;
   $20 = ($18|0)==($19|0);
   if ($20) {
    label = 7;
    break;
   }
  }
  $22 = HEAP32[$i>>2]|0;
  $23 = (($22) + 1)|0;
  HEAP32[$i>>2] = $23;
 }
 if ((label|0) == 7) {
  $21 = HEAP32[$i>>2]|0;
  HEAP32[$0>>2] = $21;
  $24 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($24|0);
 }
 else if ((label|0) == 9) {
  HEAP32[$0>>2] = -1;
  $24 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($24|0);
 }
 return 0|0;
}
function _SmpFrqIndex($sample_freq,$version) {
 $sample_freq = $sample_freq|0;
 $version = $version|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp + 8|0;
 $1 = sp + 4|0;
 $2 = sp;
 HEAP32[$1>>2] = $sample_freq;
 HEAP32[$2>>2] = $version;
 $3 = HEAP32[$1>>2]|0;
 do {
  if ((($3|0) == 44100)) {
   $4 = HEAP32[$2>>2]|0;
   HEAP32[$4>>2] = 1;
   HEAP32[$0>>2] = 0;
  } else if ((($3|0) == 8000)) {
   $12 = HEAP32[$2>>2]|0;
   HEAP32[$12>>2] = 0;
   HEAP32[$0>>2] = 2;
  } else if ((($3|0) == 24000)) {
   $8 = HEAP32[$2>>2]|0;
   HEAP32[$8>>2] = 0;
   HEAP32[$0>>2] = 1;
  } else if ((($3|0) == 32000)) {
   $6 = HEAP32[$2>>2]|0;
   HEAP32[$6>>2] = 1;
   HEAP32[$0>>2] = 2;
  } else if ((($3|0) == 16000)) {
   $9 = HEAP32[$2>>2]|0;
   HEAP32[$9>>2] = 0;
   HEAP32[$0>>2] = 2;
  } else if ((($3|0) == 22050)) {
   $7 = HEAP32[$2>>2]|0;
   HEAP32[$7>>2] = 0;
   HEAP32[$0>>2] = 0;
  } else if ((($3|0) == 48000)) {
   $5 = HEAP32[$2>>2]|0;
   HEAP32[$5>>2] = 1;
   HEAP32[$0>>2] = 1;
  } else if ((($3|0) == 12000)) {
   $11 = HEAP32[$2>>2]|0;
   HEAP32[$11>>2] = 0;
   HEAP32[$0>>2] = 1;
  } else if ((($3|0) == 11025)) {
   $10 = HEAP32[$2>>2]|0;
   HEAP32[$10>>2] = 0;
   HEAP32[$0>>2] = 0;
  } else {
   $13 = HEAP32[$2>>2]|0;
   HEAP32[$13>>2] = 0;
   HEAP32[$0>>2] = -1;
  }
 } while(0);
 $14 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($14|0);
}
function _isResamplingNecessary($cfg) {
 $cfg = $cfg|0;
 var $0 = 0, $1 = 0, $10 = 0.0, $11 = 0.0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0.0;
 var $5 = 0.0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $h = 0, $l = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp + 8|0;
 $l = sp + 4|0;
 $h = sp;
 HEAP32[$0>>2] = $cfg;
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 48|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (+($3|0));
 $5 = $4 * 0.999499976634979248046;
 $6 = (~~(($5)));
 HEAP32[$l>>2] = $6;
 $7 = HEAP32[$0>>2]|0;
 $8 = (($7) + 48|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (+($9|0));
 $11 = $10 * 1.00049996376037597656;
 $12 = (~~(($11)));
 HEAP32[$h>>2] = $12;
 $13 = HEAP32[$0>>2]|0;
 $14 = (($13) + 44|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = HEAP32[$l>>2]|0;
 $17 = ($15|0)<($16|0);
 if ($17) {
  $23 = 1;
  $24 = $23 ? 1 : 0;
  STACKTOP = sp;return ($24|0);
 }
 $18 = HEAP32[$h>>2]|0;
 $19 = HEAP32[$0>>2]|0;
 $20 = (($19) + 44|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = ($18|0)<($21|0);
 $23 = $22;
 $24 = $23 ? 1 : 0;
 STACKTOP = sp;return ($24|0);
}
function _fill_buffer($gfc,$mfbuf,$in_buffer,$nsamples,$n_in,$n_out) {
 $gfc = $gfc|0;
 $mfbuf = $mfbuf|0;
 $in_buffer = $in_buffer|0;
 $nsamples = $nsamples|0;
 $n_in = $n_in|0;
 $n_out = $n_out|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $8 = 0, $9 = 0, $cfg = 0, $ch = 0, $framesize = 0, $mf_size = 0, $nch = 0, $nout = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $0 = sp + 44|0;
 $1 = sp + 40|0;
 $2 = sp + 36|0;
 $3 = sp + 32|0;
 $4 = sp + 28|0;
 $5 = sp + 24|0;
 $cfg = sp + 20|0;
 $mf_size = sp + 16|0;
 $framesize = sp + 12|0;
 $nout = sp + 8|0;
 $ch = sp + 4|0;
 $nch = sp;
 HEAP32[$0>>2] = $gfc;
 HEAP32[$1>>2] = $mfbuf;
 HEAP32[$2>>2] = $in_buffer;
 HEAP32[$3>>2] = $nsamples;
 HEAP32[$4>>2] = $n_in;
 HEAP32[$5>>2] = $n_out;
 $6 = HEAP32[$0>>2]|0;
 $7 = (($6) + 16|0);
 HEAP32[$cfg>>2] = $7;
 $8 = HEAP32[$0>>2]|0;
 $9 = (($8) + 27824|0);
 $10 = (($9) + 56212|0);
 $11 = HEAP32[$10>>2]|0;
 HEAP32[$mf_size>>2] = $11;
 $12 = HEAP32[$cfg>>2]|0;
 $13 = (($12) + 60|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ($14*576)|0;
 HEAP32[$framesize>>2] = $15;
 HEAP32[$ch>>2] = 0;
 $16 = HEAP32[$cfg>>2]|0;
 $17 = (($16) + 56|0);
 $18 = HEAP32[$17>>2]|0;
 HEAP32[$nch>>2] = $18;
 $19 = HEAP32[$cfg>>2]|0;
 $20 = (_isResamplingNecessary($19)|0);
 $21 = ($20|0)!=(0);
 if ($21) {
  while(1) {
   $22 = HEAP32[$0>>2]|0;
   $23 = HEAP32[$mf_size>>2]|0;
   $24 = HEAP32[$ch>>2]|0;
   $25 = HEAP32[$1>>2]|0;
   $26 = (($25) + ($24<<2)|0);
   $27 = HEAP32[$26>>2]|0;
   $28 = (($27) + ($23<<2)|0);
   $29 = HEAP32[$framesize>>2]|0;
   $30 = HEAP32[$ch>>2]|0;
   $31 = HEAP32[$2>>2]|0;
   $32 = (($31) + ($30<<2)|0);
   $33 = HEAP32[$32>>2]|0;
   $34 = HEAP32[$3>>2]|0;
   $35 = HEAP32[$4>>2]|0;
   $36 = HEAP32[$ch>>2]|0;
   $37 = (_fill_buffer_resample($22,$28,$29,$33,$34,$35,$36)|0);
   HEAP32[$nout>>2] = $37;
   $38 = HEAP32[$ch>>2]|0;
   $39 = (($38) + 1)|0;
   HEAP32[$ch>>2] = $39;
   $40 = HEAP32[$nch>>2]|0;
   $41 = ($39|0)<($40|0);
   if (!($41)) {
    break;
   }
  }
  $42 = HEAP32[$nout>>2]|0;
  $43 = HEAP32[$5>>2]|0;
  HEAP32[$43>>2] = $42;
  STACKTOP = sp;return;
 }
 $44 = HEAP32[$framesize>>2]|0;
 $45 = HEAP32[$3>>2]|0;
 $46 = ($44|0)<($45|0);
 $47 = HEAP32[$framesize>>2]|0;
 $48 = HEAP32[$3>>2]|0;
 $49 = $46 ? $47 : $48;
 HEAP32[$nout>>2] = $49;
 while(1) {
  $50 = HEAP32[$mf_size>>2]|0;
  $51 = HEAP32[$ch>>2]|0;
  $52 = HEAP32[$1>>2]|0;
  $53 = (($52) + ($51<<2)|0);
  $54 = HEAP32[$53>>2]|0;
  $55 = (($54) + ($50<<2)|0);
  $56 = HEAP32[$ch>>2]|0;
  $57 = HEAP32[$2>>2]|0;
  $58 = (($57) + ($56<<2)|0);
  $59 = HEAP32[$58>>2]|0;
  $60 = HEAP32[$nout>>2]|0;
  $61 = $60<<2;
  _memcpy(($55|0),($59|0),($61|0))|0;
  $62 = HEAP32[$ch>>2]|0;
  $63 = (($62) + 1)|0;
  HEAP32[$ch>>2] = $63;
  $64 = HEAP32[$nch>>2]|0;
  $65 = ($63|0)<($64|0);
  if (!($65)) {
   break;
  }
 }
 $66 = HEAP32[$nout>>2]|0;
 $67 = HEAP32[$5>>2]|0;
 HEAP32[$67>>2] = $66;
 $68 = HEAP32[$nout>>2]|0;
 $69 = HEAP32[$4>>2]|0;
 HEAP32[$69>>2] = $68;
 STACKTOP = sp;return;
}
function _fill_buffer_resample($gfc,$outbuf,$desired_len,$inbuf,$len,$num_used,$ch) {
 $gfc = $gfc|0;
 $outbuf = $outbuf|0;
 $desired_len = $desired_len|0;
 $inbuf = $inbuf|0;
 $len = $len|0;
 $num_used = $num_used|0;
 $ch = $ch|0;
 var $$ = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0.0, $103 = 0.0, $104 = 0.0, $105 = 0.0, $106 = 0, $107 = 0.0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0.0, $116 = 0.0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0.0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0.0, $131 = 0.0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0.0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0.0, $148 = 0.0, $149 = 0.0, $15 = 0, $150 = 0.0;
 var $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0.0, $156 = 0.0, $157 = 0.0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0.0, $168 = 0, $169 = 0;
 var $17 = 0, $170 = 0, $171 = 0, $172 = 0.0, $173 = 0.0, $174 = 0, $175 = 0.0, $176 = 0, $177 = 0, $178 = 0.0, $179 = 0.0, $18 = 0.0, $180 = 0.0, $181 = 0.0, $182 = 0.0, $183 = 0.0, $184 = 0.0, $185 = 0, $186 = 0.0, $187 = 0.0;
 var $188 = 0, $189 = 0.0, $19 = 0.0, $190 = 0.0, $191 = 0.0, $192 = 0.0, $193 = 0.0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0;
 var $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0.0, $212 = 0, $213 = 0, $214 = 0, $215 = 0.0, $216 = 0.0, $217 = 0.0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0;
 var $223 = 0, $224 = 0, $225 = 0.0, $226 = 0.0, $227 = 0.0, $228 = 0.0, $229 = 0, $23 = 0, $230 = 0, $231 = 0.0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0;
 var $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0.0, $257 = 0, $258 = 0.0, $259 = 0.0;
 var $26 = 0, $260 = 0.0, $261 = 0.0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0.0, $267 = 0.0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0;
 var $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0.0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0;
 var $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0.0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0;
 var $313 = 0, $314 = 0.0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0, $48 = 0.0, $49 = 0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0.0, $93 = 0, $94 = 0.0, $95 = 0.0;
 var $96 = 0.0, $97 = 0.0, $98 = 0, $99 = 0, $BLACKSIZE = 0, $bpc = 0, $cfg = 0, $esv = 0, $fcn = 0, $filter_l = 0, $i = 0, $inbuf_old = 0, $intratio = 0, $j = 0, $j2 = 0, $joff = 0, $k = 0, $n_shift = 0, $offset = 0, $resample_ratio = 0;
 var $sum = 0, $time0 = 0, $xvalue = 0, $y = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0;
 $0 = sp + 112|0;
 $1 = sp + 108|0;
 $2 = sp + 104|0;
 $3 = sp + 100|0;
 $4 = sp + 96|0;
 $5 = sp + 92|0;
 $6 = sp + 88|0;
 $cfg = sp + 84|0;
 $esv = sp + 80|0;
 $resample_ratio = sp + 8|0;
 $BLACKSIZE = sp + 76|0;
 $offset = sp + 72|0;
 $xvalue = sp + 68|0;
 $i = sp + 64|0;
 $j = sp + 60|0;
 $k = sp + 56|0;
 $filter_l = sp + 52|0;
 $fcn = sp + 48|0;
 $intratio = sp + 44|0;
 $inbuf_old = sp + 40|0;
 $bpc = sp + 36|0;
 $sum = sp + 32|0;
 $time0 = sp;
 $joff = sp + 28|0;
 $j2 = sp + 24|0;
 $y = sp + 20|0;
 $n_shift = sp + 16|0;
 HEAP32[$0>>2] = $gfc;
 HEAP32[$1>>2] = $outbuf;
 HEAP32[$2>>2] = $desired_len;
 HEAP32[$3>>2] = $inbuf;
 HEAP32[$4>>2] = $len;
 HEAP32[$5>>2] = $num_used;
 HEAP32[$6>>2] = $ch;
 $7 = HEAP32[$0>>2]|0;
 $8 = (($7) + 16|0);
 HEAP32[$cfg>>2] = $8;
 $9 = HEAP32[$0>>2]|0;
 $10 = (($9) + 27824|0);
 HEAP32[$esv>>2] = $10;
 $11 = HEAP32[$cfg>>2]|0;
 $12 = (($11) + 44|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = (+($13|0));
 $15 = HEAP32[$cfg>>2]|0;
 $16 = (($15) + 48|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = (+($17|0));
 $19 = $14 / $18;
 HEAPF64[$resample_ratio>>3] = $19;
 HEAP32[$j>>2] = 0;
 $20 = HEAP32[$cfg>>2]|0;
 $21 = (($20) + 48|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = HEAP32[$cfg>>2]|0;
 $24 = (($23) + 48|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = HEAP32[$cfg>>2]|0;
 $27 = (($26) + 44|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = (_gcd($25,$28)|0);
 $30 = (($22|0) / ($29|0))&-1;
 HEAP32[$bpc>>2] = $30;
 $31 = HEAP32[$bpc>>2]|0;
 $32 = ($31|0)>(320);
 $$ = $32 ? 320 : $30;
 HEAP32[$bpc>>2] = $$;
 $33 = +HEAPF64[$resample_ratio>>3];
 $34 = +HEAPF64[$resample_ratio>>3];
 $35 = 0.5 + $34;
 $36 = (+Math_floor((+$35)));
 $37 = $33 - $36;
 $38 = (+Math_abs((+$37)));
 $39 = $38 < 1.00000000000000004792E-4;
 $40 = $39&1;
 $41 = (+($40|0));
 HEAPF32[$intratio>>2] = $41;
 $42 = +HEAPF64[$resample_ratio>>3];
 $43 = 1.0 / $42;
 $44 = $43;
 HEAPF32[$fcn>>2] = $44;
 $45 = +HEAPF32[$fcn>>2];
 $46 = $45;
 $47 = $46 > 1.0;
 if ($47) {
  HEAPF32[$fcn>>2] = 1.0;
 }
 HEAP32[$filter_l>>2] = 31;
 $48 = +HEAPF32[$intratio>>2];
 $49 = HEAP32[$filter_l>>2]|0;
 $50 = (+($49|0));
 $51 = $50 + $48;
 $52 = (~~(($51)));
 HEAP32[$filter_l>>2] = $52;
 $53 = HEAP32[$filter_l>>2]|0;
 $54 = (($53) + 1)|0;
 HEAP32[$BLACKSIZE>>2] = $54;
 $55 = HEAP32[$0>>2]|0;
 $56 = (($55) + 12|0);
 $57 = HEAP32[$56>>2]|0;
 $58 = ($57|0)==(0);
 if ($58) {
  $59 = HEAP32[$BLACKSIZE>>2]|0;
  $60 = (_calloc($59,4)|0);
  $61 = HEAP32[$esv>>2]|0;
  $62 = (($61) + 9360|0);
  HEAP32[$62>>2] = $60;
  $63 = HEAP32[$BLACKSIZE>>2]|0;
  $64 = (_calloc($63,4)|0);
  $65 = HEAP32[$esv>>2]|0;
  $66 = (($65) + 9360|0);
  $67 = (($66) + 4|0);
  HEAP32[$67>>2] = $64;
  HEAP32[$i>>2] = 0;
  while(1) {
   $68 = HEAP32[$i>>2]|0;
   $69 = HEAP32[$bpc>>2]|0;
   $70 = $69<<1;
   $71 = ($68|0)<=($70|0);
   if (!($71)) {
    break;
   }
   $72 = HEAP32[$BLACKSIZE>>2]|0;
   $73 = (_calloc($72,4)|0);
   $74 = HEAP32[$i>>2]|0;
   $75 = HEAP32[$esv>>2]|0;
   $76 = (($75) + 9368|0);
   $77 = (($76) + ($74<<2)|0);
   HEAP32[$77>>2] = $73;
   $78 = HEAP32[$i>>2]|0;
   $79 = (($78) + 1)|0;
   HEAP32[$i>>2] = $79;
  }
  $80 = HEAP32[$esv>>2]|0;
  $81 = (($80) + 9344|0);
  HEAPF64[$81>>3] = 0.0;
  $82 = HEAP32[$esv>>2]|0;
  $83 = (($82) + 9344|0);
  $84 = (($83) + 8|0);
  HEAPF64[$84>>3] = 0.0;
  HEAP32[$j>>2] = 0;
  while(1) {
   $85 = HEAP32[$j>>2]|0;
   $86 = HEAP32[$bpc>>2]|0;
   $87 = $86<<1;
   $88 = ($85|0)<=($87|0);
   if (!($88)) {
    break;
   }
   HEAPF32[$sum>>2] = 0.0;
   $89 = HEAP32[$j>>2]|0;
   $90 = HEAP32[$bpc>>2]|0;
   $91 = (($89) - ($90))|0;
   $92 = (+($91|0));
   $93 = HEAP32[$bpc>>2]|0;
   $94 = (+($93|0));
   $95 = 2.0 * $94;
   $96 = $92 / $95;
   $97 = $96;
   HEAPF32[$offset>>2] = $97;
   HEAP32[$i>>2] = 0;
   while(1) {
    $98 = HEAP32[$i>>2]|0;
    $99 = HEAP32[$filter_l>>2]|0;
    $100 = ($98|0)<=($99|0);
    if (!($100)) {
     break;
    }
    $101 = HEAP32[$i>>2]|0;
    $102 = (+($101|0));
    $103 = +HEAPF32[$offset>>2];
    $104 = $102 - $103;
    $105 = +HEAPF32[$fcn>>2];
    $106 = HEAP32[$filter_l>>2]|0;
    $107 = (+_blackman($104,$105,$106));
    $108 = HEAP32[$i>>2]|0;
    $109 = HEAP32[$j>>2]|0;
    $110 = HEAP32[$esv>>2]|0;
    $111 = (($110) + 9368|0);
    $112 = (($111) + ($109<<2)|0);
    $113 = HEAP32[$112>>2]|0;
    $114 = (($113) + ($108<<2)|0);
    HEAPF32[$114>>2] = $107;
    $115 = +HEAPF32[$sum>>2];
    $116 = $115 + $107;
    HEAPF32[$sum>>2] = $116;
    $117 = HEAP32[$i>>2]|0;
    $118 = (($117) + 1)|0;
    HEAP32[$i>>2] = $118;
   }
   HEAP32[$i>>2] = 0;
   while(1) {
    $119 = HEAP32[$i>>2]|0;
    $120 = HEAP32[$filter_l>>2]|0;
    $121 = ($119|0)<=($120|0);
    if (!($121)) {
     break;
    }
    $122 = +HEAPF32[$sum>>2];
    $123 = HEAP32[$i>>2]|0;
    $124 = HEAP32[$j>>2]|0;
    $125 = HEAP32[$esv>>2]|0;
    $126 = (($125) + 9368|0);
    $127 = (($126) + ($124<<2)|0);
    $128 = HEAP32[$127>>2]|0;
    $129 = (($128) + ($123<<2)|0);
    $130 = +HEAPF32[$129>>2];
    $131 = $130 / $122;
    HEAPF32[$129>>2] = $131;
    $132 = HEAP32[$i>>2]|0;
    $133 = (($132) + 1)|0;
    HEAP32[$i>>2] = $133;
   }
   $134 = HEAP32[$j>>2]|0;
   $135 = (($134) + 1)|0;
   HEAP32[$j>>2] = $135;
  }
  $136 = HEAP32[$0>>2]|0;
  $137 = (($136) + 12|0);
  HEAP32[$137>>2] = 1;
 }
 $138 = HEAP32[$6>>2]|0;
 $139 = HEAP32[$esv>>2]|0;
 $140 = (($139) + 9360|0);
 $141 = (($140) + ($138<<2)|0);
 $142 = HEAP32[$141>>2]|0;
 HEAP32[$inbuf_old>>2] = $142;
 HEAP32[$k>>2] = 0;
 while(1) {
  $143 = HEAP32[$k>>2]|0;
  $144 = HEAP32[$2>>2]|0;
  $145 = ($143|0)<($144|0);
  if (!($145)) {
   break;
  }
  $146 = HEAP32[$k>>2]|0;
  $147 = (+($146|0));
  $148 = +HEAPF64[$resample_ratio>>3];
  $149 = $147 * $148;
  HEAPF64[$time0>>3] = $149;
  $150 = +HEAPF64[$time0>>3];
  $151 = HEAP32[$6>>2]|0;
  $152 = HEAP32[$esv>>2]|0;
  $153 = (($152) + 9344|0);
  $154 = (($153) + ($151<<3)|0);
  $155 = +HEAPF64[$154>>3];
  $156 = $150 - $155;
  $157 = (+Math_floor((+$156)));
  $158 = (~~(($157)));
  HEAP32[$j>>2] = $158;
  $159 = HEAP32[$filter_l>>2]|0;
  $160 = HEAP32[$j>>2]|0;
  $161 = (($159) + ($160))|0;
  $162 = HEAP32[$filter_l>>2]|0;
  $163 = (($162|0) / 2)&-1;
  $164 = (($161) - ($163))|0;
  $165 = HEAP32[$4>>2]|0;
  $166 = ($164|0)>=($165|0);
  if ($166) {
   break;
  }
  $167 = +HEAPF64[$time0>>3];
  $168 = HEAP32[$6>>2]|0;
  $169 = HEAP32[$esv>>2]|0;
  $170 = (($169) + 9344|0);
  $171 = (($170) + ($168<<3)|0);
  $172 = +HEAPF64[$171>>3];
  $173 = $167 - $172;
  $174 = HEAP32[$j>>2]|0;
  $175 = (+($174|0));
  $176 = HEAP32[$filter_l>>2]|0;
  $177 = (($176|0) % 2)&-1;
  $178 = (+($177|0));
  $179 = 0.5 * $178;
  $180 = $175 + $179;
  $181 = $173 - $180;
  $182 = $181;
  HEAPF32[$offset>>2] = $182;
  $183 = +HEAPF32[$offset>>2];
  $184 = $183 * 2.0;
  $185 = HEAP32[$bpc>>2]|0;
  $186 = (+($185|0));
  $187 = $184 * $186;
  $188 = HEAP32[$bpc>>2]|0;
  $189 = (+($188|0));
  $190 = $187 + $189;
  $191 = $190;
  $192 = $191 + 0.5;
  $193 = (+Math_floor((+$192)));
  $194 = (~~(($193)));
  HEAP32[$joff>>2] = $194;
  HEAPF32[$xvalue>>2] = 0.0;
  HEAP32[$i>>2] = 0;
  while(1) {
   $195 = HEAP32[$i>>2]|0;
   $196 = HEAP32[$filter_l>>2]|0;
   $197 = ($195|0)<=($196|0);
   if (!($197)) {
    break;
   }
   $198 = HEAP32[$i>>2]|0;
   $199 = HEAP32[$j>>2]|0;
   $200 = (($198) + ($199))|0;
   $201 = HEAP32[$filter_l>>2]|0;
   $202 = (($201|0) / 2)&-1;
   $203 = (($200) - ($202))|0;
   HEAP32[$j2>>2] = $203;
   $204 = HEAP32[$j2>>2]|0;
   $205 = ($204|0)<(0);
   if ($205) {
    $206 = HEAP32[$BLACKSIZE>>2]|0;
    $207 = HEAP32[$j2>>2]|0;
    $208 = (($206) + ($207))|0;
    $209 = HEAP32[$inbuf_old>>2]|0;
    $210 = (($209) + ($208<<2)|0);
    $211 = +HEAPF32[$210>>2];
    $216 = $211;
   } else {
    $212 = HEAP32[$j2>>2]|0;
    $213 = HEAP32[$3>>2]|0;
    $214 = (($213) + ($212<<2)|0);
    $215 = +HEAPF32[$214>>2];
    $216 = $215;
   }
   HEAPF32[$y>>2] = $216;
   $217 = +HEAPF32[$y>>2];
   $218 = HEAP32[$i>>2]|0;
   $219 = HEAP32[$joff>>2]|0;
   $220 = HEAP32[$esv>>2]|0;
   $221 = (($220) + 9368|0);
   $222 = (($221) + ($219<<2)|0);
   $223 = HEAP32[$222>>2]|0;
   $224 = (($223) + ($218<<2)|0);
   $225 = +HEAPF32[$224>>2];
   $226 = $217 * $225;
   $227 = +HEAPF32[$xvalue>>2];
   $228 = $227 + $226;
   HEAPF32[$xvalue>>2] = $228;
   $229 = HEAP32[$i>>2]|0;
   $230 = (($229) + 1)|0;
   HEAP32[$i>>2] = $230;
  }
  $231 = +HEAPF32[$xvalue>>2];
  $232 = HEAP32[$k>>2]|0;
  $233 = HEAP32[$1>>2]|0;
  $234 = (($233) + ($232<<2)|0);
  HEAPF32[$234>>2] = $231;
  $235 = HEAP32[$k>>2]|0;
  $236 = (($235) + 1)|0;
  HEAP32[$k>>2] = $236;
 }
 $237 = HEAP32[$4>>2]|0;
 $238 = HEAP32[$filter_l>>2]|0;
 $239 = HEAP32[$j>>2]|0;
 $240 = (($238) + ($239))|0;
 $241 = HEAP32[$filter_l>>2]|0;
 $242 = (($241|0) / 2)&-1;
 $243 = (($240) - ($242))|0;
 $244 = ($237|0)<($243|0);
 if ($244) {
  $245 = HEAP32[$4>>2]|0;
  $253 = $245;
 } else {
  $246 = HEAP32[$filter_l>>2]|0;
  $247 = HEAP32[$j>>2]|0;
  $248 = (($246) + ($247))|0;
  $249 = HEAP32[$filter_l>>2]|0;
  $250 = (($249|0) / 2)&-1;
  $251 = (($248) - ($250))|0;
  $253 = $251;
 }
 $252 = HEAP32[$5>>2]|0;
 HEAP32[$252>>2] = $253;
 $254 = HEAP32[$5>>2]|0;
 $255 = HEAP32[$254>>2]|0;
 $256 = (+($255|0));
 $257 = HEAP32[$k>>2]|0;
 $258 = (+($257|0));
 $259 = +HEAPF64[$resample_ratio>>3];
 $260 = $258 * $259;
 $261 = $256 - $260;
 $262 = HEAP32[$6>>2]|0;
 $263 = HEAP32[$esv>>2]|0;
 $264 = (($263) + 9344|0);
 $265 = (($264) + ($262<<3)|0);
 $266 = +HEAPF64[$265>>3];
 $267 = $266 + $261;
 HEAPF64[$265>>3] = $267;
 $268 = HEAP32[$5>>2]|0;
 $269 = HEAP32[$268>>2]|0;
 $270 = HEAP32[$BLACKSIZE>>2]|0;
 $271 = ($269|0)>=($270|0);
 if ($271) {
  HEAP32[$i>>2] = 0;
  while(1) {
   $272 = HEAP32[$i>>2]|0;
   $273 = HEAP32[$BLACKSIZE>>2]|0;
   $274 = ($272|0)<($273|0);
   if (!($274)) {
    break;
   }
   $275 = HEAP32[$5>>2]|0;
   $276 = HEAP32[$275>>2]|0;
   $277 = HEAP32[$i>>2]|0;
   $278 = (($276) + ($277))|0;
   $279 = HEAP32[$BLACKSIZE>>2]|0;
   $280 = (($278) - ($279))|0;
   $281 = HEAP32[$3>>2]|0;
   $282 = (($281) + ($280<<2)|0);
   $283 = +HEAPF32[$282>>2];
   $284 = HEAP32[$i>>2]|0;
   $285 = HEAP32[$inbuf_old>>2]|0;
   $286 = (($285) + ($284<<2)|0);
   HEAPF32[$286>>2] = $283;
   $287 = HEAP32[$i>>2]|0;
   $288 = (($287) + 1)|0;
   HEAP32[$i>>2] = $288;
  }
  $322 = HEAP32[$k>>2]|0;
  STACKTOP = sp;return ($322|0);
 }
 $289 = HEAP32[$BLACKSIZE>>2]|0;
 $290 = HEAP32[$5>>2]|0;
 $291 = HEAP32[$290>>2]|0;
 $292 = (($289) - ($291))|0;
 HEAP32[$n_shift>>2] = $292;
 HEAP32[$i>>2] = 0;
 while(1) {
  $293 = HEAP32[$i>>2]|0;
  $294 = HEAP32[$n_shift>>2]|0;
  $295 = ($293|0)<($294|0);
  if (!($295)) {
   break;
  }
  $296 = HEAP32[$i>>2]|0;
  $297 = HEAP32[$5>>2]|0;
  $298 = HEAP32[$297>>2]|0;
  $299 = (($296) + ($298))|0;
  $300 = HEAP32[$inbuf_old>>2]|0;
  $301 = (($300) + ($299<<2)|0);
  $302 = +HEAPF32[$301>>2];
  $303 = HEAP32[$i>>2]|0;
  $304 = HEAP32[$inbuf_old>>2]|0;
  $305 = (($304) + ($303<<2)|0);
  HEAPF32[$305>>2] = $302;
  $306 = HEAP32[$i>>2]|0;
  $307 = (($306) + 1)|0;
  HEAP32[$i>>2] = $307;
 }
 HEAP32[$j>>2] = 0;
 while(1) {
  $308 = HEAP32[$i>>2]|0;
  $309 = HEAP32[$BLACKSIZE>>2]|0;
  $310 = ($308|0)<($309|0);
  if (!($310)) {
   break;
  }
  $311 = HEAP32[$j>>2]|0;
  $312 = HEAP32[$3>>2]|0;
  $313 = (($312) + ($311<<2)|0);
  $314 = +HEAPF32[$313>>2];
  $315 = HEAP32[$i>>2]|0;
  $316 = HEAP32[$inbuf_old>>2]|0;
  $317 = (($316) + ($315<<2)|0);
  HEAPF32[$317>>2] = $314;
  $318 = HEAP32[$i>>2]|0;
  $319 = (($318) + 1)|0;
  HEAP32[$i>>2] = $319;
  $320 = HEAP32[$j>>2]|0;
  $321 = (($320) + 1)|0;
  HEAP32[$j>>2] = $321;
 }
 $322 = HEAP32[$k>>2]|0;
 STACKTOP = sp;return ($322|0);
}
function _lame_report_def($format,$args) {
 $format = $format|0;
 $args = $args|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp + 4|0;
 $1 = sp;
 HEAP32[$0>>2] = $format;
 HEAP32[$1>>2] = $args;
 $2 = HEAP32[_stderr>>2]|0;
 $3 = HEAP32[$0>>2]|0;
 $4 = HEAP32[$1>>2]|0;
 (_vfprintf(($2|0),($3|0),($4|0))|0);
 $5 = HEAP32[_stderr>>2]|0;
 (_fflush(($5|0))|0);
 STACKTOP = sp;return;
}
function _lame_msgf($gfc,$format,$varargs) {
 $gfc = $gfc|0;
 $format = $format|0;
 $varargs = $varargs|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $args = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = sp + 20|0;
 $1 = sp + 16|0;
 $args = sp;
 HEAP32[$0>>2] = $gfc;
 HEAP32[$1>>2] = $format;
 $2 = HEAP32[$0>>2]|0;
 $3 = ($2|0)!=(0|0);
 if (!($3)) {
  STACKTOP = sp;return;
 }
 $4 = HEAP32[$0>>2]|0;
 $5 = (($4) + 85828|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)!=(0|0);
 if (!($7)) {
  STACKTOP = sp;return;
 }
 HEAP32[$args>>2] = $varargs;
 $8 = HEAP32[$0>>2]|0;
 $9 = (($8) + 85828|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = HEAP32[$1>>2]|0;
 FUNCTION_TABLE_vii[$10 & 3]($11,$args);
 STACKTOP = sp;return;
}
function _lame_errorf($gfc,$format,$varargs) {
 $gfc = $gfc|0;
 $format = $format|0;
 $varargs = $varargs|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $args = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = sp + 20|0;
 $1 = sp + 16|0;
 $args = sp;
 HEAP32[$0>>2] = $gfc;
 HEAP32[$1>>2] = $format;
 $2 = HEAP32[$0>>2]|0;
 $3 = ($2|0)!=(0|0);
 if (!($3)) {
  STACKTOP = sp;return;
 }
 $4 = HEAP32[$0>>2]|0;
 $5 = (($4) + 85836|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)!=(0|0);
 if (!($7)) {
  STACKTOP = sp;return;
 }
 HEAP32[$args>>2] = $varargs;
 $8 = HEAP32[$0>>2]|0;
 $9 = (($8) + 85836|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = HEAP32[$1>>2]|0;
 FUNCTION_TABLE_vii[$10 & 3]($11,$args);
 STACKTOP = sp;return;
}
function _has_MMX() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 0;
}
function _has_3DNow() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 0;
}
function _has_SSE() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 0;
}
function _has_SSE2() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 0;
}
function _disable_FPE() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function _init_log_table() {
 var $0 = 0, $1 = 0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, $j = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $j = sp;
 $0 = HEAP32[99008>>2]|0;
 $1 = ($0|0)!=(0);
 if ($1) {
  HEAP32[99008>>2] = 1;
  STACKTOP = sp;return;
 }
 HEAP32[$j>>2] = 0;
 while(1) {
  $2 = HEAP32[$j>>2]|0;
  $3 = ($2|0)<(513);
  if (!($3)) {
   break;
  }
  $4 = HEAP32[$j>>2]|0;
  $5 = (+($4|0));
  $6 = $5 / 512.0;
  $7 = 1.0 + $6;
  $8 = $7;
  $9 = (+Math_log((+$8)));
  $10 = (+Math_log(2.0));
  $11 = $9 / $10;
  $12 = $11;
  $13 = HEAP32[$j>>2]|0;
  $14 = (99016 + ($13<<2)|0);
  HEAPF32[$14>>2] = $12;
  $15 = HEAP32[$j>>2]|0;
  $16 = (($15) + 1)|0;
  HEAP32[$j>>2] = $16;
 }
 HEAP32[99008>>2] = 1;
 STACKTOP = sp;return;
}
function _fast_log2($x) {
 $x = +$x;
 var $0 = 0, $1 = 0.0, $10 = 0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0, $23 = 0, $24 = 0, $25 = 0.0, $26 = 0.0;
 var $27 = 0.0, $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0.0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0, $fi = 0, $log2val = 0, $mantisse = 0, $partial = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = sp + 16|0;
 $log2val = sp + 12|0;
 $partial = sp + 8|0;
 $fi = sp + 4|0;
 $mantisse = sp;
 HEAPF32[$0>>2] = $x;
 $1 = +HEAPF32[$0>>2];
 HEAPF32[$fi>>2] = $1;
 $2 = HEAP32[$fi>>2]|0;
 $3 = $2 & 8388607;
 HEAP32[$mantisse>>2] = $3;
 $4 = HEAP32[$fi>>2]|0;
 $5 = $4 >> 23;
 $6 = $5 & 255;
 $7 = (($6) - 127)|0;
 $8 = (+($7|0));
 HEAPF32[$log2val>>2] = $8;
 $9 = HEAP32[$mantisse>>2]|0;
 $10 = $9 & 16383;
 $11 = (+($10|0));
 HEAPF32[$partial>>2] = $11;
 $12 = +HEAPF32[$partial>>2];
 $13 = $12 * 6.103515625E-5;
 HEAPF32[$partial>>2] = $13;
 $14 = HEAP32[$mantisse>>2]|0;
 $15 = $14 >> 14;
 HEAP32[$mantisse>>2] = $15;
 $16 = HEAP32[$mantisse>>2]|0;
 $17 = (99016 + ($16<<2)|0);
 $18 = +HEAPF32[$17>>2];
 $19 = +HEAPF32[$partial>>2];
 $20 = 1.0 - $19;
 $21 = $18 * $20;
 $22 = HEAP32[$mantisse>>2]|0;
 $23 = (($22) + 1)|0;
 $24 = (99016 + ($23<<2)|0);
 $25 = +HEAPF32[$24>>2];
 $26 = +HEAPF32[$partial>>2];
 $27 = $25 * $26;
 $28 = $21 + $27;
 $29 = +HEAPF32[$log2val>>2];
 $30 = $29 + $28;
 HEAPF32[$log2val>>2] = $30;
 $31 = +HEAPF32[$log2val>>2];
 STACKTOP = sp;return (+$31);
}
function _gcd($i,$j) {
 $i = $i|0;
 $j = $j|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp + 4|0;
 $1 = sp;
 HEAP32[$0>>2] = $i;
 HEAP32[$1>>2] = $j;
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)!=(0);
 if ($3) {
  $4 = HEAP32[$1>>2]|0;
  $5 = HEAP32[$0>>2]|0;
  $6 = HEAP32[$1>>2]|0;
  $7 = (($5|0) % ($6|0))&-1;
  $8 = (_gcd($4,$7)|0);
  $10 = $8;
  STACKTOP = sp;return ($10|0);
 } else {
  $9 = HEAP32[$0>>2]|0;
  $10 = $9;
  STACKTOP = sp;return ($10|0);
 }
 return 0|0;
}
function _blackman($x,$fcn,$l) {
 $x = +$x;
 $fcn = +$fcn;
 $l = $l|0;
 var $0 = 0, $1 = 0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0, $14 = 0.0, $15 = 0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0;
 var $27 = 0.0, $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0, $39 = 0.0, $4 = 0.0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0;
 var $45 = 0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0.0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0.0, $60 = 0.0, $61 = 0.0, $62 = 0.0;
 var $7 = 0.0, $8 = 0, $9 = 0.0, $bkwn = 0, $wcn = 0, $x2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = sp + 24|0;
 $1 = sp + 20|0;
 $2 = sp + 16|0;
 $3 = sp + 12|0;
 $bkwn = sp + 8|0;
 $x2 = sp + 4|0;
 $wcn = sp;
 HEAPF32[$1>>2] = $x;
 HEAPF32[$2>>2] = $fcn;
 HEAP32[$3>>2] = $l;
 $4 = +HEAPF32[$2>>2];
 $5 = $4;
 $6 = 3.141592653589793116 * $5;
 $7 = $6;
 HEAPF32[$wcn>>2] = $7;
 $8 = HEAP32[$3>>2]|0;
 $9 = (+($8|0));
 $10 = +HEAPF32[$1>>2];
 $11 = $10 / $9;
 HEAPF32[$1>>2] = $11;
 $12 = +HEAPF32[$1>>2];
 $13 = $12 < 0.0;
 if ($13) {
  HEAPF32[$1>>2] = 0.0;
 }
 $14 = +HEAPF32[$1>>2];
 $15 = $14 > 1.0;
 if ($15) {
  HEAPF32[$1>>2] = 1.0;
 }
 $16 = +HEAPF32[$1>>2];
 $17 = $16;
 $18 = $17 - 0.5;
 $19 = $18;
 HEAPF32[$x2>>2] = $19;
 $20 = +HEAPF32[$1>>2];
 $21 = 2.0 * $20;
 $22 = $21;
 $23 = $22 * 3.141592653589793116;
 $24 = (+Math_cos((+$23)));
 $25 = 0.5 * $24;
 $26 = 0.419999999999999984457 - $25;
 $27 = +HEAPF32[$1>>2];
 $28 = 4.0 * $27;
 $29 = $28;
 $30 = $29 * 3.141592653589793116;
 $31 = (+Math_cos((+$30)));
 $32 = 0.0800000000000000016653 * $31;
 $33 = $26 + $32;
 $34 = $33;
 HEAPF32[$bkwn>>2] = $34;
 $35 = +HEAPF32[$x2>>2];
 $36 = $35;
 $37 = (+Math_abs((+$36)));
 $38 = $37 < 1.00000000000000006228E-9;
 if ($38) {
  $39 = +HEAPF32[$wcn>>2];
  $40 = $39;
  $41 = $40 / 3.141592653589793116;
  $42 = $41;
  HEAPF32[$0>>2] = $42;
  $62 = +HEAPF32[$0>>2];
  STACKTOP = sp;return (+$62);
 } else {
  $43 = +HEAPF32[$bkwn>>2];
  $44 = $43;
  $45 = HEAP32[$3>>2]|0;
  $46 = (+($45|0));
  $47 = +HEAPF32[$wcn>>2];
  $48 = $46 * $47;
  $49 = +HEAPF32[$x2>>2];
  $50 = $48 * $49;
  $51 = $50;
  $52 = (+Math_sin((+$51)));
  $53 = $44 * $52;
  $54 = HEAP32[$3>>2]|0;
  $55 = (+($54|0));
  $56 = 3.141592653589793116 * $55;
  $57 = +HEAPF32[$x2>>2];
  $58 = $57;
  $59 = $56 * $58;
  $60 = $53 / $59;
  $61 = $60;
  HEAPF32[$0>>2] = $61;
  $62 = +HEAPF32[$0>>2];
  STACKTOP = sp;return (+$62);
 }
 return +0;
}
function _VBR_encode_frame($gfc,$xr34orig,$l3_xmin,$max_bits) {
 $gfc = $gfc|0;
 $xr34orig = $xr34orig|0;
 $l3_xmin = $l3_xmin|0;
 $max_bits = $max_bits|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0.0, $283 = 0.0, $284 = 0.0, $285 = 0.0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0.0, $291 = 0.0, $292 = 0.0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0.0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0.0, $304 = 0.0, $305 = 0.0, $306 = 0.0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0.0, $436 = 0.0, $437 = 0.0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0.0, $443 = 0.0, $444 = 0.0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0.0, $452 = 0, $453 = 0, $454 = 0.0, $455 = 0, $456 = 0, $457 = 0.0, $458 = 0.0;
 var $459 = 0.0, $46 = 0, $460 = 0.0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0;
 var $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0;
 var $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0;
 var $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0;
 var $530 = 0, $531 = 0, $532 = 0.0, $533 = 0.0, $534 = 0.0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0.0, $54 = 0, $540 = 0.0, $541 = 0.0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0.0;
 var $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0.0, $554 = 0, $555 = 0, $556 = 0.0, $557 = 0.0, $558 = 0.0, $559 = 0.0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0;
 var $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0;
 var $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0;
 var $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0;
 var $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0;
 var $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0;
 var $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0;
 var $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0;
 var $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0;
 var $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0;
 var $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0;
 var $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0;
 var $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0;
 var $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0;
 var $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0;
 var $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $cfg = 0, $ch = 0, $f = 0, $f2 = 0, $f4 = 0, $gr = 0;
 var $max_nbits_ch = 0, $max_nbits_fr = 0, $max_nbits_gr = 0, $nch = 0, $ngr = 0, $ok = 0, $s = 0, $s3 = 0, $s5 = 0, $sfwork = 0, $sfwork7 = 0, $sfwork_ = 0, $sum_fr = 0, $sum_gr = 0, $that = 0, $that1 = 0, $that6 = 0, $that_ = 0, $use_nbits_ch = 0, $use_nbits_fr = 0;
 var $use_nbits_gr = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vbrmax = 0, $vbrsfmin = 0, $vbrsfmin8 = 0, $vbrsfmin_ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1600|0;
 $vararg_buffer = sp;
 $0 = sp + 1588|0;
 $1 = sp + 1584|0;
 $2 = sp + 1580|0;
 $3 = sp + 1576|0;
 $4 = sp + 1572|0;
 $cfg = sp + 1568|0;
 $sfwork_ = sp + 944|0;
 $vbrsfmin_ = sp + 320|0;
 $that_ = sp + 176|0;
 $ngr = sp + 172|0;
 $nch = sp + 168|0;
 $max_nbits_ch = sp + 152|0;
 $max_nbits_gr = sp + 144|0;
 $max_nbits_fr = sp + 136|0;
 $use_nbits_ch = sp + 120|0;
 $use_nbits_gr = sp + 112|0;
 $use_nbits_fr = sp + 108|0;
 $gr = sp + 104|0;
 $ch = sp + 100|0;
 $ok = sp + 96|0;
 $sum_fr = sp + 92|0;
 $that = sp + 88|0;
 $sfwork = sp + 84|0;
 $vbrsfmin = sp + 80|0;
 $vbrmax = sp + 76|0;
 $that1 = sp + 72|0;
 $f = sp + 64|0;
 $s = sp + 56|0;
 $f2 = sp + 48|0;
 $s3 = sp + 40|0;
 $f4 = sp + 32|0;
 $s5 = sp + 24|0;
 $sum_gr = sp + 20|0;
 $that6 = sp + 16|0;
 $sfwork7 = sp + 12|0;
 $vbrsfmin8 = sp + 8|0;
 HEAP32[$1>>2] = $gfc;
 HEAP32[$2>>2] = $xr34orig;
 HEAP32[$3>>2] = $l3_xmin;
 HEAP32[$4>>2] = $max_bits;
 $5 = HEAP32[$1>>2]|0;
 $6 = (($5) + 16|0);
 HEAP32[$cfg>>2] = $6;
 $7 = HEAP32[$cfg>>2]|0;
 $8 = (($7) + 60|0);
 $9 = HEAP32[$8>>2]|0;
 HEAP32[$ngr>>2] = $9;
 $10 = HEAP32[$cfg>>2]|0;
 $11 = (($10) + 56|0);
 $12 = HEAP32[$11>>2]|0;
 HEAP32[$nch>>2] = $12;
 ;HEAP32[$max_nbits_ch+0>>2]=0|0;HEAP32[$max_nbits_ch+4>>2]=0|0;HEAP32[$max_nbits_ch+8>>2]=0|0;HEAP32[$max_nbits_ch+12>>2]=0|0;
 ;HEAP32[$max_nbits_gr+0>>2]=0|0;HEAP32[$max_nbits_gr+4>>2]=0|0;
 HEAP32[$max_nbits_fr>>2] = 0;
 ;HEAP32[$use_nbits_ch+0>>2]=HEAP32[101072+0>>2]|0;HEAP32[$use_nbits_ch+4>>2]=HEAP32[101072+4>>2]|0;HEAP32[$use_nbits_ch+8>>2]=HEAP32[101072+8>>2]|0;HEAP32[$use_nbits_ch+12>>2]=HEAP32[101072+12>>2]|0;
 ;HEAP32[$use_nbits_gr+0>>2]=HEAP32[101088+0>>2]|0;HEAP32[$use_nbits_gr+4>>2]=HEAP32[101088+4>>2]|0;
 HEAP32[$use_nbits_fr>>2] = 15360;
 HEAP32[$gr>>2] = 0;
 while(1) {
  $13 = HEAP32[$gr>>2]|0;
  $14 = HEAP32[$ngr>>2]|0;
  $15 = ($13|0)<($14|0);
  if (!($15)) {
   break;
  }
  $16 = HEAP32[$gr>>2]|0;
  $17 = (($max_nbits_gr) + ($16<<2)|0);
  HEAP32[$17>>2] = 0;
  HEAP32[$ch>>2] = 0;
  while(1) {
   $18 = HEAP32[$ch>>2]|0;
   $19 = HEAP32[$nch>>2]|0;
   $20 = ($18|0)<($19|0);
   if (!($20)) {
    break;
   }
   $21 = HEAP32[$ch>>2]|0;
   $22 = HEAP32[$gr>>2]|0;
   $23 = HEAP32[$4>>2]|0;
   $24 = (($23) + ($22<<3)|0);
   $25 = (($24) + ($21<<2)|0);
   $26 = HEAP32[$25>>2]|0;
   $27 = HEAP32[$ch>>2]|0;
   $28 = HEAP32[$gr>>2]|0;
   $29 = (($max_nbits_ch) + ($28<<3)|0);
   $30 = (($29) + ($27<<2)|0);
   HEAP32[$30>>2] = $26;
   $31 = HEAP32[$ch>>2]|0;
   $32 = HEAP32[$gr>>2]|0;
   $33 = (($use_nbits_ch) + ($32<<3)|0);
   $34 = (($33) + ($31<<2)|0);
   HEAP32[$34>>2] = 0;
   $35 = HEAP32[$ch>>2]|0;
   $36 = HEAP32[$gr>>2]|0;
   $37 = HEAP32[$4>>2]|0;
   $38 = (($37) + ($36<<3)|0);
   $39 = (($38) + ($35<<2)|0);
   $40 = HEAP32[$39>>2]|0;
   $41 = HEAP32[$gr>>2]|0;
   $42 = (($max_nbits_gr) + ($41<<2)|0);
   $43 = HEAP32[$42>>2]|0;
   $44 = (($43) + ($40))|0;
   HEAP32[$42>>2] = $44;
   $45 = HEAP32[$ch>>2]|0;
   $46 = HEAP32[$gr>>2]|0;
   $47 = HEAP32[$4>>2]|0;
   $48 = (($47) + ($46<<3)|0);
   $49 = (($48) + ($45<<2)|0);
   $50 = HEAP32[$49>>2]|0;
   $51 = HEAP32[$max_nbits_fr>>2]|0;
   $52 = (($51) + ($50))|0;
   HEAP32[$max_nbits_fr>>2] = $52;
   $53 = HEAP32[$cfg>>2]|0;
   $54 = (($53) + 32|0);
   $55 = HEAP32[$54>>2]|0;
   $56 = ($55|0)<(0);
   $57 = $56 ? 2 : 1;
   $58 = HEAP32[$ch>>2]|0;
   $59 = HEAP32[$gr>>2]|0;
   $60 = (($that_) + (($59*72)|0)|0);
   $61 = (($60) + (($58*36)|0)|0);
   $62 = (($61) + 4|0);
   HEAP32[$62>>2] = $57;
   $63 = HEAP32[$1>>2]|0;
   $64 = HEAP32[$ch>>2]|0;
   $65 = HEAP32[$gr>>2]|0;
   $66 = (($that_) + (($65*72)|0)|0);
   $67 = (($66) + (($64*36)|0)|0);
   $68 = (($67) + 12|0);
   HEAP32[$68>>2] = $63;
   $69 = HEAP32[$ch>>2]|0;
   $70 = HEAP32[$gr>>2]|0;
   $71 = HEAP32[$1>>2]|0;
   $72 = (($71) + 304|0);
   $73 = (($72) + (($70*10504)|0)|0);
   $74 = (($73) + (($69*5252)|0)|0);
   $75 = HEAP32[$ch>>2]|0;
   $76 = HEAP32[$gr>>2]|0;
   $77 = (($that_) + (($76*72)|0)|0);
   $78 = (($77) + (($75*36)|0)|0);
   $79 = (($78) + 16|0);
   HEAP32[$79>>2] = $74;
   $80 = HEAP32[$ch>>2]|0;
   $81 = HEAP32[$gr>>2]|0;
   $82 = HEAP32[$2>>2]|0;
   $83 = (($82) + (($81*4608)|0)|0);
   $84 = (($83) + (($80*2304)|0)|0);
   $85 = HEAP32[$ch>>2]|0;
   $86 = HEAP32[$gr>>2]|0;
   $87 = (($that_) + (($86*72)|0)|0);
   $88 = (($87) + (($85*36)|0)|0);
   $89 = (($88) + 8|0);
   HEAP32[$89>>2] = $84;
   $90 = HEAP32[$ch>>2]|0;
   $91 = HEAP32[$gr>>2]|0;
   $92 = (($that_) + (($91*72)|0)|0);
   $93 = (($92) + (($90*36)|0)|0);
   $94 = (($93) + 16|0);
   $95 = HEAP32[$94>>2]|0;
   $96 = (($95) + 4788|0);
   $97 = HEAP32[$96>>2]|0;
   $98 = ($97|0)==(2);
   $99 = HEAP32[$ch>>2]|0;
   $100 = HEAP32[$gr>>2]|0;
   $101 = (($that_) + (($100*72)|0)|0);
   $102 = (($101) + (($99*36)|0)|0);
   if ($98) {
    HEAP32[$102>>2] = 6;
   } else {
    HEAP32[$102>>2] = 7;
   }
   $103 = HEAP32[$ch>>2]|0;
   $104 = (($103) + 1)|0;
   HEAP32[$ch>>2] = $104;
  }
  $105 = HEAP32[$gr>>2]|0;
  $106 = (($105) + 1)|0;
  HEAP32[$gr>>2] = $106;
 }
 HEAP32[$gr>>2] = 0;
 while(1) {
  $107 = HEAP32[$gr>>2]|0;
  $108 = HEAP32[$ngr>>2]|0;
  $109 = ($107|0)<($108|0);
  if (!($109)) {
   break;
  }
  HEAP32[$ch>>2] = 0;
  while(1) {
   $110 = HEAP32[$ch>>2]|0;
   $111 = HEAP32[$nch>>2]|0;
   $112 = ($110|0)<($111|0);
   if (!($112)) {
    break;
   }
   $113 = HEAP32[$ch>>2]|0;
   $114 = HEAP32[$gr>>2]|0;
   $115 = HEAP32[$4>>2]|0;
   $116 = (($115) + ($114<<3)|0);
   $117 = (($116) + ($113<<2)|0);
   $118 = HEAP32[$117>>2]|0;
   $119 = ($118|0)>(0);
   if ($119) {
    $120 = HEAP32[$ch>>2]|0;
    $121 = HEAP32[$gr>>2]|0;
    $122 = (($that_) + (($121*72)|0)|0);
    $123 = (($122) + (($120*36)|0)|0);
    HEAP32[$that>>2] = $123;
    $124 = HEAP32[$ch>>2]|0;
    $125 = HEAP32[$gr>>2]|0;
    $126 = (($sfwork_) + (($125*312)|0)|0);
    $127 = (($126) + (($124*156)|0)|0);
    HEAP32[$sfwork>>2] = $127;
    $128 = HEAP32[$ch>>2]|0;
    $129 = HEAP32[$gr>>2]|0;
    $130 = (($vbrsfmin_) + (($129*312)|0)|0);
    $131 = (($130) + (($128*156)|0)|0);
    HEAP32[$vbrsfmin>>2] = $131;
    $132 = HEAP32[$that>>2]|0;
    $133 = HEAP32[$ch>>2]|0;
    $134 = HEAP32[$gr>>2]|0;
    $135 = HEAP32[$3>>2]|0;
    $136 = (($135) + (($134*312)|0)|0);
    $137 = (($136) + (($133*156)|0)|0);
    $138 = HEAP32[$sfwork>>2]|0;
    $139 = HEAP32[$vbrsfmin>>2]|0;
    $140 = (_block_sf($132,$137,$138,$139)|0);
    HEAP32[$vbrmax>>2] = $140;
    $141 = HEAP32[$that>>2]|0;
    $142 = HEAP32[$141>>2]|0;
    $143 = HEAP32[$that>>2]|0;
    $144 = HEAP32[$sfwork>>2]|0;
    $145 = HEAP32[$vbrsfmin>>2]|0;
    $146 = HEAP32[$vbrmax>>2]|0;
    FUNCTION_TABLE_viiii[$142 & 7]($143,$144,$145,$146);
    $147 = HEAP32[$that>>2]|0;
    _bitcount($147);
   }
   $148 = HEAP32[$ch>>2]|0;
   $149 = (($148) + 1)|0;
   HEAP32[$ch>>2] = $149;
  }
  $150 = HEAP32[$gr>>2]|0;
  $151 = (($150) + 1)|0;
  HEAP32[$gr>>2] = $151;
 }
 HEAP32[$use_nbits_fr>>2] = 0;
 HEAP32[$gr>>2] = 0;
 while(1) {
  $152 = HEAP32[$gr>>2]|0;
  $153 = HEAP32[$ngr>>2]|0;
  $154 = ($152|0)<($153|0);
  if (!($154)) {
   break;
  }
  $155 = HEAP32[$gr>>2]|0;
  $156 = (($use_nbits_gr) + ($155<<2)|0);
  HEAP32[$156>>2] = 0;
  HEAP32[$ch>>2] = 0;
  while(1) {
   $157 = HEAP32[$ch>>2]|0;
   $158 = HEAP32[$nch>>2]|0;
   $159 = ($157|0)<($158|0);
   if (!($159)) {
    break;
   }
   $160 = HEAP32[$ch>>2]|0;
   $161 = HEAP32[$gr>>2]|0;
   $162 = (($that_) + (($161*72)|0)|0);
   $163 = (($162) + (($160*36)|0)|0);
   HEAP32[$that1>>2] = $163;
   $164 = HEAP32[$ch>>2]|0;
   $165 = HEAP32[$gr>>2]|0;
   $166 = HEAP32[$4>>2]|0;
   $167 = (($166) + ($165<<3)|0);
   $168 = (($167) + ($164<<2)|0);
   $169 = HEAP32[$168>>2]|0;
   $170 = ($169|0)>(0);
   if ($170) {
    $171 = HEAP32[$that1>>2]|0;
    $172 = (($171) + 16|0);
    $173 = HEAP32[$172>>2]|0;
    $174 = (($173) + 2304|0);
    _memset(($174|0),0,2304)|0;
    $175 = HEAP32[$that1>>2]|0;
    (_quantizeAndCountBits($175)|0);
   }
   $176 = HEAP32[$1>>2]|0;
   $177 = HEAP32[$gr>>2]|0;
   $178 = HEAP32[$ch>>2]|0;
   $179 = (_reduce_bit_usage($176,$177,$178)|0);
   $180 = HEAP32[$ch>>2]|0;
   $181 = HEAP32[$gr>>2]|0;
   $182 = (($use_nbits_ch) + ($181<<3)|0);
   $183 = (($182) + ($180<<2)|0);
   HEAP32[$183>>2] = $179;
   $184 = HEAP32[$ch>>2]|0;
   $185 = HEAP32[$gr>>2]|0;
   $186 = (($use_nbits_ch) + ($185<<3)|0);
   $187 = (($186) + ($184<<2)|0);
   $188 = HEAP32[$187>>2]|0;
   $189 = HEAP32[$gr>>2]|0;
   $190 = (($use_nbits_gr) + ($189<<2)|0);
   $191 = HEAP32[$190>>2]|0;
   $192 = (($191) + ($188))|0;
   HEAP32[$190>>2] = $192;
   $193 = HEAP32[$ch>>2]|0;
   $194 = (($193) + 1)|0;
   HEAP32[$ch>>2] = $194;
  }
  $195 = HEAP32[$gr>>2]|0;
  $196 = (($use_nbits_gr) + ($195<<2)|0);
  $197 = HEAP32[$196>>2]|0;
  $198 = HEAP32[$use_nbits_fr>>2]|0;
  $199 = (($198) + ($197))|0;
  HEAP32[$use_nbits_fr>>2] = $199;
  $200 = HEAP32[$gr>>2]|0;
  $201 = (($200) + 1)|0;
  HEAP32[$gr>>2] = $201;
 }
 $202 = HEAP32[$use_nbits_fr>>2]|0;
 $203 = HEAP32[$max_nbits_fr>>2]|0;
 $204 = ($202|0)<=($203|0);
 if ($204) {
  HEAP32[$ok>>2] = 1;
  HEAP32[$gr>>2] = 0;
  while(1) {
   $205 = HEAP32[$gr>>2]|0;
   $206 = HEAP32[$ngr>>2]|0;
   $207 = ($205|0)<($206|0);
   if (!($207)) {
    break;
   }
   $208 = HEAP32[$gr>>2]|0;
   $209 = (($use_nbits_gr) + ($208<<2)|0);
   $210 = HEAP32[$209>>2]|0;
   $211 = ($210|0)>(7680);
   if ($211) {
    HEAP32[$ok>>2] = 0;
   }
   HEAP32[$ch>>2] = 0;
   while(1) {
    $212 = HEAP32[$ch>>2]|0;
    $213 = HEAP32[$nch>>2]|0;
    $214 = ($212|0)<($213|0);
    if (!($214)) {
     break;
    }
    $215 = HEAP32[$ch>>2]|0;
    $216 = HEAP32[$gr>>2]|0;
    $217 = (($use_nbits_ch) + ($216<<3)|0);
    $218 = (($217) + ($215<<2)|0);
    $219 = HEAP32[$218>>2]|0;
    $220 = ($219|0)>(4095);
    if ($220) {
     HEAP32[$ok>>2] = 0;
    }
    $221 = HEAP32[$ch>>2]|0;
    $222 = (($221) + 1)|0;
    HEAP32[$ch>>2] = $222;
   }
   $223 = HEAP32[$gr>>2]|0;
   $224 = (($223) + 1)|0;
   HEAP32[$gr>>2] = $224;
  }
  $225 = HEAP32[$ok>>2]|0;
  $226 = ($225|0)!=(0);
  if ($226) {
   $227 = HEAP32[$use_nbits_fr>>2]|0;
   HEAP32[$0>>2] = $227;
   $833 = HEAP32[$0>>2]|0;
   STACKTOP = sp;return ($833|0);
  }
 }
 HEAP32[$ok>>2] = 1;
 HEAP32[$sum_fr>>2] = 0;
 HEAP32[$gr>>2] = 0;
 while(1) {
  $228 = HEAP32[$gr>>2]|0;
  $229 = HEAP32[$ngr>>2]|0;
  $230 = ($228|0)<($229|0);
  if (!($230)) {
   break;
  }
  $231 = HEAP32[$gr>>2]|0;
  $232 = (($max_nbits_gr) + ($231<<2)|0);
  HEAP32[$232>>2] = 0;
  HEAP32[$ch>>2] = 0;
  while(1) {
   $233 = HEAP32[$ch>>2]|0;
   $234 = HEAP32[$nch>>2]|0;
   $235 = ($233|0)<($234|0);
   if (!($235)) {
    break;
   }
   $236 = HEAP32[$ch>>2]|0;
   $237 = HEAP32[$gr>>2]|0;
   $238 = (($use_nbits_ch) + ($237<<3)|0);
   $239 = (($238) + ($236<<2)|0);
   $240 = HEAP32[$239>>2]|0;
   $241 = ($240|0)>(4095);
   $242 = HEAP32[$ch>>2]|0;
   $243 = HEAP32[$gr>>2]|0;
   if ($241) {
    $244 = (($max_nbits_ch) + ($243<<3)|0);
    $245 = (($244) + ($242<<2)|0);
    HEAP32[$245>>2] = 4095;
   } else {
    $246 = (($use_nbits_ch) + ($243<<3)|0);
    $247 = (($246) + ($242<<2)|0);
    $248 = HEAP32[$247>>2]|0;
    $249 = HEAP32[$ch>>2]|0;
    $250 = HEAP32[$gr>>2]|0;
    $251 = (($max_nbits_ch) + ($250<<3)|0);
    $252 = (($251) + ($249<<2)|0);
    HEAP32[$252>>2] = $248;
   }
   $253 = HEAP32[$ch>>2]|0;
   $254 = HEAP32[$gr>>2]|0;
   $255 = (($max_nbits_ch) + ($254<<3)|0);
   $256 = (($255) + ($253<<2)|0);
   $257 = HEAP32[$256>>2]|0;
   $258 = HEAP32[$gr>>2]|0;
   $259 = (($max_nbits_gr) + ($258<<2)|0);
   $260 = HEAP32[$259>>2]|0;
   $261 = (($260) + ($257))|0;
   HEAP32[$259>>2] = $261;
   $262 = HEAP32[$ch>>2]|0;
   $263 = (($262) + 1)|0;
   HEAP32[$ch>>2] = $263;
  }
  $264 = HEAP32[$gr>>2]|0;
  $265 = (($max_nbits_gr) + ($264<<2)|0);
  $266 = HEAP32[$265>>2]|0;
  $267 = ($266|0)>(7680);
  L65: do {
   if ($267) {
    ;HEAP32[$f+0>>2]=0|0;HEAP32[$f+4>>2]=0|0;
    HEAPF32[$s>>2] = 0.0;
    HEAP32[$ch>>2] = 0;
    while(1) {
     $268 = HEAP32[$ch>>2]|0;
     $269 = HEAP32[$nch>>2]|0;
     $270 = ($268|0)<($269|0);
     if (!($270)) {
      break;
     }
     $271 = HEAP32[$ch>>2]|0;
     $272 = HEAP32[$gr>>2]|0;
     $273 = (($max_nbits_ch) + ($272<<3)|0);
     $274 = (($273) + ($271<<2)|0);
     $275 = HEAP32[$274>>2]|0;
     $276 = ($275|0)>(0);
     $277 = HEAP32[$ch>>2]|0;
     if ($276) {
      $278 = HEAP32[$gr>>2]|0;
      $279 = (($max_nbits_ch) + ($278<<3)|0);
      $280 = (($279) + ($277<<2)|0);
      $281 = HEAP32[$280>>2]|0;
      $282 = (+($281|0));
      $283 = (+Math_sqrt((+$282)));
      $284 = (+Math_sqrt((+$283)));
      $285 = $284;
      $286 = HEAP32[$ch>>2]|0;
      $287 = (($f) + ($286<<2)|0);
      HEAPF32[$287>>2] = $285;
      $288 = HEAP32[$ch>>2]|0;
      $289 = (($f) + ($288<<2)|0);
      $290 = +HEAPF32[$289>>2];
      $291 = +HEAPF32[$s>>2];
      $292 = $291 + $290;
      HEAPF32[$s>>2] = $292;
     } else {
      $293 = (($f) + ($277<<2)|0);
      HEAPF32[$293>>2] = 0.0;
     }
     $294 = HEAP32[$ch>>2]|0;
     $295 = (($294) + 1)|0;
     HEAP32[$ch>>2] = $295;
    }
    HEAP32[$ch>>2] = 0;
    while(1) {
     $296 = HEAP32[$ch>>2]|0;
     $297 = HEAP32[$nch>>2]|0;
     $298 = ($296|0)<($297|0);
     if (!($298)) {
      break;
     }
     $299 = +HEAPF32[$s>>2];
     $300 = $299 > 0.0;
     $301 = HEAP32[$ch>>2]|0;
     if ($300) {
      $302 = (($f) + ($301<<2)|0);
      $303 = +HEAPF32[$302>>2];
      $304 = 7680.0 * $303;
      $305 = +HEAPF32[$s>>2];
      $306 = $304 / $305;
      $307 = (~~(($306)));
      $308 = HEAP32[$ch>>2]|0;
      $309 = HEAP32[$gr>>2]|0;
      $310 = (($max_nbits_ch) + ($309<<3)|0);
      $311 = (($310) + ($308<<2)|0);
      HEAP32[$311>>2] = $307;
     } else {
      $312 = HEAP32[$gr>>2]|0;
      $313 = (($max_nbits_ch) + ($312<<3)|0);
      $314 = (($313) + ($301<<2)|0);
      HEAP32[$314>>2] = 0;
     }
     $315 = HEAP32[$ch>>2]|0;
     $316 = (($315) + 1)|0;
     HEAP32[$ch>>2] = $316;
    }
    $317 = HEAP32[$nch>>2]|0;
    $318 = ($317|0)>(1);
    if ($318) {
     $319 = HEAP32[$gr>>2]|0;
     $320 = (($max_nbits_ch) + ($319<<3)|0);
     $321 = HEAP32[$320>>2]|0;
     $322 = HEAP32[$gr>>2]|0;
     $323 = (($use_nbits_ch) + ($322<<3)|0);
     $324 = HEAP32[$323>>2]|0;
     $325 = (($324) + 32)|0;
     $326 = ($321|0)>($325|0);
     if ($326) {
      $327 = HEAP32[$gr>>2]|0;
      $328 = (($max_nbits_ch) + ($327<<3)|0);
      $329 = HEAP32[$328>>2]|0;
      $330 = HEAP32[$gr>>2]|0;
      $331 = (($max_nbits_ch) + ($330<<3)|0);
      $332 = (($331) + 4|0);
      $333 = HEAP32[$332>>2]|0;
      $334 = (($333) + ($329))|0;
      HEAP32[$332>>2] = $334;
      $335 = HEAP32[$gr>>2]|0;
      $336 = (($use_nbits_ch) + ($335<<3)|0);
      $337 = HEAP32[$336>>2]|0;
      $338 = (($337) + 32)|0;
      $339 = HEAP32[$gr>>2]|0;
      $340 = (($max_nbits_ch) + ($339<<3)|0);
      $341 = (($340) + 4|0);
      $342 = HEAP32[$341>>2]|0;
      $343 = (($342) - ($338))|0;
      HEAP32[$341>>2] = $343;
      $344 = HEAP32[$gr>>2]|0;
      $345 = (($use_nbits_ch) + ($344<<3)|0);
      $346 = HEAP32[$345>>2]|0;
      $347 = (($346) + 32)|0;
      $348 = HEAP32[$gr>>2]|0;
      $349 = (($max_nbits_ch) + ($348<<3)|0);
      HEAP32[$349>>2] = $347;
     }
     $350 = HEAP32[$gr>>2]|0;
     $351 = (($max_nbits_ch) + ($350<<3)|0);
     $352 = (($351) + 4|0);
     $353 = HEAP32[$352>>2]|0;
     $354 = HEAP32[$gr>>2]|0;
     $355 = (($use_nbits_ch) + ($354<<3)|0);
     $356 = (($355) + 4|0);
     $357 = HEAP32[$356>>2]|0;
     $358 = (($357) + 32)|0;
     $359 = ($353|0)>($358|0);
     if ($359) {
      $360 = HEAP32[$gr>>2]|0;
      $361 = (($max_nbits_ch) + ($360<<3)|0);
      $362 = (($361) + 4|0);
      $363 = HEAP32[$362>>2]|0;
      $364 = HEAP32[$gr>>2]|0;
      $365 = (($max_nbits_ch) + ($364<<3)|0);
      $366 = HEAP32[$365>>2]|0;
      $367 = (($366) + ($363))|0;
      HEAP32[$365>>2] = $367;
      $368 = HEAP32[$gr>>2]|0;
      $369 = (($use_nbits_ch) + ($368<<3)|0);
      $370 = (($369) + 4|0);
      $371 = HEAP32[$370>>2]|0;
      $372 = (($371) + 32)|0;
      $373 = HEAP32[$gr>>2]|0;
      $374 = (($max_nbits_ch) + ($373<<3)|0);
      $375 = HEAP32[$374>>2]|0;
      $376 = (($375) - ($372))|0;
      HEAP32[$374>>2] = $376;
      $377 = HEAP32[$gr>>2]|0;
      $378 = (($use_nbits_ch) + ($377<<3)|0);
      $379 = (($378) + 4|0);
      $380 = HEAP32[$379>>2]|0;
      $381 = (($380) + 32)|0;
      $382 = HEAP32[$gr>>2]|0;
      $383 = (($max_nbits_ch) + ($382<<3)|0);
      $384 = (($383) + 4|0);
      HEAP32[$384>>2] = $381;
     }
     $385 = HEAP32[$gr>>2]|0;
     $386 = (($max_nbits_ch) + ($385<<3)|0);
     $387 = HEAP32[$386>>2]|0;
     $388 = ($387|0)>(4095);
     if ($388) {
      $389 = HEAP32[$gr>>2]|0;
      $390 = (($max_nbits_ch) + ($389<<3)|0);
      HEAP32[$390>>2] = 4095;
     }
     $391 = HEAP32[$gr>>2]|0;
     $392 = (($max_nbits_ch) + ($391<<3)|0);
     $393 = (($392) + 4|0);
     $394 = HEAP32[$393>>2]|0;
     $395 = ($394|0)>(4095);
     if ($395) {
      $396 = HEAP32[$gr>>2]|0;
      $397 = (($max_nbits_ch) + ($396<<3)|0);
      $398 = (($397) + 4|0);
      HEAP32[$398>>2] = 4095;
     }
    }
    $399 = HEAP32[$gr>>2]|0;
    $400 = (($max_nbits_gr) + ($399<<2)|0);
    HEAP32[$400>>2] = 0;
    HEAP32[$ch>>2] = 0;
    while(1) {
     $401 = HEAP32[$ch>>2]|0;
     $402 = HEAP32[$nch>>2]|0;
     $403 = ($401|0)<($402|0);
     if (!($403)) {
      break L65;
     }
     $404 = HEAP32[$ch>>2]|0;
     $405 = HEAP32[$gr>>2]|0;
     $406 = (($max_nbits_ch) + ($405<<3)|0);
     $407 = (($406) + ($404<<2)|0);
     $408 = HEAP32[$407>>2]|0;
     $409 = HEAP32[$gr>>2]|0;
     $410 = (($max_nbits_gr) + ($409<<2)|0);
     $411 = HEAP32[$410>>2]|0;
     $412 = (($411) + ($408))|0;
     HEAP32[$410>>2] = $412;
     $413 = HEAP32[$ch>>2]|0;
     $414 = (($413) + 1)|0;
     HEAP32[$ch>>2] = $414;
    }
   }
  } while(0);
  $415 = HEAP32[$gr>>2]|0;
  $416 = (($max_nbits_gr) + ($415<<2)|0);
  $417 = HEAP32[$416>>2]|0;
  $418 = HEAP32[$sum_fr>>2]|0;
  $419 = (($418) + ($417))|0;
  HEAP32[$sum_fr>>2] = $419;
  $420 = HEAP32[$gr>>2]|0;
  $421 = (($420) + 1)|0;
  HEAP32[$gr>>2] = $421;
 }
 $422 = HEAP32[$sum_fr>>2]|0;
 $423 = HEAP32[$max_nbits_fr>>2]|0;
 $424 = ($422|0)>($423|0);
 L101: do {
  if ($424) {
   ;HEAP32[$f2+0>>2]=0|0;HEAP32[$f2+4>>2]=0|0;
   HEAPF32[$s3>>2] = 0.0;
   HEAP32[$gr>>2] = 0;
   while(1) {
    $425 = HEAP32[$gr>>2]|0;
    $426 = HEAP32[$ngr>>2]|0;
    $427 = ($425|0)<($426|0);
    if (!($427)) {
     break;
    }
    $428 = HEAP32[$gr>>2]|0;
    $429 = (($max_nbits_gr) + ($428<<2)|0);
    $430 = HEAP32[$429>>2]|0;
    $431 = ($430|0)>(0);
    $432 = HEAP32[$gr>>2]|0;
    if ($431) {
     $433 = (($max_nbits_gr) + ($432<<2)|0);
     $434 = HEAP32[$433>>2]|0;
     $435 = (+($434|0));
     $436 = (+Math_sqrt((+$435)));
     $437 = $436;
     $438 = HEAP32[$gr>>2]|0;
     $439 = (($f2) + ($438<<2)|0);
     HEAPF32[$439>>2] = $437;
     $440 = HEAP32[$gr>>2]|0;
     $441 = (($f2) + ($440<<2)|0);
     $442 = +HEAPF32[$441>>2];
     $443 = +HEAPF32[$s3>>2];
     $444 = $443 + $442;
     HEAPF32[$s3>>2] = $444;
    } else {
     $445 = (($f2) + ($432<<2)|0);
     HEAPF32[$445>>2] = 0.0;
    }
    $446 = HEAP32[$gr>>2]|0;
    $447 = (($446) + 1)|0;
    HEAP32[$gr>>2] = $447;
   }
   HEAP32[$gr>>2] = 0;
   while(1) {
    $448 = HEAP32[$gr>>2]|0;
    $449 = HEAP32[$ngr>>2]|0;
    $450 = ($448|0)<($449|0);
    if (!($450)) {
     break;
    }
    $451 = +HEAPF32[$s3>>2];
    $452 = $451 > 0.0;
    if ($452) {
     $453 = HEAP32[$max_nbits_fr>>2]|0;
     $454 = (+($453|0));
     $455 = HEAP32[$gr>>2]|0;
     $456 = (($f2) + ($455<<2)|0);
     $457 = +HEAPF32[$456>>2];
     $458 = $454 * $457;
     $459 = +HEAPF32[$s3>>2];
     $460 = $458 / $459;
     $461 = (~~(($460)));
     $462 = HEAP32[$gr>>2]|0;
     $463 = (($max_nbits_gr) + ($462<<2)|0);
     HEAP32[$463>>2] = $461;
    } else {
     $464 = HEAP32[$gr>>2]|0;
     $465 = (($max_nbits_gr) + ($464<<2)|0);
     HEAP32[$465>>2] = 0;
    }
    $466 = HEAP32[$gr>>2]|0;
    $467 = (($466) + 1)|0;
    HEAP32[$gr>>2] = $467;
   }
   $468 = HEAP32[$ngr>>2]|0;
   $469 = ($468|0)>(1);
   L119: do {
    if ($469) {
     $470 = HEAP32[$max_nbits_gr>>2]|0;
     $471 = HEAP32[$use_nbits_gr>>2]|0;
     $472 = (($471) + 125)|0;
     $473 = ($470|0)>($472|0);
     if ($473) {
      $474 = HEAP32[$max_nbits_gr>>2]|0;
      $475 = (($max_nbits_gr) + 4|0);
      $476 = HEAP32[$475>>2]|0;
      $477 = (($476) + ($474))|0;
      HEAP32[$475>>2] = $477;
      $478 = HEAP32[$use_nbits_gr>>2]|0;
      $479 = (($478) + 125)|0;
      $480 = (($max_nbits_gr) + 4|0);
      $481 = HEAP32[$480>>2]|0;
      $482 = (($481) - ($479))|0;
      HEAP32[$480>>2] = $482;
      $483 = HEAP32[$use_nbits_gr>>2]|0;
      $484 = (($483) + 125)|0;
      HEAP32[$max_nbits_gr>>2] = $484;
     }
     $485 = (($max_nbits_gr) + 4|0);
     $486 = HEAP32[$485>>2]|0;
     $487 = (($use_nbits_gr) + 4|0);
     $488 = HEAP32[$487>>2]|0;
     $489 = (($488) + 125)|0;
     $490 = ($486|0)>($489|0);
     if ($490) {
      $491 = (($max_nbits_gr) + 4|0);
      $492 = HEAP32[$491>>2]|0;
      $493 = HEAP32[$max_nbits_gr>>2]|0;
      $494 = (($493) + ($492))|0;
      HEAP32[$max_nbits_gr>>2] = $494;
      $495 = (($use_nbits_gr) + 4|0);
      $496 = HEAP32[$495>>2]|0;
      $497 = (($496) + 125)|0;
      $498 = HEAP32[$max_nbits_gr>>2]|0;
      $499 = (($498) - ($497))|0;
      HEAP32[$max_nbits_gr>>2] = $499;
      $500 = (($use_nbits_gr) + 4|0);
      $501 = HEAP32[$500>>2]|0;
      $502 = (($501) + 125)|0;
      $503 = (($max_nbits_gr) + 4|0);
      HEAP32[$503>>2] = $502;
     }
     HEAP32[$gr>>2] = 0;
     while(1) {
      $504 = HEAP32[$gr>>2]|0;
      $505 = HEAP32[$ngr>>2]|0;
      $506 = ($504|0)<($505|0);
      if (!($506)) {
       break L119;
      }
      $507 = HEAP32[$gr>>2]|0;
      $508 = (($max_nbits_gr) + ($507<<2)|0);
      $509 = HEAP32[$508>>2]|0;
      $510 = ($509|0)>(7680);
      if ($510) {
       $511 = HEAP32[$gr>>2]|0;
       $512 = (($max_nbits_gr) + ($511<<2)|0);
       HEAP32[$512>>2] = 7680;
      }
      $513 = HEAP32[$gr>>2]|0;
      $514 = (($513) + 1)|0;
      HEAP32[$gr>>2] = $514;
     }
    }
   } while(0);
   HEAP32[$gr>>2] = 0;
   while(1) {
    $515 = HEAP32[$gr>>2]|0;
    $516 = HEAP32[$ngr>>2]|0;
    $517 = ($515|0)<($516|0);
    if (!($517)) {
     break L101;
    }
    ;HEAP32[$f4+0>>2]=0|0;HEAP32[$f4+4>>2]=0|0;
    HEAPF32[$s5>>2] = 0.0;
    HEAP32[$ch>>2] = 0;
    while(1) {
     $518 = HEAP32[$ch>>2]|0;
     $519 = HEAP32[$nch>>2]|0;
     $520 = ($518|0)<($519|0);
     if (!($520)) {
      break;
     }
     $521 = HEAP32[$ch>>2]|0;
     $522 = HEAP32[$gr>>2]|0;
     $523 = (($max_nbits_ch) + ($522<<3)|0);
     $524 = (($523) + ($521<<2)|0);
     $525 = HEAP32[$524>>2]|0;
     $526 = ($525|0)>(0);
     $527 = HEAP32[$ch>>2]|0;
     if ($526) {
      $528 = HEAP32[$gr>>2]|0;
      $529 = (($max_nbits_ch) + ($528<<3)|0);
      $530 = (($529) + ($527<<2)|0);
      $531 = HEAP32[$530>>2]|0;
      $532 = (+($531|0));
      $533 = (+Math_sqrt((+$532)));
      $534 = $533;
      $535 = HEAP32[$ch>>2]|0;
      $536 = (($f4) + ($535<<2)|0);
      HEAPF32[$536>>2] = $534;
      $537 = HEAP32[$ch>>2]|0;
      $538 = (($f4) + ($537<<2)|0);
      $539 = +HEAPF32[$538>>2];
      $540 = +HEAPF32[$s5>>2];
      $541 = $540 + $539;
      HEAPF32[$s5>>2] = $541;
     } else {
      $542 = (($f4) + ($527<<2)|0);
      HEAPF32[$542>>2] = 0.0;
     }
     $543 = HEAP32[$ch>>2]|0;
     $544 = (($543) + 1)|0;
     HEAP32[$ch>>2] = $544;
    }
    HEAP32[$ch>>2] = 0;
    while(1) {
     $545 = HEAP32[$ch>>2]|0;
     $546 = HEAP32[$nch>>2]|0;
     $547 = ($545|0)<($546|0);
     if (!($547)) {
      break;
     }
     $548 = +HEAPF32[$s5>>2];
     $549 = $548 > 0.0;
     if ($549) {
      $550 = HEAP32[$gr>>2]|0;
      $551 = (($max_nbits_gr) + ($550<<2)|0);
      $552 = HEAP32[$551>>2]|0;
      $553 = (+($552|0));
      $554 = HEAP32[$ch>>2]|0;
      $555 = (($f4) + ($554<<2)|0);
      $556 = +HEAPF32[$555>>2];
      $557 = $553 * $556;
      $558 = +HEAPF32[$s5>>2];
      $559 = $557 / $558;
      $560 = (~~(($559)));
      $561 = HEAP32[$ch>>2]|0;
      $562 = HEAP32[$gr>>2]|0;
      $563 = (($max_nbits_ch) + ($562<<3)|0);
      $564 = (($563) + ($561<<2)|0);
      HEAP32[$564>>2] = $560;
     } else {
      $565 = HEAP32[$ch>>2]|0;
      $566 = HEAP32[$gr>>2]|0;
      $567 = (($max_nbits_ch) + ($566<<3)|0);
      $568 = (($567) + ($565<<2)|0);
      HEAP32[$568>>2] = 0;
     }
     $569 = HEAP32[$ch>>2]|0;
     $570 = (($569) + 1)|0;
     HEAP32[$ch>>2] = $570;
    }
    $571 = HEAP32[$nch>>2]|0;
    $572 = ($571|0)>(1);
    L153: do {
     if ($572) {
      $573 = HEAP32[$gr>>2]|0;
      $574 = (($max_nbits_ch) + ($573<<3)|0);
      $575 = HEAP32[$574>>2]|0;
      $576 = HEAP32[$gr>>2]|0;
      $577 = (($use_nbits_ch) + ($576<<3)|0);
      $578 = HEAP32[$577>>2]|0;
      $579 = (($578) + 32)|0;
      $580 = ($575|0)>($579|0);
      if ($580) {
       $581 = HEAP32[$gr>>2]|0;
       $582 = (($max_nbits_ch) + ($581<<3)|0);
       $583 = HEAP32[$582>>2]|0;
       $584 = HEAP32[$gr>>2]|0;
       $585 = (($max_nbits_ch) + ($584<<3)|0);
       $586 = (($585) + 4|0);
       $587 = HEAP32[$586>>2]|0;
       $588 = (($587) + ($583))|0;
       HEAP32[$586>>2] = $588;
       $589 = HEAP32[$gr>>2]|0;
       $590 = (($use_nbits_ch) + ($589<<3)|0);
       $591 = HEAP32[$590>>2]|0;
       $592 = (($591) + 32)|0;
       $593 = HEAP32[$gr>>2]|0;
       $594 = (($max_nbits_ch) + ($593<<3)|0);
       $595 = (($594) + 4|0);
       $596 = HEAP32[$595>>2]|0;
       $597 = (($596) - ($592))|0;
       HEAP32[$595>>2] = $597;
       $598 = HEAP32[$gr>>2]|0;
       $599 = (($use_nbits_ch) + ($598<<3)|0);
       $600 = HEAP32[$599>>2]|0;
       $601 = (($600) + 32)|0;
       $602 = HEAP32[$gr>>2]|0;
       $603 = (($max_nbits_ch) + ($602<<3)|0);
       HEAP32[$603>>2] = $601;
      }
      $604 = HEAP32[$gr>>2]|0;
      $605 = (($max_nbits_ch) + ($604<<3)|0);
      $606 = (($605) + 4|0);
      $607 = HEAP32[$606>>2]|0;
      $608 = HEAP32[$gr>>2]|0;
      $609 = (($use_nbits_ch) + ($608<<3)|0);
      $610 = (($609) + 4|0);
      $611 = HEAP32[$610>>2]|0;
      $612 = (($611) + 32)|0;
      $613 = ($607|0)>($612|0);
      if ($613) {
       $614 = HEAP32[$gr>>2]|0;
       $615 = (($max_nbits_ch) + ($614<<3)|0);
       $616 = (($615) + 4|0);
       $617 = HEAP32[$616>>2]|0;
       $618 = HEAP32[$gr>>2]|0;
       $619 = (($max_nbits_ch) + ($618<<3)|0);
       $620 = HEAP32[$619>>2]|0;
       $621 = (($620) + ($617))|0;
       HEAP32[$619>>2] = $621;
       $622 = HEAP32[$gr>>2]|0;
       $623 = (($use_nbits_ch) + ($622<<3)|0);
       $624 = (($623) + 4|0);
       $625 = HEAP32[$624>>2]|0;
       $626 = (($625) + 32)|0;
       $627 = HEAP32[$gr>>2]|0;
       $628 = (($max_nbits_ch) + ($627<<3)|0);
       $629 = HEAP32[$628>>2]|0;
       $630 = (($629) - ($626))|0;
       HEAP32[$628>>2] = $630;
       $631 = HEAP32[$gr>>2]|0;
       $632 = (($use_nbits_ch) + ($631<<3)|0);
       $633 = (($632) + 4|0);
       $634 = HEAP32[$633>>2]|0;
       $635 = (($634) + 32)|0;
       $636 = HEAP32[$gr>>2]|0;
       $637 = (($max_nbits_ch) + ($636<<3)|0);
       $638 = (($637) + 4|0);
       HEAP32[$638>>2] = $635;
      }
      HEAP32[$ch>>2] = 0;
      while(1) {
       $639 = HEAP32[$ch>>2]|0;
       $640 = HEAP32[$nch>>2]|0;
       $641 = ($639|0)<($640|0);
       if (!($641)) {
        break L153;
       }
       $642 = HEAP32[$ch>>2]|0;
       $643 = HEAP32[$gr>>2]|0;
       $644 = (($max_nbits_ch) + ($643<<3)|0);
       $645 = (($644) + ($642<<2)|0);
       $646 = HEAP32[$645>>2]|0;
       $647 = ($646|0)>(4095);
       if ($647) {
        $648 = HEAP32[$ch>>2]|0;
        $649 = HEAP32[$gr>>2]|0;
        $650 = (($max_nbits_ch) + ($649<<3)|0);
        $651 = (($650) + ($648<<2)|0);
        HEAP32[$651>>2] = 4095;
       }
       $652 = HEAP32[$ch>>2]|0;
       $653 = (($652) + 1)|0;
       HEAP32[$ch>>2] = $653;
      }
     }
    } while(0);
    $654 = HEAP32[$gr>>2]|0;
    $655 = (($654) + 1)|0;
    HEAP32[$gr>>2] = $655;
   }
  }
 } while(0);
 HEAP32[$sum_fr>>2] = 0;
 HEAP32[$gr>>2] = 0;
 while(1) {
  $656 = HEAP32[$gr>>2]|0;
  $657 = HEAP32[$ngr>>2]|0;
  $658 = ($656|0)<($657|0);
  if (!($658)) {
   break;
  }
  HEAP32[$sum_gr>>2] = 0;
  HEAP32[$ch>>2] = 0;
  while(1) {
   $659 = HEAP32[$ch>>2]|0;
   $660 = HEAP32[$nch>>2]|0;
   $661 = ($659|0)<($660|0);
   if (!($661)) {
    break;
   }
   $662 = HEAP32[$ch>>2]|0;
   $663 = HEAP32[$gr>>2]|0;
   $664 = (($max_nbits_ch) + ($663<<3)|0);
   $665 = (($664) + ($662<<2)|0);
   $666 = HEAP32[$665>>2]|0;
   $667 = HEAP32[$sum_gr>>2]|0;
   $668 = (($667) + ($666))|0;
   HEAP32[$sum_gr>>2] = $668;
   $669 = HEAP32[$ch>>2]|0;
   $670 = HEAP32[$gr>>2]|0;
   $671 = (($max_nbits_ch) + ($670<<3)|0);
   $672 = (($671) + ($669<<2)|0);
   $673 = HEAP32[$672>>2]|0;
   $674 = ($673|0)>(4095);
   if ($674) {
    HEAP32[$ok>>2] = 0;
   }
   $675 = HEAP32[$ch>>2]|0;
   $676 = (($675) + 1)|0;
   HEAP32[$ch>>2] = $676;
  }
  $677 = HEAP32[$sum_gr>>2]|0;
  $678 = HEAP32[$sum_fr>>2]|0;
  $679 = (($678) + ($677))|0;
  HEAP32[$sum_fr>>2] = $679;
  $680 = HEAP32[$sum_gr>>2]|0;
  $681 = ($680|0)>(7680);
  if ($681) {
   HEAP32[$ok>>2] = 0;
  }
  $682 = HEAP32[$gr>>2]|0;
  $683 = (($682) + 1)|0;
  HEAP32[$gr>>2] = $683;
 }
 $684 = HEAP32[$sum_fr>>2]|0;
 $685 = HEAP32[$max_nbits_fr>>2]|0;
 $686 = ($684|0)>($685|0);
 if ($686) {
  HEAP32[$ok>>2] = 0;
 }
 $687 = HEAP32[$ok>>2]|0;
 $688 = ($687|0)!=(0);
 L186: do {
  if (!($688)) {
   HEAP32[$gr>>2] = 0;
   while(1) {
    $689 = HEAP32[$gr>>2]|0;
    $690 = HEAP32[$ngr>>2]|0;
    $691 = ($689|0)<($690|0);
    if (!($691)) {
     break L186;
    }
    HEAP32[$ch>>2] = 0;
    while(1) {
     $692 = HEAP32[$ch>>2]|0;
     $693 = HEAP32[$nch>>2]|0;
     $694 = ($692|0)<($693|0);
     if (!($694)) {
      break;
     }
     $695 = HEAP32[$ch>>2]|0;
     $696 = HEAP32[$gr>>2]|0;
     $697 = HEAP32[$4>>2]|0;
     $698 = (($697) + ($696<<3)|0);
     $699 = (($698) + ($695<<2)|0);
     $700 = HEAP32[$699>>2]|0;
     $701 = HEAP32[$ch>>2]|0;
     $702 = HEAP32[$gr>>2]|0;
     $703 = (($max_nbits_ch) + ($702<<3)|0);
     $704 = (($703) + ($701<<2)|0);
     HEAP32[$704>>2] = $700;
     $705 = HEAP32[$ch>>2]|0;
     $706 = (($705) + 1)|0;
     HEAP32[$ch>>2] = $706;
    }
    $707 = HEAP32[$gr>>2]|0;
    $708 = (($707) + 1)|0;
    HEAP32[$gr>>2] = $708;
   }
  }
 } while(0);
 HEAP32[$ch>>2] = 0;
 while(1) {
  $709 = HEAP32[$ch>>2]|0;
  $710 = HEAP32[$nch>>2]|0;
  $711 = ($709|0)<($710|0);
  if (!($711)) {
   break;
  }
  $712 = HEAP32[$ch>>2]|0;
  $713 = HEAP32[$1>>2]|0;
  $714 = (($713) + 304|0);
  $715 = (($714) + 21024|0);
  $716 = (($715) + ($712<<4)|0);
  HEAP32[$716>>2] = 0;
  $717 = HEAP32[$ch>>2]|0;
  $718 = HEAP32[$1>>2]|0;
  $719 = (($718) + 304|0);
  $720 = (($719) + 21024|0);
  $721 = (($720) + ($717<<4)|0);
  $722 = (($721) + 4|0);
  HEAP32[$722>>2] = 0;
  $723 = HEAP32[$ch>>2]|0;
  $724 = HEAP32[$1>>2]|0;
  $725 = (($724) + 304|0);
  $726 = (($725) + 21024|0);
  $727 = (($726) + ($723<<4)|0);
  $728 = (($727) + 8|0);
  HEAP32[$728>>2] = 0;
  $729 = HEAP32[$ch>>2]|0;
  $730 = HEAP32[$1>>2]|0;
  $731 = (($730) + 304|0);
  $732 = (($731) + 21024|0);
  $733 = (($732) + ($729<<4)|0);
  $734 = (($733) + 12|0);
  HEAP32[$734>>2] = 0;
  $735 = HEAP32[$ch>>2]|0;
  $736 = (($735) + 1)|0;
  HEAP32[$ch>>2] = $736;
 }
 HEAP32[$gr>>2] = 0;
 while(1) {
  $737 = HEAP32[$gr>>2]|0;
  $738 = HEAP32[$ngr>>2]|0;
  $739 = ($737|0)<($738|0);
  if (!($739)) {
   break;
  }
  HEAP32[$ch>>2] = 0;
  while(1) {
   $740 = HEAP32[$ch>>2]|0;
   $741 = HEAP32[$nch>>2]|0;
   $742 = ($740|0)<($741|0);
   if (!($742)) {
    break;
   }
   $743 = HEAP32[$ch>>2]|0;
   $744 = HEAP32[$gr>>2]|0;
   $745 = HEAP32[$1>>2]|0;
   $746 = (($745) + 304|0);
   $747 = (($746) + (($744*10504)|0)|0);
   $748 = (($747) + (($743*5252)|0)|0);
   $749 = (($748) + 4784|0);
   HEAP32[$749>>2] = 0;
   $750 = HEAP32[$ch>>2]|0;
   $751 = (($750) + 1)|0;
   HEAP32[$ch>>2] = $751;
  }
  $752 = HEAP32[$gr>>2]|0;
  $753 = (($752) + 1)|0;
  HEAP32[$gr>>2] = $753;
 }
 HEAP32[$use_nbits_fr>>2] = 0;
 HEAP32[$gr>>2] = 0;
 while(1) {
  $754 = HEAP32[$gr>>2]|0;
  $755 = HEAP32[$ngr>>2]|0;
  $756 = ($754|0)<($755|0);
  if (!($756)) {
   break;
  }
  $757 = HEAP32[$gr>>2]|0;
  $758 = (($use_nbits_gr) + ($757<<2)|0);
  HEAP32[$758>>2] = 0;
  HEAP32[$ch>>2] = 0;
  while(1) {
   $759 = HEAP32[$ch>>2]|0;
   $760 = HEAP32[$nch>>2]|0;
   $761 = ($759|0)<($760|0);
   if (!($761)) {
    break;
   }
   $762 = HEAP32[$ch>>2]|0;
   $763 = HEAP32[$gr>>2]|0;
   $764 = (($that_) + (($763*72)|0)|0);
   $765 = (($764) + (($762*36)|0)|0);
   HEAP32[$that6>>2] = $765;
   $766 = HEAP32[$ch>>2]|0;
   $767 = HEAP32[$gr>>2]|0;
   $768 = (($use_nbits_ch) + ($767<<3)|0);
   $769 = (($768) + ($766<<2)|0);
   HEAP32[$769>>2] = 0;
   $770 = HEAP32[$ch>>2]|0;
   $771 = HEAP32[$gr>>2]|0;
   $772 = HEAP32[$4>>2]|0;
   $773 = (($772) + ($771<<3)|0);
   $774 = (($773) + ($770<<2)|0);
   $775 = HEAP32[$774>>2]|0;
   $776 = ($775|0)>(0);
   if ($776) {
    $777 = HEAP32[$ch>>2]|0;
    $778 = HEAP32[$gr>>2]|0;
    $779 = (($sfwork_) + (($778*312)|0)|0);
    $780 = (($779) + (($777*156)|0)|0);
    HEAP32[$sfwork7>>2] = $780;
    $781 = HEAP32[$ch>>2]|0;
    $782 = HEAP32[$gr>>2]|0;
    $783 = (($vbrsfmin_) + (($782*312)|0)|0);
    $784 = (($783) + (($781*156)|0)|0);
    HEAP32[$vbrsfmin8>>2] = $784;
    $785 = HEAP32[$sfwork7>>2]|0;
    $786 = HEAP32[$sfwork7>>2]|0;
    $787 = HEAP32[$that6>>2]|0;
    $788 = (($787) + 16|0);
    $789 = HEAP32[$788>>2]|0;
    $790 = (($789) + 4780|0);
    $791 = HEAP32[$790>>2]|0;
    _cutDistribution($785,$786,$791);
    $792 = HEAP32[$that6>>2]|0;
    $793 = HEAP32[$sfwork7>>2]|0;
    $794 = HEAP32[$vbrsfmin8>>2]|0;
    $795 = HEAP32[$ch>>2]|0;
    $796 = HEAP32[$gr>>2]|0;
    $797 = (($max_nbits_ch) + ($796<<3)|0);
    $798 = (($797) + ($795<<2)|0);
    $799 = HEAP32[$798>>2]|0;
    _outOfBitsStrategy($792,$793,$794,$799);
   }
   $800 = HEAP32[$1>>2]|0;
   $801 = HEAP32[$gr>>2]|0;
   $802 = HEAP32[$ch>>2]|0;
   $803 = (_reduce_bit_usage($800,$801,$802)|0);
   $804 = HEAP32[$ch>>2]|0;
   $805 = HEAP32[$gr>>2]|0;
   $806 = (($use_nbits_ch) + ($805<<3)|0);
   $807 = (($806) + ($804<<2)|0);
   HEAP32[$807>>2] = $803;
   $808 = HEAP32[$ch>>2]|0;
   $809 = HEAP32[$gr>>2]|0;
   $810 = (($use_nbits_ch) + ($809<<3)|0);
   $811 = (($810) + ($808<<2)|0);
   $812 = HEAP32[$811>>2]|0;
   $813 = HEAP32[$gr>>2]|0;
   $814 = (($use_nbits_gr) + ($813<<2)|0);
   $815 = HEAP32[$814>>2]|0;
   $816 = (($815) + ($812))|0;
   HEAP32[$814>>2] = $816;
   $817 = HEAP32[$ch>>2]|0;
   $818 = (($817) + 1)|0;
   HEAP32[$ch>>2] = $818;
  }
  $819 = HEAP32[$gr>>2]|0;
  $820 = (($use_nbits_gr) + ($819<<2)|0);
  $821 = HEAP32[$820>>2]|0;
  $822 = HEAP32[$use_nbits_fr>>2]|0;
  $823 = (($822) + ($821))|0;
  HEAP32[$use_nbits_fr>>2] = $823;
  $824 = HEAP32[$gr>>2]|0;
  $825 = (($824) + 1)|0;
  HEAP32[$gr>>2] = $825;
 }
 $826 = HEAP32[$use_nbits_fr>>2]|0;
 $827 = HEAP32[$max_nbits_fr>>2]|0;
 $828 = ($826|0)<=($827|0);
 if (!($828)) {
  $830 = HEAP32[$1>>2]|0;
  $831 = HEAP32[$max_nbits_fr>>2]|0;
  $832 = HEAP32[$use_nbits_fr>>2]|0;
  HEAP32[$vararg_buffer>>2] = $831;
  $vararg_ptr1 = (($vararg_buffer) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $832;
  _lame_errorf($830,101096,$vararg_buffer);
  _exit(-1);
  // unreachable;
 }
 $829 = HEAP32[$use_nbits_fr>>2]|0;
 HEAP32[$0>>2] = $829;
 $833 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($833|0);
}
function _guess_scalefac_x34($xr,$xr34,$l3_xmin,$bw,$sf_min) {
 $xr = $xr|0;
 $xr34 = $xr34|0;
 $l3_xmin = +$l3_xmin;
 $bw = $bw|0;
 $sf_min = $sf_min|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0, $8 = 0, $9 = 0, $guess = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = sp + 21|0;
 $1 = sp + 16|0;
 $2 = sp + 12|0;
 $3 = sp + 8|0;
 $4 = sp + 4|0;
 $5 = sp + 20|0;
 $guess = sp;
 HEAP32[$1>>2] = $xr;
 HEAP32[$2>>2] = $xr34;
 HEAPF32[$3>>2] = $l3_xmin;
 HEAP32[$4>>2] = $bw;
 HEAP8[$5>>0] = $sf_min;
 $6 = +HEAPF32[$3>>2];
 $7 = HEAP32[$4>>2]|0;
 $8 = (_calc_scalefac($6,$7)|0);
 HEAP32[$guess>>2] = $8;
 $9 = HEAP32[$guess>>2]|0;
 $10 = HEAP8[$5>>0]|0;
 $11 = $10&255;
 $12 = ($9|0)<($11|0);
 if ($12) {
  $13 = HEAP8[$5>>0]|0;
  HEAP8[$0>>0] = $13;
  $18 = HEAP8[$0>>0]|0;
  STACKTOP = sp;return ($18|0);
 }
 $14 = HEAP32[$guess>>2]|0;
 $15 = ($14|0)>=(255);
 if ($15) {
  HEAP8[$0>>0] = -1;
  $18 = HEAP8[$0>>0]|0;
  STACKTOP = sp;return ($18|0);
 } else {
  $16 = HEAP32[$guess>>2]|0;
  $17 = $16&255;
  HEAP8[$0>>0] = $17;
  $18 = HEAP8[$0>>0]|0;
  STACKTOP = sp;return ($18|0);
 }
 return 0|0;
}
function _find_scalefac_x34($xr,$xr34,$l3_xmin,$bw,$sf_min) {
 $xr = $xr|0;
 $xr34 = $xr34|0;
 $l3_xmin = +$l3_xmin;
 $bw = $bw|0;
 $sf_min = $sf_min|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0.0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $bad = 0, $delsf = 0, $did_it = 0;
 var $i = 0, $seen_good_one = 0, $sf = 0, $sf_ok = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 2080|0;
 $0 = sp + 2060|0;
 $1 = sp + 2056|0;
 $2 = sp + 2052|0;
 $3 = sp + 2048|0;
 $4 = sp + 2070|0;
 $did_it = sp;
 $sf = sp + 2069|0;
 $sf_ok = sp + 2068|0;
 $delsf = sp + 2067|0;
 $seen_good_one = sp + 2066|0;
 $i = sp + 2065|0;
 $bad = sp + 2064|0;
 HEAP32[$0>>2] = $xr;
 HEAP32[$1>>2] = $xr34;
 HEAPF32[$2>>2] = $l3_xmin;
 HEAP32[$3>>2] = $bw;
 HEAP8[$4>>0] = $sf_min;
 HEAP8[$sf>>0] = -128;
 HEAP8[$sf_ok>>0] = -1;
 HEAP8[$delsf>>0] = -128;
 HEAP8[$seen_good_one>>0] = 0;
 _memset(($did_it|0),0,2048)|0;
 HEAP8[$i>>0] = 0;
 while(1) {
  $5 = HEAP8[$i>>0]|0;
  $6 = $5&255;
  $7 = ($6|0)<(8);
  if (!($7)) {
   break;
  }
  $8 = HEAP8[$delsf>>0]|0;
  $9 = $8&255;
  $10 = $9 >> 1;
  $11 = $10&255;
  HEAP8[$delsf>>0] = $11;
  $12 = HEAP8[$sf>>0]|0;
  $13 = $12&255;
  $14 = HEAP8[$4>>0]|0;
  $15 = $14&255;
  $16 = ($13|0)<=($15|0);
  do {
   if ($16) {
    $17 = HEAP8[$delsf>>0]|0;
    $18 = $17&255;
    $19 = HEAP8[$sf>>0]|0;
    $20 = $19&255;
    $21 = (($20) + ($18))|0;
    $22 = $21&255;
    HEAP8[$sf>>0] = $22;
   } else {
    $23 = HEAP32[$0>>2]|0;
    $24 = HEAP32[$1>>2]|0;
    $25 = +HEAPF32[$2>>2];
    $26 = HEAP32[$3>>2]|0;
    $27 = HEAP8[$sf>>0]|0;
    $28 = (_tri_calc_sfb_noise_x34($23,$24,$25,$26,$27,$did_it)|0);
    HEAP8[$bad>>0] = $28;
    $29 = HEAP8[$bad>>0]|0;
    $30 = ($29<<24>>24)!=(0);
    if ($30) {
     $31 = HEAP8[$delsf>>0]|0;
     $32 = $31&255;
     $33 = HEAP8[$sf>>0]|0;
     $34 = $33&255;
     $35 = (($34) - ($32))|0;
     $36 = $35&255;
     HEAP8[$sf>>0] = $36;
     break;
    } else {
     $37 = HEAP8[$sf>>0]|0;
     HEAP8[$sf_ok>>0] = $37;
     $38 = HEAP8[$delsf>>0]|0;
     $39 = $38&255;
     $40 = HEAP8[$sf>>0]|0;
     $41 = $40&255;
     $42 = (($41) + ($39))|0;
     $43 = $42&255;
     HEAP8[$sf>>0] = $43;
     HEAP8[$seen_good_one>>0] = 1;
     break;
    }
   }
  } while(0);
  $44 = HEAP8[$i>>0]|0;
  $45 = (($44) + 1)<<24>>24;
  HEAP8[$i>>0] = $45;
 }
 $46 = HEAP8[$seen_good_one>>0]|0;
 $47 = $46&255;
 $48 = ($47|0)>(0);
 if ($48) {
  $49 = HEAP8[$sf_ok>>0]|0;
  HEAP8[$sf>>0] = $49;
 }
 $50 = HEAP8[$sf>>0]|0;
 $51 = $50&255;
 $52 = HEAP8[$4>>0]|0;
 $53 = $52&255;
 $54 = ($51|0)<=($53|0);
 if (!($54)) {
  $56 = HEAP8[$sf>>0]|0;
  STACKTOP = sp;return ($56|0);
 }
 $55 = HEAP8[$4>>0]|0;
 HEAP8[$sf>>0] = $55;
 $56 = HEAP8[$sf>>0]|0;
 STACKTOP = sp;return ($56|0);
}
function _short_block_constrain($that,$vbrsf,$vbrsfmin,$vbrmax) {
 $that = $that|0;
 $vbrsf = $vbrsf|0;
 $vbrsfmin = $vbrsfmin|0;
 $vbrmax = $vbrmax|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $cfg = 0, $cod_info = 0, $delta = 0, $gfc = 0, $maxminsfb = 0, $maxover0 = 0, $maxover1 = 0, $mover = 0, $psymax = 0, $sf_temp = 0, $sfb = 0, $v = 0, $v0 = 0, $v1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0;
 $0 = sp + 220|0;
 $1 = sp + 216|0;
 $2 = sp + 212|0;
 $3 = sp + 208|0;
 $cod_info = sp + 204|0;
 $gfc = sp + 200|0;
 $cfg = sp + 196|0;
 $maxminsfb = sp + 192|0;
 $mover = sp + 188|0;
 $maxover0 = sp + 184|0;
 $maxover1 = sp + 180|0;
 $delta = sp + 176|0;
 $v = sp + 172|0;
 $v0 = sp + 168|0;
 $v1 = sp + 164|0;
 $sfb = sp + 160|0;
 $psymax = sp + 156|0;
 $sf_temp = sp;
 HEAP32[$0>>2] = $that;
 HEAP32[$1>>2] = $vbrsf;
 HEAP32[$2>>2] = $vbrsfmin;
 HEAP32[$3>>2] = $vbrmax;
 $4 = HEAP32[$0>>2]|0;
 $5 = (($4) + 16|0);
 $6 = HEAP32[$5>>2]|0;
 HEAP32[$cod_info>>2] = $6;
 $7 = HEAP32[$0>>2]|0;
 $8 = (($7) + 12|0);
 $9 = HEAP32[$8>>2]|0;
 HEAP32[$gfc>>2] = $9;
 $10 = HEAP32[$gfc>>2]|0;
 $11 = (($10) + 16|0);
 HEAP32[$cfg>>2] = $11;
 $12 = HEAP32[$0>>2]|0;
 $13 = (($12) + 20|0);
 $14 = HEAP32[$13>>2]|0;
 HEAP32[$maxminsfb>>2] = $14;
 HEAP32[$maxover0>>2] = 0;
 HEAP32[$maxover1>>2] = 0;
 HEAP32[$delta>>2] = 0;
 $15 = HEAP32[$cod_info>>2]|0;
 $16 = (($15) + 4864|0);
 $17 = HEAP32[$16>>2]|0;
 HEAP32[$psymax>>2] = $17;
 HEAP32[$sfb>>2] = 0;
 while(1) {
  $18 = HEAP32[$sfb>>2]|0;
  $19 = HEAP32[$psymax>>2]|0;
  $20 = ($18|0)<($19|0);
  if (!($20)) {
   break;
  }
  $21 = HEAP32[$3>>2]|0;
  $22 = HEAP32[$sfb>>2]|0;
  $23 = HEAP32[$1>>2]|0;
  $24 = (($23) + ($22<<2)|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = (($21) - ($25))|0;
  HEAP32[$v>>2] = $26;
  $27 = HEAP32[$delta>>2]|0;
  $28 = HEAP32[$v>>2]|0;
  $29 = ($27|0)<($28|0);
  if ($29) {
   $30 = HEAP32[$v>>2]|0;
   HEAP32[$delta>>2] = $30;
  }
  $31 = HEAP32[$v>>2]|0;
  $32 = HEAP32[$sfb>>2]|0;
  $33 = (101296 + ($32)|0);
  $34 = HEAP8[$33>>0]|0;
  $35 = $34&255;
  $36 = $35<<1;
  $37 = (56 + ($36))|0;
  $38 = (($31) - ($37))|0;
  HEAP32[$v0>>2] = $38;
  $39 = HEAP32[$v>>2]|0;
  $40 = HEAP32[$sfb>>2]|0;
  $41 = (101296 + ($40)|0);
  $42 = HEAP8[$41>>0]|0;
  $43 = $42&255;
  $44 = $43<<2;
  $45 = (56 + ($44))|0;
  $46 = (($39) - ($45))|0;
  HEAP32[$v1>>2] = $46;
  $47 = HEAP32[$maxover0>>2]|0;
  $48 = HEAP32[$v0>>2]|0;
  $49 = ($47|0)<($48|0);
  if ($49) {
   $50 = HEAP32[$v0>>2]|0;
   HEAP32[$maxover0>>2] = $50;
  }
  $51 = HEAP32[$maxover1>>2]|0;
  $52 = HEAP32[$v1>>2]|0;
  $53 = ($51|0)<($52|0);
  if ($53) {
   $54 = HEAP32[$v1>>2]|0;
   HEAP32[$maxover1>>2] = $54;
  }
  $55 = HEAP32[$sfb>>2]|0;
  $56 = (($55) + 1)|0;
  HEAP32[$sfb>>2] = $56;
 }
 $57 = HEAP32[$cfg>>2]|0;
 $58 = (($57) + 12|0);
 $59 = HEAP32[$58>>2]|0;
 $60 = ($59|0)==(2);
 $61 = HEAP32[$maxover0>>2]|0;
 if ($60) {
  $62 = HEAP32[$maxover1>>2]|0;
  $63 = ($61|0)<($62|0);
  $64 = HEAP32[$maxover0>>2]|0;
  $65 = HEAP32[$maxover1>>2]|0;
  $66 = $63 ? $64 : $65;
  HEAP32[$mover>>2] = $66;
 } else {
  HEAP32[$mover>>2] = $61;
 }
 $67 = HEAP32[$delta>>2]|0;
 $68 = HEAP32[$mover>>2]|0;
 $69 = ($67|0)>($68|0);
 if ($69) {
  $70 = HEAP32[$mover>>2]|0;
  HEAP32[$delta>>2] = $70;
 }
 $71 = HEAP32[$delta>>2]|0;
 $72 = HEAP32[$3>>2]|0;
 $73 = (($72) - ($71))|0;
 HEAP32[$3>>2] = $73;
 $74 = HEAP32[$mover>>2]|0;
 $75 = HEAP32[$maxover0>>2]|0;
 $76 = (($75) - ($74))|0;
 HEAP32[$maxover0>>2] = $76;
 $77 = HEAP32[$mover>>2]|0;
 $78 = HEAP32[$maxover1>>2]|0;
 $79 = (($78) - ($77))|0;
 HEAP32[$maxover1>>2] = $79;
 $80 = HEAP32[$maxover0>>2]|0;
 $81 = ($80|0)==(0);
 if ($81) {
  $82 = HEAP32[$cod_info>>2]|0;
  $83 = (($82) + 4836|0);
  HEAP32[$83>>2] = 0;
 } else {
  $84 = HEAP32[$maxover1>>2]|0;
  $85 = ($84|0)==(0);
  if ($85) {
   $86 = HEAP32[$cod_info>>2]|0;
   $87 = (($86) + 4836|0);
   HEAP32[$87>>2] = 1;
  }
 }
 $88 = HEAP32[$3>>2]|0;
 $89 = HEAP32[$maxminsfb>>2]|0;
 $90 = ($88|0)<($89|0);
 if ($90) {
  $91 = HEAP32[$maxminsfb>>2]|0;
  HEAP32[$3>>2] = $91;
 }
 $92 = HEAP32[$3>>2]|0;
 $93 = HEAP32[$cod_info>>2]|0;
 $94 = (($93) + 4780|0);
 HEAP32[$94>>2] = $92;
 $95 = HEAP32[$cod_info>>2]|0;
 $96 = (($95) + 4780|0);
 $97 = HEAP32[$96>>2]|0;
 $98 = ($97|0)<(0);
 $99 = HEAP32[$cod_info>>2]|0;
 $100 = (($99) + 4780|0);
 if ($98) {
  HEAP32[$100>>2] = 0;
 } else {
  $101 = HEAP32[$100>>2]|0;
  $102 = ($101|0)>(255);
  if ($102) {
   $103 = HEAP32[$cod_info>>2]|0;
   $104 = (($103) + 4780|0);
   HEAP32[$104>>2] = 255;
  }
 }
 HEAP32[$sfb>>2] = 0;
 while(1) {
  $105 = HEAP32[$sfb>>2]|0;
  $106 = ($105|0)<(39);
  if (!($106)) {
   break;
  }
  $107 = HEAP32[$sfb>>2]|0;
  $108 = HEAP32[$1>>2]|0;
  $109 = (($108) + ($107<<2)|0);
  $110 = HEAP32[$109>>2]|0;
  $111 = HEAP32[$3>>2]|0;
  $112 = (($110) - ($111))|0;
  $113 = HEAP32[$sfb>>2]|0;
  $114 = (($sf_temp) + ($113<<2)|0);
  HEAP32[$114>>2] = $112;
  $115 = HEAP32[$sfb>>2]|0;
  $116 = (($115) + 1)|0;
  HEAP32[$sfb>>2] = $116;
 }
 $117 = HEAP32[$cod_info>>2]|0;
 $118 = HEAP32[$0>>2]|0;
 $119 = (($118) + 24|0);
 _set_subblock_gain($117,$119,$sf_temp);
 $120 = HEAP32[$cod_info>>2]|0;
 $121 = HEAP32[$2>>2]|0;
 _set_scalefacs($120,$121,$sf_temp,101296);
 STACKTOP = sp;return;
}
function _long_block_constrain($that,$vbrsf,$vbrsfmin,$vbrmax) {
 $that = $that|0;
 $vbrsf = $vbrsf|0;
 $vbrsfmin = $vbrsfmin|0;
 $vbrmax = $vbrmax|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $a = 0, $b = 0, $cfg = 0, $cod_info = 0, $delta = 0, $gain = 0, $gain1 = 0, $gfc = 0, $max_rangep = 0;
 var $maxminsfb = 0, $maxover0 = 0, $maxover0p = 0, $maxover1 = 0, $maxover1p = 0, $mover = 0, $psymax = 0, $sf_temp = 0, $sfb = 0, $v = 0, $v0 = 0, $v0p = 0, $v1 = 0, $v1p = 0, $vm0p = 0, $vm1p = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 272|0;
 $0 = sp + 264|0;
 $1 = sp + 260|0;
 $2 = sp + 256|0;
 $3 = sp + 252|0;
 $cod_info = sp + 248|0;
 $gfc = sp + 244|0;
 $cfg = sp + 240|0;
 $max_rangep = sp + 236|0;
 $maxminsfb = sp + 232|0;
 $sfb = sp + 228|0;
 $maxover0 = sp + 224|0;
 $maxover1 = sp + 220|0;
 $maxover0p = sp + 216|0;
 $maxover1p = sp + 212|0;
 $mover = sp + 208|0;
 $delta = sp + 204|0;
 $v = sp + 200|0;
 $v0 = sp + 196|0;
 $v1 = sp + 192|0;
 $v0p = sp + 188|0;
 $v1p = sp + 184|0;
 $vm0p = sp + 180|0;
 $vm1p = sp + 176|0;
 $psymax = sp + 172|0;
 $gain = sp + 168|0;
 $a = sp + 164|0;
 $gain1 = sp + 160|0;
 $b = sp + 156|0;
 $sf_temp = sp;
 HEAP32[$0>>2] = $that;
 HEAP32[$1>>2] = $vbrsf;
 HEAP32[$2>>2] = $vbrsfmin;
 HEAP32[$3>>2] = $vbrmax;
 $4 = HEAP32[$0>>2]|0;
 $5 = (($4) + 16|0);
 $6 = HEAP32[$5>>2]|0;
 HEAP32[$cod_info>>2] = $6;
 $7 = HEAP32[$0>>2]|0;
 $8 = (($7) + 12|0);
 $9 = HEAP32[$8>>2]|0;
 HEAP32[$gfc>>2] = $9;
 $10 = HEAP32[$gfc>>2]|0;
 $11 = (($10) + 16|0);
 HEAP32[$cfg>>2] = $11;
 $12 = HEAP32[$0>>2]|0;
 $13 = (($12) + 20|0);
 $14 = HEAP32[$13>>2]|0;
 HEAP32[$maxminsfb>>2] = $14;
 HEAP32[$delta>>2] = 0;
 HEAP32[$vm0p>>2] = 1;
 HEAP32[$vm1p>>2] = 1;
 $15 = HEAP32[$cod_info>>2]|0;
 $16 = (($15) + 4864|0);
 $17 = HEAP32[$16>>2]|0;
 HEAP32[$psymax>>2] = $17;
 $18 = HEAP32[$cfg>>2]|0;
 $19 = (($18) + 60|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = ($20|0)==(2);
 $22 = $21 ? 101248 : 101272;
 HEAP32[$max_rangep>>2] = $22;
 HEAP32[$maxover0>>2] = 0;
 HEAP32[$maxover1>>2] = 0;
 HEAP32[$maxover0p>>2] = 0;
 HEAP32[$maxover1p>>2] = 0;
 HEAP32[$sfb>>2] = 0;
 while(1) {
  $23 = HEAP32[$sfb>>2]|0;
  $24 = HEAP32[$psymax>>2]|0;
  $25 = ($23|0)<($24|0);
  if (!($25)) {
   break;
  }
  $26 = HEAP32[$3>>2]|0;
  $27 = HEAP32[$sfb>>2]|0;
  $28 = HEAP32[$1>>2]|0;
  $29 = (($28) + ($27<<2)|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = (($26) - ($30))|0;
  HEAP32[$v>>2] = $31;
  $32 = HEAP32[$delta>>2]|0;
  $33 = HEAP32[$v>>2]|0;
  $34 = ($32|0)<($33|0);
  if ($34) {
   $35 = HEAP32[$v>>2]|0;
   HEAP32[$delta>>2] = $35;
  }
  $36 = HEAP32[$v>>2]|0;
  $37 = HEAP32[$sfb>>2]|0;
  $38 = (101248 + ($37)|0);
  $39 = HEAP8[$38>>0]|0;
  $40 = $39&255;
  $41 = $40<<1;
  $42 = (($36) - ($41))|0;
  HEAP32[$v0>>2] = $42;
  $43 = HEAP32[$v>>2]|0;
  $44 = HEAP32[$sfb>>2]|0;
  $45 = (101248 + ($44)|0);
  $46 = HEAP8[$45>>0]|0;
  $47 = $46&255;
  $48 = $47<<2;
  $49 = (($43) - ($48))|0;
  HEAP32[$v1>>2] = $49;
  $50 = HEAP32[$v>>2]|0;
  $51 = HEAP32[$sfb>>2]|0;
  $52 = HEAP32[$max_rangep>>2]|0;
  $53 = (($52) + ($51)|0);
  $54 = HEAP8[$53>>0]|0;
  $55 = $54&255;
  $56 = HEAP32[$sfb>>2]|0;
  $57 = (21376 + ($56<<2)|0);
  $58 = HEAP32[$57>>2]|0;
  $59 = (($55) + ($58))|0;
  $60 = $59<<1;
  $61 = (($50) - ($60))|0;
  HEAP32[$v0p>>2] = $61;
  $62 = HEAP32[$v>>2]|0;
  $63 = HEAP32[$sfb>>2]|0;
  $64 = HEAP32[$max_rangep>>2]|0;
  $65 = (($64) + ($63)|0);
  $66 = HEAP8[$65>>0]|0;
  $67 = $66&255;
  $68 = HEAP32[$sfb>>2]|0;
  $69 = (21376 + ($68<<2)|0);
  $70 = HEAP32[$69>>2]|0;
  $71 = (($67) + ($70))|0;
  $72 = $71<<2;
  $73 = (($62) - ($72))|0;
  HEAP32[$v1p>>2] = $73;
  $74 = HEAP32[$maxover0>>2]|0;
  $75 = HEAP32[$v0>>2]|0;
  $76 = ($74|0)<($75|0);
  if ($76) {
   $77 = HEAP32[$v0>>2]|0;
   HEAP32[$maxover0>>2] = $77;
  }
  $78 = HEAP32[$maxover1>>2]|0;
  $79 = HEAP32[$v1>>2]|0;
  $80 = ($78|0)<($79|0);
  if ($80) {
   $81 = HEAP32[$v1>>2]|0;
   HEAP32[$maxover1>>2] = $81;
  }
  $82 = HEAP32[$maxover0p>>2]|0;
  $83 = HEAP32[$v0p>>2]|0;
  $84 = ($82|0)<($83|0);
  if ($84) {
   $85 = HEAP32[$v0p>>2]|0;
   HEAP32[$maxover0p>>2] = $85;
  }
  $86 = HEAP32[$maxover1p>>2]|0;
  $87 = HEAP32[$v1p>>2]|0;
  $88 = ($86|0)<($87|0);
  if ($88) {
   $89 = HEAP32[$v1p>>2]|0;
   HEAP32[$maxover1p>>2] = $89;
  }
  $90 = HEAP32[$sfb>>2]|0;
  $91 = (($90) + 1)|0;
  HEAP32[$sfb>>2] = $91;
 }
 $92 = HEAP32[$vm0p>>2]|0;
 $93 = ($92|0)==(1);
 L20: do {
  if ($93) {
   $94 = HEAP32[$3>>2]|0;
   $95 = HEAP32[$maxover0p>>2]|0;
   $96 = (($94) - ($95))|0;
   HEAP32[$gain>>2] = $96;
   $97 = HEAP32[$gain>>2]|0;
   $98 = HEAP32[$maxminsfb>>2]|0;
   $99 = ($97|0)<($98|0);
   if ($99) {
    $100 = HEAP32[$maxminsfb>>2]|0;
    HEAP32[$gain>>2] = $100;
   }
   HEAP32[$sfb>>2] = 0;
   while(1) {
    $101 = HEAP32[$sfb>>2]|0;
    $102 = HEAP32[$psymax>>2]|0;
    $103 = ($101|0)<($102|0);
    if (!($103)) {
     break L20;
    }
    $104 = HEAP32[$gain>>2]|0;
    $105 = HEAP32[$sfb>>2]|0;
    $106 = HEAP32[$2>>2]|0;
    $107 = (($106) + ($105<<2)|0);
    $108 = HEAP32[$107>>2]|0;
    $109 = (($104) - ($108))|0;
    $110 = HEAP32[$sfb>>2]|0;
    $111 = (21376 + ($110<<2)|0);
    $112 = HEAP32[$111>>2]|0;
    $113 = $112<<1;
    $114 = (($109) - ($113))|0;
    HEAP32[$a>>2] = $114;
    $115 = HEAP32[$a>>2]|0;
    $116 = ($115|0)<=(0);
    if ($116) {
     break;
    }
    $117 = HEAP32[$sfb>>2]|0;
    $118 = (($117) + 1)|0;
    HEAP32[$sfb>>2] = $118;
   }
   HEAP32[$vm0p>>2] = 0;
   HEAP32[$vm1p>>2] = 0;
  }
 } while(0);
 $119 = HEAP32[$vm1p>>2]|0;
 $120 = ($119|0)==(1);
 L31: do {
  if ($120) {
   $121 = HEAP32[$3>>2]|0;
   $122 = HEAP32[$maxover1p>>2]|0;
   $123 = (($121) - ($122))|0;
   HEAP32[$gain1>>2] = $123;
   $124 = HEAP32[$gain1>>2]|0;
   $125 = HEAP32[$maxminsfb>>2]|0;
   $126 = ($124|0)<($125|0);
   if ($126) {
    $127 = HEAP32[$maxminsfb>>2]|0;
    HEAP32[$gain1>>2] = $127;
   }
   HEAP32[$sfb>>2] = 0;
   while(1) {
    $128 = HEAP32[$sfb>>2]|0;
    $129 = HEAP32[$psymax>>2]|0;
    $130 = ($128|0)<($129|0);
    if (!($130)) {
     break L31;
    }
    $131 = HEAP32[$gain1>>2]|0;
    $132 = HEAP32[$sfb>>2]|0;
    $133 = HEAP32[$2>>2]|0;
    $134 = (($133) + ($132<<2)|0);
    $135 = HEAP32[$134>>2]|0;
    $136 = (($131) - ($135))|0;
    $137 = HEAP32[$sfb>>2]|0;
    $138 = (21376 + ($137<<2)|0);
    $139 = HEAP32[$138>>2]|0;
    $140 = $139<<2;
    $141 = (($136) - ($140))|0;
    HEAP32[$b>>2] = $141;
    $142 = HEAP32[$b>>2]|0;
    $143 = ($142|0)<=(0);
    if ($143) {
     break;
    }
    $144 = HEAP32[$sfb>>2]|0;
    $145 = (($144) + 1)|0;
    HEAP32[$sfb>>2] = $145;
   }
   HEAP32[$vm1p>>2] = 0;
  }
 } while(0);
 $146 = HEAP32[$vm0p>>2]|0;
 $147 = ($146|0)==(0);
 if ($147) {
  $148 = HEAP32[$maxover0>>2]|0;
  HEAP32[$maxover0p>>2] = $148;
 }
 $149 = HEAP32[$vm1p>>2]|0;
 $150 = ($149|0)==(0);
 if ($150) {
  $151 = HEAP32[$maxover1>>2]|0;
  HEAP32[$maxover1p>>2] = $151;
 }
 $152 = HEAP32[$cfg>>2]|0;
 $153 = (($152) + 12|0);
 $154 = HEAP32[$153>>2]|0;
 $155 = ($154|0)!=(2);
 if ($155) {
  $156 = HEAP32[$maxover0>>2]|0;
  HEAP32[$maxover1>>2] = $156;
  $157 = HEAP32[$maxover0p>>2]|0;
  HEAP32[$maxover1p>>2] = $157;
 }
 $158 = HEAP32[$maxover0>>2]|0;
 $159 = HEAP32[$maxover0p>>2]|0;
 $160 = ($158|0)<($159|0);
 $161 = HEAP32[$maxover0>>2]|0;
 $162 = HEAP32[$maxover0p>>2]|0;
 $163 = $160 ? $161 : $162;
 HEAP32[$mover>>2] = $163;
 $164 = HEAP32[$mover>>2]|0;
 $165 = HEAP32[$maxover1>>2]|0;
 $166 = ($164|0)<($165|0);
 $167 = HEAP32[$mover>>2]|0;
 $168 = HEAP32[$maxover1>>2]|0;
 $169 = $166 ? $167 : $168;
 HEAP32[$mover>>2] = $169;
 $170 = HEAP32[$mover>>2]|0;
 $171 = HEAP32[$maxover1p>>2]|0;
 $172 = ($170|0)<($171|0);
 $173 = HEAP32[$mover>>2]|0;
 $174 = HEAP32[$maxover1p>>2]|0;
 $175 = $172 ? $173 : $174;
 HEAP32[$mover>>2] = $175;
 $176 = HEAP32[$delta>>2]|0;
 $177 = HEAP32[$mover>>2]|0;
 $178 = ($176|0)>($177|0);
 if ($178) {
  $179 = HEAP32[$mover>>2]|0;
  HEAP32[$delta>>2] = $179;
 }
 $180 = HEAP32[$delta>>2]|0;
 $181 = HEAP32[$3>>2]|0;
 $182 = (($181) - ($180))|0;
 HEAP32[$3>>2] = $182;
 $183 = HEAP32[$3>>2]|0;
 $184 = HEAP32[$maxminsfb>>2]|0;
 $185 = ($183|0)<($184|0);
 if ($185) {
  $186 = HEAP32[$maxminsfb>>2]|0;
  HEAP32[$3>>2] = $186;
 }
 $187 = HEAP32[$mover>>2]|0;
 $188 = HEAP32[$maxover0>>2]|0;
 $189 = (($188) - ($187))|0;
 HEAP32[$maxover0>>2] = $189;
 $190 = HEAP32[$mover>>2]|0;
 $191 = HEAP32[$maxover0p>>2]|0;
 $192 = (($191) - ($190))|0;
 HEAP32[$maxover0p>>2] = $192;
 $193 = HEAP32[$mover>>2]|0;
 $194 = HEAP32[$maxover1>>2]|0;
 $195 = (($194) - ($193))|0;
 HEAP32[$maxover1>>2] = $195;
 $196 = HEAP32[$mover>>2]|0;
 $197 = HEAP32[$maxover1p>>2]|0;
 $198 = (($197) - ($196))|0;
 HEAP32[$maxover1p>>2] = $198;
 $199 = HEAP32[$maxover0>>2]|0;
 $200 = ($199|0)==(0);
 do {
  if ($200) {
   $201 = HEAP32[$cod_info>>2]|0;
   $202 = (($201) + 4836|0);
   HEAP32[$202>>2] = 0;
   $203 = HEAP32[$cod_info>>2]|0;
   $204 = (($203) + 4832|0);
   HEAP32[$204>>2] = 0;
   HEAP32[$max_rangep>>2] = 101248;
  } else {
   $205 = HEAP32[$maxover0p>>2]|0;
   $206 = ($205|0)==(0);
   if ($206) {
    $207 = HEAP32[$cod_info>>2]|0;
    $208 = (($207) + 4836|0);
    HEAP32[$208>>2] = 0;
    $209 = HEAP32[$cod_info>>2]|0;
    $210 = (($209) + 4832|0);
    HEAP32[$210>>2] = 1;
    break;
   }
   $211 = HEAP32[$maxover1>>2]|0;
   $212 = ($211|0)==(0);
   if ($212) {
    $213 = HEAP32[$cod_info>>2]|0;
    $214 = (($213) + 4836|0);
    HEAP32[$214>>2] = 1;
    $215 = HEAP32[$cod_info>>2]|0;
    $216 = (($215) + 4832|0);
    HEAP32[$216>>2] = 0;
    HEAP32[$max_rangep>>2] = 101248;
    break;
   }
   $217 = HEAP32[$maxover1p>>2]|0;
   $218 = ($217|0)==(0);
   if ($218) {
    $219 = HEAP32[$cod_info>>2]|0;
    $220 = (($219) + 4836|0);
    HEAP32[$220>>2] = 1;
    $221 = HEAP32[$cod_info>>2]|0;
    $222 = (($221) + 4832|0);
    HEAP32[$222>>2] = 1;
   }
  }
 } while(0);
 $223 = HEAP32[$3>>2]|0;
 $224 = HEAP32[$cod_info>>2]|0;
 $225 = (($224) + 4780|0);
 HEAP32[$225>>2] = $223;
 $226 = HEAP32[$cod_info>>2]|0;
 $227 = (($226) + 4780|0);
 $228 = HEAP32[$227>>2]|0;
 $229 = ($228|0)<(0);
 $230 = HEAP32[$cod_info>>2]|0;
 $231 = (($230) + 4780|0);
 if ($229) {
  HEAP32[$231>>2] = 0;
 } else {
  $232 = HEAP32[$231>>2]|0;
  $233 = ($232|0)>(255);
  if ($233) {
   $234 = HEAP32[$cod_info>>2]|0;
   $235 = (($234) + 4780|0);
   HEAP32[$235>>2] = 255;
  }
 }
 HEAP32[$sfb>>2] = 0;
 while(1) {
  $236 = HEAP32[$sfb>>2]|0;
  $237 = ($236|0)<(39);
  if (!($237)) {
   break;
  }
  $238 = HEAP32[$sfb>>2]|0;
  $239 = HEAP32[$1>>2]|0;
  $240 = (($239) + ($238<<2)|0);
  $241 = HEAP32[$240>>2]|0;
  $242 = HEAP32[$3>>2]|0;
  $243 = (($241) - ($242))|0;
  $244 = HEAP32[$sfb>>2]|0;
  $245 = (($sf_temp) + ($244<<2)|0);
  HEAP32[$245>>2] = $243;
  $246 = HEAP32[$sfb>>2]|0;
  $247 = (($246) + 1)|0;
  HEAP32[$sfb>>2] = $247;
 }
 $248 = HEAP32[$cod_info>>2]|0;
 $249 = HEAP32[$2>>2]|0;
 $250 = HEAP32[$max_rangep>>2]|0;
 _set_scalefacs($248,$249,$sf_temp,$250);
 STACKTOP = sp;return;
}
function _block_sf($that,$l3_xmin,$vbrsf,$vbrsfmin) {
 $that = $that|0;
 $l3_xmin = $l3_xmin|0;
 $vbrsf = $vbrsf|0;
 $vbrsfmin = $vbrsfmin|0;
 var $$ = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0.0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0;
 var $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0;
 var $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0.0, $59 = 0.0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $energy_above_cutoff = 0, $i = 0, $j = 0, $l = 0, $m = 0, $m1 = 0, $m2 = 0, $m_o = 0, $max_nonzero_coeff = 0, $max_xr34 = 0, $maxsf = 0, $psymax = 0, $sfb = 0, $w = 0, $width = 0, $xr = 0, $xr34_orig = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0;
 $0 = sp + 68|0;
 $1 = sp + 64|0;
 $2 = sp + 60|0;
 $3 = sp + 56|0;
 $max_xr34 = sp + 52|0;
 $xr = sp + 48|0;
 $xr34_orig = sp + 44|0;
 $width = sp + 40|0;
 $energy_above_cutoff = sp + 36|0;
 $max_nonzero_coeff = sp + 32|0;
 $maxsf = sp + 74|0;
 $sfb = sp + 28|0;
 $m_o = sp + 24|0;
 $j = sp + 20|0;
 $i = sp + 16|0;
 $psymax = sp + 12|0;
 $w = sp + 8|0;
 $m = sp + 4|0;
 $l = sp;
 $m1 = sp + 73|0;
 $m2 = sp + 72|0;
 HEAP32[$0>>2] = $that;
 HEAP32[$1>>2] = $l3_xmin;
 HEAP32[$2>>2] = $vbrsf;
 HEAP32[$3>>2] = $vbrsfmin;
 $4 = HEAP32[$0>>2]|0;
 $5 = (($4) + 16|0);
 $6 = HEAP32[$5>>2]|0;
 HEAP32[$xr>>2] = $6;
 $7 = HEAP32[$0>>2]|0;
 $8 = (($7) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 HEAP32[$xr34_orig>>2] = $9;
 $10 = HEAP32[$0>>2]|0;
 $11 = (($10) + 16|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (($12) + 4872|0);
 HEAP32[$width>>2] = $13;
 $14 = HEAP32[$0>>2]|0;
 $15 = (($14) + 16|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = (($16) + 5212|0);
 HEAP32[$energy_above_cutoff>>2] = $17;
 $18 = HEAP32[$0>>2]|0;
 $19 = (($18) + 16|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = (($20) + 5208|0);
 $22 = HEAP32[$21>>2]|0;
 HEAP32[$max_nonzero_coeff>>2] = $22;
 HEAP8[$maxsf>>0] = 0;
 HEAP32[$sfb>>2] = 0;
 HEAP32[$m_o>>2] = -1;
 HEAP32[$j>>2] = 0;
 HEAP32[$i>>2] = 0;
 $23 = HEAP32[$0>>2]|0;
 $24 = (($23) + 16|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = (($25) + 4864|0);
 $27 = HEAP32[$26>>2]|0;
 HEAP32[$psymax>>2] = $27;
 $28 = HEAP32[$0>>2]|0;
 $29 = (($28) + 20|0);
 HEAP32[$29>>2] = 0;
 $30 = HEAP32[$0>>2]|0;
 $31 = (($30) + 24|0);
 HEAP32[$31>>2] = 0;
 $32 = HEAP32[$0>>2]|0;
 $33 = (($32) + 24|0);
 $34 = (($33) + 4|0);
 HEAP32[$34>>2] = 0;
 $35 = HEAP32[$0>>2]|0;
 $36 = (($35) + 24|0);
 $37 = (($36) + 8|0);
 HEAP32[$37>>2] = 0;
 while(1) {
  $38 = HEAP32[$j>>2]|0;
  $39 = HEAP32[$max_nonzero_coeff>>2]|0;
  $40 = ($38>>>0)<=($39>>>0);
  if (!($40)) {
   break;
  }
  $41 = HEAP32[$sfb>>2]|0;
  $42 = HEAP32[$width>>2]|0;
  $43 = (($42) + ($41<<2)|0);
  $44 = HEAP32[$43>>2]|0;
  HEAP32[$w>>2] = $44;
  $45 = HEAP32[$max_nonzero_coeff>>2]|0;
  $46 = HEAP32[$j>>2]|0;
  $47 = (($45) - ($46))|0;
  $48 = (($47) + 1)|0;
  HEAP32[$m>>2] = $48;
  $49 = HEAP32[$w>>2]|0;
  HEAP32[$l>>2] = $49;
  $50 = HEAP32[$l>>2]|0;
  $51 = HEAP32[$m>>2]|0;
  $52 = ($50>>>0)>($51>>>0);
  if ($52) {
   $53 = HEAP32[$m>>2]|0;
   HEAP32[$l>>2] = $53;
  }
  $54 = HEAP32[$j>>2]|0;
  $55 = HEAP32[$xr34_orig>>2]|0;
  $56 = (($55) + ($54<<2)|0);
  $57 = HEAP32[$l>>2]|0;
  $58 = (+_vec_max_c($56,$57));
  HEAPF32[$max_xr34>>2] = $58;
  $59 = +HEAPF32[$max_xr34>>2];
  $60 = (_find_lowest_scalefac($59)|0);
  HEAP8[$m1>>0] = $60;
  $61 = HEAP8[$m1>>0]|0;
  $62 = $61&255;
  $63 = HEAP32[$sfb>>2]|0;
  $64 = HEAP32[$3>>2]|0;
  $65 = (($64) + ($63<<2)|0);
  HEAP32[$65>>2] = $62;
  $66 = HEAP32[$0>>2]|0;
  $67 = (($66) + 20|0);
  $68 = HEAP32[$67>>2]|0;
  $69 = HEAP8[$m1>>0]|0;
  $70 = $69&255;
  $71 = ($68|0)<($70|0);
  if ($71) {
   $72 = HEAP8[$m1>>0]|0;
   $73 = $72&255;
   $74 = HEAP32[$0>>2]|0;
   $75 = (($74) + 20|0);
   HEAP32[$75>>2] = $73;
  }
  $76 = HEAP32[$i>>2]|0;
  $77 = HEAP32[$0>>2]|0;
  $78 = (($77) + 24|0);
  $79 = (($78) + ($76<<2)|0);
  $80 = HEAP32[$79>>2]|0;
  $81 = HEAP8[$m1>>0]|0;
  $82 = $81&255;
  $83 = ($80|0)<($82|0);
  if ($83) {
   $84 = HEAP8[$m1>>0]|0;
   $85 = $84&255;
   $86 = HEAP32[$i>>2]|0;
   $87 = HEAP32[$0>>2]|0;
   $88 = (($87) + 24|0);
   $89 = (($88) + ($86<<2)|0);
   HEAP32[$89>>2] = $85;
  }
  $90 = HEAP32[$i>>2]|0;
  $91 = (($90) + 1)|0;
  HEAP32[$i>>2] = $91;
  $92 = ($91>>>0)>(2);
  $$ = $92 ? 0 : $91;
  HEAP32[$i>>2] = $$;
  $93 = HEAP32[$sfb>>2]|0;
  $94 = HEAP32[$psymax>>2]|0;
  $95 = ($93|0)<($94|0);
  do {
   if ($95) {
    $96 = HEAP32[$w>>2]|0;
    $97 = ($96>>>0)>(2);
    if ($97) {
     $98 = HEAP32[$sfb>>2]|0;
     $99 = HEAP32[$energy_above_cutoff>>2]|0;
     $100 = (($99) + ($98)|0);
     $101 = HEAP8[$100>>0]|0;
     $102 = ($101<<24>>24)!=(0);
     if (!($102)) {
      HEAP8[$m2>>0] = -1;
      HEAP8[$maxsf>>0] = -1;
      break;
     }
     $103 = HEAP32[$0>>2]|0;
     $104 = (($103) + 4|0);
     $105 = HEAP32[$104>>2]|0;
     $106 = HEAP32[$j>>2]|0;
     $107 = HEAP32[$xr>>2]|0;
     $108 = (($107) + ($106<<2)|0);
     $109 = HEAP32[$j>>2]|0;
     $110 = HEAP32[$xr34_orig>>2]|0;
     $111 = (($110) + ($109<<2)|0);
     $112 = HEAP32[$sfb>>2]|0;
     $113 = HEAP32[$1>>2]|0;
     $114 = (($113) + ($112<<2)|0);
     $115 = +HEAPF32[$114>>2];
     $116 = HEAP32[$l>>2]|0;
     $117 = HEAP8[$m1>>0]|0;
     $118 = (FUNCTION_TABLE_iiidii[$105 & 3]($108,$111,$115,$116,$117)|0);
     HEAP8[$m2>>0] = $118;
     $119 = HEAP8[$maxsf>>0]|0;
     $120 = $119&255;
     $121 = HEAP8[$m2>>0]|0;
     $122 = $121&255;
     $123 = ($120|0)<($122|0);
     if ($123) {
      $124 = HEAP8[$m2>>0]|0;
      HEAP8[$maxsf>>0] = $124;
     }
     $125 = HEAP32[$m_o>>2]|0;
     $126 = HEAP8[$m2>>0]|0;
     $127 = $126&255;
     $128 = ($125|0)<($127|0);
     if ($128) {
      $129 = HEAP8[$m2>>0]|0;
      $130 = $129&255;
      $131 = ($130|0)<(255);
      if ($131) {
       $132 = HEAP8[$m2>>0]|0;
       $133 = $132&255;
       HEAP32[$m_o>>2] = $133;
      }
     }
    } else {
     label = 18;
    }
   } else {
    label = 18;
   }
  } while(0);
  if ((label|0) == 18) {
   label = 0;
   $134 = HEAP8[$maxsf>>0]|0;
   $135 = $134&255;
   $136 = HEAP8[$m1>>0]|0;
   $137 = $136&255;
   $138 = ($135|0)<($137|0);
   if ($138) {
    $139 = HEAP8[$m1>>0]|0;
    HEAP8[$maxsf>>0] = $139;
   }
   $140 = HEAP8[$maxsf>>0]|0;
   HEAP8[$m2>>0] = $140;
  }
  $141 = HEAP8[$m2>>0]|0;
  $142 = $141&255;
  $143 = HEAP32[$sfb>>2]|0;
  $144 = HEAP32[$2>>2]|0;
  $145 = (($144) + ($143<<2)|0);
  HEAP32[$145>>2] = $142;
  $146 = HEAP32[$sfb>>2]|0;
  $147 = (($146) + 1)|0;
  HEAP32[$sfb>>2] = $147;
  $148 = HEAP32[$w>>2]|0;
  $149 = HEAP32[$j>>2]|0;
  $150 = (($149) + ($148))|0;
  HEAP32[$j>>2] = $150;
 }
 while(1) {
  $151 = HEAP32[$sfb>>2]|0;
  $152 = ($151|0)<(39);
  if (!($152)) {
   break;
  }
  $153 = HEAP8[$maxsf>>0]|0;
  $154 = $153&255;
  $155 = HEAP32[$sfb>>2]|0;
  $156 = HEAP32[$2>>2]|0;
  $157 = (($156) + ($155<<2)|0);
  HEAP32[$157>>2] = $154;
  $158 = HEAP32[$sfb>>2]|0;
  $159 = HEAP32[$3>>2]|0;
  $160 = (($159) + ($158<<2)|0);
  HEAP32[$160>>2] = 0;
  $161 = HEAP32[$sfb>>2]|0;
  $162 = (($161) + 1)|0;
  HEAP32[$sfb>>2] = $162;
 }
 $163 = HEAP32[$m_o>>2]|0;
 $164 = ($163|0)>(-1);
 if (!($164)) {
  $180 = HEAP8[$maxsf>>0]|0;
  $181 = $180&255;
  STACKTOP = sp;return ($181|0);
 }
 $165 = HEAP32[$m_o>>2]|0;
 $166 = $165&255;
 HEAP8[$maxsf>>0] = $166;
 HEAP32[$sfb>>2] = 0;
 while(1) {
  $167 = HEAP32[$sfb>>2]|0;
  $168 = ($167|0)<(39);
  if (!($168)) {
   break;
  }
  $169 = HEAP32[$sfb>>2]|0;
  $170 = HEAP32[$2>>2]|0;
  $171 = (($170) + ($169<<2)|0);
  $172 = HEAP32[$171>>2]|0;
  $173 = ($172|0)==(255);
  if ($173) {
   $174 = HEAP32[$m_o>>2]|0;
   $175 = HEAP32[$sfb>>2]|0;
   $176 = HEAP32[$2>>2]|0;
   $177 = (($176) + ($175<<2)|0);
   HEAP32[$177>>2] = $174;
  }
  $178 = HEAP32[$sfb>>2]|0;
  $179 = (($178) + 1)|0;
  HEAP32[$sfb>>2] = $179;
 }
 $180 = HEAP8[$maxsf>>0]|0;
 $181 = $180&255;
 STACKTOP = sp;return ($181|0);
}
function _bitcount($that) {
 $that = $that|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $rc = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $0 = sp + 8|0;
 $rc = sp + 4|0;
 HEAP32[$0>>2] = $that;
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = HEAP32[$0>>2]|0;
 $5 = (($4) + 16|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (_scale_bitcount($3,$6)|0);
 HEAP32[$rc>>2] = $7;
 $8 = HEAP32[$rc>>2]|0;
 $9 = ($8|0)==(0);
 if ($9) {
  STACKTOP = sp;return;
 } else {
  $10 = HEAP32[$0>>2]|0;
  $11 = (($10) + 12|0);
  $12 = HEAP32[$11>>2]|0;
  _lame_errorf($12,101184,$vararg_buffer);
  _exit(-1);
  // unreachable;
 }
}
function _quantizeAndCountBits($that) {
 $that = $that|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp;
 HEAP32[$0>>2] = $that;
 $1 = HEAP32[$0>>2]|0;
 _quantize_x34($1);
 $2 = HEAP32[$0>>2]|0;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = HEAP32[$0>>2]|0;
 $6 = (($5) + 16|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (_noquant_count_bits($4,$7,0)|0);
 $9 = HEAP32[$0>>2]|0;
 $10 = (($9) + 16|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (($11) + 4768|0);
 HEAP32[$12>>2] = $8;
 $13 = HEAP32[$0>>2]|0;
 $14 = (($13) + 16|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = (($15) + 4768|0);
 $17 = HEAP32[$16>>2]|0;
 STACKTOP = sp;return ($17|0);
}
function _reduce_bit_usage($gfc,$gr,$ch) {
 $gfc = $gfc|0;
 $gr = $gr|0;
 $ch = $ch|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cfg = 0, $cod_info = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = sp + 16|0;
 $1 = sp + 12|0;
 $2 = sp + 8|0;
 $cfg = sp + 4|0;
 $cod_info = sp;
 HEAP32[$0>>2] = $gfc;
 HEAP32[$1>>2] = $gr;
 HEAP32[$2>>2] = $ch;
 $3 = HEAP32[$0>>2]|0;
 $4 = (($3) + 16|0);
 HEAP32[$cfg>>2] = $4;
 $5 = HEAP32[$2>>2]|0;
 $6 = HEAP32[$1>>2]|0;
 $7 = HEAP32[$0>>2]|0;
 $8 = (($7) + 304|0);
 $9 = (($8) + (($6*10504)|0)|0);
 $10 = (($9) + (($5*5252)|0)|0);
 HEAP32[$cod_info>>2] = $10;
 $11 = HEAP32[$0>>2]|0;
 $12 = HEAP32[$1>>2]|0;
 $13 = HEAP32[$2>>2]|0;
 $14 = HEAP32[$0>>2]|0;
 $15 = (($14) + 304|0);
 _best_scalefac_store($11,$12,$13,$15);
 $16 = HEAP32[$cfg>>2]|0;
 $17 = (($16) + 20|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = ($18|0)==(1);
 if ($19) {
  $20 = HEAP32[$0>>2]|0;
  $21 = HEAP32[$cod_info>>2]|0;
  _best_huffman_divide($20,$21);
 }
 $22 = HEAP32[$cod_info>>2]|0;
 $23 = (($22) + 4768|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = HEAP32[$cod_info>>2]|0;
 $26 = (($25) + 4844|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = (($24) + ($27))|0;
 STACKTOP = sp;return ($28|0);
}
function _cutDistribution($sfwork,$sf_out,$cut) {
 $sfwork = $sfwork|0;
 $sf_out = $sf_out|0;
 $cut = $cut|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $i = 0, $j = 0, $x = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = sp + 20|0;
 $1 = sp + 16|0;
 $2 = sp + 12|0;
 $i = sp + 8|0;
 $j = sp + 4|0;
 $x = sp;
 HEAP32[$0>>2] = $sfwork;
 HEAP32[$1>>2] = $sf_out;
 HEAP32[$2>>2] = $cut;
 HEAP32[$j>>2] = 39;
 HEAP32[$i>>2] = 0;
 while(1) {
  $3 = HEAP32[$j>>2]|0;
  $4 = ($3>>>0)>(0);
  if (!($4)) {
   break;
  }
  $5 = HEAP32[$i>>2]|0;
  $6 = HEAP32[$0>>2]|0;
  $7 = (($6) + ($5<<2)|0);
  $8 = HEAP32[$7>>2]|0;
  HEAP32[$x>>2] = $8;
  $9 = HEAP32[$x>>2]|0;
  $10 = HEAP32[$2>>2]|0;
  $11 = ($9|0)<($10|0);
  $12 = HEAP32[$x>>2]|0;
  $13 = HEAP32[$2>>2]|0;
  $14 = $11 ? $12 : $13;
  $15 = HEAP32[$i>>2]|0;
  $16 = HEAP32[$1>>2]|0;
  $17 = (($16) + ($15<<2)|0);
  HEAP32[$17>>2] = $14;
  $18 = HEAP32[$j>>2]|0;
  $19 = (($18) + -1)|0;
  HEAP32[$j>>2] = $19;
  $20 = HEAP32[$i>>2]|0;
  $21 = (($20) + 1)|0;
  HEAP32[$i>>2] = $21;
 }
 STACKTOP = sp;return;
}
function _outOfBitsStrategy($that,$sfwork,$vbrsfmin,$target) {
 $that = $that|0;
 $sfwork = $sfwork|0;
 $vbrsfmin = $vbrsfmin|0;
 $target = $target|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $bi = 0, $bi2 = 0, $bi_ok = 0, $bi_ok3 = 0, $bo = 0;
 var $bo5 = 0, $bu = 0, $bu4 = 0, $dm = 0, $nbits = 0, $p = 0, $sfmax = 0, $sfmax1 = 0, $sfmax6 = 0, $sfmax7 = 0, $wrk = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240|0;
 $0 = sp + 228|0;
 $1 = sp + 224|0;
 $2 = sp + 220|0;
 $3 = sp + 216|0;
 $wrk = sp + 60|0;
 $dm = sp + 56|0;
 $p = sp + 52|0;
 $nbits = sp + 48|0;
 $bi = sp + 44|0;
 $bi_ok = sp + 40|0;
 $bu = sp + 36|0;
 $bo = sp + 32|0;
 $sfmax = sp + 28|0;
 $sfmax1 = sp + 24|0;
 $bi2 = sp + 20|0;
 $bi_ok3 = sp + 16|0;
 $bu4 = sp + 12|0;
 $bo5 = sp + 8|0;
 $sfmax6 = sp + 4|0;
 $sfmax7 = sp;
 HEAP32[$0>>2] = $that;
 HEAP32[$1>>2] = $sfwork;
 HEAP32[$2>>2] = $vbrsfmin;
 HEAP32[$3>>2] = $target;
 $4 = HEAP32[$1>>2]|0;
 $5 = (_sfDepth($4)|0);
 HEAP32[$dm>>2] = $5;
 $6 = HEAP32[$0>>2]|0;
 $7 = (($6) + 16|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($8) + 4780|0);
 $10 = HEAP32[$9>>2]|0;
 HEAP32[$p>>2] = $10;
 $11 = HEAP32[$dm>>2]|0;
 $12 = (($11|0) / 2)&-1;
 HEAP32[$bi>>2] = $12;
 HEAP32[$bi_ok>>2] = -1;
 HEAP32[$bu>>2] = 0;
 $13 = HEAP32[$dm>>2]|0;
 HEAP32[$bo>>2] = $13;
 while(1) {
  $14 = HEAP32[$1>>2]|0;
  $15 = HEAP32[$dm>>2]|0;
  $16 = HEAP32[$bi>>2]|0;
  $17 = HEAP32[$p>>2]|0;
  $18 = (_flattenDistribution($14,$wrk,$15,$16,$17)|0);
  HEAP32[$sfmax>>2] = $18;
  $19 = HEAP32[$0>>2]|0;
  $20 = HEAP32[$2>>2]|0;
  $21 = HEAP32[$sfmax>>2]|0;
  $22 = (_tryThatOne($19,$wrk,$20,$21)|0);
  HEAP32[$nbits>>2] = $22;
  $23 = HEAP32[$nbits>>2]|0;
  $24 = HEAP32[$3>>2]|0;
  $25 = ($23|0)<=($24|0);
  $26 = HEAP32[$bi>>2]|0;
  if ($25) {
   HEAP32[$bi_ok>>2] = $26;
   $27 = HEAP32[$bi>>2]|0;
   $28 = (($27) - 1)|0;
   HEAP32[$bo>>2] = $28;
  } else {
   $29 = (($26) + 1)|0;
   HEAP32[$bu>>2] = $29;
  }
  $30 = HEAP32[$bu>>2]|0;
  $31 = HEAP32[$bo>>2]|0;
  $32 = ($30|0)<=($31|0);
  if (!($32)) {
   break;
  }
  $33 = HEAP32[$bu>>2]|0;
  $34 = HEAP32[$bo>>2]|0;
  $35 = (($33) + ($34))|0;
  $36 = (($35|0) / 2)&-1;
  HEAP32[$bi>>2] = $36;
 }
 $37 = HEAP32[$bi_ok>>2]|0;
 $38 = ($37|0)>=(0);
 if ($38) {
  $39 = HEAP32[$bi>>2]|0;
  $40 = HEAP32[$bi_ok>>2]|0;
  $41 = ($39|0)!=($40|0);
  if (!($41)) {
   STACKTOP = sp;return;
  }
  $42 = HEAP32[$1>>2]|0;
  $43 = HEAP32[$dm>>2]|0;
  $44 = HEAP32[$bi_ok>>2]|0;
  $45 = HEAP32[$p>>2]|0;
  $46 = (_flattenDistribution($42,$wrk,$43,$44,$45)|0);
  HEAP32[$sfmax1>>2] = $46;
  $47 = HEAP32[$0>>2]|0;
  $48 = HEAP32[$2>>2]|0;
  $49 = HEAP32[$sfmax1>>2]|0;
  $50 = (_tryThatOne($47,$wrk,$48,$49)|0);
  HEAP32[$nbits>>2] = $50;
  STACKTOP = sp;return;
 }
 $51 = HEAP32[$p>>2]|0;
 $52 = (255 + ($51))|0;
 $53 = (($52|0) / 2)&-1;
 HEAP32[$bi2>>2] = $53;
 HEAP32[$bi_ok3>>2] = -1;
 $54 = HEAP32[$p>>2]|0;
 HEAP32[$bu4>>2] = $54;
 HEAP32[$bo5>>2] = 255;
 while(1) {
  $55 = HEAP32[$1>>2]|0;
  $56 = HEAP32[$dm>>2]|0;
  $57 = HEAP32[$dm>>2]|0;
  $58 = HEAP32[$bi2>>2]|0;
  $59 = (_flattenDistribution($55,$wrk,$56,$57,$58)|0);
  HEAP32[$sfmax6>>2] = $59;
  $60 = HEAP32[$0>>2]|0;
  $61 = HEAP32[$2>>2]|0;
  $62 = HEAP32[$sfmax6>>2]|0;
  $63 = (_tryThatOne($60,$wrk,$61,$62)|0);
  HEAP32[$nbits>>2] = $63;
  $64 = HEAP32[$nbits>>2]|0;
  $65 = HEAP32[$3>>2]|0;
  $66 = ($64|0)<=($65|0);
  $67 = HEAP32[$bi2>>2]|0;
  if ($66) {
   HEAP32[$bi_ok3>>2] = $67;
   $68 = HEAP32[$bi2>>2]|0;
   $69 = (($68) - 1)|0;
   HEAP32[$bo5>>2] = $69;
  } else {
   $70 = (($67) + 1)|0;
   HEAP32[$bu4>>2] = $70;
  }
  $71 = HEAP32[$bu4>>2]|0;
  $72 = HEAP32[$bo5>>2]|0;
  $73 = ($71|0)<=($72|0);
  if (!($73)) {
   break;
  }
  $74 = HEAP32[$bu4>>2]|0;
  $75 = HEAP32[$bo5>>2]|0;
  $76 = (($74) + ($75))|0;
  $77 = (($76|0) / 2)&-1;
  HEAP32[$bi2>>2] = $77;
 }
 $78 = HEAP32[$bi_ok3>>2]|0;
 $79 = ($78|0)>=(0);
 if (!($79)) {
  $92 = HEAP32[$0>>2]|0;
  $93 = HEAP32[$2>>2]|0;
  $94 = HEAP32[$3>>2]|0;
  _searchGlobalStepsizeMax($92,$wrk,$93,$94);
  STACKTOP = sp;return;
 }
 $80 = HEAP32[$bi2>>2]|0;
 $81 = HEAP32[$bi_ok3>>2]|0;
 $82 = ($80|0)!=($81|0);
 if (!($82)) {
  STACKTOP = sp;return;
 }
 $83 = HEAP32[$1>>2]|0;
 $84 = HEAP32[$dm>>2]|0;
 $85 = HEAP32[$dm>>2]|0;
 $86 = HEAP32[$bi_ok3>>2]|0;
 $87 = (_flattenDistribution($83,$wrk,$84,$85,$86)|0);
 HEAP32[$sfmax7>>2] = $87;
 $88 = HEAP32[$0>>2]|0;
 $89 = HEAP32[$2>>2]|0;
 $90 = HEAP32[$sfmax7>>2]|0;
 $91 = (_tryThatOne($88,$wrk,$89,$90)|0);
 HEAP32[$nbits>>2] = $91;
 STACKTOP = sp;return;
}
function _sfDepth($sfwork) {
 $sfwork = $sfwork|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $di = 0, $i = 0, $j = 0;
 var $m = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = sp + 16|0;
 $m = sp + 12|0;
 $i = sp + 8|0;
 $j = sp + 4|0;
 $di = sp;
 HEAP32[$0>>2] = $sfwork;
 HEAP32[$m>>2] = 0;
 HEAP32[$j>>2] = 39;
 HEAP32[$i>>2] = 0;
 while(1) {
  $1 = HEAP32[$j>>2]|0;
  $2 = ($1>>>0)>(0);
  if (!($2)) {
   break;
  }
  $3 = HEAP32[$i>>2]|0;
  $4 = HEAP32[$0>>2]|0;
  $5 = (($4) + ($3<<2)|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = (255 - ($6))|0;
  HEAP32[$di>>2] = $7;
  $8 = HEAP32[$m>>2]|0;
  $9 = HEAP32[$di>>2]|0;
  $10 = ($8|0)<($9|0);
  if ($10) {
   $11 = HEAP32[$di>>2]|0;
   HEAP32[$m>>2] = $11;
  }
  $12 = HEAP32[$j>>2]|0;
  $13 = (($12) + -1)|0;
  HEAP32[$j>>2] = $13;
  $14 = HEAP32[$i>>2]|0;
  $15 = (($14) + 1)|0;
  HEAP32[$i>>2] = $15;
 }
 $16 = HEAP32[$m>>2]|0;
 STACKTOP = sp;return ($16|0);
}
function _flattenDistribution($sfwork,$sf_out,$dm,$k,$p) {
 $sfwork = $sfwork|0;
 $sf_out = $sf_out|0;
 $dm = $dm|0;
 $k = $k|0;
 $p = $p|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $di = 0, $i = 0, $j = 0, $sfmax = 0, $x = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $0 = sp + 36|0;
 $1 = sp + 32|0;
 $2 = sp + 28|0;
 $3 = sp + 24|0;
 $4 = sp + 20|0;
 $i = sp + 16|0;
 $j = sp + 12|0;
 $x = sp + 8|0;
 $sfmax = sp + 4|0;
 $di = sp;
 HEAP32[$0>>2] = $sfwork;
 HEAP32[$1>>2] = $sf_out;
 HEAP32[$2>>2] = $dm;
 HEAP32[$3>>2] = $k;
 HEAP32[$4>>2] = $p;
 HEAP32[$sfmax>>2] = 0;
 $5 = HEAP32[$2>>2]|0;
 $6 = ($5|0)>(0);
 HEAP32[$j>>2] = 39;
 HEAP32[$i>>2] = 0;
 if (!($6)) {
  while(1) {
   $41 = HEAP32[$j>>2]|0;
   $42 = ($41>>>0)>(0);
   if (!($42)) {
    break;
   }
   $43 = HEAP32[$i>>2]|0;
   $44 = HEAP32[$0>>2]|0;
   $45 = (($44) + ($43<<2)|0);
   $46 = HEAP32[$45>>2]|0;
   HEAP32[$x>>2] = $46;
   $47 = HEAP32[$x>>2]|0;
   $48 = HEAP32[$i>>2]|0;
   $49 = HEAP32[$1>>2]|0;
   $50 = (($49) + ($48<<2)|0);
   HEAP32[$50>>2] = $47;
   $51 = HEAP32[$sfmax>>2]|0;
   $52 = HEAP32[$x>>2]|0;
   $53 = ($51|0)<($52|0);
   if ($53) {
    $54 = HEAP32[$x>>2]|0;
    HEAP32[$sfmax>>2] = $54;
   }
   $55 = HEAP32[$j>>2]|0;
   $56 = (($55) + -1)|0;
   HEAP32[$j>>2] = $56;
   $57 = HEAP32[$i>>2]|0;
   $58 = (($57) + 1)|0;
   HEAP32[$i>>2] = $58;
  }
  $59 = HEAP32[$sfmax>>2]|0;
  STACKTOP = sp;return ($59|0);
 }
 while(1) {
  $7 = HEAP32[$j>>2]|0;
  $8 = ($7>>>0)>(0);
  if (!($8)) {
   break;
  }
  $9 = HEAP32[$4>>2]|0;
  $10 = HEAP32[$i>>2]|0;
  $11 = HEAP32[$0>>2]|0;
  $12 = (($11) + ($10<<2)|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = (($9) - ($13))|0;
  HEAP32[$di>>2] = $14;
  $15 = HEAP32[$i>>2]|0;
  $16 = HEAP32[$0>>2]|0;
  $17 = (($16) + ($15<<2)|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = HEAP32[$3>>2]|0;
  $20 = HEAP32[$di>>2]|0;
  $21 = Math_imul($19, $20)|0;
  $22 = HEAP32[$2>>2]|0;
  $23 = (($21|0) / ($22|0))&-1;
  $24 = (($18) + ($23))|0;
  HEAP32[$x>>2] = $24;
  $25 = HEAP32[$x>>2]|0;
  $26 = ($25|0)<(0);
  if ($26) {
   HEAP32[$x>>2] = 0;
  } else {
   $27 = HEAP32[$x>>2]|0;
   $28 = ($27|0)>(255);
   if ($28) {
    HEAP32[$x>>2] = 255;
   }
  }
  $29 = HEAP32[$x>>2]|0;
  $30 = HEAP32[$i>>2]|0;
  $31 = HEAP32[$1>>2]|0;
  $32 = (($31) + ($30<<2)|0);
  HEAP32[$32>>2] = $29;
  $33 = HEAP32[$sfmax>>2]|0;
  $34 = HEAP32[$x>>2]|0;
  $35 = ($33|0)<($34|0);
  if ($35) {
   $36 = HEAP32[$x>>2]|0;
   HEAP32[$sfmax>>2] = $36;
  }
  $37 = HEAP32[$j>>2]|0;
  $38 = (($37) + -1)|0;
  HEAP32[$j>>2] = $38;
  $39 = HEAP32[$i>>2]|0;
  $40 = (($39) + 1)|0;
  HEAP32[$i>>2] = $40;
 }
 $59 = HEAP32[$sfmax>>2]|0;
 STACKTOP = sp;return ($59|0);
}
function _tryThatOne($that,$sftemp,$vbrsfmin,$vbrmax) {
 $that = $that|0;
 $sftemp = $sftemp|0;
 $vbrsfmin = $vbrsfmin|0;
 $vbrmax = $vbrmax|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0.0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0, $nbits = 0, $xrpow_max = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = sp + 20|0;
 $1 = sp + 16|0;
 $2 = sp + 12|0;
 $3 = sp + 8|0;
 $xrpow_max = sp + 4|0;
 $nbits = sp;
 HEAP32[$0>>2] = $that;
 HEAP32[$1>>2] = $sftemp;
 HEAP32[$2>>2] = $vbrsfmin;
 HEAP32[$3>>2] = $vbrmax;
 $4 = HEAP32[$0>>2]|0;
 $5 = (($4) + 16|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($6) + 4764|0);
 $8 = +HEAPF32[$7>>2];
 HEAPF32[$xrpow_max>>2] = $8;
 HEAP32[$nbits>>2] = 100000;
 $9 = HEAP32[$0>>2]|0;
 $10 = HEAP32[$9>>2]|0;
 $11 = HEAP32[$0>>2]|0;
 $12 = HEAP32[$1>>2]|0;
 $13 = HEAP32[$2>>2]|0;
 $14 = HEAP32[$3>>2]|0;
 FUNCTION_TABLE_viiii[$10 & 7]($11,$12,$13,$14);
 $15 = HEAP32[$0>>2]|0;
 _bitcount($15);
 $16 = HEAP32[$0>>2]|0;
 $17 = (_quantizeAndCountBits($16)|0);
 HEAP32[$nbits>>2] = $17;
 $18 = HEAP32[$0>>2]|0;
 $19 = (($18) + 16|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = (($20) + 4844|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = HEAP32[$nbits>>2]|0;
 $24 = (($23) + ($22))|0;
 HEAP32[$nbits>>2] = $24;
 $25 = +HEAPF32[$xrpow_max>>2];
 $26 = HEAP32[$0>>2]|0;
 $27 = (($26) + 16|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = (($28) + 4764|0);
 HEAPF32[$29>>2] = $25;
 $30 = HEAP32[$nbits>>2]|0;
 STACKTOP = sp;return ($30|0);
}
function _searchGlobalStepsizeMax($that,$sfwork,$vbrsfmin,$target) {
 $that = $that|0;
 $sfwork = $sfwork|0;
 $vbrsfmin = $vbrsfmin|0;
 $target = $target|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cod_info = 0, $curr = 0, $gain = 0, $gain_ok = 0, $l = 0, $nbits = 0;
 var $r = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $0 = sp + 40|0;
 $1 = sp + 36|0;
 $2 = sp + 32|0;
 $3 = sp + 28|0;
 $cod_info = sp + 24|0;
 $gain = sp + 20|0;
 $curr = sp + 16|0;
 $gain_ok = sp + 12|0;
 $nbits = sp + 8|0;
 $l = sp + 4|0;
 $r = sp;
 HEAP32[$0>>2] = $that;
 HEAP32[$1>>2] = $sfwork;
 HEAP32[$2>>2] = $vbrsfmin;
 HEAP32[$3>>2] = $target;
 $4 = HEAP32[$0>>2]|0;
 $5 = (($4) + 16|0);
 $6 = HEAP32[$5>>2]|0;
 HEAP32[$cod_info>>2] = $6;
 $7 = HEAP32[$cod_info>>2]|0;
 $8 = (($7) + 4780|0);
 $9 = HEAP32[$8>>2]|0;
 HEAP32[$gain>>2] = $9;
 $10 = HEAP32[$gain>>2]|0;
 HEAP32[$curr>>2] = $10;
 HEAP32[$gain_ok>>2] = 1024;
 HEAP32[$nbits>>2] = 100000;
 $11 = HEAP32[$gain>>2]|0;
 HEAP32[$l>>2] = $11;
 HEAP32[$r>>2] = 512;
 while(1) {
  $12 = HEAP32[$l>>2]|0;
  $13 = HEAP32[$r>>2]|0;
  $14 = ($12|0)<=($13|0);
  if (!($14)) {
   break;
  }
  $15 = HEAP32[$l>>2]|0;
  $16 = HEAP32[$r>>2]|0;
  $17 = (($15) + ($16))|0;
  $18 = $17 >> 1;
  HEAP32[$curr>>2] = $18;
  $19 = HEAP32[$0>>2]|0;
  $20 = HEAP32[$1>>2]|0;
  $21 = HEAP32[$2>>2]|0;
  $22 = HEAP32[$curr>>2]|0;
  $23 = HEAP32[$gain>>2]|0;
  $24 = (($22) - ($23))|0;
  $25 = (_tryGlobalStepsize($19,$20,$21,$24)|0);
  HEAP32[$nbits>>2] = $25;
  $26 = HEAP32[$nbits>>2]|0;
  $27 = ($26|0)==(0);
  if (!($27)) {
   $28 = HEAP32[$nbits>>2]|0;
   $29 = HEAP32[$cod_info>>2]|0;
   $30 = (($29) + 4844|0);
   $31 = HEAP32[$30>>2]|0;
   $32 = (($28) + ($31))|0;
   $33 = HEAP32[$3>>2]|0;
   $34 = ($32|0)<($33|0);
   if (!($34)) {
    $38 = HEAP32[$curr>>2]|0;
    $39 = (($38) + 1)|0;
    HEAP32[$l>>2] = $39;
    $40 = HEAP32[$gain_ok>>2]|0;
    $41 = ($40|0)==(1024);
    if (!($41)) {
     continue;
    }
    $42 = HEAP32[$curr>>2]|0;
    HEAP32[$gain_ok>>2] = $42;
    continue;
   }
  }
  $35 = HEAP32[$curr>>2]|0;
  $36 = (($35) - 1)|0;
  HEAP32[$r>>2] = $36;
  $37 = HEAP32[$curr>>2]|0;
  HEAP32[$gain_ok>>2] = $37;
 }
 $43 = HEAP32[$gain_ok>>2]|0;
 $44 = HEAP32[$curr>>2]|0;
 $45 = ($43|0)!=($44|0);
 if (!($45)) {
  STACKTOP = sp;return;
 }
 $46 = HEAP32[$gain_ok>>2]|0;
 HEAP32[$curr>>2] = $46;
 $47 = HEAP32[$0>>2]|0;
 $48 = HEAP32[$1>>2]|0;
 $49 = HEAP32[$2>>2]|0;
 $50 = HEAP32[$curr>>2]|0;
 $51 = HEAP32[$gain>>2]|0;
 $52 = (($50) - ($51))|0;
 $53 = (_tryGlobalStepsize($47,$48,$49,$52)|0);
 HEAP32[$nbits>>2] = $53;
 STACKTOP = sp;return;
}
function _tryGlobalStepsize($that,$sfwork,$vbrsfmin,$delta) {
 $that = $that|0;
 $sfwork = $sfwork|0;
 $vbrsfmin = $vbrsfmin|0;
 $delta = $delta|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0.0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0, $gain = 0, $i = 0, $nbits = 0, $sftemp = 0, $vbrmax = 0, $xrpow_max = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 192|0;
 $0 = sp + 188|0;
 $1 = sp + 184|0;
 $2 = sp + 180|0;
 $3 = sp + 176|0;
 $xrpow_max = sp + 172|0;
 $sftemp = sp + 16|0;
 $i = sp + 12|0;
 $nbits = sp + 8|0;
 $gain = sp + 4|0;
 $vbrmax = sp;
 HEAP32[$0>>2] = $that;
 HEAP32[$1>>2] = $sfwork;
 HEAP32[$2>>2] = $vbrsfmin;
 HEAP32[$3>>2] = $delta;
 $4 = HEAP32[$0>>2]|0;
 $5 = (($4) + 16|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($6) + 4764|0);
 $8 = +HEAPF32[$7>>2];
 HEAPF32[$xrpow_max>>2] = $8;
 HEAP32[$vbrmax>>2] = 0;
 HEAP32[$i>>2] = 0;
 while(1) {
  $9 = HEAP32[$i>>2]|0;
  $10 = ($9|0)<(39);
  if (!($10)) {
   break;
  }
  $11 = HEAP32[$i>>2]|0;
  $12 = HEAP32[$1>>2]|0;
  $13 = (($12) + ($11<<2)|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = HEAP32[$3>>2]|0;
  $16 = (($14) + ($15))|0;
  HEAP32[$gain>>2] = $16;
  $17 = HEAP32[$gain>>2]|0;
  $18 = HEAP32[$i>>2]|0;
  $19 = HEAP32[$2>>2]|0;
  $20 = (($19) + ($18<<2)|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = ($17|0)<($21|0);
  if ($22) {
   $23 = HEAP32[$i>>2]|0;
   $24 = HEAP32[$2>>2]|0;
   $25 = (($24) + ($23<<2)|0);
   $26 = HEAP32[$25>>2]|0;
   HEAP32[$gain>>2] = $26;
  }
  $27 = HEAP32[$gain>>2]|0;
  $28 = ($27|0)>(255);
  if ($28) {
   HEAP32[$gain>>2] = 255;
  }
  $29 = HEAP32[$vbrmax>>2]|0;
  $30 = HEAP32[$gain>>2]|0;
  $31 = ($29|0)<($30|0);
  if ($31) {
   $32 = HEAP32[$gain>>2]|0;
   HEAP32[$vbrmax>>2] = $32;
  }
  $33 = HEAP32[$gain>>2]|0;
  $34 = HEAP32[$i>>2]|0;
  $35 = (($sftemp) + ($34<<2)|0);
  HEAP32[$35>>2] = $33;
  $36 = HEAP32[$i>>2]|0;
  $37 = (($36) + 1)|0;
  HEAP32[$i>>2] = $37;
 }
 $38 = HEAP32[$0>>2]|0;
 $39 = HEAP32[$38>>2]|0;
 $40 = HEAP32[$0>>2]|0;
 $41 = HEAP32[$2>>2]|0;
 $42 = HEAP32[$vbrmax>>2]|0;
 FUNCTION_TABLE_viiii[$39 & 7]($40,$sftemp,$41,$42);
 $43 = HEAP32[$0>>2]|0;
 _bitcount($43);
 $44 = HEAP32[$0>>2]|0;
 $45 = (_quantizeAndCountBits($44)|0);
 HEAP32[$nbits>>2] = $45;
 $46 = +HEAPF32[$xrpow_max>>2];
 $47 = HEAP32[$0>>2]|0;
 $48 = (($47) + 16|0);
 $49 = HEAP32[$48>>2]|0;
 $50 = (($49) + 4764|0);
 HEAPF32[$50>>2] = $46;
 $51 = HEAP32[$nbits>>2]|0;
 STACKTOP = sp;return ($51|0);
}
function _quantize_x34($that) {
 $that = $that|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0.0, $101 = 0.0, $102 = 0, $103 = 0.0, $104 = 0, $105 = 0, $106 = 0.0, $107 = 0.0, $108 = 0.0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0.0, $122 = 0, $123 = 0, $124 = 0.0, $125 = 0.0, $126 = 0.0, $127 = 0, $128 = 0.0, $129 = 0, $13 = 0, $130 = 0, $131 = 0.0, $132 = 0.0, $133 = 0.0;
 var $134 = 0, $135 = 0.0, $136 = 0, $137 = 0.0, $138 = 0.0, $139 = 0.0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0.0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0.0, $85 = 0, $86 = 0.0, $87 = 0.0, $88 = 0.0, $89 = 0.0, $9 = 0, $90 = 0, $91 = 0, $92 = 0.0, $93 = 0.0, $94 = 0.0, $95 = 0, $96 = 0.0, $97 = 0, $98 = 0, $99 = 0.0, $cod_info = 0, $i = 0, $ifqstep = 0;
 var $j = 0, $l3 = 0, $m = 0, $max_nonzero_coeff = 0, $remaining = 0, $s = 0, $sfac = 0, $sfb = 0, $sfpow34 = 0, $tmp_l3 = 0, $w = 0, $x = 0, $xr34_orig = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0;
 $0 = sp + 100|0;
 $x = sp;
 $xr34_orig = sp + 96|0;
 $cod_info = sp + 92|0;
 $ifqstep = sp + 88|0;
 $l3 = sp + 84|0;
 $j = sp + 80|0;
 $sfb = sp + 76|0;
 $max_nonzero_coeff = sp + 72|0;
 $s = sp + 68|0;
 $sfac = sp + 104|0;
 $sfpow34 = sp + 64|0;
 $w = sp + 60|0;
 $m = sp + 56|0;
 $i = sp + 52|0;
 $remaining = sp + 48|0;
 $tmp_l3 = sp + 32|0;
 HEAP32[$0>>2] = $that;
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 HEAP32[$xr34_orig>>2] = $3;
 $4 = HEAP32[$0>>2]|0;
 $5 = (($4) + 16|0);
 $6 = HEAP32[$5>>2]|0;
 HEAP32[$cod_info>>2] = $6;
 $7 = HEAP32[$cod_info>>2]|0;
 $8 = (($7) + 4836|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)==(0);
 $11 = $10 ? 2 : 4;
 HEAP32[$ifqstep>>2] = $11;
 $12 = HEAP32[$cod_info>>2]|0;
 $13 = (($12) + 2304|0);
 HEAP32[$l3>>2] = $13;
 HEAP32[$j>>2] = 0;
 HEAP32[$sfb>>2] = 0;
 $14 = HEAP32[$cod_info>>2]|0;
 $15 = (($14) + 5208|0);
 $16 = HEAP32[$15>>2]|0;
 HEAP32[$max_nonzero_coeff>>2] = $16;
 while(1) {
  $17 = HEAP32[$j>>2]|0;
  $18 = HEAP32[$max_nonzero_coeff>>2]|0;
  $19 = ($17>>>0)<=($18>>>0);
  if (!($19)) {
   break;
  }
  $20 = HEAP32[$sfb>>2]|0;
  $21 = HEAP32[$cod_info>>2]|0;
  $22 = (($21) + 4608|0);
  $23 = (($22) + ($20<<2)|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = HEAP32[$cod_info>>2]|0;
  $26 = (($25) + 4832|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = ($27|0)!=(0);
  if ($28) {
   $29 = HEAP32[$sfb>>2]|0;
   $30 = (21376 + ($29<<2)|0);
   $31 = HEAP32[$30>>2]|0;
   $33 = $31;
  } else {
   $33 = 0;
  }
  $32 = (($24) + ($33))|0;
  $34 = HEAP32[$ifqstep>>2]|0;
  $35 = Math_imul($32, $34)|0;
  $36 = HEAP32[$sfb>>2]|0;
  $37 = HEAP32[$cod_info>>2]|0;
  $38 = (($37) + 5028|0);
  $39 = (($38) + ($36<<2)|0);
  $40 = HEAP32[$39>>2]|0;
  $41 = HEAP32[$cod_info>>2]|0;
  $42 = (($41) + 4808|0);
  $43 = (($42) + ($40<<2)|0);
  $44 = HEAP32[$43>>2]|0;
  $45 = $44<<3;
  $46 = (($35) + ($45))|0;
  HEAP32[$s>>2] = $46;
  $47 = HEAP32[$cod_info>>2]|0;
  $48 = (($47) + 4780|0);
  $49 = HEAP32[$48>>2]|0;
  $50 = HEAP32[$s>>2]|0;
  $51 = (($49) - ($50))|0;
  $52 = $51&255;
  HEAP8[$sfac>>0] = $52;
  $53 = HEAP8[$sfac>>0]|0;
  $54 = $53&255;
  $55 = (88968 + ($54<<2)|0);
  $56 = +HEAPF32[$55>>2];
  HEAPF32[$sfpow34>>2] = $56;
  $57 = HEAP32[$sfb>>2]|0;
  $58 = HEAP32[$cod_info>>2]|0;
  $59 = (($58) + 4872|0);
  $60 = (($59) + ($57<<2)|0);
  $61 = HEAP32[$60>>2]|0;
  HEAP32[$w>>2] = $61;
  $62 = HEAP32[$max_nonzero_coeff>>2]|0;
  $63 = HEAP32[$j>>2]|0;
  $64 = (($62) - ($63))|0;
  $65 = (($64) + 1)|0;
  HEAP32[$m>>2] = $65;
  $66 = HEAP32[$w>>2]|0;
  $67 = HEAP32[$j>>2]|0;
  $68 = (($67) + ($66))|0;
  HEAP32[$j>>2] = $68;
  $69 = HEAP32[$sfb>>2]|0;
  $70 = (($69) + 1)|0;
  HEAP32[$sfb>>2] = $70;
  $71 = HEAP32[$w>>2]|0;
  $72 = HEAP32[$m>>2]|0;
  $73 = ($71>>>0)<=($72>>>0);
  $74 = HEAP32[$w>>2]|0;
  $75 = HEAP32[$m>>2]|0;
  $76 = $73 ? $74 : $75;
  HEAP32[$i>>2] = $76;
  $77 = HEAP32[$i>>2]|0;
  $78 = $77 & 3;
  HEAP32[$remaining>>2] = $78;
  $79 = HEAP32[$i>>2]|0;
  $80 = $79 >>> 2;
  HEAP32[$i>>2] = $80;
  while(1) {
   $81 = HEAP32[$i>>2]|0;
   $82 = (($81) + -1)|0;
   HEAP32[$i>>2] = $82;
   $83 = ($81>>>0)>(0);
   if (!($83)) {
    break;
   }
   $84 = +HEAPF32[$sfpow34>>2];
   $85 = HEAP32[$xr34_orig>>2]|0;
   $86 = +HEAPF32[$85>>2];
   $87 = $84 * $86;
   $88 = $87;
   HEAPF64[$x>>3] = $88;
   $89 = +HEAPF32[$sfpow34>>2];
   $90 = HEAP32[$xr34_orig>>2]|0;
   $91 = (($90) + 4|0);
   $92 = +HEAPF32[$91>>2];
   $93 = $89 * $92;
   $94 = $93;
   $95 = (($x) + 8|0);
   HEAPF64[$95>>3] = $94;
   $96 = +HEAPF32[$sfpow34>>2];
   $97 = HEAP32[$xr34_orig>>2]|0;
   $98 = (($97) + 8|0);
   $99 = +HEAPF32[$98>>2];
   $100 = $96 * $99;
   $101 = $100;
   $102 = (($x) + 16|0);
   HEAPF64[$102>>3] = $101;
   $103 = +HEAPF32[$sfpow34>>2];
   $104 = HEAP32[$xr34_orig>>2]|0;
   $105 = (($104) + 12|0);
   $106 = +HEAPF32[$105>>2];
   $107 = $103 * $106;
   $108 = $107;
   $109 = (($x) + 24|0);
   HEAPF64[$109>>3] = $108;
   $110 = HEAP32[$l3>>2]|0;
   _k_34_4($x,$110);
   $111 = HEAP32[$l3>>2]|0;
   $112 = (($111) + 16|0);
   HEAP32[$l3>>2] = $112;
   $113 = HEAP32[$xr34_orig>>2]|0;
   $114 = (($113) + 16|0);
   HEAP32[$xr34_orig>>2] = $114;
  }
  $115 = HEAP32[$remaining>>2]|0;
  $116 = ($115|0)!=(0);
  if (!($116)) {
   continue;
  }
  $117 = (($x) + 24|0);
  HEAPF64[$117>>3] = 0.0;
  $118 = (($x) + 16|0);
  HEAPF64[$118>>3] = 0.0;
  $119 = (($x) + 8|0);
  HEAPF64[$119>>3] = 0.0;
  HEAPF64[$x>>3] = 0.0;
  $120 = HEAP32[$remaining>>2]|0;
  if ((($120|0) == 1)) {
   label = 12;
  } else if ((($120|0) == 2)) {
   label = 11;
  } else if ((($120|0) == 3)) {
   $121 = +HEAPF32[$sfpow34>>2];
   $122 = HEAP32[$xr34_orig>>2]|0;
   $123 = (($122) + 8|0);
   $124 = +HEAPF32[$123>>2];
   $125 = $121 * $124;
   $126 = $125;
   $127 = (($x) + 16|0);
   HEAPF64[$127>>3] = $126;
   label = 11;
  }
  if ((label|0) == 11) {
   label = 0;
   $128 = +HEAPF32[$sfpow34>>2];
   $129 = HEAP32[$xr34_orig>>2]|0;
   $130 = (($129) + 4|0);
   $131 = +HEAPF32[$130>>2];
   $132 = $128 * $131;
   $133 = $132;
   $134 = (($x) + 8|0);
   HEAPF64[$134>>3] = $133;
   label = 12;
  }
  if ((label|0) == 12) {
   label = 0;
   $135 = +HEAPF32[$sfpow34>>2];
   $136 = HEAP32[$xr34_orig>>2]|0;
   $137 = +HEAPF32[$136>>2];
   $138 = $135 * $137;
   $139 = $138;
   HEAPF64[$x>>3] = $139;
  }
  _k_34_4($x,$tmp_l3);
  $140 = HEAP32[$remaining>>2]|0;
  if ((($140|0) == 2)) {
   label = 15;
  } else if ((($140|0) == 3)) {
   $141 = (($tmp_l3) + 8|0);
   $142 = HEAP32[$141>>2]|0;
   $143 = HEAP32[$l3>>2]|0;
   $144 = (($143) + 8|0);
   HEAP32[$144>>2] = $142;
   label = 15;
  } else if ((($140|0) == 1)) {
   label = 16;
  }
  if ((label|0) == 15) {
   label = 0;
   $145 = (($tmp_l3) + 4|0);
   $146 = HEAP32[$145>>2]|0;
   $147 = HEAP32[$l3>>2]|0;
   $148 = (($147) + 4|0);
   HEAP32[$148>>2] = $146;
   label = 16;
  }
  if ((label|0) == 16) {
   label = 0;
   $149 = HEAP32[$tmp_l3>>2]|0;
   $150 = HEAP32[$l3>>2]|0;
   HEAP32[$150>>2] = $149;
  }
  $151 = HEAP32[$remaining>>2]|0;
  $152 = HEAP32[$l3>>2]|0;
  $153 = (($152) + ($151<<2)|0);
  HEAP32[$l3>>2] = $153;
  $154 = HEAP32[$remaining>>2]|0;
  $155 = HEAP32[$xr34_orig>>2]|0;
  $156 = (($155) + ($154<<2)|0);
  HEAP32[$xr34_orig>>2] = $156;
 }
 STACKTOP = sp;return;
}
function _k_34_4($x,$l3) {
 $x = $x|0;
 $l3 = $l3|0;
 var $0 = 0, $1 = 0, $10 = 0.0, $11 = 0.0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0, $22 = 0, $23 = 0.0, $24 = 0.0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0.0, $29 = 0.0, $3 = 0.0, $30 = 0, $31 = 0, $32 = 0.0, $33 = 0.0, $34 = 0, $35 = 0, $36 = 0.0, $37 = 0, $38 = 0, $39 = 0, $4 = 0.0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0;
 var $45 = 0, $46 = 0.0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0, $56 = 0, $57 = 0, $58 = 0.0, $59 = 0, $6 = 0.0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0.0, $64 = 0.0, $65 = 0.0, $66 = 0.0, $67 = 0, $68 = 0, $69 = 0, $7 = 0.0, $70 = 0.0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0.0, $76 = 0.0, $77 = 0.0, $78 = 0.0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $fi = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = sp + 20|0;
 $1 = sp + 16|0;
 $fi = sp;
 HEAP32[$0>>2] = $x;
 HEAP32[$1>>2] = $l3;
 $2 = HEAP32[$0>>2]|0;
 $3 = +HEAPF64[$2>>3];
 $4 = $3 + 8388608.0;
 HEAPF64[$2>>3] = $4;
 $5 = HEAP32[$0>>2]|0;
 $6 = +HEAPF64[$5>>3];
 $7 = $6;
 HEAPF32[$fi>>2] = $7;
 $8 = HEAP32[$0>>2]|0;
 $9 = (($8) + 8|0);
 $10 = +HEAPF64[$9>>3];
 $11 = $10 + 8388608.0;
 HEAPF64[$9>>3] = $11;
 $12 = HEAP32[$0>>2]|0;
 $13 = (($12) + 8|0);
 $14 = +HEAPF64[$13>>3];
 $15 = $14;
 $16 = (($fi) + 4|0);
 HEAPF32[$16>>2] = $15;
 $17 = HEAP32[$0>>2]|0;
 $18 = (($17) + 16|0);
 $19 = +HEAPF64[$18>>3];
 $20 = $19 + 8388608.0;
 HEAPF64[$18>>3] = $20;
 $21 = HEAP32[$0>>2]|0;
 $22 = (($21) + 16|0);
 $23 = +HEAPF64[$22>>3];
 $24 = $23;
 $25 = (($fi) + 8|0);
 HEAPF32[$25>>2] = $24;
 $26 = HEAP32[$0>>2]|0;
 $27 = (($26) + 24|0);
 $28 = +HEAPF64[$27>>3];
 $29 = $28 + 8388608.0;
 HEAPF64[$27>>3] = $29;
 $30 = HEAP32[$0>>2]|0;
 $31 = (($30) + 24|0);
 $32 = +HEAPF64[$31>>3];
 $33 = $32;
 $34 = (($fi) + 12|0);
 HEAPF32[$34>>2] = $33;
 $35 = HEAP32[$0>>2]|0;
 $36 = +HEAPF64[$35>>3];
 $37 = HEAP32[$fi>>2]|0;
 $38 = (($37) - 1258291200)|0;
 $39 = (56136 + ($38<<2)|0);
 $40 = +HEAPF32[$39>>2];
 $41 = $40;
 $42 = $36 + $41;
 $43 = $42;
 HEAPF32[$fi>>2] = $43;
 $44 = HEAP32[$0>>2]|0;
 $45 = (($44) + 8|0);
 $46 = +HEAPF64[$45>>3];
 $47 = (($fi) + 4|0);
 $48 = HEAP32[$47>>2]|0;
 $49 = (($48) - 1258291200)|0;
 $50 = (56136 + ($49<<2)|0);
 $51 = +HEAPF32[$50>>2];
 $52 = $51;
 $53 = $46 + $52;
 $54 = $53;
 $55 = (($fi) + 4|0);
 HEAPF32[$55>>2] = $54;
 $56 = HEAP32[$0>>2]|0;
 $57 = (($56) + 16|0);
 $58 = +HEAPF64[$57>>3];
 $59 = (($fi) + 8|0);
 $60 = HEAP32[$59>>2]|0;
 $61 = (($60) - 1258291200)|0;
 $62 = (56136 + ($61<<2)|0);
 $63 = +HEAPF32[$62>>2];
 $64 = $63;
 $65 = $58 + $64;
 $66 = $65;
 $67 = (($fi) + 8|0);
 HEAPF32[$67>>2] = $66;
 $68 = HEAP32[$0>>2]|0;
 $69 = (($68) + 24|0);
 $70 = +HEAPF64[$69>>3];
 $71 = (($fi) + 12|0);
 $72 = HEAP32[$71>>2]|0;
 $73 = (($72) - 1258291200)|0;
 $74 = (56136 + ($73<<2)|0);
 $75 = +HEAPF32[$74>>2];
 $76 = $75;
 $77 = $70 + $76;
 $78 = $77;
 $79 = (($fi) + 12|0);
 HEAPF32[$79>>2] = $78;
 $80 = HEAP32[$fi>>2]|0;
 $81 = (($80) - 1258291200)|0;
 $82 = HEAP32[$1>>2]|0;
 HEAP32[$82>>2] = $81;
 $83 = (($fi) + 4|0);
 $84 = HEAP32[$83>>2]|0;
 $85 = (($84) - 1258291200)|0;
 $86 = HEAP32[$1>>2]|0;
 $87 = (($86) + 4|0);
 HEAP32[$87>>2] = $85;
 $88 = (($fi) + 8|0);
 $89 = HEAP32[$88>>2]|0;
 $90 = (($89) - 1258291200)|0;
 $91 = HEAP32[$1>>2]|0;
 $92 = (($91) + 8|0);
 HEAP32[$92>>2] = $90;
 $93 = (($fi) + 12|0);
 $94 = HEAP32[$93>>2]|0;
 $95 = (($94) - 1258291200)|0;
 $96 = HEAP32[$1>>2]|0;
 $97 = (($96) + 12|0);
 HEAP32[$97>>2] = $95;
 STACKTOP = sp;return;
}
function _vec_max_c($xr34,$bw) {
 $xr34 = $xr34|0;
 $bw = $bw|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0.0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0.0, $23 = 0.0, $24 = 0, $25 = 0, $26 = 0.0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0, $33 = 0, $34 = 0.0, $35 = 0, $36 = 0, $37 = 0, $38 = 0.0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0.0, $43 = 0, $44 = 0;
 var $45 = 0.0, $46 = 0, $47 = 0, $48 = 0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0, $52 = 0, $53 = 0.0, $54 = 0, $55 = 0, $56 = 0, $57 = 0.0, $58 = 0.0, $59 = 0, $6 = 0, $60 = 0.0, $61 = 0, $62 = 0;
 var $63 = 0.0, $64 = 0.0, $7 = 0, $8 = 0, $9 = 0.0, $i = 0, $remaining = 0, $xfsf = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = sp + 16|0;
 $1 = sp + 12|0;
 $xfsf = sp + 8|0;
 $i = sp + 4|0;
 $remaining = sp;
 HEAP32[$0>>2] = $xr34;
 HEAP32[$1>>2] = $bw;
 HEAPF32[$xfsf>>2] = 0.0;
 $2 = HEAP32[$1>>2]|0;
 $3 = $2 >>> 2;
 HEAP32[$i>>2] = $3;
 $4 = HEAP32[$1>>2]|0;
 $5 = $4 & 3;
 HEAP32[$remaining>>2] = $5;
 while(1) {
  $6 = HEAP32[$i>>2]|0;
  $7 = (($6) + -1)|0;
  HEAP32[$i>>2] = $7;
  $8 = ($6>>>0)>(0);
  if (!($8)) {
   break;
  }
  $9 = +HEAPF32[$xfsf>>2];
  $10 = HEAP32[$0>>2]|0;
  $11 = +HEAPF32[$10>>2];
  $12 = $9 < $11;
  if ($12) {
   $13 = HEAP32[$0>>2]|0;
   $14 = +HEAPF32[$13>>2];
   HEAPF32[$xfsf>>2] = $14;
  }
  $15 = +HEAPF32[$xfsf>>2];
  $16 = HEAP32[$0>>2]|0;
  $17 = (($16) + 4|0);
  $18 = +HEAPF32[$17>>2];
  $19 = $15 < $18;
  if ($19) {
   $20 = HEAP32[$0>>2]|0;
   $21 = (($20) + 4|0);
   $22 = +HEAPF32[$21>>2];
   HEAPF32[$xfsf>>2] = $22;
  }
  $23 = +HEAPF32[$xfsf>>2];
  $24 = HEAP32[$0>>2]|0;
  $25 = (($24) + 8|0);
  $26 = +HEAPF32[$25>>2];
  $27 = $23 < $26;
  if ($27) {
   $28 = HEAP32[$0>>2]|0;
   $29 = (($28) + 8|0);
   $30 = +HEAPF32[$29>>2];
   HEAPF32[$xfsf>>2] = $30;
  }
  $31 = +HEAPF32[$xfsf>>2];
  $32 = HEAP32[$0>>2]|0;
  $33 = (($32) + 12|0);
  $34 = +HEAPF32[$33>>2];
  $35 = $31 < $34;
  if ($35) {
   $36 = HEAP32[$0>>2]|0;
   $37 = (($36) + 12|0);
   $38 = +HEAPF32[$37>>2];
   HEAPF32[$xfsf>>2] = $38;
  }
  $39 = HEAP32[$0>>2]|0;
  $40 = (($39) + 16|0);
  HEAP32[$0>>2] = $40;
 }
 $41 = HEAP32[$remaining>>2]|0;
 if ((($41|0) == 2)) {
  label = 15;
 } else if ((($41|0) == 3)) {
  label = 13;
 } else if (!((($41|0) == 1))) {
  $64 = +HEAPF32[$xfsf>>2];
  STACKTOP = sp;return (+$64);
 }
 if ((label|0) == 13) {
  $42 = +HEAPF32[$xfsf>>2];
  $43 = HEAP32[$0>>2]|0;
  $44 = (($43) + 8|0);
  $45 = +HEAPF32[$44>>2];
  $46 = $42 < $45;
  if ($46) {
   $47 = HEAP32[$0>>2]|0;
   $48 = (($47) + 8|0);
   $49 = +HEAPF32[$48>>2];
   HEAPF32[$xfsf>>2] = $49;
   label = 15;
  } else {
   label = 15;
  }
 }
 if ((label|0) == 15) {
  $50 = +HEAPF32[$xfsf>>2];
  $51 = HEAP32[$0>>2]|0;
  $52 = (($51) + 4|0);
  $53 = +HEAPF32[$52>>2];
  $54 = $50 < $53;
  if ($54) {
   $55 = HEAP32[$0>>2]|0;
   $56 = (($55) + 4|0);
   $57 = +HEAPF32[$56>>2];
   HEAPF32[$xfsf>>2] = $57;
  }
 }
 $58 = +HEAPF32[$xfsf>>2];
 $59 = HEAP32[$0>>2]|0;
 $60 = +HEAPF32[$59>>2];
 $61 = $58 < $60;
 if (!($61)) {
  $64 = +HEAPF32[$xfsf>>2];
  STACKTOP = sp;return (+$64);
 }
 $62 = HEAP32[$0>>2]|0;
 $63 = +HEAPF32[$62>>2];
 HEAPF32[$xfsf>>2] = $63;
 $64 = +HEAPF32[$xfsf>>2];
 STACKTOP = sp;return (+$64);
}
function _find_lowest_scalefac($xr34) {
 $xr34 = +$xr34;
 var $0 = 0, $1 = 0, $10 = 0.0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0.0, $8 = 0.0, $9 = 0.0, $delsf = 0, $i = 0, $ixmax_val = 0, $sf = 0, $sf_ok = 0, $xfsf = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp + 8|0;
 $sf_ok = sp + 15|0;
 $sf = sp + 14|0;
 $delsf = sp + 13|0;
 $i = sp + 12|0;
 $ixmax_val = sp + 4|0;
 $xfsf = sp;
 HEAPF32[$0>>2] = $xr34;
 HEAP8[$sf_ok>>0] = -1;
 HEAP8[$sf>>0] = -128;
 HEAP8[$delsf>>0] = 64;
 HEAPF32[$ixmax_val>>2] = 8206.0;
 HEAP8[$i>>0] = 0;
 while(1) {
  $1 = HEAP8[$i>>0]|0;
  $2 = $1&255;
  $3 = ($2|0)<(8);
  if (!($3)) {
   break;
  }
  $4 = HEAP8[$sf>>0]|0;
  $5 = $4&255;
  $6 = (88968 + ($5<<2)|0);
  $7 = +HEAPF32[$6>>2];
  $8 = +HEAPF32[$0>>2];
  $9 = $7 * $8;
  HEAPF32[$xfsf>>2] = $9;
  $10 = +HEAPF32[$xfsf>>2];
  $11 = $10 <= 8206.0;
  if ($11) {
   $12 = HEAP8[$sf>>0]|0;
   HEAP8[$sf_ok>>0] = $12;
   $13 = HEAP8[$delsf>>0]|0;
   $14 = $13&255;
   $15 = HEAP8[$sf>>0]|0;
   $16 = $15&255;
   $17 = (($16) - ($14))|0;
   $18 = $17&255;
   HEAP8[$sf>>0] = $18;
  } else {
   $19 = HEAP8[$delsf>>0]|0;
   $20 = $19&255;
   $21 = HEAP8[$sf>>0]|0;
   $22 = $21&255;
   $23 = (($22) + ($20))|0;
   $24 = $23&255;
   HEAP8[$sf>>0] = $24;
  }
  $25 = HEAP8[$delsf>>0]|0;
  $26 = $25&255;
  $27 = $26 >> 1;
  $28 = $27&255;
  HEAP8[$delsf>>0] = $28;
  $29 = HEAP8[$i>>0]|0;
  $30 = (($29) + 1)<<24>>24;
  HEAP8[$i>>0] = $30;
 }
 $31 = HEAP8[$sf_ok>>0]|0;
 STACKTOP = sp;return ($31|0);
}
function _set_scalefacs($cod_info,$vbrsfmin,$sf,$max_range) {
 $cod_info = $cod_info|0;
 $vbrsfmin = $vbrsfmin|0;
 $sf = $sf|0;
 $max_range = $max_range|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $gain = 0;
 var $ifqstep = 0, $ifqstepShift = 0, $m = 0, $preflag = 0, $sbg = 0, $scalefac = 0, $sfb = 0, $sfbmax = 0, $window = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $0 = sp + 52|0;
 $1 = sp + 48|0;
 $2 = sp + 44|0;
 $3 = sp + 40|0;
 $ifqstep = sp + 36|0;
 $ifqstepShift = sp + 32|0;
 $scalefac = sp + 28|0;
 $sfbmax = sp + 24|0;
 $sfb = sp + 20|0;
 $sbg = sp + 16|0;
 $window = sp + 12|0;
 $preflag = sp + 8|0;
 $gain = sp + 4|0;
 $m = sp;
 HEAP32[$0>>2] = $cod_info;
 HEAP32[$1>>2] = $vbrsfmin;
 HEAP32[$2>>2] = $sf;
 HEAP32[$3>>2] = $max_range;
 $4 = HEAP32[$0>>2]|0;
 $5 = (($4) + 4836|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)==(0);
 $8 = $7 ? 2 : 4;
 HEAP32[$ifqstep>>2] = $8;
 $9 = HEAP32[$0>>2]|0;
 $10 = (($9) + 4836|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($11|0)==(0);
 $13 = $12 ? 1 : 2;
 HEAP32[$ifqstepShift>>2] = $13;
 $14 = HEAP32[$0>>2]|0;
 $15 = (($14) + 4608|0);
 HEAP32[$scalefac>>2] = $15;
 $16 = HEAP32[$0>>2]|0;
 $17 = (($16) + 4860|0);
 $18 = HEAP32[$17>>2]|0;
 HEAP32[$sfbmax>>2] = $18;
 $19 = HEAP32[$0>>2]|0;
 $20 = (($19) + 4808|0);
 HEAP32[$sbg>>2] = $20;
 $21 = HEAP32[$0>>2]|0;
 $22 = (($21) + 5028|0);
 HEAP32[$window>>2] = $22;
 $23 = HEAP32[$0>>2]|0;
 $24 = (($23) + 4832|0);
 $25 = HEAP32[$24>>2]|0;
 HEAP32[$preflag>>2] = $25;
 $26 = HEAP32[$preflag>>2]|0;
 $27 = ($26|0)!=(0);
 L1: do {
  if ($27) {
   HEAP32[$sfb>>2] = 11;
   while(1) {
    $28 = HEAP32[$sfb>>2]|0;
    $29 = HEAP32[$sfbmax>>2]|0;
    $30 = ($28|0)<($29|0);
    if (!($30)) {
     break L1;
    }
    $31 = HEAP32[$sfb>>2]|0;
    $32 = (21376 + ($31<<2)|0);
    $33 = HEAP32[$32>>2]|0;
    $34 = HEAP32[$ifqstep>>2]|0;
    $35 = Math_imul($33, $34)|0;
    $36 = HEAP32[$sfb>>2]|0;
    $37 = HEAP32[$2>>2]|0;
    $38 = (($37) + ($36<<2)|0);
    $39 = HEAP32[$38>>2]|0;
    $40 = (($39) + ($35))|0;
    HEAP32[$38>>2] = $40;
    $41 = HEAP32[$sfb>>2]|0;
    $42 = (($41) + 1)|0;
    HEAP32[$sfb>>2] = $42;
   }
  }
 } while(0);
 HEAP32[$sfb>>2] = 0;
 while(1) {
  $43 = HEAP32[$sfb>>2]|0;
  $44 = HEAP32[$sfbmax>>2]|0;
  $45 = ($43|0)<($44|0);
  if (!($45)) {
   break;
  }
  $46 = HEAP32[$0>>2]|0;
  $47 = (($46) + 4780|0);
  $48 = HEAP32[$47>>2]|0;
  $49 = HEAP32[$sfb>>2]|0;
  $50 = HEAP32[$window>>2]|0;
  $51 = (($50) + ($49<<2)|0);
  $52 = HEAP32[$51>>2]|0;
  $53 = HEAP32[$sbg>>2]|0;
  $54 = (($53) + ($52<<2)|0);
  $55 = HEAP32[$54>>2]|0;
  $56 = $55<<3;
  $57 = (($48) - ($56))|0;
  $58 = HEAP32[$preflag>>2]|0;
  $59 = ($58|0)!=(0);
  if ($59) {
   $60 = HEAP32[$sfb>>2]|0;
   $61 = (21376 + ($60<<2)|0);
   $62 = HEAP32[$61>>2]|0;
   $65 = $62;
  } else {
   $65 = 0;
  }
  $63 = HEAP32[$ifqstep>>2]|0;
  $64 = Math_imul($65, $63)|0;
  $66 = (($57) - ($64))|0;
  HEAP32[$gain>>2] = $66;
  $67 = HEAP32[$sfb>>2]|0;
  $68 = HEAP32[$2>>2]|0;
  $69 = (($68) + ($67<<2)|0);
  $70 = HEAP32[$69>>2]|0;
  $71 = ($70|0)<(0);
  if ($71) {
   $72 = HEAP32[$gain>>2]|0;
   $73 = HEAP32[$sfb>>2]|0;
   $74 = HEAP32[$1>>2]|0;
   $75 = (($74) + ($73<<2)|0);
   $76 = HEAP32[$75>>2]|0;
   $77 = (($72) - ($76))|0;
   HEAP32[$m>>2] = $77;
   $78 = HEAP32[$ifqstep>>2]|0;
   $79 = (($78) - 1)|0;
   $80 = HEAP32[$sfb>>2]|0;
   $81 = HEAP32[$2>>2]|0;
   $82 = (($81) + ($80<<2)|0);
   $83 = HEAP32[$82>>2]|0;
   $84 = (($79) - ($83))|0;
   $85 = HEAP32[$ifqstepShift>>2]|0;
   $86 = $84 >> $85;
   $87 = HEAP32[$sfb>>2]|0;
   $88 = HEAP32[$scalefac>>2]|0;
   $89 = (($88) + ($87<<2)|0);
   HEAP32[$89>>2] = $86;
   $90 = HEAP32[$sfb>>2]|0;
   $91 = HEAP32[$scalefac>>2]|0;
   $92 = (($91) + ($90<<2)|0);
   $93 = HEAP32[$92>>2]|0;
   $94 = HEAP32[$sfb>>2]|0;
   $95 = HEAP32[$3>>2]|0;
   $96 = (($95) + ($94)|0);
   $97 = HEAP8[$96>>0]|0;
   $98 = $97&255;
   $99 = ($93|0)>($98|0);
   if ($99) {
    $100 = HEAP32[$sfb>>2]|0;
    $101 = HEAP32[$3>>2]|0;
    $102 = (($101) + ($100)|0);
    $103 = HEAP8[$102>>0]|0;
    $104 = $103&255;
    $105 = HEAP32[$sfb>>2]|0;
    $106 = HEAP32[$scalefac>>2]|0;
    $107 = (($106) + ($105<<2)|0);
    HEAP32[$107>>2] = $104;
   }
   $108 = HEAP32[$sfb>>2]|0;
   $109 = HEAP32[$scalefac>>2]|0;
   $110 = (($109) + ($108<<2)|0);
   $111 = HEAP32[$110>>2]|0;
   $112 = ($111|0)>(0);
   if ($112) {
    $113 = HEAP32[$sfb>>2]|0;
    $114 = HEAP32[$scalefac>>2]|0;
    $115 = (($114) + ($113<<2)|0);
    $116 = HEAP32[$115>>2]|0;
    $117 = HEAP32[$ifqstepShift>>2]|0;
    $118 = $116 << $117;
    $119 = HEAP32[$m>>2]|0;
    $120 = ($118|0)>($119|0);
    if ($120) {
     $121 = HEAP32[$m>>2]|0;
     $122 = HEAP32[$ifqstepShift>>2]|0;
     $123 = $121 >> $122;
     $124 = HEAP32[$sfb>>2]|0;
     $125 = HEAP32[$scalefac>>2]|0;
     $126 = (($125) + ($124<<2)|0);
     HEAP32[$126>>2] = $123;
    }
   }
  } else {
   $127 = HEAP32[$sfb>>2]|0;
   $128 = HEAP32[$scalefac>>2]|0;
   $129 = (($128) + ($127<<2)|0);
   HEAP32[$129>>2] = 0;
  }
  $130 = HEAP32[$sfb>>2]|0;
  $131 = (($130) + 1)|0;
  HEAP32[$sfb>>2] = $131;
 }
 while(1) {
  $132 = HEAP32[$sfb>>2]|0;
  $133 = ($132|0)<(39);
  if (!($133)) {
   break;
  }
  $134 = HEAP32[$sfb>>2]|0;
  $135 = HEAP32[$scalefac>>2]|0;
  $136 = (($135) + ($134<<2)|0);
  HEAP32[$136>>2] = 0;
  $137 = HEAP32[$sfb>>2]|0;
  $138 = (($137) + 1)|0;
  HEAP32[$sfb>>2] = $138;
 }
 STACKTOP = sp;return;
}
function _set_subblock_gain($cod_info,$mingain_s,$sf) {
 $cod_info = $cod_info|0;
 $mingain_s = $mingain_s|0;
 $sf = $sf|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $i = 0, $ifqstepShift = 0, $m1 = 0, $m12 = 0, $m2 = 0, $m23 = 0, $maxrange1 = 0, $maxrange2 = 0, $maxsf1 = 0, $maxsf2 = 0, $min_sbg = 0, $minsf = 0, $psydiv = 0, $psymax = 0, $sbg = 0, $sbg0 = 0, $sbg1 = 0, $sbg2 = 0, $sfb = 0;
 var $v = 0, $v1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0;
 $0 = sp + 92|0;
 $1 = sp + 88|0;
 $2 = sp + 84|0;
 $maxrange1 = sp + 80|0;
 $maxrange2 = sp + 76|0;
 $ifqstepShift = sp + 72|0;
 $sbg = sp + 68|0;
 $psymax = sp + 64|0;
 $psydiv = sp + 60|0;
 $sbg0 = sp + 56|0;
 $sbg1 = sp + 52|0;
 $sbg2 = sp + 48|0;
 $sfb = sp + 44|0;
 $i = sp + 40|0;
 $min_sbg = sp + 36|0;
 $maxsf1 = sp + 32|0;
 $maxsf2 = sp + 28|0;
 $minsf = sp + 24|0;
 $v = sp + 20|0;
 $v1 = sp + 16|0;
 $m1 = sp + 12|0;
 $m2 = sp + 8|0;
 $m12 = sp + 4|0;
 $m23 = sp;
 HEAP32[$0>>2] = $cod_info;
 HEAP32[$1>>2] = $mingain_s;
 HEAP32[$2>>2] = $sf;
 HEAP32[$maxrange1>>2] = 15;
 HEAP32[$maxrange2>>2] = 7;
 $3 = HEAP32[$0>>2]|0;
 $4 = (($3) + 4836|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0);
 $7 = $6 ? 1 : 2;
 HEAP32[$ifqstepShift>>2] = $7;
 $8 = HEAP32[$0>>2]|0;
 $9 = (($8) + 4808|0);
 HEAP32[$sbg>>2] = $9;
 $10 = HEAP32[$0>>2]|0;
 $11 = (($10) + 4864|0);
 $12 = HEAP32[$11>>2]|0;
 HEAP32[$psymax>>2] = $12;
 HEAP32[$psydiv>>2] = 18;
 HEAP32[$min_sbg>>2] = 7;
 $13 = HEAP32[$psydiv>>2]|0;
 $14 = HEAP32[$psymax>>2]|0;
 $15 = ($13>>>0)>($14>>>0);
 if ($15) {
  $16 = HEAP32[$psymax>>2]|0;
  HEAP32[$psydiv>>2] = $16;
 }
 HEAP32[$i>>2] = 0;
 while(1) {
  $17 = HEAP32[$i>>2]|0;
  $18 = ($17>>>0)<(3);
  if (!($18)) {
   break;
  }
  HEAP32[$maxsf1>>2] = 0;
  HEAP32[$maxsf2>>2] = 0;
  HEAP32[$minsf>>2] = 1000;
  $19 = HEAP32[$i>>2]|0;
  HEAP32[$sfb>>2] = $19;
  while(1) {
   $20 = HEAP32[$sfb>>2]|0;
   $21 = HEAP32[$psydiv>>2]|0;
   $22 = ($20>>>0)<($21>>>0);
   if (!($22)) {
    break;
   }
   $23 = HEAP32[$sfb>>2]|0;
   $24 = HEAP32[$2>>2]|0;
   $25 = (($24) + ($23<<2)|0);
   $26 = HEAP32[$25>>2]|0;
   $27 = (0 - ($26))|0;
   HEAP32[$v>>2] = $27;
   $28 = HEAP32[$maxsf1>>2]|0;
   $29 = HEAP32[$v>>2]|0;
   $30 = ($28|0)<($29|0);
   if ($30) {
    $31 = HEAP32[$v>>2]|0;
    HEAP32[$maxsf1>>2] = $31;
   }
   $32 = HEAP32[$minsf>>2]|0;
   $33 = HEAP32[$v>>2]|0;
   $34 = ($32|0)>($33|0);
   if ($34) {
    $35 = HEAP32[$v>>2]|0;
    HEAP32[$minsf>>2] = $35;
   }
   $36 = HEAP32[$sfb>>2]|0;
   $37 = (($36) + 3)|0;
   HEAP32[$sfb>>2] = $37;
  }
  while(1) {
   $38 = HEAP32[$sfb>>2]|0;
   $39 = ($38>>>0)<(39);
   if (!($39)) {
    break;
   }
   $40 = HEAP32[$sfb>>2]|0;
   $41 = HEAP32[$2>>2]|0;
   $42 = (($41) + ($40<<2)|0);
   $43 = HEAP32[$42>>2]|0;
   $44 = (0 - ($43))|0;
   HEAP32[$v1>>2] = $44;
   $45 = HEAP32[$maxsf2>>2]|0;
   $46 = HEAP32[$v1>>2]|0;
   $47 = ($45|0)<($46|0);
   if ($47) {
    $48 = HEAP32[$v1>>2]|0;
    HEAP32[$maxsf2>>2] = $48;
   }
   $49 = HEAP32[$minsf>>2]|0;
   $50 = HEAP32[$v1>>2]|0;
   $51 = ($49|0)>($50|0);
   if ($51) {
    $52 = HEAP32[$v1>>2]|0;
    HEAP32[$minsf>>2] = $52;
   }
   $53 = HEAP32[$sfb>>2]|0;
   $54 = (($53) + 3)|0;
   HEAP32[$sfb>>2] = $54;
  }
  $55 = HEAP32[$maxsf1>>2]|0;
  $56 = HEAP32[$ifqstepShift>>2]|0;
  $57 = 15 << $56;
  $58 = (($55) - ($57))|0;
  HEAP32[$m1>>2] = $58;
  $59 = HEAP32[$maxsf2>>2]|0;
  $60 = HEAP32[$ifqstepShift>>2]|0;
  $61 = 7 << $60;
  $62 = (($59) - ($61))|0;
  HEAP32[$m2>>2] = $62;
  $63 = HEAP32[$m1>>2]|0;
  $64 = HEAP32[$m2>>2]|0;
  $65 = ($63|0)>($64|0);
  $66 = HEAP32[$m1>>2]|0;
  $67 = HEAP32[$m2>>2]|0;
  $68 = $65 ? $66 : $67;
  HEAP32[$maxsf1>>2] = $68;
  $69 = HEAP32[$minsf>>2]|0;
  $70 = ($69|0)>(0);
  if ($70) {
   $71 = HEAP32[$minsf>>2]|0;
   $72 = $71 >> 3;
   $73 = HEAP32[$i>>2]|0;
   $74 = HEAP32[$sbg>>2]|0;
   $75 = (($74) + ($73<<2)|0);
   HEAP32[$75>>2] = $72;
  } else {
   $76 = HEAP32[$i>>2]|0;
   $77 = HEAP32[$sbg>>2]|0;
   $78 = (($77) + ($76<<2)|0);
   HEAP32[$78>>2] = 0;
  }
  $79 = HEAP32[$maxsf1>>2]|0;
  $80 = ($79|0)>(0);
  if ($80) {
   $81 = HEAP32[$i>>2]|0;
   $82 = HEAP32[$sbg>>2]|0;
   $83 = (($82) + ($81<<2)|0);
   $84 = HEAP32[$83>>2]|0;
   HEAP32[$m12>>2] = $84;
   $85 = HEAP32[$maxsf1>>2]|0;
   $86 = (($85) + 7)|0;
   $87 = $86 >> 3;
   HEAP32[$m23>>2] = $87;
   $88 = HEAP32[$m12>>2]|0;
   $89 = HEAP32[$m23>>2]|0;
   $90 = ($88|0)>($89|0);
   $91 = HEAP32[$m12>>2]|0;
   $92 = HEAP32[$m23>>2]|0;
   $93 = $90 ? $91 : $92;
   $94 = HEAP32[$i>>2]|0;
   $95 = HEAP32[$sbg>>2]|0;
   $96 = (($95) + ($94<<2)|0);
   HEAP32[$96>>2] = $93;
  }
  $97 = HEAP32[$i>>2]|0;
  $98 = HEAP32[$sbg>>2]|0;
  $99 = (($98) + ($97<<2)|0);
  $100 = HEAP32[$99>>2]|0;
  $101 = ($100|0)>(0);
  if ($101) {
   $102 = HEAP32[$i>>2]|0;
   $103 = HEAP32[$1>>2]|0;
   $104 = (($103) + ($102<<2)|0);
   $105 = HEAP32[$104>>2]|0;
   $106 = HEAP32[$0>>2]|0;
   $107 = (($106) + 4780|0);
   $108 = HEAP32[$107>>2]|0;
   $109 = HEAP32[$i>>2]|0;
   $110 = HEAP32[$sbg>>2]|0;
   $111 = (($110) + ($109<<2)|0);
   $112 = HEAP32[$111>>2]|0;
   $113 = $112<<3;
   $114 = (($108) - ($113))|0;
   $115 = ($105|0)>($114|0);
   if ($115) {
    $116 = HEAP32[$0>>2]|0;
    $117 = (($116) + 4780|0);
    $118 = HEAP32[$117>>2]|0;
    $119 = HEAP32[$i>>2]|0;
    $120 = HEAP32[$1>>2]|0;
    $121 = (($120) + ($119<<2)|0);
    $122 = HEAP32[$121>>2]|0;
    $123 = (($118) - ($122))|0;
    $124 = $123 >> 3;
    $125 = HEAP32[$i>>2]|0;
    $126 = HEAP32[$sbg>>2]|0;
    $127 = (($126) + ($125<<2)|0);
    HEAP32[$127>>2] = $124;
   }
  }
  $128 = HEAP32[$i>>2]|0;
  $129 = HEAP32[$sbg>>2]|0;
  $130 = (($129) + ($128<<2)|0);
  $131 = HEAP32[$130>>2]|0;
  $132 = ($131|0)>(7);
  if ($132) {
   $133 = HEAP32[$i>>2]|0;
   $134 = HEAP32[$sbg>>2]|0;
   $135 = (($134) + ($133<<2)|0);
   HEAP32[$135>>2] = 7;
  }
  $136 = HEAP32[$min_sbg>>2]|0;
  $137 = HEAP32[$i>>2]|0;
  $138 = HEAP32[$sbg>>2]|0;
  $139 = (($138) + ($137<<2)|0);
  $140 = HEAP32[$139>>2]|0;
  $141 = ($136|0)>($140|0);
  if ($141) {
   $142 = HEAP32[$i>>2]|0;
   $143 = HEAP32[$sbg>>2]|0;
   $144 = (($143) + ($142<<2)|0);
   $145 = HEAP32[$144>>2]|0;
   HEAP32[$min_sbg>>2] = $145;
  }
  $146 = HEAP32[$i>>2]|0;
  $147 = (($146) + 1)|0;
  HEAP32[$i>>2] = $147;
 }
 $148 = HEAP32[$sbg>>2]|0;
 $149 = HEAP32[$148>>2]|0;
 $150 = $149<<3;
 HEAP32[$sbg0>>2] = $150;
 $151 = HEAP32[$sbg>>2]|0;
 $152 = (($151) + 4|0);
 $153 = HEAP32[$152>>2]|0;
 $154 = $153<<3;
 HEAP32[$sbg1>>2] = $154;
 $155 = HEAP32[$sbg>>2]|0;
 $156 = (($155) + 8|0);
 $157 = HEAP32[$156>>2]|0;
 $158 = $157<<3;
 HEAP32[$sbg2>>2] = $158;
 HEAP32[$sfb>>2] = 0;
 while(1) {
  $159 = HEAP32[$sfb>>2]|0;
  $160 = ($159>>>0)<(39);
  if (!($160)) {
   break;
  }
  $161 = HEAP32[$sbg0>>2]|0;
  $162 = HEAP32[$sfb>>2]|0;
  $163 = (($162) + 0)|0;
  $164 = HEAP32[$2>>2]|0;
  $165 = (($164) + ($163<<2)|0);
  $166 = HEAP32[$165>>2]|0;
  $167 = (($166) + ($161))|0;
  HEAP32[$165>>2] = $167;
  $168 = HEAP32[$sbg1>>2]|0;
  $169 = HEAP32[$sfb>>2]|0;
  $170 = (($169) + 1)|0;
  $171 = HEAP32[$2>>2]|0;
  $172 = (($171) + ($170<<2)|0);
  $173 = HEAP32[$172>>2]|0;
  $174 = (($173) + ($168))|0;
  HEAP32[$172>>2] = $174;
  $175 = HEAP32[$sbg2>>2]|0;
  $176 = HEAP32[$sfb>>2]|0;
  $177 = (($176) + 2)|0;
  $178 = HEAP32[$2>>2]|0;
  $179 = (($178) + ($177<<2)|0);
  $180 = HEAP32[$179>>2]|0;
  $181 = (($180) + ($175))|0;
  HEAP32[$179>>2] = $181;
  $182 = HEAP32[$sfb>>2]|0;
  $183 = (($182) + 3)|0;
  HEAP32[$sfb>>2] = $183;
 }
 $184 = HEAP32[$min_sbg>>2]|0;
 $185 = ($184|0)>(0);
 if (!($185)) {
  STACKTOP = sp;return;
 }
 HEAP32[$i>>2] = 0;
 while(1) {
  $186 = HEAP32[$i>>2]|0;
  $187 = ($186>>>0)<(3);
  $188 = HEAP32[$min_sbg>>2]|0;
  if (!($187)) {
   break;
  }
  $189 = HEAP32[$i>>2]|0;
  $190 = HEAP32[$sbg>>2]|0;
  $191 = (($190) + ($189<<2)|0);
  $192 = HEAP32[$191>>2]|0;
  $193 = (($192) - ($188))|0;
  HEAP32[$191>>2] = $193;
  $194 = HEAP32[$i>>2]|0;
  $195 = (($194) + 1)|0;
  HEAP32[$i>>2] = $195;
 }
 $196 = $188<<3;
 $197 = HEAP32[$0>>2]|0;
 $198 = (($197) + 4780|0);
 $199 = HEAP32[$198>>2]|0;
 $200 = (($199) - ($196))|0;
 HEAP32[$198>>2] = $200;
 STACKTOP = sp;return;
}
function _tri_calc_sfb_noise_x34($xr,$xr34,$l3_xmin,$bw,$sf,$did_it) {
 $xr = $xr|0;
 $xr34 = $xr34|0;
 $l3_xmin = +$l3_xmin;
 $bw = $bw|0;
 $sf = $sf|0;
 $did_it = $did_it|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0.0, $104 = 0, $105 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0.0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0.0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0.0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0.0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0.0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0.0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0.0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0.0, $98 = 0, $99 = 0, $sf_x = 0, $sf_x1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = sp + 23|0;
 $1 = sp + 16|0;
 $2 = sp + 12|0;
 $3 = sp + 8|0;
 $4 = sp + 4|0;
 $5 = sp + 22|0;
 $6 = sp;
 $sf_x = sp + 21|0;
 $sf_x1 = sp + 20|0;
 HEAP32[$1>>2] = $xr;
 HEAP32[$2>>2] = $xr34;
 HEAPF32[$3>>2] = $l3_xmin;
 HEAP32[$4>>2] = $bw;
 HEAP8[$5>>0] = $sf;
 HEAP32[$6>>2] = $did_it;
 $7 = HEAP8[$5>>0]|0;
 $8 = $7&255;
 $9 = HEAP32[$6>>2]|0;
 $10 = (($9) + ($8<<3)|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($11|0)==(0);
 if ($12) {
  $13 = HEAP8[$5>>0]|0;
  $14 = $13&255;
  $15 = HEAP32[$6>>2]|0;
  $16 = (($15) + ($14<<3)|0);
  HEAP32[$16>>2] = 1;
  $17 = HEAP32[$1>>2]|0;
  $18 = HEAP32[$2>>2]|0;
  $19 = HEAP32[$4>>2]|0;
  $20 = HEAP8[$5>>0]|0;
  $21 = (+_calc_sfb_noise_x34($17,$18,$19,$20));
  $22 = HEAP8[$5>>0]|0;
  $23 = $22&255;
  $24 = HEAP32[$6>>2]|0;
  $25 = (($24) + ($23<<3)|0);
  $26 = (($25) + 4|0);
  HEAPF32[$26>>2] = $21;
 }
 $27 = +HEAPF32[$3>>2];
 $28 = HEAP8[$5>>0]|0;
 $29 = $28&255;
 $30 = HEAP32[$6>>2]|0;
 $31 = (($30) + ($29<<3)|0);
 $32 = (($31) + 4|0);
 $33 = +HEAPF32[$32>>2];
 $34 = $27 < $33;
 if ($34) {
  HEAP8[$0>>0] = 1;
  $105 = HEAP8[$0>>0]|0;
  STACKTOP = sp;return ($105|0);
 }
 $35 = HEAP8[$5>>0]|0;
 $36 = $35&255;
 $37 = ($36|0)<(255);
 if ($37) {
  $38 = HEAP8[$5>>0]|0;
  $39 = $38&255;
  $40 = (($39) + 1)|0;
  $41 = $40&255;
  HEAP8[$sf_x>>0] = $41;
  $42 = HEAP8[$sf_x>>0]|0;
  $43 = $42&255;
  $44 = HEAP32[$6>>2]|0;
  $45 = (($44) + ($43<<3)|0);
  $46 = HEAP32[$45>>2]|0;
  $47 = ($46|0)==(0);
  if ($47) {
   $48 = HEAP8[$sf_x>>0]|0;
   $49 = $48&255;
   $50 = HEAP32[$6>>2]|0;
   $51 = (($50) + ($49<<3)|0);
   HEAP32[$51>>2] = 1;
   $52 = HEAP32[$1>>2]|0;
   $53 = HEAP32[$2>>2]|0;
   $54 = HEAP32[$4>>2]|0;
   $55 = HEAP8[$sf_x>>0]|0;
   $56 = (+_calc_sfb_noise_x34($52,$53,$54,$55));
   $57 = HEAP8[$sf_x>>0]|0;
   $58 = $57&255;
   $59 = HEAP32[$6>>2]|0;
   $60 = (($59) + ($58<<3)|0);
   $61 = (($60) + 4|0);
   HEAPF32[$61>>2] = $56;
  }
  $62 = +HEAPF32[$3>>2];
  $63 = HEAP8[$sf_x>>0]|0;
  $64 = $63&255;
  $65 = HEAP32[$6>>2]|0;
  $66 = (($65) + ($64<<3)|0);
  $67 = (($66) + 4|0);
  $68 = +HEAPF32[$67>>2];
  $69 = $62 < $68;
  if ($69) {
   HEAP8[$0>>0] = 1;
   $105 = HEAP8[$0>>0]|0;
   STACKTOP = sp;return ($105|0);
  }
 }
 $70 = HEAP8[$5>>0]|0;
 $71 = $70&255;
 $72 = ($71|0)>(0);
 if ($72) {
  $73 = HEAP8[$5>>0]|0;
  $74 = $73&255;
  $75 = (($74) - 1)|0;
  $76 = $75&255;
  HEAP8[$sf_x1>>0] = $76;
  $77 = HEAP8[$sf_x1>>0]|0;
  $78 = $77&255;
  $79 = HEAP32[$6>>2]|0;
  $80 = (($79) + ($78<<3)|0);
  $81 = HEAP32[$80>>2]|0;
  $82 = ($81|0)==(0);
  if ($82) {
   $83 = HEAP8[$sf_x1>>0]|0;
   $84 = $83&255;
   $85 = HEAP32[$6>>2]|0;
   $86 = (($85) + ($84<<3)|0);
   HEAP32[$86>>2] = 1;
   $87 = HEAP32[$1>>2]|0;
   $88 = HEAP32[$2>>2]|0;
   $89 = HEAP32[$4>>2]|0;
   $90 = HEAP8[$sf_x1>>0]|0;
   $91 = (+_calc_sfb_noise_x34($87,$88,$89,$90));
   $92 = HEAP8[$sf_x1>>0]|0;
   $93 = $92&255;
   $94 = HEAP32[$6>>2]|0;
   $95 = (($94) + ($93<<3)|0);
   $96 = (($95) + 4|0);
   HEAPF32[$96>>2] = $91;
  }
  $97 = +HEAPF32[$3>>2];
  $98 = HEAP8[$sf_x1>>0]|0;
  $99 = $98&255;
  $100 = HEAP32[$6>>2]|0;
  $101 = (($100) + ($99<<3)|0);
  $102 = (($101) + 4|0);
  $103 = +HEAPF32[$102>>2];
  $104 = $97 < $103;
  if ($104) {
   HEAP8[$0>>0] = 1;
   $105 = HEAP8[$0>>0]|0;
   STACKTOP = sp;return ($105|0);
  }
 }
 HEAP8[$0>>0] = 0;
 $105 = HEAP8[$0>>0]|0;
 STACKTOP = sp;return ($105|0);
}
function _calc_sfb_noise_x34($xr,$xr34,$bw,$sf) {
 $xr = $xr|0;
 $xr34 = $xr34|0;
 $bw = $bw|0;
 $sf = $sf|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0.0, $102 = 0.0, $103 = 0.0, $104 = 0, $105 = 0.0, $106 = 0, $107 = 0.0, $108 = 0.0, $109 = 0, $11 = 0, $110 = 0.0, $111 = 0, $112 = 0.0, $113 = 0.0, $114 = 0.0, $115 = 0.0;
 var $116 = 0.0, $117 = 0.0, $118 = 0.0, $119 = 0.0, $12 = 0.0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0.0, $131 = 0, $132 = 0, $133 = 0.0;
 var $134 = 0.0, $135 = 0.0, $136 = 0, $137 = 0.0, $138 = 0, $139 = 0, $14 = 0, $140 = 0.0, $141 = 0.0, $142 = 0.0, $143 = 0, $144 = 0.0, $145 = 0, $146 = 0.0, $147 = 0.0, $148 = 0.0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0.0, $156 = 0.0, $157 = 0.0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0.0, $162 = 0.0, $163 = 0.0, $164 = 0.0, $165 = 0, $166 = 0, $167 = 0, $168 = 0.0, $169 = 0.0, $17 = 0;
 var $170 = 0.0, $171 = 0, $172 = 0, $173 = 0, $174 = 0.0, $175 = 0.0, $176 = 0.0, $177 = 0.0, $178 = 0, $179 = 0, $18 = 0, $180 = 0.0, $181 = 0.0, $182 = 0.0, $183 = 0, $184 = 0, $185 = 0.0, $186 = 0.0, $187 = 0.0, $188 = 0.0;
 var $189 = 0.0, $19 = 0, $190 = 0.0, $191 = 0.0, $192 = 0, $193 = 0.0, $194 = 0, $195 = 0.0, $196 = 0.0, $197 = 0.0, $198 = 0, $199 = 0.0, $2 = 0, $20 = 0.0, $200 = 0, $201 = 0.0, $202 = 0.0, $203 = 0, $204 = 0.0, $205 = 0;
 var $206 = 0.0, $207 = 0.0, $208 = 0.0, $209 = 0.0, $21 = 0, $210 = 0.0, $211 = 0.0, $212 = 0.0, $213 = 0.0, $214 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0, $27 = 0, $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0.0;
 var $31 = 0, $32 = 0.0, $33 = 0, $34 = 0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0, $39 = 0.0, $4 = 0, $40 = 0, $41 = 0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0, $46 = 0, $47 = 0.0, $48 = 0.0, $49 = 0.0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0, $57 = 0, $58 = 0.0, $59 = 0.0, $6 = 0, $60 = 0.0, $61 = 0, $62 = 0, $63 = 0, $64 = 0.0, $65 = 0.0, $66 = 0.0, $67 = 0.0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0.0, $72 = 0.0, $73 = 0.0, $74 = 0, $75 = 0, $76 = 0, $77 = 0.0, $78 = 0.0, $79 = 0.0, $8 = 0.0, $80 = 0.0, $81 = 0, $82 = 0, $83 = 0, $84 = 0.0, $85 = 0.0;
 var $86 = 0.0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0.0, $91 = 0.0, $92 = 0.0, $93 = 0.0, $94 = 0, $95 = 0.0, $96 = 0.0, $97 = 0.0, $98 = 0, $99 = 0.0, $i = 0, $l3 = 0, $remaining = 0, $sfpow = 0, $sfpow34 = 0;
 var $x = 0, $xfsf = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0;
 $0 = sp + 80|0;
 $1 = sp + 76|0;
 $2 = sp + 72|0;
 $3 = sp + 84|0;
 $x = sp;
 $l3 = sp + 56|0;
 $sfpow = sp + 48|0;
 $sfpow34 = sp + 44|0;
 $xfsf = sp + 40|0;
 $i = sp + 36|0;
 $remaining = sp + 32|0;
 HEAP32[$0>>2] = $xr;
 HEAP32[$1>>2] = $xr34;
 HEAP32[$2>>2] = $bw;
 HEAP8[$3>>0] = $sf;
 $4 = HEAP8[$3>>0]|0;
 $5 = $4&255;
 $6 = (($5) + 116)|0;
 $7 = (90000 + ($6<<2)|0);
 $8 = +HEAPF32[$7>>2];
 HEAPF32[$sfpow>>2] = $8;
 $9 = HEAP8[$3>>0]|0;
 $10 = $9&255;
 $11 = (88968 + ($10<<2)|0);
 $12 = +HEAPF32[$11>>2];
 HEAPF32[$sfpow34>>2] = $12;
 HEAPF32[$xfsf>>2] = 0.0;
 $13 = HEAP32[$2>>2]|0;
 $14 = $13 >>> 2;
 HEAP32[$i>>2] = $14;
 $15 = HEAP32[$2>>2]|0;
 $16 = $15 & 3;
 HEAP32[$remaining>>2] = $16;
 while(1) {
  $17 = HEAP32[$i>>2]|0;
  $18 = (($17) + -1)|0;
  HEAP32[$i>>2] = $18;
  $19 = ($17>>>0)>(0);
  if (!($19)) {
   break;
  }
  $20 = +HEAPF32[$sfpow34>>2];
  $21 = HEAP32[$1>>2]|0;
  $22 = +HEAPF32[$21>>2];
  $23 = $20 * $22;
  $24 = $23;
  HEAPF64[$x>>3] = $24;
  $25 = +HEAPF32[$sfpow34>>2];
  $26 = HEAP32[$1>>2]|0;
  $27 = (($26) + 4|0);
  $28 = +HEAPF32[$27>>2];
  $29 = $25 * $28;
  $30 = $29;
  $31 = (($x) + 8|0);
  HEAPF64[$31>>3] = $30;
  $32 = +HEAPF32[$sfpow34>>2];
  $33 = HEAP32[$1>>2]|0;
  $34 = (($33) + 8|0);
  $35 = +HEAPF32[$34>>2];
  $36 = $32 * $35;
  $37 = $36;
  $38 = (($x) + 16|0);
  HEAPF64[$38>>3] = $37;
  $39 = +HEAPF32[$sfpow34>>2];
  $40 = HEAP32[$1>>2]|0;
  $41 = (($40) + 12|0);
  $42 = +HEAPF32[$41>>2];
  $43 = $39 * $42;
  $44 = $43;
  $45 = (($x) + 24|0);
  HEAPF64[$45>>3] = $44;
  _k_34_4($x,$l3);
  $46 = HEAP32[$0>>2]|0;
  $47 = +HEAPF32[$46>>2];
  $48 = (+Math_abs((+$47)));
  $49 = +HEAPF32[$sfpow>>2];
  $50 = HEAP32[$l3>>2]|0;
  $51 = (23304 + ($50<<2)|0);
  $52 = +HEAPF32[$51>>2];
  $53 = $49 * $52;
  $54 = $48 - $53;
  $55 = $54;
  HEAPF64[$x>>3] = $55;
  $56 = HEAP32[$0>>2]|0;
  $57 = (($56) + 4|0);
  $58 = +HEAPF32[$57>>2];
  $59 = (+Math_abs((+$58)));
  $60 = +HEAPF32[$sfpow>>2];
  $61 = (($l3) + 4|0);
  $62 = HEAP32[$61>>2]|0;
  $63 = (23304 + ($62<<2)|0);
  $64 = +HEAPF32[$63>>2];
  $65 = $60 * $64;
  $66 = $59 - $65;
  $67 = $66;
  $68 = (($x) + 8|0);
  HEAPF64[$68>>3] = $67;
  $69 = HEAP32[$0>>2]|0;
  $70 = (($69) + 8|0);
  $71 = +HEAPF32[$70>>2];
  $72 = (+Math_abs((+$71)));
  $73 = +HEAPF32[$sfpow>>2];
  $74 = (($l3) + 8|0);
  $75 = HEAP32[$74>>2]|0;
  $76 = (23304 + ($75<<2)|0);
  $77 = +HEAPF32[$76>>2];
  $78 = $73 * $77;
  $79 = $72 - $78;
  $80 = $79;
  $81 = (($x) + 16|0);
  HEAPF64[$81>>3] = $80;
  $82 = HEAP32[$0>>2]|0;
  $83 = (($82) + 12|0);
  $84 = +HEAPF32[$83>>2];
  $85 = (+Math_abs((+$84)));
  $86 = +HEAPF32[$sfpow>>2];
  $87 = (($l3) + 12|0);
  $88 = HEAP32[$87>>2]|0;
  $89 = (23304 + ($88<<2)|0);
  $90 = +HEAPF32[$89>>2];
  $91 = $86 * $90;
  $92 = $85 - $91;
  $93 = $92;
  $94 = (($x) + 24|0);
  HEAPF64[$94>>3] = $93;
  $95 = +HEAPF64[$x>>3];
  $96 = +HEAPF64[$x>>3];
  $97 = $95 * $96;
  $98 = (($x) + 8|0);
  $99 = +HEAPF64[$98>>3];
  $100 = (($x) + 8|0);
  $101 = +HEAPF64[$100>>3];
  $102 = $99 * $101;
  $103 = $97 + $102;
  $104 = (($x) + 16|0);
  $105 = +HEAPF64[$104>>3];
  $106 = (($x) + 16|0);
  $107 = +HEAPF64[$106>>3];
  $108 = $105 * $107;
  $109 = (($x) + 24|0);
  $110 = +HEAPF64[$109>>3];
  $111 = (($x) + 24|0);
  $112 = +HEAPF64[$111>>3];
  $113 = $110 * $112;
  $114 = $108 + $113;
  $115 = $103 + $114;
  $116 = +HEAPF32[$xfsf>>2];
  $117 = $116;
  $118 = $117 + $115;
  $119 = $118;
  HEAPF32[$xfsf>>2] = $119;
  $120 = HEAP32[$0>>2]|0;
  $121 = (($120) + 16|0);
  HEAP32[$0>>2] = $121;
  $122 = HEAP32[$1>>2]|0;
  $123 = (($122) + 16|0);
  HEAP32[$1>>2] = $123;
 }
 $124 = HEAP32[$remaining>>2]|0;
 $125 = ($124|0)!=(0);
 if (!($125)) {
  $214 = +HEAPF32[$xfsf>>2];
  STACKTOP = sp;return (+$214);
 }
 $126 = (($x) + 24|0);
 HEAPF64[$126>>3] = 0.0;
 $127 = (($x) + 16|0);
 HEAPF64[$127>>3] = 0.0;
 $128 = (($x) + 8|0);
 HEAPF64[$128>>3] = 0.0;
 HEAPF64[$x>>3] = 0.0;
 $129 = HEAP32[$remaining>>2]|0;
 if ((($129|0) == 2)) {
  label = 7;
 } else if ((($129|0) == 3)) {
  $130 = +HEAPF32[$sfpow34>>2];
  $131 = HEAP32[$1>>2]|0;
  $132 = (($131) + 8|0);
  $133 = +HEAPF32[$132>>2];
  $134 = $130 * $133;
  $135 = $134;
  $136 = (($x) + 16|0);
  HEAPF64[$136>>3] = $135;
  label = 7;
 } else if ((($129|0) == 1)) {
  label = 8;
 }
 if ((label|0) == 7) {
  $137 = +HEAPF32[$sfpow34>>2];
  $138 = HEAP32[$1>>2]|0;
  $139 = (($138) + 4|0);
  $140 = +HEAPF32[$139>>2];
  $141 = $137 * $140;
  $142 = $141;
  $143 = (($x) + 8|0);
  HEAPF64[$143>>3] = $142;
  label = 8;
 }
 if ((label|0) == 8) {
  $144 = +HEAPF32[$sfpow34>>2];
  $145 = HEAP32[$1>>2]|0;
  $146 = +HEAPF32[$145>>2];
  $147 = $144 * $146;
  $148 = $147;
  HEAPF64[$x>>3] = $148;
 }
 _k_34_4($x,$l3);
 $149 = (($x) + 24|0);
 HEAPF64[$149>>3] = 0.0;
 $150 = (($x) + 16|0);
 HEAPF64[$150>>3] = 0.0;
 $151 = (($x) + 8|0);
 HEAPF64[$151>>3] = 0.0;
 HEAPF64[$x>>3] = 0.0;
 $152 = HEAP32[$remaining>>2]|0;
 if ((($152|0) == 1)) {
  label = 12;
 } else if ((($152|0) == 3)) {
  $153 = HEAP32[$0>>2]|0;
  $154 = (($153) + 8|0);
  $155 = +HEAPF32[$154>>2];
  $156 = (+Math_abs((+$155)));
  $157 = +HEAPF32[$sfpow>>2];
  $158 = (($l3) + 8|0);
  $159 = HEAP32[$158>>2]|0;
  $160 = (23304 + ($159<<2)|0);
  $161 = +HEAPF32[$160>>2];
  $162 = $157 * $161;
  $163 = $156 - $162;
  $164 = $163;
  $165 = (($x) + 16|0);
  HEAPF64[$165>>3] = $164;
  label = 11;
 } else if ((($152|0) == 2)) {
  label = 11;
 }
 if ((label|0) == 11) {
  $166 = HEAP32[$0>>2]|0;
  $167 = (($166) + 4|0);
  $168 = +HEAPF32[$167>>2];
  $169 = (+Math_abs((+$168)));
  $170 = +HEAPF32[$sfpow>>2];
  $171 = (($l3) + 4|0);
  $172 = HEAP32[$171>>2]|0;
  $173 = (23304 + ($172<<2)|0);
  $174 = +HEAPF32[$173>>2];
  $175 = $170 * $174;
  $176 = $169 - $175;
  $177 = $176;
  $178 = (($x) + 8|0);
  HEAPF64[$178>>3] = $177;
  label = 12;
 }
 if ((label|0) == 12) {
  $179 = HEAP32[$0>>2]|0;
  $180 = +HEAPF32[$179>>2];
  $181 = (+Math_abs((+$180)));
  $182 = +HEAPF32[$sfpow>>2];
  $183 = HEAP32[$l3>>2]|0;
  $184 = (23304 + ($183<<2)|0);
  $185 = +HEAPF32[$184>>2];
  $186 = $182 * $185;
  $187 = $181 - $186;
  $188 = $187;
  HEAPF64[$x>>3] = $188;
 }
 $189 = +HEAPF64[$x>>3];
 $190 = +HEAPF64[$x>>3];
 $191 = $189 * $190;
 $192 = (($x) + 8|0);
 $193 = +HEAPF64[$192>>3];
 $194 = (($x) + 8|0);
 $195 = +HEAPF64[$194>>3];
 $196 = $193 * $195;
 $197 = $191 + $196;
 $198 = (($x) + 16|0);
 $199 = +HEAPF64[$198>>3];
 $200 = (($x) + 16|0);
 $201 = +HEAPF64[$200>>3];
 $202 = $199 * $201;
 $203 = (($x) + 24|0);
 $204 = +HEAPF64[$203>>3];
 $205 = (($x) + 24|0);
 $206 = +HEAPF64[$205>>3];
 $207 = $204 * $206;
 $208 = $202 + $207;
 $209 = $197 + $208;
 $210 = +HEAPF32[$xfsf>>2];
 $211 = $210;
 $212 = $211 + $209;
 $213 = $212;
 HEAPF32[$xfsf>>2] = $213;
 $214 = +HEAPF32[$xfsf>>2];
 STACKTOP = sp;return (+$214);
}
function _calc_scalefac($l3_xmin,$bw) {
 $l3_xmin = +$l3_xmin;
 $bw = $bw|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0.0, $3 = 0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0, $c = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp + 8|0;
 $1 = sp + 4|0;
 $c = sp;
 HEAPF32[$0>>2] = $l3_xmin;
 HEAP32[$1>>2] = $bw;
 HEAPF32[$c>>2] = 5.79914236068725585938;
 $2 = +HEAPF32[$0>>2];
 $3 = HEAP32[$1>>2]|0;
 $4 = (+($3|0));
 $5 = $2 / $4;
 $6 = (+_log10f((+$5)));
 $7 = 5.79914236068725585938 * $6;
 $8 = $7 - 0.5;
 $9 = (~~(($8)));
 $10 = (210 + ($9))|0;
 STACKTOP = sp;return ($10|0);
}
function _AddVbrFrame($gfc) {
 $gfc = $gfc|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $kbps = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp + 4|0;
 $kbps = sp;
 HEAP32[$0>>2] = $gfc;
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 84040|0);
 $3 = (($2) + 704|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = HEAP32[$0>>2]|0;
 $6 = (($5) + 16|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (97760 + ($7<<6)|0);
 $9 = (($8) + ($4<<2)|0);
 $10 = HEAP32[$9>>2]|0;
 HEAP32[$kbps>>2] = $10;
 $11 = HEAP32[$0>>2]|0;
 $12 = (($11) + 85760|0);
 $13 = HEAP32[$kbps>>2]|0;
 _addVbr($12,$13);
 STACKTOP = sp;return;
}
function _addVbr($v,$bitrate) {
 $v = $v|0;
 $bitrate = $bitrate|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $8 = 0, $9 = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp + 8|0;
 $1 = sp + 4|0;
 $i = sp;
 HEAP32[$0>>2] = $v;
 HEAP32[$1>>2] = $bitrate;
 $2 = HEAP32[$0>>2]|0;
 $3 = (($2) + 24|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($4) + 1)|0;
 HEAP32[$3>>2] = $5;
 $6 = HEAP32[$1>>2]|0;
 $7 = HEAP32[$0>>2]|0;
 $8 = HEAP32[$7>>2]|0;
 $9 = (($8) + ($6))|0;
 HEAP32[$7>>2] = $9;
 $10 = HEAP32[$0>>2]|0;
 $11 = (($10) + 4|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (($12) + 1)|0;
 HEAP32[$11>>2] = $13;
 $14 = HEAP32[$0>>2]|0;
 $15 = (($14) + 4|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = HEAP32[$0>>2]|0;
 $18 = (($17) + 8|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = ($16|0)<($19|0);
 if ($20) {
  STACKTOP = sp;return;
 }
 $21 = HEAP32[$0>>2]|0;
 $22 = (($21) + 12|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = HEAP32[$0>>2]|0;
 $25 = (($24) + 16|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = ($23|0)<($26|0);
 if ($27) {
  $28 = HEAP32[$0>>2]|0;
  $29 = HEAP32[$28>>2]|0;
  $30 = HEAP32[$0>>2]|0;
  $31 = (($30) + 12|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = HEAP32[$0>>2]|0;
  $34 = (($33) + 20|0);
  $35 = HEAP32[$34>>2]|0;
  $36 = (($35) + ($32<<2)|0);
  HEAP32[$36>>2] = $29;
  $37 = HEAP32[$0>>2]|0;
  $38 = (($37) + 12|0);
  $39 = HEAP32[$38>>2]|0;
  $40 = (($39) + 1)|0;
  HEAP32[$38>>2] = $40;
  $41 = HEAP32[$0>>2]|0;
  $42 = (($41) + 4|0);
  HEAP32[$42>>2] = 0;
 }
 $43 = HEAP32[$0>>2]|0;
 $44 = (($43) + 12|0);
 $45 = HEAP32[$44>>2]|0;
 $46 = HEAP32[$0>>2]|0;
 $47 = (($46) + 16|0);
 $48 = HEAP32[$47>>2]|0;
 $49 = ($45|0)==($48|0);
 if (!($49)) {
  STACKTOP = sp;return;
 }
 HEAP32[$i>>2] = 1;
 while(1) {
  $50 = HEAP32[$i>>2]|0;
  $51 = HEAP32[$0>>2]|0;
  $52 = (($51) + 16|0);
  $53 = HEAP32[$52>>2]|0;
  $54 = ($50|0)<($53|0);
  if (!($54)) {
   break;
  }
  $55 = HEAP32[$i>>2]|0;
  $56 = HEAP32[$0>>2]|0;
  $57 = (($56) + 20|0);
  $58 = HEAP32[$57>>2]|0;
  $59 = (($58) + ($55<<2)|0);
  $60 = HEAP32[$59>>2]|0;
  $61 = HEAP32[$i>>2]|0;
  $62 = (($61|0) / 2)&-1;
  $63 = HEAP32[$0>>2]|0;
  $64 = (($63) + 20|0);
  $65 = HEAP32[$64>>2]|0;
  $66 = (($65) + ($62<<2)|0);
  HEAP32[$66>>2] = $60;
  $67 = HEAP32[$i>>2]|0;
  $68 = (($67) + 2)|0;
  HEAP32[$i>>2] = $68;
 }
 $69 = HEAP32[$0>>2]|0;
 $70 = (($69) + 8|0);
 $71 = HEAP32[$70>>2]|0;
 $72 = $71<<1;
 HEAP32[$70>>2] = $72;
 $73 = HEAP32[$0>>2]|0;
 $74 = (($73) + 12|0);
 $75 = HEAP32[$74>>2]|0;
 $76 = (($75|0) / 2)&-1;
 HEAP32[$74>>2] = $76;
 STACKTOP = sp;return;
}
function _InitVbrTag($gfp) {
 $gfp = $gfp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $buffer = 0;
 var $cfg = 0, $gfc = 0, $header_size = 0, $i = 0, $kbps_header = 0, $n = 0, $or$cond = 0, $total_frame_size = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 2928|0;
 $vararg_buffer = sp;
 $0 = sp + 36|0;
 $1 = sp + 32|0;
 $gfc = sp + 28|0;
 $cfg = sp + 24|0;
 $kbps_header = sp + 20|0;
 $total_frame_size = sp + 16|0;
 $header_size = sp + 12|0;
 $buffer = sp + 40|0;
 $i = sp + 8|0;
 $n = sp + 4|0;
 HEAP32[$1>>2] = $gfp;
 $2 = HEAP32[$1>>2]|0;
 $3 = (($2) + 288|0);
 $4 = HEAP32[$3>>2]|0;
 HEAP32[$gfc>>2] = $4;
 $5 = HEAP32[$gfc>>2]|0;
 $6 = (($5) + 16|0);
 HEAP32[$cfg>>2] = $6;
 $7 = HEAP32[$cfg>>2]|0;
 $8 = HEAP32[$7>>2]|0;
 $9 = (1)==($8|0);
 do {
  if ($9) {
   HEAP32[$kbps_header>>2] = 128;
  } else {
   $10 = HEAP32[$cfg>>2]|0;
   $11 = (($10) + 48|0);
   $12 = HEAP32[$11>>2]|0;
   $13 = ($12|0)<(16000);
   if ($13) {
    HEAP32[$kbps_header>>2] = 32;
    break;
   } else {
    HEAP32[$kbps_header>>2] = 64;
    break;
   }
  }
 } while(0);
 $14 = HEAP32[$cfg>>2]|0;
 $15 = (($14) + 88|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = ($16|0)==(0);
 if ($17) {
  $18 = HEAP32[$cfg>>2]|0;
  $19 = (($18) + 104|0);
  $20 = HEAP32[$19>>2]|0;
  HEAP32[$kbps_header>>2] = $20;
 }
 $21 = HEAP32[$cfg>>2]|0;
 $22 = HEAP32[$21>>2]|0;
 $23 = (($22) + 1)|0;
 $24 = ($23*72000)|0;
 $25 = HEAP32[$kbps_header>>2]|0;
 $26 = Math_imul($24, $25)|0;
 $27 = HEAP32[$cfg>>2]|0;
 $28 = (($27) + 48|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = (($26|0) / ($29|0))&-1;
 HEAP32[$total_frame_size>>2] = $30;
 $31 = HEAP32[$cfg>>2]|0;
 $32 = (($31) + 8|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = (($33) + 156)|0;
 HEAP32[$header_size>>2] = $34;
 $35 = HEAP32[$total_frame_size>>2]|0;
 $36 = HEAP32[$gfc>>2]|0;
 $37 = (($36) + 85760|0);
 $38 = (($37) + 32|0);
 HEAP32[$38>>2] = $35;
 $39 = HEAP32[$total_frame_size>>2]|0;
 $40 = HEAP32[$header_size>>2]|0;
 $41 = ($39|0)<($40|0);
 $42 = HEAP32[$total_frame_size>>2]|0;
 $43 = ($42|0)>(2880);
 $or$cond = $41 | $43;
 $44 = HEAP32[$gfc>>2]|0;
 if ($or$cond) {
  $45 = (($44) + 16|0);
  $46 = (($45) + 140|0);
  HEAP32[$46>>2] = 0;
  HEAP32[$0>>2] = 0;
  $98 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($98|0);
 }
 $47 = (($44) + 85760|0);
 $48 = (($47) + 24|0);
 HEAP32[$48>>2] = 0;
 $49 = HEAP32[$gfc>>2]|0;
 $50 = (($49) + 85760|0);
 $51 = (($50) + 28|0);
 HEAP32[$51>>2] = 0;
 $52 = HEAP32[$gfc>>2]|0;
 $53 = (($52) + 85760|0);
 HEAP32[$53>>2] = 0;
 $54 = HEAP32[$gfc>>2]|0;
 $55 = (($54) + 85760|0);
 $56 = (($55) + 4|0);
 HEAP32[$56>>2] = 0;
 $57 = HEAP32[$gfc>>2]|0;
 $58 = (($57) + 85760|0);
 $59 = (($58) + 8|0);
 HEAP32[$59>>2] = 1;
 $60 = HEAP32[$gfc>>2]|0;
 $61 = (($60) + 85760|0);
 $62 = (($61) + 12|0);
 HEAP32[$62>>2] = 0;
 $63 = HEAP32[$gfc>>2]|0;
 $64 = (($63) + 85760|0);
 $65 = (($64) + 20|0);
 $66 = HEAP32[$65>>2]|0;
 $67 = ($66|0)==(0|0);
 do {
  if ($67) {
   $68 = (_malloc(1600)|0);
   $69 = HEAP32[$gfc>>2]|0;
   $70 = (($69) + 85760|0);
   $71 = (($70) + 20|0);
   HEAP32[$71>>2] = $68;
   $72 = HEAP32[$gfc>>2]|0;
   $73 = (($72) + 85760|0);
   $74 = (($73) + 20|0);
   $75 = HEAP32[$74>>2]|0;
   $76 = ($75|0)!=(0|0);
   $77 = HEAP32[$gfc>>2]|0;
   $78 = (($77) + 85760|0);
   $79 = (($78) + 16|0);
   if ($76) {
    HEAP32[$79>>2] = 400;
    break;
   }
   HEAP32[$79>>2] = 0;
   $80 = HEAP32[$gfc>>2]|0;
   _lame_errorf($80,101336,$vararg_buffer);
   $81 = HEAP32[$gfc>>2]|0;
   $82 = (($81) + 16|0);
   $83 = (($82) + 140|0);
   HEAP32[$83>>2] = 0;
   HEAP32[$0>>2] = -1;
   $98 = HEAP32[$0>>2]|0;
   STACKTOP = sp;return ($98|0);
  }
 } while(0);
 _memset(($buffer|0),0,2880)|0;
 $84 = HEAP32[$gfc>>2]|0;
 _setLameTagFrameHeader($84,$buffer);
 $85 = HEAP32[$gfc>>2]|0;
 $86 = (($85) + 85760|0);
 $87 = (($86) + 32|0);
 $88 = HEAP32[$87>>2]|0;
 HEAP32[$n>>2] = $88;
 HEAP32[$i>>2] = 0;
 while(1) {
  $89 = HEAP32[$i>>2]|0;
  $90 = HEAP32[$n>>2]|0;
  $91 = ($89>>>0)<($90>>>0);
  if (!($91)) {
   break;
  }
  $92 = HEAP32[$gfc>>2]|0;
  $93 = HEAP32[$i>>2]|0;
  $94 = (($buffer) + ($93)|0);
  $95 = HEAP8[$94>>0]|0;
  _add_dummy_byte($92,$95,1);
  $96 = HEAP32[$i>>2]|0;
  $97 = (($96) + 1)|0;
  HEAP32[$i>>2] = $97;
 }
 HEAP32[$0>>2] = 0;
 $98 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($98|0);
}
function _setLameTagFrameHeader($gfc,$buffer) {
 $gfc = $gfc|0;
 $buffer = $buffer|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $abyte = 0, $bbyte = 0, $bitrate = 0, $cfg = 0, $eov = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = sp + 16|0;
 $1 = sp + 12|0;
 $cfg = sp + 8|0;
 $eov = sp + 4|0;
 $abyte = sp + 21|0;
 $bbyte = sp + 20|0;
 $bitrate = sp;
 HEAP32[$0>>2] = $gfc;
 HEAP32[$1>>2] = $buffer;
 $2 = HEAP32[$0>>2]|0;
 $3 = (($2) + 16|0);
 HEAP32[$cfg>>2] = $3;
 $4 = HEAP32[$0>>2]|0;
 $5 = (($4) + 84040|0);
 HEAP32[$eov>>2] = $5;
 $6 = HEAP32[$1>>2]|0;
 $7 = HEAP8[$6>>0]|0;
 $8 = $7&255;
 $9 = $8 << 8;
 $10 = $9 | 255;
 $11 = $10&255;
 $12 = HEAP32[$1>>2]|0;
 HEAP8[$12>>0] = $11;
 $13 = HEAP32[$1>>2]|0;
 $14 = (($13) + 1|0);
 $15 = HEAP8[$14>>0]|0;
 $16 = $15&255;
 $17 = $16 << 3;
 $18 = $17 | 7;
 $19 = $18&255;
 $20 = HEAP32[$1>>2]|0;
 $21 = (($20) + 1|0);
 HEAP8[$21>>0] = $19;
 $22 = HEAP32[$1>>2]|0;
 $23 = (($22) + 1|0);
 $24 = HEAP8[$23>>0]|0;
 $25 = $24&255;
 $26 = $25 << 1;
 $27 = HEAP32[$cfg>>2]|0;
 $28 = (($27) + 48|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = ($29|0)<(16000);
 $31 = $30 ? 0 : 1;
 $32 = $31 & 1;
 $33 = $26 | $32;
 $34 = $33&255;
 $35 = HEAP32[$1>>2]|0;
 $36 = (($35) + 1|0);
 HEAP8[$36>>0] = $34;
 $37 = HEAP32[$1>>2]|0;
 $38 = (($37) + 1|0);
 $39 = HEAP8[$38>>0]|0;
 $40 = $39&255;
 $41 = $40 << 1;
 $42 = HEAP32[$cfg>>2]|0;
 $43 = HEAP32[$42>>2]|0;
 $44 = $43 & 1;
 $45 = $41 | $44;
 $46 = $45&255;
 $47 = HEAP32[$1>>2]|0;
 $48 = (($47) + 1|0);
 HEAP8[$48>>0] = $46;
 $49 = HEAP32[$1>>2]|0;
 $50 = (($49) + 1|0);
 $51 = HEAP8[$50>>0]|0;
 $52 = $51&255;
 $53 = $52 << 2;
 $54 = $53 | 1;
 $55 = $54&255;
 $56 = HEAP32[$1>>2]|0;
 $57 = (($56) + 1|0);
 HEAP8[$57>>0] = $55;
 $58 = HEAP32[$1>>2]|0;
 $59 = (($58) + 1|0);
 $60 = HEAP8[$59>>0]|0;
 $61 = $60&255;
 $62 = $61 << 1;
 $63 = HEAP32[$cfg>>2]|0;
 $64 = (($63) + 144|0);
 $65 = HEAP32[$64>>2]|0;
 $66 = ($65|0)!=(0);
 $67 = $66 ^ 1;
 $68 = $67 ? 1 : 0;
 $69 = $68 & 1;
 $70 = $62 | $69;
 $71 = $70&255;
 $72 = HEAP32[$1>>2]|0;
 $73 = (($72) + 1|0);
 HEAP8[$73>>0] = $71;
 $74 = HEAP32[$1>>2]|0;
 $75 = (($74) + 2|0);
 $76 = HEAP8[$75>>0]|0;
 $77 = $76&255;
 $78 = $77 << 4;
 $79 = HEAP32[$eov>>2]|0;
 $80 = (($79) + 704|0);
 $81 = HEAP32[$80>>2]|0;
 $82 = $81 & 15;
 $83 = $78 | $82;
 $84 = $83&255;
 $85 = HEAP32[$1>>2]|0;
 $86 = (($85) + 2|0);
 HEAP8[$86>>0] = $84;
 $87 = HEAP32[$1>>2]|0;
 $88 = (($87) + 2|0);
 $89 = HEAP8[$88>>0]|0;
 $90 = $89&255;
 $91 = $90 << 2;
 $92 = HEAP32[$cfg>>2]|0;
 $93 = (($92) + 4|0);
 $94 = HEAP32[$93>>2]|0;
 $95 = $94 & 3;
 $96 = $91 | $95;
 $97 = $96&255;
 $98 = HEAP32[$1>>2]|0;
 $99 = (($98) + 2|0);
 HEAP8[$99>>0] = $97;
 $100 = HEAP32[$1>>2]|0;
 $101 = (($100) + 2|0);
 $102 = HEAP8[$101>>0]|0;
 $103 = $102&255;
 $104 = $103 << 1;
 $105 = $104&255;
 $106 = HEAP32[$1>>2]|0;
 $107 = (($106) + 2|0);
 HEAP8[$107>>0] = $105;
 $108 = HEAP32[$1>>2]|0;
 $109 = (($108) + 2|0);
 $110 = HEAP8[$109>>0]|0;
 $111 = $110&255;
 $112 = $111 << 1;
 $113 = HEAP32[$cfg>>2]|0;
 $114 = (($113) + 156|0);
 $115 = HEAP32[$114>>2]|0;
 $116 = $115 & 1;
 $117 = $112 | $116;
 $118 = $117&255;
 $119 = HEAP32[$1>>2]|0;
 $120 = (($119) + 2|0);
 HEAP8[$120>>0] = $118;
 $121 = HEAP32[$1>>2]|0;
 $122 = (($121) + 3|0);
 $123 = HEAP8[$122>>0]|0;
 $124 = $123&255;
 $125 = $124 << 2;
 $126 = HEAP32[$cfg>>2]|0;
 $127 = (($126) + 164|0);
 $128 = HEAP32[$127>>2]|0;
 $129 = $128 & 3;
 $130 = $125 | $129;
 $131 = $130&255;
 $132 = HEAP32[$1>>2]|0;
 $133 = (($132) + 3|0);
 HEAP8[$133>>0] = $131;
 $134 = HEAP32[$1>>2]|0;
 $135 = (($134) + 3|0);
 $136 = HEAP8[$135>>0]|0;
 $137 = $136&255;
 $138 = $137 << 2;
 $139 = HEAP32[$eov>>2]|0;
 $140 = (($139) + 716|0);
 $141 = HEAP32[$140>>2]|0;
 $142 = $141 & 3;
 $143 = $138 | $142;
 $144 = $143&255;
 $145 = HEAP32[$1>>2]|0;
 $146 = (($145) + 3|0);
 HEAP8[$146>>0] = $144;
 $147 = HEAP32[$1>>2]|0;
 $148 = (($147) + 3|0);
 $149 = HEAP8[$148>>0]|0;
 $150 = $149&255;
 $151 = $150 << 1;
 $152 = HEAP32[$cfg>>2]|0;
 $153 = (($152) + 148|0);
 $154 = HEAP32[$153>>2]|0;
 $155 = $154 & 1;
 $156 = $151 | $155;
 $157 = $156&255;
 $158 = HEAP32[$1>>2]|0;
 $159 = (($158) + 3|0);
 HEAP8[$159>>0] = $157;
 $160 = HEAP32[$1>>2]|0;
 $161 = (($160) + 3|0);
 $162 = HEAP8[$161>>0]|0;
 $163 = $162&255;
 $164 = $163 << 1;
 $165 = HEAP32[$cfg>>2]|0;
 $166 = (($165) + 152|0);
 $167 = HEAP32[$166>>2]|0;
 $168 = $167 & 1;
 $169 = $164 | $168;
 $170 = $169&255;
 $171 = HEAP32[$1>>2]|0;
 $172 = (($171) + 3|0);
 HEAP8[$172>>0] = $170;
 $173 = HEAP32[$1>>2]|0;
 $174 = (($173) + 3|0);
 $175 = HEAP8[$174>>0]|0;
 $176 = $175&255;
 $177 = $176 << 2;
 $178 = HEAP32[$cfg>>2]|0;
 $179 = (($178) + 160|0);
 $180 = HEAP32[$179>>2]|0;
 $181 = $180 & 3;
 $182 = $177 | $181;
 $183 = $182&255;
 $184 = HEAP32[$1>>2]|0;
 $185 = (($184) + 3|0);
 HEAP8[$185>>0] = $183;
 $186 = HEAP32[$1>>2]|0;
 HEAP8[$186>>0] = -1;
 $187 = HEAP32[$1>>2]|0;
 $188 = (($187) + 1|0);
 $189 = HEAP8[$188>>0]|0;
 $190 = $189&255;
 $191 = $190 & 241;
 $192 = $191&255;
 HEAP8[$abyte>>0] = $192;
 $193 = HEAP32[$cfg>>2]|0;
 $194 = HEAP32[$193>>2]|0;
 $195 = (1)==($194|0);
 do {
  if ($195) {
   HEAP32[$bitrate>>2] = 128;
  } else {
   $196 = HEAP32[$cfg>>2]|0;
   $197 = (($196) + 48|0);
   $198 = HEAP32[$197>>2]|0;
   $199 = ($198|0)<(16000);
   if ($199) {
    HEAP32[$bitrate>>2] = 32;
    break;
   } else {
    HEAP32[$bitrate>>2] = 64;
    break;
   }
  }
 } while(0);
 $200 = HEAP32[$cfg>>2]|0;
 $201 = (($200) + 88|0);
 $202 = HEAP32[$201>>2]|0;
 $203 = ($202|0)==(0);
 if ($203) {
  $204 = HEAP32[$cfg>>2]|0;
  $205 = (($204) + 104|0);
  $206 = HEAP32[$205>>2]|0;
  HEAP32[$bitrate>>2] = $206;
 }
 $207 = HEAP32[$cfg>>2]|0;
 $208 = (($207) + 136|0);
 $209 = HEAP32[$208>>2]|0;
 $210 = ($209|0)!=(0);
 if ($210) {
  HEAP8[$bbyte>>0] = 0;
 } else {
  $211 = HEAP32[$bitrate>>2]|0;
  $212 = HEAP32[$cfg>>2]|0;
  $213 = HEAP32[$212>>2]|0;
  $214 = HEAP32[$cfg>>2]|0;
  $215 = (($214) + 48|0);
  $216 = HEAP32[$215>>2]|0;
  $217 = (_BitrateIndex($211,$213,$216)|0);
  $218 = $217<<4;
  $219 = $218&255;
  HEAP8[$bbyte>>0] = $219;
 }
 $220 = HEAP32[$cfg>>2]|0;
 $221 = HEAP32[$220>>2]|0;
 $222 = ($221|0)==(1);
 $223 = HEAP8[$abyte>>0]|0;
 $224 = $223 << 24 >> 24;
 if ($222) {
  $225 = $224 | 10;
  $226 = $225&255;
  $227 = HEAP32[$1>>2]|0;
  $228 = (($227) + 1|0);
  HEAP8[$228>>0] = $226;
  $229 = HEAP32[$1>>2]|0;
  $230 = (($229) + 2|0);
  $231 = HEAP8[$230>>0]|0;
  $232 = $231&255;
  $233 = $232 & 13;
  $234 = $233&255;
  HEAP8[$abyte>>0] = $234;
  $235 = HEAP8[$bbyte>>0]|0;
  $236 = $235 << 24 >> 24;
  $237 = HEAP8[$abyte>>0]|0;
  $238 = $237 << 24 >> 24;
  $239 = $236 | $238;
  $240 = $239&255;
  $241 = HEAP32[$1>>2]|0;
  $242 = (($241) + 2|0);
  HEAP8[$242>>0] = $240;
  STACKTOP = sp;return;
 } else {
  $243 = $224 | 2;
  $244 = $243&255;
  $245 = HEAP32[$1>>2]|0;
  $246 = (($245) + 1|0);
  HEAP8[$246>>0] = $244;
  $247 = HEAP32[$1>>2]|0;
  $248 = (($247) + 2|0);
  $249 = HEAP8[$248>>0]|0;
  $250 = $249&255;
  $251 = $250 & 13;
  $252 = $251&255;
  HEAP8[$abyte>>0] = $252;
  $253 = HEAP8[$bbyte>>0]|0;
  $254 = $253 << 24 >> 24;
  $255 = HEAP8[$abyte>>0]|0;
  $256 = $255 << 24 >> 24;
  $257 = $254 | $256;
  $258 = $257&255;
  $259 = HEAP32[$1>>2]|0;
  $260 = (($259) + 2|0);
  HEAP8[$260>>0] = $258;
  STACKTOP = sp;return;
 }
}
function _UpdateMusicCRC($crc,$buffer,$size) {
 $crc = $crc|0;
 $buffer = $buffer|0;
 $size = $size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp + 12|0;
 $1 = sp + 8|0;
 $2 = sp + 4|0;
 $i = sp;
 HEAP32[$0>>2] = $crc;
 HEAP32[$1>>2] = $buffer;
 HEAP32[$2>>2] = $size;
 HEAP32[$i>>2] = 0;
 while(1) {
  $3 = HEAP32[$i>>2]|0;
  $4 = HEAP32[$2>>2]|0;
  $5 = ($3|0)<($4|0);
  if (!($5)) {
   break;
  }
  $6 = HEAP32[$i>>2]|0;
  $7 = HEAP32[$1>>2]|0;
  $8 = (($7) + ($6)|0);
  $9 = HEAP8[$8>>0]|0;
  $10 = $9&255;
  $11 = HEAP32[$0>>2]|0;
  $12 = HEAP16[$11>>1]|0;
  $13 = (_CRC_update_lookup($10,$12)|0);
  $14 = HEAP32[$0>>2]|0;
  HEAP16[$14>>1] = $13;
  $15 = HEAP32[$i>>2]|0;
  $16 = (($15) + 1)|0;
  HEAP32[$i>>2] = $16;
 }
 STACKTOP = sp;return;
}
function _CRC_update_lookup($value,$crc) {
 $value = $value|0;
 $crc = $crc|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $tmp = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp + 4|0;
 $1 = sp + 2|0;
 $tmp = sp;
 HEAP16[$0>>1] = $value;
 HEAP16[$1>>1] = $crc;
 $2 = HEAP16[$1>>1]|0;
 $3 = $2&65535;
 $4 = HEAP16[$0>>1]|0;
 $5 = $4&65535;
 $6 = $3 ^ $5;
 $7 = $6&65535;
 HEAP16[$tmp>>1] = $7;
 $8 = HEAP16[$1>>1]|0;
 $9 = $8&65535;
 $10 = $9 >> 8;
 $11 = HEAP16[$tmp>>1]|0;
 $12 = $11&65535;
 $13 = $12 & 255;
 $14 = (101376 + ($13<<2)|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = $10 ^ $15;
 $17 = $16&65535;
 HEAP16[$1>>1] = $17;
 $18 = HEAP16[$1>>1]|0;
 STACKTOP = sp;return ($18|0);
}
function _get_lame_version() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[102400>>2]|0;
 STACKTOP = sp;return ($0|0);
}
function _get_lame_short_version() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[102416>>2]|0;
 STACKTOP = sp;return ($0|0);
}
function _qsort($base,$nel,$width,$cmp) {
 $base = $base|0;
 $nel = $nel|0;
 $width = $width|0;
 $cmp = $cmp|0;
 var $$ = 0, $$$i = 0, $$0$be$i = 0, $$0$be$i20 = 0, $$0$i50 = 0, $$01$be$i = 0, $$01$be$i19 = 0, $$01$i5$i = 0, $$012$i = 0, $$012$i16 = 0, $$02$i$i = 0, $$02$i3$i = 0, $$02$i3469 = 0, $$02$i72 = 0, $$02$us$i = 0, $$02$us$i32 = 0, $$03$i = 0, $$03$i15 = 0, $$66 = 0, $$67 = 0;
 var $$lcssa75 = 0, $$lcssa76 = 0, $$pre = 0, $$pre$i = 0, $$pre$i22 = 0, $$pre$i28 = 0, $$pre$i9 = 0, $$sum = 0, $$sum$i = 0, $$sum$i18 = 0, $$sum2 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0;
 var $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0;
 var $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0;
 var $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0;
 var $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0;
 var $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $4$phi = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $ar$i = 0, $exitcond$i = 0, $exitcond$i31 = 0, $head$0$lcssa = 0, $head$077 = 0;
 var $head$1 = 0, $i$0 = 0, $i$0$lcssa$i = 0, $i$0$lcssa$i24 = 0, $i$01$us$i = 0, $i$01$us$i30 = 0, $i$04$i = 0, $i$04$i14 = 0, $lp = 0, $nTrailingZeros$03$i$i = 0, $nTrailingZeros$03$i2$i = 0, $pshift$0$lcssa = 0, $pshift$078 = 0, $pshift$1 = 0, $pshift$2 = 0, $sum = 0, $sum$i = 0, $sum$i17 = 0, $tmp$i = 0, $tmp$i26 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 944|0;
 $tmp$i26 = sp + 680|0;
 $tmp$i = sp + 424|0;
 $ar$i = sp + 192|0;
 $lp = sp;
 $0 = Math_imul($width, $nel)|0;
 $1 = ($0|0)==(0);
 if ($1) {
  STACKTOP = sp;return;
 }
 $$sum = (($0) - ($width))|0;
 $2 = (($lp) + 4|0);
 HEAP32[$2>>2] = $width;
 HEAP32[$lp>>2] = $width;
 $4 = $width;$6 = $width;$i$0 = 2;
 while(1) {
  $3 = (($4) + ($width))|0;
  $5 = (($3) + ($6))|0;
  $7 = (($lp) + ($i$0<<2)|0);
  HEAP32[$7>>2] = $5;
  $8 = ($5>>>0)<($0>>>0);
  $9 = (($i$0) + 1)|0;
  if ($8) {
   $4$phi = $6;$6 = $5;$i$0 = $9;$4 = $4$phi;
  } else {
   break;
  }
 }
 $10 = (0 - ($width))|0;
 $11 = (($base) + ($$sum)|0);
 $12 = ($$sum|0)>(0);
 if ($12) {
  $13 = ($width|0)==(0);
  $14 = ($width>>>0)>(256);
  $15 = $14 ? 256 : $width;
  $16 = ($15|0)==($width|0);
  $17 = $11;
  $19 = 1;$61 = 0;$head$077 = $base;$pshift$078 = 1;
  while(1) {
   $18 = $19 & 3;
   $20 = ($18|0)==(3);
   do {
    if ($20) {
     HEAP32[$ar$i>>2] = $head$077;
     $21 = ($pshift$078|0)>(1);
     L13: do {
      if ($21) {
       $$012$i = $pshift$078;$$03$i = $head$077;$27 = $head$077;$i$04$i = 1;
       while(1) {
        $22 = (($$03$i) + ($10)|0);
        $23 = (($$012$i) + -2)|0;
        $24 = (($lp) + ($23<<2)|0);
        $25 = HEAP32[$24>>2]|0;
        $sum$i = (($25) + ($width))|0;
        $$sum$i = (0 - ($sum$i))|0;
        $26 = (($$03$i) + ($$sum$i)|0);
        $28 = (FUNCTION_TABLE_iii[$cmp & 1]($27,$26)|0);
        $29 = ($28|0)>(-1);
        if ($29) {
         $30 = (FUNCTION_TABLE_iii[$cmp & 1]($27,$22)|0);
         $31 = ($30|0)>(-1);
         if ($31) {
          $i$0$lcssa$i = $i$04$i;
          break;
         }
        }
        $32 = (FUNCTION_TABLE_iii[$cmp & 1]($26,$22)|0);
        $33 = ($32|0)>(-1);
        $34 = (($i$04$i) + 1)|0;
        $35 = (($ar$i) + ($i$04$i<<2)|0);
        if ($33) {
         HEAP32[$35>>2] = $26;
         $36 = (($$012$i) + -1)|0;
         $$0$be$i = $26;$$01$be$i = $36;
        } else {
         HEAP32[$35>>2] = $22;
         $$0$be$i = $22;$$01$be$i = $23;
        }
        $37 = ($$01$be$i|0)>(1);
        if (!($37)) {
         $i$0$lcssa$i = $34;
         break;
        }
        $$pre$i = HEAP32[$ar$i>>2]|0;
        $$012$i = $$01$be$i;$$03$i = $$0$be$i;$27 = $$pre$i;$i$04$i = $34;
       }
       $38 = ($i$0$lcssa$i|0)<(2);
       if (!($38)) {
        $39 = (($ar$i) + ($i$0$lcssa$i<<2)|0);
        HEAP32[$39>>2] = $tmp$i;
        if (!($13)) {
         $40 = ($i$0$lcssa$i|0)>(0);
         if ($40) {
          $$02$us$i = $width;$53 = $tmp$i;
         } else {
          $41 = HEAP32[$ar$i>>2]|0;
          _memcpy(($tmp$i|0),($41|0),($15|0))|0;
          if ($16) {
           break;
          } else {
           $$02$i72 = $width;$55 = $15;
          }
          while(1) {
           $54 = (($$02$i72) - ($55))|0;
           $56 = ($54>>>0)>(256);
           $57 = $56 ? 256 : $54;
           _memcpy(($tmp$i|0),($41|0),($57|0))|0;
           $58 = ($54|0)==($57|0);
           if ($58) {
            break L13;
           } else {
            $$02$i72 = $54;$55 = $57;
           }
          }
         }
         while(1) {
          $51 = ($$02$us$i>>>0)>(256);
          $43 = $51 ? 256 : $$02$us$i;
          $52 = HEAP32[$ar$i>>2]|0;
          _memcpy(($53|0),($52|0),($43|0))|0;
          $49 = $52;$i$01$us$i = 0;
          while(1) {
           $45 = (($ar$i) + ($i$01$us$i<<2)|0);
           $46 = (($i$01$us$i) + 1)|0;
           $47 = (($ar$i) + ($46<<2)|0);
           $48 = HEAP32[$47>>2]|0;
           _memcpy(($49|0),($48|0),($43|0))|0;
           $50 = (($49) + ($43)|0);
           HEAP32[$45>>2] = $50;
           $exitcond$i = ($46|0)==($i$0$lcssa$i|0);
           if ($exitcond$i) {
            break;
           } else {
            $49 = $48;$i$01$us$i = $46;
           }
          }
          $42 = ($$02$us$i|0)==($43|0);
          if ($42) {
           break L13;
          }
          $44 = (($$02$us$i) - ($43))|0;
          $$pre$i9 = HEAP32[$39>>2]|0;
          $$02$us$i = $44;$53 = $$pre$i9;
         }
        }
       }
      }
     } while(0);
     $59 = $19 >>> 2;
     $60 = $61 << 30;
     $62 = $59 | $60;
     $63 = $61 >>> 2;
     $64 = (($pshift$078) + 2)|0;
     $122 = $62;$182 = $63;$pshift$1 = $64;
    } else {
     $65 = (($pshift$078) + -1)|0;
     $66 = (($lp) + ($65<<2)|0);
     $67 = HEAP32[$66>>2]|0;
     $68 = $head$077;
     $69 = (($17) - ($68))|0;
     $70 = ($67>>>0)<($69>>>0);
     L39: do {
      if ($70) {
       HEAP32[$ar$i>>2] = $head$077;
       $71 = ($pshift$078|0)>(1);
       if ($71) {
        $$012$i16 = $pshift$078;$$03$i15 = $head$077;$77 = $head$077;$i$04$i14 = 1;
        while(1) {
         $72 = (($$03$i15) + ($10)|0);
         $73 = (($$012$i16) + -2)|0;
         $74 = (($lp) + ($73<<2)|0);
         $75 = HEAP32[$74>>2]|0;
         $sum$i17 = (($75) + ($width))|0;
         $$sum$i18 = (0 - ($sum$i17))|0;
         $76 = (($$03$i15) + ($$sum$i18)|0);
         $78 = (FUNCTION_TABLE_iii[$cmp & 1]($77,$76)|0);
         $79 = ($78|0)>(-1);
         if ($79) {
          $80 = (FUNCTION_TABLE_iii[$cmp & 1]($77,$72)|0);
          $81 = ($80|0)>(-1);
          if ($81) {
           $i$0$lcssa$i24 = $i$04$i14;
           break;
          }
         }
         $82 = (FUNCTION_TABLE_iii[$cmp & 1]($76,$72)|0);
         $83 = ($82|0)>(-1);
         $84 = (($i$04$i14) + 1)|0;
         $85 = (($ar$i) + ($i$04$i14<<2)|0);
         if ($83) {
          HEAP32[$85>>2] = $76;
          $86 = (($$012$i16) + -1)|0;
          $$0$be$i20 = $76;$$01$be$i19 = $86;
         } else {
          HEAP32[$85>>2] = $72;
          $$0$be$i20 = $72;$$01$be$i19 = $73;
         }
         $87 = ($$01$be$i19|0)>(1);
         if (!($87)) {
          $i$0$lcssa$i24 = $84;
          break;
         }
         $$pre$i22 = HEAP32[$ar$i>>2]|0;
         $$012$i16 = $$01$be$i19;$$03$i15 = $$0$be$i20;$77 = $$pre$i22;$i$04$i14 = $84;
        }
        $88 = ($i$0$lcssa$i24|0)<(2);
        if (!($88)) {
         $89 = (($ar$i) + ($i$0$lcssa$i24<<2)|0);
         HEAP32[$89>>2] = $tmp$i26;
         if (!($13)) {
          $90 = ($i$0$lcssa$i24|0)>(0);
          if ($90) {
           $$02$us$i32 = $width;$103 = $tmp$i26;
          } else {
           $91 = HEAP32[$ar$i>>2]|0;
           _memcpy(($tmp$i26|0),($91|0),($15|0))|0;
           if ($16) {
            break;
           } else {
            $$02$i3469 = $width;$105 = $15;
           }
           while(1) {
            $104 = (($$02$i3469) - ($105))|0;
            $106 = ($104>>>0)>(256);
            $107 = $106 ? 256 : $104;
            _memcpy(($tmp$i26|0),($91|0),($107|0))|0;
            $108 = ($104|0)==($107|0);
            if ($108) {
             break L39;
            } else {
             $$02$i3469 = $104;$105 = $107;
            }
           }
          }
          while(1) {
           $101 = ($$02$us$i32>>>0)>(256);
           $93 = $101 ? 256 : $$02$us$i32;
           $102 = HEAP32[$ar$i>>2]|0;
           _memcpy(($103|0),($102|0),($93|0))|0;
           $99 = $102;$i$01$us$i30 = 0;
           while(1) {
            $95 = (($ar$i) + ($i$01$us$i30<<2)|0);
            $96 = (($i$01$us$i30) + 1)|0;
            $97 = (($ar$i) + ($96<<2)|0);
            $98 = HEAP32[$97>>2]|0;
            _memcpy(($99|0),($98|0),($93|0))|0;
            $100 = (($99) + ($93)|0);
            HEAP32[$95>>2] = $100;
            $exitcond$i31 = ($96|0)==($i$0$lcssa$i24|0);
            if ($exitcond$i31) {
             break;
            } else {
             $99 = $98;$i$01$us$i30 = $96;
            }
           }
           $92 = ($$02$us$i32|0)==($93|0);
           if ($92) {
            break L39;
           }
           $94 = (($$02$us$i32) - ($93))|0;
           $$pre$i28 = HEAP32[$89>>2]|0;
           $$02$us$i32 = $94;$103 = $$pre$i28;
          }
         }
        }
       }
      } else {
       _trinkle($head$077,$width,$cmp,$19,$61,$pshift$078,0,$lp);
      }
     } while(0);
     $109 = ($pshift$078|0)==(1);
     if ($109) {
      $110 = $61 << 1;
      $111 = $19 >>> 31;
      $112 = $111 | $110;
      $113 = $19 << 1;
      $122 = $113;$182 = $112;$pshift$1 = 0;
      break;
     } else {
      $114 = ($65>>>0)>(31);
      $115 = (($pshift$078) + -33)|0;
      $$ = $114 ? 0 : $19;
      $$66 = $114 ? $19 : $61;
      $$67 = $114 ? $115 : $65;
      $116 = $$66 << $$67;
      $117 = (32 - ($$67))|0;
      $118 = $$ >>> $117;
      $119 = $118 | $116;
      $120 = $$ << $$67;
      $122 = $120;$182 = $119;$pshift$1 = 1;
      break;
     }
    }
   } while(0);
   $121 = $122 | 1;
   $123 = (($head$077) + ($width)|0);
   $124 = ($123>>>0)<($11>>>0);
   if ($124) {
    $19 = $121;$61 = $182;$head$077 = $123;$pshift$078 = $pshift$1;
   } else {
    $$lcssa75 = $182;$$lcssa76 = $121;$head$0$lcssa = $123;$pshift$0$lcssa = $pshift$1;
    break;
   }
  }
 } else {
  $$lcssa75 = 0;$$lcssa76 = 1;$head$0$lcssa = $base;$pshift$0$lcssa = 1;
 }
 _trinkle($head$0$lcssa,$width,$cmp,$$lcssa76,$$lcssa75,$pshift$0$lcssa,0,$lp);
 $126 = $$lcssa76;$128 = $$lcssa75;$head$1 = $head$0$lcssa;$pshift$2 = $pshift$0$lcssa;
 while(1) {
  $125 = ($pshift$2|0)==(1);
  if ($125) {
   $127 = ($126|0)==(1);
   if ($127) {
    $129 = ($128|0)==(0);
    if ($129) {
     break;
    } else {
     label = 52;
    }
   }
  } else {
   label = 52;
  }
  if ((label|0) == 52) {
   label = 0;
   $130 = ($pshift$2|0)<(2);
   if (!($130)) {
    $162 = $128 << 2;
    $163 = $126 >>> 30;
    $164 = $163 | $162;
    $165 = (($pshift$2) + -2)|0;
    $166 = $126 << 1;
    $167 = $166 & 2147483646;
    $168 = $163 << 31;
    $169 = $167 | $168;
    $170 = $169 ^ 3;
    $171 = $164 >>> 1;
    $172 = (($lp) + ($165<<2)|0);
    $173 = HEAP32[$172>>2]|0;
    $sum = (($173) + ($width))|0;
    $$sum2 = (0 - ($sum))|0;
    $174 = (($head$1) + ($$sum2)|0);
    $175 = (($pshift$2) + -1)|0;
    _trinkle($174,$width,$cmp,$170,$171,$175,1,$lp);
    $176 = $171 << 1;
    $177 = $163 & 1;
    $178 = $176 | $177;
    $179 = $170 << 1;
    $180 = $179 | 1;
    $181 = (($head$1) + ($10)|0);
    _trinkle($181,$width,$cmp,$180,$178,$165,1,$lp);
    $126 = $180;$128 = $178;$head$1 = $181;$pshift$2 = $165;
    continue;
   }
  }
  $131 = (($126) + -1)|0;
  $132 = ($131|0)==(0);
  if ($132) {
   $152 = 32;
   label = 62;
  } else {
   $133 = $131 & 1;
   $134 = ($133|0)==(0);
   if ($134) {
    $$02$i$i = $131;$nTrailingZeros$03$i$i = 0;
    while(1) {
     $135 = (($nTrailingZeros$03$i$i) + 1)|0;
     $136 = $$02$i$i >>> 1;
     $137 = $136 & 1;
     $138 = ($137|0)==(0);
     if ($138) {
      $$02$i$i = $136;$nTrailingZeros$03$i$i = $135;
     } else {
      break;
     }
    }
    $139 = ($135|0)==(0);
    if ($139) {
     label = 57;
    } else {
     $149 = $135;
    }
   } else {
    label = 57;
   }
   if ((label|0) == 57) {
    label = 0;
    $140 = ($128|0)==(0);
    if ($140) {
     $$01$i5$i = 32;
    } else {
     $141 = $128 & 1;
     $142 = ($141|0)==(0);
     if ($142) {
      $$02$i3$i = $128;$nTrailingZeros$03$i2$i = 0;
      while(1) {
       $143 = (($nTrailingZeros$03$i2$i) + 1)|0;
       $144 = $$02$i3$i >>> 1;
       $145 = $144 & 1;
       $146 = ($145|0)==(0);
       if ($146) {
        $$02$i3$i = $144;$nTrailingZeros$03$i2$i = $143;
       } else {
        $$01$i5$i = $143;
        break;
       }
      }
     } else {
      $$01$i5$i = 0;
     }
    }
    $147 = (($$01$i5$i) + 32)|0;
    $148 = ($$01$i5$i|0)==(0);
    $$$i = $148 ? 0 : $147;
    $149 = $$$i;
   }
   $150 = ($149>>>0)>(31);
   if ($150) {
    $152 = $149;
    label = 62;
   } else {
    $$0$i50 = $149;$154 = $126;$157 = $128;$161 = $149;
   }
  }
  if ((label|0) == 62) {
   label = 0;
   $151 = (($152) + -32)|0;
   $$0$i50 = $151;$154 = $128;$157 = 0;$161 = $152;
  }
  $153 = $154 >>> $$0$i50;
  $155 = (32 - ($$0$i50))|0;
  $156 = $157 << $155;
  $158 = $156 | $153;
  $159 = $157 >>> $$0$i50;
  $160 = (($161) + ($pshift$2))|0;
  $$pre = (($head$1) + ($10)|0);
  $126 = $158;$128 = $159;$head$1 = $$pre;$pshift$2 = $160;
 }
 STACKTOP = sp;return;
}
function _trinkle($head,$width,$cmp,$pp$val,$pp$1$val,$pshift,$trusty,$lp) {
 $head = $head|0;
 $width = $width|0;
 $cmp = $cmp|0;
 $pp$val = $pp$val|0;
 $pp$1$val = $pp$1$val|0;
 $pshift = $pshift|0;
 $trusty = $trusty|0;
 $lp = $lp|0;
 var $$$i = 0, $$0$be$i = 0, $$0$i = 0, $$0$lcssa = 0, $$0$lcssa26 = 0, $$01$be$i = 0, $$01$i5$i = 0, $$01$lcssa = 0, $$01$lcssa28 = 0, $$0110 = 0, $$012 = 0, $$012$i = 0, $$02$i$i = 0, $$02$i146 = 0, $$02$i3 = 0, $$02$i3$i = 0, $$02$lcssa = 0, $$02$us$i = 0, $$02$us$i12 = 0, $$029 = 0;
 var $$03$i = 0, $$pre = 0, $$pre$i = 0, $$pre$i3 = 0, $$pre$i8 = 0, $$sum = 0, $$sum$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0;
 var $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $13 = 0;
 var $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $ar = 0, $ar$i = 0, $exitcond$i = 0, $exitcond$i11 = 0, $i$0$lcssa = 0, $i$0$lcssa$i = 0;
 var $i$0$lcssa27 = 0, $i$01$us$i = 0, $i$01$us$i10 = 0, $i$011 = 0, $i$04$i = 0, $nTrailingZeros$03$i$i = 0, $nTrailingZeros$03$i2$i = 0, $or$cond = 0, $or$cond1 = 0, $or$cond18 = 0, $sum = 0, $sum$i = 0, $tmp$i6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 720|0;
 $tmp$i6 = sp + 456|0;
 $ar$i = sp + 228|0;
 $ar = sp;
 HEAP32[$ar>>2] = $head;
 $0 = (0 - ($width))|0;
 $1 = ($pp$val|0)==(1);
 $2 = ($pp$1$val|0)==(0);
 $or$cond18 = $1 & $2;
 L1: do {
  if ($or$cond18) {
   $$0$lcssa = $head;$$01$lcssa = $pshift;$$02$lcssa = $trusty;$i$0$lcssa = 1;
   label = 18;
  } else {
   $$0110 = $pshift;$$012 = $head;$$029 = $trusty;$24 = $pp$val;$33 = $pp$1$val;$7 = $head;$i$011 = 1;
   while(1) {
    $3 = (($lp) + ($$0110<<2)|0);
    $4 = HEAP32[$3>>2]|0;
    $5 = (0 - ($4))|0;
    $6 = (($$012) + ($5)|0);
    $8 = (FUNCTION_TABLE_iii[$cmp & 1]($6,$7)|0);
    $9 = ($8|0)<(1);
    if ($9) {
     $$0$lcssa = $$012;$$01$lcssa = $$0110;$$02$lcssa = $$029;$i$0$lcssa = $i$011;
     label = 18;
     break L1;
    }
    $10 = ($$029|0)==(0);
    $11 = ($$0110|0)>(1);
    $or$cond = $10 & $11;
    if ($or$cond) {
     $12 = (($$012) + ($0)|0);
     $13 = (($$0110) + -2)|0;
     $14 = (($lp) + ($13<<2)|0);
     $15 = HEAP32[$14>>2]|0;
     $16 = (FUNCTION_TABLE_iii[$cmp & 1]($12,$6)|0);
     $17 = ($16|0)>(-1);
     if ($17) {
      $$0$lcssa26 = $$012;$$01$lcssa28 = $$0110;$i$0$lcssa27 = $i$011;
      break L1;
     }
     $sum = (($15) + ($width))|0;
     $$sum = (0 - ($sum))|0;
     $18 = (($$012) + ($$sum)|0);
     $19 = (FUNCTION_TABLE_iii[$cmp & 1]($18,$6)|0);
     $20 = ($19|0)>(-1);
     if ($20) {
      $$0$lcssa26 = $$012;$$01$lcssa28 = $$0110;$i$0$lcssa27 = $i$011;
      break L1;
     }
    }
    $21 = (($i$011) + 1)|0;
    $22 = (($ar) + ($i$011<<2)|0);
    HEAP32[$22>>2] = $6;
    $23 = (($24) + -1)|0;
    $25 = ($23|0)==(0);
    if ($25) {
     $46 = 32;
     label = 15;
    } else {
     $26 = $23 & 1;
     $27 = ($26|0)==(0);
     if ($27) {
      $$02$i$i = $23;$nTrailingZeros$03$i$i = 0;
      while(1) {
       $28 = (($nTrailingZeros$03$i$i) + 1)|0;
       $29 = $$02$i$i >>> 1;
       $30 = $29 & 1;
       $31 = ($30|0)==(0);
       if ($31) {
        $$02$i$i = $29;$nTrailingZeros$03$i$i = $28;
       } else {
        break;
       }
      }
      $32 = ($28|0)==(0);
      if ($32) {
       label = 10;
      } else {
       $43 = $28;
      }
     } else {
      label = 10;
     }
     if ((label|0) == 10) {
      label = 0;
      $34 = ($33|0)==(0);
      if ($34) {
       $$01$i5$i = 32;
      } else {
       $35 = $33 & 1;
       $36 = ($35|0)==(0);
       if ($36) {
        $$02$i3$i = $33;$nTrailingZeros$03$i2$i = 0;
        while(1) {
         $37 = (($nTrailingZeros$03$i2$i) + 1)|0;
         $38 = $$02$i3$i >>> 1;
         $39 = $38 & 1;
         $40 = ($39|0)==(0);
         if ($40) {
          $$02$i3$i = $38;$nTrailingZeros$03$i2$i = $37;
         } else {
          $$01$i5$i = $37;
          break;
         }
        }
       } else {
        $$01$i5$i = 0;
       }
      }
      $41 = (($$01$i5$i) + 32)|0;
      $42 = ($$01$i5$i|0)==(0);
      $$$i = $42 ? 0 : $41;
      $43 = $$$i;
     }
     $44 = ($43>>>0)>(31);
     if ($44) {
      $46 = $43;
      label = 15;
     } else {
      $$0$i = $43;$48 = $24;$51 = $33;$55 = $43;
     }
    }
    if ((label|0) == 15) {
     label = 0;
     $45 = (($46) + -32)|0;
     $$0$i = $45;$48 = $33;$51 = 0;$55 = $46;
    }
    $47 = $48 >>> $$0$i;
    $49 = (32 - ($$0$i))|0;
    $50 = $51 << $49;
    $52 = $50 | $47;
    $53 = $51 >>> $$0$i;
    $54 = (($55) + ($$0110))|0;
    $56 = ($52|0)==(1);
    $57 = ($53|0)==(0);
    $or$cond1 = $56 & $57;
    if ($or$cond1) {
     $$0$lcssa26 = $6;$$01$lcssa28 = $54;$i$0$lcssa27 = $21;
     break L1;
    }
    $$pre = HEAP32[$ar>>2]|0;
    $$0110 = $54;$$012 = $6;$$029 = 0;$24 = $52;$33 = $53;$7 = $$pre;$i$011 = $21;
   }
  }
 } while(0);
 if ((label|0) == 18) {
  $58 = ($$02$lcssa|0)==(0);
  if ($58) {
   $$0$lcssa26 = $$0$lcssa;$$01$lcssa28 = $$01$lcssa;$i$0$lcssa27 = $i$0$lcssa;
  } else {
   STACKTOP = sp;return;
  }
 }
 $59 = ($i$0$lcssa27|0)<(2);
 L31: do {
  if (!($59)) {
   $60 = (($ar) + ($i$0$lcssa27<<2)|0);
   HEAP32[$60>>2] = $tmp$i6;
   $61 = ($width|0)==(0);
   if (!($61)) {
    $62 = ($i$0$lcssa27|0)>(0);
    if ($62) {
     $$02$us$i12 = $width;$78 = $tmp$i6;
    } else {
     $63 = ($width>>>0)>(256);
     $64 = $63 ? 256 : $width;
     $65 = HEAP32[$ar>>2]|0;
     _memcpy(($tmp$i6|0),($65|0),($64|0))|0;
     $66 = ($64|0)==($width|0);
     if ($66) {
      break;
     } else {
      $$02$i146 = $width;$80 = $64;
     }
     while(1) {
      $79 = (($$02$i146) - ($80))|0;
      $81 = ($79>>>0)>(256);
      $82 = $81 ? 256 : $79;
      _memcpy(($tmp$i6|0),($65|0),($82|0))|0;
      $83 = ($79|0)==($82|0);
      if ($83) {
       break L31;
      } else {
       $$02$i146 = $79;$80 = $82;
      }
     }
    }
    while(1) {
     $76 = ($$02$us$i12>>>0)>(256);
     $68 = $76 ? 256 : $$02$us$i12;
     $77 = HEAP32[$ar>>2]|0;
     _memcpy(($78|0),($77|0),($68|0))|0;
     $74 = $77;$i$01$us$i10 = 0;
     while(1) {
      $70 = (($ar) + ($i$01$us$i10<<2)|0);
      $71 = (($i$01$us$i10) + 1)|0;
      $72 = (($ar) + ($71<<2)|0);
      $73 = HEAP32[$72>>2]|0;
      _memcpy(($74|0),($73|0),($68|0))|0;
      $75 = (($74) + ($68)|0);
      HEAP32[$70>>2] = $75;
      $exitcond$i11 = ($71|0)==($i$0$lcssa27|0);
      if ($exitcond$i11) {
       break;
      } else {
       $74 = $73;$i$01$us$i10 = $71;
      }
     }
     $67 = ($$02$us$i12|0)==($68|0);
     if ($67) {
      break L31;
     }
     $69 = (($$02$us$i12) - ($68))|0;
     $$pre$i8 = HEAP32[$60>>2]|0;
     $$02$us$i12 = $69;$78 = $$pre$i8;
    }
   }
  }
 } while(0);
 HEAP32[$ar$i>>2] = $$0$lcssa26;
 $84 = ($$01$lcssa28|0)>(1);
 L45: do {
  if ($84) {
   $$012$i = $$01$lcssa28;$$03$i = $$0$lcssa26;$90 = $$0$lcssa26;$i$04$i = 1;
   while(1) {
    $85 = (($$03$i) + ($0)|0);
    $86 = (($$012$i) + -2)|0;
    $87 = (($lp) + ($86<<2)|0);
    $88 = HEAP32[$87>>2]|0;
    $sum$i = (($88) + ($width))|0;
    $$sum$i = (0 - ($sum$i))|0;
    $89 = (($$03$i) + ($$sum$i)|0);
    $91 = (FUNCTION_TABLE_iii[$cmp & 1]($90,$89)|0);
    $92 = ($91|0)>(-1);
    if ($92) {
     $93 = (FUNCTION_TABLE_iii[$cmp & 1]($90,$85)|0);
     $94 = ($93|0)>(-1);
     if ($94) {
      $i$0$lcssa$i = $i$04$i;
      break;
     }
    }
    $95 = (FUNCTION_TABLE_iii[$cmp & 1]($89,$85)|0);
    $96 = ($95|0)>(-1);
    $97 = (($i$04$i) + 1)|0;
    $98 = (($ar$i) + ($i$04$i<<2)|0);
    if ($96) {
     HEAP32[$98>>2] = $89;
     $99 = (($$012$i) + -1)|0;
     $$0$be$i = $89;$$01$be$i = $99;
    } else {
     HEAP32[$98>>2] = $85;
     $$0$be$i = $85;$$01$be$i = $86;
    }
    $100 = ($$01$be$i|0)>(1);
    if (!($100)) {
     $i$0$lcssa$i = $97;
     break;
    }
    $$pre$i = HEAP32[$ar$i>>2]|0;
    $$012$i = $$01$be$i;$$03$i = $$0$be$i;$90 = $$pre$i;$i$04$i = $97;
   }
   $101 = ($i$0$lcssa$i|0)<(2);
   if ($101) {
    $126 = $tmp$i6;
   } else {
    $102 = (($ar$i) + ($i$0$lcssa$i<<2)|0);
    HEAP32[$102>>2] = $tmp$i6;
    $103 = ($width|0)==(0);
    if ($103) {
     $126 = $tmp$i6;
    } else {
     $104 = ($i$0$lcssa$i|0)>(0);
     if ($104) {
      $$02$us$i = $width;$120 = $tmp$i6;
     } else {
      $105 = ($width>>>0)>(256);
      $106 = $105 ? 256 : $width;
      $107 = HEAP32[$ar$i>>2]|0;
      _memcpy(($tmp$i6|0),($107|0),($106|0))|0;
      $108 = ($106|0)==($width|0);
      if ($108) {
       $126 = $tmp$i6;
       break;
      } else {
       $$02$i3 = $width;$122 = $106;
      }
      while(1) {
       $121 = (($$02$i3) - ($122))|0;
       $123 = ($121>>>0)>(256);
       $124 = $123 ? 256 : $121;
       _memcpy(($tmp$i6|0),($107|0),($124|0))|0;
       $125 = ($121|0)==($124|0);
       if ($125) {
        $126 = $tmp$i6;
        break L45;
       } else {
        $$02$i3 = $121;$122 = $124;
       }
      }
     }
     while(1) {
      $118 = ($$02$us$i>>>0)>(256);
      $110 = $118 ? 256 : $$02$us$i;
      $119 = HEAP32[$ar$i>>2]|0;
      _memcpy(($120|0),($119|0),($110|0))|0;
      $116 = $119;$i$01$us$i = 0;
      while(1) {
       $112 = (($ar$i) + ($i$01$us$i<<2)|0);
       $113 = (($i$01$us$i) + 1)|0;
       $114 = (($ar$i) + ($113<<2)|0);
       $115 = HEAP32[$114>>2]|0;
       _memcpy(($116|0),($115|0),($110|0))|0;
       $117 = (($116) + ($110)|0);
       HEAP32[$112>>2] = $117;
       $exitcond$i = ($113|0)==($i$0$lcssa$i|0);
       if ($exitcond$i) {
        break;
       } else {
        $116 = $115;$i$01$us$i = $113;
       }
      }
      $109 = ($$02$us$i|0)==($110|0);
      if ($109) {
       $126 = $tmp$i6;
       break L45;
      }
      $111 = (($$02$us$i) - ($110))|0;
      $$pre$i3 = HEAP32[$102>>2]|0;
      $$02$us$i = $111;$120 = $$pre$i3;
     }
    }
   }
  } else {
   $126 = $tmp$i6;
  }
 } while(0);
 STACKTOP = sp;return;
}
function _malloc($bytes) {
 $bytes = $bytes|0;
 var $$$i = 0, $$3$i = 0, $$4$i = 0, $$pre = 0, $$pre$i = 0, $$pre$i$i = 0, $$pre$i25 = 0, $$pre$i25$i = 0, $$pre$phi$i$iZ2D = 0, $$pre$phi$i26$iZ2D = 0, $$pre$phi$i26Z2D = 0, $$pre$phi$iZ2D = 0, $$pre$phi58$i$iZ2D = 0, $$pre$phiZ2D = 0, $$pre57$i$i = 0, $$rsize$0$i = 0, $$rsize$3$i = 0, $$sum = 0, $$sum$i$i = 0, $$sum$i$i$i = 0;
 var $$sum$i14$i = 0, $$sum$i15$i = 0, $$sum$i18$i = 0, $$sum$i21$i = 0, $$sum$i2334 = 0, $$sum$i32 = 0, $$sum$i35 = 0, $$sum1 = 0, $$sum1$i = 0, $$sum1$i$i = 0, $$sum1$i16$i = 0, $$sum1$i22$i = 0, $$sum1$i24 = 0, $$sum10 = 0, $$sum10$i = 0, $$sum10$i$i = 0, $$sum10$pre$i$i = 0, $$sum107$i = 0, $$sum108$i = 0, $$sum109$i = 0;
 var $$sum11$i = 0, $$sum11$i$i = 0, $$sum11$i24$i = 0, $$sum110$i = 0, $$sum111$i = 0, $$sum1112 = 0, $$sum112$i = 0, $$sum113$i = 0, $$sum114$i = 0, $$sum115$i = 0, $$sum116$i = 0, $$sum117$i = 0, $$sum118$i = 0, $$sum119$i = 0, $$sum12$i = 0, $$sum12$i$i = 0, $$sum120$i = 0, $$sum13$i = 0, $$sum13$i$i = 0, $$sum14$i$i = 0;
 var $$sum14$pre$i = 0, $$sum15$i = 0, $$sum15$i$i = 0, $$sum16$i = 0, $$sum16$i$i = 0, $$sum17$i = 0, $$sum17$i$i = 0, $$sum18$i = 0, $$sum1819$i$i = 0, $$sum2 = 0, $$sum2$i = 0, $$sum2$i$i = 0, $$sum2$i$i$i = 0, $$sum2$i17$i = 0, $$sum2$i19$i = 0, $$sum2$i23$i = 0, $$sum2$pre$i = 0, $$sum20$i$i = 0, $$sum21$i$i = 0, $$sum22$i$i = 0;
 var $$sum23$i$i = 0, $$sum24$i$i = 0, $$sum25$i$i = 0, $$sum26$pre$i$i = 0, $$sum27$i$i = 0, $$sum28$i$i = 0, $$sum29$i$i = 0, $$sum3$i = 0, $$sum3$i$i = 0, $$sum3$i27 = 0, $$sum30$i$i = 0, $$sum3132$i$i = 0, $$sum34$i$i = 0, $$sum3536$i$i = 0, $$sum3738$i$i = 0, $$sum39$i$i = 0, $$sum4 = 0, $$sum4$i = 0, $$sum4$i28 = 0, $$sum40$i$i = 0;
 var $$sum41$i$i = 0, $$sum42$i$i = 0, $$sum5$i = 0, $$sum5$i$i = 0, $$sum56 = 0, $$sum6$i = 0, $$sum67$i$i = 0, $$sum7$i = 0, $$sum8$i = 0, $$sum8$pre = 0, $$sum9 = 0, $$sum9$i = 0, $$sum9$i$i = 0, $$tsize$1$i = 0, $$v$0$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $1000 = 0;
 var $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0;
 var $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0;
 var $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0, $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0;
 var $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0, $107 = 0, $1070 = 0, $1071 = 0, $1072 = 0, $1073 = 0;
 var $1074 = 0, $1075 = 0, $1076 = 0, $1077 = 0, $1078 = 0, $1079 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0;
 var $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0;
 var $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0;
 var $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0;
 var $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0;
 var $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0;
 var $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0;
 var $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0;
 var $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0;
 var $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0;
 var $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0;
 var $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0;
 var $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0;
 var $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0;
 var $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0;
 var $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0;
 var $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0;
 var $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0;
 var $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0;
 var $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0;
 var $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0;
 var $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0;
 var $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0;
 var $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0;
 var $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0;
 var $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0;
 var $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0;
 var $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0;
 var $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0;
 var $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0;
 var $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0;
 var $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0;
 var $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0;
 var $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0;
 var $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0;
 var $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0;
 var $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0;
 var $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0;
 var $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0;
 var $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0;
 var $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0;
 var $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0;
 var $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0;
 var $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0;
 var $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0;
 var $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0;
 var $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0;
 var $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0;
 var $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0;
 var $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $F$0$i$i = 0, $F1$0$i = 0, $F4$0 = 0, $F4$0$i$i = 0, $F5$0$i = 0;
 var $I1$0$c$i$i = 0, $I1$0$i$i = 0, $I7$0$i = 0, $I7$0$i$i = 0, $K12$025$i = 0, $K2$014$i$i = 0, $K8$052$i$i = 0, $R$0$i = 0, $R$0$i$i = 0, $R$0$i18 = 0, $R$1$i = 0, $R$1$i$i = 0, $R$1$i20 = 0, $RP$0$i = 0, $RP$0$i$i = 0, $RP$0$i17 = 0, $T$0$lcssa$i = 0, $T$0$lcssa$i$i = 0, $T$0$lcssa$i28$i = 0, $T$013$i$i = 0;
 var $T$024$i = 0, $T$051$i$i = 0, $br$0$i = 0, $cond$i = 0, $cond$i$i = 0, $cond$i21 = 0, $exitcond$i$i = 0, $i$02$i$i = 0, $idx$0$i = 0, $mem$0 = 0, $nb$0 = 0, $notlhs$i = 0, $notrhs$i = 0, $oldfirst$0$i$i = 0, $or$cond$i = 0, $or$cond$i29 = 0, $or$cond1$i = 0, $or$cond10$i = 0, $or$cond19$i = 0, $or$cond2$i = 0;
 var $or$cond49$i = 0, $or$cond5$i = 0, $or$cond6$i = 0, $or$cond8$not$i = 0, $or$cond9$i = 0, $qsize$0$i$i = 0, $rsize$0$i = 0, $rsize$0$i15 = 0, $rsize$1$i = 0, $rsize$2$i = 0, $rsize$3$lcssa$i = 0, $rsize$329$i = 0, $rst$0$i = 0, $rst$1$i = 0, $sizebits$0$i = 0, $sp$0$i$i = 0, $sp$0$i$i$i = 0, $sp$075$i = 0, $sp$168$i = 0, $ssize$0$$i = 0;
 var $ssize$0$i = 0, $ssize$1$i = 0, $ssize$2$i = 0, $t$0$i = 0, $t$0$i14 = 0, $t$1$i = 0, $t$2$ph$i = 0, $t$2$v$3$i = 0, $t$228$i = 0, $tbase$0$i = 0, $tbase$247$i = 0, $tsize$0$i = 0, $tsize$0323841$i = 0, $tsize$1$i = 0, $tsize$246$i = 0, $v$0$i = 0, $v$0$i16 = 0, $v$1$i = 0, $v$2$i = 0, $v$3$lcssa$i = 0;
 var $v$330$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($bytes>>>0)<(245);
 do {
  if ($0) {
   $1 = ($bytes>>>0)<(11);
   if ($1) {
    $5 = 16;
   } else {
    $2 = (($bytes) + 11)|0;
    $3 = $2 & -8;
    $5 = $3;
   }
   $4 = $5 >>> 3;
   $6 = HEAP32[102424>>2]|0;
   $7 = $6 >>> $4;
   $8 = $7 & 3;
   $9 = ($8|0)==(0);
   if (!($9)) {
    $10 = $7 & 1;
    $11 = $10 ^ 1;
    $12 = (($11) + ($4))|0;
    $13 = $12 << 1;
    $14 = ((102424 + ($13<<2)|0) + 40|0);
    $$sum10 = (($13) + 2)|0;
    $15 = ((102424 + ($$sum10<<2)|0) + 40|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = (($16) + 8|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = ($14|0)==($18|0);
    do {
     if ($19) {
      $20 = 1 << $12;
      $21 = $20 ^ -1;
      $22 = $6 & $21;
      HEAP32[102424>>2] = $22;
     } else {
      $23 = HEAP32[((102424 + 16|0))>>2]|0;
      $24 = ($18>>>0)<($23>>>0);
      if ($24) {
       _abort();
       // unreachable;
      }
      $25 = (($18) + 12|0);
      $26 = HEAP32[$25>>2]|0;
      $27 = ($26|0)==($16|0);
      if ($27) {
       HEAP32[$25>>2] = $14;
       HEAP32[$15>>2] = $18;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $28 = $12 << 3;
    $29 = $28 | 3;
    $30 = (($16) + 4|0);
    HEAP32[$30>>2] = $29;
    $$sum1112 = $28 | 4;
    $31 = (($16) + ($$sum1112)|0);
    $32 = HEAP32[$31>>2]|0;
    $33 = $32 | 1;
    HEAP32[$31>>2] = $33;
    $mem$0 = $17;
    STACKTOP = sp;return ($mem$0|0);
   }
   $34 = HEAP32[((102424 + 8|0))>>2]|0;
   $35 = ($5>>>0)>($34>>>0);
   if ($35) {
    $36 = ($7|0)==(0);
    if (!($36)) {
     $37 = $7 << $4;
     $38 = 2 << $4;
     $39 = (0 - ($38))|0;
     $40 = $38 | $39;
     $41 = $37 & $40;
     $42 = (0 - ($41))|0;
     $43 = $41 & $42;
     $44 = (($43) + -1)|0;
     $45 = $44 >>> 12;
     $46 = $45 & 16;
     $47 = $44 >>> $46;
     $48 = $47 >>> 5;
     $49 = $48 & 8;
     $50 = $49 | $46;
     $51 = $47 >>> $49;
     $52 = $51 >>> 2;
     $53 = $52 & 4;
     $54 = $50 | $53;
     $55 = $51 >>> $53;
     $56 = $55 >>> 1;
     $57 = $56 & 2;
     $58 = $54 | $57;
     $59 = $55 >>> $57;
     $60 = $59 >>> 1;
     $61 = $60 & 1;
     $62 = $58 | $61;
     $63 = $59 >>> $61;
     $64 = (($62) + ($63))|0;
     $65 = $64 << 1;
     $66 = ((102424 + ($65<<2)|0) + 40|0);
     $$sum4 = (($65) + 2)|0;
     $67 = ((102424 + ($$sum4<<2)|0) + 40|0);
     $68 = HEAP32[$67>>2]|0;
     $69 = (($68) + 8|0);
     $70 = HEAP32[$69>>2]|0;
     $71 = ($66|0)==($70|0);
     do {
      if ($71) {
       $72 = 1 << $64;
       $73 = $72 ^ -1;
       $74 = $6 & $73;
       HEAP32[102424>>2] = $74;
      } else {
       $75 = HEAP32[((102424 + 16|0))>>2]|0;
       $76 = ($70>>>0)<($75>>>0);
       if ($76) {
        _abort();
        // unreachable;
       }
       $77 = (($70) + 12|0);
       $78 = HEAP32[$77>>2]|0;
       $79 = ($78|0)==($68|0);
       if ($79) {
        HEAP32[$77>>2] = $66;
        HEAP32[$67>>2] = $70;
        break;
       } else {
        _abort();
        // unreachable;
       }
      }
     } while(0);
     $80 = $64 << 3;
     $81 = (($80) - ($5))|0;
     $82 = $5 | 3;
     $83 = (($68) + 4|0);
     HEAP32[$83>>2] = $82;
     $84 = (($68) + ($5)|0);
     $85 = $81 | 1;
     $$sum56 = $5 | 4;
     $86 = (($68) + ($$sum56)|0);
     HEAP32[$86>>2] = $85;
     $87 = (($68) + ($80)|0);
     HEAP32[$87>>2] = $81;
     $88 = HEAP32[((102424 + 8|0))>>2]|0;
     $89 = ($88|0)==(0);
     if (!($89)) {
      $90 = HEAP32[((102424 + 20|0))>>2]|0;
      $91 = $88 >>> 3;
      $92 = $91 << 1;
      $93 = ((102424 + ($92<<2)|0) + 40|0);
      $94 = HEAP32[102424>>2]|0;
      $95 = 1 << $91;
      $96 = $94 & $95;
      $97 = ($96|0)==(0);
      if ($97) {
       $98 = $94 | $95;
       HEAP32[102424>>2] = $98;
       $$sum8$pre = (($92) + 2)|0;
       $$pre = ((102424 + ($$sum8$pre<<2)|0) + 40|0);
       $$pre$phiZ2D = $$pre;$F4$0 = $93;
      } else {
       $$sum9 = (($92) + 2)|0;
       $99 = ((102424 + ($$sum9<<2)|0) + 40|0);
       $100 = HEAP32[$99>>2]|0;
       $101 = HEAP32[((102424 + 16|0))>>2]|0;
       $102 = ($100>>>0)<($101>>>0);
       if ($102) {
        _abort();
        // unreachable;
       } else {
        $$pre$phiZ2D = $99;$F4$0 = $100;
       }
      }
      HEAP32[$$pre$phiZ2D>>2] = $90;
      $103 = (($F4$0) + 12|0);
      HEAP32[$103>>2] = $90;
      $104 = (($90) + 8|0);
      HEAP32[$104>>2] = $F4$0;
      $105 = (($90) + 12|0);
      HEAP32[$105>>2] = $93;
     }
     HEAP32[((102424 + 8|0))>>2] = $81;
     HEAP32[((102424 + 20|0))>>2] = $84;
     $mem$0 = $69;
     STACKTOP = sp;return ($mem$0|0);
    }
    $106 = HEAP32[((102424 + 4|0))>>2]|0;
    $107 = ($106|0)==(0);
    if ($107) {
     $nb$0 = $5;
    } else {
     $108 = (0 - ($106))|0;
     $109 = $106 & $108;
     $110 = (($109) + -1)|0;
     $111 = $110 >>> 12;
     $112 = $111 & 16;
     $113 = $110 >>> $112;
     $114 = $113 >>> 5;
     $115 = $114 & 8;
     $116 = $115 | $112;
     $117 = $113 >>> $115;
     $118 = $117 >>> 2;
     $119 = $118 & 4;
     $120 = $116 | $119;
     $121 = $117 >>> $119;
     $122 = $121 >>> 1;
     $123 = $122 & 2;
     $124 = $120 | $123;
     $125 = $121 >>> $123;
     $126 = $125 >>> 1;
     $127 = $126 & 1;
     $128 = $124 | $127;
     $129 = $125 >>> $127;
     $130 = (($128) + ($129))|0;
     $131 = ((102424 + ($130<<2)|0) + 304|0);
     $132 = HEAP32[$131>>2]|0;
     $133 = (($132) + 4|0);
     $134 = HEAP32[$133>>2]|0;
     $135 = $134 & -8;
     $136 = (($135) - ($5))|0;
     $rsize$0$i = $136;$t$0$i = $132;$v$0$i = $132;
     while(1) {
      $137 = (($t$0$i) + 16|0);
      $138 = HEAP32[$137>>2]|0;
      $139 = ($138|0)==(0|0);
      if ($139) {
       $140 = (($t$0$i) + 20|0);
       $141 = HEAP32[$140>>2]|0;
       $142 = ($141|0)==(0|0);
       if ($142) {
        break;
       } else {
        $144 = $141;
       }
      } else {
       $144 = $138;
      }
      $143 = (($144) + 4|0);
      $145 = HEAP32[$143>>2]|0;
      $146 = $145 & -8;
      $147 = (($146) - ($5))|0;
      $148 = ($147>>>0)<($rsize$0$i>>>0);
      $$rsize$0$i = $148 ? $147 : $rsize$0$i;
      $$v$0$i = $148 ? $144 : $v$0$i;
      $rsize$0$i = $$rsize$0$i;$t$0$i = $144;$v$0$i = $$v$0$i;
     }
     $149 = HEAP32[((102424 + 16|0))>>2]|0;
     $150 = ($v$0$i>>>0)<($149>>>0);
     if ($150) {
      _abort();
      // unreachable;
     }
     $151 = (($v$0$i) + ($5)|0);
     $152 = ($v$0$i>>>0)<($151>>>0);
     if (!($152)) {
      _abort();
      // unreachable;
     }
     $153 = (($v$0$i) + 24|0);
     $154 = HEAP32[$153>>2]|0;
     $155 = (($v$0$i) + 12|0);
     $156 = HEAP32[$155>>2]|0;
     $157 = ($156|0)==($v$0$i|0);
     do {
      if ($157) {
       $167 = (($v$0$i) + 20|0);
       $168 = HEAP32[$167>>2]|0;
       $169 = ($168|0)==(0|0);
       if ($169) {
        $170 = (($v$0$i) + 16|0);
        $171 = HEAP32[$170>>2]|0;
        $172 = ($171|0)==(0|0);
        if ($172) {
         $R$1$i = 0;
         break;
        } else {
         $R$0$i = $171;$RP$0$i = $170;
        }
       } else {
        $R$0$i = $168;$RP$0$i = $167;
       }
       while(1) {
        $173 = (($R$0$i) + 20|0);
        $174 = HEAP32[$173>>2]|0;
        $175 = ($174|0)==(0|0);
        if (!($175)) {
         $R$0$i = $174;$RP$0$i = $173;
         continue;
        }
        $176 = (($R$0$i) + 16|0);
        $177 = HEAP32[$176>>2]|0;
        $178 = ($177|0)==(0|0);
        if ($178) {
         break;
        } else {
         $R$0$i = $177;$RP$0$i = $176;
        }
       }
       $179 = ($RP$0$i>>>0)<($149>>>0);
       if ($179) {
        _abort();
        // unreachable;
       } else {
        HEAP32[$RP$0$i>>2] = 0;
        $R$1$i = $R$0$i;
        break;
       }
      } else {
       $158 = (($v$0$i) + 8|0);
       $159 = HEAP32[$158>>2]|0;
       $160 = ($159>>>0)<($149>>>0);
       if ($160) {
        _abort();
        // unreachable;
       }
       $161 = (($159) + 12|0);
       $162 = HEAP32[$161>>2]|0;
       $163 = ($162|0)==($v$0$i|0);
       if (!($163)) {
        _abort();
        // unreachable;
       }
       $164 = (($156) + 8|0);
       $165 = HEAP32[$164>>2]|0;
       $166 = ($165|0)==($v$0$i|0);
       if ($166) {
        HEAP32[$161>>2] = $156;
        HEAP32[$164>>2] = $159;
        $R$1$i = $156;
        break;
       } else {
        _abort();
        // unreachable;
       }
      }
     } while(0);
     $180 = ($154|0)==(0|0);
     do {
      if (!($180)) {
       $181 = (($v$0$i) + 28|0);
       $182 = HEAP32[$181>>2]|0;
       $183 = ((102424 + ($182<<2)|0) + 304|0);
       $184 = HEAP32[$183>>2]|0;
       $185 = ($v$0$i|0)==($184|0);
       if ($185) {
        HEAP32[$183>>2] = $R$1$i;
        $cond$i = ($R$1$i|0)==(0|0);
        if ($cond$i) {
         $186 = 1 << $182;
         $187 = $186 ^ -1;
         $188 = HEAP32[((102424 + 4|0))>>2]|0;
         $189 = $188 & $187;
         HEAP32[((102424 + 4|0))>>2] = $189;
         break;
        }
       } else {
        $190 = HEAP32[((102424 + 16|0))>>2]|0;
        $191 = ($154>>>0)<($190>>>0);
        if ($191) {
         _abort();
         // unreachable;
        }
        $192 = (($154) + 16|0);
        $193 = HEAP32[$192>>2]|0;
        $194 = ($193|0)==($v$0$i|0);
        if ($194) {
         HEAP32[$192>>2] = $R$1$i;
        } else {
         $195 = (($154) + 20|0);
         HEAP32[$195>>2] = $R$1$i;
        }
        $196 = ($R$1$i|0)==(0|0);
        if ($196) {
         break;
        }
       }
       $197 = HEAP32[((102424 + 16|0))>>2]|0;
       $198 = ($R$1$i>>>0)<($197>>>0);
       if ($198) {
        _abort();
        // unreachable;
       }
       $199 = (($R$1$i) + 24|0);
       HEAP32[$199>>2] = $154;
       $200 = (($v$0$i) + 16|0);
       $201 = HEAP32[$200>>2]|0;
       $202 = ($201|0)==(0|0);
       do {
        if (!($202)) {
         $203 = HEAP32[((102424 + 16|0))>>2]|0;
         $204 = ($201>>>0)<($203>>>0);
         if ($204) {
          _abort();
          // unreachable;
         } else {
          $205 = (($R$1$i) + 16|0);
          HEAP32[$205>>2] = $201;
          $206 = (($201) + 24|0);
          HEAP32[$206>>2] = $R$1$i;
          break;
         }
        }
       } while(0);
       $207 = (($v$0$i) + 20|0);
       $208 = HEAP32[$207>>2]|0;
       $209 = ($208|0)==(0|0);
       if (!($209)) {
        $210 = HEAP32[((102424 + 16|0))>>2]|0;
        $211 = ($208>>>0)<($210>>>0);
        if ($211) {
         _abort();
         // unreachable;
        } else {
         $212 = (($R$1$i) + 20|0);
         HEAP32[$212>>2] = $208;
         $213 = (($208) + 24|0);
         HEAP32[$213>>2] = $R$1$i;
         break;
        }
       }
      }
     } while(0);
     $214 = ($rsize$0$i>>>0)<(16);
     if ($214) {
      $215 = (($rsize$0$i) + ($5))|0;
      $216 = $215 | 3;
      $217 = (($v$0$i) + 4|0);
      HEAP32[$217>>2] = $216;
      $$sum4$i = (($215) + 4)|0;
      $218 = (($v$0$i) + ($$sum4$i)|0);
      $219 = HEAP32[$218>>2]|0;
      $220 = $219 | 1;
      HEAP32[$218>>2] = $220;
     } else {
      $221 = $5 | 3;
      $222 = (($v$0$i) + 4|0);
      HEAP32[$222>>2] = $221;
      $223 = $rsize$0$i | 1;
      $$sum$i35 = $5 | 4;
      $224 = (($v$0$i) + ($$sum$i35)|0);
      HEAP32[$224>>2] = $223;
      $$sum1$i = (($rsize$0$i) + ($5))|0;
      $225 = (($v$0$i) + ($$sum1$i)|0);
      HEAP32[$225>>2] = $rsize$0$i;
      $226 = HEAP32[((102424 + 8|0))>>2]|0;
      $227 = ($226|0)==(0);
      if (!($227)) {
       $228 = HEAP32[((102424 + 20|0))>>2]|0;
       $229 = $226 >>> 3;
       $230 = $229 << 1;
       $231 = ((102424 + ($230<<2)|0) + 40|0);
       $232 = HEAP32[102424>>2]|0;
       $233 = 1 << $229;
       $234 = $232 & $233;
       $235 = ($234|0)==(0);
       if ($235) {
        $236 = $232 | $233;
        HEAP32[102424>>2] = $236;
        $$sum2$pre$i = (($230) + 2)|0;
        $$pre$i = ((102424 + ($$sum2$pre$i<<2)|0) + 40|0);
        $$pre$phi$iZ2D = $$pre$i;$F1$0$i = $231;
       } else {
        $$sum3$i = (($230) + 2)|0;
        $237 = ((102424 + ($$sum3$i<<2)|0) + 40|0);
        $238 = HEAP32[$237>>2]|0;
        $239 = HEAP32[((102424 + 16|0))>>2]|0;
        $240 = ($238>>>0)<($239>>>0);
        if ($240) {
         _abort();
         // unreachable;
        } else {
         $$pre$phi$iZ2D = $237;$F1$0$i = $238;
        }
       }
       HEAP32[$$pre$phi$iZ2D>>2] = $228;
       $241 = (($F1$0$i) + 12|0);
       HEAP32[$241>>2] = $228;
       $242 = (($228) + 8|0);
       HEAP32[$242>>2] = $F1$0$i;
       $243 = (($228) + 12|0);
       HEAP32[$243>>2] = $231;
      }
      HEAP32[((102424 + 8|0))>>2] = $rsize$0$i;
      HEAP32[((102424 + 20|0))>>2] = $151;
     }
     $244 = (($v$0$i) + 8|0);
     $mem$0 = $244;
     STACKTOP = sp;return ($mem$0|0);
    }
   } else {
    $nb$0 = $5;
   }
  } else {
   $245 = ($bytes>>>0)>(4294967231);
   if ($245) {
    $nb$0 = -1;
   } else {
    $246 = (($bytes) + 11)|0;
    $247 = $246 & -8;
    $248 = HEAP32[((102424 + 4|0))>>2]|0;
    $249 = ($248|0)==(0);
    if ($249) {
     $nb$0 = $247;
    } else {
     $250 = (0 - ($247))|0;
     $251 = $246 >>> 8;
     $252 = ($251|0)==(0);
     if ($252) {
      $idx$0$i = 0;
     } else {
      $253 = ($247>>>0)>(16777215);
      if ($253) {
       $idx$0$i = 31;
      } else {
       $254 = (($251) + 1048320)|0;
       $255 = $254 >>> 16;
       $256 = $255 & 8;
       $257 = $251 << $256;
       $258 = (($257) + 520192)|0;
       $259 = $258 >>> 16;
       $260 = $259 & 4;
       $261 = $260 | $256;
       $262 = $257 << $260;
       $263 = (($262) + 245760)|0;
       $264 = $263 >>> 16;
       $265 = $264 & 2;
       $266 = $261 | $265;
       $267 = (14 - ($266))|0;
       $268 = $262 << $265;
       $269 = $268 >>> 15;
       $270 = (($267) + ($269))|0;
       $271 = $270 << 1;
       $272 = (($270) + 7)|0;
       $273 = $247 >>> $272;
       $274 = $273 & 1;
       $275 = $274 | $271;
       $idx$0$i = $275;
      }
     }
     $276 = ((102424 + ($idx$0$i<<2)|0) + 304|0);
     $277 = HEAP32[$276>>2]|0;
     $278 = ($277|0)==(0|0);
     L9: do {
      if ($278) {
       $rsize$2$i = $250;$t$1$i = 0;$v$2$i = 0;
      } else {
       $279 = ($idx$0$i|0)==(31);
       if ($279) {
        $283 = 0;
       } else {
        $280 = $idx$0$i >>> 1;
        $281 = (25 - ($280))|0;
        $283 = $281;
       }
       $282 = $247 << $283;
       $rsize$0$i15 = $250;$rst$0$i = 0;$sizebits$0$i = $282;$t$0$i14 = $277;$v$0$i16 = 0;
       while(1) {
        $284 = (($t$0$i14) + 4|0);
        $285 = HEAP32[$284>>2]|0;
        $286 = $285 & -8;
        $287 = (($286) - ($247))|0;
        $288 = ($287>>>0)<($rsize$0$i15>>>0);
        if ($288) {
         $289 = ($286|0)==($247|0);
         if ($289) {
          $rsize$2$i = $287;$t$1$i = $t$0$i14;$v$2$i = $t$0$i14;
          break L9;
         } else {
          $rsize$1$i = $287;$v$1$i = $t$0$i14;
         }
        } else {
         $rsize$1$i = $rsize$0$i15;$v$1$i = $v$0$i16;
        }
        $290 = (($t$0$i14) + 20|0);
        $291 = HEAP32[$290>>2]|0;
        $292 = $sizebits$0$i >>> 31;
        $293 = ((($t$0$i14) + ($292<<2)|0) + 16|0);
        $294 = HEAP32[$293>>2]|0;
        $295 = ($291|0)==(0|0);
        $296 = ($291|0)==($294|0);
        $or$cond$i = $295 | $296;
        $rst$1$i = $or$cond$i ? $rst$0$i : $291;
        $297 = ($294|0)==(0|0);
        $298 = $sizebits$0$i << 1;
        if ($297) {
         $rsize$2$i = $rsize$1$i;$t$1$i = $rst$1$i;$v$2$i = $v$1$i;
         break;
        } else {
         $rsize$0$i15 = $rsize$1$i;$rst$0$i = $rst$1$i;$sizebits$0$i = $298;$t$0$i14 = $294;$v$0$i16 = $v$1$i;
        }
       }
      }
     } while(0);
     $299 = ($t$1$i|0)==(0|0);
     $300 = ($v$2$i|0)==(0|0);
     $or$cond19$i = $299 & $300;
     if ($or$cond19$i) {
      $301 = 2 << $idx$0$i;
      $302 = (0 - ($301))|0;
      $303 = $301 | $302;
      $304 = $248 & $303;
      $305 = ($304|0)==(0);
      if ($305) {
       $nb$0 = $247;
       break;
      }
      $306 = (0 - ($304))|0;
      $307 = $304 & $306;
      $308 = (($307) + -1)|0;
      $309 = $308 >>> 12;
      $310 = $309 & 16;
      $311 = $308 >>> $310;
      $312 = $311 >>> 5;
      $313 = $312 & 8;
      $314 = $313 | $310;
      $315 = $311 >>> $313;
      $316 = $315 >>> 2;
      $317 = $316 & 4;
      $318 = $314 | $317;
      $319 = $315 >>> $317;
      $320 = $319 >>> 1;
      $321 = $320 & 2;
      $322 = $318 | $321;
      $323 = $319 >>> $321;
      $324 = $323 >>> 1;
      $325 = $324 & 1;
      $326 = $322 | $325;
      $327 = $323 >>> $325;
      $328 = (($326) + ($327))|0;
      $329 = ((102424 + ($328<<2)|0) + 304|0);
      $330 = HEAP32[$329>>2]|0;
      $t$2$ph$i = $330;
     } else {
      $t$2$ph$i = $t$1$i;
     }
     $331 = ($t$2$ph$i|0)==(0|0);
     if ($331) {
      $rsize$3$lcssa$i = $rsize$2$i;$v$3$lcssa$i = $v$2$i;
     } else {
      $rsize$329$i = $rsize$2$i;$t$228$i = $t$2$ph$i;$v$330$i = $v$2$i;
      while(1) {
       $332 = (($t$228$i) + 4|0);
       $333 = HEAP32[$332>>2]|0;
       $334 = $333 & -8;
       $335 = (($334) - ($247))|0;
       $336 = ($335>>>0)<($rsize$329$i>>>0);
       $$rsize$3$i = $336 ? $335 : $rsize$329$i;
       $t$2$v$3$i = $336 ? $t$228$i : $v$330$i;
       $337 = (($t$228$i) + 16|0);
       $338 = HEAP32[$337>>2]|0;
       $339 = ($338|0)==(0|0);
       if (!($339)) {
        $rsize$329$i = $$rsize$3$i;$t$228$i = $338;$v$330$i = $t$2$v$3$i;
        continue;
       }
       $340 = (($t$228$i) + 20|0);
       $341 = HEAP32[$340>>2]|0;
       $342 = ($341|0)==(0|0);
       if ($342) {
        $rsize$3$lcssa$i = $$rsize$3$i;$v$3$lcssa$i = $t$2$v$3$i;
        break;
       } else {
        $rsize$329$i = $$rsize$3$i;$t$228$i = $341;$v$330$i = $t$2$v$3$i;
       }
      }
     }
     $343 = ($v$3$lcssa$i|0)==(0|0);
     if ($343) {
      $nb$0 = $247;
     } else {
      $344 = HEAP32[((102424 + 8|0))>>2]|0;
      $345 = (($344) - ($247))|0;
      $346 = ($rsize$3$lcssa$i>>>0)<($345>>>0);
      if ($346) {
       $347 = HEAP32[((102424 + 16|0))>>2]|0;
       $348 = ($v$3$lcssa$i>>>0)<($347>>>0);
       if ($348) {
        _abort();
        // unreachable;
       }
       $349 = (($v$3$lcssa$i) + ($247)|0);
       $350 = ($v$3$lcssa$i>>>0)<($349>>>0);
       if (!($350)) {
        _abort();
        // unreachable;
       }
       $351 = (($v$3$lcssa$i) + 24|0);
       $352 = HEAP32[$351>>2]|0;
       $353 = (($v$3$lcssa$i) + 12|0);
       $354 = HEAP32[$353>>2]|0;
       $355 = ($354|0)==($v$3$lcssa$i|0);
       do {
        if ($355) {
         $365 = (($v$3$lcssa$i) + 20|0);
         $366 = HEAP32[$365>>2]|0;
         $367 = ($366|0)==(0|0);
         if ($367) {
          $368 = (($v$3$lcssa$i) + 16|0);
          $369 = HEAP32[$368>>2]|0;
          $370 = ($369|0)==(0|0);
          if ($370) {
           $R$1$i20 = 0;
           break;
          } else {
           $R$0$i18 = $369;$RP$0$i17 = $368;
          }
         } else {
          $R$0$i18 = $366;$RP$0$i17 = $365;
         }
         while(1) {
          $371 = (($R$0$i18) + 20|0);
          $372 = HEAP32[$371>>2]|0;
          $373 = ($372|0)==(0|0);
          if (!($373)) {
           $R$0$i18 = $372;$RP$0$i17 = $371;
           continue;
          }
          $374 = (($R$0$i18) + 16|0);
          $375 = HEAP32[$374>>2]|0;
          $376 = ($375|0)==(0|0);
          if ($376) {
           break;
          } else {
           $R$0$i18 = $375;$RP$0$i17 = $374;
          }
         }
         $377 = ($RP$0$i17>>>0)<($347>>>0);
         if ($377) {
          _abort();
          // unreachable;
         } else {
          HEAP32[$RP$0$i17>>2] = 0;
          $R$1$i20 = $R$0$i18;
          break;
         }
        } else {
         $356 = (($v$3$lcssa$i) + 8|0);
         $357 = HEAP32[$356>>2]|0;
         $358 = ($357>>>0)<($347>>>0);
         if ($358) {
          _abort();
          // unreachable;
         }
         $359 = (($357) + 12|0);
         $360 = HEAP32[$359>>2]|0;
         $361 = ($360|0)==($v$3$lcssa$i|0);
         if (!($361)) {
          _abort();
          // unreachable;
         }
         $362 = (($354) + 8|0);
         $363 = HEAP32[$362>>2]|0;
         $364 = ($363|0)==($v$3$lcssa$i|0);
         if ($364) {
          HEAP32[$359>>2] = $354;
          HEAP32[$362>>2] = $357;
          $R$1$i20 = $354;
          break;
         } else {
          _abort();
          // unreachable;
         }
        }
       } while(0);
       $378 = ($352|0)==(0|0);
       do {
        if (!($378)) {
         $379 = (($v$3$lcssa$i) + 28|0);
         $380 = HEAP32[$379>>2]|0;
         $381 = ((102424 + ($380<<2)|0) + 304|0);
         $382 = HEAP32[$381>>2]|0;
         $383 = ($v$3$lcssa$i|0)==($382|0);
         if ($383) {
          HEAP32[$381>>2] = $R$1$i20;
          $cond$i21 = ($R$1$i20|0)==(0|0);
          if ($cond$i21) {
           $384 = 1 << $380;
           $385 = $384 ^ -1;
           $386 = HEAP32[((102424 + 4|0))>>2]|0;
           $387 = $386 & $385;
           HEAP32[((102424 + 4|0))>>2] = $387;
           break;
          }
         } else {
          $388 = HEAP32[((102424 + 16|0))>>2]|0;
          $389 = ($352>>>0)<($388>>>0);
          if ($389) {
           _abort();
           // unreachable;
          }
          $390 = (($352) + 16|0);
          $391 = HEAP32[$390>>2]|0;
          $392 = ($391|0)==($v$3$lcssa$i|0);
          if ($392) {
           HEAP32[$390>>2] = $R$1$i20;
          } else {
           $393 = (($352) + 20|0);
           HEAP32[$393>>2] = $R$1$i20;
          }
          $394 = ($R$1$i20|0)==(0|0);
          if ($394) {
           break;
          }
         }
         $395 = HEAP32[((102424 + 16|0))>>2]|0;
         $396 = ($R$1$i20>>>0)<($395>>>0);
         if ($396) {
          _abort();
          // unreachable;
         }
         $397 = (($R$1$i20) + 24|0);
         HEAP32[$397>>2] = $352;
         $398 = (($v$3$lcssa$i) + 16|0);
         $399 = HEAP32[$398>>2]|0;
         $400 = ($399|0)==(0|0);
         do {
          if (!($400)) {
           $401 = HEAP32[((102424 + 16|0))>>2]|0;
           $402 = ($399>>>0)<($401>>>0);
           if ($402) {
            _abort();
            // unreachable;
           } else {
            $403 = (($R$1$i20) + 16|0);
            HEAP32[$403>>2] = $399;
            $404 = (($399) + 24|0);
            HEAP32[$404>>2] = $R$1$i20;
            break;
           }
          }
         } while(0);
         $405 = (($v$3$lcssa$i) + 20|0);
         $406 = HEAP32[$405>>2]|0;
         $407 = ($406|0)==(0|0);
         if (!($407)) {
          $408 = HEAP32[((102424 + 16|0))>>2]|0;
          $409 = ($406>>>0)<($408>>>0);
          if ($409) {
           _abort();
           // unreachable;
          } else {
           $410 = (($R$1$i20) + 20|0);
           HEAP32[$410>>2] = $406;
           $411 = (($406) + 24|0);
           HEAP32[$411>>2] = $R$1$i20;
           break;
          }
         }
        }
       } while(0);
       $412 = ($rsize$3$lcssa$i>>>0)<(16);
       L87: do {
        if ($412) {
         $413 = (($rsize$3$lcssa$i) + ($247))|0;
         $414 = $413 | 3;
         $415 = (($v$3$lcssa$i) + 4|0);
         HEAP32[$415>>2] = $414;
         $$sum18$i = (($413) + 4)|0;
         $416 = (($v$3$lcssa$i) + ($$sum18$i)|0);
         $417 = HEAP32[$416>>2]|0;
         $418 = $417 | 1;
         HEAP32[$416>>2] = $418;
        } else {
         $419 = $247 | 3;
         $420 = (($v$3$lcssa$i) + 4|0);
         HEAP32[$420>>2] = $419;
         $421 = $rsize$3$lcssa$i | 1;
         $$sum$i2334 = $247 | 4;
         $422 = (($v$3$lcssa$i) + ($$sum$i2334)|0);
         HEAP32[$422>>2] = $421;
         $$sum1$i24 = (($rsize$3$lcssa$i) + ($247))|0;
         $423 = (($v$3$lcssa$i) + ($$sum1$i24)|0);
         HEAP32[$423>>2] = $rsize$3$lcssa$i;
         $424 = $rsize$3$lcssa$i >>> 3;
         $425 = ($rsize$3$lcssa$i>>>0)<(256);
         if ($425) {
          $426 = $424 << 1;
          $427 = ((102424 + ($426<<2)|0) + 40|0);
          $428 = HEAP32[102424>>2]|0;
          $429 = 1 << $424;
          $430 = $428 & $429;
          $431 = ($430|0)==(0);
          do {
           if ($431) {
            $432 = $428 | $429;
            HEAP32[102424>>2] = $432;
            $$sum14$pre$i = (($426) + 2)|0;
            $$pre$i25 = ((102424 + ($$sum14$pre$i<<2)|0) + 40|0);
            $$pre$phi$i26Z2D = $$pre$i25;$F5$0$i = $427;
           } else {
            $$sum17$i = (($426) + 2)|0;
            $433 = ((102424 + ($$sum17$i<<2)|0) + 40|0);
            $434 = HEAP32[$433>>2]|0;
            $435 = HEAP32[((102424 + 16|0))>>2]|0;
            $436 = ($434>>>0)<($435>>>0);
            if (!($436)) {
             $$pre$phi$i26Z2D = $433;$F5$0$i = $434;
             break;
            }
            _abort();
            // unreachable;
           }
          } while(0);
          HEAP32[$$pre$phi$i26Z2D>>2] = $349;
          $437 = (($F5$0$i) + 12|0);
          HEAP32[$437>>2] = $349;
          $$sum15$i = (($247) + 8)|0;
          $438 = (($v$3$lcssa$i) + ($$sum15$i)|0);
          HEAP32[$438>>2] = $F5$0$i;
          $$sum16$i = (($247) + 12)|0;
          $439 = (($v$3$lcssa$i) + ($$sum16$i)|0);
          HEAP32[$439>>2] = $427;
          break;
         }
         $440 = $rsize$3$lcssa$i >>> 8;
         $441 = ($440|0)==(0);
         if ($441) {
          $I7$0$i = 0;
         } else {
          $442 = ($rsize$3$lcssa$i>>>0)>(16777215);
          if ($442) {
           $I7$0$i = 31;
          } else {
           $443 = (($440) + 1048320)|0;
           $444 = $443 >>> 16;
           $445 = $444 & 8;
           $446 = $440 << $445;
           $447 = (($446) + 520192)|0;
           $448 = $447 >>> 16;
           $449 = $448 & 4;
           $450 = $449 | $445;
           $451 = $446 << $449;
           $452 = (($451) + 245760)|0;
           $453 = $452 >>> 16;
           $454 = $453 & 2;
           $455 = $450 | $454;
           $456 = (14 - ($455))|0;
           $457 = $451 << $454;
           $458 = $457 >>> 15;
           $459 = (($456) + ($458))|0;
           $460 = $459 << 1;
           $461 = (($459) + 7)|0;
           $462 = $rsize$3$lcssa$i >>> $461;
           $463 = $462 & 1;
           $464 = $463 | $460;
           $I7$0$i = $464;
          }
         }
         $465 = ((102424 + ($I7$0$i<<2)|0) + 304|0);
         $$sum2$i = (($247) + 28)|0;
         $466 = (($v$3$lcssa$i) + ($$sum2$i)|0);
         HEAP32[$466>>2] = $I7$0$i;
         $$sum3$i27 = (($247) + 16)|0;
         $467 = (($v$3$lcssa$i) + ($$sum3$i27)|0);
         $$sum4$i28 = (($247) + 20)|0;
         $468 = (($v$3$lcssa$i) + ($$sum4$i28)|0);
         HEAP32[$468>>2] = 0;
         HEAP32[$467>>2] = 0;
         $469 = HEAP32[((102424 + 4|0))>>2]|0;
         $470 = 1 << $I7$0$i;
         $471 = $469 & $470;
         $472 = ($471|0)==(0);
         if ($472) {
          $473 = $469 | $470;
          HEAP32[((102424 + 4|0))>>2] = $473;
          HEAP32[$465>>2] = $349;
          $$sum5$i = (($247) + 24)|0;
          $474 = (($v$3$lcssa$i) + ($$sum5$i)|0);
          HEAP32[$474>>2] = $465;
          $$sum6$i = (($247) + 12)|0;
          $475 = (($v$3$lcssa$i) + ($$sum6$i)|0);
          HEAP32[$475>>2] = $349;
          $$sum7$i = (($247) + 8)|0;
          $476 = (($v$3$lcssa$i) + ($$sum7$i)|0);
          HEAP32[$476>>2] = $349;
          break;
         }
         $477 = HEAP32[$465>>2]|0;
         $478 = ($I7$0$i|0)==(31);
         if ($478) {
          $486 = 0;
         } else {
          $479 = $I7$0$i >>> 1;
          $480 = (25 - ($479))|0;
          $486 = $480;
         }
         $481 = (($477) + 4|0);
         $482 = HEAP32[$481>>2]|0;
         $483 = $482 & -8;
         $484 = ($483|0)==($rsize$3$lcssa$i|0);
         L108: do {
          if ($484) {
           $T$0$lcssa$i = $477;
          } else {
           $485 = $rsize$3$lcssa$i << $486;
           $K12$025$i = $485;$T$024$i = $477;
           while(1) {
            $493 = $K12$025$i >>> 31;
            $494 = ((($T$024$i) + ($493<<2)|0) + 16|0);
            $489 = HEAP32[$494>>2]|0;
            $495 = ($489|0)==(0|0);
            if ($495) {
             break;
            }
            $487 = $K12$025$i << 1;
            $488 = (($489) + 4|0);
            $490 = HEAP32[$488>>2]|0;
            $491 = $490 & -8;
            $492 = ($491|0)==($rsize$3$lcssa$i|0);
            if ($492) {
             $T$0$lcssa$i = $489;
             break L108;
            } else {
             $K12$025$i = $487;$T$024$i = $489;
            }
           }
           $496 = HEAP32[((102424 + 16|0))>>2]|0;
           $497 = ($494>>>0)<($496>>>0);
           if ($497) {
            _abort();
            // unreachable;
           } else {
            HEAP32[$494>>2] = $349;
            $$sum11$i = (($247) + 24)|0;
            $498 = (($v$3$lcssa$i) + ($$sum11$i)|0);
            HEAP32[$498>>2] = $T$024$i;
            $$sum12$i = (($247) + 12)|0;
            $499 = (($v$3$lcssa$i) + ($$sum12$i)|0);
            HEAP32[$499>>2] = $349;
            $$sum13$i = (($247) + 8)|0;
            $500 = (($v$3$lcssa$i) + ($$sum13$i)|0);
            HEAP32[$500>>2] = $349;
            break L87;
           }
          }
         } while(0);
         $501 = (($T$0$lcssa$i) + 8|0);
         $502 = HEAP32[$501>>2]|0;
         $503 = HEAP32[((102424 + 16|0))>>2]|0;
         $504 = ($T$0$lcssa$i>>>0)<($503>>>0);
         if ($504) {
          _abort();
          // unreachable;
         }
         $505 = ($502>>>0)<($503>>>0);
         if ($505) {
          _abort();
          // unreachable;
         } else {
          $506 = (($502) + 12|0);
          HEAP32[$506>>2] = $349;
          HEAP32[$501>>2] = $349;
          $$sum8$i = (($247) + 8)|0;
          $507 = (($v$3$lcssa$i) + ($$sum8$i)|0);
          HEAP32[$507>>2] = $502;
          $$sum9$i = (($247) + 12)|0;
          $508 = (($v$3$lcssa$i) + ($$sum9$i)|0);
          HEAP32[$508>>2] = $T$0$lcssa$i;
          $$sum10$i = (($247) + 24)|0;
          $509 = (($v$3$lcssa$i) + ($$sum10$i)|0);
          HEAP32[$509>>2] = 0;
          break;
         }
        }
       } while(0);
       $510 = (($v$3$lcssa$i) + 8|0);
       $mem$0 = $510;
       STACKTOP = sp;return ($mem$0|0);
      } else {
       $nb$0 = $247;
      }
     }
    }
   }
  }
 } while(0);
 $511 = HEAP32[((102424 + 8|0))>>2]|0;
 $512 = ($nb$0>>>0)>($511>>>0);
 if (!($512)) {
  $513 = (($511) - ($nb$0))|0;
  $514 = HEAP32[((102424 + 20|0))>>2]|0;
  $515 = ($513>>>0)>(15);
  if ($515) {
   $516 = (($514) + ($nb$0)|0);
   HEAP32[((102424 + 20|0))>>2] = $516;
   HEAP32[((102424 + 8|0))>>2] = $513;
   $517 = $513 | 1;
   $$sum2 = (($nb$0) + 4)|0;
   $518 = (($514) + ($$sum2)|0);
   HEAP32[$518>>2] = $517;
   $519 = (($514) + ($511)|0);
   HEAP32[$519>>2] = $513;
   $520 = $nb$0 | 3;
   $521 = (($514) + 4|0);
   HEAP32[$521>>2] = $520;
  } else {
   HEAP32[((102424 + 8|0))>>2] = 0;
   HEAP32[((102424 + 20|0))>>2] = 0;
   $522 = $511 | 3;
   $523 = (($514) + 4|0);
   HEAP32[$523>>2] = $522;
   $$sum1 = (($511) + 4)|0;
   $524 = (($514) + ($$sum1)|0);
   $525 = HEAP32[$524>>2]|0;
   $526 = $525 | 1;
   HEAP32[$524>>2] = $526;
  }
  $527 = (($514) + 8|0);
  $mem$0 = $527;
  STACKTOP = sp;return ($mem$0|0);
 }
 $528 = HEAP32[((102424 + 12|0))>>2]|0;
 $529 = ($nb$0>>>0)<($528>>>0);
 if ($529) {
  $530 = (($528) - ($nb$0))|0;
  HEAP32[((102424 + 12|0))>>2] = $530;
  $531 = HEAP32[((102424 + 24|0))>>2]|0;
  $532 = (($531) + ($nb$0)|0);
  HEAP32[((102424 + 24|0))>>2] = $532;
  $533 = $530 | 1;
  $$sum = (($nb$0) + 4)|0;
  $534 = (($531) + ($$sum)|0);
  HEAP32[$534>>2] = $533;
  $535 = $nb$0 | 3;
  $536 = (($531) + 4|0);
  HEAP32[$536>>2] = $535;
  $537 = (($531) + 8|0);
  $mem$0 = $537;
  STACKTOP = sp;return ($mem$0|0);
 }
 $538 = HEAP32[102896>>2]|0;
 $539 = ($538|0)==(0);
 do {
  if ($539) {
   $540 = (_sysconf(30)|0);
   $541 = (($540) + -1)|0;
   $542 = $541 & $540;
   $543 = ($542|0)==(0);
   if ($543) {
    HEAP32[((102896 + 8|0))>>2] = $540;
    HEAP32[((102896 + 4|0))>>2] = $540;
    HEAP32[((102896 + 12|0))>>2] = -1;
    HEAP32[((102896 + 16|0))>>2] = -1;
    HEAP32[((102896 + 20|0))>>2] = 0;
    HEAP32[((102424 + 444|0))>>2] = 0;
    $544 = (_time((0|0))|0);
    $545 = $544 & -16;
    $546 = $545 ^ 1431655768;
    HEAP32[102896>>2] = $546;
    break;
   } else {
    _abort();
    // unreachable;
   }
  }
 } while(0);
 $547 = (($nb$0) + 48)|0;
 $548 = HEAP32[((102896 + 8|0))>>2]|0;
 $549 = (($nb$0) + 47)|0;
 $550 = (($548) + ($549))|0;
 $551 = (0 - ($548))|0;
 $552 = $550 & $551;
 $553 = ($552>>>0)>($nb$0>>>0);
 if (!($553)) {
  $mem$0 = 0;
  STACKTOP = sp;return ($mem$0|0);
 }
 $554 = HEAP32[((102424 + 440|0))>>2]|0;
 $555 = ($554|0)==(0);
 if (!($555)) {
  $556 = HEAP32[((102424 + 432|0))>>2]|0;
  $557 = (($556) + ($552))|0;
  $558 = ($557>>>0)<=($556>>>0);
  $559 = ($557>>>0)>($554>>>0);
  $or$cond1$i = $558 | $559;
  if ($or$cond1$i) {
   $mem$0 = 0;
   STACKTOP = sp;return ($mem$0|0);
  }
 }
 $560 = HEAP32[((102424 + 444|0))>>2]|0;
 $561 = $560 & 4;
 $562 = ($561|0)==(0);
 L269: do {
  if ($562) {
   $563 = HEAP32[((102424 + 24|0))>>2]|0;
   $564 = ($563|0)==(0|0);
   L271: do {
    if ($564) {
     label = 182;
    } else {
     $sp$0$i$i = ((102424 + 448|0));
     while(1) {
      $565 = HEAP32[$sp$0$i$i>>2]|0;
      $566 = ($565>>>0)>($563>>>0);
      if (!($566)) {
       $567 = (($sp$0$i$i) + 4|0);
       $568 = HEAP32[$567>>2]|0;
       $569 = (($565) + ($568)|0);
       $570 = ($569>>>0)>($563>>>0);
       if ($570) {
        break;
       }
      }
      $571 = (($sp$0$i$i) + 8|0);
      $572 = HEAP32[$571>>2]|0;
      $573 = ($572|0)==(0|0);
      if ($573) {
       label = 182;
       break L271;
      } else {
       $sp$0$i$i = $572;
      }
     }
     $574 = ($sp$0$i$i|0)==(0|0);
     if ($574) {
      label = 182;
     } else {
      $597 = HEAP32[((102424 + 12|0))>>2]|0;
      $598 = (($550) - ($597))|0;
      $599 = $598 & $551;
      $600 = ($599>>>0)<(2147483647);
      if ($600) {
       $601 = (_sbrk(($599|0))|0);
       $602 = HEAP32[$sp$0$i$i>>2]|0;
       $603 = HEAP32[$567>>2]|0;
       $604 = (($602) + ($603)|0);
       $605 = ($601|0)==($604|0);
       $$3$i = $605 ? $599 : 0;
       $$4$i = $605 ? $601 : (-1);
       $br$0$i = $601;$ssize$1$i = $599;$tbase$0$i = $$4$i;$tsize$0$i = $$3$i;
       label = 191;
      } else {
       $tsize$0323841$i = 0;
      }
     }
    }
   } while(0);
   do {
    if ((label|0) == 182) {
     $575 = (_sbrk(0)|0);
     $576 = ($575|0)==((-1)|0);
     if ($576) {
      $tsize$0323841$i = 0;
     } else {
      $577 = $575;
      $578 = HEAP32[((102896 + 4|0))>>2]|0;
      $579 = (($578) + -1)|0;
      $580 = $579 & $577;
      $581 = ($580|0)==(0);
      if ($581) {
       $ssize$0$i = $552;
      } else {
       $582 = (($579) + ($577))|0;
       $583 = (0 - ($578))|0;
       $584 = $582 & $583;
       $585 = (($552) - ($577))|0;
       $586 = (($585) + ($584))|0;
       $ssize$0$i = $586;
      }
      $587 = HEAP32[((102424 + 432|0))>>2]|0;
      $588 = (($587) + ($ssize$0$i))|0;
      $589 = ($ssize$0$i>>>0)>($nb$0>>>0);
      $590 = ($ssize$0$i>>>0)<(2147483647);
      $or$cond$i29 = $589 & $590;
      if ($or$cond$i29) {
       $591 = HEAP32[((102424 + 440|0))>>2]|0;
       $592 = ($591|0)==(0);
       if (!($592)) {
        $593 = ($588>>>0)<=($587>>>0);
        $594 = ($588>>>0)>($591>>>0);
        $or$cond2$i = $593 | $594;
        if ($or$cond2$i) {
         $tsize$0323841$i = 0;
         break;
        }
       }
       $595 = (_sbrk(($ssize$0$i|0))|0);
       $596 = ($595|0)==($575|0);
       $ssize$0$$i = $596 ? $ssize$0$i : 0;
       $$$i = $596 ? $575 : (-1);
       $br$0$i = $595;$ssize$1$i = $ssize$0$i;$tbase$0$i = $$$i;$tsize$0$i = $ssize$0$$i;
       label = 191;
      } else {
       $tsize$0323841$i = 0;
      }
     }
    }
   } while(0);
   L291: do {
    if ((label|0) == 191) {
     $606 = (0 - ($ssize$1$i))|0;
     $607 = ($tbase$0$i|0)==((-1)|0);
     if (!($607)) {
      $tbase$247$i = $tbase$0$i;$tsize$246$i = $tsize$0$i;
      label = 202;
      break L269;
     }
     $608 = ($br$0$i|0)!=((-1)|0);
     $609 = ($ssize$1$i>>>0)<(2147483647);
     $or$cond5$i = $608 & $609;
     $610 = ($ssize$1$i>>>0)<($547>>>0);
     $or$cond6$i = $or$cond5$i & $610;
     do {
      if ($or$cond6$i) {
       $611 = HEAP32[((102896 + 8|0))>>2]|0;
       $612 = (($549) - ($ssize$1$i))|0;
       $613 = (($612) + ($611))|0;
       $614 = (0 - ($611))|0;
       $615 = $613 & $614;
       $616 = ($615>>>0)<(2147483647);
       if ($616) {
        $617 = (_sbrk(($615|0))|0);
        $618 = ($617|0)==((-1)|0);
        if ($618) {
         (_sbrk(($606|0))|0);
         $tsize$0323841$i = $tsize$0$i;
         break L291;
        } else {
         $619 = (($615) + ($ssize$1$i))|0;
         $ssize$2$i = $619;
         break;
        }
       } else {
        $ssize$2$i = $ssize$1$i;
       }
      } else {
       $ssize$2$i = $ssize$1$i;
      }
     } while(0);
     $620 = ($br$0$i|0)==((-1)|0);
     if ($620) {
      $tsize$0323841$i = $tsize$0$i;
     } else {
      $tbase$247$i = $br$0$i;$tsize$246$i = $ssize$2$i;
      label = 202;
      break L269;
     }
    }
   } while(0);
   $621 = HEAP32[((102424 + 444|0))>>2]|0;
   $622 = $621 | 4;
   HEAP32[((102424 + 444|0))>>2] = $622;
   $tsize$1$i = $tsize$0323841$i;
   label = 199;
  } else {
   $tsize$1$i = 0;
   label = 199;
  }
 } while(0);
 if ((label|0) == 199) {
  $623 = ($552>>>0)<(2147483647);
  if ($623) {
   $624 = (_sbrk(($552|0))|0);
   $625 = (_sbrk(0)|0);
   $notlhs$i = ($624|0)!=((-1)|0);
   $notrhs$i = ($625|0)!=((-1)|0);
   $or$cond8$not$i = $notrhs$i & $notlhs$i;
   $626 = ($624>>>0)<($625>>>0);
   $or$cond9$i = $or$cond8$not$i & $626;
   if ($or$cond9$i) {
    $627 = $625;
    $628 = $624;
    $629 = (($627) - ($628))|0;
    $630 = (($nb$0) + 40)|0;
    $631 = ($629>>>0)>($630>>>0);
    $$tsize$1$i = $631 ? $629 : $tsize$1$i;
    if ($631) {
     $tbase$247$i = $624;$tsize$246$i = $$tsize$1$i;
     label = 202;
    }
   }
  }
 }
 if ((label|0) == 202) {
  $632 = HEAP32[((102424 + 432|0))>>2]|0;
  $633 = (($632) + ($tsize$246$i))|0;
  HEAP32[((102424 + 432|0))>>2] = $633;
  $634 = HEAP32[((102424 + 436|0))>>2]|0;
  $635 = ($633>>>0)>($634>>>0);
  if ($635) {
   HEAP32[((102424 + 436|0))>>2] = $633;
  }
  $636 = HEAP32[((102424 + 24|0))>>2]|0;
  $637 = ($636|0)==(0|0);
  L311: do {
   if ($637) {
    $638 = HEAP32[((102424 + 16|0))>>2]|0;
    $639 = ($638|0)==(0|0);
    $640 = ($tbase$247$i>>>0)<($638>>>0);
    $or$cond10$i = $639 | $640;
    if ($or$cond10$i) {
     HEAP32[((102424 + 16|0))>>2] = $tbase$247$i;
    }
    HEAP32[((102424 + 448|0))>>2] = $tbase$247$i;
    HEAP32[((102424 + 452|0))>>2] = $tsize$246$i;
    HEAP32[((102424 + 460|0))>>2] = 0;
    $641 = HEAP32[102896>>2]|0;
    HEAP32[((102424 + 36|0))>>2] = $641;
    HEAP32[((102424 + 32|0))>>2] = -1;
    $i$02$i$i = 0;
    while(1) {
     $642 = $i$02$i$i << 1;
     $643 = ((102424 + ($642<<2)|0) + 40|0);
     $$sum$i$i = (($642) + 3)|0;
     $644 = ((102424 + ($$sum$i$i<<2)|0) + 40|0);
     HEAP32[$644>>2] = $643;
     $$sum1$i$i = (($642) + 2)|0;
     $645 = ((102424 + ($$sum1$i$i<<2)|0) + 40|0);
     HEAP32[$645>>2] = $643;
     $646 = (($i$02$i$i) + 1)|0;
     $exitcond$i$i = ($646|0)==(32);
     if ($exitcond$i$i) {
      break;
     } else {
      $i$02$i$i = $646;
     }
    }
    $647 = (($tsize$246$i) + -40)|0;
    $648 = (($tbase$247$i) + 8|0);
    $649 = $648;
    $650 = $649 & 7;
    $651 = ($650|0)==(0);
    if ($651) {
     $655 = 0;
    } else {
     $652 = (0 - ($649))|0;
     $653 = $652 & 7;
     $655 = $653;
    }
    $654 = (($tbase$247$i) + ($655)|0);
    $656 = (($647) - ($655))|0;
    HEAP32[((102424 + 24|0))>>2] = $654;
    HEAP32[((102424 + 12|0))>>2] = $656;
    $657 = $656 | 1;
    $$sum$i14$i = (($655) + 4)|0;
    $658 = (($tbase$247$i) + ($$sum$i14$i)|0);
    HEAP32[$658>>2] = $657;
    $$sum2$i$i = (($tsize$246$i) + -36)|0;
    $659 = (($tbase$247$i) + ($$sum2$i$i)|0);
    HEAP32[$659>>2] = 40;
    $660 = HEAP32[((102896 + 16|0))>>2]|0;
    HEAP32[((102424 + 28|0))>>2] = $660;
   } else {
    $sp$075$i = ((102424 + 448|0));
    while(1) {
     $661 = HEAP32[$sp$075$i>>2]|0;
     $662 = (($sp$075$i) + 4|0);
     $663 = HEAP32[$662>>2]|0;
     $664 = (($661) + ($663)|0);
     $665 = ($tbase$247$i|0)==($664|0);
     if ($665) {
      label = 214;
      break;
     }
     $666 = (($sp$075$i) + 8|0);
     $667 = HEAP32[$666>>2]|0;
     $668 = ($667|0)==(0|0);
     if ($668) {
      break;
     } else {
      $sp$075$i = $667;
     }
    }
    if ((label|0) == 214) {
     $669 = (($sp$075$i) + 12|0);
     $670 = HEAP32[$669>>2]|0;
     $671 = $670 & 8;
     $672 = ($671|0)==(0);
     if ($672) {
      $673 = ($636>>>0)>=($661>>>0);
      $674 = ($636>>>0)<($tbase$247$i>>>0);
      $or$cond49$i = $673 & $674;
      if ($or$cond49$i) {
       $675 = (($663) + ($tsize$246$i))|0;
       HEAP32[$662>>2] = $675;
       $676 = HEAP32[((102424 + 12|0))>>2]|0;
       $677 = (($676) + ($tsize$246$i))|0;
       $678 = (($636) + 8|0);
       $679 = $678;
       $680 = $679 & 7;
       $681 = ($680|0)==(0);
       if ($681) {
        $685 = 0;
       } else {
        $682 = (0 - ($679))|0;
        $683 = $682 & 7;
        $685 = $683;
       }
       $684 = (($636) + ($685)|0);
       $686 = (($677) - ($685))|0;
       HEAP32[((102424 + 24|0))>>2] = $684;
       HEAP32[((102424 + 12|0))>>2] = $686;
       $687 = $686 | 1;
       $$sum$i18$i = (($685) + 4)|0;
       $688 = (($636) + ($$sum$i18$i)|0);
       HEAP32[$688>>2] = $687;
       $$sum2$i19$i = (($677) + 4)|0;
       $689 = (($636) + ($$sum2$i19$i)|0);
       HEAP32[$689>>2] = 40;
       $690 = HEAP32[((102896 + 16|0))>>2]|0;
       HEAP32[((102424 + 28|0))>>2] = $690;
       break;
      }
     }
    }
    $691 = HEAP32[((102424 + 16|0))>>2]|0;
    $692 = ($tbase$247$i>>>0)<($691>>>0);
    if ($692) {
     HEAP32[((102424 + 16|0))>>2] = $tbase$247$i;
    }
    $693 = (($tbase$247$i) + ($tsize$246$i)|0);
    $sp$168$i = ((102424 + 448|0));
    while(1) {
     $694 = HEAP32[$sp$168$i>>2]|0;
     $695 = ($694|0)==($693|0);
     if ($695) {
      label = 224;
      break;
     }
     $696 = (($sp$168$i) + 8|0);
     $697 = HEAP32[$696>>2]|0;
     $698 = ($697|0)==(0|0);
     if ($698) {
      break;
     } else {
      $sp$168$i = $697;
     }
    }
    if ((label|0) == 224) {
     $699 = (($sp$168$i) + 12|0);
     $700 = HEAP32[$699>>2]|0;
     $701 = $700 & 8;
     $702 = ($701|0)==(0);
     if ($702) {
      HEAP32[$sp$168$i>>2] = $tbase$247$i;
      $703 = (($sp$168$i) + 4|0);
      $704 = HEAP32[$703>>2]|0;
      $705 = (($704) + ($tsize$246$i))|0;
      HEAP32[$703>>2] = $705;
      $706 = (($tbase$247$i) + 8|0);
      $707 = $706;
      $708 = $707 & 7;
      $709 = ($708|0)==(0);
      if ($709) {
       $713 = 0;
      } else {
       $710 = (0 - ($707))|0;
       $711 = $710 & 7;
       $713 = $711;
      }
      $712 = (($tbase$247$i) + ($713)|0);
      $$sum107$i = (($tsize$246$i) + 8)|0;
      $714 = (($tbase$247$i) + ($$sum107$i)|0);
      $715 = $714;
      $716 = $715 & 7;
      $717 = ($716|0)==(0);
      if ($717) {
       $720 = 0;
      } else {
       $718 = (0 - ($715))|0;
       $719 = $718 & 7;
       $720 = $719;
      }
      $$sum108$i = (($720) + ($tsize$246$i))|0;
      $721 = (($tbase$247$i) + ($$sum108$i)|0);
      $722 = $721;
      $723 = $712;
      $724 = (($722) - ($723))|0;
      $$sum$i21$i = (($713) + ($nb$0))|0;
      $725 = (($tbase$247$i) + ($$sum$i21$i)|0);
      $726 = (($724) - ($nb$0))|0;
      $727 = $nb$0 | 3;
      $$sum1$i22$i = (($713) + 4)|0;
      $728 = (($tbase$247$i) + ($$sum1$i22$i)|0);
      HEAP32[$728>>2] = $727;
      $729 = HEAP32[((102424 + 24|0))>>2]|0;
      $730 = ($721|0)==($729|0);
      L348: do {
       if ($730) {
        $731 = HEAP32[((102424 + 12|0))>>2]|0;
        $732 = (($731) + ($726))|0;
        HEAP32[((102424 + 12|0))>>2] = $732;
        HEAP32[((102424 + 24|0))>>2] = $725;
        $733 = $732 | 1;
        $$sum42$i$i = (($$sum$i21$i) + 4)|0;
        $734 = (($tbase$247$i) + ($$sum42$i$i)|0);
        HEAP32[$734>>2] = $733;
       } else {
        $735 = HEAP32[((102424 + 20|0))>>2]|0;
        $736 = ($721|0)==($735|0);
        if ($736) {
         $737 = HEAP32[((102424 + 8|0))>>2]|0;
         $738 = (($737) + ($726))|0;
         HEAP32[((102424 + 8|0))>>2] = $738;
         HEAP32[((102424 + 20|0))>>2] = $725;
         $739 = $738 | 1;
         $$sum40$i$i = (($$sum$i21$i) + 4)|0;
         $740 = (($tbase$247$i) + ($$sum40$i$i)|0);
         HEAP32[$740>>2] = $739;
         $$sum41$i$i = (($738) + ($$sum$i21$i))|0;
         $741 = (($tbase$247$i) + ($$sum41$i$i)|0);
         HEAP32[$741>>2] = $738;
         break;
        }
        $$sum2$i23$i = (($tsize$246$i) + 4)|0;
        $$sum109$i = (($$sum2$i23$i) + ($720))|0;
        $742 = (($tbase$247$i) + ($$sum109$i)|0);
        $743 = HEAP32[$742>>2]|0;
        $744 = $743 & 3;
        $745 = ($744|0)==(1);
        if ($745) {
         $746 = $743 & -8;
         $747 = $743 >>> 3;
         $748 = ($743>>>0)<(256);
         L356: do {
          if ($748) {
           $$sum3738$i$i = $720 | 8;
           $$sum119$i = (($$sum3738$i$i) + ($tsize$246$i))|0;
           $749 = (($tbase$247$i) + ($$sum119$i)|0);
           $750 = HEAP32[$749>>2]|0;
           $$sum39$i$i = (($tsize$246$i) + 12)|0;
           $$sum120$i = (($$sum39$i$i) + ($720))|0;
           $751 = (($tbase$247$i) + ($$sum120$i)|0);
           $752 = HEAP32[$751>>2]|0;
           $753 = $747 << 1;
           $754 = ((102424 + ($753<<2)|0) + 40|0);
           $755 = ($750|0)==($754|0);
           do {
            if (!($755)) {
             $756 = HEAP32[((102424 + 16|0))>>2]|0;
             $757 = ($750>>>0)<($756>>>0);
             if ($757) {
              _abort();
              // unreachable;
             }
             $758 = (($750) + 12|0);
             $759 = HEAP32[$758>>2]|0;
             $760 = ($759|0)==($721|0);
             if ($760) {
              break;
             }
             _abort();
             // unreachable;
            }
           } while(0);
           $761 = ($752|0)==($750|0);
           if ($761) {
            $762 = 1 << $747;
            $763 = $762 ^ -1;
            $764 = HEAP32[102424>>2]|0;
            $765 = $764 & $763;
            HEAP32[102424>>2] = $765;
            break;
           }
           $766 = ($752|0)==($754|0);
           do {
            if ($766) {
             $$pre57$i$i = (($752) + 8|0);
             $$pre$phi58$i$iZ2D = $$pre57$i$i;
            } else {
             $767 = HEAP32[((102424 + 16|0))>>2]|0;
             $768 = ($752>>>0)<($767>>>0);
             if ($768) {
              _abort();
              // unreachable;
             }
             $769 = (($752) + 8|0);
             $770 = HEAP32[$769>>2]|0;
             $771 = ($770|0)==($721|0);
             if ($771) {
              $$pre$phi58$i$iZ2D = $769;
              break;
             }
             _abort();
             // unreachable;
            }
           } while(0);
           $772 = (($750) + 12|0);
           HEAP32[$772>>2] = $752;
           HEAP32[$$pre$phi58$i$iZ2D>>2] = $750;
          } else {
           $$sum34$i$i = $720 | 24;
           $$sum110$i = (($$sum34$i$i) + ($tsize$246$i))|0;
           $773 = (($tbase$247$i) + ($$sum110$i)|0);
           $774 = HEAP32[$773>>2]|0;
           $$sum5$i$i = (($tsize$246$i) + 12)|0;
           $$sum111$i = (($$sum5$i$i) + ($720))|0;
           $775 = (($tbase$247$i) + ($$sum111$i)|0);
           $776 = HEAP32[$775>>2]|0;
           $777 = ($776|0)==($721|0);
           do {
            if ($777) {
             $$sum67$i$i = $720 | 16;
             $$sum117$i = (($$sum2$i23$i) + ($$sum67$i$i))|0;
             $788 = (($tbase$247$i) + ($$sum117$i)|0);
             $789 = HEAP32[$788>>2]|0;
             $790 = ($789|0)==(0|0);
             if ($790) {
              $$sum118$i = (($$sum67$i$i) + ($tsize$246$i))|0;
              $791 = (($tbase$247$i) + ($$sum118$i)|0);
              $792 = HEAP32[$791>>2]|0;
              $793 = ($792|0)==(0|0);
              if ($793) {
               $R$1$i$i = 0;
               break;
              } else {
               $R$0$i$i = $792;$RP$0$i$i = $791;
              }
             } else {
              $R$0$i$i = $789;$RP$0$i$i = $788;
             }
             while(1) {
              $794 = (($R$0$i$i) + 20|0);
              $795 = HEAP32[$794>>2]|0;
              $796 = ($795|0)==(0|0);
              if (!($796)) {
               $R$0$i$i = $795;$RP$0$i$i = $794;
               continue;
              }
              $797 = (($R$0$i$i) + 16|0);
              $798 = HEAP32[$797>>2]|0;
              $799 = ($798|0)==(0|0);
              if ($799) {
               break;
              } else {
               $R$0$i$i = $798;$RP$0$i$i = $797;
              }
             }
             $800 = HEAP32[((102424 + 16|0))>>2]|0;
             $801 = ($RP$0$i$i>>>0)<($800>>>0);
             if ($801) {
              _abort();
              // unreachable;
             } else {
              HEAP32[$RP$0$i$i>>2] = 0;
              $R$1$i$i = $R$0$i$i;
              break;
             }
            } else {
             $$sum3536$i$i = $720 | 8;
             $$sum112$i = (($$sum3536$i$i) + ($tsize$246$i))|0;
             $778 = (($tbase$247$i) + ($$sum112$i)|0);
             $779 = HEAP32[$778>>2]|0;
             $780 = HEAP32[((102424 + 16|0))>>2]|0;
             $781 = ($779>>>0)<($780>>>0);
             if ($781) {
              _abort();
              // unreachable;
             }
             $782 = (($779) + 12|0);
             $783 = HEAP32[$782>>2]|0;
             $784 = ($783|0)==($721|0);
             if (!($784)) {
              _abort();
              // unreachable;
             }
             $785 = (($776) + 8|0);
             $786 = HEAP32[$785>>2]|0;
             $787 = ($786|0)==($721|0);
             if ($787) {
              HEAP32[$782>>2] = $776;
              HEAP32[$785>>2] = $779;
              $R$1$i$i = $776;
              break;
             } else {
              _abort();
              // unreachable;
             }
            }
           } while(0);
           $802 = ($774|0)==(0|0);
           if ($802) {
            break;
           }
           $$sum30$i$i = (($tsize$246$i) + 28)|0;
           $$sum113$i = (($$sum30$i$i) + ($720))|0;
           $803 = (($tbase$247$i) + ($$sum113$i)|0);
           $804 = HEAP32[$803>>2]|0;
           $805 = ((102424 + ($804<<2)|0) + 304|0);
           $806 = HEAP32[$805>>2]|0;
           $807 = ($721|0)==($806|0);
           do {
            if ($807) {
             HEAP32[$805>>2] = $R$1$i$i;
             $cond$i$i = ($R$1$i$i|0)==(0|0);
             if (!($cond$i$i)) {
              break;
             }
             $808 = 1 << $804;
             $809 = $808 ^ -1;
             $810 = HEAP32[((102424 + 4|0))>>2]|0;
             $811 = $810 & $809;
             HEAP32[((102424 + 4|0))>>2] = $811;
             break L356;
            } else {
             $812 = HEAP32[((102424 + 16|0))>>2]|0;
             $813 = ($774>>>0)<($812>>>0);
             if ($813) {
              _abort();
              // unreachable;
             }
             $814 = (($774) + 16|0);
             $815 = HEAP32[$814>>2]|0;
             $816 = ($815|0)==($721|0);
             if ($816) {
              HEAP32[$814>>2] = $R$1$i$i;
             } else {
              $817 = (($774) + 20|0);
              HEAP32[$817>>2] = $R$1$i$i;
             }
             $818 = ($R$1$i$i|0)==(0|0);
             if ($818) {
              break L356;
             }
            }
           } while(0);
           $819 = HEAP32[((102424 + 16|0))>>2]|0;
           $820 = ($R$1$i$i>>>0)<($819>>>0);
           if ($820) {
            _abort();
            // unreachable;
           }
           $821 = (($R$1$i$i) + 24|0);
           HEAP32[$821>>2] = $774;
           $$sum3132$i$i = $720 | 16;
           $$sum114$i = (($$sum3132$i$i) + ($tsize$246$i))|0;
           $822 = (($tbase$247$i) + ($$sum114$i)|0);
           $823 = HEAP32[$822>>2]|0;
           $824 = ($823|0)==(0|0);
           do {
            if (!($824)) {
             $825 = HEAP32[((102424 + 16|0))>>2]|0;
             $826 = ($823>>>0)<($825>>>0);
             if ($826) {
              _abort();
              // unreachable;
             } else {
              $827 = (($R$1$i$i) + 16|0);
              HEAP32[$827>>2] = $823;
              $828 = (($823) + 24|0);
              HEAP32[$828>>2] = $R$1$i$i;
              break;
             }
            }
           } while(0);
           $$sum115$i = (($$sum2$i23$i) + ($$sum3132$i$i))|0;
           $829 = (($tbase$247$i) + ($$sum115$i)|0);
           $830 = HEAP32[$829>>2]|0;
           $831 = ($830|0)==(0|0);
           if ($831) {
            break;
           }
           $832 = HEAP32[((102424 + 16|0))>>2]|0;
           $833 = ($830>>>0)<($832>>>0);
           if ($833) {
            _abort();
            // unreachable;
           } else {
            $834 = (($R$1$i$i) + 20|0);
            HEAP32[$834>>2] = $830;
            $835 = (($830) + 24|0);
            HEAP32[$835>>2] = $R$1$i$i;
            break;
           }
          }
         } while(0);
         $$sum9$i$i = $746 | $720;
         $$sum116$i = (($$sum9$i$i) + ($tsize$246$i))|0;
         $836 = (($tbase$247$i) + ($$sum116$i)|0);
         $837 = (($746) + ($726))|0;
         $oldfirst$0$i$i = $836;$qsize$0$i$i = $837;
        } else {
         $oldfirst$0$i$i = $721;$qsize$0$i$i = $726;
        }
        $838 = (($oldfirst$0$i$i) + 4|0);
        $839 = HEAP32[$838>>2]|0;
        $840 = $839 & -2;
        HEAP32[$838>>2] = $840;
        $841 = $qsize$0$i$i | 1;
        $$sum10$i$i = (($$sum$i21$i) + 4)|0;
        $842 = (($tbase$247$i) + ($$sum10$i$i)|0);
        HEAP32[$842>>2] = $841;
        $$sum11$i24$i = (($qsize$0$i$i) + ($$sum$i21$i))|0;
        $843 = (($tbase$247$i) + ($$sum11$i24$i)|0);
        HEAP32[$843>>2] = $qsize$0$i$i;
        $844 = $qsize$0$i$i >>> 3;
        $845 = ($qsize$0$i$i>>>0)<(256);
        if ($845) {
         $846 = $844 << 1;
         $847 = ((102424 + ($846<<2)|0) + 40|0);
         $848 = HEAP32[102424>>2]|0;
         $849 = 1 << $844;
         $850 = $848 & $849;
         $851 = ($850|0)==(0);
         do {
          if ($851) {
           $852 = $848 | $849;
           HEAP32[102424>>2] = $852;
           $$sum26$pre$i$i = (($846) + 2)|0;
           $$pre$i25$i = ((102424 + ($$sum26$pre$i$i<<2)|0) + 40|0);
           $$pre$phi$i26$iZ2D = $$pre$i25$i;$F4$0$i$i = $847;
          } else {
           $$sum29$i$i = (($846) + 2)|0;
           $853 = ((102424 + ($$sum29$i$i<<2)|0) + 40|0);
           $854 = HEAP32[$853>>2]|0;
           $855 = HEAP32[((102424 + 16|0))>>2]|0;
           $856 = ($854>>>0)<($855>>>0);
           if (!($856)) {
            $$pre$phi$i26$iZ2D = $853;$F4$0$i$i = $854;
            break;
           }
           _abort();
           // unreachable;
          }
         } while(0);
         HEAP32[$$pre$phi$i26$iZ2D>>2] = $725;
         $857 = (($F4$0$i$i) + 12|0);
         HEAP32[$857>>2] = $725;
         $$sum27$i$i = (($$sum$i21$i) + 8)|0;
         $858 = (($tbase$247$i) + ($$sum27$i$i)|0);
         HEAP32[$858>>2] = $F4$0$i$i;
         $$sum28$i$i = (($$sum$i21$i) + 12)|0;
         $859 = (($tbase$247$i) + ($$sum28$i$i)|0);
         HEAP32[$859>>2] = $847;
         break;
        }
        $860 = $qsize$0$i$i >>> 8;
        $861 = ($860|0)==(0);
        do {
         if ($861) {
          $I7$0$i$i = 0;
         } else {
          $862 = ($qsize$0$i$i>>>0)>(16777215);
          if ($862) {
           $I7$0$i$i = 31;
           break;
          }
          $863 = (($860) + 1048320)|0;
          $864 = $863 >>> 16;
          $865 = $864 & 8;
          $866 = $860 << $865;
          $867 = (($866) + 520192)|0;
          $868 = $867 >>> 16;
          $869 = $868 & 4;
          $870 = $869 | $865;
          $871 = $866 << $869;
          $872 = (($871) + 245760)|0;
          $873 = $872 >>> 16;
          $874 = $873 & 2;
          $875 = $870 | $874;
          $876 = (14 - ($875))|0;
          $877 = $871 << $874;
          $878 = $877 >>> 15;
          $879 = (($876) + ($878))|0;
          $880 = $879 << 1;
          $881 = (($879) + 7)|0;
          $882 = $qsize$0$i$i >>> $881;
          $883 = $882 & 1;
          $884 = $883 | $880;
          $I7$0$i$i = $884;
         }
        } while(0);
        $885 = ((102424 + ($I7$0$i$i<<2)|0) + 304|0);
        $$sum12$i$i = (($$sum$i21$i) + 28)|0;
        $886 = (($tbase$247$i) + ($$sum12$i$i)|0);
        HEAP32[$886>>2] = $I7$0$i$i;
        $$sum13$i$i = (($$sum$i21$i) + 16)|0;
        $887 = (($tbase$247$i) + ($$sum13$i$i)|0);
        $$sum14$i$i = (($$sum$i21$i) + 20)|0;
        $888 = (($tbase$247$i) + ($$sum14$i$i)|0);
        HEAP32[$888>>2] = 0;
        HEAP32[$887>>2] = 0;
        $889 = HEAP32[((102424 + 4|0))>>2]|0;
        $890 = 1 << $I7$0$i$i;
        $891 = $889 & $890;
        $892 = ($891|0)==(0);
        if ($892) {
         $893 = $889 | $890;
         HEAP32[((102424 + 4|0))>>2] = $893;
         HEAP32[$885>>2] = $725;
         $$sum15$i$i = (($$sum$i21$i) + 24)|0;
         $894 = (($tbase$247$i) + ($$sum15$i$i)|0);
         HEAP32[$894>>2] = $885;
         $$sum16$i$i = (($$sum$i21$i) + 12)|0;
         $895 = (($tbase$247$i) + ($$sum16$i$i)|0);
         HEAP32[$895>>2] = $725;
         $$sum17$i$i = (($$sum$i21$i) + 8)|0;
         $896 = (($tbase$247$i) + ($$sum17$i$i)|0);
         HEAP32[$896>>2] = $725;
         break;
        }
        $897 = HEAP32[$885>>2]|0;
        $898 = ($I7$0$i$i|0)==(31);
        if ($898) {
         $906 = 0;
        } else {
         $899 = $I7$0$i$i >>> 1;
         $900 = (25 - ($899))|0;
         $906 = $900;
        }
        $901 = (($897) + 4|0);
        $902 = HEAP32[$901>>2]|0;
        $903 = $902 & -8;
        $904 = ($903|0)==($qsize$0$i$i|0);
        L445: do {
         if ($904) {
          $T$0$lcssa$i28$i = $897;
         } else {
          $905 = $qsize$0$i$i << $906;
          $K8$052$i$i = $905;$T$051$i$i = $897;
          while(1) {
           $913 = $K8$052$i$i >>> 31;
           $914 = ((($T$051$i$i) + ($913<<2)|0) + 16|0);
           $909 = HEAP32[$914>>2]|0;
           $915 = ($909|0)==(0|0);
           if ($915) {
            break;
           }
           $907 = $K8$052$i$i << 1;
           $908 = (($909) + 4|0);
           $910 = HEAP32[$908>>2]|0;
           $911 = $910 & -8;
           $912 = ($911|0)==($qsize$0$i$i|0);
           if ($912) {
            $T$0$lcssa$i28$i = $909;
            break L445;
           } else {
            $K8$052$i$i = $907;$T$051$i$i = $909;
           }
          }
          $916 = HEAP32[((102424 + 16|0))>>2]|0;
          $917 = ($914>>>0)<($916>>>0);
          if ($917) {
           _abort();
           // unreachable;
          } else {
           HEAP32[$914>>2] = $725;
           $$sum23$i$i = (($$sum$i21$i) + 24)|0;
           $918 = (($tbase$247$i) + ($$sum23$i$i)|0);
           HEAP32[$918>>2] = $T$051$i$i;
           $$sum24$i$i = (($$sum$i21$i) + 12)|0;
           $919 = (($tbase$247$i) + ($$sum24$i$i)|0);
           HEAP32[$919>>2] = $725;
           $$sum25$i$i = (($$sum$i21$i) + 8)|0;
           $920 = (($tbase$247$i) + ($$sum25$i$i)|0);
           HEAP32[$920>>2] = $725;
           break L348;
          }
         }
        } while(0);
        $921 = (($T$0$lcssa$i28$i) + 8|0);
        $922 = HEAP32[$921>>2]|0;
        $923 = HEAP32[((102424 + 16|0))>>2]|0;
        $924 = ($T$0$lcssa$i28$i>>>0)<($923>>>0);
        if ($924) {
         _abort();
         // unreachable;
        }
        $925 = ($922>>>0)<($923>>>0);
        if ($925) {
         _abort();
         // unreachable;
        } else {
         $926 = (($922) + 12|0);
         HEAP32[$926>>2] = $725;
         HEAP32[$921>>2] = $725;
         $$sum20$i$i = (($$sum$i21$i) + 8)|0;
         $927 = (($tbase$247$i) + ($$sum20$i$i)|0);
         HEAP32[$927>>2] = $922;
         $$sum21$i$i = (($$sum$i21$i) + 12)|0;
         $928 = (($tbase$247$i) + ($$sum21$i$i)|0);
         HEAP32[$928>>2] = $T$0$lcssa$i28$i;
         $$sum22$i$i = (($$sum$i21$i) + 24)|0;
         $929 = (($tbase$247$i) + ($$sum22$i$i)|0);
         HEAP32[$929>>2] = 0;
         break;
        }
       }
      } while(0);
      $$sum1819$i$i = $713 | 8;
      $930 = (($tbase$247$i) + ($$sum1819$i$i)|0);
      $mem$0 = $930;
      STACKTOP = sp;return ($mem$0|0);
     }
    }
    $sp$0$i$i$i = ((102424 + 448|0));
    while(1) {
     $931 = HEAP32[$sp$0$i$i$i>>2]|0;
     $932 = ($931>>>0)>($636>>>0);
     if (!($932)) {
      $933 = (($sp$0$i$i$i) + 4|0);
      $934 = HEAP32[$933>>2]|0;
      $935 = (($931) + ($934)|0);
      $936 = ($935>>>0)>($636>>>0);
      if ($936) {
       break;
      }
     }
     $937 = (($sp$0$i$i$i) + 8|0);
     $938 = HEAP32[$937>>2]|0;
     $sp$0$i$i$i = $938;
    }
    $$sum$i15$i = (($934) + -47)|0;
    $$sum1$i16$i = (($934) + -39)|0;
    $939 = (($931) + ($$sum1$i16$i)|0);
    $940 = $939;
    $941 = $940 & 7;
    $942 = ($941|0)==(0);
    if ($942) {
     $945 = 0;
    } else {
     $943 = (0 - ($940))|0;
     $944 = $943 & 7;
     $945 = $944;
    }
    $$sum2$i17$i = (($$sum$i15$i) + ($945))|0;
    $946 = (($931) + ($$sum2$i17$i)|0);
    $947 = (($636) + 16|0);
    $948 = ($946>>>0)<($947>>>0);
    $949 = $948 ? $636 : $946;
    $950 = (($949) + 8|0);
    $951 = (($tsize$246$i) + -40)|0;
    $952 = (($tbase$247$i) + 8|0);
    $953 = $952;
    $954 = $953 & 7;
    $955 = ($954|0)==(0);
    if ($955) {
     $959 = 0;
    } else {
     $956 = (0 - ($953))|0;
     $957 = $956 & 7;
     $959 = $957;
    }
    $958 = (($tbase$247$i) + ($959)|0);
    $960 = (($951) - ($959))|0;
    HEAP32[((102424 + 24|0))>>2] = $958;
    HEAP32[((102424 + 12|0))>>2] = $960;
    $961 = $960 | 1;
    $$sum$i$i$i = (($959) + 4)|0;
    $962 = (($tbase$247$i) + ($$sum$i$i$i)|0);
    HEAP32[$962>>2] = $961;
    $$sum2$i$i$i = (($tsize$246$i) + -36)|0;
    $963 = (($tbase$247$i) + ($$sum2$i$i$i)|0);
    HEAP32[$963>>2] = 40;
    $964 = HEAP32[((102896 + 16|0))>>2]|0;
    HEAP32[((102424 + 28|0))>>2] = $964;
    $965 = (($949) + 4|0);
    HEAP32[$965>>2] = 27;
    ;HEAP32[$950+0>>2]=HEAP32[((102424 + 448|0))+0>>2]|0;HEAP32[$950+4>>2]=HEAP32[((102424 + 448|0))+4>>2]|0;HEAP32[$950+8>>2]=HEAP32[((102424 + 448|0))+8>>2]|0;HEAP32[$950+12>>2]=HEAP32[((102424 + 448|0))+12>>2]|0;
    HEAP32[((102424 + 448|0))>>2] = $tbase$247$i;
    HEAP32[((102424 + 452|0))>>2] = $tsize$246$i;
    HEAP32[((102424 + 460|0))>>2] = 0;
    HEAP32[((102424 + 456|0))>>2] = $950;
    $966 = (($949) + 28|0);
    HEAP32[$966>>2] = 7;
    $967 = (($949) + 32|0);
    $968 = ($967>>>0)<($935>>>0);
    if ($968) {
     $970 = $966;
     while(1) {
      $969 = (($970) + 4|0);
      HEAP32[$969>>2] = 7;
      $971 = (($970) + 8|0);
      $972 = ($971>>>0)<($935>>>0);
      if ($972) {
       $970 = $969;
      } else {
       break;
      }
     }
    }
    $973 = ($949|0)==($636|0);
    if (!($973)) {
     $974 = $949;
     $975 = $636;
     $976 = (($974) - ($975))|0;
     $977 = (($636) + ($976)|0);
     $$sum3$i$i = (($976) + 4)|0;
     $978 = (($636) + ($$sum3$i$i)|0);
     $979 = HEAP32[$978>>2]|0;
     $980 = $979 & -2;
     HEAP32[$978>>2] = $980;
     $981 = $976 | 1;
     $982 = (($636) + 4|0);
     HEAP32[$982>>2] = $981;
     HEAP32[$977>>2] = $976;
     $983 = $976 >>> 3;
     $984 = ($976>>>0)<(256);
     if ($984) {
      $985 = $983 << 1;
      $986 = ((102424 + ($985<<2)|0) + 40|0);
      $987 = HEAP32[102424>>2]|0;
      $988 = 1 << $983;
      $989 = $987 & $988;
      $990 = ($989|0)==(0);
      do {
       if ($990) {
        $991 = $987 | $988;
        HEAP32[102424>>2] = $991;
        $$sum10$pre$i$i = (($985) + 2)|0;
        $$pre$i$i = ((102424 + ($$sum10$pre$i$i<<2)|0) + 40|0);
        $$pre$phi$i$iZ2D = $$pre$i$i;$F$0$i$i = $986;
       } else {
        $$sum11$i$i = (($985) + 2)|0;
        $992 = ((102424 + ($$sum11$i$i<<2)|0) + 40|0);
        $993 = HEAP32[$992>>2]|0;
        $994 = HEAP32[((102424 + 16|0))>>2]|0;
        $995 = ($993>>>0)<($994>>>0);
        if (!($995)) {
         $$pre$phi$i$iZ2D = $992;$F$0$i$i = $993;
         break;
        }
        _abort();
        // unreachable;
       }
      } while(0);
      HEAP32[$$pre$phi$i$iZ2D>>2] = $636;
      $996 = (($F$0$i$i) + 12|0);
      HEAP32[$996>>2] = $636;
      $997 = (($636) + 8|0);
      HEAP32[$997>>2] = $F$0$i$i;
      $998 = (($636) + 12|0);
      HEAP32[$998>>2] = $986;
      break;
     }
     $999 = $976 >>> 8;
     $1000 = ($999|0)==(0);
     if ($1000) {
      $I1$0$i$i = 0;
     } else {
      $1001 = ($976>>>0)>(16777215);
      if ($1001) {
       $I1$0$i$i = 31;
      } else {
       $1002 = (($999) + 1048320)|0;
       $1003 = $1002 >>> 16;
       $1004 = $1003 & 8;
       $1005 = $999 << $1004;
       $1006 = (($1005) + 520192)|0;
       $1007 = $1006 >>> 16;
       $1008 = $1007 & 4;
       $1009 = $1008 | $1004;
       $1010 = $1005 << $1008;
       $1011 = (($1010) + 245760)|0;
       $1012 = $1011 >>> 16;
       $1013 = $1012 & 2;
       $1014 = $1009 | $1013;
       $1015 = (14 - ($1014))|0;
       $1016 = $1010 << $1013;
       $1017 = $1016 >>> 15;
       $1018 = (($1015) + ($1017))|0;
       $1019 = $1018 << 1;
       $1020 = (($1018) + 7)|0;
       $1021 = $976 >>> $1020;
       $1022 = $1021 & 1;
       $1023 = $1022 | $1019;
       $I1$0$i$i = $1023;
      }
     }
     $1024 = ((102424 + ($I1$0$i$i<<2)|0) + 304|0);
     $1025 = (($636) + 28|0);
     $I1$0$c$i$i = $I1$0$i$i;
     HEAP32[$1025>>2] = $I1$0$c$i$i;
     $1026 = (($636) + 20|0);
     HEAP32[$1026>>2] = 0;
     $1027 = (($636) + 16|0);
     HEAP32[$1027>>2] = 0;
     $1028 = HEAP32[((102424 + 4|0))>>2]|0;
     $1029 = 1 << $I1$0$i$i;
     $1030 = $1028 & $1029;
     $1031 = ($1030|0)==(0);
     if ($1031) {
      $1032 = $1028 | $1029;
      HEAP32[((102424 + 4|0))>>2] = $1032;
      HEAP32[$1024>>2] = $636;
      $1033 = (($636) + 24|0);
      HEAP32[$1033>>2] = $1024;
      $1034 = (($636) + 12|0);
      HEAP32[$1034>>2] = $636;
      $1035 = (($636) + 8|0);
      HEAP32[$1035>>2] = $636;
      break;
     }
     $1036 = HEAP32[$1024>>2]|0;
     $1037 = ($I1$0$i$i|0)==(31);
     if ($1037) {
      $1045 = 0;
     } else {
      $1038 = $I1$0$i$i >>> 1;
      $1039 = (25 - ($1038))|0;
      $1045 = $1039;
     }
     $1040 = (($1036) + 4|0);
     $1041 = HEAP32[$1040>>2]|0;
     $1042 = $1041 & -8;
     $1043 = ($1042|0)==($976|0);
     L499: do {
      if ($1043) {
       $T$0$lcssa$i$i = $1036;
      } else {
       $1044 = $976 << $1045;
       $K2$014$i$i = $1044;$T$013$i$i = $1036;
       while(1) {
        $1052 = $K2$014$i$i >>> 31;
        $1053 = ((($T$013$i$i) + ($1052<<2)|0) + 16|0);
        $1048 = HEAP32[$1053>>2]|0;
        $1054 = ($1048|0)==(0|0);
        if ($1054) {
         break;
        }
        $1046 = $K2$014$i$i << 1;
        $1047 = (($1048) + 4|0);
        $1049 = HEAP32[$1047>>2]|0;
        $1050 = $1049 & -8;
        $1051 = ($1050|0)==($976|0);
        if ($1051) {
         $T$0$lcssa$i$i = $1048;
         break L499;
        } else {
         $K2$014$i$i = $1046;$T$013$i$i = $1048;
        }
       }
       $1055 = HEAP32[((102424 + 16|0))>>2]|0;
       $1056 = ($1053>>>0)<($1055>>>0);
       if ($1056) {
        _abort();
        // unreachable;
       } else {
        HEAP32[$1053>>2] = $636;
        $1057 = (($636) + 24|0);
        HEAP32[$1057>>2] = $T$013$i$i;
        $1058 = (($636) + 12|0);
        HEAP32[$1058>>2] = $636;
        $1059 = (($636) + 8|0);
        HEAP32[$1059>>2] = $636;
        break L311;
       }
      }
     } while(0);
     $1060 = (($T$0$lcssa$i$i) + 8|0);
     $1061 = HEAP32[$1060>>2]|0;
     $1062 = HEAP32[((102424 + 16|0))>>2]|0;
     $1063 = ($T$0$lcssa$i$i>>>0)<($1062>>>0);
     if ($1063) {
      _abort();
      // unreachable;
     }
     $1064 = ($1061>>>0)<($1062>>>0);
     if ($1064) {
      _abort();
      // unreachable;
     } else {
      $1065 = (($1061) + 12|0);
      HEAP32[$1065>>2] = $636;
      HEAP32[$1060>>2] = $636;
      $1066 = (($636) + 8|0);
      HEAP32[$1066>>2] = $1061;
      $1067 = (($636) + 12|0);
      HEAP32[$1067>>2] = $T$0$lcssa$i$i;
      $1068 = (($636) + 24|0);
      HEAP32[$1068>>2] = 0;
      break;
     }
    }
   }
  } while(0);
  $1069 = HEAP32[((102424 + 12|0))>>2]|0;
  $1070 = ($1069>>>0)>($nb$0>>>0);
  if ($1070) {
   $1071 = (($1069) - ($nb$0))|0;
   HEAP32[((102424 + 12|0))>>2] = $1071;
   $1072 = HEAP32[((102424 + 24|0))>>2]|0;
   $1073 = (($1072) + ($nb$0)|0);
   HEAP32[((102424 + 24|0))>>2] = $1073;
   $1074 = $1071 | 1;
   $$sum$i32 = (($nb$0) + 4)|0;
   $1075 = (($1072) + ($$sum$i32)|0);
   HEAP32[$1075>>2] = $1074;
   $1076 = $nb$0 | 3;
   $1077 = (($1072) + 4|0);
   HEAP32[$1077>>2] = $1076;
   $1078 = (($1072) + 8|0);
   $mem$0 = $1078;
   STACKTOP = sp;return ($mem$0|0);
  }
 }
 $1079 = (___errno_location()|0);
 HEAP32[$1079>>2] = 12;
 $mem$0 = 0;
 STACKTOP = sp;return ($mem$0|0);
}
function _free($mem) {
 $mem = $mem|0;
 var $$pre = 0, $$pre$phi68Z2D = 0, $$pre$phi70Z2D = 0, $$pre$phiZ2D = 0, $$pre67 = 0, $$pre69 = 0, $$sum = 0, $$sum16$pre = 0, $$sum17 = 0, $$sum18 = 0, $$sum19 = 0, $$sum2 = 0, $$sum20 = 0, $$sum2324 = 0, $$sum25 = 0, $$sum26 = 0, $$sum28 = 0, $$sum29 = 0, $$sum3 = 0, $$sum30 = 0;
 var $$sum31 = 0, $$sum32 = 0, $$sum33 = 0, $$sum34 = 0, $$sum35 = 0, $$sum36 = 0, $$sum37 = 0, $$sum5 = 0, $$sum67 = 0, $$sum8 = 0, $$sum9 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0;
 var $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0;
 var $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0;
 var $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0;
 var $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0;
 var $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0;
 var $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0;
 var $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0;
 var $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0;
 var $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0;
 var $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0;
 var $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0;
 var $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0;
 var $322 = 0, $323 = 0, $324 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $F16$0 = 0, $I18$0 = 0, $I18$0$c = 0, $K19$057 = 0;
 var $R$0 = 0, $R$1 = 0, $R7$0 = 0, $R7$1 = 0, $RP$0 = 0, $RP9$0 = 0, $T$0$lcssa = 0, $T$056 = 0, $cond = 0, $cond54 = 0, $p$0 = 0, $psize$0 = 0, $psize$1 = 0, $sp$0$i = 0, $sp$0$in$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($mem|0)==(0|0);
 if ($0) {
  STACKTOP = sp;return;
 }
 $1 = (($mem) + -8|0);
 $2 = HEAP32[((102424 + 16|0))>>2]|0;
 $3 = ($1>>>0)<($2>>>0);
 if ($3) {
  _abort();
  // unreachable;
 }
 $4 = (($mem) + -4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $5 & 3;
 $7 = ($6|0)==(1);
 if ($7) {
  _abort();
  // unreachable;
 }
 $8 = $5 & -8;
 $$sum = (($8) + -8)|0;
 $9 = (($mem) + ($$sum)|0);
 $10 = $5 & 1;
 $11 = ($10|0)==(0);
 do {
  if ($11) {
   $12 = HEAP32[$1>>2]|0;
   $13 = ($6|0)==(0);
   if ($13) {
    STACKTOP = sp;return;
   }
   $$sum2 = (-8 - ($12))|0;
   $14 = (($mem) + ($$sum2)|0);
   $15 = (($12) + ($8))|0;
   $16 = ($14>>>0)<($2>>>0);
   if ($16) {
    _abort();
    // unreachable;
   }
   $17 = HEAP32[((102424 + 20|0))>>2]|0;
   $18 = ($14|0)==($17|0);
   if ($18) {
    $$sum3 = (($8) + -4)|0;
    $104 = (($mem) + ($$sum3)|0);
    $105 = HEAP32[$104>>2]|0;
    $106 = $105 & 3;
    $107 = ($106|0)==(3);
    if (!($107)) {
     $p$0 = $14;$psize$0 = $15;
     break;
    }
    HEAP32[((102424 + 8|0))>>2] = $15;
    $108 = HEAP32[$104>>2]|0;
    $109 = $108 & -2;
    HEAP32[$104>>2] = $109;
    $110 = $15 | 1;
    $$sum26 = (($$sum2) + 4)|0;
    $111 = (($mem) + ($$sum26)|0);
    HEAP32[$111>>2] = $110;
    HEAP32[$9>>2] = $15;
    STACKTOP = sp;return;
   }
   $19 = $12 >>> 3;
   $20 = ($12>>>0)<(256);
   if ($20) {
    $$sum36 = (($$sum2) + 8)|0;
    $21 = (($mem) + ($$sum36)|0);
    $22 = HEAP32[$21>>2]|0;
    $$sum37 = (($$sum2) + 12)|0;
    $23 = (($mem) + ($$sum37)|0);
    $24 = HEAP32[$23>>2]|0;
    $25 = $19 << 1;
    $26 = ((102424 + ($25<<2)|0) + 40|0);
    $27 = ($22|0)==($26|0);
    if (!($27)) {
     $28 = ($22>>>0)<($2>>>0);
     if ($28) {
      _abort();
      // unreachable;
     }
     $29 = (($22) + 12|0);
     $30 = HEAP32[$29>>2]|0;
     $31 = ($30|0)==($14|0);
     if (!($31)) {
      _abort();
      // unreachable;
     }
    }
    $32 = ($24|0)==($22|0);
    if ($32) {
     $33 = 1 << $19;
     $34 = $33 ^ -1;
     $35 = HEAP32[102424>>2]|0;
     $36 = $35 & $34;
     HEAP32[102424>>2] = $36;
     $p$0 = $14;$psize$0 = $15;
     break;
    }
    $37 = ($24|0)==($26|0);
    if ($37) {
     $$pre69 = (($24) + 8|0);
     $$pre$phi70Z2D = $$pre69;
    } else {
     $38 = ($24>>>0)<($2>>>0);
     if ($38) {
      _abort();
      // unreachable;
     }
     $39 = (($24) + 8|0);
     $40 = HEAP32[$39>>2]|0;
     $41 = ($40|0)==($14|0);
     if ($41) {
      $$pre$phi70Z2D = $39;
     } else {
      _abort();
      // unreachable;
     }
    }
    $42 = (($22) + 12|0);
    HEAP32[$42>>2] = $24;
    HEAP32[$$pre$phi70Z2D>>2] = $22;
    $p$0 = $14;$psize$0 = $15;
    break;
   }
   $$sum28 = (($$sum2) + 24)|0;
   $43 = (($mem) + ($$sum28)|0);
   $44 = HEAP32[$43>>2]|0;
   $$sum29 = (($$sum2) + 12)|0;
   $45 = (($mem) + ($$sum29)|0);
   $46 = HEAP32[$45>>2]|0;
   $47 = ($46|0)==($14|0);
   do {
    if ($47) {
     $$sum31 = (($$sum2) + 20)|0;
     $57 = (($mem) + ($$sum31)|0);
     $58 = HEAP32[$57>>2]|0;
     $59 = ($58|0)==(0|0);
     if ($59) {
      $$sum30 = (($$sum2) + 16)|0;
      $60 = (($mem) + ($$sum30)|0);
      $61 = HEAP32[$60>>2]|0;
      $62 = ($61|0)==(0|0);
      if ($62) {
       $R$1 = 0;
       break;
      } else {
       $R$0 = $61;$RP$0 = $60;
      }
     } else {
      $R$0 = $58;$RP$0 = $57;
     }
     while(1) {
      $63 = (($R$0) + 20|0);
      $64 = HEAP32[$63>>2]|0;
      $65 = ($64|0)==(0|0);
      if (!($65)) {
       $R$0 = $64;$RP$0 = $63;
       continue;
      }
      $66 = (($R$0) + 16|0);
      $67 = HEAP32[$66>>2]|0;
      $68 = ($67|0)==(0|0);
      if ($68) {
       break;
      } else {
       $R$0 = $67;$RP$0 = $66;
      }
     }
     $69 = ($RP$0>>>0)<($2>>>0);
     if ($69) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$RP$0>>2] = 0;
      $R$1 = $R$0;
      break;
     }
    } else {
     $$sum35 = (($$sum2) + 8)|0;
     $48 = (($mem) + ($$sum35)|0);
     $49 = HEAP32[$48>>2]|0;
     $50 = ($49>>>0)<($2>>>0);
     if ($50) {
      _abort();
      // unreachable;
     }
     $51 = (($49) + 12|0);
     $52 = HEAP32[$51>>2]|0;
     $53 = ($52|0)==($14|0);
     if (!($53)) {
      _abort();
      // unreachable;
     }
     $54 = (($46) + 8|0);
     $55 = HEAP32[$54>>2]|0;
     $56 = ($55|0)==($14|0);
     if ($56) {
      HEAP32[$51>>2] = $46;
      HEAP32[$54>>2] = $49;
      $R$1 = $46;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   } while(0);
   $70 = ($44|0)==(0|0);
   if ($70) {
    $p$0 = $14;$psize$0 = $15;
   } else {
    $$sum32 = (($$sum2) + 28)|0;
    $71 = (($mem) + ($$sum32)|0);
    $72 = HEAP32[$71>>2]|0;
    $73 = ((102424 + ($72<<2)|0) + 304|0);
    $74 = HEAP32[$73>>2]|0;
    $75 = ($14|0)==($74|0);
    if ($75) {
     HEAP32[$73>>2] = $R$1;
     $cond = ($R$1|0)==(0|0);
     if ($cond) {
      $76 = 1 << $72;
      $77 = $76 ^ -1;
      $78 = HEAP32[((102424 + 4|0))>>2]|0;
      $79 = $78 & $77;
      HEAP32[((102424 + 4|0))>>2] = $79;
      $p$0 = $14;$psize$0 = $15;
      break;
     }
    } else {
     $80 = HEAP32[((102424 + 16|0))>>2]|0;
     $81 = ($44>>>0)<($80>>>0);
     if ($81) {
      _abort();
      // unreachable;
     }
     $82 = (($44) + 16|0);
     $83 = HEAP32[$82>>2]|0;
     $84 = ($83|0)==($14|0);
     if ($84) {
      HEAP32[$82>>2] = $R$1;
     } else {
      $85 = (($44) + 20|0);
      HEAP32[$85>>2] = $R$1;
     }
     $86 = ($R$1|0)==(0|0);
     if ($86) {
      $p$0 = $14;$psize$0 = $15;
      break;
     }
    }
    $87 = HEAP32[((102424 + 16|0))>>2]|0;
    $88 = ($R$1>>>0)<($87>>>0);
    if ($88) {
     _abort();
     // unreachable;
    }
    $89 = (($R$1) + 24|0);
    HEAP32[$89>>2] = $44;
    $$sum33 = (($$sum2) + 16)|0;
    $90 = (($mem) + ($$sum33)|0);
    $91 = HEAP32[$90>>2]|0;
    $92 = ($91|0)==(0|0);
    do {
     if (!($92)) {
      $93 = HEAP32[((102424 + 16|0))>>2]|0;
      $94 = ($91>>>0)<($93>>>0);
      if ($94) {
       _abort();
       // unreachable;
      } else {
       $95 = (($R$1) + 16|0);
       HEAP32[$95>>2] = $91;
       $96 = (($91) + 24|0);
       HEAP32[$96>>2] = $R$1;
       break;
      }
     }
    } while(0);
    $$sum34 = (($$sum2) + 20)|0;
    $97 = (($mem) + ($$sum34)|0);
    $98 = HEAP32[$97>>2]|0;
    $99 = ($98|0)==(0|0);
    if ($99) {
     $p$0 = $14;$psize$0 = $15;
    } else {
     $100 = HEAP32[((102424 + 16|0))>>2]|0;
     $101 = ($98>>>0)<($100>>>0);
     if ($101) {
      _abort();
      // unreachable;
     } else {
      $102 = (($R$1) + 20|0);
      HEAP32[$102>>2] = $98;
      $103 = (($98) + 24|0);
      HEAP32[$103>>2] = $R$1;
      $p$0 = $14;$psize$0 = $15;
      break;
     }
    }
   }
  } else {
   $p$0 = $1;$psize$0 = $8;
  }
 } while(0);
 $112 = ($p$0>>>0)<($9>>>0);
 if (!($112)) {
  _abort();
  // unreachable;
 }
 $$sum25 = (($8) + -4)|0;
 $113 = (($mem) + ($$sum25)|0);
 $114 = HEAP32[$113>>2]|0;
 $115 = $114 & 1;
 $116 = ($115|0)==(0);
 if ($116) {
  _abort();
  // unreachable;
 }
 $117 = $114 & 2;
 $118 = ($117|0)==(0);
 if ($118) {
  $119 = HEAP32[((102424 + 24|0))>>2]|0;
  $120 = ($9|0)==($119|0);
  if ($120) {
   $121 = HEAP32[((102424 + 12|0))>>2]|0;
   $122 = (($121) + ($psize$0))|0;
   HEAP32[((102424 + 12|0))>>2] = $122;
   HEAP32[((102424 + 24|0))>>2] = $p$0;
   $123 = $122 | 1;
   $124 = (($p$0) + 4|0);
   HEAP32[$124>>2] = $123;
   $125 = HEAP32[((102424 + 20|0))>>2]|0;
   $126 = ($p$0|0)==($125|0);
   if (!($126)) {
    STACKTOP = sp;return;
   }
   HEAP32[((102424 + 20|0))>>2] = 0;
   HEAP32[((102424 + 8|0))>>2] = 0;
   STACKTOP = sp;return;
  }
  $127 = HEAP32[((102424 + 20|0))>>2]|0;
  $128 = ($9|0)==($127|0);
  if ($128) {
   $129 = HEAP32[((102424 + 8|0))>>2]|0;
   $130 = (($129) + ($psize$0))|0;
   HEAP32[((102424 + 8|0))>>2] = $130;
   HEAP32[((102424 + 20|0))>>2] = $p$0;
   $131 = $130 | 1;
   $132 = (($p$0) + 4|0);
   HEAP32[$132>>2] = $131;
   $133 = (($p$0) + ($130)|0);
   HEAP32[$133>>2] = $130;
   STACKTOP = sp;return;
  }
  $134 = $114 & -8;
  $135 = (($134) + ($psize$0))|0;
  $136 = $114 >>> 3;
  $137 = ($114>>>0)<(256);
  do {
   if ($137) {
    $138 = (($mem) + ($8)|0);
    $139 = HEAP32[$138>>2]|0;
    $$sum2324 = $8 | 4;
    $140 = (($mem) + ($$sum2324)|0);
    $141 = HEAP32[$140>>2]|0;
    $142 = $136 << 1;
    $143 = ((102424 + ($142<<2)|0) + 40|0);
    $144 = ($139|0)==($143|0);
    if (!($144)) {
     $145 = HEAP32[((102424 + 16|0))>>2]|0;
     $146 = ($139>>>0)<($145>>>0);
     if ($146) {
      _abort();
      // unreachable;
     }
     $147 = (($139) + 12|0);
     $148 = HEAP32[$147>>2]|0;
     $149 = ($148|0)==($9|0);
     if (!($149)) {
      _abort();
      // unreachable;
     }
    }
    $150 = ($141|0)==($139|0);
    if ($150) {
     $151 = 1 << $136;
     $152 = $151 ^ -1;
     $153 = HEAP32[102424>>2]|0;
     $154 = $153 & $152;
     HEAP32[102424>>2] = $154;
     break;
    }
    $155 = ($141|0)==($143|0);
    if ($155) {
     $$pre67 = (($141) + 8|0);
     $$pre$phi68Z2D = $$pre67;
    } else {
     $156 = HEAP32[((102424 + 16|0))>>2]|0;
     $157 = ($141>>>0)<($156>>>0);
     if ($157) {
      _abort();
      // unreachable;
     }
     $158 = (($141) + 8|0);
     $159 = HEAP32[$158>>2]|0;
     $160 = ($159|0)==($9|0);
     if ($160) {
      $$pre$phi68Z2D = $158;
     } else {
      _abort();
      // unreachable;
     }
    }
    $161 = (($139) + 12|0);
    HEAP32[$161>>2] = $141;
    HEAP32[$$pre$phi68Z2D>>2] = $139;
   } else {
    $$sum5 = (($8) + 16)|0;
    $162 = (($mem) + ($$sum5)|0);
    $163 = HEAP32[$162>>2]|0;
    $$sum67 = $8 | 4;
    $164 = (($mem) + ($$sum67)|0);
    $165 = HEAP32[$164>>2]|0;
    $166 = ($165|0)==($9|0);
    do {
     if ($166) {
      $$sum9 = (($8) + 12)|0;
      $177 = (($mem) + ($$sum9)|0);
      $178 = HEAP32[$177>>2]|0;
      $179 = ($178|0)==(0|0);
      if ($179) {
       $$sum8 = (($8) + 8)|0;
       $180 = (($mem) + ($$sum8)|0);
       $181 = HEAP32[$180>>2]|0;
       $182 = ($181|0)==(0|0);
       if ($182) {
        $R7$1 = 0;
        break;
       } else {
        $R7$0 = $181;$RP9$0 = $180;
       }
      } else {
       $R7$0 = $178;$RP9$0 = $177;
      }
      while(1) {
       $183 = (($R7$0) + 20|0);
       $184 = HEAP32[$183>>2]|0;
       $185 = ($184|0)==(0|0);
       if (!($185)) {
        $R7$0 = $184;$RP9$0 = $183;
        continue;
       }
       $186 = (($R7$0) + 16|0);
       $187 = HEAP32[$186>>2]|0;
       $188 = ($187|0)==(0|0);
       if ($188) {
        break;
       } else {
        $R7$0 = $187;$RP9$0 = $186;
       }
      }
      $189 = HEAP32[((102424 + 16|0))>>2]|0;
      $190 = ($RP9$0>>>0)<($189>>>0);
      if ($190) {
       _abort();
       // unreachable;
      } else {
       HEAP32[$RP9$0>>2] = 0;
       $R7$1 = $R7$0;
       break;
      }
     } else {
      $167 = (($mem) + ($8)|0);
      $168 = HEAP32[$167>>2]|0;
      $169 = HEAP32[((102424 + 16|0))>>2]|0;
      $170 = ($168>>>0)<($169>>>0);
      if ($170) {
       _abort();
       // unreachable;
      }
      $171 = (($168) + 12|0);
      $172 = HEAP32[$171>>2]|0;
      $173 = ($172|0)==($9|0);
      if (!($173)) {
       _abort();
       // unreachable;
      }
      $174 = (($165) + 8|0);
      $175 = HEAP32[$174>>2]|0;
      $176 = ($175|0)==($9|0);
      if ($176) {
       HEAP32[$171>>2] = $165;
       HEAP32[$174>>2] = $168;
       $R7$1 = $165;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $191 = ($163|0)==(0|0);
    if (!($191)) {
     $$sum18 = (($8) + 20)|0;
     $192 = (($mem) + ($$sum18)|0);
     $193 = HEAP32[$192>>2]|0;
     $194 = ((102424 + ($193<<2)|0) + 304|0);
     $195 = HEAP32[$194>>2]|0;
     $196 = ($9|0)==($195|0);
     if ($196) {
      HEAP32[$194>>2] = $R7$1;
      $cond54 = ($R7$1|0)==(0|0);
      if ($cond54) {
       $197 = 1 << $193;
       $198 = $197 ^ -1;
       $199 = HEAP32[((102424 + 4|0))>>2]|0;
       $200 = $199 & $198;
       HEAP32[((102424 + 4|0))>>2] = $200;
       break;
      }
     } else {
      $201 = HEAP32[((102424 + 16|0))>>2]|0;
      $202 = ($163>>>0)<($201>>>0);
      if ($202) {
       _abort();
       // unreachable;
      }
      $203 = (($163) + 16|0);
      $204 = HEAP32[$203>>2]|0;
      $205 = ($204|0)==($9|0);
      if ($205) {
       HEAP32[$203>>2] = $R7$1;
      } else {
       $206 = (($163) + 20|0);
       HEAP32[$206>>2] = $R7$1;
      }
      $207 = ($R7$1|0)==(0|0);
      if ($207) {
       break;
      }
     }
     $208 = HEAP32[((102424 + 16|0))>>2]|0;
     $209 = ($R7$1>>>0)<($208>>>0);
     if ($209) {
      _abort();
      // unreachable;
     }
     $210 = (($R7$1) + 24|0);
     HEAP32[$210>>2] = $163;
     $$sum19 = (($8) + 8)|0;
     $211 = (($mem) + ($$sum19)|0);
     $212 = HEAP32[$211>>2]|0;
     $213 = ($212|0)==(0|0);
     do {
      if (!($213)) {
       $214 = HEAP32[((102424 + 16|0))>>2]|0;
       $215 = ($212>>>0)<($214>>>0);
       if ($215) {
        _abort();
        // unreachable;
       } else {
        $216 = (($R7$1) + 16|0);
        HEAP32[$216>>2] = $212;
        $217 = (($212) + 24|0);
        HEAP32[$217>>2] = $R7$1;
        break;
       }
      }
     } while(0);
     $$sum20 = (($8) + 12)|0;
     $218 = (($mem) + ($$sum20)|0);
     $219 = HEAP32[$218>>2]|0;
     $220 = ($219|0)==(0|0);
     if (!($220)) {
      $221 = HEAP32[((102424 + 16|0))>>2]|0;
      $222 = ($219>>>0)<($221>>>0);
      if ($222) {
       _abort();
       // unreachable;
      } else {
       $223 = (($R7$1) + 20|0);
       HEAP32[$223>>2] = $219;
       $224 = (($219) + 24|0);
       HEAP32[$224>>2] = $R7$1;
       break;
      }
     }
    }
   }
  } while(0);
  $225 = $135 | 1;
  $226 = (($p$0) + 4|0);
  HEAP32[$226>>2] = $225;
  $227 = (($p$0) + ($135)|0);
  HEAP32[$227>>2] = $135;
  $228 = HEAP32[((102424 + 20|0))>>2]|0;
  $229 = ($p$0|0)==($228|0);
  if ($229) {
   HEAP32[((102424 + 8|0))>>2] = $135;
   STACKTOP = sp;return;
  } else {
   $psize$1 = $135;
  }
 } else {
  $230 = $114 & -2;
  HEAP32[$113>>2] = $230;
  $231 = $psize$0 | 1;
  $232 = (($p$0) + 4|0);
  HEAP32[$232>>2] = $231;
  $233 = (($p$0) + ($psize$0)|0);
  HEAP32[$233>>2] = $psize$0;
  $psize$1 = $psize$0;
 }
 $234 = $psize$1 >>> 3;
 $235 = ($psize$1>>>0)<(256);
 if ($235) {
  $236 = $234 << 1;
  $237 = ((102424 + ($236<<2)|0) + 40|0);
  $238 = HEAP32[102424>>2]|0;
  $239 = 1 << $234;
  $240 = $238 & $239;
  $241 = ($240|0)==(0);
  if ($241) {
   $242 = $238 | $239;
   HEAP32[102424>>2] = $242;
   $$sum16$pre = (($236) + 2)|0;
   $$pre = ((102424 + ($$sum16$pre<<2)|0) + 40|0);
   $$pre$phiZ2D = $$pre;$F16$0 = $237;
  } else {
   $$sum17 = (($236) + 2)|0;
   $243 = ((102424 + ($$sum17<<2)|0) + 40|0);
   $244 = HEAP32[$243>>2]|0;
   $245 = HEAP32[((102424 + 16|0))>>2]|0;
   $246 = ($244>>>0)<($245>>>0);
   if ($246) {
    _abort();
    // unreachable;
   } else {
    $$pre$phiZ2D = $243;$F16$0 = $244;
   }
  }
  HEAP32[$$pre$phiZ2D>>2] = $p$0;
  $247 = (($F16$0) + 12|0);
  HEAP32[$247>>2] = $p$0;
  $248 = (($p$0) + 8|0);
  HEAP32[$248>>2] = $F16$0;
  $249 = (($p$0) + 12|0);
  HEAP32[$249>>2] = $237;
  STACKTOP = sp;return;
 }
 $250 = $psize$1 >>> 8;
 $251 = ($250|0)==(0);
 if ($251) {
  $I18$0 = 0;
 } else {
  $252 = ($psize$1>>>0)>(16777215);
  if ($252) {
   $I18$0 = 31;
  } else {
   $253 = (($250) + 1048320)|0;
   $254 = $253 >>> 16;
   $255 = $254 & 8;
   $256 = $250 << $255;
   $257 = (($256) + 520192)|0;
   $258 = $257 >>> 16;
   $259 = $258 & 4;
   $260 = $259 | $255;
   $261 = $256 << $259;
   $262 = (($261) + 245760)|0;
   $263 = $262 >>> 16;
   $264 = $263 & 2;
   $265 = $260 | $264;
   $266 = (14 - ($265))|0;
   $267 = $261 << $264;
   $268 = $267 >>> 15;
   $269 = (($266) + ($268))|0;
   $270 = $269 << 1;
   $271 = (($269) + 7)|0;
   $272 = $psize$1 >>> $271;
   $273 = $272 & 1;
   $274 = $273 | $270;
   $I18$0 = $274;
  }
 }
 $275 = ((102424 + ($I18$0<<2)|0) + 304|0);
 $276 = (($p$0) + 28|0);
 $I18$0$c = $I18$0;
 HEAP32[$276>>2] = $I18$0$c;
 $277 = (($p$0) + 20|0);
 HEAP32[$277>>2] = 0;
 $278 = (($p$0) + 16|0);
 HEAP32[$278>>2] = 0;
 $279 = HEAP32[((102424 + 4|0))>>2]|0;
 $280 = 1 << $I18$0;
 $281 = $279 & $280;
 $282 = ($281|0)==(0);
 L199: do {
  if ($282) {
   $283 = $279 | $280;
   HEAP32[((102424 + 4|0))>>2] = $283;
   HEAP32[$275>>2] = $p$0;
   $284 = (($p$0) + 24|0);
   HEAP32[$284>>2] = $275;
   $285 = (($p$0) + 12|0);
   HEAP32[$285>>2] = $p$0;
   $286 = (($p$0) + 8|0);
   HEAP32[$286>>2] = $p$0;
  } else {
   $287 = HEAP32[$275>>2]|0;
   $288 = ($I18$0|0)==(31);
   if ($288) {
    $296 = 0;
   } else {
    $289 = $I18$0 >>> 1;
    $290 = (25 - ($289))|0;
    $296 = $290;
   }
   $291 = (($287) + 4|0);
   $292 = HEAP32[$291>>2]|0;
   $293 = $292 & -8;
   $294 = ($293|0)==($psize$1|0);
   L205: do {
    if ($294) {
     $T$0$lcssa = $287;
    } else {
     $295 = $psize$1 << $296;
     $K19$057 = $295;$T$056 = $287;
     while(1) {
      $303 = $K19$057 >>> 31;
      $304 = ((($T$056) + ($303<<2)|0) + 16|0);
      $299 = HEAP32[$304>>2]|0;
      $305 = ($299|0)==(0|0);
      if ($305) {
       break;
      }
      $297 = $K19$057 << 1;
      $298 = (($299) + 4|0);
      $300 = HEAP32[$298>>2]|0;
      $301 = $300 & -8;
      $302 = ($301|0)==($psize$1|0);
      if ($302) {
       $T$0$lcssa = $299;
       break L205;
      } else {
       $K19$057 = $297;$T$056 = $299;
      }
     }
     $306 = HEAP32[((102424 + 16|0))>>2]|0;
     $307 = ($304>>>0)<($306>>>0);
     if ($307) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$304>>2] = $p$0;
      $308 = (($p$0) + 24|0);
      HEAP32[$308>>2] = $T$056;
      $309 = (($p$0) + 12|0);
      HEAP32[$309>>2] = $p$0;
      $310 = (($p$0) + 8|0);
      HEAP32[$310>>2] = $p$0;
      break L199;
     }
    }
   } while(0);
   $311 = (($T$0$lcssa) + 8|0);
   $312 = HEAP32[$311>>2]|0;
   $313 = HEAP32[((102424 + 16|0))>>2]|0;
   $314 = ($T$0$lcssa>>>0)<($313>>>0);
   if ($314) {
    _abort();
    // unreachable;
   }
   $315 = ($312>>>0)<($313>>>0);
   if ($315) {
    _abort();
    // unreachable;
   } else {
    $316 = (($312) + 12|0);
    HEAP32[$316>>2] = $p$0;
    HEAP32[$311>>2] = $p$0;
    $317 = (($p$0) + 8|0);
    HEAP32[$317>>2] = $312;
    $318 = (($p$0) + 12|0);
    HEAP32[$318>>2] = $T$0$lcssa;
    $319 = (($p$0) + 24|0);
    HEAP32[$319>>2] = 0;
    break;
   }
  }
 } while(0);
 $320 = HEAP32[((102424 + 32|0))>>2]|0;
 $321 = (($320) + -1)|0;
 HEAP32[((102424 + 32|0))>>2] = $321;
 $322 = ($321|0)==(0);
 if ($322) {
  $sp$0$in$i = ((102424 + 456|0));
 } else {
  STACKTOP = sp;return;
 }
 while(1) {
  $sp$0$i = HEAP32[$sp$0$in$i>>2]|0;
  $323 = ($sp$0$i|0)==(0|0);
  $324 = (($sp$0$i) + 8|0);
  if ($323) {
   break;
  } else {
   $sp$0$in$i = $324;
  }
 }
 HEAP32[((102424 + 32|0))>>2] = -1;
 STACKTOP = sp;return;
}
function _calloc($n_elements,$elem_size) {
 $n_elements = $n_elements|0;
 $elem_size = $elem_size|0;
 var $$ = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $req$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($n_elements|0)==(0);
 if ($0) {
  $req$0 = 0;
 } else {
  $1 = Math_imul($elem_size, $n_elements)|0;
  $2 = $elem_size | $n_elements;
  $3 = ($2>>>0)>(65535);
  if ($3) {
   $4 = (($1>>>0) / ($n_elements>>>0))&-1;
   $5 = ($4|0)==($elem_size|0);
   $$ = $5 ? $1 : -1;
   $req$0 = $$;
  } else {
   $req$0 = $1;
  }
 }
 $6 = (_malloc($req$0)|0);
 $7 = ($6|0)==(0|0);
 if ($7) {
  STACKTOP = sp;return ($6|0);
 }
 $8 = (($6) + -4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $9 & 3;
 $11 = ($10|0)==(0);
 if ($11) {
  STACKTOP = sp;return ($6|0);
 }
 _memset(($6|0),0,($req$0|0))|0;
 STACKTOP = sp;return ($6|0);
}
function _isupper($c) {
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($c) + -65)|0;
 $1 = ($0>>>0)<(26);
 $2 = $1&1;
 STACKTOP = sp;return ($2|0);
}
function _tolower($c) {
 $c = $c|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_isupper($c)|0);
 $1 = ($0|0)==(0);
 $2 = $c | 32;
 $$0 = $1 ? $c : $2;
 STACKTOP = sp;return ($$0|0);
}
function _frexp($x,$e) {
 $x = +$x;
 $e = $e|0;
 var $$0 = 0.0, $$01 = 0.0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0, $9 = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $x;$0 = HEAP32[tempDoublePtr>>2]|0;
 $1 = HEAP32[tempDoublePtr+4>>2]|0;
 $2 = (_bitshift64Lshr(($0|0),($1|0),52)|0);
 $3 = tempRet0;
 $4 = $2 & 2047;
 if ((($4|0) == 2047)) {
  $$0 = $x;
  STACKTOP = sp;return (+$$0);
 } else if ((($4|0) == 0)) {
  $5 = $x != 0.0;
  if ($5) {
   $6 = $x * 18446744073709551616.0;
   $7 = (+_frexp($6,$e));
   $8 = HEAP32[$e>>2]|0;
   $9 = (($8) + -64)|0;
   $$01 = $7;$storemerge = $9;
  } else {
   $$01 = $x;$storemerge = 0;
  }
  HEAP32[$e>>2] = $storemerge;
  $$0 = $$01;
  STACKTOP = sp;return (+$$0);
 } else {
  $10 = (($4) + -1022)|0;
  HEAP32[$e>>2] = $10;
  $11 = $1 & -2146435073;
  $12 = $11 | 1071644672;
  HEAP32[tempDoublePtr>>2] = $0;HEAP32[tempDoublePtr+4>>2] = $12;$13 = +HEAPF64[tempDoublePtr>>3];
  $$0 = $13;
  STACKTOP = sp;return (+$$0);
 }
 return +0;
}
function _frexpl($x,$e) {
 $x = +$x;
 $e = $e|0;
 var $0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+_frexp($x,$e));
 STACKTOP = sp;return (+$0);
}
function _wctomb($s,$wc) {
 $s = $s|0;
 $wc = $wc|0;
 var $$0 = 0, $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($s|0)==(0|0);
 if ($0) {
  $$0 = 0;
 } else {
  $1 = (_wcrtomb($s,$wc,0)|0);
  $$0 = $1;
 }
 STACKTOP = sp;return ($$0|0);
}
function _wcrtomb($s,$wc,$st) {
 $s = $s|0;
 $wc = $wc|0;
 $st = $st|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($s|0)==(0|0);
 if ($0) {
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $1 = ($wc>>>0)<(128);
 if ($1) {
  $2 = $wc&255;
  HEAP8[$s>>0] = $2;
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $3 = ($wc>>>0)<(2048);
 if ($3) {
  $4 = $wc >>> 6;
  $5 = $4 | 192;
  $6 = $5&255;
  $7 = (($s) + 1|0);
  HEAP8[$s>>0] = $6;
  $8 = $wc & 63;
  $9 = $8 | 128;
  $10 = $9&255;
  HEAP8[$7>>0] = $10;
  $$0 = 2;
  STACKTOP = sp;return ($$0|0);
 }
 $11 = ($wc>>>0)<(55296);
 $12 = (($wc) + -57344)|0;
 $13 = ($12>>>0)<(8192);
 $or$cond = $11 | $13;
 if ($or$cond) {
  $14 = $wc >>> 12;
  $15 = $14 | 224;
  $16 = $15&255;
  $17 = (($s) + 1|0);
  HEAP8[$s>>0] = $16;
  $18 = $wc >>> 6;
  $19 = $18 & 63;
  $20 = $19 | 128;
  $21 = $20&255;
  $22 = (($s) + 2|0);
  HEAP8[$17>>0] = $21;
  $23 = $wc & 63;
  $24 = $23 | 128;
  $25 = $24&255;
  HEAP8[$22>>0] = $25;
  $$0 = 3;
  STACKTOP = sp;return ($$0|0);
 }
 $26 = (($wc) + -65536)|0;
 $27 = ($26>>>0)<(1048576);
 if ($27) {
  $28 = $wc >>> 18;
  $29 = $28 | 240;
  $30 = $29&255;
  $31 = (($s) + 1|0);
  HEAP8[$s>>0] = $30;
  $32 = $wc >>> 12;
  $33 = $32 & 63;
  $34 = $33 | 128;
  $35 = $34&255;
  $36 = (($s) + 2|0);
  HEAP8[$31>>0] = $35;
  $37 = $wc >>> 6;
  $38 = $37 & 63;
  $39 = $38 | 128;
  $40 = $39&255;
  $41 = (($s) + 3|0);
  HEAP8[$36>>0] = $40;
  $42 = $wc & 63;
  $43 = $42 | 128;
  $44 = $43&255;
  HEAP8[$41>>0] = $44;
  $$0 = 4;
  STACKTOP = sp;return ($$0|0);
 } else {
  $45 = (___errno_location()|0);
  HEAP32[$45>>2] = 84;
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function ___towrite($f) {
 $f = $f|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($f) + 74|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = $1 << 24 >> 24;
 $3 = (($2) + 255)|0;
 $4 = $3 | $2;
 $5 = $4&255;
 HEAP8[$0>>0] = $5;
 $6 = HEAP32[$f>>2]|0;
 $7 = $6 & 8;
 $8 = ($7|0)==(0);
 if ($8) {
  $10 = (($f) + 8|0);
  HEAP32[$10>>2] = 0;
  $11 = (($f) + 4|0);
  HEAP32[$11>>2] = 0;
  $12 = (($f) + 44|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = (($f) + 28|0);
  HEAP32[$14>>2] = $13;
  $15 = (($f) + 20|0);
  HEAP32[$15>>2] = $13;
  $16 = (($f) + 48|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = (($13) + ($17)|0);
  $19 = (($f) + 16|0);
  HEAP32[$19>>2] = $18;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 } else {
  $9 = $6 | 32;
  HEAP32[$f>>2] = $9;
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function ___fwritex($s,$l,$f) {
 $s = $s|0;
 $l = $l|0;
 $f = $f|0;
 var $$0 = 0, $$01 = 0, $$02 = 0, $$pre = 0, $$pre6 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$0 = 0, $i$1 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($f) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 do {
  if ($2) {
   $3 = (___towrite($f)|0);
   $4 = ($3|0)==(0);
   if ($4) {
    $$pre6 = HEAP32[$0>>2]|0;
    $7 = $$pre6;
    break;
   } else {
    $$0 = 0;
    STACKTOP = sp;return ($$0|0);
   }
  } else {
   $7 = $1;
  }
 } while(0);
 $5 = (($f) + 20|0);
 $6 = HEAP32[$5>>2]|0;
 $8 = $7;
 $9 = $6;
 $10 = (($8) - ($9))|0;
 $11 = ($10>>>0)<($l>>>0);
 if ($11) {
  $12 = (($f) + 36|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = (FUNCTION_TABLE_iiii[$13 & 3]($f,$s,$l)|0);
  $$0 = $14;
  STACKTOP = sp;return ($$0|0);
 }
 $15 = (($f) + 75|0);
 $16 = HEAP8[$15>>0]|0;
 $17 = ($16<<24>>24)>(-1);
 L11: do {
  if ($17) {
   $i$0 = $l;
   while(1) {
    $18 = ($i$0|0)==(0);
    if ($18) {
     $$01 = $l;$$02 = $s;$29 = $6;$i$1 = 0;
     break L11;
    }
    $19 = (($i$0) + -1)|0;
    $20 = (($s) + ($19)|0);
    $21 = HEAP8[$20>>0]|0;
    $22 = ($21<<24>>24)==(10);
    if ($22) {
     break;
    } else {
     $i$0 = $19;
    }
   }
   $23 = (($f) + 36|0);
   $24 = HEAP32[$23>>2]|0;
   $25 = (FUNCTION_TABLE_iiii[$24 & 3]($f,$s,$i$0)|0);
   $26 = ($25>>>0)<($i$0>>>0);
   if ($26) {
    $$0 = $i$0;
    STACKTOP = sp;return ($$0|0);
   } else {
    $27 = (($s) + ($i$0)|0);
    $28 = (($l) - ($i$0))|0;
    $$pre = HEAP32[$5>>2]|0;
    $$01 = $28;$$02 = $27;$29 = $$pre;$i$1 = $i$0;
    break;
   }
  } else {
   $$01 = $l;$$02 = $s;$29 = $6;$i$1 = 0;
  }
 } while(0);
 _memcpy(($29|0),($$02|0),($$01|0))|0;
 $30 = HEAP32[$5>>2]|0;
 $31 = (($30) + ($$01)|0);
 HEAP32[$5>>2] = $31;
 $32 = (($i$1) + ($$01))|0;
 $$0 = $32;
 STACKTOP = sp;return ($$0|0);
}
function _sprintf($s,$fmt,$varargs) {
 $s = $s|0;
 $fmt = $fmt|0;
 $varargs = $varargs|0;
 var $0 = 0, $ap = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $ap = sp;
 HEAP32[$ap>>2] = $varargs;
 $0 = (_vsprintf($s,$fmt,$ap)|0);
 STACKTOP = sp;return ($0|0);
}
function _MUSL_vfprintf($f,$fmt,$ap) {
 $f = $f|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 var $$ = 0, $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $ap2 = 0, $internal_buf = 0, $nl_arg = 0, $nl_type = 0, $ret$1 = 0, $vacopy_currentptr = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0;
 $ap2 = sp + 120|0;
 $nl_type = sp + 80|0;
 $nl_arg = sp;
 $internal_buf = sp + 136|0;
 dest=$nl_type+0|0; stop=dest+40|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $vacopy_currentptr = HEAP32[$ap>>2]|0;
 HEAP32[$ap2>>2] = $vacopy_currentptr;
 $0 = (_printf_core(0,$fmt,$ap2,$nl_arg,$nl_type)|0);
 $1 = ($0|0)<(0);
 if ($1) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 $2 = (($f) + 48|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0);
 if ($4) {
  $6 = (($f) + 44|0);
  $7 = HEAP32[$6>>2]|0;
  HEAP32[$6>>2] = $internal_buf;
  $8 = (($f) + 28|0);
  HEAP32[$8>>2] = $internal_buf;
  $9 = (($f) + 20|0);
  HEAP32[$9>>2] = $internal_buf;
  HEAP32[$2>>2] = 80;
  $10 = (($internal_buf) + 80|0);
  $11 = (($f) + 16|0);
  HEAP32[$11>>2] = $10;
  $12 = (_printf_core($f,$fmt,$ap2,$nl_arg,$nl_type)|0);
  $13 = ($7|0)==(0|0);
  if ($13) {
   $ret$1 = $12;
  } else {
   $14 = (($f) + 36|0);
   $15 = HEAP32[$14>>2]|0;
   (FUNCTION_TABLE_iiii[$15 & 3]($f,0,0)|0);
   $16 = HEAP32[$9>>2]|0;
   $17 = ($16|0)==(0|0);
   $$ = $17 ? -1 : $12;
   HEAP32[$6>>2] = $7;
   HEAP32[$2>>2] = 0;
   HEAP32[$11>>2] = 0;
   HEAP32[$8>>2] = 0;
   HEAP32[$9>>2] = 0;
   $ret$1 = $$;
  }
 } else {
  $5 = (_printf_core($f,$fmt,$ap2,$nl_arg,$nl_type)|0);
  $ret$1 = $5;
 }
 $$0 = $ret$1;
 STACKTOP = sp;return ($$0|0);
}
function _printf_core($f,$fmt,$ap,$nl_arg,$nl_type) {
 $f = $f|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 $nl_arg = $nl_arg|0;
 $nl_type = $nl_type|0;
 var $$ = 0, $$$5$i = 0, $$$i = 0, $$$p$i = 0, $$0 = 0, $$0$lcssa$i = 0, $$0$lcssa$i$i = 0, $$0$lcssa$i103$i = 0, $$0$lcssa$i127$i = 0, $$0$lcssa$i142$i = 0, $$0$lcssa$i37 = 0, $$0$lcssa$i38$i = 0, $$0$lcssa$i43 = 0, $$0$lcssa$i45 = 0, $$0$lcssa$i45$i = 0, $$0$lcssa$i48$i = 0, $$0$lcssa$i52 = 0, $$0$lcssa$i55$i = 0, $$0$lcssa$i59 = 0, $$0$lcssa$i62$i = 0;
 var $$0$lcssa$i66 = 0, $$0$lcssa$i68$i = 0, $$0$lcssa$i75$i = 0, $$0$lcssa$i76 = 0, $$0$lcssa$i84$i = 0, $$0$lcssa$i96$i = 0, $$01$i = 0, $$01$i$i = 0, $$01$i101$i = 0, $$01$i125$i = 0, $$01$i140$i = 0, $$01$i35 = 0, $$01$i36$i = 0, $$01$i43$i = 0, $$01$i50 = 0, $$01$i53$i = 0, $$01$i57 = 0, $$01$i60$i = 0, $$01$i64 = 0, $$01$i66$i = 0;
 var $$01$i73$i = 0, $$01$i74 = 0, $$01$i94$i = 0, $$01$lcssa$off0$i = 0, $$01$lcssa$off0$i$i = 0, $$01$lcssa$off0$i85$i = 0, $$012$i = 0, $$013$i = 0, $$03$i40 = 0, $$05$i = 0, $$05$i$i = 0, $$05$i79$i = 0, $$07$i = 0.0, $$1$i = 0.0, $$1$lcssa$i$i = 0, $$1$lcssa$i112$i = 0, $$114$i = 0, $$12$i = 0, $$12$i$i = 0, $$12$i110$i = 0;
 var $$12$i119$i = 0, $$12$i134$i = 0, $$12$i87$i = 0, $$13 = 0, $$14 = 0, $$15 = 0, $$17 = 0, $$2$i = 0.0, $$2$us$i = 0.0, $$2$us$us$i = 0.0, $$2$us159$i = 0.0, $$20$i = 0, $$20$us$i = 0, $$21$i = 0, $$210$$23$i = 0, $$210$$25$i = 0, $$210$i = 0, $$22$i = 0.0, $$23$i = 0, $$25$i = 0;
 var $$3$i = 0.0, $$31$i = 0, $$311$i = 0, $$4$i = 0.0, $$412$lcssa$i = 0, $$412175$i = 0, $$5193$i = 0, $$a$3$i = 0, $$a$3$us$i = 0, $$a$3$us322$i = 0, $$a$3$us323$i = 0, $$a$3324$i = 0, $$a$3325$i = 0, $$fl$4 = 0, $$lcssa300$i = 0, $$lcssa92 = 0, $$mask$i = 0, $$mask$i30 = 0, $$mask1$i = 0, $$mask1$i29 = 0;
 var $$neg151$i = 0, $$neg152$i = 0, $$not$i = 0, $$p$5 = 0, $$p$i = 0, $$pn$i = 0, $$pr$i = 0, $$pr146$i = 0, $$pre = 0, $$pre$i = 0, $$pre290 = 0, $$pre292 = 0, $$pre319$i = 0, $$sum$i = 0, $$sum15$i = 0, $$sum16$i = 0, $$z$3$i = 0, $$z$4$us$i = 0, $0 = 0, $1 = 0;
 var $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0;
 var $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0;
 var $1035 = 0, $1036 = 0.0, $1037 = 0.0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1045$phi = 0, $1046 = 0, $1046$phi = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0;
 var $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
 var $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0;
 var $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0;
 var $19 = 0, $190 = 0.0, $191 = 0, $192 = 0, $193 = 0, $194 = 0.0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0;
 var $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0;
 var $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0;
 var $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0;
 var $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0;
 var $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0;
 var $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0;
 var $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0;
 var $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0;
 var $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0.0;
 var $37 = 0, $370 = 0, $371 = 0.0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0;
 var $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0;
 var $405 = 0, $406 = 0, $407 = 0.0, $408 = 0.0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0.0;
 var $423 = 0, $424 = 0, $425 = 0, $426 = 0.0, $427 = 0.0, $428 = 0.0, $429 = 0.0, $43 = 0, $430 = 0.0, $431 = 0.0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0;
 var $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0;
 var $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0;
 var $478 = 0, $479 = 0, $48 = 0, $480 = 0.0, $481 = 0.0, $482 = 0.0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0.0;
 var $496 = 0.0, $497 = 0.0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0.0, $511 = 0.0, $512 = 0.0;
 var $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0.0, $526 = 0.0, $527 = 0.0, $528 = 0, $529 = 0, $53 = 0, $530 = 0;
 var $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0;
 var $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0;
 var $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0.0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0.0;
 var $586 = 0.0, $587 = 0.0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0;
 var $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0;
 var $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0;
 var $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0;
 var $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0;
 var $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0;
 var $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0;
 var $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0.0, $726 = 0.0, $727 = 0, $728 = 0.0, $729 = 0;
 var $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0;
 var $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0;
 var $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0;
 var $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0;
 var $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0;
 var $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0;
 var $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0;
 var $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0;
 var $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0;
 var $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0;
 var $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0;
 var $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0;
 var $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0;
 var $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0;
 var $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $a$0 = 0;
 var $a$1 = 0, $a$1$lcssa$i = 0, $a$1263$i = 0, $a$2 = 0, $a$2$ph$i = 0, $a$3$lcssa$i = 0, $a$3249$i = 0, $a$3249$us$i = 0, $a$5$lcssa$i = 0, $a$5223$i = 0, $a$6$i = 0, $a$7$i = 0, $a$8$ph$i = 0, $arglist_current = 0, $arglist_current11 = 0, $arglist_current14 = 0, $arglist_current17 = 0, $arglist_current2 = 0, $arglist_current20 = 0, $arglist_current23 = 0;
 var $arglist_current26 = 0, $arglist_current29 = 0, $arglist_current32 = 0, $arglist_current35 = 0, $arglist_current38 = 0, $arglist_current41 = 0, $arglist_current44 = 0, $arglist_current47 = 0, $arglist_current5 = 0, $arglist_current50 = 0, $arglist_current53 = 0, $arglist_current56 = 0, $arglist_current59 = 0, $arglist_current62 = 0, $arglist_current8 = 0, $arglist_next = 0, $arglist_next12 = 0, $arglist_next15 = 0, $arglist_next18 = 0, $arglist_next21 = 0;
 var $arglist_next24 = 0, $arglist_next27 = 0, $arglist_next3 = 0, $arglist_next30 = 0, $arglist_next33 = 0, $arglist_next36 = 0, $arglist_next39 = 0, $arglist_next42 = 0, $arglist_next45 = 0, $arglist_next48 = 0, $arglist_next51 = 0, $arglist_next54 = 0, $arglist_next57 = 0, $arglist_next6 = 0, $arglist_next60 = 0, $arglist_next63 = 0, $arglist_next9 = 0, $argpos$0 = 0, $big$i = 0, $brmerge$i = 0;
 var $buf = 0, $buf$i = 0, $carry$0255$i = 0, $carry3$0243$i = 0, $carry3$0243$us$i = 0, $cnt$0 = 0, $cnt$1 = 0, $d$0$i = 0, $d$0254$i = 0, $d$0256$i = 0, $d$1242$i = 0, $d$1242$us$i = 0, $d$2$lcssa$i = 0, $d$2222$i = 0, $d$3$i = 0, $d$4183$i = 0, $d$5174$i = 0, $d$6192$i = 0, $e$0238$i = 0, $e$1$i = 0;
 var $e$2218$i = 0, $e$3$i = 0, $e$4$ph$i = 0, $e2$i = 0, $ebuf0$i = 0, $estr$0$i = 0, $estr$1$lcssa$i = 0, $estr$1$ph$i = 0, $estr$1200$i = 0, $estr$2$i = 0, $exitcond$i = 0, $fl$0100 = 0, $fl$0104 = 0, $fl$1 = 0, $fl$1$ = 0, $fl$3 = 0, $fl$4 = 0, $fl$6 = 0, $i$0$lcssa = 0, $i$0166 = 0;
 var $i$0168 = 0, $i$0237$i = 0, $i$03$i = 0, $i$03$i22 = 0, $i$1$lcssa$i = 0, $i$1174 = 0, $i$1230$i = 0, $i$2217$i = 0, $i$289 = 0, $i$3209$i = 0, $i$388 = 0, $isdigit = 0, $isdigit$i = 0, $isdigit$i24 = 0, $isdigit11 = 0, $isdigit2$i = 0, $isdigit2$i21 = 0, $isdigit9 = 0, $isdigittmp = 0, $isdigittmp$i = 0;
 var $isdigittmp$i23 = 0, $isdigittmp1$i = 0, $isdigittmp1$i20 = 0, $isdigittmp10 = 0, $isdigittmp8 = 0, $j$0$i = 0, $j$0229$i = 0, $j$0231$i = 0, $j$1210$i = 0, $j$2$i = 0, $l$0 = 0, $l$0$i = 0, $l$1$i = 0, $l$1$lcssa = 0, $l$1167 = 0, $l10n$0 = 0, $l10n$0$phi = 0, $l10n$1 = 0, $l10n$2 = 0, $l10n$3 = 0;
 var $mb = 0, $or$cond = 0, $or$cond$i = 0, $or$cond$i$i = 0, $or$cond$i100$i = 0, $or$cond$i35$i = 0, $or$cond$i42$i = 0, $or$cond$i49 = 0, $or$cond$i52$i = 0, $or$cond$i56 = 0, $or$cond$i59$i = 0, $or$cond$i63 = 0, $or$cond$i71 = 0, $or$cond$i72$i = 0, $or$cond$i73 = 0, $or$cond$i93$i = 0, $or$cond28$i = 0, $or$cond28173$i = 0, $or$cond29$i = 0, $or$cond4$i = 0;
 var $p$0 = 0, $p$1 = 0, $p$2 = 0, $p$2$ = 0, $p$4296 = 0, $p$5 = 0, $pad$i = 0, $pl$0 = 0, $pl$0$i = 0, $pl$1 = 0, $pl$1$i = 0, $pl$2 = 0, $prefix$0 = 0, $prefix$0$$i = 0, $prefix$0$i = 0, $prefix$1 = 0, $prefix$2 = 0, $r$0$a$8$i = 0, $re$0$i = 0, $re$1165$i = 0;
 var $round$0164$i = 0.0, $round6$1$i = 0.0, $s$0$i = 0, $s$0$us$i = 0, $s$0$us$us$i = 0, $s$0$us158$i = 0, $s$1$i = 0, $s$1$lcssa$i = 0, $s$1$us$i = 0, $s$1$us$us$i = 0, $s$1$us160$i = 0, $s1$0$i = 0, $s7$0180$i = 0, $s7$1$i = 0, $s8$0$lcssa$i = 0, $s8$0169$i = 0, $s9$0$i = 0, $s9$1188$i = 0, $s9$2$i = 0, $sext = 0;
 var $sext84 = 0, $small$0$i = 0.0, $small$1$i = 0.0, $st$0 = 0, $storemerge = 0, $storemerge12 = 0, $storemerge7103 = 0, $storemerge798 = 0, $t$0 = 0, $t$1 = 0, $w$$i = 0, $w$0 = 0, $w$1 = 0, $w$18$i = 0, $w$2 = 0, $w$30$i = 0, $wc = 0, $ws$0169 = 0, $ws$1175 = 0, $y$03$i = 0;
 var $y$03$i$i = 0, $y$03$i109$i = 0, $y$03$i118$i = 0, $y$03$i133$i = 0, $y$03$i86$i = 0, $z$0$i = 0, $z$0$lcssa = 0, $z$093 = 0, $z$1$lcssa$i = 0, $z$1262$i = 0, $z$2 = 0, $z$2$i = 0, $z$3$lcssa$i = 0, $z$3248$i = 0, $z$3248$us$i = 0, $z$4$i = 0, $z$4$us$i = 0, $z$5$i = 0, $z$6$$i = 0, $z$6$i = 0;
 var $z$6$ph$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 864|0;
 $big$i = sp + 16|0;
 $e2$i = sp + 8|0;
 $buf$i = sp + 836|0;
 $0 = $buf$i;
 $ebuf0$i = sp + 824|0;
 $pad$i = sp + 568|0;
 $buf = sp + 528|0;
 $wc = sp;
 $mb = sp + 520|0;
 $1 = ($f|0)!=(0|0);
 $2 = (($buf) + 40|0);
 $3 = $2;
 $4 = (($buf) + 39|0);
 $5 = (($wc) + 4|0);
 $6 = (($ebuf0$i) + 12|0);
 $7 = (($ebuf0$i) + 11|0);
 $8 = $6;
 $9 = (($8) - ($0))|0;
 $10 = (-2 - ($0))|0;
 $11 = (($8) + 2)|0;
 $12 = (($big$i) + 288|0);
 $13 = (($buf$i) + 9|0);
 $14 = $13;
 $15 = (($buf$i) + 8|0);
 $1045 = 0;$1046 = 0;$22 = $fmt;$cnt$0 = 0;$l$0 = 0;$l10n$0 = 0;
 L1: while(1) {
  $16 = ($cnt$0|0)>(-1);
  do {
   if ($16) {
    $17 = (2147483647 - ($cnt$0))|0;
    $18 = ($l$0|0)>($17|0);
    if ($18) {
     $19 = (___errno_location()|0);
     HEAP32[$19>>2] = 75;
     $cnt$1 = -1;
     break;
    } else {
     $20 = (($l$0) + ($cnt$0))|0;
     $cnt$1 = $20;
     break;
    }
   } else {
    $cnt$1 = $cnt$0;
   }
  } while(0);
  $21 = HEAP8[$22>>0]|0;
  $23 = ($21<<24>>24)==(0);
  if ($23) {
   label = 344;
   break;
  } else {
   $1047 = $21;$25 = $22;
  }
  while(1) {
   if ((($1047<<24>>24) == 37)) {
    $27 = $25;$z$093 = $25;
    label = 9;
    break;
   } else if ((($1047<<24>>24) == 0)) {
    $$lcssa92 = $25;$z$0$lcssa = $25;
    break;
   }
   $24 = (($25) + 1|0);
   $$pre = HEAP8[$24>>0]|0;
   $1047 = $$pre;$25 = $24;
  }
  L12: do {
   if ((label|0) == 9) {
    while(1) {
     label = 0;
     $26 = (($27) + 1|0);
     $28 = HEAP8[$26>>0]|0;
     $29 = ($28<<24>>24)==(37);
     if (!($29)) {
      $$lcssa92 = $27;$z$0$lcssa = $z$093;
      break L12;
     }
     $30 = (($z$093) + 1|0);
     $31 = (($27) + 2|0);
     $32 = HEAP8[$31>>0]|0;
     $33 = ($32<<24>>24)==(37);
     if ($33) {
      $27 = $31;$z$093 = $30;
      label = 9;
     } else {
      $$lcssa92 = $31;$z$0$lcssa = $30;
      break;
     }
    }
   }
  } while(0);
  $34 = $z$0$lcssa;
  $35 = $22;
  $36 = (($34) - ($35))|0;
  if ($1) {
   (___fwritex($22,$36,$f)|0);
  }
  $37 = ($z$0$lcssa|0)==($22|0);
  if (!($37)) {
   $l10n$0$phi = $l10n$0;$1046$phi = $1046;$1045$phi = $1045;$22 = $$lcssa92;$cnt$0 = $cnt$1;$l$0 = $36;$l10n$0 = $l10n$0$phi;$1046 = $1046$phi;$1045 = $1045$phi;
   continue;
  }
  $38 = (($$lcssa92) + 1|0);
  $39 = HEAP8[$38>>0]|0;
  $40 = $39 << 24 >> 24;
  $isdigittmp = (($40) + -48)|0;
  $isdigit = ($isdigittmp>>>0)<(10);
  if ($isdigit) {
   $41 = (($$lcssa92) + 2|0);
   $42 = HEAP8[$41>>0]|0;
   $43 = ($42<<24>>24)==(36);
   if ($43) {
    $44 = (($$lcssa92) + 3|0);
    $$pre290 = HEAP8[$44>>0]|0;
    $46 = $$pre290;$argpos$0 = $isdigittmp;$l10n$1 = 1;$storemerge = $44;
   } else {
    $46 = $39;$argpos$0 = -1;$l10n$1 = $l10n$0;$storemerge = $38;
   }
  } else {
   $46 = $39;$argpos$0 = -1;$l10n$1 = $l10n$0;$storemerge = $38;
  }
  $45 = $46 << 24 >> 24;
  $47 = (($45) + -32)|0;
  $48 = ($47>>>0)<(32);
  L25: do {
   if ($48) {
    $50 = $45;$55 = $46;$fl$0104 = 0;$storemerge7103 = $storemerge;
    while(1) {
     $49 = (($50) + -32)|0;
     $51 = 1 << $49;
     $52 = $51 & 75913;
     $53 = ($52|0)==(0);
     if ($53) {
      $64 = $55;$fl$0100 = $fl$0104;$storemerge798 = $storemerge7103;
      break L25;
     }
     $54 = $55 << 24 >> 24;
     $56 = (($54) + -32)|0;
     $57 = 1 << $56;
     $58 = $57 | $fl$0104;
     $59 = (($storemerge7103) + 1|0);
     $60 = HEAP8[$59>>0]|0;
     $61 = $60 << 24 >> 24;
     $62 = (($61) + -32)|0;
     $63 = ($62>>>0)<(32);
     if ($63) {
      $50 = $61;$55 = $60;$fl$0104 = $58;$storemerge7103 = $59;
     } else {
      $64 = $60;$fl$0100 = $58;$storemerge798 = $59;
      break;
     }
    }
   } else {
    $64 = $46;$fl$0100 = 0;$storemerge798 = $storemerge;
   }
  } while(0);
  $65 = ($64<<24>>24)==(42);
  do {
   if ($65) {
    $66 = (($storemerge798) + 1|0);
    $67 = HEAP8[$66>>0]|0;
    $68 = $67 << 24 >> 24;
    $isdigittmp10 = (($68) + -48)|0;
    $isdigit11 = ($isdigittmp10>>>0)<(10);
    if ($isdigit11) {
     $69 = (($storemerge798) + 2|0);
     $70 = HEAP8[$69>>0]|0;
     $71 = ($70<<24>>24)==(36);
     if ($71) {
      $72 = (($nl_type) + ($isdigittmp10<<2)|0);
      HEAP32[$72>>2] = 10;
      $73 = HEAP8[$66>>0]|0;
      $74 = $73 << 24 >> 24;
      $75 = (($74) + -48)|0;
      $76 = (($nl_arg) + ($75<<3)|0);
      $77 = $76;
      $78 = $77;
      $79 = HEAP32[$78>>2]|0;
      $80 = (($77) + 4)|0;
      $81 = $80;
      $82 = HEAP32[$81>>2]|0;
      $83 = (($storemerge798) + 3|0);
      $l10n$2 = 1;$storemerge12 = $83;$w$0 = $79;
     } else {
      label = 24;
     }
    } else {
     label = 24;
    }
    if ((label|0) == 24) {
     label = 0;
     $84 = ($l10n$1|0)==(0);
     if (!($84)) {
      $$0 = -1;
      label = 362;
      break L1;
     }
     if (!($1)) {
      $100 = $66;$fl$1 = $fl$0100;$l10n$3 = 0;$w$1 = 0;
      break;
     }
     $arglist_current = HEAP32[$ap>>2]|0;
     $85 = HEAP32[$arglist_current>>2]|0;
     $arglist_next = (($arglist_current) + 4|0);
     HEAP32[$ap>>2] = $arglist_next;
     $l10n$2 = 0;$storemerge12 = $66;$w$0 = $85;
    }
    $86 = ($w$0|0)<(0);
    if ($86) {
     $87 = $fl$0100 | 8192;
     $88 = (0 - ($w$0))|0;
     $100 = $storemerge12;$fl$1 = $87;$l10n$3 = $l10n$2;$w$1 = $88;
    } else {
     $100 = $storemerge12;$fl$1 = $fl$0100;$l10n$3 = $l10n$2;$w$1 = $w$0;
    }
   } else {
    $89 = $64 << 24 >> 24;
    $isdigittmp1$i = (($89) + -48)|0;
    $isdigit2$i = ($isdigittmp1$i>>>0)<(10);
    if ($isdigit2$i) {
     $92 = $89;$95 = $storemerge798;$i$03$i = 0;
     while(1) {
      $90 = ($i$03$i*10)|0;
      $91 = (($92) + -48)|0;
      $93 = (($91) + ($90))|0;
      $94 = (($95) + 1|0);
      $96 = HEAP8[$94>>0]|0;
      $97 = $96 << 24 >> 24;
      $isdigittmp$i = (($97) + -48)|0;
      $isdigit$i = ($isdigittmp$i>>>0)<(10);
      if ($isdigit$i) {
       $92 = $97;$95 = $94;$i$03$i = $93;
      } else {
       break;
      }
     }
     $98 = ($93|0)<(0);
     if ($98) {
      $$0 = -1;
      label = 362;
      break L1;
     } else {
      $100 = $94;$fl$1 = $fl$0100;$l10n$3 = $l10n$1;$w$1 = $93;
     }
    } else {
     $100 = $storemerge798;$fl$1 = $fl$0100;$l10n$3 = $l10n$1;$w$1 = 0;
    }
   }
  } while(0);
  $99 = HEAP8[$100>>0]|0;
  $101 = ($99<<24>>24)==(46);
  L46: do {
   if ($101) {
    $102 = (($100) + 1|0);
    $103 = HEAP8[$102>>0]|0;
    $104 = ($103<<24>>24)==(42);
    if (!($104)) {
     $125 = $103 << 24 >> 24;
     $isdigittmp1$i20 = (($125) + -48)|0;
     $isdigit2$i21 = ($isdigittmp1$i20>>>0)<(10);
     if ($isdigit2$i21) {
      $128 = $125;$131 = $102;$i$03$i22 = 0;
     } else {
      $1048 = $102;$p$0 = 0;
      break;
     }
     while(1) {
      $126 = ($i$03$i22*10)|0;
      $127 = (($128) + -48)|0;
      $129 = (($127) + ($126))|0;
      $130 = (($131) + 1|0);
      $132 = HEAP8[$130>>0]|0;
      $133 = $132 << 24 >> 24;
      $isdigittmp$i23 = (($133) + -48)|0;
      $isdigit$i24 = ($isdigittmp$i23>>>0)<(10);
      if ($isdigit$i24) {
       $128 = $133;$131 = $130;$i$03$i22 = $129;
      } else {
       $1048 = $130;$p$0 = $129;
       break L46;
      }
     }
    }
    $105 = (($100) + 2|0);
    $106 = HEAP8[$105>>0]|0;
    $107 = $106 << 24 >> 24;
    $isdigittmp8 = (($107) + -48)|0;
    $isdigit9 = ($isdigittmp8>>>0)<(10);
    if ($isdigit9) {
     $108 = (($100) + 3|0);
     $109 = HEAP8[$108>>0]|0;
     $110 = ($109<<24>>24)==(36);
     if ($110) {
      $111 = (($nl_type) + ($isdigittmp8<<2)|0);
      HEAP32[$111>>2] = 10;
      $112 = HEAP8[$105>>0]|0;
      $113 = $112 << 24 >> 24;
      $114 = (($113) + -48)|0;
      $115 = (($nl_arg) + ($114<<3)|0);
      $116 = $115;
      $117 = $116;
      $118 = HEAP32[$117>>2]|0;
      $119 = (($116) + 4)|0;
      $120 = $119;
      $121 = HEAP32[$120>>2]|0;
      $122 = (($100) + 4|0);
      $1048 = $122;$p$0 = $118;
      break;
     }
    }
    $123 = ($l10n$3|0)==(0);
    if (!($123)) {
     $$0 = -1;
     label = 362;
     break L1;
    }
    if ($1) {
     $arglist_current2 = HEAP32[$ap>>2]|0;
     $124 = HEAP32[$arglist_current2>>2]|0;
     $arglist_next3 = (($arglist_current2) + 4|0);
     HEAP32[$ap>>2] = $arglist_next3;
     $1048 = $105;$p$0 = $124;
    } else {
     $1048 = $105;$p$0 = 0;
    }
   } else {
    $1048 = $100;$p$0 = -1;
   }
  } while(0);
  $135 = $1048;$st$0 = 0;
  while(1) {
   $134 = HEAP8[$135>>0]|0;
   $136 = $134 << 24 >> 24;
   $137 = (($136) + -65)|0;
   $138 = ($137>>>0)>(57);
   if ($138) {
    $$0 = -1;
    label = 362;
    break L1;
   }
   $139 = (($135) + 1|0);
   $140 = ((102920 + (($st$0*58)|0)|0) + ($137)|0);
   $141 = HEAP8[$140>>0]|0;
   $142 = $141&255;
   $143 = (($142) + -1)|0;
   $144 = ($143>>>0)<(8);
   if ($144) {
    $135 = $139;$st$0 = $142;
   } else {
    break;
   }
  }
  $145 = ($141<<24>>24)==(0);
  if ($145) {
   $$0 = -1;
   label = 362;
   break;
  }
  $146 = ($141<<24>>24)==(19);
  $147 = ($argpos$0|0)>(-1);
  L65: do {
   if ($146) {
    if ($147) {
     $$0 = -1;
     label = 362;
     break L1;
    } else {
     $1049 = $1045;$1050 = $1046;
     label = 63;
    }
   } else {
    if ($147) {
     $148 = (($nl_type) + ($argpos$0<<2)|0);
     HEAP32[$148>>2] = $142;
     $149 = (($nl_arg) + ($argpos$0<<3)|0);
     $150 = $149;
     $151 = $150;
     $152 = HEAP32[$151>>2]|0;
     $153 = (($150) + 4)|0;
     $154 = $153;
     $155 = HEAP32[$154>>2]|0;
     $156 = $152;
     $1049 = $155;$1050 = $156;
     label = 63;
     break;
    }
    if (!($1)) {
     $$0 = 0;
     label = 362;
     break L1;
    }
    $157 = ($141&255)>(20);
    if ($157) {
     $199 = $134;$207 = $1046;$228 = $1045;
    } else {
     do {
      switch ($142|0) {
      case 9:  {
       $arglist_current5 = HEAP32[$ap>>2]|0;
       $158 = HEAP32[$arglist_current5>>2]|0;
       $arglist_next6 = (($arglist_current5) + 4|0);
       HEAP32[$ap>>2] = $arglist_next6;
       $1051 = $158;$1052 = $1045;
       label = 64;
       break L65;
       break;
      }
      case 14:  {
       $arglist_current20 = HEAP32[$ap>>2]|0;
       $179 = HEAP32[$arglist_current20>>2]|0;
       $arglist_next21 = (($arglist_current20) + 4|0);
       HEAP32[$ap>>2] = $arglist_next21;
       $$mask1$i29 = $179 & 65535;
       $180 = $$mask1$i29;
       $1051 = $180;$1052 = 0;
       label = 64;
       break L65;
       break;
      }
      case 10:  {
       $arglist_current8 = HEAP32[$ap>>2]|0;
       $159 = HEAP32[$arglist_current8>>2]|0;
       $arglist_next9 = (($arglist_current8) + 4|0);
       HEAP32[$ap>>2] = $arglist_next9;
       $160 = ($159|0)<(0);
       $161 = $160 << 31 >> 31;
       $162 = $159;
       $1051 = $162;$1052 = $161;
       label = 64;
       break L65;
       break;
      }
      case 12:  {
       $arglist_current14 = HEAP32[$ap>>2]|0;
       $165 = $arglist_current14;
       $166 = $165;
       $167 = HEAP32[$166>>2]|0;
       $168 = (($165) + 4)|0;
       $169 = $168;
       $170 = HEAP32[$169>>2]|0;
       $arglist_next15 = (($arglist_current14) + 8|0);
       HEAP32[$ap>>2] = $arglist_next15;
       $171 = $167;
       $1051 = $171;$1052 = $170;
       label = 64;
       break L65;
       break;
      }
      case 11:  {
       $arglist_current11 = HEAP32[$ap>>2]|0;
       $163 = HEAP32[$arglist_current11>>2]|0;
       $arglist_next12 = (($arglist_current11) + 4|0);
       HEAP32[$ap>>2] = $arglist_next12;
       $164 = $163;
       $1051 = $164;$1052 = 0;
       label = 64;
       break L65;
       break;
      }
      case 17:  {
       $arglist_current29 = HEAP32[$ap>>2]|0;
       HEAP32[tempDoublePtr>>2]=HEAP32[$arglist_current29>>2];HEAP32[tempDoublePtr+4>>2]=HEAP32[$arglist_current29+4>>2];$190 = +HEAPF64[tempDoublePtr>>3];
       $arglist_next30 = (($arglist_current29) + 8|0);
       HEAP32[$ap>>2] = $arglist_next30;
       HEAPF64[tempDoublePtr>>3] = $190;$191 = HEAP32[tempDoublePtr>>2]|0;
       $192 = HEAP32[tempDoublePtr+4>>2]|0;
       $193 = $191;
       $1051 = $193;$1052 = $192;
       label = 64;
       break L65;
       break;
      }
      case 16:  {
       $arglist_current26 = HEAP32[$ap>>2]|0;
       $188 = HEAP32[$arglist_current26>>2]|0;
       $arglist_next27 = (($arglist_current26) + 4|0);
       HEAP32[$ap>>2] = $arglist_next27;
       $$mask$i30 = $188 & 255;
       $189 = $$mask$i30;
       $1051 = $189;$1052 = 0;
       label = 64;
       break L65;
       break;
      }
      case 18:  {
       $arglist_current32 = HEAP32[$ap>>2]|0;
       HEAP32[tempDoublePtr>>2]=HEAP32[$arglist_current32>>2];HEAP32[tempDoublePtr+4>>2]=HEAP32[$arglist_current32+4>>2];$194 = +HEAPF64[tempDoublePtr>>3];
       $arglist_next33 = (($arglist_current32) + 8|0);
       HEAP32[$ap>>2] = $arglist_next33;
       HEAPF64[tempDoublePtr>>3] = $194;$195 = HEAP32[tempDoublePtr>>2]|0;
       $196 = HEAP32[tempDoublePtr+4>>2]|0;
       $197 = $195;
       $1049 = $196;$1050 = $197;
       label = 63;
       break L65;
       break;
      }
      case 13:  {
       $arglist_current17 = HEAP32[$ap>>2]|0;
       $172 = HEAP32[$arglist_current17>>2]|0;
       $arglist_next18 = (($arglist_current17) + 4|0);
       HEAP32[$ap>>2] = $arglist_next18;
       $173 = $172&65535;
       $174 = $173 << 16 >> 16;
       $175 = ($174|0)<(0);
       $176 = $175 << 31 >> 31;
       $sext84 = $172 << 16;
       $177 = $sext84 >> 16;
       $178 = $177;
       $1051 = $178;$1052 = $176;
       label = 64;
       break L65;
       break;
      }
      case 15:  {
       $arglist_current23 = HEAP32[$ap>>2]|0;
       $181 = HEAP32[$arglist_current23>>2]|0;
       $arglist_next24 = (($arglist_current23) + 4|0);
       HEAP32[$ap>>2] = $arglist_next24;
       $182 = $181&255;
       $183 = $182 << 24 >> 24;
       $184 = ($183|0)<(0);
       $185 = $184 << 31 >> 31;
       $sext = $181 << 24;
       $186 = $sext >> 24;
       $187 = $186;
       $1051 = $187;$1052 = $185;
       label = 64;
       break L65;
       break;
      }
      default: {
       $1051 = $1046;$1052 = $1045;
       label = 64;
       break L65;
      }
      }
     } while(0);
    }
   }
  } while(0);
  if ((label|0) == 63) {
   label = 0;
   if ($1) {
    $1051 = $1050;$1052 = $1049;
    label = 64;
   } else {
    $1045 = $1049;$1046 = $1050;$22 = $139;$cnt$0 = $cnt$1;$l$0 = $36;$l10n$0 = $l10n$3;
    continue;
   }
  }
  if ((label|0) == 64) {
   label = 0;
   $$pre292 = HEAP8[$135>>0]|0;
   $199 = $$pre292;$207 = $1051;$228 = $1052;
  }
  $198 = $199 << 24 >> 24;
  $200 = ($st$0|0)==(0);
  if ($200) {
   $t$0 = $198;
  } else {
   $201 = $198 & 15;
   $202 = ($201|0)==(3);
   $203 = $198 & -33;
   $$ = $202 ? $203 : $198;
   $t$0 = $$;
  }
  $204 = $fl$1 & 8192;
  $205 = ($204|0)==(0);
  $206 = $fl$1 & -65537;
  $fl$1$ = $205 ? $fl$1 : $206;
  L92: do {
   switch ($t$0|0) {
   case 65: case 71: case 70: case 69: case 97: case 103: case 102: case 101:  {
    $368 = $207;
    HEAP32[tempDoublePtr>>2] = $368;HEAP32[tempDoublePtr+4>>2] = $228;$369 = +HEAPF64[tempDoublePtr>>3];
    HEAP32[$e2$i>>2] = 0;
    $370 = ($228|0)<(0);
    if ($370) {
     $371 = -$369;
     $$07$i = $371;$pl$0$i = 1;$prefix$0$i = 103408;
    } else {
     $372 = $fl$1$ & 2048;
     $373 = ($372|0)==(0);
     if ($373) {
      $374 = $fl$1$ & 1;
      $375 = ($374|0)==(0);
      $$$i = $375 ? ((103408 + 1|0)) : ((103408 + 6|0));
      $$07$i = $369;$pl$0$i = $374;$prefix$0$i = $$$i;
     } else {
      $$07$i = $369;$pl$0$i = 1;$prefix$0$i = ((103408 + 3|0));
     }
    }
    HEAPF64[tempDoublePtr>>3] = $$07$i;$376 = HEAP32[tempDoublePtr>>2]|0;
    $377 = HEAP32[tempDoublePtr+4>>2]|0;
    $378 = $377 & 2146435072;
    $379 = ($378>>>0)<(2146435072);
    $380 = ($378|0)==(2146435072);
    $381 = (0)<(0);
    $382 = $380 & $381;
    $383 = $379 | $382;
    if (!($383)) {
     $384 = $t$0 & 32;
     $385 = ($384|0)!=(0);
     $386 = $385 ? 103432 : 103440;
     $387 = ($$07$i != $$07$i) | (0.0 != 0.0);
     if ($387) {
      $388 = $385 ? 103448 : 103456;
      $pl$1$i = 0;$s1$0$i = $388;
     } else {
      $pl$1$i = $pl$0$i;$s1$0$i = $386;
     }
     $389 = (($pl$1$i) + 3)|0;
     $390 = $fl$1$ & 8192;
     $391 = ($390|0)==(0);
     $392 = ($389|0)<($w$1|0);
     $or$cond$i35$i = $391 & $392;
     if ($or$cond$i35$i) {
      $393 = (($w$1) - ($389))|0;
      $394 = ($393>>>0)>(256);
      $395 = $394 ? 256 : $393;
      _memset(($pad$i|0),32,($395|0))|0;
      $396 = ($393>>>0)>(255);
      if ($396) {
       $$01$i36$i = $393;
       while(1) {
        (___fwritex($pad$i,256,$f)|0);
        $397 = (($$01$i36$i) + -256)|0;
        $398 = ($397>>>0)>(255);
        if ($398) {
         $$01$i36$i = $397;
        } else {
         $$0$lcssa$i38$i = $397;
         break;
        }
       }
      } else {
       $$0$lcssa$i38$i = $393;
      }
      (___fwritex($pad$i,$$0$lcssa$i38$i,$f)|0);
     }
     (___fwritex($prefix$0$i,$pl$1$i,$f)|0);
     (___fwritex($s1$0$i,3,$f)|0);
     $399 = $fl$1$ & 73728;
     $400 = ($399|0)==(8192);
     $or$cond$i42$i = $400 & $392;
     if ($or$cond$i42$i) {
      $401 = (($w$1) - ($389))|0;
      $402 = ($401>>>0)>(256);
      $403 = $402 ? 256 : $401;
      _memset(($pad$i|0),32,($403|0))|0;
      $404 = ($401>>>0)>(255);
      if ($404) {
       $$01$i43$i = $401;
       while(1) {
        (___fwritex($pad$i,256,$f)|0);
        $405 = (($$01$i43$i) + -256)|0;
        $406 = ($405>>>0)>(255);
        if ($406) {
         $$01$i43$i = $405;
        } else {
         $$0$lcssa$i45$i = $405;
         break;
        }
       }
      } else {
       $$0$lcssa$i45$i = $401;
      }
      (___fwritex($pad$i,$$0$lcssa$i45$i,$f)|0);
     }
     $w$$i = $392 ? $w$1 : $389;
     $1045 = $228;$1046 = $207;$22 = $139;$cnt$0 = $cnt$1;$l$0 = $w$$i;$l10n$0 = $l10n$3;
     continue L1;
    }
    $407 = (+_frexpl($$07$i,$e2$i));
    $408 = $407 * 2.0;
    $409 = $408 != 0.0;
    if ($409) {
     $410 = HEAP32[$e2$i>>2]|0;
     $411 = (($410) + -1)|0;
     HEAP32[$e2$i>>2] = $411;
    }
    $412 = $t$0 | 32;
    $413 = ($412|0)==(97);
    if ($413) {
     $414 = $t$0 & 32;
     $415 = ($414|0)==(0);
     $416 = (($prefix$0$i) + 9|0);
     $prefix$0$$i = $415 ? $prefix$0$i : $416;
     $417 = $pl$0$i | 2;
     $418 = ($p$0>>>0)>(11);
     $419 = (12 - ($p$0))|0;
     $re$0$i = $418 ? 0 : $419;
     $420 = ($re$0$i|0)==(0);
     do {
      if ($420) {
       $$1$i = $408;
      } else {
       $re$1165$i = $re$0$i;$round$0164$i = 8.0;
       while(1) {
        $421 = (($re$1165$i) + -1)|0;
        $422 = $round$0164$i * 16.0;
        $423 = ($421|0)==(0);
        if ($423) {
         break;
        } else {
         $re$1165$i = $421;$round$0164$i = $422;
        }
       }
       $424 = HEAP8[$prefix$0$$i>>0]|0;
       $425 = ($424<<24>>24)==(45);
       if ($425) {
        $426 = -$408;
        $427 = $426 - $422;
        $428 = $422 + $427;
        $429 = -$428;
        $$1$i = $429;
        break;
       } else {
        $430 = $408 + $422;
        $431 = $430 - $422;
        $$1$i = $431;
        break;
       }
      }
     } while(0);
     $432 = HEAP32[$e2$i>>2]|0;
     $433 = ($432|0)<(0);
     $434 = (0 - ($432))|0;
     $435 = $433 ? $434 : $432;
     $436 = ($435|0)<(0);
     if ($436) {
      $437 = ($435|0)<(0);
      $438 = $437 << 31 >> 31;
      $$05$i$i = $6;$439 = $435;$440 = $438;
      while(1) {
       $441 = (___uremdi3(($439|0),($440|0),10,0)|0);
       $442 = tempRet0;
       $443 = $441 | 48;
       $444 = $443&255;
       $445 = (($$05$i$i) + -1|0);
       HEAP8[$445>>0] = $444;
       $446 = (___udivdi3(($439|0),($440|0),10,0)|0);
       $447 = tempRet0;
       $448 = ($440>>>0)>(9);
       $449 = ($440|0)==(9);
       $450 = ($439>>>0)>(4294967295);
       $451 = $449 & $450;
       $452 = $448 | $451;
       if ($452) {
        $$05$i$i = $445;$439 = $446;$440 = $447;
       } else {
        break;
       }
      }
      $$0$lcssa$i48$i = $445;$$01$lcssa$off0$i$i = $446;
     } else {
      $$0$lcssa$i48$i = $6;$$01$lcssa$off0$i$i = $435;
     }
     $453 = ($$01$lcssa$off0$i$i|0)==(0);
     if ($453) {
      $$1$lcssa$i$i = $$0$lcssa$i48$i;
     } else {
      $$12$i$i = $$0$lcssa$i48$i;$y$03$i$i = $$01$lcssa$off0$i$i;
      while(1) {
       $454 = (($y$03$i$i>>>0) % 10)&-1;
       $455 = $454 | 48;
       $456 = $455&255;
       $457 = (($$12$i$i) + -1|0);
       HEAP8[$457>>0] = $456;
       $458 = (($y$03$i$i>>>0) / 10)&-1;
       $459 = ($y$03$i$i>>>0)<(10);
       if ($459) {
        $$1$lcssa$i$i = $457;
        break;
       } else {
        $$12$i$i = $457;$y$03$i$i = $458;
       }
      }
     }
     $460 = ($$1$lcssa$i$i|0)==($6|0);
     if ($460) {
      HEAP8[$7>>0] = 48;
      $estr$0$i = $7;
     } else {
      $estr$0$i = $$1$lcssa$i$i;
     }
     $461 = HEAP32[$e2$i>>2]|0;
     $462 = $461 >> 31;
     $463 = $462 & 2;
     $464 = (($463) + 43)|0;
     $465 = $464&255;
     $466 = (($estr$0$i) + -1|0);
     HEAP8[$466>>0] = $465;
     $467 = (($t$0) + 15)|0;
     $468 = $467&255;
     $469 = (($estr$0$i) + -2|0);
     HEAP8[$469>>0] = $468;
     $470 = ($p$0|0)>(0);
     $471 = $fl$1$ & 8;
     $472 = ($471|0)==(0);
     if ($470) {
      if ($472) {
       $$2$us$us$i = $$1$i;$s$0$us$us$i = $buf$i;
       while(1) {
        $473 = (~~(($$2$us$us$i)));
        $474 = (103464 + ($473)|0);
        $475 = HEAP8[$474>>0]|0;
        $476 = $475&255;
        $477 = $476 | $414;
        $478 = $477&255;
        $479 = (($s$0$us$us$i) + 1|0);
        HEAP8[$s$0$us$us$i>>0] = $478;
        $480 = (+($473|0));
        $481 = $$2$us$us$i - $480;
        $482 = $481 * 16.0;
        $483 = $479;
        $484 = (($483) - ($0))|0;
        $485 = ($484|0)==(1);
        if ($485) {
         $486 = (($s$0$us$us$i) + 2|0);
         HEAP8[$479>>0] = 46;
         $s$1$us$us$i = $486;
        } else {
         $s$1$us$us$i = $479;
        }
        $487 = $482 != 0.0;
        if ($487) {
         $$2$us$us$i = $482;$s$0$us$us$i = $s$1$us$us$i;
        } else {
         $s$1$lcssa$i = $s$1$us$us$i;
         break;
        }
       }
      } else {
       $$2$us$i = $$1$i;$s$0$us$i = $buf$i;
       while(1) {
        $488 = (~~(($$2$us$i)));
        $489 = (103464 + ($488)|0);
        $490 = HEAP8[$489>>0]|0;
        $491 = $490&255;
        $492 = $491 | $414;
        $493 = $492&255;
        $494 = (($s$0$us$i) + 1|0);
        HEAP8[$s$0$us$i>>0] = $493;
        $495 = (+($488|0));
        $496 = $$2$us$i - $495;
        $497 = $496 * 16.0;
        $498 = $494;
        $499 = (($498) - ($0))|0;
        $500 = ($499|0)==(1);
        if ($500) {
         $501 = (($s$0$us$i) + 2|0);
         HEAP8[$494>>0] = 46;
         $s$1$us$i = $501;
        } else {
         $s$1$us$i = $494;
        }
        $502 = $497 != 0.0;
        if ($502) {
         $$2$us$i = $497;$s$0$us$i = $s$1$us$i;
        } else {
         $s$1$lcssa$i = $s$1$us$i;
         break;
        }
       }
      }
     } else {
      if ($472) {
       $$2$us159$i = $$1$i;$s$0$us158$i = $buf$i;
       while(1) {
        $503 = (~~(($$2$us159$i)));
        $504 = (103464 + ($503)|0);
        $505 = HEAP8[$504>>0]|0;
        $506 = $505&255;
        $507 = $506 | $414;
        $508 = $507&255;
        $509 = (($s$0$us158$i) + 1|0);
        HEAP8[$s$0$us158$i>>0] = $508;
        $510 = (+($503|0));
        $511 = $$2$us159$i - $510;
        $512 = $511 * 16.0;
        $513 = $509;
        $514 = (($513) - ($0))|0;
        $515 = ($514|0)==(1);
        $516 = $512 != 0.0;
        $or$cond$i71 = $515 & $516;
        if ($or$cond$i71) {
         $517 = (($s$0$us158$i) + 2|0);
         HEAP8[$509>>0] = 46;
         $s$1$us160$i = $517;
        } else {
         $s$1$us160$i = $509;
        }
        if ($516) {
         $$2$us159$i = $512;$s$0$us158$i = $s$1$us160$i;
        } else {
         $s$1$lcssa$i = $s$1$us160$i;
         break;
        }
       }
      } else {
       $$2$i = $$1$i;$s$0$i = $buf$i;
       while(1) {
        $518 = (~~(($$2$i)));
        $519 = (103464 + ($518)|0);
        $520 = HEAP8[$519>>0]|0;
        $521 = $520&255;
        $522 = $521 | $414;
        $523 = $522&255;
        $524 = (($s$0$i) + 1|0);
        HEAP8[$s$0$i>>0] = $523;
        $525 = (+($518|0));
        $526 = $$2$i - $525;
        $527 = $526 * 16.0;
        $528 = $524;
        $529 = (($528) - ($0))|0;
        $530 = ($529|0)==(1);
        if ($530) {
         $531 = (($s$0$i) + 2|0);
         HEAP8[$524>>0] = 46;
         $s$1$i = $531;
        } else {
         $s$1$i = $524;
        }
        $532 = $527 != 0.0;
        if ($532) {
         $$2$i = $527;$s$0$i = $s$1$i;
        } else {
         $s$1$lcssa$i = $s$1$i;
         break;
        }
       }
      }
     }
     $533 = ($p$0|0)==(0);
     $$pre319$i = $s$1$lcssa$i;
     do {
      if ($533) {
       label = 173;
      } else {
       $534 = (($10) + ($$pre319$i))|0;
       $535 = ($534|0)<($p$0|0);
       if (!($535)) {
        label = 173;
        break;
       }
       $536 = $469;
       $537 = (($11) + ($p$0))|0;
       $538 = (($537) - ($536))|0;
       $l$0$i = $538;
      }
     } while(0);
     if ((label|0) == 173) {
      label = 0;
      $539 = $469;
      $540 = (($9) - ($539))|0;
      $541 = (($540) + ($$pre319$i))|0;
      $l$0$i = $541;
     }
     $542 = (($l$0$i) + ($417))|0;
     $543 = $fl$1$ & 73728;
     $544 = ($543|0)==(0);
     $545 = ($542|0)<($w$1|0);
     $or$cond$i52$i = $544 & $545;
     if ($or$cond$i52$i) {
      $546 = (($w$1) - ($542))|0;
      $547 = ($546>>>0)>(256);
      $548 = $547 ? 256 : $546;
      _memset(($pad$i|0),32,($548|0))|0;
      $549 = ($546>>>0)>(255);
      if ($549) {
       $$01$i53$i = $546;
       while(1) {
        (___fwritex($pad$i,256,$f)|0);
        $550 = (($$01$i53$i) + -256)|0;
        $551 = ($550>>>0)>(255);
        if ($551) {
         $$01$i53$i = $550;
        } else {
         $$0$lcssa$i55$i = $550;
         break;
        }
       }
      } else {
       $$0$lcssa$i55$i = $546;
      }
      (___fwritex($pad$i,$$0$lcssa$i55$i,$f)|0);
     }
     (___fwritex($prefix$0$$i,$417,$f)|0);
     $552 = ($543|0)==(65536);
     $or$cond$i59$i = $552 & $545;
     if ($or$cond$i59$i) {
      $553 = (($w$1) - ($542))|0;
      $554 = ($553>>>0)>(256);
      $555 = $554 ? 256 : $553;
      _memset(($pad$i|0),48,($555|0))|0;
      $556 = ($553>>>0)>(255);
      if ($556) {
       $$01$i60$i = $553;
       while(1) {
        (___fwritex($pad$i,256,$f)|0);
        $557 = (($$01$i60$i) + -256)|0;
        $558 = ($557>>>0)>(255);
        if ($558) {
         $$01$i60$i = $557;
        } else {
         $$0$lcssa$i62$i = $557;
         break;
        }
       }
      } else {
       $$0$lcssa$i62$i = $553;
      }
      (___fwritex($pad$i,$$0$lcssa$i62$i,$f)|0);
     }
     $559 = (($$pre319$i) - ($0))|0;
     (___fwritex($buf$i,$559,$f)|0);
     $560 = $469;
     $561 = (($8) - ($560))|0;
     $562 = (($l$0$i) - ($561))|0;
     $563 = (($562) - ($559))|0;
     $564 = ($563|0)>(0);
     if ($564) {
      $565 = ($563>>>0)>(256);
      $566 = $565 ? 256 : $563;
      _memset(($pad$i|0),48,($566|0))|0;
      $567 = ($563>>>0)>(255);
      if ($567) {
       $$01$i66$i = $563;
       while(1) {
        (___fwritex($pad$i,256,$f)|0);
        $568 = (($$01$i66$i) + -256)|0;
        $569 = ($568>>>0)>(255);
        if ($569) {
         $$01$i66$i = $568;
        } else {
         $$0$lcssa$i68$i = $568;
         break;
        }
       }
      } else {
       $$0$lcssa$i68$i = $563;
      }
      (___fwritex($pad$i,$$0$lcssa$i68$i,$f)|0);
     }
     (___fwritex($469,$561,$f)|0);
     $570 = ($543|0)==(8192);
     $or$cond$i72$i = $570 & $545;
     if ($or$cond$i72$i) {
      $571 = (($w$1) - ($542))|0;
      $572 = ($571>>>0)>(256);
      $573 = $572 ? 256 : $571;
      _memset(($pad$i|0),32,($573|0))|0;
      $574 = ($571>>>0)>(255);
      if ($574) {
       $$01$i73$i = $571;
       while(1) {
        (___fwritex($pad$i,256,$f)|0);
        $575 = (($$01$i73$i) + -256)|0;
        $576 = ($575>>>0)>(255);
        if ($576) {
         $$01$i73$i = $575;
        } else {
         $$0$lcssa$i75$i = $575;
         break;
        }
       }
      } else {
       $$0$lcssa$i75$i = $571;
      }
      (___fwritex($pad$i,$$0$lcssa$i75$i,$f)|0);
     }
     $w$18$i = $545 ? $w$1 : $542;
     $1045 = $228;$1046 = $207;$22 = $139;$cnt$0 = $cnt$1;$l$0 = $w$18$i;$l10n$0 = $l10n$3;
     continue L1;
    }
    $577 = ($p$0|0)<(0);
    $$p$i = $577 ? 6 : $p$0;
    if ($409) {
     $578 = $408 * 268435456.0;
     $579 = HEAP32[$e2$i>>2]|0;
     $580 = (($579) + -28)|0;
     HEAP32[$e2$i>>2] = $580;
     $$3$i = $578;$581 = $580;
    } else {
     $$pre$i = HEAP32[$e2$i>>2]|0;
     $$3$i = $408;$581 = $$pre$i;
    }
    $582 = ($581|0)<(0);
    $$31$i = $582 ? $big$i : $12;
    $$4$i = $$3$i;$z$0$i = $$31$i;
    while(1) {
     $583 = (~~(($$4$i))>>>0);
     HEAP32[$z$0$i>>2] = $583;
     $584 = (($z$0$i) + 4|0);
     $585 = (+($583>>>0));
     $586 = $$4$i - $585;
     $587 = $586 * 1.0E+9;
     $588 = $587 != 0.0;
     if ($588) {
      $$4$i = $587;$z$0$i = $584;
     } else {
      break;
     }
    }
    $$pr$i = HEAP32[$e2$i>>2]|0;
    $589 = ($$pr$i|0)>(0);
    if ($589) {
     $590 = $$pr$i;$a$1263$i = $$31$i;$z$1262$i = $584;
     while(1) {
      $591 = ($590|0)>(29);
      $592 = $591 ? 29 : $590;
      $d$0254$i = (($z$1262$i) + -4|0);
      $593 = ($d$0254$i>>>0)<($a$1263$i>>>0);
      do {
       if ($593) {
        $a$2$ph$i = $a$1263$i;
       } else {
        $carry$0255$i = 0;$d$0256$i = $d$0254$i;
        while(1) {
         $594 = HEAP32[$d$0256$i>>2]|0;
         $595 = (_bitshift64Shl(($594|0),0,($592|0))|0);
         $596 = tempRet0;
         $597 = (_i64Add(($595|0),($596|0),($carry$0255$i|0),0)|0);
         $598 = tempRet0;
         $599 = (___uremdi3(($597|0),($598|0),1000000000,0)|0);
         $600 = tempRet0;
         HEAP32[$d$0256$i>>2] = $599;
         $601 = (___udivdi3(($597|0),($598|0),1000000000,0)|0);
         $602 = tempRet0;
         $d$0$i = (($d$0256$i) + -4|0);
         $603 = ($d$0$i>>>0)<($a$1263$i>>>0);
         if ($603) {
          break;
         } else {
          $carry$0255$i = $601;$d$0256$i = $d$0$i;
         }
        }
        $604 = ($601|0)==(0);
        if ($604) {
         $a$2$ph$i = $a$1263$i;
         break;
        }
        $605 = (($a$1263$i) + -4|0);
        HEAP32[$605>>2] = $601;
        $a$2$ph$i = $605;
       }
      } while(0);
      $z$2$i = $z$1262$i;
      while(1) {
       $606 = ($z$2$i>>>0)>($a$2$ph$i>>>0);
       if (!($606)) {
        break;
       }
       $607 = (($z$2$i) + -4|0);
       $608 = HEAP32[$607>>2]|0;
       $609 = ($608|0)==(0);
       if ($609) {
        $z$2$i = $607;
       } else {
        break;
       }
      }
      $610 = HEAP32[$e2$i>>2]|0;
      $611 = (($610) - ($592))|0;
      HEAP32[$e2$i>>2] = $611;
      $612 = ($611|0)>(0);
      if ($612) {
       $590 = $611;$a$1263$i = $a$2$ph$i;$z$1262$i = $z$2$i;
      } else {
       $$pr146$i = $611;$a$1$lcssa$i = $a$2$ph$i;$z$1$lcssa$i = $z$2$i;
       break;
      }
     }
    } else {
     $$pr146$i = $$pr$i;$a$1$lcssa$i = $$31$i;$z$1$lcssa$i = $584;
    }
    $613 = ($$pr146$i|0)<(0);
    L228: do {
     if ($613) {
      $614 = (($$p$i) + 25)|0;
      $615 = (($614|0) / 9)&-1;
      $616 = (($615) + 1)|0;
      $617 = ($412|0)==(102);
      if ($617) {
       $618 = $$31$i;
       $619 = (($$31$i) + ($616<<2)|0);
       $621 = $$pr146$i;$a$3249$us$i = $a$1$lcssa$i;$z$3248$us$i = $z$1$lcssa$i;
       while(1) {
        $620 = (0 - ($621))|0;
        $622 = ($620|0)>(9);
        $$20$us$i = $622 ? 9 : $620;
        $623 = ($a$3249$us$i>>>0)<($z$3248$us$i>>>0);
        do {
         if ($623) {
          $648 = 1 << $$20$us$i;
          $642 = (($648) + -1)|0;
          $645 = 1000000000 >>> $$20$us$i;
          $carry3$0243$us$i = 0;$d$1242$us$i = $a$3249$us$i;
          while(1) {
           $640 = HEAP32[$d$1242$us$i>>2]|0;
           $641 = $640 & $642;
           $643 = $640 >>> $$20$us$i;
           $644 = (($643) + ($carry3$0243$us$i))|0;
           HEAP32[$d$1242$us$i>>2] = $644;
           $630 = Math_imul($641, $645)|0;
           $646 = (($d$1242$us$i) + 4|0);
           $647 = ($646>>>0)<($z$3248$us$i>>>0);
           if ($647) {
            $carry3$0243$us$i = $630;$d$1242$us$i = $646;
           } else {
            break;
           }
          }
          $627 = HEAP32[$a$3249$us$i>>2]|0;
          $628 = ($627|0)==(0);
          $629 = (($a$3249$us$i) + 4|0);
          $$a$3$us$i = $628 ? $629 : $a$3249$us$i;
          $631 = ($630|0)==(0);
          if ($631) {
           $$a$3$us323$i = $$a$3$us$i;$z$4$us$i = $z$3248$us$i;
           break;
          }
          $632 = (($z$3248$us$i) + 4|0);
          HEAP32[$z$3248$us$i>>2] = $630;
          $$a$3$us323$i = $$a$3$us$i;$z$4$us$i = $632;
         } else {
          $624 = HEAP32[$a$3249$us$i>>2]|0;
          $625 = ($624|0)==(0);
          $626 = (($a$3249$us$i) + 4|0);
          $$a$3$us322$i = $625 ? $626 : $a$3249$us$i;
          $$a$3$us323$i = $$a$3$us322$i;$z$4$us$i = $z$3248$us$i;
         }
        } while(0);
        $633 = $z$4$us$i;
        $634 = (($633) - ($618))|0;
        $635 = $634 >> 2;
        $636 = ($635|0)>($616|0);
        $$z$4$us$i = $636 ? $619 : $z$4$us$i;
        $637 = HEAP32[$e2$i>>2]|0;
        $638 = (($637) + ($$20$us$i))|0;
        HEAP32[$e2$i>>2] = $638;
        $639 = ($638|0)<(0);
        if ($639) {
         $621 = $638;$a$3249$us$i = $$a$3$us323$i;$z$3248$us$i = $$z$4$us$i;
        } else {
         $a$3$lcssa$i = $$a$3$us323$i;$z$3$lcssa$i = $$z$4$us$i;
         break L228;
        }
       }
      } else {
       $650 = $$pr146$i;$a$3249$i = $a$1$lcssa$i;$z$3248$i = $z$1$lcssa$i;
      }
      while(1) {
       $649 = (0 - ($650))|0;
       $651 = ($649|0)>(9);
       $$20$i = $651 ? 9 : $649;
       $652 = ($a$3249$i>>>0)<($z$3248$i>>>0);
       do {
        if ($652) {
         $656 = 1 << $$20$i;
         $657 = (($656) + -1)|0;
         $658 = 1000000000 >>> $$20$i;
         $carry3$0243$i = 0;$d$1242$i = $a$3249$i;
         while(1) {
          $659 = HEAP32[$d$1242$i>>2]|0;
          $660 = $659 & $657;
          $661 = $659 >>> $$20$i;
          $662 = (($661) + ($carry3$0243$i))|0;
          HEAP32[$d$1242$i>>2] = $662;
          $663 = Math_imul($660, $658)|0;
          $664 = (($d$1242$i) + 4|0);
          $665 = ($664>>>0)<($z$3248$i>>>0);
          if ($665) {
           $carry3$0243$i = $663;$d$1242$i = $664;
          } else {
           break;
          }
         }
         $666 = HEAP32[$a$3249$i>>2]|0;
         $667 = ($666|0)==(0);
         $668 = (($a$3249$i) + 4|0);
         $$a$3$i = $667 ? $668 : $a$3249$i;
         $669 = ($663|0)==(0);
         if ($669) {
          $$a$3325$i = $$a$3$i;$z$4$i = $z$3248$i;
          break;
         }
         $670 = (($z$3248$i) + 4|0);
         HEAP32[$z$3248$i>>2] = $663;
         $$a$3325$i = $$a$3$i;$z$4$i = $670;
        } else {
         $653 = HEAP32[$a$3249$i>>2]|0;
         $654 = ($653|0)==(0);
         $655 = (($a$3249$i) + 4|0);
         $$a$3324$i = $654 ? $655 : $a$3249$i;
         $$a$3325$i = $$a$3324$i;$z$4$i = $z$3248$i;
        }
       } while(0);
       $671 = $z$4$i;
       $672 = $$a$3325$i;
       $673 = (($671) - ($672))|0;
       $674 = $673 >> 2;
       $675 = ($674|0)>($616|0);
       if ($675) {
        $676 = (($$a$3325$i) + ($616<<2)|0);
        $z$5$i = $676;
       } else {
        $z$5$i = $z$4$i;
       }
       $677 = HEAP32[$e2$i>>2]|0;
       $678 = (($677) + ($$20$i))|0;
       HEAP32[$e2$i>>2] = $678;
       $679 = ($678|0)<(0);
       if ($679) {
        $650 = $678;$a$3249$i = $$a$3325$i;$z$3248$i = $z$5$i;
       } else {
        $a$3$lcssa$i = $$a$3325$i;$z$3$lcssa$i = $z$5$i;
        break;
       }
      }
     } else {
      $a$3$lcssa$i = $a$1$lcssa$i;$z$3$lcssa$i = $z$1$lcssa$i;
     }
    } while(0);
    $680 = ($a$3$lcssa$i>>>0)<($z$3$lcssa$i>>>0);
    $681 = $$31$i;
    do {
     if ($680) {
      $682 = $a$3$lcssa$i;
      $683 = (($681) - ($682))|0;
      $684 = $683 >> 2;
      $685 = ($684*9)|0;
      $686 = HEAP32[$a$3$lcssa$i>>2]|0;
      $687 = ($686>>>0)<(10);
      if ($687) {
       $e$1$i = $685;
       break;
      } else {
       $e$0238$i = $685;$i$0237$i = 10;
      }
      while(1) {
       $688 = ($i$0237$i*10)|0;
       $689 = (($e$0238$i) + 1)|0;
       $690 = ($686>>>0)<($688>>>0);
       if ($690) {
        $e$1$i = $689;
        break;
       } else {
        $e$0238$i = $689;$i$0237$i = $688;
       }
      }
     } else {
      $e$1$i = 0;
     }
    } while(0);
    $691 = ($412|0)!=(102);
    $692 = $691 ? $e$1$i : 0;
    $693 = (($$p$i) - ($692))|0;
    $694 = ($412|0)==(103);
    $695 = ($$p$i|0)!=(0);
    $$21$i = $694 & $695;
    $$neg151$i = $$21$i << 31 >> 31;
    $696 = (($693) + ($$neg151$i))|0;
    $697 = $z$3$lcssa$i;
    $698 = (($697) - ($681))|0;
    $699 = $698 >> 2;
    $700 = ($699*9)|0;
    $701 = (($700) + -9)|0;
    $702 = ($696|0)<($701|0);
    if ($702) {
     $703 = (($696) + 9216)|0;
     $704 = (($703|0) / 9)&-1;
     $$sum$i = (($704) + -1023)|0;
     $705 = (($$31$i) + ($$sum$i<<2)|0);
     $706 = (($703|0) % 9)&-1;
     $j$0229$i = (($706) + 1)|0;
     $707 = ($j$0229$i|0)<(9);
     if ($707) {
      $i$1230$i = 10;$j$0231$i = $j$0229$i;
      while(1) {
       $708 = ($i$1230$i*10)|0;
       $j$0$i = (($j$0231$i) + 1)|0;
       $exitcond$i = ($j$0$i|0)==(9);
       if ($exitcond$i) {
        $i$1$lcssa$i = $708;
        break;
       } else {
        $i$1230$i = $708;$j$0231$i = $j$0$i;
       }
      }
     } else {
      $i$1$lcssa$i = 10;
     }
     $709 = HEAP32[$705>>2]|0;
     $710 = (($709>>>0) % ($i$1$lcssa$i>>>0))&-1;
     $711 = ($710|0)==(0);
     if ($711) {
      $$sum15$i = (($704) + -1022)|0;
      $712 = (($$31$i) + ($$sum15$i<<2)|0);
      $713 = ($712|0)==($z$3$lcssa$i|0);
      if ($713) {
       $a$7$i = $a$3$lcssa$i;$d$3$i = $705;$e$3$i = $e$1$i;
      } else {
       label = 233;
      }
     } else {
      label = 233;
     }
     do {
      if ((label|0) == 233) {
       label = 0;
       $714 = (($709>>>0) / ($i$1$lcssa$i>>>0))&-1;
       $715 = $714 & 1;
       $716 = ($715|0)==(0);
       $$22$i = $716 ? 9007199254740992.0 : 9007199254740994.0;
       $717 = (($i$1$lcssa$i|0) / 2)&-1;
       $718 = ($710>>>0)<($717>>>0);
       do {
        if ($718) {
         $small$0$i = 0.5;
        } else {
         $719 = ($710|0)==($717|0);
         if ($719) {
          $$sum16$i = (($704) + -1022)|0;
          $720 = (($$31$i) + ($$sum16$i<<2)|0);
          $721 = ($720|0)==($z$3$lcssa$i|0);
          if ($721) {
           $small$0$i = 1.0;
           break;
          }
         }
         $small$0$i = 1.5;
        }
       } while(0);
       $722 = ($pl$0$i|0)==(0);
       do {
        if ($722) {
         $round6$1$i = $$22$i;$small$1$i = $small$0$i;
        } else {
         $723 = HEAP8[$prefix$0$i>>0]|0;
         $724 = ($723<<24>>24)==(45);
         if (!($724)) {
          $round6$1$i = $$22$i;$small$1$i = $small$0$i;
          break;
         }
         $725 = $$22$i * -1.0;
         $726 = $small$0$i * -1.0;
         $round6$1$i = $725;$small$1$i = $726;
        }
       } while(0);
       $727 = (($709) - ($710))|0;
       HEAP32[$705>>2] = $727;
       $728 = $round6$1$i + $small$1$i;
       $729 = $728 != $round6$1$i;
       if (!($729)) {
        $a$7$i = $a$3$lcssa$i;$d$3$i = $705;$e$3$i = $e$1$i;
        break;
       }
       $730 = (($727) + ($i$1$lcssa$i))|0;
       HEAP32[$705>>2] = $730;
       $731 = ($730>>>0)>(999999999);
       if ($731) {
        $a$5223$i = $a$3$lcssa$i;$d$2222$i = $705;
        while(1) {
         $732 = (($d$2222$i) + -4|0);
         HEAP32[$d$2222$i>>2] = 0;
         $733 = ($732>>>0)<($a$5223$i>>>0);
         if ($733) {
          $734 = (($a$5223$i) + -4|0);
          HEAP32[$734>>2] = 0;
          $a$6$i = $734;
         } else {
          $a$6$i = $a$5223$i;
         }
         $735 = HEAP32[$732>>2]|0;
         $736 = (($735) + 1)|0;
         HEAP32[$732>>2] = $736;
         $737 = ($736>>>0)>(999999999);
         if ($737) {
          $a$5223$i = $a$6$i;$d$2222$i = $732;
         } else {
          $a$5$lcssa$i = $a$6$i;$d$2$lcssa$i = $732;
          break;
         }
        }
       } else {
        $a$5$lcssa$i = $a$3$lcssa$i;$d$2$lcssa$i = $705;
       }
       $738 = $a$5$lcssa$i;
       $739 = (($681) - ($738))|0;
       $740 = $739 >> 2;
       $741 = ($740*9)|0;
       $742 = HEAP32[$a$5$lcssa$i>>2]|0;
       $743 = ($742>>>0)<(10);
       if ($743) {
        $a$7$i = $a$5$lcssa$i;$d$3$i = $d$2$lcssa$i;$e$3$i = $741;
        break;
       } else {
        $e$2218$i = $741;$i$2217$i = 10;
       }
       while(1) {
        $744 = ($i$2217$i*10)|0;
        $745 = (($e$2218$i) + 1)|0;
        $746 = ($742>>>0)<($744>>>0);
        if ($746) {
         $a$7$i = $a$5$lcssa$i;$d$3$i = $d$2$lcssa$i;$e$3$i = $745;
         break;
        } else {
         $e$2218$i = $745;$i$2217$i = $744;
        }
       }
      }
     } while(0);
     $747 = (($d$3$i) + 4|0);
     $748 = ($z$3$lcssa$i>>>0)>($747>>>0);
     $$z$3$i = $748 ? $747 : $z$3$lcssa$i;
     $a$8$ph$i = $a$7$i;$e$4$ph$i = $e$3$i;$z$6$ph$i = $$z$3$i;
    } else {
     $a$8$ph$i = $a$3$lcssa$i;$e$4$ph$i = $e$1$i;$z$6$ph$i = $z$3$lcssa$i;
    }
    $749 = (0 - ($e$4$ph$i))|0;
    $z$6$i = $z$6$ph$i;
    while(1) {
     $750 = ($z$6$i>>>0)>($a$8$ph$i>>>0);
     if (!($750)) {
      $$lcssa300$i = 0;
      break;
     }
     $751 = (($z$6$i) + -4|0);
     $752 = HEAP32[$751>>2]|0;
     $753 = ($752|0)==(0);
     if ($753) {
      $z$6$i = $751;
     } else {
      $$lcssa300$i = 1;
      break;
     }
    }
    do {
     if ($694) {
      $754 = ($$p$i|0)==(0);
      $755 = $754&1;
      $$$p$i = (($755) + ($$p$i))|0;
      $756 = ($$$p$i|0)>($e$4$ph$i|0);
      $757 = ($e$4$ph$i|0)>(-5);
      $or$cond4$i = $756 & $757;
      if ($or$cond4$i) {
       $758 = (($t$0) + -1)|0;
       $$neg152$i = (($$$p$i) + -1)|0;
       $759 = (($$neg152$i) - ($e$4$ph$i))|0;
       $$013$i = $758;$$210$i = $759;
      } else {
       $760 = (($t$0) + -2)|0;
       $761 = (($$$p$i) + -1)|0;
       $$013$i = $760;$$210$i = $761;
      }
      $762 = $fl$1$ & 8;
      $763 = ($762|0)==(0);
      if (!($763)) {
       $$114$i = $$013$i;$$311$i = $$210$i;
       break;
      }
      do {
       if ($$lcssa300$i) {
        $764 = (($z$6$i) + -4|0);
        $765 = HEAP32[$764>>2]|0;
        $766 = ($765|0)==(0);
        if ($766) {
         $j$2$i = 9;
         break;
        }
        $767 = (($765>>>0) % 10)&-1;
        $768 = ($767|0)==(0);
        if ($768) {
         $i$3209$i = 10;$j$1210$i = 0;
        } else {
         $j$2$i = 0;
         break;
        }
        while(1) {
         $769 = ($i$3209$i*10)|0;
         $770 = (($j$1210$i) + 1)|0;
         $771 = (($765>>>0) % ($769>>>0))&-1;
         $772 = ($771|0)==(0);
         if ($772) {
          $i$3209$i = $769;$j$1210$i = $770;
         } else {
          $j$2$i = $770;
          break;
         }
        }
       } else {
        $j$2$i = 9;
       }
      } while(0);
      $773 = $$013$i | 32;
      $774 = ($773|0)==(102);
      $775 = $z$6$i;
      $776 = (($775) - ($681))|0;
      $777 = $776 >> 2;
      $778 = ($777*9)|0;
      $779 = (($778) + -9)|0;
      if ($774) {
       $780 = (($779) - ($j$2$i))|0;
       $781 = ($780|0)<(0);
       $$23$i = $781 ? 0 : $780;
       $782 = ($$210$i|0)<($$23$i|0);
       $$210$$23$i = $782 ? $$210$i : $$23$i;
       $$114$i = $$013$i;$$311$i = $$210$$23$i;
       break;
      } else {
       $783 = (($779) + ($e$4$ph$i))|0;
       $784 = (($783) - ($j$2$i))|0;
       $785 = ($784|0)<(0);
       $$25$i = $785 ? 0 : $784;
       $786 = ($$210$i|0)<($$25$i|0);
       $$210$$25$i = $786 ? $$210$i : $$25$i;
       $$114$i = $$013$i;$$311$i = $$210$$25$i;
       break;
      }
     } else {
      $$114$i = $t$0;$$311$i = $$p$i;
     }
    } while(0);
    $787 = ($$311$i|0)!=(0);
    if ($787) {
     $791 = 1;
    } else {
     $788 = $fl$1$ & 8;
     $789 = ($788|0)!=(0);
     $791 = $789;
    }
    $790 = $791&1;
    $792 = $$114$i | 32;
    $793 = ($792|0)==(102);
    if ($793) {
     $794 = ($e$4$ph$i|0)>(0);
     $795 = $794 ? $e$4$ph$i : 0;
     $$pn$i = $795;$estr$2$i = 0;
    } else {
     $796 = ($e$4$ph$i|0)<(0);
     $797 = $796 ? $749 : $e$4$ph$i;
     $798 = ($797|0)<(0);
     if ($798) {
      $799 = ($797|0)<(0);
      $800 = $799 << 31 >> 31;
      $$05$i79$i = $6;$801 = $797;$802 = $800;
      while(1) {
       $803 = (___uremdi3(($801|0),($802|0),10,0)|0);
       $804 = tempRet0;
       $805 = $803 | 48;
       $806 = $805&255;
       $807 = (($$05$i79$i) + -1|0);
       HEAP8[$807>>0] = $806;
       $808 = (___udivdi3(($801|0),($802|0),10,0)|0);
       $809 = tempRet0;
       $810 = ($802>>>0)>(9);
       $811 = ($802|0)==(9);
       $812 = ($801>>>0)>(4294967295);
       $813 = $811 & $812;
       $814 = $810 | $813;
       if ($814) {
        $$05$i79$i = $807;$801 = $808;$802 = $809;
       } else {
        break;
       }
      }
      $$0$lcssa$i84$i = $807;$$01$lcssa$off0$i85$i = $808;
     } else {
      $$0$lcssa$i84$i = $6;$$01$lcssa$off0$i85$i = $797;
     }
     $815 = ($$01$lcssa$off0$i85$i|0)==(0);
     if ($815) {
      $estr$1$ph$i = $$0$lcssa$i84$i;
     } else {
      $$12$i87$i = $$0$lcssa$i84$i;$y$03$i86$i = $$01$lcssa$off0$i85$i;
      while(1) {
       $816 = (($y$03$i86$i>>>0) % 10)&-1;
       $817 = $816 | 48;
       $818 = $817&255;
       $819 = (($$12$i87$i) + -1|0);
       HEAP8[$819>>0] = $818;
       $820 = (($y$03$i86$i>>>0) / 10)&-1;
       $821 = ($y$03$i86$i>>>0)<(10);
       if ($821) {
        $estr$1$ph$i = $819;
        break;
       } else {
        $$12$i87$i = $819;$y$03$i86$i = $820;
       }
      }
     }
     $822 = $estr$1$ph$i;
     $823 = (($8) - ($822))|0;
     $824 = ($823|0)<(2);
     if ($824) {
      $estr$1200$i = $estr$1$ph$i;
      while(1) {
       $825 = (($estr$1200$i) + -1|0);
       HEAP8[$825>>0] = 48;
       $826 = $825;
       $827 = (($8) - ($826))|0;
       $828 = ($827|0)<(2);
       if ($828) {
        $estr$1200$i = $825;
       } else {
        $estr$1$lcssa$i = $825;
        break;
       }
      }
     } else {
      $estr$1$lcssa$i = $estr$1$ph$i;
     }
     $829 = $e$4$ph$i >> 31;
     $830 = $829 & 2;
     $831 = (($830) + 43)|0;
     $832 = $831&255;
     $833 = (($estr$1$lcssa$i) + -1|0);
     HEAP8[$833>>0] = $832;
     $834 = $$114$i&255;
     $835 = (($estr$1$lcssa$i) + -2|0);
     HEAP8[$835>>0] = $834;
     $836 = $835;
     $837 = (($8) - ($836))|0;
     $$pn$i = $837;$estr$2$i = $835;
    }
    $838 = (($pl$0$i) + 1)|0;
    $839 = (($838) + ($$311$i))|0;
    $l$1$i = (($839) + ($790))|0;
    $840 = (($l$1$i) + ($$pn$i))|0;
    $841 = $fl$1$ & 73728;
    $842 = ($841|0)==(0);
    $843 = ($840|0)<($w$1|0);
    $or$cond$i93$i = $842 & $843;
    if ($or$cond$i93$i) {
     $844 = (($w$1) - ($840))|0;
     $845 = ($844>>>0)>(256);
     $846 = $845 ? 256 : $844;
     _memset(($pad$i|0),32,($846|0))|0;
     $847 = ($844>>>0)>(255);
     if ($847) {
      $$01$i94$i = $844;
      while(1) {
       (___fwritex($pad$i,256,$f)|0);
       $848 = (($$01$i94$i) + -256)|0;
       $849 = ($848>>>0)>(255);
       if ($849) {
        $$01$i94$i = $848;
       } else {
        $$0$lcssa$i96$i = $848;
        break;
       }
      }
     } else {
      $$0$lcssa$i96$i = $844;
     }
     (___fwritex($pad$i,$$0$lcssa$i96$i,$f)|0);
    }
    (___fwritex($prefix$0$i,$pl$0$i,$f)|0);
    $850 = ($841|0)==(65536);
    $or$cond$i100$i = $850 & $843;
    if ($or$cond$i100$i) {
     $851 = (($w$1) - ($840))|0;
     $852 = ($851>>>0)>(256);
     $853 = $852 ? 256 : $851;
     _memset(($pad$i|0),48,($853|0))|0;
     $854 = ($851>>>0)>(255);
     if ($854) {
      $$01$i101$i = $851;
      while(1) {
       (___fwritex($pad$i,256,$f)|0);
       $855 = (($$01$i101$i) + -256)|0;
       $856 = ($855>>>0)>(255);
       if ($856) {
        $$01$i101$i = $855;
       } else {
        $$0$lcssa$i103$i = $855;
        break;
       }
      }
     } else {
      $$0$lcssa$i103$i = $851;
     }
     (___fwritex($pad$i,$$0$lcssa$i103$i,$f)|0);
    }
    do {
     if ($793) {
      $857 = ($a$8$ph$i>>>0)>($$31$i>>>0);
      $r$0$a$8$i = $857 ? $$31$i : $a$8$ph$i;
      $d$4183$i = $r$0$a$8$i;
      while(1) {
       $858 = HEAP32[$d$4183$i>>2]|0;
       $859 = ($858|0)==(0);
       if ($859) {
        $$1$lcssa$i112$i = $13;
       } else {
        $$12$i110$i = $13;$y$03$i109$i = $858;
        while(1) {
         $860 = (($y$03$i109$i>>>0) % 10)&-1;
         $861 = $860 | 48;
         $862 = $861&255;
         $863 = (($$12$i110$i) + -1|0);
         HEAP8[$863>>0] = $862;
         $864 = (($y$03$i109$i>>>0) / 10)&-1;
         $865 = ($y$03$i109$i>>>0)<(10);
         if ($865) {
          $$1$lcssa$i112$i = $863;
          break;
         } else {
          $$12$i110$i = $863;$y$03$i109$i = $864;
         }
        }
       }
       $866 = ($d$4183$i|0)==($r$0$a$8$i|0);
       do {
        if ($866) {
         $870 = ($$1$lcssa$i112$i|0)==($13|0);
         if (!($870)) {
          $s7$1$i = $$1$lcssa$i112$i;
          break;
         }
         HEAP8[$15>>0] = 48;
         $s7$1$i = $15;
        } else {
         $867 = ($$1$lcssa$i112$i>>>0)>($buf$i>>>0);
         if ($867) {
          $s7$0180$i = $$1$lcssa$i112$i;
         } else {
          $s7$1$i = $$1$lcssa$i112$i;
          break;
         }
         while(1) {
          $868 = (($s7$0180$i) + -1|0);
          HEAP8[$868>>0] = 48;
          $869 = ($868>>>0)>($buf$i>>>0);
          if ($869) {
           $s7$0180$i = $868;
          } else {
           $s7$1$i = $868;
           break;
          }
         }
        }
       } while(0);
       $871 = $s7$1$i;
       $872 = (($14) - ($871))|0;
       (___fwritex($s7$1$i,$872,$f)|0);
       $873 = (($d$4183$i) + 4|0);
       $874 = ($873>>>0)>($$31$i>>>0);
       if ($874) {
        break;
       } else {
        $d$4183$i = $873;
       }
      }
      if (!($787)) {
       $875 = $fl$1$ & 8;
       $876 = ($875|0)==(0);
       if ($876) {
        break;
       }
      }
      (___fwritex(103480,1,$f)|0);
      $877 = ($873>>>0)<($z$6$i>>>0);
      $878 = ($$311$i|0)>(0);
      $or$cond28173$i = $877 & $878;
      if ($or$cond28173$i) {
       $$412175$i = $$311$i;$d$5174$i = $873;
       while(1) {
        $879 = HEAP32[$d$5174$i>>2]|0;
        $880 = ($879|0)==(0);
        if ($880) {
         $s8$0169$i = $13;
         label = 300;
        } else {
         $$12$i119$i = $13;$y$03$i118$i = $879;
         while(1) {
          $881 = (($y$03$i118$i>>>0) % 10)&-1;
          $882 = $881 | 48;
          $883 = $882&255;
          $884 = (($$12$i119$i) + -1|0);
          HEAP8[$884>>0] = $883;
          $885 = (($y$03$i118$i>>>0) / 10)&-1;
          $886 = ($y$03$i118$i>>>0)<(10);
          if ($886) {
           break;
          } else {
           $$12$i119$i = $884;$y$03$i118$i = $885;
          }
         }
         $887 = ($884>>>0)>($buf$i>>>0);
         if ($887) {
          $s8$0169$i = $884;
          label = 300;
         } else {
          $s8$0$lcssa$i = $884;
         }
        }
        if ((label|0) == 300) {
         while(1) {
          label = 0;
          $888 = (($s8$0169$i) + -1|0);
          HEAP8[$888>>0] = 48;
          $889 = ($888>>>0)>($buf$i>>>0);
          if ($889) {
           $s8$0169$i = $888;
           label = 300;
          } else {
           $s8$0$lcssa$i = $888;
           break;
          }
         }
        }
        $890 = ($$412175$i|0)>(9);
        $891 = $890 ? 9 : $$412175$i;
        (___fwritex($s8$0$lcssa$i,$891,$f)|0);
        $892 = (($d$5174$i) + 4|0);
        $893 = (($$412175$i) + -9)|0;
        $894 = ($892>>>0)<($z$6$i>>>0);
        $895 = ($893|0)>(0);
        $or$cond28$i = $894 & $895;
        if ($or$cond28$i) {
         $$412175$i = $893;$d$5174$i = $892;
        } else {
         $$412$lcssa$i = $893;
         break;
        }
       }
      } else {
       $$412$lcssa$i = $$311$i;
      }
      $896 = ($$412$lcssa$i|0)>(0);
      if (!($896)) {
       break;
      }
      $897 = ($$412$lcssa$i>>>0)>(256);
      $898 = $897 ? 256 : $$412$lcssa$i;
      _memset(($pad$i|0),48,($898|0))|0;
      $899 = ($$412$lcssa$i>>>0)>(255);
      if ($899) {
       $$01$i125$i = $$412$lcssa$i;
       while(1) {
        (___fwritex($pad$i,256,$f)|0);
        $900 = (($$01$i125$i) + -256)|0;
        $901 = ($900>>>0)>(255);
        if ($901) {
         $$01$i125$i = $900;
        } else {
         $$0$lcssa$i127$i = $900;
         break;
        }
       }
      } else {
       $$0$lcssa$i127$i = $$412$lcssa$i;
      }
      (___fwritex($pad$i,$$0$lcssa$i127$i,$f)|0);
     } else {
      $902 = (($a$8$ph$i) + 4|0);
      $z$6$$i = $$lcssa300$i ? $z$6$i : $902;
      $903 = ($$311$i|0)>(-1);
      do {
       if ($903) {
        $904 = $fl$1$ & 8;
        $$not$i = ($904|0)!=(0);
        $$5193$i = $$311$i;$d$6192$i = $a$8$ph$i;
        while(1) {
         $905 = HEAP32[$d$6192$i>>2]|0;
         $906 = ($905|0)==(0);
         if ($906) {
          label = 311;
         } else {
          $$12$i134$i = $13;$y$03$i133$i = $905;
          while(1) {
           $907 = (($y$03$i133$i>>>0) % 10)&-1;
           $908 = $907 | 48;
           $909 = $908&255;
           $910 = (($$12$i134$i) + -1|0);
           HEAP8[$910>>0] = $909;
           $911 = (($y$03$i133$i>>>0) / 10)&-1;
           $912 = ($y$03$i133$i>>>0)<(10);
           if ($912) {
            break;
           } else {
            $$12$i134$i = $910;$y$03$i133$i = $911;
           }
          }
          $913 = ($910|0)==($13|0);
          if ($913) {
           label = 311;
          } else {
           $s9$0$i = $910;
          }
         }
         if ((label|0) == 311) {
          label = 0;
          HEAP8[$15>>0] = 48;
          $s9$0$i = $15;
         }
         $914 = ($d$6192$i|0)==($a$8$ph$i|0);
         do {
          if ($914) {
           $918 = (($s9$0$i) + 1|0);
           (___fwritex($s9$0$i,1,$f)|0);
           $919 = ($$5193$i|0)>(0);
           $brmerge$i = $919 | $$not$i;
           if (!($brmerge$i)) {
            $s9$2$i = $918;
            break;
           }
           (___fwritex(103480,1,$f)|0);
           $s9$2$i = $918;
          } else {
           $915 = ($s9$0$i>>>0)>($buf$i>>>0);
           if ($915) {
            $s9$1188$i = $s9$0$i;
           } else {
            $s9$2$i = $s9$0$i;
            break;
           }
           while(1) {
            $916 = (($s9$1188$i) + -1|0);
            HEAP8[$916>>0] = 48;
            $917 = ($916>>>0)>($buf$i>>>0);
            if ($917) {
             $s9$1188$i = $916;
            } else {
             $s9$2$i = $916;
             break;
            }
           }
          }
         } while(0);
         $920 = $s9$2$i;
         $921 = (($14) - ($920))|0;
         $922 = ($921|0)<($$5193$i|0);
         $$$5$i = $922 ? $921 : $$5193$i;
         (___fwritex($s9$2$i,$$$5$i,$f)|0);
         $923 = (($$5193$i) - ($921))|0;
         $924 = (($d$6192$i) + 4|0);
         $925 = ($924>>>0)<($z$6$$i>>>0);
         $926 = ($923|0)>(-1);
         $or$cond29$i = $925 & $926;
         if ($or$cond29$i) {
          $$5193$i = $923;$d$6192$i = $924;
         } else {
          break;
         }
        }
        $927 = ($923|0)>(0);
        if (!($927)) {
         break;
        }
        $928 = ($923>>>0)>(256);
        $929 = $928 ? 256 : $923;
        _memset(($pad$i|0),48,($929|0))|0;
        $930 = ($923>>>0)>(255);
        if ($930) {
         $$01$i140$i = $923;
         while(1) {
          (___fwritex($pad$i,256,$f)|0);
          $931 = (($$01$i140$i) + -256)|0;
          $932 = ($931>>>0)>(255);
          if ($932) {
           $$01$i140$i = $931;
          } else {
           $$0$lcssa$i142$i = $931;
           break;
          }
         }
        } else {
         $$0$lcssa$i142$i = $923;
        }
        (___fwritex($pad$i,$$0$lcssa$i142$i,$f)|0);
       }
      } while(0);
      $933 = $estr$2$i;
      $934 = (($8) - ($933))|0;
      (___fwritex($estr$2$i,$934,$f)|0);
     }
    } while(0);
    $935 = ($841|0)==(8192);
    $or$cond$i$i = $935 & $843;
    if ($or$cond$i$i) {
     $936 = (($w$1) - ($840))|0;
     $937 = ($936>>>0)>(256);
     $938 = $937 ? 256 : $936;
     _memset(($pad$i|0),32,($938|0))|0;
     $939 = ($936>>>0)>(255);
     if ($939) {
      $$01$i$i = $936;
      while(1) {
       (___fwritex($pad$i,256,$f)|0);
       $940 = (($$01$i$i) + -256)|0;
       $941 = ($940>>>0)>(255);
       if ($941) {
        $$01$i$i = $940;
       } else {
        $$0$lcssa$i$i = $940;
        break;
       }
      }
     } else {
      $$0$lcssa$i$i = $936;
     }
     (___fwritex($pad$i,$$0$lcssa$i$i,$f)|0);
    }
    $w$30$i = $843 ? $w$1 : $840;
    $1045 = $228;$1046 = $207;$22 = $139;$cnt$0 = $cnt$1;$l$0 = $w$30$i;$l10n$0 = $l10n$3;
    continue L1;
    break;
   }
   case 110:  {
    switch ($st$0|0) {
    case 6:  {
     HEAP32[$207>>2] = $cnt$1;
     $1045 = $228;$1046 = $207;$22 = $139;$cnt$0 = $cnt$1;$l$0 = $36;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 0:  {
     HEAP32[$207>>2] = $cnt$1;
     $1045 = $228;$1046 = $207;$22 = $139;$cnt$0 = $cnt$1;$l$0 = $36;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 1:  {
     HEAP32[$207>>2] = $cnt$1;
     $1045 = $228;$1046 = $207;$22 = $139;$cnt$0 = $cnt$1;$l$0 = $36;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 7:  {
     $216 = ($cnt$1|0)<(0);
     $217 = $216 << 31 >> 31;
     $218 = $207;
     $219 = $218;
     HEAP32[$219>>2] = $cnt$1;
     $220 = (($218) + 4)|0;
     $221 = $220;
     HEAP32[$221>>2] = $217;
     $1045 = $228;$1046 = $207;$22 = $139;$cnt$0 = $cnt$1;$l$0 = $36;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 2:  {
     $208 = ($cnt$1|0)<(0);
     $209 = $208 << 31 >> 31;
     $210 = $207;
     $211 = $210;
     HEAP32[$211>>2] = $cnt$1;
     $212 = (($210) + 4)|0;
     $213 = $212;
     HEAP32[$213>>2] = $209;
     $1045 = $228;$1046 = $207;$22 = $139;$cnt$0 = $cnt$1;$l$0 = $36;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 3:  {
     $214 = $cnt$1&65535;
     HEAP16[$207>>1] = $214;
     $1045 = $228;$1046 = $207;$22 = $139;$cnt$0 = $cnt$1;$l$0 = $36;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 4:  {
     $215 = $cnt$1&255;
     HEAP8[$207>>0] = $215;
     $1045 = $228;$1046 = $207;$22 = $139;$cnt$0 = $cnt$1;$l$0 = $36;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    default: {
     $1045 = $228;$1046 = $207;$22 = $139;$cnt$0 = $cnt$1;$l$0 = $36;$l10n$0 = $l10n$3;
     continue L1;
    }
    }
    break;
   }
   case 117:  {
    $276 = $207;$278 = $228;$pl$0 = 0;$prefix$0 = 103384;
    label = 89;
    break;
   }
   case 67:  {
    $331 = $207;
    HEAP32[$wc>>2] = $331;
    HEAP32[$5>>2] = 0;
    $1055 = $wc;$1056 = $wc;$p$4296 = -1;
    label = 104;
    break;
   }
   case 83:  {
    $332 = ($p$0|0)==(0);
    if ($332) {
     $1057 = $207;$1058 = $207;$i$0166 = 0;
     label = 110;
    } else {
     $1055 = $207;$1056 = $207;$p$4296 = $p$0;
     label = 104;
    }
    break;
   }
   case 88: case 120:  {
    $fl$3 = $fl$1$;$p$1 = $p$0;$t$1 = $t$0;
    label = 77;
    break;
   }
   case 112:  {
    $222 = ($p$0>>>0)>(8);
    $223 = $222 ? $p$0 : 8;
    $224 = $fl$1$ | 8;
    $fl$3 = $224;$p$1 = $223;$t$1 = 120;
    label = 77;
    break;
   }
   case 109:  {
    $321 = (___errno_location()|0);
    $322 = HEAP32[$321>>2]|0;
    $323 = (_strerror(($322|0))|0);
    $a$1 = $323;
    label = 99;
    break;
   }
   case 115:  {
    $324 = ($207|0)==(0|0);
    $$17 = $324 ? 103400 : $207;
    $a$1 = $$17;
    label = 99;
    break;
   }
   case 111:  {
    $249 = $207;
    $250 = ($249|0)==(0);
    $251 = ($228|0)==(0);
    $252 = $250 & $251;
    if ($252) {
     $$0$lcssa$i43 = $2;
    } else {
     $$03$i40 = $2;$254 = $249;$258 = $228;
     while(1) {
      $253 = $254 & 7;
      $255 = $253 | 48;
      $256 = $255&255;
      $257 = (($$03$i40) + -1|0);
      HEAP8[$257>>0] = $256;
      $259 = (_bitshift64Lshr(($254|0),($258|0),3)|0);
      $260 = tempRet0;
      $261 = ($259|0)==(0);
      $262 = ($260|0)==(0);
      $263 = $261 & $262;
      if ($263) {
       $$0$lcssa$i43 = $257;
       break;
      } else {
       $$03$i40 = $257;$254 = $259;$258 = $260;
      }
     }
    }
    $264 = $fl$1$ & 8;
    $265 = ($264|0)==(0);
    if ($265) {
     $307 = $207;$310 = $228;$a$0 = $$0$lcssa$i43;$fl$4 = $fl$1$;$p$2 = $p$0;$pl$1 = 0;$prefix$1 = 103384;
     label = 94;
    } else {
     $$13 = $252 ? 103384 : ((103384 + 5|0));
     $266 = $252&1;
     $$14 = $266 ^ 1;
     $307 = $207;$310 = $228;$a$0 = $$0$lcssa$i43;$fl$4 = $fl$1$;$p$2 = $p$0;$pl$1 = $$14;$prefix$1 = $$13;
     label = 94;
    }
    break;
   }
   case 99:  {
    $319 = $207;
    $320 = $319&255;
    HEAP8[$4>>0] = $320;
    $1053 = $228;$1054 = $207;$a$2 = $4;$fl$6 = $206;$p$5 = 1;$pl$2 = 0;$prefix$2 = 103384;$z$2 = $2;
    break;
   }
   case 105: case 100:  {
    $267 = $207;
    $268 = ($228|0)<(0);
    if ($268) {
     $269 = (_i64Subtract(0,0,($267|0),($228|0))|0);
     $270 = tempRet0;
     $271 = $269;
     $276 = $271;$278 = $270;$pl$0 = 1;$prefix$0 = 103384;
     label = 89;
     break L92;
    }
    $272 = $fl$1$ & 2048;
    $273 = ($272|0)==(0);
    if ($273) {
     $274 = $fl$1$ & 1;
     $275 = ($274|0)==(0);
     $$15 = $275 ? 103384 : ((103384 + 2|0));
     $276 = $207;$278 = $228;$pl$0 = $274;$prefix$0 = $$15;
     label = 89;
    } else {
     $276 = $207;$278 = $228;$pl$0 = 1;$prefix$0 = ((103384 + 1|0));
     label = 89;
    }
    break;
   }
   default: {
    $1053 = $228;$1054 = $207;$a$2 = $22;$fl$6 = $fl$1$;$p$5 = $p$0;$pl$2 = 0;$prefix$2 = 103384;$z$2 = $2;
   }
   }
  } while(0);
  L445: do {
   if ((label|0) == 77) {
    label = 0;
    $225 = $207;
    $226 = $t$1 & 32;
    $227 = ($225|0)==(0);
    $229 = ($228|0)==(0);
    $230 = $227 & $229;
    if ($230) {
     $307 = $207;$310 = $228;$a$0 = $2;$fl$4 = $fl$3;$p$2 = $p$1;$pl$1 = 0;$prefix$1 = 103384;
     label = 94;
    } else {
     $$012$i = $2;$232 = $225;$239 = $228;
     while(1) {
      $231 = $232 & 15;
      $233 = (103464 + ($231)|0);
      $234 = HEAP8[$233>>0]|0;
      $235 = $234&255;
      $236 = $235 | $226;
      $237 = $236&255;
      $238 = (($$012$i) + -1|0);
      HEAP8[$238>>0] = $237;
      $240 = (_bitshift64Lshr(($232|0),($239|0),4)|0);
      $241 = tempRet0;
      $242 = ($240|0)==(0);
      $243 = ($241|0)==(0);
      $244 = $242 & $243;
      if ($244) {
       break;
      } else {
       $$012$i = $238;$232 = $240;$239 = $241;
      }
     }
     $245 = $fl$3 & 8;
     $246 = ($245|0)==(0);
     if ($246) {
      $307 = $207;$310 = $228;$a$0 = $238;$fl$4 = $fl$3;$p$2 = $p$1;$pl$1 = 0;$prefix$1 = 103384;
      label = 94;
     } else {
      $247 = $t$1 >> 4;
      $248 = (103384 + ($247)|0);
      $307 = $207;$310 = $228;$a$0 = $238;$fl$4 = $fl$3;$p$2 = $p$1;$pl$1 = 2;$prefix$1 = $248;
      label = 94;
     }
    }
   }
   else if ((label|0) == 89) {
    label = 0;
    $277 = $276;
    $279 = ($278>>>0)>(0);
    $280 = ($278|0)==(0);
    $281 = ($277>>>0)>(4294967295);
    $282 = $280 & $281;
    $283 = $279 | $282;
    if ($283) {
     $$05$i = $2;$284 = $277;$285 = $278;
     while(1) {
      $286 = (___uremdi3(($284|0),($285|0),10,0)|0);
      $287 = tempRet0;
      $288 = $286 | 48;
      $289 = $288&255;
      $290 = (($$05$i) + -1|0);
      HEAP8[$290>>0] = $289;
      $291 = (___udivdi3(($284|0),($285|0),10,0)|0);
      $292 = tempRet0;
      $293 = ($285>>>0)>(9);
      $294 = ($285|0)==(9);
      $295 = ($284>>>0)>(4294967295);
      $296 = $294 & $295;
      $297 = $293 | $296;
      if ($297) {
       $$05$i = $290;$284 = $291;$285 = $292;
      } else {
       break;
      }
     }
     $$0$lcssa$i45 = $290;$$01$lcssa$off0$i = $291;
    } else {
     $$0$lcssa$i45 = $2;$$01$lcssa$off0$i = $277;
    }
    $298 = ($$01$lcssa$off0$i|0)==(0);
    if ($298) {
     $307 = $276;$310 = $278;$a$0 = $$0$lcssa$i45;$fl$4 = $fl$1$;$p$2 = $p$0;$pl$1 = $pl$0;$prefix$1 = $prefix$0;
     label = 94;
    } else {
     $$12$i = $$0$lcssa$i45;$y$03$i = $$01$lcssa$off0$i;
     while(1) {
      $299 = (($y$03$i>>>0) % 10)&-1;
      $300 = $299 | 48;
      $301 = $300&255;
      $302 = (($$12$i) + -1|0);
      HEAP8[$302>>0] = $301;
      $303 = (($y$03$i>>>0) / 10)&-1;
      $304 = ($y$03$i>>>0)<(10);
      if ($304) {
       $307 = $276;$310 = $278;$a$0 = $302;$fl$4 = $fl$1$;$p$2 = $p$0;$pl$1 = $pl$0;$prefix$1 = $prefix$0;
       label = 94;
       break;
      } else {
       $$12$i = $302;$y$03$i = $303;
      }
     }
    }
   }
   else if ((label|0) == 99) {
    label = 0;
    $325 = (_memchr($a$1,0,$p$0)|0);
    $326 = ($325|0)==(0|0);
    if ($326) {
     $327 = (($a$1) + ($p$0)|0);
     $1053 = $228;$1054 = $207;$a$2 = $a$1;$fl$6 = $206;$p$5 = $p$0;$pl$2 = 0;$prefix$2 = 103384;$z$2 = $327;
     break;
    } else {
     $328 = $325;
     $329 = $a$1;
     $330 = (($328) - ($329))|0;
     $1053 = $228;$1054 = $207;$a$2 = $a$1;$fl$6 = $206;$p$5 = $330;$pl$2 = 0;$prefix$2 = 103384;$z$2 = $325;
     break;
    }
   }
   else if ((label|0) == 104) {
    label = 0;
    $i$0168 = 0;$l$1167 = 0;$ws$0169 = $1055;
    while(1) {
     $336 = HEAP32[$ws$0169>>2]|0;
     $337 = ($336|0)==(0);
     if ($337) {
      $i$0$lcssa = $i$0168;$l$1$lcssa = $l$1167;
      break;
     }
     $338 = (_wctomb($mb,$336)|0);
     $339 = ($338|0)>(-1);
     if (!($339)) {
      $$0 = -1;
      label = 362;
      break L1;
     }
     $340 = (($p$4296) - ($i$0168))|0;
     $341 = ($338>>>0)>($340>>>0);
     $334 = (($338) + ($i$0168))|0;
     if ($341) {
      $1057 = $1055;$1058 = $1056;$i$0166 = $i$0168;
      label = 110;
      break L445;
     }
     $333 = (($ws$0169) + 4|0);
     $335 = ($334>>>0)<($p$4296>>>0);
     if ($335) {
      $i$0168 = $334;$l$1167 = $338;$ws$0169 = $333;
     } else {
      $i$0$lcssa = $334;$l$1$lcssa = $338;
      break;
     }
    }
    $342 = ($l$1$lcssa|0)<(0);
    if ($342) {
     $$0 = -1;
     label = 362;
     break L1;
    } else {
     $1057 = $1055;$1058 = $1056;$i$0166 = $i$0$lcssa;
     label = 110;
    }
   }
  } while(0);
  if ((label|0) == 94) {
   label = 0;
   $305 = ($p$2|0)>(-1);
   $306 = $fl$4 & -65537;
   $$fl$4 = $305 ? $306 : $fl$4;
   $308 = $307;
   $309 = ($308|0)==(0);
   $311 = ($310|0)==(0);
   $312 = $309 & $311;
   $313 = ($p$2|0)==(0);
   $or$cond = $312 & $313;
   if ($or$cond) {
    $1053 = $310;$1054 = $307;$a$2 = $2;$fl$6 = $$fl$4;$p$5 = 0;$pl$2 = $pl$1;$prefix$2 = $prefix$1;$z$2 = $2;
   } else {
    $314 = $a$0;
    $315 = (($3) - ($314))|0;
    $316 = $312&1;
    $317 = (($316) + ($315))|0;
    $318 = ($p$2|0)>($317|0);
    $p$2$ = $318 ? $p$2 : $317;
    $1053 = $310;$1054 = $307;$a$2 = $a$0;$fl$6 = $$fl$4;$p$5 = $p$2$;$pl$2 = $pl$1;$prefix$2 = $prefix$1;$z$2 = $2;
   }
  }
  else if ((label|0) == 110) {
   label = 0;
   $343 = $fl$1$ & 73728;
   $344 = ($343|0)==(0);
   $345 = ($i$0166|0)<($w$1|0);
   $or$cond$i56 = $344 & $345;
   if ($or$cond$i56) {
    $346 = (($w$1) - ($i$0166))|0;
    $347 = ($346>>>0)>(256);
    $348 = $347 ? 256 : $346;
    _memset(($pad$i|0),32,($348|0))|0;
    $349 = ($346>>>0)>(255);
    if ($349) {
     $$01$i57 = $346;
     while(1) {
      (___fwritex($pad$i,256,$f)|0);
      $350 = (($$01$i57) + -256)|0;
      $351 = ($350>>>0)>(255);
      if ($351) {
       $$01$i57 = $350;
      } else {
       $$0$lcssa$i59 = $350;
       break;
      }
     }
    } else {
     $$0$lcssa$i59 = $346;
    }
    (___fwritex($pad$i,$$0$lcssa$i59,$f)|0);
   }
   $352 = ($i$0166|0)==(0);
   L479: do {
    if (!($352)) {
     $i$1174 = 0;$ws$1175 = $1057;
     while(1) {
      $353 = HEAP32[$ws$1175>>2]|0;
      $354 = ($353|0)==(0);
      if ($354) {
       break L479;
      }
      $355 = (_wctomb($mb,$353)|0);
      $356 = (($355) + ($i$1174))|0;
      $357 = ($356|0)>($i$0166|0);
      if ($357) {
       break L479;
      }
      $358 = (($ws$1175) + 4|0);
      (___fwritex($mb,$355,$f)|0);
      $359 = ($356>>>0)<($i$0166>>>0);
      if ($359) {
       $i$1174 = $356;$ws$1175 = $358;
      } else {
       break;
      }
     }
    }
   } while(0);
   $360 = ($343|0)==(8192);
   $or$cond$i63 = $360 & $345;
   if ($or$cond$i63) {
    $361 = (($w$1) - ($i$0166))|0;
    $362 = ($361>>>0)>(256);
    $363 = $362 ? 256 : $361;
    _memset(($pad$i|0),32,($363|0))|0;
    $364 = ($361>>>0)>(255);
    if ($364) {
     $$01$i64 = $361;
     while(1) {
      (___fwritex($pad$i,256,$f)|0);
      $365 = (($$01$i64) + -256)|0;
      $366 = ($365>>>0)>(255);
      if ($366) {
       $$01$i64 = $365;
      } else {
       $$0$lcssa$i66 = $365;
       break;
      }
     }
    } else {
     $$0$lcssa$i66 = $361;
    }
    (___fwritex($pad$i,$$0$lcssa$i66,$f)|0);
   }
   $367 = $345 ? $w$1 : $i$0166;
   $1045 = $228;$1046 = $1058;$22 = $139;$cnt$0 = $cnt$1;$l$0 = $367;$l10n$0 = $l10n$3;
   continue;
  }
  $942 = $z$2;
  $943 = $a$2;
  $944 = (($942) - ($943))|0;
  $945 = ($p$5|0)<($944|0);
  $$p$5 = $945 ? $944 : $p$5;
  $946 = (($pl$2) + ($$p$5))|0;
  $947 = ($w$1|0)<($946|0);
  $w$2 = $947 ? $946 : $w$1;
  $948 = $fl$6 & 73728;
  $949 = ($948|0)==(0);
  $950 = ($946|0)<($w$2|0);
  $or$cond$i73 = $949 & $950;
  if ($or$cond$i73) {
   $951 = (($w$2) - ($946))|0;
   $952 = ($951>>>0)>(256);
   $953 = $952 ? 256 : $951;
   _memset(($pad$i|0),32,($953|0))|0;
   $954 = ($951>>>0)>(255);
   if ($954) {
    $$01$i74 = $951;
    while(1) {
     (___fwritex($pad$i,256,$f)|0);
     $955 = (($$01$i74) + -256)|0;
     $956 = ($955>>>0)>(255);
     if ($956) {
      $$01$i74 = $955;
     } else {
      $$0$lcssa$i76 = $955;
      break;
     }
    }
   } else {
    $$0$lcssa$i76 = $951;
   }
   (___fwritex($pad$i,$$0$lcssa$i76,$f)|0);
  }
  (___fwritex($prefix$2,$pl$2,$f)|0);
  $957 = ($948|0)==(65536);
  $or$cond$i49 = $957 & $950;
  if ($or$cond$i49) {
   $958 = (($w$2) - ($946))|0;
   $959 = ($958>>>0)>(256);
   $960 = $959 ? 256 : $958;
   _memset(($pad$i|0),48,($960|0))|0;
   $961 = ($958>>>0)>(255);
   if ($961) {
    $$01$i50 = $958;
    while(1) {
     (___fwritex($pad$i,256,$f)|0);
     $962 = (($$01$i50) + -256)|0;
     $963 = ($962>>>0)>(255);
     if ($963) {
      $$01$i50 = $962;
     } else {
      $$0$lcssa$i52 = $962;
      break;
     }
    }
   } else {
    $$0$lcssa$i52 = $958;
   }
   (___fwritex($pad$i,$$0$lcssa$i52,$f)|0);
  }
  $964 = ($944|0)<($$p$5|0);
  if ($964) {
   $965 = (($$p$5) - ($944))|0;
   $966 = ($965>>>0)>(256);
   $967 = $966 ? 256 : $965;
   _memset(($pad$i|0),48,($967|0))|0;
   $968 = ($965>>>0)>(255);
   if ($968) {
    $$01$i35 = $965;
    while(1) {
     (___fwritex($pad$i,256,$f)|0);
     $969 = (($$01$i35) + -256)|0;
     $970 = ($969>>>0)>(255);
     if ($970) {
      $$01$i35 = $969;
     } else {
      $$0$lcssa$i37 = $969;
      break;
     }
    }
   } else {
    $$0$lcssa$i37 = $965;
   }
   (___fwritex($pad$i,$$0$lcssa$i37,$f)|0);
  }
  (___fwritex($a$2,$944,$f)|0);
  $971 = ($948|0)==(8192);
  $or$cond$i = $971 & $950;
  if (!($or$cond$i)) {
   $1045 = $1053;$1046 = $1054;$22 = $139;$cnt$0 = $cnt$1;$l$0 = $w$2;$l10n$0 = $l10n$3;
   continue;
  }
  $972 = (($w$2) - ($946))|0;
  $973 = ($972>>>0)>(256);
  $974 = $973 ? 256 : $972;
  _memset(($pad$i|0),32,($974|0))|0;
  $975 = ($972>>>0)>(255);
  if ($975) {
   $$01$i = $972;
   while(1) {
    (___fwritex($pad$i,256,$f)|0);
    $976 = (($$01$i) + -256)|0;
    $977 = ($976>>>0)>(255);
    if ($977) {
     $$01$i = $976;
    } else {
     $$0$lcssa$i = $976;
     break;
    }
   }
  } else {
   $$0$lcssa$i = $972;
  }
  (___fwritex($pad$i,$$0$lcssa$i,$f)|0);
  $1045 = $1053;$1046 = $1054;$22 = $139;$cnt$0 = $cnt$1;$l$0 = $w$2;$l10n$0 = $l10n$3;
 }
 if ((label|0) == 344) {
  $978 = ($f|0)==(0|0);
  if (!($978)) {
   $$0 = $cnt$1;
   STACKTOP = sp;return ($$0|0);
  }
  $979 = ($l10n$0|0)==(0);
  if ($979) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  } else {
   $i$289 = 1;
  }
  while(1) {
   $980 = (($nl_type) + ($i$289<<2)|0);
   $981 = HEAP32[$980>>2]|0;
   $982 = ($981|0)==(0);
   if ($982) {
    $i$388 = $i$289;
    break;
   }
   $983 = (($nl_arg) + ($i$289<<3)|0);
   $984 = ($981>>>0)>(20);
   L531: do {
    if (!($984)) {
     do {
      switch ($981|0) {
      case 9:  {
       $arglist_current35 = HEAP32[$ap>>2]|0;
       $985 = HEAP32[$arglist_current35>>2]|0;
       $arglist_next36 = (($arglist_current35) + 4|0);
       HEAP32[$ap>>2] = $arglist_next36;
       HEAP32[$983>>2] = $985;
       break L531;
       break;
      }
      case 10:  {
       $arglist_current38 = HEAP32[$ap>>2]|0;
       $986 = HEAP32[$arglist_current38>>2]|0;
       $arglist_next39 = (($arglist_current38) + 4|0);
       HEAP32[$ap>>2] = $arglist_next39;
       $987 = ($986|0)<(0);
       $988 = $987 << 31 >> 31;
       $989 = $983;
       $990 = $989;
       HEAP32[$990>>2] = $986;
       $991 = (($989) + 4)|0;
       $992 = $991;
       HEAP32[$992>>2] = $988;
       break L531;
       break;
      }
      case 11:  {
       $arglist_current41 = HEAP32[$ap>>2]|0;
       $993 = HEAP32[$arglist_current41>>2]|0;
       $arglist_next42 = (($arglist_current41) + 4|0);
       HEAP32[$ap>>2] = $arglist_next42;
       $994 = $983;
       $995 = $994;
       HEAP32[$995>>2] = $993;
       $996 = (($994) + 4)|0;
       $997 = $996;
       HEAP32[$997>>2] = 0;
       break L531;
       break;
      }
      case 12:  {
       $arglist_current44 = HEAP32[$ap>>2]|0;
       $998 = $arglist_current44;
       $999 = $998;
       $1000 = HEAP32[$999>>2]|0;
       $1001 = (($998) + 4)|0;
       $1002 = $1001;
       $1003 = HEAP32[$1002>>2]|0;
       $arglist_next45 = (($arglist_current44) + 8|0);
       HEAP32[$ap>>2] = $arglist_next45;
       $1004 = $983;
       $1005 = $1004;
       HEAP32[$1005>>2] = $1000;
       $1006 = (($1004) + 4)|0;
       $1007 = $1006;
       HEAP32[$1007>>2] = $1003;
       break L531;
       break;
      }
      case 13:  {
       $arglist_current47 = HEAP32[$ap>>2]|0;
       $1008 = HEAP32[$arglist_current47>>2]|0;
       $arglist_next48 = (($arglist_current47) + 4|0);
       HEAP32[$ap>>2] = $arglist_next48;
       $1009 = $1008&65535;
       $1010 = $1009 << 16 >> 16;
       $1011 = ($1010|0)<(0);
       $1012 = $1011 << 31 >> 31;
       $1013 = $983;
       $1014 = $1013;
       HEAP32[$1014>>2] = $1010;
       $1015 = (($1013) + 4)|0;
       $1016 = $1015;
       HEAP32[$1016>>2] = $1012;
       break L531;
       break;
      }
      case 14:  {
       $arglist_current50 = HEAP32[$ap>>2]|0;
       $1017 = HEAP32[$arglist_current50>>2]|0;
       $arglist_next51 = (($arglist_current50) + 4|0);
       HEAP32[$ap>>2] = $arglist_next51;
       $$mask1$i = $1017 & 65535;
       $1018 = $983;
       $1019 = $1018;
       HEAP32[$1019>>2] = $$mask1$i;
       $1020 = (($1018) + 4)|0;
       $1021 = $1020;
       HEAP32[$1021>>2] = 0;
       break L531;
       break;
      }
      case 15:  {
       $arglist_current53 = HEAP32[$ap>>2]|0;
       $1022 = HEAP32[$arglist_current53>>2]|0;
       $arglist_next54 = (($arglist_current53) + 4|0);
       HEAP32[$ap>>2] = $arglist_next54;
       $1023 = $1022&255;
       $1024 = $1023 << 24 >> 24;
       $1025 = ($1024|0)<(0);
       $1026 = $1025 << 31 >> 31;
       $1027 = $983;
       $1028 = $1027;
       HEAP32[$1028>>2] = $1024;
       $1029 = (($1027) + 4)|0;
       $1030 = $1029;
       HEAP32[$1030>>2] = $1026;
       break L531;
       break;
      }
      case 16:  {
       $arglist_current56 = HEAP32[$ap>>2]|0;
       $1031 = HEAP32[$arglist_current56>>2]|0;
       $arglist_next57 = (($arglist_current56) + 4|0);
       HEAP32[$ap>>2] = $arglist_next57;
       $$mask$i = $1031 & 255;
       $1032 = $983;
       $1033 = $1032;
       HEAP32[$1033>>2] = $$mask$i;
       $1034 = (($1032) + 4)|0;
       $1035 = $1034;
       HEAP32[$1035>>2] = 0;
       break L531;
       break;
      }
      case 17:  {
       $arglist_current59 = HEAP32[$ap>>2]|0;
       HEAP32[tempDoublePtr>>2]=HEAP32[$arglist_current59>>2];HEAP32[tempDoublePtr+4>>2]=HEAP32[$arglist_current59+4>>2];$1036 = +HEAPF64[tempDoublePtr>>3];
       $arglist_next60 = (($arglist_current59) + 8|0);
       HEAP32[$ap>>2] = $arglist_next60;
       HEAPF64[$983>>3] = $1036;
       break L531;
       break;
      }
      case 18:  {
       $arglist_current62 = HEAP32[$ap>>2]|0;
       HEAP32[tempDoublePtr>>2]=HEAP32[$arglist_current62>>2];HEAP32[tempDoublePtr+4>>2]=HEAP32[$arglist_current62+4>>2];$1037 = +HEAPF64[tempDoublePtr>>3];
       $arglist_next63 = (($arglist_current62) + 8|0);
       HEAP32[$ap>>2] = $arglist_next63;
       HEAPF64[$983>>3] = $1037;
       break L531;
       break;
      }
      default: {
       break L531;
      }
      }
     } while(0);
    }
   } while(0);
   $1038 = (($i$289) + 1)|0;
   $1039 = ($1038|0)<(10);
   if ($1039) {
    $i$289 = $1038;
   } else {
    $$0 = 1;
    label = 362;
    break;
   }
  }
  if ((label|0) == 362) {
   STACKTOP = sp;return ($$0|0);
  }
  while(1) {
   $1042 = (($nl_type) + ($i$388<<2)|0);
   $1043 = HEAP32[$1042>>2]|0;
   $1044 = ($1043|0)==(0);
   $1040 = (($i$388) + 1)|0;
   if (!($1044)) {
    $$0 = -1;
    label = 362;
    break;
   }
   $1041 = ($1040|0)<(10);
   if ($1041) {
    $i$388 = $1040;
   } else {
    $$0 = 1;
    label = 362;
    break;
   }
  }
  if ((label|0) == 362) {
   STACKTOP = sp;return ($$0|0);
  }
 }
 else if ((label|0) == 362) {
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function _vsnprintf($s,$n,$fmt,$ap) {
 $s = $s|0;
 $n = $n|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 var $$$02 = 0, $$0 = 0, $$01 = 0, $$02 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $b = 0, $f = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0;
 $b = sp + 112|0;
 $f = sp;
 dest=$f+0|0; src=103488+0|0; stop=dest+112|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $0 = (($n) + -1)|0;
 $1 = ($0>>>0)>(2147483646);
 if ($1) {
  $2 = ($n|0)==(0);
  if ($2) {
   $$01 = $b;$$02 = 1;
  } else {
   $3 = (___errno_location()|0);
   HEAP32[$3>>2] = 75;
   $$0 = -1;
   STACKTOP = sp;return ($$0|0);
  }
 } else {
  $$01 = $s;$$02 = $n;
 }
 $4 = $$01;
 $5 = (-2 - ($4))|0;
 $6 = ($$02>>>0)>($5>>>0);
 $$$02 = $6 ? $5 : $$02;
 $7 = (($f) + 48|0);
 HEAP32[$7>>2] = $$$02;
 $8 = (($f) + 20|0);
 HEAP32[$8>>2] = $$01;
 $9 = (($f) + 44|0);
 HEAP32[$9>>2] = $$01;
 $10 = (($$01) + ($$$02)|0);
 $11 = (($f) + 16|0);
 HEAP32[$11>>2] = $10;
 $12 = (($f) + 28|0);
 HEAP32[$12>>2] = $10;
 $13 = (_MUSL_vfprintf($f,$fmt,$ap)|0);
 $14 = ($$$02|0)==(0);
 if ($14) {
  $$0 = $13;
  STACKTOP = sp;return ($$0|0);
 }
 $15 = HEAP32[$8>>2]|0;
 $16 = HEAP32[$11>>2]|0;
 $17 = ($15|0)==($16|0);
 $18 = $17 << 31 >> 31;
 $19 = (($15) + ($18)|0);
 HEAP8[$19>>0] = 0;
 $$0 = $13;
 STACKTOP = sp;return ($$0|0);
}
function _sn_write($f,$s,$l) {
 $f = $f|0;
 $s = $s|0;
 $l = $l|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $l$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($f) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($f) + 20|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $1;
 $5 = $3;
 $6 = (($4) - ($5))|0;
 $7 = ($6>>>0)>($l>>>0);
 $l$ = $7 ? $l : $6;
 _memcpy(($3|0),($s|0),($l$|0))|0;
 $8 = HEAP32[$2>>2]|0;
 $9 = (($8) + ($l$)|0);
 HEAP32[$2>>2] = $9;
 STACKTOP = sp;return ($l|0);
}
function _vsprintf($s,$fmt,$ap) {
 $s = $s|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_vsnprintf($s,2147483647,$fmt,$ap)|0);
 STACKTOP = sp;return ($0|0);
}
function _memchr($src,$c,$n) {
 $src = $src|0;
 $c = $c|0;
 $n = $n|0;
 var $$0$lcssa = 0, $$0$lcssa34 = 0, $$013 = 0, $$1$lcssa = 0, $$17 = 0, $$24 = 0, $$3 = 0, $$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond12 = 0, $s$0$lcssa = 0, $s$0$lcssa33 = 0, $s$014 = 0, $s$15 = 0, $s$2 = 0, $w$0$lcssa = 0, $w$08 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $c & 255;
 $1 = $src;
 $2 = $1 & 3;
 $3 = ($2|0)==(0);
 $4 = ($n|0)==(0);
 $or$cond12 = $3 | $4;
 L1: do {
  if ($or$cond12) {
   $$0$lcssa = $n;$$lcssa = $4;$s$0$lcssa = $src;
   label = 5;
  } else {
   $5 = $c&255;
   $$013 = $n;$s$014 = $src;
   while(1) {
    $6 = HEAP8[$s$014>>0]|0;
    $7 = ($6<<24>>24)==($5<<24>>24);
    if ($7) {
     $$0$lcssa34 = $$013;$s$0$lcssa33 = $s$014;
     label = 6;
     break L1;
    }
    $8 = (($s$014) + 1|0);
    $9 = (($$013) + -1)|0;
    $10 = $8;
    $11 = $10 & 3;
    $12 = ($11|0)==(0);
    $13 = ($9|0)==(0);
    $or$cond = $12 | $13;
    if ($or$cond) {
     $$0$lcssa = $9;$$lcssa = $13;$s$0$lcssa = $8;
     label = 5;
     break;
    } else {
     $$013 = $9;$s$014 = $8;
    }
   }
  }
 } while(0);
 if ((label|0) == 5) {
  if ($$lcssa) {
   $$3 = 0;$s$2 = $s$0$lcssa;
  } else {
   $$0$lcssa34 = $$0$lcssa;$s$0$lcssa33 = $s$0$lcssa;
   label = 6;
  }
 }
 L8: do {
  if ((label|0) == 6) {
   $14 = HEAP8[$s$0$lcssa33>>0]|0;
   $15 = $c&255;
   $16 = ($14<<24>>24)==($15<<24>>24);
   if ($16) {
    $$3 = $$0$lcssa34;$s$2 = $s$0$lcssa33;
   } else {
    $17 = Math_imul($0, 16843009)|0;
    $18 = ($$0$lcssa34>>>0)>(3);
    L11: do {
     if ($18) {
      $$17 = $$0$lcssa34;$w$08 = $s$0$lcssa33;
      while(1) {
       $19 = HEAP32[$w$08>>2]|0;
       $20 = $19 ^ $17;
       $21 = (($20) + -16843009)|0;
       $22 = $20 & -2139062144;
       $23 = $22 ^ -2139062144;
       $24 = $23 & $21;
       $25 = ($24|0)==(0);
       if (!($25)) {
        $$1$lcssa = $$17;$w$0$lcssa = $w$08;
        break L11;
       }
       $26 = (($w$08) + 4|0);
       $27 = (($$17) + -4)|0;
       $28 = ($27>>>0)>(3);
       if ($28) {
        $$17 = $27;$w$08 = $26;
       } else {
        $$1$lcssa = $27;$w$0$lcssa = $26;
        break;
       }
      }
     } else {
      $$1$lcssa = $$0$lcssa34;$w$0$lcssa = $s$0$lcssa33;
     }
    } while(0);
    $29 = ($$1$lcssa|0)==(0);
    if ($29) {
     $$3 = 0;$s$2 = $w$0$lcssa;
    } else {
     $$24 = $$1$lcssa;$s$15 = $w$0$lcssa;
     while(1) {
      $30 = HEAP8[$s$15>>0]|0;
      $31 = ($30<<24>>24)==($15<<24>>24);
      if ($31) {
       $$3 = $$24;$s$2 = $s$15;
       break L8;
      }
      $32 = (($s$15) + 1|0);
      $33 = (($$24) + -1)|0;
      $34 = ($33|0)==(0);
      if ($34) {
       $$3 = 0;$s$2 = $32;
       break;
      } else {
       $$24 = $33;$s$15 = $32;
      }
     }
    }
   }
  }
 } while(0);
 $35 = ($$3|0)!=(0);
 $36 = $35 ? $s$2 : 0;
 STACKTOP = sp;return ($36|0);
}
function runPostSets() {
 
}
function _i64Subtract(a, b, c, d) {
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a - c)>>>0;
    h = (b - d)>>>0;
    h = (b - d - (((c>>>0) > (a>>>0))|0))>>>0; // Borrow one from high word to low word on underflow.
    return ((tempRet0 = h,l|0)|0);
}
function _memset(ptr, value, num) {
    ptr = ptr|0; value = value|0; num = num|0;
    var stop = 0, value4 = 0, stop4 = 0, unaligned = 0;
    stop = (ptr + num)|0;
    if ((num|0) >= 20) {
      // This is unaligned, but quite large, so work hard to get to aligned settings
      value = value & 0xff;
      unaligned = ptr & 3;
      value4 = value | (value << 8) | (value << 16) | (value << 24);
      stop4 = stop & ~3;
      if (unaligned) {
        unaligned = (ptr + 4 - unaligned)|0;
        while ((ptr|0) < (unaligned|0)) { // no need to check for stop, since we have large num
          HEAP8[((ptr)>>0)]=value;
          ptr = (ptr+1)|0;
        }
      }
      while ((ptr|0) < (stop4|0)) {
        HEAP32[((ptr)>>2)]=value4;
        ptr = (ptr+4)|0;
      }
    }
    while ((ptr|0) < (stop|0)) {
      HEAP8[((ptr)>>0)]=value;
      ptr = (ptr+1)|0;
    }
    return (ptr-num)|0;
}
function _bitshift64Shl(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = (high << bits) | ((low&(ander << (32 - bits))) >>> (32 - bits));
      return low << bits;
    }
    tempRet0 = low << (bits - 32);
    return 0;
}
function _strlen(ptr) {
    ptr = ptr|0;
    var curr = 0;
    curr = ptr;
    while (((HEAP8[((curr)>>0)])|0)) {
      curr = (curr + 1)|0;
    }
    return (curr - ptr)|0;
}
function _i64Add(a, b, c, d) {
    /*
      x = a + b*2^32
      y = c + d*2^32
      result = l + h*2^32
    */
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a + c)>>>0;
    h = (b + d + (((l>>>0) < (a>>>0))|0))>>>0; // Add carry from low word to high word on overflow.
    return ((tempRet0 = h,l|0)|0);
}
function _bitshift64Lshr(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = high >>> bits;
      return (low >>> bits) | ((high&ander) << (32 - bits));
    }
    tempRet0 = 0;
    return (high >>> (bits - 32))|0;
}
function _memcpy(dest, src, num) {

    dest = dest|0; src = src|0; num = num|0;
    var ret = 0;
    if ((num|0) >= 4096) return _emscripten_memcpy_big(dest|0, src|0, num|0)|0;
    ret = dest|0;
    if ((dest&3) == (src&3)) {
      while (dest & 3) {
        if ((num|0) == 0) return ret|0;
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
        dest = (dest+1)|0;
        src = (src+1)|0;
        num = (num-1)|0;
      }
      while ((num|0) >= 4) {
        HEAP32[((dest)>>2)]=((HEAP32[((src)>>2)])|0);
        dest = (dest+4)|0;
        src = (src+4)|0;
        num = (num-4)|0;
      }
    }
    while ((num|0) > 0) {
      HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
      dest = (dest+1)|0;
      src = (src+1)|0;
      num = (num-1)|0;
    }
    return ret|0;
}
function _memmove(dest, src, num) {
    dest = dest|0; src = src|0; num = num|0;
    var ret = 0;
    if (((src|0) < (dest|0)) & ((dest|0) < ((src + num)|0))) {
      // Unlikely case: Copy backwards in a safe manner
      ret = dest;
      src = (src + num)|0;
      dest = (dest + num)|0;
      while ((num|0) > 0) {
        dest = (dest - 1)|0;
        src = (src - 1)|0;
        num = (num - 1)|0;
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
      }
      dest = ret;
    } else {
      _memcpy(dest, src, num) | 0;
    }
    return dest | 0;
}
function _bitshift64Ashr(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = high >> bits;
      return (low >>> bits) | ((high&ander) << (32 - bits));
    }
    tempRet0 = (high|0) < 0 ? -1 : 0;
    return (high >> (bits - 32))|0;
  }
function _llvm_ctlz_i32(x) {
    x = x|0;
    var ret = 0;
    ret = ((HEAP8[(((ctlz_i8)+(x >>> 24))>>0)])|0);
    if ((ret|0) < 8) return ret|0;
    ret = ((HEAP8[(((ctlz_i8)+((x >> 16)&0xff))>>0)])|0);
    if ((ret|0) < 8) return (ret + 8)|0;
    ret = ((HEAP8[(((ctlz_i8)+((x >> 8)&0xff))>>0)])|0);
    if ((ret|0) < 8) return (ret + 16)|0;
    return (((HEAP8[(((ctlz_i8)+(x&0xff))>>0)])|0) + 24)|0;
  }

function _llvm_cttz_i32(x) {
    x = x|0;
    var ret = 0;
    ret = ((HEAP8[(((cttz_i8)+(x & 0xff))>>0)])|0);
    if ((ret|0) < 8) return ret|0;
    ret = ((HEAP8[(((cttz_i8)+((x >> 8)&0xff))>>0)])|0);
    if ((ret|0) < 8) return (ret + 8)|0;
    ret = ((HEAP8[(((cttz_i8)+((x >> 16)&0xff))>>0)])|0);
    if ((ret|0) < 8) return (ret + 16)|0;
    return (((HEAP8[(((cttz_i8)+(x >>> 24))>>0)])|0) + 24)|0;
  }

// ======== compiled code from system/lib/compiler-rt , see readme therein
function ___muldsi3($a, $b) {
  $a = $a | 0;
  $b = $b | 0;
  var $1 = 0, $2 = 0, $3 = 0, $6 = 0, $8 = 0, $11 = 0, $12 = 0;
  $1 = $a & 65535;
  $2 = $b & 65535;
  $3 = Math_imul($2, $1) | 0;
  $6 = $a >>> 16;
  $8 = ($3 >>> 16) + (Math_imul($2, $6) | 0) | 0;
  $11 = $b >>> 16;
  $12 = Math_imul($11, $1) | 0;
  return (tempRet0 = (($8 >>> 16) + (Math_imul($11, $6) | 0) | 0) + ((($8 & 65535) + $12 | 0) >>> 16) | 0, 0 | ($8 + $12 << 16 | $3 & 65535)) | 0;
}
function ___divdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $1$0 = 0, $1$1 = 0, $2$0 = 0, $2$1 = 0, $4$0 = 0, $4$1 = 0, $6$0 = 0, $7$0 = 0, $7$1 = 0, $8$0 = 0, $10$0 = 0;
  $1$0 = $a$1 >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $1$1 = (($a$1 | 0) < 0 ? -1 : 0) >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $2$0 = $b$1 >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $2$1 = (($b$1 | 0) < 0 ? -1 : 0) >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $4$0 = _i64Subtract($1$0 ^ $a$0, $1$1 ^ $a$1, $1$0, $1$1) | 0;
  $4$1 = tempRet0;
  $6$0 = _i64Subtract($2$0 ^ $b$0, $2$1 ^ $b$1, $2$0, $2$1) | 0;
  $7$0 = $2$0 ^ $1$0;
  $7$1 = $2$1 ^ $1$1;
  $8$0 = ___udivmoddi4($4$0, $4$1, $6$0, tempRet0, 0) | 0;
  $10$0 = _i64Subtract($8$0 ^ $7$0, tempRet0 ^ $7$1, $7$0, $7$1) | 0;
  return (tempRet0 = tempRet0, $10$0) | 0;
}
function ___remdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $rem = 0, $1$0 = 0, $1$1 = 0, $2$0 = 0, $2$1 = 0, $4$0 = 0, $4$1 = 0, $6$0 = 0, $10$0 = 0, $10$1 = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  $rem = __stackBase__ | 0;
  $1$0 = $a$1 >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $1$1 = (($a$1 | 0) < 0 ? -1 : 0) >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $2$0 = $b$1 >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $2$1 = (($b$1 | 0) < 0 ? -1 : 0) >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $4$0 = _i64Subtract($1$0 ^ $a$0, $1$1 ^ $a$1, $1$0, $1$1) | 0;
  $4$1 = tempRet0;
  $6$0 = _i64Subtract($2$0 ^ $b$0, $2$1 ^ $b$1, $2$0, $2$1) | 0;
  ___udivmoddi4($4$0, $4$1, $6$0, tempRet0, $rem) | 0;
  $10$0 = _i64Subtract(HEAP32[$rem >> 2] ^ $1$0, HEAP32[$rem + 4 >> 2] ^ $1$1, $1$0, $1$1) | 0;
  $10$1 = tempRet0;
  STACKTOP = __stackBase__;
  return (tempRet0 = $10$1, $10$0) | 0;
}
function ___muldi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $x_sroa_0_0_extract_trunc = 0, $y_sroa_0_0_extract_trunc = 0, $1$0 = 0, $1$1 = 0, $2 = 0;
  $x_sroa_0_0_extract_trunc = $a$0;
  $y_sroa_0_0_extract_trunc = $b$0;
  $1$0 = ___muldsi3($x_sroa_0_0_extract_trunc, $y_sroa_0_0_extract_trunc) | 0;
  $1$1 = tempRet0;
  $2 = Math_imul($a$1, $y_sroa_0_0_extract_trunc) | 0;
  return (tempRet0 = ((Math_imul($b$1, $x_sroa_0_0_extract_trunc) | 0) + $2 | 0) + $1$1 | $1$1 & 0, 0 | $1$0 & -1) | 0;
}
function ___udivdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $1$0 = 0;
  $1$0 = ___udivmoddi4($a$0, $a$1, $b$0, $b$1, 0) | 0;
  return (tempRet0 = tempRet0, $1$0) | 0;
}
function ___uremdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $rem = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  $rem = __stackBase__ | 0;
  ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) | 0;
  STACKTOP = __stackBase__;
  return (tempRet0 = HEAP32[$rem + 4 >> 2] | 0, HEAP32[$rem >> 2] | 0) | 0;
}
function ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  $rem = $rem | 0;
  var $n_sroa_0_0_extract_trunc = 0, $n_sroa_1_4_extract_shift$0 = 0, $n_sroa_1_4_extract_trunc = 0, $d_sroa_0_0_extract_trunc = 0, $d_sroa_1_4_extract_shift$0 = 0, $d_sroa_1_4_extract_trunc = 0, $4 = 0, $17 = 0, $37 = 0, $49 = 0, $51 = 0, $57 = 0, $58 = 0, $66 = 0, $78 = 0, $86 = 0, $88 = 0, $89 = 0, $91 = 0, $92 = 0, $95 = 0, $105 = 0, $117 = 0, $119 = 0, $125 = 0, $126 = 0, $130 = 0, $q_sroa_1_1_ph = 0, $q_sroa_0_1_ph = 0, $r_sroa_1_1_ph = 0, $r_sroa_0_1_ph = 0, $sr_1_ph = 0, $d_sroa_0_0_insert_insert99$0 = 0, $d_sroa_0_0_insert_insert99$1 = 0, $137$0 = 0, $137$1 = 0, $carry_0203 = 0, $sr_1202 = 0, $r_sroa_0_1201 = 0, $r_sroa_1_1200 = 0, $q_sroa_0_1199 = 0, $q_sroa_1_1198 = 0, $147 = 0, $149 = 0, $r_sroa_0_0_insert_insert42$0 = 0, $r_sroa_0_0_insert_insert42$1 = 0, $150$1 = 0, $151$0 = 0, $152 = 0, $154$0 = 0, $r_sroa_0_0_extract_trunc = 0, $r_sroa_1_4_extract_trunc = 0, $155 = 0, $carry_0_lcssa$0 = 0, $carry_0_lcssa$1 = 0, $r_sroa_0_1_lcssa = 0, $r_sroa_1_1_lcssa = 0, $q_sroa_0_1_lcssa = 0, $q_sroa_1_1_lcssa = 0, $q_sroa_0_0_insert_ext75$0 = 0, $q_sroa_0_0_insert_ext75$1 = 0, $q_sroa_0_0_insert_insert77$1 = 0, $_0$0 = 0, $_0$1 = 0;
  $n_sroa_0_0_extract_trunc = $a$0;
  $n_sroa_1_4_extract_shift$0 = $a$1;
  $n_sroa_1_4_extract_trunc = $n_sroa_1_4_extract_shift$0;
  $d_sroa_0_0_extract_trunc = $b$0;
  $d_sroa_1_4_extract_shift$0 = $b$1;
  $d_sroa_1_4_extract_trunc = $d_sroa_1_4_extract_shift$0;
  if (($n_sroa_1_4_extract_trunc | 0) == 0) {
    $4 = ($rem | 0) != 0;
    if (($d_sroa_1_4_extract_trunc | 0) == 0) {
      if ($4) {
        HEAP32[$rem >> 2] = ($n_sroa_0_0_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
        HEAP32[$rem + 4 >> 2] = 0;
      }
      $_0$1 = 0;
      $_0$0 = ($n_sroa_0_0_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
      return (tempRet0 = $_0$1, $_0$0) | 0;
    } else {
      if (!$4) {
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      HEAP32[$rem >> 2] = $a$0 & -1;
      HEAP32[$rem + 4 >> 2] = $a$1 & 0;
      $_0$1 = 0;
      $_0$0 = 0;
      return (tempRet0 = $_0$1, $_0$0) | 0;
    }
  }
  $17 = ($d_sroa_1_4_extract_trunc | 0) == 0;
  do {
    if (($d_sroa_0_0_extract_trunc | 0) == 0) {
      if ($17) {
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
          HEAP32[$rem + 4 >> 2] = 0;
        }
        $_0$1 = 0;
        $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      if (($n_sroa_0_0_extract_trunc | 0) == 0) {
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = 0;
          HEAP32[$rem + 4 >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_1_4_extract_trunc >>> 0);
        }
        $_0$1 = 0;
        $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_1_4_extract_trunc >>> 0) >>> 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      $37 = $d_sroa_1_4_extract_trunc - 1 | 0;
      if (($37 & $d_sroa_1_4_extract_trunc | 0) == 0) {
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = 0 | $a$0 & -1;
          HEAP32[$rem + 4 >> 2] = $37 & $n_sroa_1_4_extract_trunc | $a$1 & 0;
        }
        $_0$1 = 0;
        $_0$0 = $n_sroa_1_4_extract_trunc >>> ((_llvm_cttz_i32($d_sroa_1_4_extract_trunc | 0) | 0) >>> 0);
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      $49 = _llvm_ctlz_i32($d_sroa_1_4_extract_trunc | 0) | 0;
      $51 = $49 - (_llvm_ctlz_i32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
      if ($51 >>> 0 <= 30) {
        $57 = $51 + 1 | 0;
        $58 = 31 - $51 | 0;
        $sr_1_ph = $57;
        $r_sroa_0_1_ph = $n_sroa_1_4_extract_trunc << $58 | $n_sroa_0_0_extract_trunc >>> ($57 >>> 0);
        $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($57 >>> 0);
        $q_sroa_0_1_ph = 0;
        $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $58;
        break;
      }
      if (($rem | 0) == 0) {
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      HEAP32[$rem >> 2] = 0 | $a$0 & -1;
      HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
      $_0$1 = 0;
      $_0$0 = 0;
      return (tempRet0 = $_0$1, $_0$0) | 0;
    } else {
      if (!$17) {
        $117 = _llvm_ctlz_i32($d_sroa_1_4_extract_trunc | 0) | 0;
        $119 = $117 - (_llvm_ctlz_i32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
        if ($119 >>> 0 <= 31) {
          $125 = $119 + 1 | 0;
          $126 = 31 - $119 | 0;
          $130 = $119 - 31 >> 31;
          $sr_1_ph = $125;
          $r_sroa_0_1_ph = $n_sroa_0_0_extract_trunc >>> ($125 >>> 0) & $130 | $n_sroa_1_4_extract_trunc << $126;
          $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($125 >>> 0) & $130;
          $q_sroa_0_1_ph = 0;
          $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $126;
          break;
        }
        if (($rem | 0) == 0) {
          $_0$1 = 0;
          $_0$0 = 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        HEAP32[$rem >> 2] = 0 | $a$0 & -1;
        HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      $66 = $d_sroa_0_0_extract_trunc - 1 | 0;
      if (($66 & $d_sroa_0_0_extract_trunc | 0) != 0) {
        $86 = (_llvm_ctlz_i32($d_sroa_0_0_extract_trunc | 0) | 0) + 33 | 0;
        $88 = $86 - (_llvm_ctlz_i32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
        $89 = 64 - $88 | 0;
        $91 = 32 - $88 | 0;
        $92 = $91 >> 31;
        $95 = $88 - 32 | 0;
        $105 = $95 >> 31;
        $sr_1_ph = $88;
        $r_sroa_0_1_ph = $91 - 1 >> 31 & $n_sroa_1_4_extract_trunc >>> ($95 >>> 0) | ($n_sroa_1_4_extract_trunc << $91 | $n_sroa_0_0_extract_trunc >>> ($88 >>> 0)) & $105;
        $r_sroa_1_1_ph = $105 & $n_sroa_1_4_extract_trunc >>> ($88 >>> 0);
        $q_sroa_0_1_ph = $n_sroa_0_0_extract_trunc << $89 & $92;
        $q_sroa_1_1_ph = ($n_sroa_1_4_extract_trunc << $89 | $n_sroa_0_0_extract_trunc >>> ($95 >>> 0)) & $92 | $n_sroa_0_0_extract_trunc << $91 & $88 - 33 >> 31;
        break;
      }
      if (($rem | 0) != 0) {
        HEAP32[$rem >> 2] = $66 & $n_sroa_0_0_extract_trunc;
        HEAP32[$rem + 4 >> 2] = 0;
      }
      if (($d_sroa_0_0_extract_trunc | 0) == 1) {
        $_0$1 = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
        $_0$0 = 0 | $a$0 & -1;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      } else {
        $78 = _llvm_cttz_i32($d_sroa_0_0_extract_trunc | 0) | 0;
        $_0$1 = 0 | $n_sroa_1_4_extract_trunc >>> ($78 >>> 0);
        $_0$0 = $n_sroa_1_4_extract_trunc << 32 - $78 | $n_sroa_0_0_extract_trunc >>> ($78 >>> 0) | 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
    }
  } while (0);
  if (($sr_1_ph | 0) == 0) {
    $q_sroa_1_1_lcssa = $q_sroa_1_1_ph;
    $q_sroa_0_1_lcssa = $q_sroa_0_1_ph;
    $r_sroa_1_1_lcssa = $r_sroa_1_1_ph;
    $r_sroa_0_1_lcssa = $r_sroa_0_1_ph;
    $carry_0_lcssa$1 = 0;
    $carry_0_lcssa$0 = 0;
  } else {
    $d_sroa_0_0_insert_insert99$0 = 0 | $b$0 & -1;
    $d_sroa_0_0_insert_insert99$1 = $d_sroa_1_4_extract_shift$0 | $b$1 & 0;
    $137$0 = _i64Add($d_sroa_0_0_insert_insert99$0, $d_sroa_0_0_insert_insert99$1, -1, -1) | 0;
    $137$1 = tempRet0;
    $q_sroa_1_1198 = $q_sroa_1_1_ph;
    $q_sroa_0_1199 = $q_sroa_0_1_ph;
    $r_sroa_1_1200 = $r_sroa_1_1_ph;
    $r_sroa_0_1201 = $r_sroa_0_1_ph;
    $sr_1202 = $sr_1_ph;
    $carry_0203 = 0;
    while (1) {
      $147 = $q_sroa_0_1199 >>> 31 | $q_sroa_1_1198 << 1;
      $149 = $carry_0203 | $q_sroa_0_1199 << 1;
      $r_sroa_0_0_insert_insert42$0 = 0 | ($r_sroa_0_1201 << 1 | $q_sroa_1_1198 >>> 31);
      $r_sroa_0_0_insert_insert42$1 = $r_sroa_0_1201 >>> 31 | $r_sroa_1_1200 << 1 | 0;
      _i64Subtract($137$0, $137$1, $r_sroa_0_0_insert_insert42$0, $r_sroa_0_0_insert_insert42$1) | 0;
      $150$1 = tempRet0;
      $151$0 = $150$1 >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1;
      $152 = $151$0 & 1;
      $154$0 = _i64Subtract($r_sroa_0_0_insert_insert42$0, $r_sroa_0_0_insert_insert42$1, $151$0 & $d_sroa_0_0_insert_insert99$0, ((($150$1 | 0) < 0 ? -1 : 0) >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1) & $d_sroa_0_0_insert_insert99$1) | 0;
      $r_sroa_0_0_extract_trunc = $154$0;
      $r_sroa_1_4_extract_trunc = tempRet0;
      $155 = $sr_1202 - 1 | 0;
      if (($155 | 0) == 0) {
        break;
      } else {
        $q_sroa_1_1198 = $147;
        $q_sroa_0_1199 = $149;
        $r_sroa_1_1200 = $r_sroa_1_4_extract_trunc;
        $r_sroa_0_1201 = $r_sroa_0_0_extract_trunc;
        $sr_1202 = $155;
        $carry_0203 = $152;
      }
    }
    $q_sroa_1_1_lcssa = $147;
    $q_sroa_0_1_lcssa = $149;
    $r_sroa_1_1_lcssa = $r_sroa_1_4_extract_trunc;
    $r_sroa_0_1_lcssa = $r_sroa_0_0_extract_trunc;
    $carry_0_lcssa$1 = 0;
    $carry_0_lcssa$0 = $152;
  }
  $q_sroa_0_0_insert_ext75$0 = $q_sroa_0_1_lcssa;
  $q_sroa_0_0_insert_ext75$1 = 0;
  $q_sroa_0_0_insert_insert77$1 = $q_sroa_1_1_lcssa | $q_sroa_0_0_insert_ext75$1;
  if (($rem | 0) != 0) {
    HEAP32[$rem >> 2] = 0 | $r_sroa_0_1_lcssa;
    HEAP32[$rem + 4 >> 2] = $r_sroa_1_1_lcssa | 0;
  }
  $_0$1 = (0 | $q_sroa_0_0_insert_ext75$0) >>> 31 | $q_sroa_0_0_insert_insert77$1 << 1 | ($q_sroa_0_0_insert_ext75$1 << 1 | $q_sroa_0_0_insert_ext75$0 >>> 31) & 0 | $carry_0_lcssa$1;
  $_0$0 = ($q_sroa_0_0_insert_ext75$0 << 1 | 0 >>> 31) & -2 | $carry_0_lcssa$0;
  return (tempRet0 = $_0$1, $_0$0) | 0;
}
// =======================================================================



// EMSCRIPTEN_END_FUNCS

    
    function dynCall_iiiii(index,a1,a2,a3,a4) {
      index = index|0;
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
      return FUNCTION_TABLE_iiiii[index&7](a1|0,a2|0,a3|0,a4|0)|0;
    }
  

    function dynCall_iiidii(index,a1,a2,a3,a4,a5) {
      index = index|0;
      a1=a1|0; a2=a2|0; a3=+a3; a4=a4|0; a5=a5|0;
      return FUNCTION_TABLE_iiidii[index&3](a1|0,a2|0,+a3,a4|0,a5|0)|0;
    }
  

    function dynCall_vii(index,a1,a2) {
      index = index|0;
      a1=a1|0; a2=a2|0;
      FUNCTION_TABLE_vii[index&3](a1|0,a2|0);
    }
  

    function dynCall_iiiiiii(index,a1,a2,a3,a4,a5,a6) {
      index = index|0;
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0;
      return FUNCTION_TABLE_iiiiiii[index&1](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0)|0;
    }
  

    function dynCall_iiii(index,a1,a2,a3) {
      index = index|0;
      a1=a1|0; a2=a2|0; a3=a3|0;
      return FUNCTION_TABLE_iiii[index&3](a1|0,a2|0,a3|0)|0;
    }
  

    function dynCall_iii(index,a1,a2) {
      index = index|0;
      a1=a1|0; a2=a2|0;
      return FUNCTION_TABLE_iii[index&1](a1|0,a2|0)|0;
    }
  

    function dynCall_viiii(index,a1,a2,a3,a4) {
      index = index|0;
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
      FUNCTION_TABLE_viiii[index&7](a1|0,a2|0,a3|0,a4|0);
    }
  
function b0(p0,p1,p2,p3) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; abort(0);return 0; }
  function b1(p0,p1,p2,p3,p4) { p0 = p0|0;p1 = p1|0;p2 = +p2;p3 = p3|0;p4 = p4|0; abort(1);return 0; }
  function b2(p0,p1) { p0 = p0|0;p1 = p1|0; abort(2); }
  function b3(p0,p1,p2,p3,p4,p5) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; abort(3);return 0; }
  function _decodeMP3_unclipped__wrapper(p0,p1,p2,p3,p4,p5) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; return _decodeMP3_unclipped(p0|0,p1|0,p2|0,p3|0,p4|0,p5|0)|0; }
  function b4(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; abort(4);return 0; }
  function b5(p0,p1) { p0 = p0|0;p1 = p1|0; abort(5);return 0; }
  function b6(p0,p1,p2,p3) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; abort(6); }
  // EMSCRIPTEN_END_FUNCS
  var FUNCTION_TABLE_iiiii = [b0,_count_bit_null,_count_bit_noESC,_count_bit_noESC_from2,_count_bit_noESC_from3,b0,b0,b0];
  var FUNCTION_TABLE_iiidii = [b1,_find_scalefac_x34,_guess_scalefac_x34,b1];
  var FUNCTION_TABLE_vii = [b2,_fht,_lame_report_def,b2];
  var FUNCTION_TABLE_iiiiiii = [b3,_decodeMP3_unclipped__wrapper];
  var FUNCTION_TABLE_iiii = [b4,_sn_write,_choose_table_nonMMX,b4];
  var FUNCTION_TABLE_iii = [b5,_floatcompare];
  var FUNCTION_TABLE_viiii = [b6,_VBR_new_iteration_loop,_VBR_old_iteration_loop,_CBR_iteration_loop,_ABR_iteration_loop,_init_xrpow_core_c,_short_block_constrain,_long_block_constrain];

    return { _strlen: _strlen, _lame_get_num_channels: _lame_get_num_channels, _bitshift64Lshr: _bitshift64Lshr, _lame_get_in_samplerate: _lame_get_in_samplerate, _lame_init: _lame_init, _lame_set_VBR_max_bitrate_kbps: _lame_set_VBR_max_bitrate_kbps, _calloc: _calloc, _bitshift64Shl: _bitshift64Shl, _lame_get_VBR_max_bitrate_kbps: _lame_get_VBR_max_bitrate_kbps, _lame_get_num_samples: _lame_get_num_samples, _lame_set_num_samples: _lame_set_num_samples, _memset: _memset, _memcpy: _memcpy, _lame_get_VBR_mean_bitrate_kbps: _lame_get_VBR_mean_bitrate_kbps, _lame_set_VBR: _lame_set_VBR, _lame_encode_flush: _lame_encode_flush, _lame_set_mode: _lame_set_mode, _lame_set_VBR_mean_bitrate_kbps: _lame_set_VBR_mean_bitrate_kbps, _i64Subtract: _i64Subtract, _lame_set_brate: _lame_set_brate, _lame_set_VBR_q: _lame_set_VBR_q, _i64Add: _i64Add, _lame_init_params: _lame_init_params, _lame_get_brate: _lame_get_brate, _free: _free, _lame_set_VBR_min_bitrate_kbps: _lame_set_VBR_min_bitrate_kbps, _lame_get_VBR_min_bitrate_kbps: _lame_get_VBR_min_bitrate_kbps, _lame_get_out_samplerate: _lame_get_out_samplerate, _lame_set_out_samplerate: _lame_set_out_samplerate, _lame_encode_buffer_ieee_float: _lame_encode_buffer_ieee_float, _lame_close: _lame_close, _lame_set_in_samplerate: _lame_set_in_samplerate, _get_lame_version: _get_lame_version, _lame_get_VBR: _lame_get_VBR, _malloc: _malloc, _memmove: _memmove, _lame_set_num_channels: _lame_set_num_channels, _lame_get_VBR_q: _lame_get_VBR_q, _lame_get_mode: _lame_get_mode, runPostSets: runPostSets, stackAlloc: stackAlloc, stackSave: stackSave, stackRestore: stackRestore, setThrew: setThrew, setTempRet0: setTempRet0, getTempRet0: getTempRet0, dynCall_iiiii: dynCall_iiiii, dynCall_iiidii: dynCall_iiidii, dynCall_vii: dynCall_vii, dynCall_iiiiiii: dynCall_iiiiiii, dynCall_iiii: dynCall_iiii, dynCall_iii: dynCall_iii, dynCall_viiii: dynCall_viiii };
  })
  // EMSCRIPTEN_END_ASM
  ({ "Math": Math, "Int8Array": Int8Array, "Int16Array": Int16Array, "Int32Array": Int32Array, "Uint8Array": Uint8Array, "Uint16Array": Uint16Array, "Uint32Array": Uint32Array, "Float32Array": Float32Array, "Float64Array": Float64Array }, { "abort": abort, "assert": assert, "asmPrintInt": asmPrintInt, "asmPrintFloat": asmPrintFloat, "min": Math_min, "invoke_iiiii": invoke_iiiii, "invoke_iiidii": invoke_iiidii, "invoke_vii": invoke_vii, "invoke_iiiiiii": invoke_iiiiiii, "invoke_iiii": invoke_iiii, "invoke_iii": invoke_iii, "invoke_viiii": invoke_viiii, "_fabs": _fabs, "_sin": _sin, "_exp": _exp, "_llvm_pow_f64": _llvm_pow_f64, "_send": _send, "_abort": _abort, "___setErrNo": ___setErrNo, "_vfprintf": _vfprintf, "_log10f": _log10f, "_ExitMP3": _ExitMP3, "_floor": _floor, "_fflush": _fflush, "_pwrite": _pwrite, "_strerror_r": _strerror_r, "__reallyNegative": __reallyNegative, "_log10": _log10, "_fabsf": _fabsf, "_sbrk": _sbrk, "_atan": _atan, "_llvm_pow_f32": _llvm_pow_f32, "_emscripten_memcpy_big": _emscripten_memcpy_big, "_fileno": _fileno, "__exit": __exit, "_abs": _abs, "_cos": _cos, "_mkport": _mkport, "_log": _log, "_write": _write, "___errno_location": ___errno_location, "_sysconf": _sysconf, "_decodeMP3_unclipped": _decodeMP3_unclipped, "_InitMP3": _InitMP3, "_fwrite": _fwrite, "_time": _time, "_fprintf": _fprintf, "_strerror": _strerror, "_ceil": _ceil, "__formatString": __formatString, "_sqrt": _sqrt, "_exit": _exit, "STACKTOP": STACKTOP, "STACK_MAX": STACK_MAX, "tempDoublePtr": tempDoublePtr, "ABORT": ABORT, "cttz_i8": cttz_i8, "ctlz_i8": ctlz_i8, "NaN": NaN, "Infinity": Infinity, "_freqs": _freqs, "_stderr": _stderr, "_tabsel_123": _tabsel_123 }, buffer);
  var _strlen = Module["_strlen"] = asm["_strlen"];
var _lame_get_num_channels = Module["_lame_get_num_channels"] = asm["_lame_get_num_channels"];
var _bitshift64Lshr = Module["_bitshift64Lshr"] = asm["_bitshift64Lshr"];
var _lame_get_in_samplerate = Module["_lame_get_in_samplerate"] = asm["_lame_get_in_samplerate"];
var _lame_init = Module["_lame_init"] = asm["_lame_init"];
var _lame_set_VBR_max_bitrate_kbps = Module["_lame_set_VBR_max_bitrate_kbps"] = asm["_lame_set_VBR_max_bitrate_kbps"];
var _calloc = Module["_calloc"] = asm["_calloc"];
var _bitshift64Shl = Module["_bitshift64Shl"] = asm["_bitshift64Shl"];
var _lame_get_VBR_max_bitrate_kbps = Module["_lame_get_VBR_max_bitrate_kbps"] = asm["_lame_get_VBR_max_bitrate_kbps"];
var _lame_get_num_samples = Module["_lame_get_num_samples"] = asm["_lame_get_num_samples"];
var _lame_set_num_samples = Module["_lame_set_num_samples"] = asm["_lame_set_num_samples"];
var _memset = Module["_memset"] = asm["_memset"];
var _memcpy = Module["_memcpy"] = asm["_memcpy"];
var _lame_get_VBR_mean_bitrate_kbps = Module["_lame_get_VBR_mean_bitrate_kbps"] = asm["_lame_get_VBR_mean_bitrate_kbps"];
var _lame_set_VBR = Module["_lame_set_VBR"] = asm["_lame_set_VBR"];
var _lame_encode_flush = Module["_lame_encode_flush"] = asm["_lame_encode_flush"];
var _lame_set_mode = Module["_lame_set_mode"] = asm["_lame_set_mode"];
var _lame_set_VBR_mean_bitrate_kbps = Module["_lame_set_VBR_mean_bitrate_kbps"] = asm["_lame_set_VBR_mean_bitrate_kbps"];
var _i64Subtract = Module["_i64Subtract"] = asm["_i64Subtract"];
var _lame_set_brate = Module["_lame_set_brate"] = asm["_lame_set_brate"];
var _lame_set_VBR_q = Module["_lame_set_VBR_q"] = asm["_lame_set_VBR_q"];
var _i64Add = Module["_i64Add"] = asm["_i64Add"];
var _lame_init_params = Module["_lame_init_params"] = asm["_lame_init_params"];
var _lame_get_brate = Module["_lame_get_brate"] = asm["_lame_get_brate"];
var _free = Module["_free"] = asm["_free"];
var _lame_set_VBR_min_bitrate_kbps = Module["_lame_set_VBR_min_bitrate_kbps"] = asm["_lame_set_VBR_min_bitrate_kbps"];
var _lame_get_VBR_min_bitrate_kbps = Module["_lame_get_VBR_min_bitrate_kbps"] = asm["_lame_get_VBR_min_bitrate_kbps"];
var _lame_get_out_samplerate = Module["_lame_get_out_samplerate"] = asm["_lame_get_out_samplerate"];
var _lame_set_out_samplerate = Module["_lame_set_out_samplerate"] = asm["_lame_set_out_samplerate"];
var _lame_encode_buffer_ieee_float = Module["_lame_encode_buffer_ieee_float"] = asm["_lame_encode_buffer_ieee_float"];
var _lame_close = Module["_lame_close"] = asm["_lame_close"];
var _lame_set_in_samplerate = Module["_lame_set_in_samplerate"] = asm["_lame_set_in_samplerate"];
var _get_lame_version = Module["_get_lame_version"] = asm["_get_lame_version"];
var _lame_get_VBR = Module["_lame_get_VBR"] = asm["_lame_get_VBR"];
var _malloc = Module["_malloc"] = asm["_malloc"];
var _memmove = Module["_memmove"] = asm["_memmove"];
var _lame_set_num_channels = Module["_lame_set_num_channels"] = asm["_lame_set_num_channels"];
var _lame_get_VBR_q = Module["_lame_get_VBR_q"] = asm["_lame_get_VBR_q"];
var _lame_get_mode = Module["_lame_get_mode"] = asm["_lame_get_mode"];
var runPostSets = Module["runPostSets"] = asm["runPostSets"];
var dynCall_iiiii = Module["dynCall_iiiii"] = asm["dynCall_iiiii"];
var dynCall_iiidii = Module["dynCall_iiidii"] = asm["dynCall_iiidii"];
var dynCall_vii = Module["dynCall_vii"] = asm["dynCall_vii"];
var dynCall_iiiiiii = Module["dynCall_iiiiiii"] = asm["dynCall_iiiiiii"];
var dynCall_iiii = Module["dynCall_iiii"] = asm["dynCall_iiii"];
var dynCall_iii = Module["dynCall_iii"] = asm["dynCall_iii"];
var dynCall_viiii = Module["dynCall_viiii"] = asm["dynCall_viiii"];
  
  Runtime.stackAlloc = asm['stackAlloc'];
  Runtime.stackSave = asm['stackSave'];
  Runtime.stackRestore = asm['stackRestore'];
  Runtime.setTempRet0 = asm['setTempRet0'];
  Runtime.getTempRet0 = asm['getTempRet0'];
  

// TODO: strip out parts of this we do not need

//======= begin closure i64 code =======

// Copyright 2009 The Closure Library Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/**
 * @fileoverview Defines a Long class for representing a 64-bit two's-complement
 * integer value, which faithfully simulates the behavior of a Java "long". This
 * implementation is derived from LongLib in GWT.
 *
 */

var i64Math = (function() { // Emscripten wrapper
  var goog = { math: {} };


  /**
   * Constructs a 64-bit two's-complement integer, given its low and high 32-bit
   * values as *signed* integers.  See the from* functions below for more
   * convenient ways of constructing Longs.
   *
   * The internal representation of a long is the two given signed, 32-bit values.
   * We use 32-bit pieces because these are the size of integers on which
   * Javascript performs bit-operations.  For operations like addition and
   * multiplication, we split each number into 16-bit pieces, which can easily be
   * multiplied within Javascript's floating-point representation without overflow
   * or change in sign.
   *
   * In the algorithms below, we frequently reduce the negative case to the
   * positive case by negating the input(s) and then post-processing the result.
   * Note that we must ALWAYS check specially whether those values are MIN_VALUE
   * (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as
   * a positive number, it overflows back into a negative).  Not handling this
   * case would often result in infinite recursion.
   *
   * @param {number} low  The low (signed) 32 bits of the long.
   * @param {number} high  The high (signed) 32 bits of the long.
   * @constructor
   */
  goog.math.Long = function(low, high) {
    /**
     * @type {number}
     * @private
     */
    this.low_ = low | 0;  // force into 32 signed bits.

    /**
     * @type {number}
     * @private
     */
    this.high_ = high | 0;  // force into 32 signed bits.
  };


  // NOTE: Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the
  // from* methods on which they depend.


  /**
   * A cache of the Long representations of small integer values.
   * @type {!Object}
   * @private
   */
  goog.math.Long.IntCache_ = {};


  /**
   * Returns a Long representing the given (32-bit) integer value.
   * @param {number} value The 32-bit integer in question.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromInt = function(value) {
    if (-128 <= value && value < 128) {
      var cachedObj = goog.math.Long.IntCache_[value];
      if (cachedObj) {
        return cachedObj;
      }
    }

    var obj = new goog.math.Long(value | 0, value < 0 ? -1 : 0);
    if (-128 <= value && value < 128) {
      goog.math.Long.IntCache_[value] = obj;
    }
    return obj;
  };


  /**
   * Returns a Long representing the given value, provided that it is a finite
   * number.  Otherwise, zero is returned.
   * @param {number} value The number in question.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromNumber = function(value) {
    if (isNaN(value) || !isFinite(value)) {
      return goog.math.Long.ZERO;
    } else if (value <= -goog.math.Long.TWO_PWR_63_DBL_) {
      return goog.math.Long.MIN_VALUE;
    } else if (value + 1 >= goog.math.Long.TWO_PWR_63_DBL_) {
      return goog.math.Long.MAX_VALUE;
    } else if (value < 0) {
      return goog.math.Long.fromNumber(-value).negate();
    } else {
      return new goog.math.Long(
          (value % goog.math.Long.TWO_PWR_32_DBL_) | 0,
          (value / goog.math.Long.TWO_PWR_32_DBL_) | 0);
    }
  };


  /**
   * Returns a Long representing the 64-bit integer that comes by concatenating
   * the given high and low bits.  Each is assumed to use 32 bits.
   * @param {number} lowBits The low 32-bits.
   * @param {number} highBits The high 32-bits.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromBits = function(lowBits, highBits) {
    return new goog.math.Long(lowBits, highBits);
  };


  /**
   * Returns a Long representation of the given string, written using the given
   * radix.
   * @param {string} str The textual representation of the Long.
   * @param {number=} opt_radix The radix in which the text is written.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromString = function(str, opt_radix) {
    if (str.length == 0) {
      throw Error('number format error: empty string');
    }

    var radix = opt_radix || 10;
    if (radix < 2 || 36 < radix) {
      throw Error('radix out of range: ' + radix);
    }

    if (str.charAt(0) == '-') {
      return goog.math.Long.fromString(str.substring(1), radix).negate();
    } else if (str.indexOf('-') >= 0) {
      throw Error('number format error: interior "-" character: ' + str);
    }

    // Do several (8) digits each time through the loop, so as to
    // minimize the calls to the very expensive emulated div.
    var radixToPower = goog.math.Long.fromNumber(Math.pow(radix, 8));

    var result = goog.math.Long.ZERO;
    for (var i = 0; i < str.length; i += 8) {
      var size = Math.min(8, str.length - i);
      var value = parseInt(str.substring(i, i + size), radix);
      if (size < 8) {
        var power = goog.math.Long.fromNumber(Math.pow(radix, size));
        result = result.multiply(power).add(goog.math.Long.fromNumber(value));
      } else {
        result = result.multiply(radixToPower);
        result = result.add(goog.math.Long.fromNumber(value));
      }
    }
    return result;
  };


  // NOTE: the compiler should inline these constant values below and then remove
  // these variables, so there should be no runtime penalty for these.


  /**
   * Number used repeated below in calculations.  This must appear before the
   * first call to any from* function below.
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_16_DBL_ = 1 << 16;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_24_DBL_ = 1 << 24;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_32_DBL_ =
      goog.math.Long.TWO_PWR_16_DBL_ * goog.math.Long.TWO_PWR_16_DBL_;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_31_DBL_ =
      goog.math.Long.TWO_PWR_32_DBL_ / 2;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_48_DBL_ =
      goog.math.Long.TWO_PWR_32_DBL_ * goog.math.Long.TWO_PWR_16_DBL_;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_64_DBL_ =
      goog.math.Long.TWO_PWR_32_DBL_ * goog.math.Long.TWO_PWR_32_DBL_;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_63_DBL_ =
      goog.math.Long.TWO_PWR_64_DBL_ / 2;


  /** @type {!goog.math.Long} */
  goog.math.Long.ZERO = goog.math.Long.fromInt(0);


  /** @type {!goog.math.Long} */
  goog.math.Long.ONE = goog.math.Long.fromInt(1);


  /** @type {!goog.math.Long} */
  goog.math.Long.NEG_ONE = goog.math.Long.fromInt(-1);


  /** @type {!goog.math.Long} */
  goog.math.Long.MAX_VALUE =
      goog.math.Long.fromBits(0xFFFFFFFF | 0, 0x7FFFFFFF | 0);


  /** @type {!goog.math.Long} */
  goog.math.Long.MIN_VALUE = goog.math.Long.fromBits(0, 0x80000000 | 0);


  /**
   * @type {!goog.math.Long}
   * @private
   */
  goog.math.Long.TWO_PWR_24_ = goog.math.Long.fromInt(1 << 24);


  /** @return {number} The value, assuming it is a 32-bit integer. */
  goog.math.Long.prototype.toInt = function() {
    return this.low_;
  };


  /** @return {number} The closest floating-point representation to this value. */
  goog.math.Long.prototype.toNumber = function() {
    return this.high_ * goog.math.Long.TWO_PWR_32_DBL_ +
           this.getLowBitsUnsigned();
  };


  /**
   * @param {number=} opt_radix The radix in which the text should be written.
   * @return {string} The textual representation of this value.
   */
  goog.math.Long.prototype.toString = function(opt_radix) {
    var radix = opt_radix || 10;
    if (radix < 2 || 36 < radix) {
      throw Error('radix out of range: ' + radix);
    }

    if (this.isZero()) {
      return '0';
    }

    if (this.isNegative()) {
      if (this.equals(goog.math.Long.MIN_VALUE)) {
        // We need to change the Long value before it can be negated, so we remove
        // the bottom-most digit in this base and then recurse to do the rest.
        var radixLong = goog.math.Long.fromNumber(radix);
        var div = this.div(radixLong);
        var rem = div.multiply(radixLong).subtract(this);
        return div.toString(radix) + rem.toInt().toString(radix);
      } else {
        return '-' + this.negate().toString(radix);
      }
    }

    // Do several (6) digits each time through the loop, so as to
    // minimize the calls to the very expensive emulated div.
    var radixToPower = goog.math.Long.fromNumber(Math.pow(radix, 6));

    var rem = this;
    var result = '';
    while (true) {
      var remDiv = rem.div(radixToPower);
      var intval = rem.subtract(remDiv.multiply(radixToPower)).toInt();
      var digits = intval.toString(radix);

      rem = remDiv;
      if (rem.isZero()) {
        return digits + result;
      } else {
        while (digits.length < 6) {
          digits = '0' + digits;
        }
        result = '' + digits + result;
      }
    }
  };


  /** @return {number} The high 32-bits as a signed value. */
  goog.math.Long.prototype.getHighBits = function() {
    return this.high_;
  };


  /** @return {number} The low 32-bits as a signed value. */
  goog.math.Long.prototype.getLowBits = function() {
    return this.low_;
  };


  /** @return {number} The low 32-bits as an unsigned value. */
  goog.math.Long.prototype.getLowBitsUnsigned = function() {
    return (this.low_ >= 0) ?
        this.low_ : goog.math.Long.TWO_PWR_32_DBL_ + this.low_;
  };


  /**
   * @return {number} Returns the number of bits needed to represent the absolute
   *     value of this Long.
   */
  goog.math.Long.prototype.getNumBitsAbs = function() {
    if (this.isNegative()) {
      if (this.equals(goog.math.Long.MIN_VALUE)) {
        return 64;
      } else {
        return this.negate().getNumBitsAbs();
      }
    } else {
      var val = this.high_ != 0 ? this.high_ : this.low_;
      for (var bit = 31; bit > 0; bit--) {
        if ((val & (1 << bit)) != 0) {
          break;
        }
      }
      return this.high_ != 0 ? bit + 33 : bit + 1;
    }
  };


  /** @return {boolean} Whether this value is zero. */
  goog.math.Long.prototype.isZero = function() {
    return this.high_ == 0 && this.low_ == 0;
  };


  /** @return {boolean} Whether this value is negative. */
  goog.math.Long.prototype.isNegative = function() {
    return this.high_ < 0;
  };


  /** @return {boolean} Whether this value is odd. */
  goog.math.Long.prototype.isOdd = function() {
    return (this.low_ & 1) == 1;
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long equals the other.
   */
  goog.math.Long.prototype.equals = function(other) {
    return (this.high_ == other.high_) && (this.low_ == other.low_);
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long does not equal the other.
   */
  goog.math.Long.prototype.notEquals = function(other) {
    return (this.high_ != other.high_) || (this.low_ != other.low_);
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is less than the other.
   */
  goog.math.Long.prototype.lessThan = function(other) {
    return this.compare(other) < 0;
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is less than or equal to the other.
   */
  goog.math.Long.prototype.lessThanOrEqual = function(other) {
    return this.compare(other) <= 0;
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is greater than the other.
   */
  goog.math.Long.prototype.greaterThan = function(other) {
    return this.compare(other) > 0;
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is greater than or equal to the other.
   */
  goog.math.Long.prototype.greaterThanOrEqual = function(other) {
    return this.compare(other) >= 0;
  };


  /**
   * Compares this Long with the given one.
   * @param {goog.math.Long} other Long to compare against.
   * @return {number} 0 if they are the same, 1 if the this is greater, and -1
   *     if the given one is greater.
   */
  goog.math.Long.prototype.compare = function(other) {
    if (this.equals(other)) {
      return 0;
    }

    var thisNeg = this.isNegative();
    var otherNeg = other.isNegative();
    if (thisNeg && !otherNeg) {
      return -1;
    }
    if (!thisNeg && otherNeg) {
      return 1;
    }

    // at this point, the signs are the same, so subtraction will not overflow
    if (this.subtract(other).isNegative()) {
      return -1;
    } else {
      return 1;
    }
  };


  /** @return {!goog.math.Long} The negation of this value. */
  goog.math.Long.prototype.negate = function() {
    if (this.equals(goog.math.Long.MIN_VALUE)) {
      return goog.math.Long.MIN_VALUE;
    } else {
      return this.not().add(goog.math.Long.ONE);
    }
  };


  /**
   * Returns the sum of this and the given Long.
   * @param {goog.math.Long} other Long to add to this one.
   * @return {!goog.math.Long} The sum of this and the given Long.
   */
  goog.math.Long.prototype.add = function(other) {
    // Divide each number into 4 chunks of 16 bits, and then sum the chunks.

    var a48 = this.high_ >>> 16;
    var a32 = this.high_ & 0xFFFF;
    var a16 = this.low_ >>> 16;
    var a00 = this.low_ & 0xFFFF;

    var b48 = other.high_ >>> 16;
    var b32 = other.high_ & 0xFFFF;
    var b16 = other.low_ >>> 16;
    var b00 = other.low_ & 0xFFFF;

    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
    c00 += a00 + b00;
    c16 += c00 >>> 16;
    c00 &= 0xFFFF;
    c16 += a16 + b16;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c32 += a32 + b32;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c48 += a48 + b48;
    c48 &= 0xFFFF;
    return goog.math.Long.fromBits((c16 << 16) | c00, (c48 << 16) | c32);
  };


  /**
   * Returns the difference of this and the given Long.
   * @param {goog.math.Long} other Long to subtract from this.
   * @return {!goog.math.Long} The difference of this and the given Long.
   */
  goog.math.Long.prototype.subtract = function(other) {
    return this.add(other.negate());
  };


  /**
   * Returns the product of this and the given long.
   * @param {goog.math.Long} other Long to multiply with this.
   * @return {!goog.math.Long} The product of this and the other.
   */
  goog.math.Long.prototype.multiply = function(other) {
    if (this.isZero()) {
      return goog.math.Long.ZERO;
    } else if (other.isZero()) {
      return goog.math.Long.ZERO;
    }

    if (this.equals(goog.math.Long.MIN_VALUE)) {
      return other.isOdd() ? goog.math.Long.MIN_VALUE : goog.math.Long.ZERO;
    } else if (other.equals(goog.math.Long.MIN_VALUE)) {
      return this.isOdd() ? goog.math.Long.MIN_VALUE : goog.math.Long.ZERO;
    }

    if (this.isNegative()) {
      if (other.isNegative()) {
        return this.negate().multiply(other.negate());
      } else {
        return this.negate().multiply(other).negate();
      }
    } else if (other.isNegative()) {
      return this.multiply(other.negate()).negate();
    }

    // If both longs are small, use float multiplication
    if (this.lessThan(goog.math.Long.TWO_PWR_24_) &&
        other.lessThan(goog.math.Long.TWO_PWR_24_)) {
      return goog.math.Long.fromNumber(this.toNumber() * other.toNumber());
    }

    // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.
    // We can skip products that would overflow.

    var a48 = this.high_ >>> 16;
    var a32 = this.high_ & 0xFFFF;
    var a16 = this.low_ >>> 16;
    var a00 = this.low_ & 0xFFFF;

    var b48 = other.high_ >>> 16;
    var b32 = other.high_ & 0xFFFF;
    var b16 = other.low_ >>> 16;
    var b00 = other.low_ & 0xFFFF;

    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
    c00 += a00 * b00;
    c16 += c00 >>> 16;
    c00 &= 0xFFFF;
    c16 += a16 * b00;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c16 += a00 * b16;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c32 += a32 * b00;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c32 += a16 * b16;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c32 += a00 * b32;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;
    c48 &= 0xFFFF;
    return goog.math.Long.fromBits((c16 << 16) | c00, (c48 << 16) | c32);
  };


  /**
   * Returns this Long divided by the given one.
   * @param {goog.math.Long} other Long by which to divide.
   * @return {!goog.math.Long} This Long divided by the given one.
   */
  goog.math.Long.prototype.div = function(other) {
    if (other.isZero()) {
      throw Error('division by zero');
    } else if (this.isZero()) {
      return goog.math.Long.ZERO;
    }

    if (this.equals(goog.math.Long.MIN_VALUE)) {
      if (other.equals(goog.math.Long.ONE) ||
          other.equals(goog.math.Long.NEG_ONE)) {
        return goog.math.Long.MIN_VALUE;  // recall that -MIN_VALUE == MIN_VALUE
      } else if (other.equals(goog.math.Long.MIN_VALUE)) {
        return goog.math.Long.ONE;
      } else {
        // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.
        var halfThis = this.shiftRight(1);
        var approx = halfThis.div(other).shiftLeft(1);
        if (approx.equals(goog.math.Long.ZERO)) {
          return other.isNegative() ? goog.math.Long.ONE : goog.math.Long.NEG_ONE;
        } else {
          var rem = this.subtract(other.multiply(approx));
          var result = approx.add(rem.div(other));
          return result;
        }
      }
    } else if (other.equals(goog.math.Long.MIN_VALUE)) {
      return goog.math.Long.ZERO;
    }

    if (this.isNegative()) {
      if (other.isNegative()) {
        return this.negate().div(other.negate());
      } else {
        return this.negate().div(other).negate();
      }
    } else if (other.isNegative()) {
      return this.div(other.negate()).negate();
    }

    // Repeat the following until the remainder is less than other:  find a
    // floating-point that approximates remainder / other *from below*, add this
    // into the result, and subtract it from the remainder.  It is critical that
    // the approximate value is less than or equal to the real value so that the
    // remainder never becomes negative.
    var res = goog.math.Long.ZERO;
    var rem = this;
    while (rem.greaterThanOrEqual(other)) {
      // Approximate the result of division. This may be a little greater or
      // smaller than the actual value.
      var approx = Math.max(1, Math.floor(rem.toNumber() / other.toNumber()));

      // We will tweak the approximate result by changing it in the 48-th digit or
      // the smallest non-fractional digit, whichever is larger.
      var log2 = Math.ceil(Math.log(approx) / Math.LN2);
      var delta = (log2 <= 48) ? 1 : Math.pow(2, log2 - 48);

      // Decrease the approximation until it is smaller than the remainder.  Note
      // that if it is too large, the product overflows and is negative.
      var approxRes = goog.math.Long.fromNumber(approx);
      var approxRem = approxRes.multiply(other);
      while (approxRem.isNegative() || approxRem.greaterThan(rem)) {
        approx -= delta;
        approxRes = goog.math.Long.fromNumber(approx);
        approxRem = approxRes.multiply(other);
      }

      // We know the answer can't be zero... and actually, zero would cause
      // infinite recursion since we would make no progress.
      if (approxRes.isZero()) {
        approxRes = goog.math.Long.ONE;
      }

      res = res.add(approxRes);
      rem = rem.subtract(approxRem);
    }
    return res;
  };


  /**
   * Returns this Long modulo the given one.
   * @param {goog.math.Long} other Long by which to mod.
   * @return {!goog.math.Long} This Long modulo the given one.
   */
  goog.math.Long.prototype.modulo = function(other) {
    return this.subtract(this.div(other).multiply(other));
  };


  /** @return {!goog.math.Long} The bitwise-NOT of this value. */
  goog.math.Long.prototype.not = function() {
    return goog.math.Long.fromBits(~this.low_, ~this.high_);
  };


  /**
   * Returns the bitwise-AND of this Long and the given one.
   * @param {goog.math.Long} other The Long with which to AND.
   * @return {!goog.math.Long} The bitwise-AND of this and the other.
   */
  goog.math.Long.prototype.and = function(other) {
    return goog.math.Long.fromBits(this.low_ & other.low_,
                                   this.high_ & other.high_);
  };


  /**
   * Returns the bitwise-OR of this Long and the given one.
   * @param {goog.math.Long} other The Long with which to OR.
   * @return {!goog.math.Long} The bitwise-OR of this and the other.
   */
  goog.math.Long.prototype.or = function(other) {
    return goog.math.Long.fromBits(this.low_ | other.low_,
                                   this.high_ | other.high_);
  };


  /**
   * Returns the bitwise-XOR of this Long and the given one.
   * @param {goog.math.Long} other The Long with which to XOR.
   * @return {!goog.math.Long} The bitwise-XOR of this and the other.
   */
  goog.math.Long.prototype.xor = function(other) {
    return goog.math.Long.fromBits(this.low_ ^ other.low_,
                                   this.high_ ^ other.high_);
  };


  /**
   * Returns this Long with bits shifted to the left by the given amount.
   * @param {number} numBits The number of bits by which to shift.
   * @return {!goog.math.Long} This shifted to the left by the given amount.
   */
  goog.math.Long.prototype.shiftLeft = function(numBits) {
    numBits &= 63;
    if (numBits == 0) {
      return this;
    } else {
      var low = this.low_;
      if (numBits < 32) {
        var high = this.high_;
        return goog.math.Long.fromBits(
            low << numBits,
            (high << numBits) | (low >>> (32 - numBits)));
      } else {
        return goog.math.Long.fromBits(0, low << (numBits - 32));
      }
    }
  };


  /**
   * Returns this Long with bits shifted to the right by the given amount.
   * @param {number} numBits The number of bits by which to shift.
   * @return {!goog.math.Long} This shifted to the right by the given amount.
   */
  goog.math.Long.prototype.shiftRight = function(numBits) {
    numBits &= 63;
    if (numBits == 0) {
      return this;
    } else {
      var high = this.high_;
      if (numBits < 32) {
        var low = this.low_;
        return goog.math.Long.fromBits(
            (low >>> numBits) | (high << (32 - numBits)),
            high >> numBits);
      } else {
        return goog.math.Long.fromBits(
            high >> (numBits - 32),
            high >= 0 ? 0 : -1);
      }
    }
  };


  /**
   * Returns this Long with bits shifted to the right by the given amount, with
   * the new top bits matching the current sign bit.
   * @param {number} numBits The number of bits by which to shift.
   * @return {!goog.math.Long} This shifted to the right by the given amount, with
   *     zeros placed into the new leading bits.
   */
  goog.math.Long.prototype.shiftRightUnsigned = function(numBits) {
    numBits &= 63;
    if (numBits == 0) {
      return this;
    } else {
      var high = this.high_;
      if (numBits < 32) {
        var low = this.low_;
        return goog.math.Long.fromBits(
            (low >>> numBits) | (high << (32 - numBits)),
            high >>> numBits);
      } else if (numBits == 32) {
        return goog.math.Long.fromBits(high, 0);
      } else {
        return goog.math.Long.fromBits(high >>> (numBits - 32), 0);
      }
    }
  };

  //======= begin jsbn =======

  var navigator = { appName: 'Modern Browser' }; // polyfill a little

  // Copyright (c) 2005  Tom Wu
  // All Rights Reserved.
  // http://www-cs-students.stanford.edu/~tjw/jsbn/

  /*
   * Copyright (c) 2003-2005  Tom Wu
   * All Rights Reserved.
   *
   * Permission is hereby granted, free of charge, to any person obtaining
   * a copy of this software and associated documentation files (the
   * "Software"), to deal in the Software without restriction, including
   * without limitation the rights to use, copy, modify, merge, publish,
   * distribute, sublicense, and/or sell copies of the Software, and to
   * permit persons to whom the Software is furnished to do so, subject to
   * the following conditions:
   *
   * The above copyright notice and this permission notice shall be
   * included in all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS-IS" AND WITHOUT WARRANTY OF ANY KIND, 
   * EXPRESS, IMPLIED OR OTHERWISE, INCLUDING WITHOUT LIMITATION, ANY 
   * WARRANTY OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.  
   *
   * IN NO EVENT SHALL TOM WU BE LIABLE FOR ANY SPECIAL, INCIDENTAL,
   * INDIRECT OR CONSEQUENTIAL DAMAGES OF ANY KIND, OR ANY DAMAGES WHATSOEVER
   * RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER OR NOT ADVISED OF
   * THE POSSIBILITY OF DAMAGE, AND ON ANY THEORY OF LIABILITY, ARISING OUT
   * OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
   *
   * In addition, the following condition applies:
   *
   * All redistributions must retain an intact copy of this copyright notice
   * and disclaimer.
   */

  // Basic JavaScript BN library - subset useful for RSA encryption.

  // Bits per digit
  var dbits;

  // JavaScript engine analysis
  var canary = 0xdeadbeefcafe;
  var j_lm = ((canary&0xffffff)==0xefcafe);

  // (public) Constructor
  function BigInteger(a,b,c) {
    if(a != null)
      if("number" == typeof a) this.fromNumber(a,b,c);
      else if(b == null && "string" != typeof a) this.fromString(a,256);
      else this.fromString(a,b);
  }

  // return new, unset BigInteger
  function nbi() { return new BigInteger(null); }

  // am: Compute w_j += (x*this_i), propagate carries,
  // c is initial carry, returns final carry.
  // c < 3*dvalue, x < 2*dvalue, this_i < dvalue
  // We need to select the fastest one that works in this environment.

  // am1: use a single mult and divide to get the high bits,
  // max digit bits should be 26 because
  // max internal value = 2*dvalue^2-2*dvalue (< 2^53)
  function am1(i,x,w,j,c,n) {
    while(--n >= 0) {
      var v = x*this[i++]+w[j]+c;
      c = Math.floor(v/0x4000000);
      w[j++] = v&0x3ffffff;
    }
    return c;
  }
  // am2 avoids a big mult-and-extract completely.
  // Max digit bits should be <= 30 because we do bitwise ops
  // on values up to 2*hdvalue^2-hdvalue-1 (< 2^31)
  function am2(i,x,w,j,c,n) {
    var xl = x&0x7fff, xh = x>>15;
    while(--n >= 0) {
      var l = this[i]&0x7fff;
      var h = this[i++]>>15;
      var m = xh*l+h*xl;
      l = xl*l+((m&0x7fff)<<15)+w[j]+(c&0x3fffffff);
      c = (l>>>30)+(m>>>15)+xh*h+(c>>>30);
      w[j++] = l&0x3fffffff;
    }
    return c;
  }
  // Alternately, set max digit bits to 28 since some
  // browsers slow down when dealing with 32-bit numbers.
  function am3(i,x,w,j,c,n) {
    var xl = x&0x3fff, xh = x>>14;
    while(--n >= 0) {
      var l = this[i]&0x3fff;
      var h = this[i++]>>14;
      var m = xh*l+h*xl;
      l = xl*l+((m&0x3fff)<<14)+w[j]+c;
      c = (l>>28)+(m>>14)+xh*h;
      w[j++] = l&0xfffffff;
    }
    return c;
  }
  if(j_lm && (navigator.appName == "Microsoft Internet Explorer")) {
    BigInteger.prototype.am = am2;
    dbits = 30;
  }
  else if(j_lm && (navigator.appName != "Netscape")) {
    BigInteger.prototype.am = am1;
    dbits = 26;
  }
  else { // Mozilla/Netscape seems to prefer am3
    BigInteger.prototype.am = am3;
    dbits = 28;
  }

  BigInteger.prototype.DB = dbits;
  BigInteger.prototype.DM = ((1<<dbits)-1);
  BigInteger.prototype.DV = (1<<dbits);

  var BI_FP = 52;
  BigInteger.prototype.FV = Math.pow(2,BI_FP);
  BigInteger.prototype.F1 = BI_FP-dbits;
  BigInteger.prototype.F2 = 2*dbits-BI_FP;

  // Digit conversions
  var BI_RM = "0123456789abcdefghijklmnopqrstuvwxyz";
  var BI_RC = new Array();
  var rr,vv;
  rr = "0".charCodeAt(0);
  for(vv = 0; vv <= 9; ++vv) BI_RC[rr++] = vv;
  rr = "a".charCodeAt(0);
  for(vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;
  rr = "A".charCodeAt(0);
  for(vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;

  function int2char(n) { return BI_RM.charAt(n); }
  function intAt(s,i) {
    var c = BI_RC[s.charCodeAt(i)];
    return (c==null)?-1:c;
  }

  // (protected) copy this to r
  function bnpCopyTo(r) {
    for(var i = this.t-1; i >= 0; --i) r[i] = this[i];
    r.t = this.t;
    r.s = this.s;
  }

  // (protected) set from integer value x, -DV <= x < DV
  function bnpFromInt(x) {
    this.t = 1;
    this.s = (x<0)?-1:0;
    if(x > 0) this[0] = x;
    else if(x < -1) this[0] = x+DV;
    else this.t = 0;
  }

  // return bigint initialized to value
  function nbv(i) { var r = nbi(); r.fromInt(i); return r; }

  // (protected) set from string and radix
  function bnpFromString(s,b) {
    var k;
    if(b == 16) k = 4;
    else if(b == 8) k = 3;
    else if(b == 256) k = 8; // byte array
    else if(b == 2) k = 1;
    else if(b == 32) k = 5;
    else if(b == 4) k = 2;
    else { this.fromRadix(s,b); return; }
    this.t = 0;
    this.s = 0;
    var i = s.length, mi = false, sh = 0;
    while(--i >= 0) {
      var x = (k==8)?s[i]&0xff:intAt(s,i);
      if(x < 0) {
        if(s.charAt(i) == "-") mi = true;
        continue;
      }
      mi = false;
      if(sh == 0)
        this[this.t++] = x;
      else if(sh+k > this.DB) {
        this[this.t-1] |= (x&((1<<(this.DB-sh))-1))<<sh;
        this[this.t++] = (x>>(this.DB-sh));
      }
      else
        this[this.t-1] |= x<<sh;
      sh += k;
      if(sh >= this.DB) sh -= this.DB;
    }
    if(k == 8 && (s[0]&0x80) != 0) {
      this.s = -1;
      if(sh > 0) this[this.t-1] |= ((1<<(this.DB-sh))-1)<<sh;
    }
    this.clamp();
    if(mi) BigInteger.ZERO.subTo(this,this);
  }

  // (protected) clamp off excess high words
  function bnpClamp() {
    var c = this.s&this.DM;
    while(this.t > 0 && this[this.t-1] == c) --this.t;
  }

  // (public) return string representation in given radix
  function bnToString(b) {
    if(this.s < 0) return "-"+this.negate().toString(b);
    var k;
    if(b == 16) k = 4;
    else if(b == 8) k = 3;
    else if(b == 2) k = 1;
    else if(b == 32) k = 5;
    else if(b == 4) k = 2;
    else return this.toRadix(b);
    var km = (1<<k)-1, d, m = false, r = "", i = this.t;
    var p = this.DB-(i*this.DB)%k;
    if(i-- > 0) {
      if(p < this.DB && (d = this[i]>>p) > 0) { m = true; r = int2char(d); }
      while(i >= 0) {
        if(p < k) {
          d = (this[i]&((1<<p)-1))<<(k-p);
          d |= this[--i]>>(p+=this.DB-k);
        }
        else {
          d = (this[i]>>(p-=k))&km;
          if(p <= 0) { p += this.DB; --i; }
        }
        if(d > 0) m = true;
        if(m) r += int2char(d);
      }
    }
    return m?r:"0";
  }

  // (public) -this
  function bnNegate() { var r = nbi(); BigInteger.ZERO.subTo(this,r); return r; }

  // (public) |this|
  function bnAbs() { return (this.s<0)?this.negate():this; }

  // (public) return + if this > a, - if this < a, 0 if equal
  function bnCompareTo(a) {
    var r = this.s-a.s;
    if(r != 0) return r;
    var i = this.t;
    r = i-a.t;
    if(r != 0) return (this.s<0)?-r:r;
    while(--i >= 0) if((r=this[i]-a[i]) != 0) return r;
    return 0;
  }

  // returns bit length of the integer x
  function nbits(x) {
    var r = 1, t;
    if((t=x>>>16) != 0) { x = t; r += 16; }
    if((t=x>>8) != 0) { x = t; r += 8; }
    if((t=x>>4) != 0) { x = t; r += 4; }
    if((t=x>>2) != 0) { x = t; r += 2; }
    if((t=x>>1) != 0) { x = t; r += 1; }
    return r;
  }

  // (public) return the number of bits in "this"
  function bnBitLength() {
    if(this.t <= 0) return 0;
    return this.DB*(this.t-1)+nbits(this[this.t-1]^(this.s&this.DM));
  }

  // (protected) r = this << n*DB
  function bnpDLShiftTo(n,r) {
    var i;
    for(i = this.t-1; i >= 0; --i) r[i+n] = this[i];
    for(i = n-1; i >= 0; --i) r[i] = 0;
    r.t = this.t+n;
    r.s = this.s;
  }

  // (protected) r = this >> n*DB
  function bnpDRShiftTo(n,r) {
    for(var i = n; i < this.t; ++i) r[i-n] = this[i];
    r.t = Math.max(this.t-n,0);
    r.s = this.s;
  }

  // (protected) r = this << n
  function bnpLShiftTo(n,r) {
    var bs = n%this.DB;
    var cbs = this.DB-bs;
    var bm = (1<<cbs)-1;
    var ds = Math.floor(n/this.DB), c = (this.s<<bs)&this.DM, i;
    for(i = this.t-1; i >= 0; --i) {
      r[i+ds+1] = (this[i]>>cbs)|c;
      c = (this[i]&bm)<<bs;
    }
    for(i = ds-1; i >= 0; --i) r[i] = 0;
    r[ds] = c;
    r.t = this.t+ds+1;
    r.s = this.s;
    r.clamp();
  }

  // (protected) r = this >> n
  function bnpRShiftTo(n,r) {
    r.s = this.s;
    var ds = Math.floor(n/this.DB);
    if(ds >= this.t) { r.t = 0; return; }
    var bs = n%this.DB;
    var cbs = this.DB-bs;
    var bm = (1<<bs)-1;
    r[0] = this[ds]>>bs;
    for(var i = ds+1; i < this.t; ++i) {
      r[i-ds-1] |= (this[i]&bm)<<cbs;
      r[i-ds] = this[i]>>bs;
    }
    if(bs > 0) r[this.t-ds-1] |= (this.s&bm)<<cbs;
    r.t = this.t-ds;
    r.clamp();
  }

  // (protected) r = this - a
  function bnpSubTo(a,r) {
    var i = 0, c = 0, m = Math.min(a.t,this.t);
    while(i < m) {
      c += this[i]-a[i];
      r[i++] = c&this.DM;
      c >>= this.DB;
    }
    if(a.t < this.t) {
      c -= a.s;
      while(i < this.t) {
        c += this[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c += this.s;
    }
    else {
      c += this.s;
      while(i < a.t) {
        c -= a[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c -= a.s;
    }
    r.s = (c<0)?-1:0;
    if(c < -1) r[i++] = this.DV+c;
    else if(c > 0) r[i++] = c;
    r.t = i;
    r.clamp();
  }

  // (protected) r = this * a, r != this,a (HAC 14.12)
  // "this" should be the larger one if appropriate.
  function bnpMultiplyTo(a,r) {
    var x = this.abs(), y = a.abs();
    var i = x.t;
    r.t = i+y.t;
    while(--i >= 0) r[i] = 0;
    for(i = 0; i < y.t; ++i) r[i+x.t] = x.am(0,y[i],r,i,0,x.t);
    r.s = 0;
    r.clamp();
    if(this.s != a.s) BigInteger.ZERO.subTo(r,r);
  }

  // (protected) r = this^2, r != this (HAC 14.16)
  function bnpSquareTo(r) {
    var x = this.abs();
    var i = r.t = 2*x.t;
    while(--i >= 0) r[i] = 0;
    for(i = 0; i < x.t-1; ++i) {
      var c = x.am(i,x[i],r,2*i,0,1);
      if((r[i+x.t]+=x.am(i+1,2*x[i],r,2*i+1,c,x.t-i-1)) >= x.DV) {
        r[i+x.t] -= x.DV;
        r[i+x.t+1] = 1;
      }
    }
    if(r.t > 0) r[r.t-1] += x.am(i,x[i],r,2*i,0,1);
    r.s = 0;
    r.clamp();
  }

  // (protected) divide this by m, quotient and remainder to q, r (HAC 14.20)
  // r != q, this != m.  q or r may be null.
  function bnpDivRemTo(m,q,r) {
    var pm = m.abs();
    if(pm.t <= 0) return;
    var pt = this.abs();
    if(pt.t < pm.t) {
      if(q != null) q.fromInt(0);
      if(r != null) this.copyTo(r);
      return;
    }
    if(r == null) r = nbi();
    var y = nbi(), ts = this.s, ms = m.s;
    var nsh = this.DB-nbits(pm[pm.t-1]);	// normalize modulus
    if(nsh > 0) { pm.lShiftTo(nsh,y); pt.lShiftTo(nsh,r); }
    else { pm.copyTo(y); pt.copyTo(r); }
    var ys = y.t;
    var y0 = y[ys-1];
    if(y0 == 0) return;
    var yt = y0*(1<<this.F1)+((ys>1)?y[ys-2]>>this.F2:0);
    var d1 = this.FV/yt, d2 = (1<<this.F1)/yt, e = 1<<this.F2;
    var i = r.t, j = i-ys, t = (q==null)?nbi():q;
    y.dlShiftTo(j,t);
    if(r.compareTo(t) >= 0) {
      r[r.t++] = 1;
      r.subTo(t,r);
    }
    BigInteger.ONE.dlShiftTo(ys,t);
    t.subTo(y,y);	// "negative" y so we can replace sub with am later
    while(y.t < ys) y[y.t++] = 0;
    while(--j >= 0) {
      // Estimate quotient digit
      var qd = (r[--i]==y0)?this.DM:Math.floor(r[i]*d1+(r[i-1]+e)*d2);
      if((r[i]+=y.am(0,qd,r,j,0,ys)) < qd) {	// Try it out
        y.dlShiftTo(j,t);
        r.subTo(t,r);
        while(r[i] < --qd) r.subTo(t,r);
      }
    }
    if(q != null) {
      r.drShiftTo(ys,q);
      if(ts != ms) BigInteger.ZERO.subTo(q,q);
    }
    r.t = ys;
    r.clamp();
    if(nsh > 0) r.rShiftTo(nsh,r);	// Denormalize remainder
    if(ts < 0) BigInteger.ZERO.subTo(r,r);
  }

  // (public) this mod a
  function bnMod(a) {
    var r = nbi();
    this.abs().divRemTo(a,null,r);
    if(this.s < 0 && r.compareTo(BigInteger.ZERO) > 0) a.subTo(r,r);
    return r;
  }

  // Modular reduction using "classic" algorithm
  function Classic(m) { this.m = m; }
  function cConvert(x) {
    if(x.s < 0 || x.compareTo(this.m) >= 0) return x.mod(this.m);
    else return x;
  }
  function cRevert(x) { return x; }
  function cReduce(x) { x.divRemTo(this.m,null,x); }
  function cMulTo(x,y,r) { x.multiplyTo(y,r); this.reduce(r); }
  function cSqrTo(x,r) { x.squareTo(r); this.reduce(r); }

  Classic.prototype.convert = cConvert;
  Classic.prototype.revert = cRevert;
  Classic.prototype.reduce = cReduce;
  Classic.prototype.mulTo = cMulTo;
  Classic.prototype.sqrTo = cSqrTo;

  // (protected) return "-1/this % 2^DB"; useful for Mont. reduction
  // justification:
  //         xy == 1 (mod m)
  //         xy =  1+km
  //   xy(2-xy) = (1+km)(1-km)
  // x[y(2-xy)] = 1-k^2m^2
  // x[y(2-xy)] == 1 (mod m^2)
  // if y is 1/x mod m, then y(2-xy) is 1/x mod m^2
  // should reduce x and y(2-xy) by m^2 at each step to keep size bounded.
  // JS multiply "overflows" differently from C/C++, so care is needed here.
  function bnpInvDigit() {
    if(this.t < 1) return 0;
    var x = this[0];
    if((x&1) == 0) return 0;
    var y = x&3;		// y == 1/x mod 2^2
    y = (y*(2-(x&0xf)*y))&0xf;	// y == 1/x mod 2^4
    y = (y*(2-(x&0xff)*y))&0xff;	// y == 1/x mod 2^8
    y = (y*(2-(((x&0xffff)*y)&0xffff)))&0xffff;	// y == 1/x mod 2^16
    // last step - calculate inverse mod DV directly;
    // assumes 16 < DB <= 32 and assumes ability to handle 48-bit ints
    y = (y*(2-x*y%this.DV))%this.DV;		// y == 1/x mod 2^dbits
    // we really want the negative inverse, and -DV < y < DV
    return (y>0)?this.DV-y:-y;
  }

  // Montgomery reduction
  function Montgomery(m) {
    this.m = m;
    this.mp = m.invDigit();
    this.mpl = this.mp&0x7fff;
    this.mph = this.mp>>15;
    this.um = (1<<(m.DB-15))-1;
    this.mt2 = 2*m.t;
  }

  // xR mod m
  function montConvert(x) {
    var r = nbi();
    x.abs().dlShiftTo(this.m.t,r);
    r.divRemTo(this.m,null,r);
    if(x.s < 0 && r.compareTo(BigInteger.ZERO) > 0) this.m.subTo(r,r);
    return r;
  }

  // x/R mod m
  function montRevert(x) {
    var r = nbi();
    x.copyTo(r);
    this.reduce(r);
    return r;
  }

  // x = x/R mod m (HAC 14.32)
  function montReduce(x) {
    while(x.t <= this.mt2)	// pad x so am has enough room later
      x[x.t++] = 0;
    for(var i = 0; i < this.m.t; ++i) {
      // faster way of calculating u0 = x[i]*mp mod DV
      var j = x[i]&0x7fff;
      var u0 = (j*this.mpl+(((j*this.mph+(x[i]>>15)*this.mpl)&this.um)<<15))&x.DM;
      // use am to combine the multiply-shift-add into one call
      j = i+this.m.t;
      x[j] += this.m.am(0,u0,x,i,0,this.m.t);
      // propagate carry
      while(x[j] >= x.DV) { x[j] -= x.DV; x[++j]++; }
    }
    x.clamp();
    x.drShiftTo(this.m.t,x);
    if(x.compareTo(this.m) >= 0) x.subTo(this.m,x);
  }

  // r = "x^2/R mod m"; x != r
  function montSqrTo(x,r) { x.squareTo(r); this.reduce(r); }

  // r = "xy/R mod m"; x,y != r
  function montMulTo(x,y,r) { x.multiplyTo(y,r); this.reduce(r); }

  Montgomery.prototype.convert = montConvert;
  Montgomery.prototype.revert = montRevert;
  Montgomery.prototype.reduce = montReduce;
  Montgomery.prototype.mulTo = montMulTo;
  Montgomery.prototype.sqrTo = montSqrTo;

  // (protected) true iff this is even
  function bnpIsEven() { return ((this.t>0)?(this[0]&1):this.s) == 0; }

  // (protected) this^e, e < 2^32, doing sqr and mul with "r" (HAC 14.79)
  function bnpExp(e,z) {
    if(e > 0xffffffff || e < 1) return BigInteger.ONE;
    var r = nbi(), r2 = nbi(), g = z.convert(this), i = nbits(e)-1;
    g.copyTo(r);
    while(--i >= 0) {
      z.sqrTo(r,r2);
      if((e&(1<<i)) > 0) z.mulTo(r2,g,r);
      else { var t = r; r = r2; r2 = t; }
    }
    return z.revert(r);
  }

  // (public) this^e % m, 0 <= e < 2^32
  function bnModPowInt(e,m) {
    var z;
    if(e < 256 || m.isEven()) z = new Classic(m); else z = new Montgomery(m);
    return this.exp(e,z);
  }

  // protected
  BigInteger.prototype.copyTo = bnpCopyTo;
  BigInteger.prototype.fromInt = bnpFromInt;
  BigInteger.prototype.fromString = bnpFromString;
  BigInteger.prototype.clamp = bnpClamp;
  BigInteger.prototype.dlShiftTo = bnpDLShiftTo;
  BigInteger.prototype.drShiftTo = bnpDRShiftTo;
  BigInteger.prototype.lShiftTo = bnpLShiftTo;
  BigInteger.prototype.rShiftTo = bnpRShiftTo;
  BigInteger.prototype.subTo = bnpSubTo;
  BigInteger.prototype.multiplyTo = bnpMultiplyTo;
  BigInteger.prototype.squareTo = bnpSquareTo;
  BigInteger.prototype.divRemTo = bnpDivRemTo;
  BigInteger.prototype.invDigit = bnpInvDigit;
  BigInteger.prototype.isEven = bnpIsEven;
  BigInteger.prototype.exp = bnpExp;

  // public
  BigInteger.prototype.toString = bnToString;
  BigInteger.prototype.negate = bnNegate;
  BigInteger.prototype.abs = bnAbs;
  BigInteger.prototype.compareTo = bnCompareTo;
  BigInteger.prototype.bitLength = bnBitLength;
  BigInteger.prototype.mod = bnMod;
  BigInteger.prototype.modPowInt = bnModPowInt;

  // "constants"
  BigInteger.ZERO = nbv(0);
  BigInteger.ONE = nbv(1);

  // jsbn2 stuff

  // (protected) convert from radix string
  function bnpFromRadix(s,b) {
    this.fromInt(0);
    if(b == null) b = 10;
    var cs = this.chunkSize(b);
    var d = Math.pow(b,cs), mi = false, j = 0, w = 0;
    for(var i = 0; i < s.length; ++i) {
      var x = intAt(s,i);
      if(x < 0) {
        if(s.charAt(i) == "-" && this.signum() == 0) mi = true;
        continue;
      }
      w = b*w+x;
      if(++j >= cs) {
        this.dMultiply(d);
        this.dAddOffset(w,0);
        j = 0;
        w = 0;
      }
    }
    if(j > 0) {
      this.dMultiply(Math.pow(b,j));
      this.dAddOffset(w,0);
    }
    if(mi) BigInteger.ZERO.subTo(this,this);
  }

  // (protected) return x s.t. r^x < DV
  function bnpChunkSize(r) { return Math.floor(Math.LN2*this.DB/Math.log(r)); }

  // (public) 0 if this == 0, 1 if this > 0
  function bnSigNum() {
    if(this.s < 0) return -1;
    else if(this.t <= 0 || (this.t == 1 && this[0] <= 0)) return 0;
    else return 1;
  }

  // (protected) this *= n, this >= 0, 1 < n < DV
  function bnpDMultiply(n) {
    this[this.t] = this.am(0,n-1,this,0,0,this.t);
    ++this.t;
    this.clamp();
  }

  // (protected) this += n << w words, this >= 0
  function bnpDAddOffset(n,w) {
    if(n == 0) return;
    while(this.t <= w) this[this.t++] = 0;
    this[w] += n;
    while(this[w] >= this.DV) {
      this[w] -= this.DV;
      if(++w >= this.t) this[this.t++] = 0;
      ++this[w];
    }
  }

  // (protected) convert to radix string
  function bnpToRadix(b) {
    if(b == null) b = 10;
    if(this.signum() == 0 || b < 2 || b > 36) return "0";
    var cs = this.chunkSize(b);
    var a = Math.pow(b,cs);
    var d = nbv(a), y = nbi(), z = nbi(), r = "";
    this.divRemTo(d,y,z);
    while(y.signum() > 0) {
      r = (a+z.intValue()).toString(b).substr(1) + r;
      y.divRemTo(d,y,z);
    }
    return z.intValue().toString(b) + r;
  }

  // (public) return value as integer
  function bnIntValue() {
    if(this.s < 0) {
      if(this.t == 1) return this[0]-this.DV;
      else if(this.t == 0) return -1;
    }
    else if(this.t == 1) return this[0];
    else if(this.t == 0) return 0;
    // assumes 16 < DB < 32
    return ((this[1]&((1<<(32-this.DB))-1))<<this.DB)|this[0];
  }

  // (protected) r = this + a
  function bnpAddTo(a,r) {
    var i = 0, c = 0, m = Math.min(a.t,this.t);
    while(i < m) {
      c += this[i]+a[i];
      r[i++] = c&this.DM;
      c >>= this.DB;
    }
    if(a.t < this.t) {
      c += a.s;
      while(i < this.t) {
        c += this[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c += this.s;
    }
    else {
      c += this.s;
      while(i < a.t) {
        c += a[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c += a.s;
    }
    r.s = (c<0)?-1:0;
    if(c > 0) r[i++] = c;
    else if(c < -1) r[i++] = this.DV+c;
    r.t = i;
    r.clamp();
  }

  BigInteger.prototype.fromRadix = bnpFromRadix;
  BigInteger.prototype.chunkSize = bnpChunkSize;
  BigInteger.prototype.signum = bnSigNum;
  BigInteger.prototype.dMultiply = bnpDMultiply;
  BigInteger.prototype.dAddOffset = bnpDAddOffset;
  BigInteger.prototype.toRadix = bnpToRadix;
  BigInteger.prototype.intValue = bnIntValue;
  BigInteger.prototype.addTo = bnpAddTo;

  //======= end jsbn =======

  // Emscripten wrapper
  var Wrapper = {
    abs: function(l, h) {
      var x = new goog.math.Long(l, h);
      var ret;
      if (x.isNegative()) {
        ret = x.negate();
      } else {
        ret = x;
      }
      HEAP32[tempDoublePtr>>2] = ret.low_;
      HEAP32[tempDoublePtr+4>>2] = ret.high_;
    },
    ensureTemps: function() {
      if (Wrapper.ensuredTemps) return;
      Wrapper.ensuredTemps = true;
      Wrapper.two32 = new BigInteger();
      Wrapper.two32.fromString('4294967296', 10);
      Wrapper.two64 = new BigInteger();
      Wrapper.two64.fromString('18446744073709551616', 10);
      Wrapper.temp1 = new BigInteger();
      Wrapper.temp2 = new BigInteger();
    },
    lh2bignum: function(l, h) {
      var a = new BigInteger();
      a.fromString(h.toString(), 10);
      var b = new BigInteger();
      a.multiplyTo(Wrapper.two32, b);
      var c = new BigInteger();
      c.fromString(l.toString(), 10);
      var d = new BigInteger();
      c.addTo(b, d);
      return d;
    },
    stringify: function(l, h, unsigned) {
      var ret = new goog.math.Long(l, h).toString();
      if (unsigned && ret[0] == '-') {
        // unsign slowly using jsbn bignums
        Wrapper.ensureTemps();
        var bignum = new BigInteger();
        bignum.fromString(ret, 10);
        ret = new BigInteger();
        Wrapper.two64.addTo(bignum, ret);
        ret = ret.toString(10);
      }
      return ret;
    },
    fromString: function(str, base, min, max, unsigned) {
      Wrapper.ensureTemps();
      var bignum = new BigInteger();
      bignum.fromString(str, base);
      var bigmin = new BigInteger();
      bigmin.fromString(min, 10);
      var bigmax = new BigInteger();
      bigmax.fromString(max, 10);
      if (unsigned && bignum.compareTo(BigInteger.ZERO) < 0) {
        var temp = new BigInteger();
        bignum.addTo(Wrapper.two64, temp);
        bignum = temp;
      }
      var error = false;
      if (bignum.compareTo(bigmin) < 0) {
        bignum = bigmin;
        error = true;
      } else if (bignum.compareTo(bigmax) > 0) {
        bignum = bigmax;
        error = true;
      }
      var ret = goog.math.Long.fromString(bignum.toString()); // min-max checks should have clamped this to a range goog.math.Long can handle well
      HEAP32[tempDoublePtr>>2] = ret.low_;
      HEAP32[tempDoublePtr+4>>2] = ret.high_;
      if (error) throw 'range error';
    }
  };
  return Wrapper;
})();

//======= end closure i64 code =======



// === Auto-generated postamble setup entry stuff ===

if (memoryInitializer) {
  if (Module['memoryInitializerPrefixURL']) {
    memoryInitializer = Module['memoryInitializerPrefixURL'] + memoryInitializer;
  }
  if (ENVIRONMENT_IS_NODE || ENVIRONMENT_IS_SHELL) {
    var data = Module['readBinary'](memoryInitializer);
    HEAPU8.set(data, STATIC_BASE);
  } else {
    addRunDependency('memory initializer');
    Browser.asyncLoad(memoryInitializer, function(data) {
      HEAPU8.set(data, STATIC_BASE);
      removeRunDependency('memory initializer');
    }, function(data) {
      throw 'could not load memory initializer ' + memoryInitializer;
    });
  }
}

function ExitStatus(status) {
  this.name = "ExitStatus";
  this.message = "Program terminated with exit(" + status + ")";
  this.status = status;
};
ExitStatus.prototype = new Error();
ExitStatus.prototype.constructor = ExitStatus;

var initialStackTop;
var preloadStartTime = null;
var calledMain = false;

dependenciesFulfilled = function runCaller() {
  // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
  if (!Module['calledRun'] && shouldRunNow) run();
  if (!Module['calledRun']) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled
}

Module['callMain'] = Module.callMain = function callMain(args) {
  assert(runDependencies == 0, 'cannot call main when async dependencies remain! (listen on __ATMAIN__)');
  assert(__ATPRERUN__.length == 0, 'cannot call main when preRun functions remain to be called');

  args = args || [];

  ensureInitRuntime();

  var argc = args.length+1;
  function pad() {
    for (var i = 0; i < 4-1; i++) {
      argv.push(0);
    }
  }
  var argv = [allocate(intArrayFromString(Module['thisProgram']), 'i8', ALLOC_NORMAL) ];
  pad();
  for (var i = 0; i < argc-1; i = i + 1) {
    argv.push(allocate(intArrayFromString(args[i]), 'i8', ALLOC_NORMAL));
    pad();
  }
  argv.push(0);
  argv = allocate(argv, 'i32', ALLOC_NORMAL);

  initialStackTop = STACKTOP;

  try {

    var ret = Module['_main'](argc, argv, 0);


    // if we're not running an evented main loop, it's time to exit
    exit(ret);
  }
  catch(e) {
    if (e instanceof ExitStatus) {
      // exit() throws this once it's done to make sure execution
      // has been stopped completely
      return;
    } else if (e == 'SimulateInfiniteLoop') {
      // running an evented main loop, don't immediately exit
      Module['noExitRuntime'] = true;
      return;
    } else {
      if (e && typeof e === 'object' && e.stack) Module.printErr('exception thrown: ' + [e, e.stack]);
      throw e;
    }
  } finally {
    calledMain = true;
  }
}




function run(args) {
  args = args || Module['arguments'];

  if (preloadStartTime === null) preloadStartTime = Date.now();

  if (runDependencies > 0) {
    Module.printErr('run() called, but dependencies remain, so not running');
    return;
  }

  preRun();

  if (runDependencies > 0) return; // a preRun added a dependency, run will be called later
  if (Module['calledRun']) return; // run may have just been called through dependencies being fulfilled just in this very frame

  function doRun() {
    if (Module['calledRun']) return; // run may have just been called while the async setStatus time below was happening
    Module['calledRun'] = true;

    if (ABORT) return; 

    ensureInitRuntime();

    preMain();

    if (ENVIRONMENT_IS_WEB && preloadStartTime !== null) {
      Module.printErr('pre-main prep time: ' + (Date.now() - preloadStartTime) + ' ms');
    }

    if (Module['_main'] && shouldRunNow) {
      Module['callMain'](args);
    }

    postRun();
  }

  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      doRun();
    }, 1);
  } else {
    doRun();
  }
}
Module['run'] = Module.run = run;

function exit(status) {
  if (Module['noExitRuntime']) {
    return;
  }

  ABORT = true;
  EXITSTATUS = status;
  STACKTOP = initialStackTop;

  // exit the runtime
  exitRuntime();

  if (ENVIRONMENT_IS_NODE) {
    // Work around a node.js bug where stdout buffer is not flushed at process exit:
    // Instead of process.exit() directly, wait for stdout flush event.
    // See https://github.com/joyent/node/issues/1669 and https://github.com/kripken/emscripten/issues/2582
    // Workaround is based on https://github.com/RReverser/acorn/commit/50ab143cecc9ed71a2d66f78b4aec3bb2e9844f6
    process['stdout']['once']('drain', function () {
      process['exit'](status);
    });
    console.log(' '); // Make sure to print something to force the drain event to occur, in case the stdout buffer was empty.
    // Work around another node bug where sometimes 'drain' is never fired - make another effort
    // to emit the exit status, after a significant delay (if node hasn't fired drain by then, give up)
    setTimeout(function() {
      process['exit'](status);
    }, 500);
  } else if (ENVIRONMENT_IS_SHELL && typeof quit === 'function') {
    quit(status);
  }
  // if we reach here, we must throw an exception to halt the current execution
  throw new ExitStatus(status);
}
Module['exit'] = Module.exit = exit;

function abort(text) {
  if (text) {
    Module.print(text);
    Module.printErr(text);
  }

  ABORT = true;
  EXITSTATUS = 1;

  var extra = '\nIf this abort() is unexpected, build with -s ASSERTIONS=1 which can give more information.';

  throw 'abort() at ' + stackTrace() + extra;
}
Module['abort'] = Module.abort = abort;

// {{PRE_RUN_ADDITIONS}}

if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}

// shouldRunNow refers to calling main(), not run().
var shouldRunNow = true;
if (Module['noInitialRun']) {
  shouldRunNow = false;
}


run();

// {{POST_RUN_ADDITIONS}}






// {{MODULE_ADDITIONS}}



// libmp3lame function wrappers

var BUFSIZE = 8192;

return {
	STEREO: 0, 
	JOINT_STEREO: 1, 
	MONO: 3,

	get_version: Module.cwrap('get_lame_version', 'string'),

	init: Module.cwrap('lame_init', 'number'),
	init_params: Module.cwrap('lame_init_params', 'number', [ 'number' ]),

	set_mode: Module.cwrap('lame_set_mode', 'number', [ 'number', 'number' ]),
	get_mode: Module.cwrap('lame_get_mode', 'number', [ 'number' ]),

	set_num_samples: Module.cwrap('lame_set_num_samples', 'number', [ 'number', 'number' ]),
	get_num_samples: Module.cwrap('lame_get_num_samples', 'number', [ 'number' ]),

	set_num_channels: Module.cwrap('lame_set_num_channels', 'number', [ 'number', 'number' ]),
	get_num_channels: Module.cwrap('lame_get_num_channels', 'number', [ 'number' ]),

	set_in_samplerate: Module.cwrap('lame_set_in_samplerate', 'number', [ 'number', 'number' ]),
	get_in_samplerate: Module.cwrap('lame_get_in_samplerate', 'number', [ 'number' ]),

	set_out_samplerate: Module.cwrap('lame_set_out_samplerate', 'number', [ 'number', 'number' ]),
	get_out_samplerate: Module.cwrap('lame_get_out_samplerate', 'number', [ 'number' ]),

	set_bitrate: Module.cwrap('lame_set_brate', 'number', [ 'number', 'number' ]),
	get_bitrate: Module.cwrap('lame_get_brate', 'number', [ 'number' ]),
	
	set_VBR: Module.cwrap('lame_set_VBR', 'number', [ 'number', 'number' ]),
	get_VBR: Module.cwrap('lame_get_VBR', 'number', [ 'number' ]),
	
	set_VBR_q: Module.cwrap('lame_set_VBR_q', 'number', [ 'number', 'number' ]),
	get_VBR_q: Module.cwrap('lame_get_VBR_q', 'number', [ 'number' ]),
	
	set_VBR_mean_bitrate_kbps: Module.cwrap('lame_set_VBR_mean_bitrate_kbps', 'number', [ 'number', 'number' ]),
	get_VBR_mean_bitrate_kbps: Module.cwrap('lame_get_VBR_mean_bitrate_kbps', 'number', [ 'number' ]),
	
	set_VBR_min_bitrate_kbps: Module.cwrap('lame_set_VBR_min_bitrate_kbps', 'number', [ 'number', 'number' ]),
	get_VBR_min_bitrate_kbps: Module.cwrap('lame_get_VBR_min_bitrate_kbps', 'number', [ 'number' ]),
	
	set_VBR_max_bitrate_kbps: Module.cwrap('lame_set_VBR_max_bitrate_kbps', 'number', [ 'number', 'number' ]),
	get_VBR_max_bitrate_kbps: Module.cwrap('lame_get_VBR_max_bitrate_kbps', 'number', [ 'number' ]),

	encode_buffer_ieee_float: function(handle, channel_l, channel_r) {
		var outbuf = _malloc(BUFSIZE);
		var inbuf_l = _malloc(channel_l.length * 4);
		var inbuf_r = _malloc(channel_r.length * 4);
		for (var i=0;i<channel_l.length;i++) {
			setValue(inbuf_l + (i*4), channel_l[i], 'float');
		}
		for (var i=0;i<channel_r.length;i++) {
			setValue(inbuf_r + (i*4), channel_r[i], 'float');
		}
		var nread = Module.ccall('lame_encode_buffer_ieee_float', 'number', [ 'number', 'number', 'number', 'number', 'number', 'number' ], [ handle, inbuf_l, inbuf_r, channel_l.length, outbuf, BUFSIZE ]);
		var arraybuf = new ArrayBuffer(nread);
		var retdata = new Uint8Array(arraybuf);
		retdata.set(HEAPU8.subarray(outbuf, outbuf + nread));
		_free(outbuf);
		_free(inbuf_l);
		_free(inbuf_r);
		return { size: nread, data: retdata };
	},

	encode_flush: function(handle) {
		var outbuf = _malloc(BUFSIZE);
		var nread = Module.ccall('lame_encode_flush', 'number', [ 'number', 'number', 'number' ], [ handle, outbuf, BUFSIZE ]);
		var arraybuf = new ArrayBuffer(nread);
		var retdata = new Uint8Array(arraybuf);
		retdata.set(HEAPU8.subarray(outbuf, outbuf + nread));
		_free(outbuf);
		return { size: nread, data: retdata };
	},

	close: Module.cwrap('lame_close', 'number', [ 'number' ])
};

})();

self.Lame = Lame; // make Lame accessible to other webworker scripts.



