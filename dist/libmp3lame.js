// libmp3lame.js - port of libmp3lame to JavaScript using emscripten
// by Andreas Krennmair <ak@synflood.at>

var Lame = (function() {

// Note: For maximum-speed code, see "Optimizing Code" on the Emscripten wiki, https://github.com/kripken/emscripten/wiki/Optimizing-Code
// Note: Some Emscripten settings may limit the speed of the generated code.
// The Module object: Our interface to the outside world. We import
// and export values on it, and do the work to get that through
// closure compiler if necessary. There are various ways Module can be used:
// 1. Not defined. We create it here
// 2. A function parameter, function(Module) { ..generated code.. }
// 3. pre-run appended it, var Module = {}; ..generated code..
// 4. External script tag defines var Module.
// We need to do an eval in order to handle the closure compiler
// case, where this code here is minified but Module was defined
// elsewhere (e.g. case 4 above). We also need to check if Module
// already exists (e.g. case 3 above).
// Note that if you want to run closure, and also to use Module
// after the generated code, you will need to define   var Module = {};
// before the code. Then that object will be used in the code, and you
// can continue to use Module afterwards as well.
var Module;
if (!Module) Module = eval('(function() { try { return Module || {} } catch(e) { return {} } })()');

// Sometimes an existing Module object exists with properties
// meant to overwrite the default module functionality. Here
// we collect those properties and reapply _after_ we configure
// the current environment's defaults to avoid having to be so
// defensive during initialization.
var moduleOverrides = {};
for (var key in Module) {
  if (Module.hasOwnProperty(key)) {
    moduleOverrides[key] = Module[key];
  }
}

// The environment setup code below is customized to use Module.
// *** Environment setup code ***
var ENVIRONMENT_IS_NODE = typeof process === 'object' && typeof require === 'function';
var ENVIRONMENT_IS_WEB = typeof window === 'object';
var ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
var ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;

if (ENVIRONMENT_IS_NODE) {
  // Expose functionality in the same simple way that the shells work
  // Note that we pollute the global namespace here, otherwise we break in node
  if (!Module['print']) Module['print'] = function print(x) {
    process['stdout'].write(x + '\n');
  };
  if (!Module['printErr']) Module['printErr'] = function printErr(x) {
    process['stderr'].write(x + '\n');
  };

  var nodeFS = require('fs');
  var nodePath = require('path');

  Module['read'] = function read(filename, binary) {
    filename = nodePath['normalize'](filename);
    var ret = nodeFS['readFileSync'](filename);
    // The path is absolute if the normalized version is the same as the resolved.
    if (!ret && filename != nodePath['resolve'](filename)) {
      filename = path.join(__dirname, '..', 'src', filename);
      ret = nodeFS['readFileSync'](filename);
    }
    if (ret && !binary) ret = ret.toString();
    return ret;
  };

  Module['readBinary'] = function readBinary(filename) { return Module['read'](filename, true) };

  Module['load'] = function load(f) {
    globalEval(read(f));
  };

  Module['arguments'] = process['argv'].slice(2);

  module['exports'] = Module;
}
else if (ENVIRONMENT_IS_SHELL) {
  if (!Module['print']) Module['print'] = print;
  if (typeof printErr != 'undefined') Module['printErr'] = printErr; // not present in v8 or older sm

  if (typeof read != 'undefined') {
    Module['read'] = read;
  } else {
    Module['read'] = function read() { throw 'no read() available (jsc?)' };
  }

  Module['readBinary'] = function readBinary(f) {
    return read(f, 'binary');
  };

  if (typeof scriptArgs != 'undefined') {
    Module['arguments'] = scriptArgs;
  } else if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  this['Module'] = Module;

  eval("if (typeof gc === 'function' && gc.toString().indexOf('[native code]') > 0) var gc = undefined"); // wipe out the SpiderMonkey shell 'gc' function, which can confuse closure (uses it as a minified name, and it is then initted to a non-falsey value unexpectedly)
}
else if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  Module['read'] = function read(url) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, false);
    xhr.send(null);
    return xhr.responseText;
  };

  if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  if (typeof console !== 'undefined') {
    if (!Module['print']) Module['print'] = function print(x) {
      console.log(x);
    };
    if (!Module['printErr']) Module['printErr'] = function printErr(x) {
      console.log(x);
    };
  } else {
    // Probably a worker, and without console.log. We can do very little here...
    var TRY_USE_DUMP = false;
    if (!Module['print']) Module['print'] = (TRY_USE_DUMP && (typeof(dump) !== "undefined") ? (function(x) {
      dump(x);
    }) : (function(x) {
      // self.postMessage(x); // enable this if you want stdout to be sent as messages
    }));
  }

  if (ENVIRONMENT_IS_WEB) {
    this['Module'] = Module;
  } else {
    Module['load'] = importScripts;
  }
}
else {
  // Unreachable because SHELL is dependant on the others
  throw 'Unknown runtime environment. Where are we?';
}

function globalEval(x) {
  eval.call(null, x);
}
if (!Module['load'] == 'undefined' && Module['read']) {
  Module['load'] = function load(f) {
    globalEval(Module['read'](f));
  };
}
if (!Module['print']) {
  Module['print'] = function(){};
}
if (!Module['printErr']) {
  Module['printErr'] = Module['print'];
}
if (!Module['arguments']) {
  Module['arguments'] = [];
}
// *** Environment setup code ***

// Closure helpers
Module.print = Module['print'];
Module.printErr = Module['printErr'];

// Callbacks
Module['preRun'] = [];
Module['postRun'] = [];

// Merge back in the overrides
for (var key in moduleOverrides) {
  if (moduleOverrides.hasOwnProperty(key)) {
    Module[key] = moduleOverrides[key];
  }
}



// === Auto-generated preamble library stuff ===

//========================================
// Runtime code shared with compiler
//========================================

var Runtime = {
  stackSave: function () {
    return STACKTOP;
  },
  stackRestore: function (stackTop) {
    STACKTOP = stackTop;
  },
  forceAlign: function (target, quantum) {
    quantum = quantum || 4;
    if (quantum == 1) return target;
    if (isNumber(target) && isNumber(quantum)) {
      return Math.ceil(target/quantum)*quantum;
    } else if (isNumber(quantum) && isPowerOfTwo(quantum)) {
      return '(((' +target + ')+' + (quantum-1) + ')&' + -quantum + ')';
    }
    return 'Math.ceil((' + target + ')/' + quantum + ')*' + quantum;
  },
  isNumberType: function (type) {
    return type in Runtime.INT_TYPES || type in Runtime.FLOAT_TYPES;
  },
  isPointerType: function isPointerType(type) {
  return type[type.length-1] == '*';
},
  isStructType: function isStructType(type) {
  if (isPointerType(type)) return false;
  if (isArrayType(type)) return true;
  if (/<?{ ?[^}]* ?}>?/.test(type)) return true; // { i32, i8 } etc. - anonymous struct types
  // See comment in isStructPointerType()
  return type[0] == '%';
},
  INT_TYPES: {"i1":0,"i8":0,"i16":0,"i32":0,"i64":0},
  FLOAT_TYPES: {"float":0,"double":0},
  or64: function (x, y) {
    var l = (x | 0) | (y | 0);
    var h = (Math.round(x / 4294967296) | Math.round(y / 4294967296)) * 4294967296;
    return l + h;
  },
  and64: function (x, y) {
    var l = (x | 0) & (y | 0);
    var h = (Math.round(x / 4294967296) & Math.round(y / 4294967296)) * 4294967296;
    return l + h;
  },
  xor64: function (x, y) {
    var l = (x | 0) ^ (y | 0);
    var h = (Math.round(x / 4294967296) ^ Math.round(y / 4294967296)) * 4294967296;
    return l + h;
  },
  getNativeTypeSize: function (type) {
    switch (type) {
      case 'i1': case 'i8': return 1;
      case 'i16': return 2;
      case 'i32': return 4;
      case 'i64': return 8;
      case 'float': return 4;
      case 'double': return 8;
      default: {
        if (type[type.length-1] === '*') {
          return Runtime.QUANTUM_SIZE; // A pointer
        } else if (type[0] === 'i') {
          var bits = parseInt(type.substr(1));
          assert(bits % 8 === 0);
          return bits/8;
        } else {
          return 0;
        }
      }
    }
  },
  getNativeFieldSize: function (type) {
    return Math.max(Runtime.getNativeTypeSize(type), Runtime.QUANTUM_SIZE);
  },
  dedup: function dedup(items, ident) {
  var seen = {};
  if (ident) {
    return items.filter(function(item) {
      if (seen[item[ident]]) return false;
      seen[item[ident]] = true;
      return true;
    });
  } else {
    return items.filter(function(item) {
      if (seen[item]) return false;
      seen[item] = true;
      return true;
    });
  }
},
  set: function set() {
  var args = typeof arguments[0] === 'object' ? arguments[0] : arguments;
  var ret = {};
  for (var i = 0; i < args.length; i++) {
    ret[args[i]] = 0;
  }
  return ret;
},
  STACK_ALIGN: 8,
  getAlignSize: function (type, size, vararg) {
    // we align i64s and doubles on 64-bit boundaries, unlike x86
    if (vararg) return 8;
    if (!vararg && (type == 'i64' || type == 'double')) return 8;
    if (!type) return Math.min(size, 8); // align structures internally to 64 bits
    return Math.min(size || (type ? Runtime.getNativeFieldSize(type) : 0), Runtime.QUANTUM_SIZE);
  },
  calculateStructAlignment: function calculateStructAlignment(type) {
    type.flatSize = 0;
    type.alignSize = 0;
    var diffs = [];
    var prev = -1;
    var index = 0;
    type.flatIndexes = type.fields.map(function(field) {
      index++;
      var size, alignSize;
      if (Runtime.isNumberType(field) || Runtime.isPointerType(field)) {
        size = Runtime.getNativeTypeSize(field); // pack char; char; in structs, also char[X]s.
        alignSize = Runtime.getAlignSize(field, size);
      } else if (Runtime.isStructType(field)) {
        if (field[1] === '0') {
          // this is [0 x something]. When inside another structure like here, it must be at the end,
          // and it adds no size
          // XXX this happens in java-nbody for example... assert(index === type.fields.length, 'zero-length in the middle!');
          size = 0;
          if (Types.types[field]) {
            alignSize = Runtime.getAlignSize(null, Types.types[field].alignSize);
          } else {
            alignSize = type.alignSize || QUANTUM_SIZE;
          }
        } else {
          size = Types.types[field].flatSize;
          alignSize = Runtime.getAlignSize(null, Types.types[field].alignSize);
        }
      } else if (field[0] == 'b') {
        // bN, large number field, like a [N x i8]
        size = field.substr(1)|0;
        alignSize = 1;
      } else if (field[0] === '<') {
        // vector type
        size = alignSize = Types.types[field].flatSize; // fully aligned
      } else if (field[0] === 'i') {
        // illegal integer field, that could not be legalized because it is an internal structure field
        // it is ok to have such fields, if we just use them as markers of field size and nothing more complex
        size = alignSize = parseInt(field.substr(1))/8;
        assert(size % 1 === 0, 'cannot handle non-byte-size field ' + field);
      } else {
        assert(false, 'invalid type for calculateStructAlignment');
      }
      if (type.packed) alignSize = 1;
      type.alignSize = Math.max(type.alignSize, alignSize);
      var curr = Runtime.alignMemory(type.flatSize, alignSize); // if necessary, place this on aligned memory
      type.flatSize = curr + size;
      if (prev >= 0) {
        diffs.push(curr-prev);
      }
      prev = curr;
      return curr;
    });
    if (type.name_ && type.name_[0] === '[') {
      // arrays have 2 elements, so we get the proper difference. then we scale here. that way we avoid
      // allocating a potentially huge array for [999999 x i8] etc.
      type.flatSize = parseInt(type.name_.substr(1))*type.flatSize/2;
    }
    type.flatSize = Runtime.alignMemory(type.flatSize, type.alignSize);
    if (diffs.length == 0) {
      type.flatFactor = type.flatSize;
    } else if (Runtime.dedup(diffs).length == 1) {
      type.flatFactor = diffs[0];
    }
    type.needsFlattening = (type.flatFactor != 1);
    return type.flatIndexes;
  },
  generateStructInfo: function (struct, typeName, offset) {
    var type, alignment;
    if (typeName) {
      offset = offset || 0;
      type = (typeof Types === 'undefined' ? Runtime.typeInfo : Types.types)[typeName];
      if (!type) return null;
      if (type.fields.length != struct.length) {
        printErr('Number of named fields must match the type for ' + typeName + ': possibly duplicate struct names. Cannot return structInfo');
        return null;
      }
      alignment = type.flatIndexes;
    } else {
      var type = { fields: struct.map(function(item) { return item[0] }) };
      alignment = Runtime.calculateStructAlignment(type);
    }
    var ret = {
      __size__: type.flatSize
    };
    if (typeName) {
      struct.forEach(function(item, i) {
        if (typeof item === 'string') {
          ret[item] = alignment[i] + offset;
        } else {
          // embedded struct
          var key;
          for (var k in item) key = k;
          ret[key] = Runtime.generateStructInfo(item[key], type.fields[i], alignment[i]);
        }
      });
    } else {
      struct.forEach(function(item, i) {
        ret[item[1]] = alignment[i];
      });
    }
    return ret;
  },
  dynCall: function (sig, ptr, args) {
    if (args && args.length) {
      if (!args.splice) args = Array.prototype.slice.call(args);
      args.splice(0, 0, ptr);
      return Module['dynCall_' + sig].apply(null, args);
    } else {
      return Module['dynCall_' + sig].call(null, ptr);
    }
  },
  functionPointers: [],
  addFunction: function (func) {
    for (var i = 0; i < Runtime.functionPointers.length; i++) {
      if (!Runtime.functionPointers[i]) {
        Runtime.functionPointers[i] = func;
        return 2*(1 + i);
      }
    }
    throw 'Finished up all reserved function pointers. Use a higher value for RESERVED_FUNCTION_POINTERS.';
  },
  removeFunction: function (index) {
    Runtime.functionPointers[(index-2)/2] = null;
  },
  getAsmConst: function (code, numArgs) {
    // code is a constant string on the heap, so we can cache these
    if (!Runtime.asmConstCache) Runtime.asmConstCache = {};
    var func = Runtime.asmConstCache[code];
    if (func) return func;
    var args = [];
    for (var i = 0; i < numArgs; i++) {
      args.push(String.fromCharCode(36) + i); // $0, $1 etc
    }
    code = Pointer_stringify(code);
    if (code[0] === '"') {
      // tolerate EM_ASM("..code..") even though EM_ASM(..code..) is correct
      if (code.indexOf('"', 1) === code.length-1) {
        code = code.substr(1, code.length-2);
      } else {
        // something invalid happened, e.g. EM_ASM("..code($0)..", input)
        abort('invalid EM_ASM input |' + code + '|. Please use EM_ASM(..code..) (no quotes) or EM_ASM({ ..code($0).. }, input) (to input values)');
      }
    }
    return Runtime.asmConstCache[code] = eval('(function(' + args.join(',') + '){ ' + code + ' })'); // new Function does not allow upvars in node
  },
  warnOnce: function (text) {
    if (!Runtime.warnOnce.shown) Runtime.warnOnce.shown = {};
    if (!Runtime.warnOnce.shown[text]) {
      Runtime.warnOnce.shown[text] = 1;
      Module.printErr(text);
    }
  },
  funcWrappers: {},
  getFuncWrapper: function (func, sig) {
    assert(sig);
    if (!Runtime.funcWrappers[func]) {
      Runtime.funcWrappers[func] = function dynCall_wrapper() {
        return Runtime.dynCall(sig, func, arguments);
      };
    }
    return Runtime.funcWrappers[func];
  },
  UTF8Processor: function () {
    var buffer = [];
    var needed = 0;
    this.processCChar = function (code) {
      code = code & 0xFF;

      if (buffer.length == 0) {
        if ((code & 0x80) == 0x00) {        // 0xxxxxxx
          return String.fromCharCode(code);
        }
        buffer.push(code);
        if ((code & 0xE0) == 0xC0) {        // 110xxxxx
          needed = 1;
        } else if ((code & 0xF0) == 0xE0) { // 1110xxxx
          needed = 2;
        } else {                            // 11110xxx
          needed = 3;
        }
        return '';
      }

      if (needed) {
        buffer.push(code);
        needed--;
        if (needed > 0) return '';
      }

      var c1 = buffer[0];
      var c2 = buffer[1];
      var c3 = buffer[2];
      var c4 = buffer[3];
      var ret;
      if (buffer.length == 2) {
        ret = String.fromCharCode(((c1 & 0x1F) << 6)  | (c2 & 0x3F));
      } else if (buffer.length == 3) {
        ret = String.fromCharCode(((c1 & 0x0F) << 12) | ((c2 & 0x3F) << 6)  | (c3 & 0x3F));
      } else {
        // http://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae
        var codePoint = ((c1 & 0x07) << 18) | ((c2 & 0x3F) << 12) |
                        ((c3 & 0x3F) << 6)  | (c4 & 0x3F);
        ret = String.fromCharCode(
          Math.floor((codePoint - 0x10000) / 0x400) + 0xD800,
          (codePoint - 0x10000) % 0x400 + 0xDC00);
      }
      buffer.length = 0;
      return ret;
    }
    this.processJSString = function processJSString(string) {
      string = unescape(encodeURIComponent(string));
      var ret = [];
      for (var i = 0; i < string.length; i++) {
        ret.push(string.charCodeAt(i));
      }
      return ret;
    }
  },
  stackAlloc: function (size) { var ret = STACKTOP;STACKTOP = (STACKTOP + size)|0;STACKTOP = (((STACKTOP)+7)&-8); return ret; },
  staticAlloc: function (size) { var ret = STATICTOP;STATICTOP = (STATICTOP + size)|0;STATICTOP = (((STATICTOP)+7)&-8); return ret; },
  dynamicAlloc: function (size) { var ret = DYNAMICTOP;DYNAMICTOP = (DYNAMICTOP + size)|0;DYNAMICTOP = (((DYNAMICTOP)+7)&-8); if (DYNAMICTOP >= TOTAL_MEMORY) enlargeMemory();; return ret; },
  alignMemory: function (size,quantum) { var ret = size = Math.ceil((size)/(quantum ? quantum : 8))*(quantum ? quantum : 8); return ret; },
  makeBigInt: function (low,high,unsigned) { var ret = (unsigned ? ((+((low>>>0)))+((+((high>>>0)))*4294967296.0)) : ((+((low>>>0)))+((+((high|0)))*4294967296.0))); return ret; },
  GLOBAL_BASE: 8,
  QUANTUM_SIZE: 4,
  __dummy__: 0
}


Module['Runtime'] = Runtime;









//========================================
// Runtime essentials
//========================================

var __THREW__ = 0; // Used in checking for thrown exceptions.

var ABORT = false; // whether we are quitting the application. no code should run after this. set in exit() and abort()
var EXITSTATUS = 0;

var undef = 0;
// tempInt is used for 32-bit signed values or smaller. tempBigInt is used
// for 32-bit unsigned values or more than 32 bits. TODO: audit all uses of tempInt
var tempValue, tempInt, tempBigInt, tempInt2, tempBigInt2, tempPair, tempBigIntI, tempBigIntR, tempBigIntS, tempBigIntP, tempBigIntD, tempDouble, tempFloat;
var tempI64, tempI64b;
var tempRet0, tempRet1, tempRet2, tempRet3, tempRet4, tempRet5, tempRet6, tempRet7, tempRet8, tempRet9;

function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text);
  }
}

var globalScope = this;

// C calling interface. A convenient way to call C functions (in C files, or
// defined with extern "C").
//
// Note: LLVM optimizations can inline and remove functions, after which you will not be
//       able to call them. Closure can also do so. To avoid that, add your function to
//       the exports using something like
//
//         -s EXPORTED_FUNCTIONS='["_main", "_myfunc"]'
//
// @param ident      The name of the C function (note that C++ functions will be name-mangled - use extern "C")
// @param returnType The return type of the function, one of the JS types 'number', 'string' or 'array' (use 'number' for any C pointer, and
//                   'array' for JavaScript arrays and typed arrays; note that arrays are 8-bit).
// @param argTypes   An array of the types of arguments for the function (if there are no arguments, this can be ommitted). Types are as in returnType,
//                   except that 'array' is not possible (there is no way for us to know the length of the array)
// @param args       An array of the arguments to the function, as native JS values (as in returnType)
//                   Note that string arguments will be stored on the stack (the JS string will become a C string on the stack).
// @return           The return value, as a native JS value (as in returnType)
function ccall(ident, returnType, argTypes, args) {
  return ccallFunc(getCFunc(ident), returnType, argTypes, args);
}
Module["ccall"] = ccall;

// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
function getCFunc(ident) {
  try {
    var func = Module['_' + ident]; // closure exported function
    if (!func) func = eval('_' + ident); // explicit lookup
  } catch(e) {
  }
  assert(func, 'Cannot call unknown function ' + ident + ' (perhaps LLVM optimizations or closure removed it?)');
  return func;
}

// Internal function that does a C call using a function, not an identifier
function ccallFunc(func, returnType, argTypes, args) {
  var stack = 0;
  function toC(value, type) {
    if (type == 'string') {
      if (value === null || value === undefined || value === 0) return 0; // null string
      value = intArrayFromString(value);
      type = 'array';
    }
    if (type == 'array') {
      if (!stack) stack = Runtime.stackSave();
      var ret = Runtime.stackAlloc(value.length);
      writeArrayToMemory(value, ret);
      return ret;
    }
    return value;
  }
  function fromC(value, type) {
    if (type == 'string') {
      return Pointer_stringify(value);
    }
    assert(type != 'array');
    return value;
  }
  var i = 0;
  var cArgs = args ? args.map(function(arg) {
    return toC(arg, argTypes[i++]);
  }) : [];
  var ret = fromC(func.apply(null, cArgs), returnType);
  if (stack) Runtime.stackRestore(stack);
  return ret;
}

// Returns a native JS wrapper for a C function. This is similar to ccall, but
// returns a function you can call repeatedly in a normal way. For example:
//
//   var my_function = cwrap('my_c_function', 'number', ['number', 'number']);
//   alert(my_function(5, 22));
//   alert(my_function(99, 12));
//
function cwrap(ident, returnType, argTypes) {
  var func = getCFunc(ident);
  return function() {
    return ccallFunc(func, returnType, argTypes, Array.prototype.slice.call(arguments));
  }
}
Module["cwrap"] = cwrap;

// Sets a value in memory in a dynamic way at run-time. Uses the
// type data. This is the same as makeSetValue, except that
// makeSetValue is done at compile-time and generates the needed
// code then, whereas this function picks the right code at
// run-time.
// Note that setValue and getValue only do *aligned* writes and reads!
// Note that ccall uses JS types as for defining types, while setValue and
// getValue need LLVM types ('i8', 'i32') - this is a lower-level operation
function setValue(ptr, value, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': HEAP8[(ptr)]=value; break;
      case 'i8': HEAP8[(ptr)]=value; break;
      case 'i16': HEAP16[((ptr)>>1)]=value; break;
      case 'i32': HEAP32[((ptr)>>2)]=value; break;
      case 'i64': (tempI64 = [value>>>0,(tempDouble=value,(+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[((ptr)>>2)]=tempI64[0],HEAP32[(((ptr)+(4))>>2)]=tempI64[1]); break;
      case 'float': HEAPF32[((ptr)>>2)]=value; break;
      case 'double': HEAPF64[((ptr)>>3)]=value; break;
      default: abort('invalid type for setValue: ' + type);
    }
}
Module['setValue'] = setValue;

// Parallel to setValue.
function getValue(ptr, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': return HEAP8[(ptr)];
      case 'i8': return HEAP8[(ptr)];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': return HEAP32[((ptr)>>2)];
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return HEAPF64[((ptr)>>3)];
      default: abort('invalid type for setValue: ' + type);
    }
  return null;
}
Module['getValue'] = getValue;

var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call
var ALLOC_STATIC = 2; // Cannot be freed
var ALLOC_DYNAMIC = 3; // Cannot be freed except through sbrk
var ALLOC_NONE = 4; // Do not allocate
Module['ALLOC_NORMAL'] = ALLOC_NORMAL;
Module['ALLOC_STACK'] = ALLOC_STACK;
Module['ALLOC_STATIC'] = ALLOC_STATIC;
Module['ALLOC_DYNAMIC'] = ALLOC_DYNAMIC;
Module['ALLOC_NONE'] = ALLOC_NONE;

// allocate(): This is for internal use. You can use it yourself as well, but the interface
//             is a little tricky (see docs right below). The reason is that it is optimized
//             for multiple syntaxes to save space in generated code. So you should
//             normally not use allocate(), and instead allocate memory using _malloc(),
//             initialize it with setValue(), and so forth.
// @slab: An array of data, or a number. If a number, then the size of the block to allocate,
//        in *bytes* (note that this is sometimes confusing: the next parameter does not
//        affect this!)
// @types: Either an array of types, one for each byte (or 0 if no type at that position),
//         or a single type which is used for the entire block. This only matters if there
//         is initial data - if @slab is a number, then this does not matter at all and is
//         ignored.
// @allocator: How to allocate memory, see ALLOC_*
function allocate(slab, types, allocator, ptr) {
  var zeroinit, size;
  if (typeof slab === 'number') {
    zeroinit = true;
    size = slab;
  } else {
    zeroinit = false;
    size = slab.length;
  }

  var singleType = typeof types === 'string' ? types : null;

  var ret;
  if (allocator == ALLOC_NONE) {
    ret = ptr;
  } else {
    ret = [_malloc, Runtime.stackAlloc, Runtime.staticAlloc, Runtime.dynamicAlloc][allocator === undefined ? ALLOC_STATIC : allocator](Math.max(size, singleType ? 1 : types.length));
  }

  if (zeroinit) {
    var ptr = ret, stop;
    assert((ret & 3) == 0);
    stop = ret + (size & ~3);
    for (; ptr < stop; ptr += 4) {
      HEAP32[((ptr)>>2)]=0;
    }
    stop = ret + size;
    while (ptr < stop) {
      HEAP8[((ptr++)|0)]=0;
    }
    return ret;
  }

  if (singleType === 'i8') {
    if (slab.subarray || slab.slice) {
      HEAPU8.set(slab, ret);
    } else {
      HEAPU8.set(new Uint8Array(slab), ret);
    }
    return ret;
  }

  var i = 0, type, typeSize, previousType;
  while (i < size) {
    var curr = slab[i];

    if (typeof curr === 'function') {
      curr = Runtime.getFunctionIndex(curr);
    }

    type = singleType || types[i];
    if (type === 0) {
      i++;
      continue;
    }

    if (type == 'i64') type = 'i32'; // special case: we have one i32 here, and one i32 later

    setValue(ret+i, curr, type);

    // no need to look up size unless type changes, so cache it
    if (previousType !== type) {
      typeSize = Runtime.getNativeTypeSize(type);
      previousType = type;
    }
    i += typeSize;
  }

  return ret;
}
Module['allocate'] = allocate;

function Pointer_stringify(ptr, /* optional */ length) {
  // TODO: use TextDecoder
  // Find the length, and check for UTF while doing so
  var hasUtf = false;
  var t;
  var i = 0;
  while (1) {
    t = HEAPU8[(((ptr)+(i))|0)];
    if (t >= 128) hasUtf = true;
    else if (t == 0 && !length) break;
    i++;
    if (length && i == length) break;
  }
  if (!length) length = i;

  var ret = '';

  if (!hasUtf) {
    var MAX_CHUNK = 1024; // split up into chunks, because .apply on a huge string can overflow the stack
    var curr;
    while (length > 0) {
      curr = String.fromCharCode.apply(String, HEAPU8.subarray(ptr, ptr + Math.min(length, MAX_CHUNK)));
      ret = ret ? ret + curr : curr;
      ptr += MAX_CHUNK;
      length -= MAX_CHUNK;
    }
    return ret;
  }

  var utf8 = new Runtime.UTF8Processor();
  for (i = 0; i < length; i++) {
    t = HEAPU8[(((ptr)+(i))|0)];
    ret += utf8.processCChar(t);
  }
  return ret;
}
Module['Pointer_stringify'] = Pointer_stringify;

// Given a pointer 'ptr' to a null-terminated UTF16LE-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.
function UTF16ToString(ptr) {
  var i = 0;

  var str = '';
  while (1) {
    var codeUnit = HEAP16[(((ptr)+(i*2))>>1)];
    if (codeUnit == 0)
      return str;
    ++i;
    // fromCharCode constructs a character from a UTF-16 code unit, so we can pass the UTF16 string right through.
    str += String.fromCharCode(codeUnit);
  }
}
Module['UTF16ToString'] = UTF16ToString;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF16LE form. The copy will require at most (str.length*2+1)*2 bytes of space in the HEAP.
function stringToUTF16(str, outPtr) {
  for(var i = 0; i < str.length; ++i) {
    // charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    HEAP16[(((outPtr)+(i*2))>>1)]=codeUnit;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP16[(((outPtr)+(str.length*2))>>1)]=0;
}
Module['stringToUTF16'] = stringToUTF16;

// Given a pointer 'ptr' to a null-terminated UTF32LE-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.
function UTF32ToString(ptr) {
  var i = 0;

  var str = '';
  while (1) {
    var utf32 = HEAP32[(((ptr)+(i*4))>>2)];
    if (utf32 == 0)
      return str;
    ++i;
    // Gotcha: fromCharCode constructs a character from a UTF-16 encoded code (pair), not from a Unicode code point! So encode the code point to UTF-16 for constructing.
    if (utf32 >= 0x10000) {
      var ch = utf32 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    } else {
      str += String.fromCharCode(utf32);
    }
  }
}
Module['UTF32ToString'] = UTF32ToString;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF32LE form. The copy will require at most (str.length+1)*4 bytes of space in the HEAP,
// but can use less, since str.length does not return the number of characters in the string, but the number of UTF-16 code units in the string.
function stringToUTF32(str, outPtr) {
  var iChar = 0;
  for(var iCodeUnit = 0; iCodeUnit < str.length; ++iCodeUnit) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    var codeUnit = str.charCodeAt(iCodeUnit); // possibly a lead surrogate
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) {
      var trailSurrogate = str.charCodeAt(++iCodeUnit);
      codeUnit = 0x10000 + ((codeUnit & 0x3FF) << 10) | (trailSurrogate & 0x3FF);
    }
    HEAP32[(((outPtr)+(iChar*4))>>2)]=codeUnit;
    ++iChar;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP32[(((outPtr)+(iChar*4))>>2)]=0;
}
Module['stringToUTF32'] = stringToUTF32;

function demangle(func) {
  try {
    // Special-case the entry point, since its name differs from other name mangling.
    if (func == 'Object._main' || func == '_main') {
      return 'main()';
    }
    if (typeof func === 'number') func = Pointer_stringify(func);
    if (func[0] !== '_') return func;
    if (func[1] !== '_') return func; // C function
    if (func[2] !== 'Z') return func;
    switch (func[3]) {
      case 'n': return 'operator new()';
      case 'd': return 'operator delete()';
    }
    var i = 3;
    // params, etc.
    var basicTypes = {
      'v': 'void',
      'b': 'bool',
      'c': 'char',
      's': 'short',
      'i': 'int',
      'l': 'long',
      'f': 'float',
      'd': 'double',
      'w': 'wchar_t',
      'a': 'signed char',
      'h': 'unsigned char',
      't': 'unsigned short',
      'j': 'unsigned int',
      'm': 'unsigned long',
      'x': 'long long',
      'y': 'unsigned long long',
      'z': '...'
    };
    function dump(x) {
      //return;
      if (x) Module.print(x);
      Module.print(func);
      var pre = '';
      for (var a = 0; a < i; a++) pre += ' ';
      Module.print (pre + '^');
    }
    var subs = [];
    function parseNested() {
      i++;
      if (func[i] === 'K') i++; // ignore const
      var parts = [];
      while (func[i] !== 'E') {
        if (func[i] === 'S') { // substitution
          i++;
          var next = func.indexOf('_', i);
          var num = func.substring(i, next) || 0;
          parts.push(subs[num] || '?');
          i = next+1;
          continue;
        }
        if (func[i] === 'C') { // constructor
          parts.push(parts[parts.length-1]);
          i += 2;
          continue;
        }
        var size = parseInt(func.substr(i));
        var pre = size.toString().length;
        if (!size || !pre) { i--; break; } // counter i++ below us
        var curr = func.substr(i + pre, size);
        parts.push(curr);
        subs.push(curr);
        i += pre + size;
      }
      i++; // skip E
      return parts;
    }
    var first = true;
    function parse(rawList, limit, allowVoid) { // main parser
      limit = limit || Infinity;
      var ret = '', list = [];
      function flushList() {
        return '(' + list.join(', ') + ')';
      }
      var name;
      if (func[i] === 'N') {
        // namespaced N-E
        name = parseNested().join('::');
        limit--;
        if (limit === 0) return rawList ? [name] : name;
      } else {
        // not namespaced
        if (func[i] === 'K' || (first && func[i] === 'L')) i++; // ignore const and first 'L'
        var size = parseInt(func.substr(i));
        if (size) {
          var pre = size.toString().length;
          name = func.substr(i + pre, size);
          i += pre + size;
        }
      }
      first = false;
      if (func[i] === 'I') {
        i++;
        var iList = parse(true);
        var iRet = parse(true, 1, true);
        ret += iRet[0] + ' ' + name + '<' + iList.join(', ') + '>';
      } else {
        ret = name;
      }
      paramLoop: while (i < func.length && limit-- > 0) {
        //dump('paramLoop');
        var c = func[i++];
        if (c in basicTypes) {
          list.push(basicTypes[c]);
        } else {
          switch (c) {
            case 'P': list.push(parse(true, 1, true)[0] + '*'); break; // pointer
            case 'R': list.push(parse(true, 1, true)[0] + '&'); break; // reference
            case 'L': { // literal
              i++; // skip basic type
              var end = func.indexOf('E', i);
              var size = end - i;
              list.push(func.substr(i, size));
              i += size + 2; // size + 'EE'
              break;
            }
            case 'A': { // array
              var size = parseInt(func.substr(i));
              i += size.toString().length;
              if (func[i] !== '_') throw '?';
              i++; // skip _
              list.push(parse(true, 1, true)[0] + ' [' + size + ']');
              break;
            }
            case 'E': break paramLoop;
            default: ret += '?' + c; break paramLoop;
          }
        }
      }
      if (!allowVoid && list.length === 1 && list[0] === 'void') list = []; // avoid (void)
      return rawList ? list : ret + flushList();
    }
    return parse();
  } catch(e) {
    return func;
  }
}

function demangleAll(text) {
  return text.replace(/__Z[\w\d_]+/g, function(x) { var y = demangle(x); return x === y ? x : (x + ' [' + y + ']') });
}

function stackTrace() {
  var stack = new Error().stack;
  return stack ? demangleAll(stack) : '(no stack trace available)'; // Stack trace is not available at least on IE10 and Safari 6.
}

// Memory management

var PAGE_SIZE = 4096;
function alignMemoryPage(x) {
  return (x+4095)&-4096;
}

var HEAP;
var HEAP8, HEAPU8, HEAP16, HEAPU16, HEAP32, HEAPU32, HEAPF32, HEAPF64;

var STATIC_BASE = 0, STATICTOP = 0, staticSealed = false; // static area
var STACK_BASE = 0, STACKTOP = 0, STACK_MAX = 0; // stack area
var DYNAMIC_BASE = 0, DYNAMICTOP = 0; // dynamic area handled by sbrk

function enlargeMemory() {
  abort('Cannot enlarge memory arrays in asm.js. Either (1) compile with -s TOTAL_MEMORY=X with X higher than the current value ' + TOTAL_MEMORY + ', or (2) set Module.TOTAL_MEMORY before the program runs.');
}

var TOTAL_STACK = Module['TOTAL_STACK'] || 5242880;
var TOTAL_MEMORY = Module['TOTAL_MEMORY'] || 16777216;
var FAST_MEMORY = Module['FAST_MEMORY'] || 2097152;

var totalMemory = 4096;
while (totalMemory < TOTAL_MEMORY || totalMemory < 2*TOTAL_STACK) {
  if (totalMemory < 16*1024*1024) {
    totalMemory *= 2;
  } else {
    totalMemory += 16*1024*1024
  }
}
if (totalMemory !== TOTAL_MEMORY) {
  Module.printErr('increasing TOTAL_MEMORY to ' + totalMemory + ' to be more reasonable');
  TOTAL_MEMORY = totalMemory;
}

// Initialize the runtime's memory
// check for full engine support (use string 'subarray' to avoid closure compiler confusion)
assert(typeof Int32Array !== 'undefined' && typeof Float64Array !== 'undefined' && !!(new Int32Array(1)['subarray']) && !!(new Int32Array(1)['set']),
       'Cannot fallback to non-typed array case: Code is too specialized');

var buffer = new ArrayBuffer(TOTAL_MEMORY);
HEAP8 = new Int8Array(buffer);
HEAP16 = new Int16Array(buffer);
HEAP32 = new Int32Array(buffer);
HEAPU8 = new Uint8Array(buffer);
HEAPU16 = new Uint16Array(buffer);
HEAPU32 = new Uint32Array(buffer);
HEAPF32 = new Float32Array(buffer);
HEAPF64 = new Float64Array(buffer);

// Endianness check (note: assumes compiler arch was little-endian)
HEAP32[0] = 255;
assert(HEAPU8[0] === 255 && HEAPU8[3] === 0, 'Typed arrays 2 must be run on a little-endian system');

Module['HEAP'] = HEAP;
Module['HEAP8'] = HEAP8;
Module['HEAP16'] = HEAP16;
Module['HEAP32'] = HEAP32;
Module['HEAPU8'] = HEAPU8;
Module['HEAPU16'] = HEAPU16;
Module['HEAPU32'] = HEAPU32;
Module['HEAPF32'] = HEAPF32;
Module['HEAPF64'] = HEAPF64;

function callRuntimeCallbacks(callbacks) {
  while(callbacks.length > 0) {
    var callback = callbacks.shift();
    if (typeof callback == 'function') {
      callback();
      continue;
    }
    var func = callback.func;
    if (typeof func === 'number') {
      if (callback.arg === undefined) {
        Runtime.dynCall('v', func);
      } else {
        Runtime.dynCall('vi', func, [callback.arg]);
      }
    } else {
      func(callback.arg === undefined ? null : callback.arg);
    }
  }
}

var __ATPRERUN__  = []; // functions called before the runtime is initialized
var __ATINIT__    = []; // functions called during startup
var __ATMAIN__    = []; // functions called when main() is to be run
var __ATEXIT__    = []; // functions called during shutdown
var __ATPOSTRUN__ = []; // functions called after the runtime has exited

var runtimeInitialized = false;

function preRun() {
  // compatibility - merge in anything from Module['preRun'] at this time
  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    while (Module['preRun'].length) {
      addOnPreRun(Module['preRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPRERUN__);
}

function ensureInitRuntime() {
  if (runtimeInitialized) return;
  runtimeInitialized = true;
  callRuntimeCallbacks(__ATINIT__);
}

function preMain() {
  callRuntimeCallbacks(__ATMAIN__);
}

function exitRuntime() {
  callRuntimeCallbacks(__ATEXIT__);
}

function postRun() {
  // compatibility - merge in anything from Module['postRun'] at this time
  if (Module['postRun']) {
    if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
    while (Module['postRun'].length) {
      addOnPostRun(Module['postRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPOSTRUN__);
}

function addOnPreRun(cb) {
  __ATPRERUN__.unshift(cb);
}
Module['addOnPreRun'] = Module.addOnPreRun = addOnPreRun;

function addOnInit(cb) {
  __ATINIT__.unshift(cb);
}
Module['addOnInit'] = Module.addOnInit = addOnInit;

function addOnPreMain(cb) {
  __ATMAIN__.unshift(cb);
}
Module['addOnPreMain'] = Module.addOnPreMain = addOnPreMain;

function addOnExit(cb) {
  __ATEXIT__.unshift(cb);
}
Module['addOnExit'] = Module.addOnExit = addOnExit;

function addOnPostRun(cb) {
  __ATPOSTRUN__.unshift(cb);
}
Module['addOnPostRun'] = Module.addOnPostRun = addOnPostRun;

// Tools

// This processes a JS string into a C-line array of numbers, 0-terminated.
// For LLVM-originating strings, see parser.js:parseLLVMString function
function intArrayFromString(stringy, dontAddNull, length /* optional */) {
  var ret = (new Runtime.UTF8Processor()).processJSString(stringy);
  if (length) {
    ret.length = length;
  }
  if (!dontAddNull) {
    ret.push(0);
  }
  return ret;
}
Module['intArrayFromString'] = intArrayFromString;

function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}
Module['intArrayToString'] = intArrayToString;

// Write a Javascript array to somewhere in the heap
function writeStringToMemory(string, buffer, dontAddNull) {
  var array = intArrayFromString(string, dontAddNull);
  var i = 0;
  while (i < array.length) {
    var chr = array[i];
    HEAP8[(((buffer)+(i))|0)]=chr;
    i = i + 1;
  }
}
Module['writeStringToMemory'] = writeStringToMemory;

function writeArrayToMemory(array, buffer) {
  for (var i = 0; i < array.length; i++) {
    HEAP8[(((buffer)+(i))|0)]=array[i];
  }
}
Module['writeArrayToMemory'] = writeArrayToMemory;

function writeAsciiToMemory(str, buffer, dontAddNull) {
  for (var i = 0; i < str.length; i++) {
    HEAP8[(((buffer)+(i))|0)]=str.charCodeAt(i);
  }
  if (!dontAddNull) HEAP8[(((buffer)+(str.length))|0)]=0;
}
Module['writeAsciiToMemory'] = writeAsciiToMemory;

function unSign(value, bits, ignore, sig) {
  if (value >= 0) {
    return value;
  }
  return bits <= 32 ? 2*Math.abs(1 << (bits-1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts
                    : Math.pow(2, bits)         + value;
}
function reSign(value, bits, ignore, sig) {
  if (value <= 0) {
    return value;
  }
  var half = bits <= 32 ? Math.abs(1 << (bits-1)) // abs is needed if bits == 32
                        : Math.pow(2, bits-1);
  if (value >= half && (bits <= 32 || value > half)) { // for huge values, we can hit the precision limit and always get true here. so don't do that
                                                       // but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors
                                                       // TODO: In i64 mode 1, resign the two parts separately and safely
    value = -2*half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts
  }
  return value;
}

// check for imul support, and also for correctness ( https://bugs.webkit.org/show_bug.cgi?id=126345 )
if (!Math['imul'] || Math['imul'](0xffffffff, 5) !== -5) Math['imul'] = function imul(a, b) {
  var ah  = a >>> 16;
  var al = a & 0xffff;
  var bh  = b >>> 16;
  var bl = b & 0xffff;
  return (al*bl + ((ah*bl + al*bh) << 16))|0;
};
Math.imul = Math['imul'];


var Math_abs = Math.abs;
var Math_cos = Math.cos;
var Math_sin = Math.sin;
var Math_tan = Math.tan;
var Math_acos = Math.acos;
var Math_asin = Math.asin;
var Math_atan = Math.atan;
var Math_atan2 = Math.atan2;
var Math_exp = Math.exp;
var Math_log = Math.log;
var Math_sqrt = Math.sqrt;
var Math_ceil = Math.ceil;
var Math_floor = Math.floor;
var Math_pow = Math.pow;
var Math_imul = Math.imul;
var Math_fround = Math.fround;
var Math_min = Math.min;

// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// PRE_RUN_ADDITIONS (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyWatcher = null;
var dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled

function addRunDependency(id) {
  runDependencies++;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
}
Module['addRunDependency'] = addRunDependency;
function removeRunDependency(id) {
  runDependencies--;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    }
    if (dependenciesFulfilled) {
      var callback = dependenciesFulfilled;
      dependenciesFulfilled = null;
      callback(); // can add another dependenciesFulfilled
    }
  }
}
Module['removeRunDependency'] = removeRunDependency;

Module["preloadedImages"] = {}; // maps url to image data
Module["preloadedAudios"] = {}; // maps url to audio data


var memoryInitializer = null;

// === Body ===



STATIC_BASE = 8;

STATICTOP = STATIC_BASE + 102912;


/* global initializers */ __ATINIT__.push({ func: function() { runPostSets() } });











var _tabsel_123;
















































































var _stderr;
var _stderr=_stderr=allocate([0,0,0,0,0,0,0,0], "i8", ALLOC_STATIC);;
























































































var _freqs;













































































/* memory initializer */ allocate([0,27,134,42,204,204,52,43,33,78,132,43,252,247,157,43,88,156,166,43,252,247,157,43,33,78,132,43,204,204,52,43,0,27,134,42,83,248,191,44,254,169,171,44,146,50,149,44,159,129,122,44,239,29,73,44,62,186,23,44,116,173,207,43,133,159,107,43,183,89,146,42,83,248,191,172,254,169,171,172,146,50,149,172,159,129,122,172,239,29,73,172,62,186,23,172,116,173,207,171,133,159,107,171,183,89,146,170,0,27,134,170,204,204,52,171,33,78,132,171,252,247,157,171,88,156,166,171,252,247,157,171,33,78,132,171,204,204,52,171,0,27,134,170,0,27,134,42,204,204,52,43,33,78,132,43,252,247,157,43,88,156,166,43,252,247,157,43,33,78,132,43,204,204,52,43,0,27,134,42,83,248,191,44,254,169,171,44,146,50,149,44,159,129,122,44,239,29,73,44,62,186,23,44,116,173,207,43,133,159,107,43,183,89,146,42,37,39,192,172,51,37,173,172,234,209,152,172,227,84,131,172,249,175,89,172,11,14,43,172,102,34,244,171,201,49,137,171,74,123,157,170,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,72,144,128,170,174,79,227,170,5,174,113,170,234,207,6,62,205,19,212,62,139,111,68,63,255,175,139,63,23,208,166,63,117,235,200,63,190,226,245,63,122,130,26,64,105,251,74,64,185,87,144,64,107,16,243,64,233,58,183,65,92,28,124,63,187,141,36,63,68,29,175,62,178,143,112,63,212,208,49,190,125,27,68,191,215,179,93,63,0,0,0,63,254,181,3,191,218,134,241,190,2,115,160,190,116,71,58,190,29,176,193,189,135,203,39,189,29,161,104,188,70,123,114,187,168,132,91,63,216,185,97,63,221,26,115,63,129,186,123,63,65,218,126,63,253,200,127,63,101,249,127,63,141,255,127,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,72,144,128,42,174,79,227,42,5,174,113,42,37,39,192,44,51,37,173,44,234,209,152,44,227,84,131,44,249,175,89,44,11,14,43,44,102,34,244,43,201,49,137,43,74,123,157,42,83,248,191,172,254,169,171,172,146,50,149,172,159,129,122,172,239,29,73,172,62,186,23,172,116,173,207,171,133,159,107,171,183,89,146,170,0,27,134,170,204,204,52,171,33,78,132,171,252,247,157,171,88,156,166,171,252,247,157,171,33,78,132,171,204,204,52,171,0,27,134,170,137,158,227,63,229,83,236,63,167,94,245,63,155,20,249,63,14,217,252,63,123,143,234,63,218,151,217,63,226,132,191,63,124,145,168,63,0,0,128,63,43,152,159,163,27,134,139,188,168,241,120,163,7,62,43,61,81,63,155,164,158,120,179,189,139,51,14,164,232,209,62,62,176,169,254,164,226,172,32,191,0,0,0,0,9,0,0,0,9,0,0,0,0,0,0,0,102,102,166,64,0,0,250,66,102,102,134,192,154,153,201,192,154,153,153,64,0,0,128,63,0,0,0,0,0,0,0,0,2,0,0,0,21,0,0,0,236,81,120,63,0,0,160,64,0,0,200,66,1,0,0,0,9,0,0,0,9,0,0,0,0,0,0,0,154,153,169,64,0,0,250,66,102,102,102,192,51,51,179,192,0,0,144,64,0,0,192,63,0,0,0,0,0,0,0,0,2,0,0,0,21,0,0,0,205,204,172,63,0,0,160,64,0,0,200,66,2,0,0,0,9,0,0,0,9,0,0,0,0,0,0,0,51,51,179,64,0,0,250,66,205,204,12,192,0,0,96,192,51,51,51,64,0,0,0,64,0,0,0,0,0,0,0,0,2,0,0,0,21,0,0,0,82,184,190,63,0,0,160,64,0,0,200,66,3,0,0,0,9,0,0,0,9,0,0,0,1,0,0,0,154,153,185,64,0,0,2,67,102,102,230,191,51,51,51,192,102,102,38,64,0,0,64,64,0,0,128,192,0,0,0,0,2,0,0,0,20,0,0,0,133,235,209,63,0,0,160,64,0,0,200,66,4,0,0,0,9,0,0,0,9,0,0,0,1,0,0,0,0,0,192,64,0,0,7,67,51,51,51,191,205,204,140,191,205,204,140,63,0,0,96,64,0,0,0,193,0,0,0,0,2,0,0,0,0,0,0,0,184,30,229,63,0,0,160,64,0,0,200,66,5,0,0,0,9,0,0,0,9,0,0,0,1,0,0,0,205,204,204,64,0,0,12,67,0,0,0,63,205,204,204,62,0,0,240,192,0,0,128,64,0,0,64,193,23,183,81,57,0,0,0,0,0,0,0,0,154,153,249,63,0,0,160,64,0,0,200,66,6,0,0,0,9,0,0,0,9,0,0,0,1,0,0,0,51,51,211,64,0,0,17,67,31,133,43,63,102,102,38,63,51,51,107,193,0,0,208,64,0,0,152,193,23,183,209,57,0,0,0,0,0,0,0,0,51,51,19,64,0,0,160,64,0,0,200,66,7,0,0,0,9,0,0,0,9,0,0,0,1,0,0,0,51,51,211,64,0,0,17,67,205,204,76,63,0,0,64,63,154,153,157,193,0,0,0,65,0,0,176,193,82,73,29,58,0,0,0,0,0,0,0,0,205,204,44,64,0,0,160,64,0,0,200,66,8,0,0,0,9,0,0,0,9,0,0,0,1,0,0,0,51,51,211,64,0,0,17,67,154,153,153,63,51,51,147,63,0,0,220,193,0,0,32,65,0,0,184,193,52,128,55,58,0,0,0,0,0,0,0,0,0,0,0,0,0,0,160,64,0,0,200,66,9,0,0,0,9,0,0,0,9,0,0,0,1,0,0,0,51,51,211,64,0,0,17,67,205,204,204,63,205,204,204,63,0,0,16,194,0,0,48,65,0,0,200,193,23,183,81,58,0,0,0,0,0,0,0,0,0,0,0,0,0,0,160,64,0,0,200,66,10,0,0,0,9,0,0,0,9,0,0,0,1,0,0,0,51,51,211,64,0,0,17,67,0,0,0,64,0,0,0,64,0,0,16,194,0,0,64,65,0,0,200,193,23,183,81,58,0,0,0,0,0,0,0,0,0,0,0,0,0,0,160,64,0,0,200,66,0,0,0,0,0,0,0,0,9,0,0,0,9,0,0,0,0,0,0,0,102,102,134,64,0,0,200,65,154,153,217,192,154,153,217,192,51,51,227,64,0,0,128,63,0,0,0,0,0,0,0,0,2,0,0,0,31,0,0,0,0,0,128,63,0,0,160,64,0,0,200,66,1,0,0,0,9,0,0,0,9,0,0,0,0,0,0,0,102,102,134,64,0,0,200,65,154,153,153,192,154,153,153,192,205,204,172,64,51,51,179,63,0,0,128,191,0,0,0,0,2,0,0,0,27,0,0,0,178,157,143,63,0,0,160,64,0,0,196,66,2,0,0,0,9,0,0,0,9,0,0,0,0,0,0,0,102,102,134,64,0,0,200,65,102,102,38,192,102,102,38,192,205,204,108,64,0,0,0,64,0,0,64,192,0,0,0,0,2,0,0,0,23,0,0,0,47,221,164,63,0,0,160,64,0,0,194,66,3,0,0,0,9,0,0,0,9,0,0,0,1,0,0,0,102,102,134,64,0,0,200,65,205,204,204,191,205,204,204,191,0,0,0,64,0,0,0,64,0,0,160,192,0,0,0,0,2,0,0,0,18,0,0,0,223,79,189,63,0,0,160,64,0,0,192,66,4,0,0,0,9,0,0,0,9,0,0,0,1,0,0,0,102,102,134,64,0,0,200,65,0,0,0,128,0,0,0,128,0,0,0,0,0,0,0,64,0,0,0,193,0,0,0,0,2,0,0,0,12,0,0,0,16,88,217,63,0,0,160,64,0,0,190,66,5,0,0,0,9,0,0,0,9,0,0,0,1,0,0,0,102,102,134,64,0,0,200,65,102,102,166,63,102,102,166,63,0,0,192,192,0,0,96,64,0,0,48,193,0,0,0,0,2,0,0,0,8,0,0,0,154,153,249,63,0,0,160,64,102,102,188,66,6,0,0,0,9,0,0,0,9,0,0,0,1,0,0,0,0,0,144,64,0,0,200,66,205,204,12,64,51,51,19,64,0,0,64,193,0,0,192,64,0,0,96,193,0,0,0,0,2,0,0,0,4,0,0,0,199,75,15,64,0,0,64,64,205,204,187,66,7,0,0,0,9,0,0,0,9,0,0,0,1,0,0,0,154,153,153,64,0,0,72,67,205,204,44,64,205,204,44,64,0,0,144,193,0,0,16,65,0,0,136,193,0,0,0,0,2,0,0,0,0,0,0,0,225,122,36,64,0,0,128,63,51,51,187,66,8,0,0,0,9,0,0,0,9,0,0,0,1,0,0,0,154,153,169,64,0,0,150,67,51,51,51,64,51,51,51,64,0,0,168,193,0,0,32,65,0,0,184,193,23,183,81,57,0,0,0,0,0,0,0,0,47,221,60,64,0,0,0,0,154,153,186,66,9,0,0,0,9,0,0,0,9,0,0,0,1,0,0,0,51,51,211,64,0,0,150,67,51,51,51,64,51,51,51,64,0,0,184,193,0,0,48,65,0,0,200,193,82,73,29,58,0,0,0,0,0,0,0,0,254,212,88,64,0,0,0,0,154,153,186,66,10,0,0,0,9,0,0,0,9,0,0,0,1,0,0,0,0,0,200,65,0,0,150,67,51,51,51,64,51,51,51,64,0,0,200,193,0,0,64,65,0,0,216,193,10,215,35,59,0,0,0,0,0,0,0,0,0,0,96,64,0,0,0,0,154,153,186,66,0,0,0,0,3,0,1,0,4,0,4,0,6,0,7,0,8,0,8,0,4,0,4,0,4,0,5,0,6,0,8,0,7,0,9,0,5,0,7,0,6,0,8,0,7,0,9,0,8,0,10,0,7,0,8,0,7,0,8,0,8,0,9,0,9,0,10,0,2,0,1,0,3,0,4,0,7,0,7,0,4,0,4,0,4,0,5,0,7,0,7,0,6,0,6,0,7,0,7,0,8,0,8,0,0,0,0,0,2,0,0,0,2,0,0,0,2,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,0,0,128,63,54,89,75,63,152,134,33,63,152,134,33,63,152,134,33,63,152,134,33,63,152,134,33,63,250,155,128,62,153,158,240,61,0,0,0,0,3,4,6,7,9,10,4,5,6,7,8,10,5,6,7,8,9,10,7,7,8,9,9,10,8,8,9,9,10,11,9,9,10,10,11,11,0,0,0,0,7,0,5,0,9,0,14,0,15,0,7,0,6,0,4,0,5,0,5,0,6,0,7,0,7,0,6,0,8,0,8,0,8,0,5,0,15,0,6,0,9,0,10,0,5,0,1,0,11,0,7,0,9,0,6,0,4,0,1,0,14,0,4,0,6,0,2,0,6,0,0,0,2,4,7,9,9,10,4,4,6,10,10,10,7,6,8,10,10,11,9,10,10,11,11,12,9,9,10,11,12,12,10,10,11,11,13,13,0,0,0,0,3,0,4,0,6,0,18,0,12,0,5,0,5,0,1,0,2,0,16,0,9,0,3,0,7,0,3,0,5,0,14,0,7,0,3,0,19,0,17,0,15,0,13,0,10,0,4,0,13,0,5,0,8,0,11,0,5,0,1,0,12,0,4,0,4,0,1,0,1,0,0,0,1,4,7,9,9,10,4,6,8,9,9,10,7,7,9,10,10,11,8,9,10,11,11,11,8,9,10,11,11,12,9,10,11,12,12,12,0,0,0,0,1,0,2,0,10,0,19,0,16,0,10,0,3,0,3,0,7,0,10,0,5,0,3,0,11,0,4,0,13,0,17,0,8,0,4,0,12,0,11,0,18,0,15,0,11,0,2,0,7,0,6,0,9,0,14,0,3,0,1,0,6,0,4,0,5,0,3,0,2,0,0,0,3,4,6,8,4,4,6,7,5,6,7,8,7,7,8,9,7,0,3,0,5,0,1,0,6,0,2,0,3,0,2,0,5,0,4,0,4,0,1,0,3,0,3,0,2,0,0,0,1,4,7,8,4,5,8,9,7,8,9,10,8,8,9,10,1,0,2,0,6,0,5,0,3,0,1,0,4,0,4,0,7,0,5,0,7,0,1,0,6,0,1,0,1,0,0,0,2,3,7,4,4,7,6,7,8,0,0,0,0,0,0,0,3,0,2,0,1,0,1,0,1,0,1,0,3,0,2,0,0,0,0,0,0,0,0,0,4,5,5,6,5,6,6,7,5,6,6,7,6,7,7,8,15,0,28,0,26,0,48,0,22,0,40,0,36,0,64,0,14,0,24,0,20,0,32,0,12,0,16,0,8,0,0,0,1,5,5,7,5,8,7,9,5,7,7,9,7,9,9,10,1,0,10,0,8,0,20,0,12,0,20,0,16,0,32,0,14,0,12,0,24,0,0,0,28,0,16,0,24,0,16,0,1,4,7,4,5,7,6,7,8,0,0,0,0,0,0,0,1,0,2,0,1,0,3,0,1,0,1,0,3,0,2,0,0,0,0,0,0,0,0,0,4,5,7,8,9,10,10,11,11,12,12,12,12,12,13,10,5,6,7,8,9,10,10,11,11,11,12,12,12,12,12,10,7,7,8,9,9,10,10,11,11,11,11,12,12,12,13,9,8,8,9,9,10,10,10,11,11,11,11,12,12,12,12,9,9,9,9,10,10,10,10,11,11,11,12,12,12,12,13,9,10,9,10,10,10,10,11,11,11,11,12,12,12,12,12,9,10,10,10,10,10,11,11,11,11,12,12,12,12,12,13,9,11,10,10,10,11,11,11,11,12,12,12,12,12,13,13,10,11,11,11,11,11,11,11,11,11,12,12,12,12,13,13,10,11,11,11,11,11,11,11,12,12,12,12,12,13,13,13,10,12,11,11,11,11,12,12,12,12,12,12,13,13,13,13,10,12,12,11,11,11,12,12,12,12,12,12,13,13,13,13,10,12,12,12,12,12,12,12,12,12,12,13,13,13,13,13,10,12,12,12,12,12,12,12,12,13,13,13,13,13,13,13,10,13,12,12,12,12,12,12,13,13,13,13,13,13,13,13,10,9,9,9,9,9,9,9,9,9,9,9,10,10,10,10,6,15,0,13,0,46,0,80,0,146,0,6,1,248,0,178,1,170,1,157,2,141,2,137,2,109,2,5,2,8,4,88,0,14,0,12,0,21,0,38,0,71,0,130,0,122,0,216,0,209,0,198,0,71,1,89,1,63,1,41,1,23,1,42,0,47,0,22,0,41,0,74,0,68,0,128,0,120,0,221,0,207,0,194,0,182,0,84,1,59,1,39,1,29,2,18,0,81,0,39,0,75,0,70,0,134,0,125,0,116,0,220,0,204,0,190,0,178,0,69,1,55,1,37,1,15,1,16,0,147,0,72,0,69,0,135,0,127,0,118,0,112,0,210,0,200,0,188,0,96,1,67,1,50,1,29,1,28,2,14,0,7,1,66,0,129,0,126,0,119,0,114,0,214,0,202,0,192,0,180,0,85,1,61,1,45,1,25,1,6,1,12,0,249,0,123,0,121,0,117,0,113,0,215,0,206,0,195,0,185,0,91,1,74,1,52,1,35,1,16,1,8,2,10,0,179,1,115,0,111,0,109,0,211,0,203,0,196,0,187,0,97,1,76,1,57,1,42,1,27,1,19,2,125,1,17,0,171,1,212,0,208,0,205,0,201,0,193,0,186,0,177,0,169,0,64,1,47,1,30,1,12,1,2,2,121,1,16,0,79,1,199,0,197,0,191,0,189,0,181,0,174,0,77,1,65,1,49,1,33,1,19,1,9,2,123,1,115,1,11,0,156,2,184,0,183,0,179,0,175,0,88,1,75,1,58,1,48,1,34,1,21,1,18,2,127,1,117,1,110,1,10,0,140,2,90,1,171,0,168,0,164,0,62,1,53,1,43,1,31,1,20,1,7,1,1,2,119,1,112,1,106,1,6,0,136,2,66,1,60,1,56,1,51,1,46,1,36,1,28,1,13,1,5,1,0,2,120,1,114,1,108,1,103,1,4,0,108,2,44,1,40,1,38,1,32,1,26,1,17,1,10,1,3,2,124,1,118,1,113,1,109,1,105,1,101,1,2,0,9,4,24,1,22,1,18,1,11,1,8,1,3,1,126,1,122,1,116,1,111,1,107,1,104,1,102,1,100,1,0,0,43,0,20,0,19,0,17,0,15,0,13,0,11,0,9,0,7,0,6,0,4,0,7,0,5,0,3,0,1,0,3,0,1,4,3,5,0,0,0,0,1,0,1,0,1,0,0,0,1,5,7,9,10,10,11,11,12,12,12,13,13,13,14,10,4,6,8,9,10,11,11,11,12,12,12,13,14,13,14,10,7,8,9,10,11,11,12,12,13,12,13,13,13,14,14,11,9,9,10,11,11,12,12,12,13,13,14,14,14,15,15,12,10,10,11,11,12,12,13,13,13,14,14,14,15,15,15,11,10,10,11,11,12,13,13,14,13,14,14,15,15,15,16,12,11,11,11,12,13,13,13,13,14,14,14,14,15,15,16,12,11,11,12,12,13,13,13,14,14,15,15,15,15,17,17,12,11,12,12,13,13,13,14,14,15,15,15,15,16,16,16,12,12,12,12,13,13,14,14,15,15,15,15,16,15,16,15,13,12,13,12,13,14,14,14,14,15,16,16,16,17,17,16,12,13,13,13,13,14,14,15,16,16,16,16,16,16,15,16,13,13,14,14,14,14,15,15,15,15,17,16,16,16,16,18,13,15,14,14,14,15,15,16,16,16,18,17,17,17,19,17,13,14,15,13,14,16,16,15,16,16,17,18,17,19,17,16,13,10,10,10,11,11,12,12,12,13,13,13,13,13,13,13,10,1,5,7,9,10,10,11,11,12,12,12,13,13,13,14,11,4,6,8,9,10,11,11,11,12,12,12,13,14,13,14,11,7,8,9,10,11,11,12,12,13,12,13,13,13,14,14,12,9,9,10,11,11,12,12,12,13,13,14,14,14,15,15,13,10,10,11,11,12,12,13,13,13,14,14,14,15,15,15,12,10,10,11,11,12,13,13,14,13,14,14,15,15,15,16,13,11,11,11,12,13,13,13,13,14,14,14,14,15,15,16,13,11,11,12,12,13,13,13,14,14,15,15,15,15,17,17,13,11,12,12,13,13,13,14,14,15,15,15,15,16,16,16,13,12,12,12,13,13,14,14,15,15,15,15,16,15,16,15,14,12,13,12,13,14,14,14,14,15,16,16,16,17,17,16,13,13,13,13,13,14,14,15,16,16,16,16,16,16,15,16,14,13,14,14,14,14,15,15,15,15,17,16,16,16,16,18,14,15,14,14,14,15,15,16,16,16,18,17,17,17,19,17,14,14,15,13,14,16,16,15,16,16,17,18,17,19,17,16,14,11,11,11,12,12,13,13,13,14,14,14,14,14,14,14,12,1,0,5,0,14,0,44,0,74,0,63,0,110,0,93,0,172,0,149,0,138,0,242,0,225,0,195,0,120,1,17,0,3,0,4,0,12,0,20,0,35,0,62,0,53,0,47,0,83,0,75,0,68,0,119,0,201,0,107,0,207,0,9,0,15,0,13,0,23,0,38,0,67,0,58,0,103,0,90,0,161,0,72,0,127,0,117,0,110,0,209,0,206,0,16,0,45,0,21,0,39,0,69,0,64,0,114,0,99,0,87,0,158,0,140,0,252,0,212,0,199,0,131,1,109,1,26,0,75,0,36,0,68,0,65,0,115,0,101,0,179,0,164,0,155,0,8,1,246,0,226,0,139,1,126,1,106,1,9,0,66,0,30,0,59,0,56,0,102,0,185,0,173,0,9,1,142,0,253,0,232,0,144,1,132,1,122,1,189,1,16,0,111,0,54,0,52,0,100,0,184,0,178,0,160,0,133,0,1,1,244,0,228,0,217,0,129,1,110,1,203,2,10,0,98,0,48,0,91,0,88,0,165,0,157,0,148,0,5,1,248,0,151,1,141,1,116,1,124,1,121,3,116,3,8,0,85,0,84,0,81,0,159,0,156,0,143,0,4,1,249,0,171,1,145,1,136,1,127,1,215,2,201,2,196,2,7,0,154,0,76,0,73,0,141,0,131,0,0,1,245,0,170,1,150,1,138,1,128,1,223,2,103,1,198,2,96,1,11,0,139,0,129,0,67,0,125,0,247,0,233,0,229,0,219,0,137,1,231,2,225,2,208,2,117,3,114,3,183,1,4,0,243,0,120,0,118,0,115,0,227,0,223,0,140,1,234,2,230,2,224,2,209,2,200,2,194,2,223,0,180,1,6,0,202,0,224,0,222,0,218,0,216,0,133,1,130,1,125,1,108,1,120,3,187,1,195,2,184,1,181,1,192,6,4,0,235,2,211,0,210,0,208,0,114,1,123,1,222,2,211,2,202,2,199,6,115,3,109,3,108,3,131,13,97,3,2,0,121,1,113,1,102,0,187,0,214,2,210,2,102,1,199,2,197,2,98,3,198,6,103,3,130,13,102,3,178,1,0,0,12,0,10,0,7,0,11,0,10,0,17,0,11,0,9,0,13,0,12,0,10,0,7,0,5,0,3,0,1,0,3,0,3,5,6,8,8,9,10,10,10,11,11,12,12,12,13,14,5,5,7,8,9,9,10,10,10,11,11,12,12,12,13,13,6,7,7,8,9,9,10,10,10,11,11,12,12,13,13,13,7,8,8,9,9,10,10,11,11,11,12,12,12,13,13,13,8,8,9,9,10,10,11,11,11,11,12,12,12,13,13,13,9,9,9,10,10,10,11,11,11,11,12,12,13,13,13,14,10,9,10,10,10,11,11,11,11,12,12,12,13,13,14,14,10,10,10,11,11,11,11,12,12,12,12,12,13,13,13,14,10,10,10,11,11,11,11,12,12,12,12,13,13,14,14,14,10,10,11,11,11,11,12,12,12,13,13,13,13,14,14,14,11,11,11,11,12,12,12,12,12,13,13,13,13,14,15,14,11,11,11,11,12,12,12,12,13,13,13,13,14,14,14,15,12,12,11,12,12,12,13,13,13,13,13,13,14,14,15,15,12,12,12,12,12,13,13,13,13,14,14,14,14,14,15,15,13,13,13,13,13,13,13,13,14,14,14,14,15,15,14,15,13,13,13,13,13,13,13,14,14,14,14,14,15,15,15,15,7,0,12,0,18,0,53,0,47,0,76,0,124,0,108,0,89,0,123,0,108,0,119,0,107,0,81,0,122,0,63,0,13,0,5,0,16,0,27,0,46,0,36,0,61,0,51,0,42,0,70,0,52,0,83,0,65,0,41,0,59,0,36,0,19,0,17,0,15,0,24,0,41,0,34,0,59,0,48,0,40,0,64,0,50,0,78,0,62,0,80,0,56,0,33,0,29,0,28,0,25,0,43,0,39,0,63,0,55,0,93,0,76,0,59,0,93,0,72,0,54,0,75,0,50,0,29,0,52,0,22,0,42,0,40,0,67,0,57,0,95,0,79,0,72,0,57,0,89,0,69,0,49,0,66,0,46,0,27,0,77,0,37,0,35,0,66,0,58,0,52,0,91,0,74,0,62,0,48,0,79,0,63,0,90,0,62,0,40,0,38,0,125,0,32,0,60,0,56,0,50,0,92,0,78,0,65,0,55,0,87,0,71,0,51,0,73,0,51,0,70,0,30,0,109,0,53,0,49,0,94,0,88,0,75,0,66,0,122,0,91,0,73,0,56,0,42,0,64,0,44,0,21,0,25,0,90,0,43,0,41,0,77,0,73,0,63,0,56,0,92,0,77,0,66,0,47,0,67,0,48,0,53,0,36,0,20,0,71,0,34,0,67,0,60,0,58,0,49,0,88,0,76,0,67,0,106,0,71,0,54,0,38,0,39,0,23,0,15,0,109,0,53,0,51,0,47,0,90,0,82,0,58,0,57,0,48,0,72,0,57,0,41,0,23,0,27,0,62,0,9,0,86,0,42,0,40,0,37,0,70,0,64,0,52,0,43,0,70,0,55,0,42,0,25,0,29,0,18,0,11,0,11,0,118,0,68,0,30,0,55,0,50,0,46,0,74,0,65,0,49,0,39,0,24,0,16,0,22,0,13,0,14,0,7,0,91,0,44,0,39,0,38,0,34,0,63,0,52,0,45,0,31,0,52,0,28,0,19,0,14,0,8,0,9,0,3,0,123,0,60,0,58,0,53,0,47,0,43,0,32,0,22,0,37,0,24,0,17,0,12,0,15,0,10,0,2,0,1,0,71,0,37,0,34,0,30,0,28,0,20,0,17,0,26,0,21,0,16,0,10,0,6,0,8,0,6,0,2,0,0,0,1,5,7,8,9,10,10,11,10,11,12,12,13,13,14,14,4,6,8,9,10,10,11,11,11,11,12,12,13,14,14,14,7,8,9,10,11,11,12,12,11,12,12,13,13,14,15,15,8,9,10,11,11,12,12,12,12,13,13,13,13,14,15,15,9,9,11,11,12,12,13,13,12,13,13,14,14,15,15,16,10,10,11,12,12,12,13,13,13,13,14,13,15,15,16,16,10,11,12,12,13,13,13,13,13,14,14,14,15,15,16,16,11,11,12,13,13,13,14,14,14,14,15,15,15,16,18,18,10,10,11,12,12,13,13,14,14,14,14,15,15,16,17,17,11,11,12,12,13,13,13,15,14,15,15,16,16,16,18,17,11,12,12,13,13,14,14,15,14,15,16,15,16,17,18,19,12,12,12,13,14,14,14,14,15,15,15,16,17,17,17,18,12,13,13,14,14,15,14,15,16,16,17,17,17,18,18,18,13,13,14,15,15,15,16,16,16,16,16,17,18,17,18,18,14,14,14,15,15,15,17,16,16,19,17,17,17,19,18,18,13,14,15,16,16,16,17,16,17,17,18,18,21,20,21,18,1,0,5,0,14,0,21,0,34,0,51,0,46,0,71,0,42,0,52,0,68,0,52,0,67,0,44,0,43,0,19,0,3,0,4,0,12,0,19,0,31,0,26,0,44,0,33,0,31,0,24,0,32,0,24,0,31,0,35,0,22,0,14,0,15,0,13,0,23,0,36,0,59,0,49,0,77,0,65,0,29,0,40,0,30,0,40,0,27,0,33,0,42,0,16,0,22,0,20,0,37,0,61,0,56,0,79,0,73,0,64,0,43,0,76,0,56,0,37,0,26,0,31,0,25,0,14,0,35,0,16,0,60,0,57,0,97,0,75,0,114,0,91,0,54,0,73,0,55,0,41,0,48,0,53,0,23,0,24,0,58,0,27,0,50,0,96,0,76,0,70,0,93,0,84,0,77,0,58,0,79,0,29,0,74,0,49,0,41,0,17,0,47,0,45,0,78,0,74,0,115,0,94,0,90,0,79,0,69,0,83,0,71,0,50,0,59,0,38,0,36,0,15,0,72,0,34,0,56,0,95,0,92,0,85,0,91,0,90,0,86,0,73,0,77,0,65,0,51,0,44,0,43,0,42,0,43,0,20,0,30,0,44,0,55,0,78,0,72,0,87,0,78,0,61,0,46,0,54,0,37,0,30,0,20,0,16,0,53,0,25,0,41,0,37,0,44,0,59,0,54,0,81,0,66,0,76,0,57,0,54,0,37,0,18,0,39,0,11,0,35,0,33,0,31,0,57,0,42,0,82,0,72,0,80,0,47,0,58,0,55,0,21,0,22,0,26,0,38,0,22,0,53,0,25,0,23,0,38,0,70,0,60,0,51,0,36,0,55,0,26,0,34,0,23,0,27,0,14,0,9,0,7,0,34,0,32,0,28,0,39,0,49,0,75,0,30,0,52,0,48,0,40,0,52,0,28,0,18,0,17,0,9,0,5,0,45,0,21,0,34,0,64,0,56,0,50,0,49,0,45,0,31,0,19,0,12,0,15,0,10,0,7,0,6,0,3,0,48,0,23,0,20,0,39,0,36,0,35,0,53,0,21,0,16,0,23,0,13,0,10,0,6,0,1,0,4,0,2,0,16,0,15,0,17,0,27,0,25,0,20,0,29,0,11,0,17,0,12,0,16,0,8,0,1,0,1,0,0,0,1,0,4,4,6,8,9,10,10,10,4,5,6,7,9,9,10,10,6,6,7,8,9,10,9,10,7,7,8,8,9,10,10,10,8,8,9,9,10,10,10,11,9,9,10,10,10,11,10,11,9,9,9,10,10,11,11,12,10,10,10,11,11,11,11,12,9,0,6,0,16,0,33,0,41,0,39,0,38,0,26,0,7,0,5,0,6,0,9,0,23,0,16,0,26,0,11,0,17,0,7,0,11,0,14,0,21,0,30,0,10,0,7,0,17,0,10,0,15,0,12,0,18,0,28,0,14,0,5,0,32,0,13,0,22,0,19,0,18,0,16,0,9,0,5,0,40,0,17,0,31,0,29,0,17,0,13,0,4,0,2,0,27,0,12,0,11,0,15,0,10,0,7,0,4,0,1,0,27,0,12,0,8,0,12,0,6,0,3,0,1,0,0,0,2,4,6,8,9,10,9,10,4,5,6,8,10,10,9,10,6,7,8,9,10,11,10,10,8,8,9,11,10,12,10,11,9,10,10,11,11,12,11,12,9,10,11,12,12,13,12,13,9,9,9,10,11,12,12,12,9,9,10,11,12,12,12,12,3,0,4,0,10,0,24,0,34,0,33,0,21,0,15,0,5,0,3,0,4,0,10,0,32,0,17,0,11,0,10,0,11,0,7,0,13,0,18,0,30,0,31,0,20,0,5,0,25,0,11,0,19,0,59,0,27,0,18,0,12,0,5,0,35,0,33,0,31,0,58,0,30,0,16,0,7,0,5,0,28,0,26,0,32,0,19,0,17,0,15,0,8,0,14,0,14,0,12,0,9,0,13,0,14,0,9,0,4,0,1,0,11,0,4,0,6,0,6,0,6,0,3,0,2,0,0,0,1,4,7,9,10,10,10,11,4,6,8,9,10,11,10,10,7,8,9,10,11,12,11,11,8,9,10,11,12,12,11,12,9,10,11,12,12,12,12,12,10,11,12,12,13,13,12,13,9,10,11,12,12,12,13,13,10,10,11,12,12,13,13,13,1,0,2,0,10,0,23,0,35,0,30,0,12,0,17,0,3,0,3,0,8,0,12,0,18,0,21,0,12,0,7,0,11,0,9,0,15,0,21,0,32,0,40,0,19,0,6,0,14,0,13,0,22,0,34,0,46,0,23,0,18,0,7,0,20,0,19,0,33,0,47,0,27,0,22,0,9,0,3,0,31,0,22,0,41,0,26,0,21,0,20,0,5,0,3,0,14,0,13,0,10,0,11,0,16,0,6,0,5,0,1,0,9,0,8,0,7,0,8,0,4,0,4,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,2,0,0,0,2,0,0,0,2,0,0,0,2,0,0,0,3,0,0,0,2,0,0,0,3,0,0,0,3,0,0,0,4,0,0,0,3,0,0,0,4,0,0,0,3,0,0,0,4,0,0,0,4,0,0,0,5,0,0,0,4,0,0,0,5,0,0,0,4,0,0,0,6,0,0,0,5,0,0,0,6,0,0,0,5,0,0,0,6,0,0,0,5,0,0,0,7,0,0,0,6,0,0,0,7,0,0,0,6,0,0,0,7,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,2,0,0,0,3,0,0,0,1,0,0,0,2,0,0,0,4,0,0,0,8,0,0,0,1,0,0,0,2,0,0,0,4,0,0,0,8,0,0,0,2,0,0,0,4,0,0,0,8,0,0,0,2,0,0,0,4,0,0,0,8,0,0,0,4,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,2,0,0,0,2,0,0,0,2,0,0,0,3,0,0,0,3,0,0,0,3,0,0,0,4,0,0,0,4,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,8,0,0,0,2,0,0,0,2,0,0,0,2,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,8,0,0,0,8,0,0,0,8,0,0,0,16,0,0,0,16,0,0,0,0,0,0,0,6,0,0,0,12,0,0,0,18,0,0,0,24,0,0,0,30,0,0,0,36,0,0,0,44,0,0,0,54,0,0,0,66,0,0,0,80,0,0,0,96,0,0,0,116,0,0,0,140,0,0,0,168,0,0,0,200,0,0,0,238,0,0,0,28,1,0,0,80,1,0,0,140,1,0,0,208,1,0,0,10,2,0,0,64,2,0,0,0,0,0,0,4,0,0,0,8,0,0,0,12,0,0,0,18,0,0,0,24,0,0,0,32,0,0,0,42,0,0,0,56,0,0,0,74,0,0,0,100,0,0,0,132,0,0,0,174,0,0,0,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,12,0,0,0,18,0,0,0,24,0,0,0,30,0,0,0,36,0,0,0,44,0,0,0,54,0,0,0,66,0,0,0,80,0,0,0,96,0,0,0,114,0,0,0,136,0,0,0,162,0,0,0,194,0,0,0,232,0,0,0,22,1,0,0,76,1,0,0,138,1,0,0,208,1,0,0,28,2,0,0,64,2,0,0,0,0,0,0,4,0,0,0,8,0,0,0,12,0,0,0,18,0,0,0,26,0,0,0,36,0,0,0,48,0,0,0,62,0,0,0,80,0,0,0,104,0,0,0,136,0,0,0,180,0,0,0,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,12,0,0,0,18,0,0,0,24,0,0,0,30,0,0,0,36,0,0,0,44,0,0,0,54,0,0,0,66,0,0,0,80,0,0,0,96,0,0,0,116,0,0,0,140,0,0,0,168,0,0,0,200,0,0,0,238,0,0,0,28,1,0,0,80,1,0,0,140,1,0,0,208,1,0,0,10,2,0,0,64,2,0,0,0,0,0,0,4,0,0,0,8,0,0,0,12,0,0,0,18,0,0,0,26,0,0,0,36,0,0,0,48,0,0,0,62,0,0,0,80,0,0,0,104,0,0,0,134,0,0,0,174,0,0,0,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,8,0,0,0,12,0,0,0,16,0,0,0,20,0,0,0,24,0,0,0,30,0,0,0,36,0,0,0,44,0,0,0,52,0,0,0,62,0,0,0,74,0,0,0,90,0,0,0,110,0,0,0,134,0,0,0,162,0,0,0,196,0,0,0,238,0,0,0,32,1,0,0,86,1,0,0,162,1,0,0,64,2,0,0,0,0,0,0,4,0,0,0,8,0,0,0,12,0,0,0,16,0,0,0,22,0,0,0,30,0,0,0,40,0,0,0,52,0,0,0,66,0,0,0,84,0,0,0,106,0,0,0,136,0,0,0,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,8,0,0,0,12,0,0,0,16,0,0,0,20,0,0,0,24,0,0,0,30,0,0,0,36,0,0,0,42,0,0,0,50,0,0,0,60,0,0,0,72,0,0,0,88,0,0,0,106,0,0,0,128,0,0,0,156,0,0,0,190,0,0,0,230,0,0,0,20,1,0,0,74,1,0,0,128,1,0,0,64,2,0,0,0,0,0,0,4,0,0,0,8,0,0,0,12,0,0,0,16,0,0,0,22,0,0,0,28,0,0,0,38,0,0,0,50,0,0,0,64,0,0,0,80,0,0,0,100,0,0,0,126,0,0,0,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,8,0,0,0,12,0,0,0,16,0,0,0,20,0,0,0,24,0,0,0,30,0,0,0,36,0,0,0,44,0,0,0,54,0,0,0,66,0,0,0,82,0,0,0,102,0,0,0,126,0,0,0,156,0,0,0,194,0,0,0,240,0,0,0,40,1,0,0,108,1,0,0,192,1,0,0,38,2,0,0,64,2,0,0,0,0,0,0,4,0,0,0,8,0,0,0,12,0,0,0,16,0,0,0,22,0,0,0,30,0,0,0,42,0,0,0,58,0,0,0,78,0,0,0,104,0,0,0,138,0,0,0,180,0,0,0,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,12,0,0,0,18,0,0,0,24,0,0,0,30,0,0,0,36,0,0,0,44,0,0,0,54,0,0,0,66,0,0,0,80,0,0,0,96,0,0,0,116,0,0,0,140,0,0,0,168,0,0,0,200,0,0,0,238,0,0,0,28,1,0,0,80,1,0,0,140,1,0,0,208,1,0,0,10,2,0,0,64,2,0,0,0,0,0,0,4,0,0,0,8,0,0,0,12,0,0,0,18,0,0,0,26,0,0,0,36,0,0,0,48,0,0,0,62,0,0,0,80,0,0,0,104,0,0,0,134,0,0,0,174,0,0,0,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,12,0,0,0,18,0,0,0,24,0,0,0,30,0,0,0,36,0,0,0,44,0,0,0,54,0,0,0,66,0,0,0,80,0,0,0,96,0,0,0,116,0,0,0,140,0,0,0,168,0,0,0,200,0,0,0,238,0,0,0,28,1,0,0,80,1,0,0,140,1,0,0,208,1,0,0,10,2,0,0,64,2,0,0,0,0,0,0,4,0,0,0,8,0,0,0,12,0,0,0,18,0,0,0,26,0,0,0,36,0,0,0,48,0,0,0,62,0,0,0,80,0,0,0,104,0,0,0,134,0,0,0,174,0,0,0,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,24,0,0,0,36,0,0,0,48,0,0,0,60,0,0,0,72,0,0,0,88,0,0,0,108,0,0,0,132,0,0,0,160,0,0,0,192,0,0,0,232,0,0,0,24,1,0,0,80,1,0,0,144,1,0,0,220,1,0,0,54,2,0,0,56,2,0,0,58,2,0,0,60,2,0,0,62,2,0,0,64,2,0,0,0,0,0,0,8,0,0,0,16,0,0,0,24,0,0,0,36,0,0,0,52,0,0,0,72,0,0,0,96,0,0,0,124,0,0,0,160,0,0,0,162,0,0,0,164,0,0,0,166,0,0,0,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,11,0,0,0,16,0,0,0,21,0,0,0,0,0,0,0,0,0,0,0,18,0,0,0,36,0,0,0,54,0,0,0,54,0,0,0,36,0,0,0,54,0,0,0,72,0,0,0,54,0,0,0,72,0,0,0,90,0,0,0,72,0,0,0,90,0,0,0,108,0,0,0,108,0,0,0,126,0,0,0,0,0,0,0,18,0,0,0,36,0,0,0,54,0,0,0,51,0,0,0,35,0,0,0,53,0,0,0,71,0,0,0,52,0,0,0,70,0,0,0,88,0,0,0,69,0,0,0,87,0,0,0,105,0,0,0,104,0,0,0,122,0,0,0,0,0,0,0,10,0,0,0,20,0,0,0,30,0,0,0,33,0,0,0,21,0,0,0,31,0,0,0,41,0,0,0,32,0,0,0,42,0,0,0,52,0,0,0,43,0,0,0,53,0,0,0,63,0,0,0,64,0,0,0,74,0,0,0,0,128,64,192,32,160,96,224,16,144,80,208,48,176,112,240,8,136,72,200,40,168,104,232,24,152,88,216,56,184,120,248,4,132,68,196,36,164,100,228,20,148,84,212,52,180,116,244,12,140,76,204,44,172,108,236,28,156,92,220,60,188,124,252,2,130,66,194,34,162,98,226,18,146,82,210,50,178,114,242,10,138,74,202,42,170,106,234,26,154,90,218,58,186,122,250,6,134,70,198,38,166,102,230,22,150,86,214,54,182,118,246,14,142,78,206,46,174,110,238,30,158,94,222,62,190,126,254,205,204,236,192,205,204,236,192,205,204,236,192,0,0,24,193,205,204,236,192,51,51,195,192,0,0,176,192,102,102,150,192,102,102,150,192,102,102,150,192,102,102,150,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,2,0,0,0,2,0,0,0,3,0,0,0,3,0,0,0,3,0,0,0,2,0,0,0,0,0,0,0,205,204,60,65,154,153,89,65,154,153,137,65,0,0,0,66,0,0,58,66,51,51,77,66,0,0,102,66,51,51,134,66,0,0,143,66,51,51,169,66,51,51,195,66,0,0,2,67,154,153,217,64,154,153,185,64,154,153,185,64,205,204,204,64,0,0,208,64,102,102,30,65,154,153,65,65,102,102,102,65,0,0,112,65,51,51,151,65,205,204,172,65,51,51,215,65,205,204,8,66,205,204,32,66,51,51,59,66,0,0,98,66,205,204,114,66,205,204,147,66,102,102,171,66,205,204,186,66,51,51,252,66,0,0,0,0,0,0,0,128,0,0,0,128,0,0,0,128,0,0,0,0,0,0,0,192,0,0,128,191,205,204,76,189,0,0,0,63,0,0,0,128,0,0,0,128,0,0,0,128,0,0,0,0,0,0,0,191,0,0,128,190,205,204,204,188,0,0,0,63,0,0,0,0,1,0,0,0,16,0,0,0,17,0,0,0,8,0,0,0,9,0,0,0,24,0,0,0,25,0,0,0,4,0,0,0,5,0,0,0,20,0,0,0,21,0,0,0,12,0,0,0,13,0,0,0,28,0,0,0,29,0,0,0,2,0,0,0,3,0,0,0,18,0,0,0,19,0,0,0,10,0,0,0,11,0,0,0,26,0,0,0,27,0,0,0,6,0,0,0,7,0,0,0,22,0,0,0,23,0,0,0,14,0,0,0,15,0,0,0,30,0,0,0,31,0,0,0,8,0,0,0,208,7,0,0,16,0,0,0,116,14,0,0,24,0,0,0,60,15,0,0,32,0,0,0,124,21,0,0,40,0,0,0,88,27,0,0,48,0,0,0,76,29,0,0,56,0,0,0,16,39,0,0,64,0,0,0,248,42,0,0,80,0,0,0,188,52,0,0,96,0,0,0,252,58,0,0,112,0,0,0,240,60,0,0,128,0,0,0,104,66,0,0,160,0,0,0,92,68,0,0,192,0,0,0,168,72,0,0,224,0,0,0,200,75,0,0,0,1,0,0,244,76,0,0,64,1,0,0,20,80,0,0,6,0,0,0,5,0,0,0,5,0,0,0,5,0,0,0,9,0,0,0,9,0,0,0,9,0,0,0,9,0,0,0,6,0,0,0,9,0,0,0,9,0,0,0,9,0,0,0,6,0,0,0,5,0,0,0,7,0,0,0,3,0,0,0,9,0,0,0,9,0,0,0,12,0,0,0,6,0,0,0,6,0,0,0,9,0,0,0,12,0,0,0,6,0,0,0,11,0,0,0,10,0,0,0,0,0,0,0,0,0,0,0,18,0,0,0,18,0,0,0,0,0,0,0,0,0,0,0,15,0,0,0,18], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE);
/* memory initializer */ allocate([7,0,0,0,7,0,0,0,7,0,0,0,0,0,0,0,12,0,0,0,12,0,0,0,12,0,0,0,0,0,0,0,6,0,0,0,15,0,0,0,12,0,0,0,0,0,0,0,6,0,0,0,6,0,0,0,6,0,0,0,3,0,0,0,12,0,0,0,9,0,0,0,9,0,0,0,6,0,0,0,6,0,0,0,12,0,0,0,9,0,0,0,6,0,0,0,8,0,0,0,8,0,0,0,5,0,0,0,0,0,0,0,15,0,0,0,12,0,0,0,9,0,0,0,0,0,0,0,6,0,0,0,18,0,0,0,9,0,0,0,0,0,0,0,8,0,0,0,16,0,0,0,24,0,0,0,32,0,0,0,40,0,0,0,48,0,0,0,56,0,0,0,64,0,0,0,80,0,0,0,96,0,0,0,112,0,0,0,128,0,0,0,160,0,0,0,192,0,0,0,224,0,0,0,0,1,0,0,64,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,2,0,0,0,3,0,0,0,3,0,0,0,3,0,0,0,3,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,15,0,0,0,15,0,0,0,7,0,0,0,7,0,0,0,15,0,0,0,15,0,0,0,7,0,0,0,0,0,0,0,7,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,15,0,0,0,31,0,0,0,31,0,0,0,0,0,0,0,7,0,0,0,7,0,0,0,7,0,0,0,0,0,0,0,3,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,7,7,7,7,7,7,3,3,3,3,3,0,0,0,0,0,0,0,0,0,0,0,0,0,15,15,15,15,15,15,15,15,15,15,15,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,1,0,5,0,5,0,7,0,7,0,8,0,9,0,9,0,10,0,10,0,10,0,10,0,11,0,11,0,11,0,11,0,12,0,12,0,12,0,12,0,12,0,12,0,13,0,12,0,13,0,12,0,13,0,13,0,14,0,10,0,10,0,5,0,4,0,6,0,6,0,7,0,8,0,8,0,9,0,9,0,10,0,10,0,11,0,10,0,11,0,11,0,11,0,11,0,12,0,11,0,12,0,12,0,12,0,12,0,13,0,12,0,14,0,12,0,13,0,12,0,14,0,10,0,10,0,7,0,7,0,7,0,8,0,8,0,9,0,9,0,10,0,9,0,11,0,10,0,11,0,10,0,12,0,11,0,12,0,11,0,13,0,11,0,12,0,11,0,13,0,12,0,13,0,12,0,13,0,12,0,14,0,13,0,14,0,9,0,11,0,8,0,9,0,8,0,9,0,9,0,10,0,9,0,11,0,10,0,11,0,10,0,12,0,10,0,12,0,11,0,12,0,11,0,13,0,11,0,13,0,11,0,14,0,12,0,14,0,12,0,14,0,12,0,15,0,12,0,15,0,9,0,12,0,9,0,10,0,9,0,10,0,9,0,11,0,10,0,11,0,10,0,12,0,10,0,12,0,10,0,13,0,11,0,13,0,11,0,13,0,11,0,14,0,12,0,14,0,12,0,14,0,12,0,15,0,12,0,15,0,13,0,15,0,9,0,11,0,10,0,10,0,9,0,10,0,10,0,11,0,10,0,11,0,10,0,12,0,10,0,13,0,11,0,13,0,11,0,14,0,11,0,13,0,11,0,14,0,12,0,14,0,12,0,15,0,12,0,15,0,12,0,15,0,12,0,16,0,9,0,12,0,10,0,11,0,10,0,11,0,10,0,11,0,10,0,12,0,10,0,13,0,11,0,13,0,11,0,13,0,11,0,13,0,11,0,14,0,12,0,14,0,12,0,14,0,12,0,14,0,12,0,15,0,12,0,15,0,13,0,16,0,9,0,12,0,11,0,11,0,10,0,11,0,10,0,12,0,10,0,12,0,11,0,13,0,11,0,13,0,11,0,13,0,11,0,14,0,12,0,14,0,12,0,15,0,12,0,15,0,12,0,15,0,12,0,15,0,13,0,17,0,13,0,17,0,10,0,12,0,11,0,11,0,11,0,12,0,11,0,12,0,11,0,13,0,11,0,13,0,11,0,13,0,11,0,14,0,11,0,14,0,11,0,15,0,12,0,15,0,12,0,15,0,12,0,15,0,12,0,16,0,13,0,16,0,13,0,16,0,10,0,12,0,11,0,12,0,11,0,12,0,11,0,12,0,11,0,13,0,11,0,13,0,11,0,14,0,11,0,14,0,12,0,15,0,12,0,15,0,12,0,15,0,12,0,15,0,12,0,16,0,13,0,15,0,13,0,16,0,13,0,15,0,10,0,13,0,12,0,12,0,11,0,13,0,11,0,12,0,11,0,13,0,11,0,14,0,12,0,14,0,12,0,14,0,12,0,14,0,12,0,15,0,12,0,16,0,12,0,16,0,13,0,16,0,13,0,17,0,13,0,17,0,13,0,16,0,10,0,12,0,12,0,13,0,12,0,13,0,11,0,13,0,11,0,13,0,11,0,14,0,12,0,14,0,12,0,15,0,12,0,16,0,12,0,16,0,12,0,16,0,12,0,16,0,13,0,16,0,13,0,16,0,13,0,15,0,13,0,16,0,10,0,13,0,12,0,13,0,12,0,14,0,12,0,14,0,12,0,14,0,12,0,14,0,12,0,15,0,12,0,15,0,12,0,15,0,12,0,15,0,12,0,17,0,13,0,16,0,13,0,16,0,13,0,16,0,13,0,16,0,13,0,18,0,10,0,13,0,12,0,15,0,12,0,14,0,12,0,14,0,12,0,14,0,12,0,15,0,12,0,15,0,12,0,16,0,12,0,16,0,13,0,16,0,13,0,18,0,13,0,17,0,13,0,17,0,13,0,17,0,13,0,19,0,13,0,17,0,10,0,13,0,13,0,14,0,12,0,15,0,12,0,13,0,12,0,14,0,12,0,16,0,12,0,16,0,12,0,15,0,13,0,16,0,13,0,16,0,13,0,17,0,13,0,18,0,13,0,17,0,13,0,19,0,13,0,17,0,13,0,16,0,10,0,13,0,9,0,10,0,9,0,10,0,9,0,10,0,9,0,11,0,9,0,11,0,9,0,12,0,9,0,12,0,9,0,12,0,9,0,13,0,9,0,13,0,9,0,13,0,10,0,13,0,10,0,13,0,10,0,13,0,10,0,13,0,6,0,10,0,44,76,0,0,56,74,0,0,68,72,0,0,80,70,0,0,92,68,0,0,116,64,0,0,140,60,0,0,164,56,0,0,212,48,0,0,28,37,0,0,110,15,0,0,0,0,0,0,192,93,0,0,44,76,0,0,68,72,0,0,80,70,0,0,92,68,0,0,104,66,0,0,116,64,0,0,240,60,0,0,96,59,0,0,62,28,0,0,110,15,0,0,0,0,0,0,44,76,0,0,56,74,0,0,168,72,0,0,80,70,0,0,92,68,0,0,128,62,0,0,240,60,0,0,52,58,0,0,212,48,0,0,16,39,0,0,110,15,0,0,0,0,0,0,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,128,187,0,0,0,0,0,0,0,0,208,64,0,0,0,0,0,0,208,64,148,92,0,0,68,172,0,0,0,0,0,0,0,0,208,64,0,0,0,0,0,0,208,64,20,85,0,0,0,125,0,0,0,0,208,64,0,0,0,65,102,102,166,64,0,0,208,64,184,61,0,0,192,93,0,0,0,0,0,65,0,0,8,65,102,102,166,64,0,0,192,64,74,46,0,0,34,86,0,0,0,0,8,65,246,40,16,65,102,102,166,64,0,0,208,64,140,42,0,0,128,62,0,0,246,40,16,65,102,102,22,65,205,204,156,64,0,0,208,64,223,30,0,0,224,46,0,0,102,102,22,65,154,153,25,65,0,0,144,64,0,0,192,64,40,23,0,0,17,43,0,0,154,153,25,65,102,102,30,65,51,51,163,64,0,0,208,64,70,21,0,0,64,31,0,0,102,102,30,65,0,0,32,65,205,204,156,64,0,0,208,64,112,15,0,0,102,102,182,64,0,0,208,64,154,153,233,64,51,51,3,65,0,0,32,65,102,102,62,65,0,0,80,65,0,0,96,65,0,0,112,65,0,0,132,65,184,64,0,0,0,0,0,0,24,65,0,0,0,0,0,0,128,64,0,0,0,0,0,0,0,0,0,63,0,0,0,63,84,224,212,189,89,191,65,190,248,108,93,190,47,168,31,190,254,195,51,36,70,124,111,62,48,42,1,63,72,191,65,63,70,124,111,63,0,0,0,0,1,0,0,0,2,0,0,0,5,0,0,0,7,0,0,0,7,0,0,0,10,0,0,0,10,0,0,0,13,0,0,0,13,0,0,0,13,0,0,0,13,0,0,0,13,0,0,0,13,0,0,0,13,0,0,0,13,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,152,14,0,0,144,14,0,0,3,0,0,0,0,0,0,0,120,11,0,0,104,11,0,0,3,0,0,0,0,0,0,0,240,10,0,0,224,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,192,10,0,0,176,10,0,0,4,0,0,0,0,0,0,0,144,10,0,0,128,10,0,0,6,0,0,0,0,0,0,0,56,10,0,0,16,10,0,0,6,0,0,0,0,0,0,0,200,9,0,0,160,9,0,0,6,0,0,0,0,0,0,0,88,9,0,0,48,9,0,0,8,0,0,0,0,0,0,0,96,26,0,0,32,26,0,0,8,0,0,0,0,0,0,0,160,25,0,0,96,25,0,0,8,0,0,0,0,0,0,0,224,24,0,0,160,24,0,0,16,0,0,0,0,0,0,0,160,22,0,0,160,21,0,0,0,0,0,0,0,0,0,0,0,0,0,0,160,15,0,0,16,0,0,0,0,0,0,0,160,19,0,0,160,18,0,0,1,0,0,0,1,0,0,0,160,16,0,0,160,14,0,0,2,0,0,0,3,0,0,0,160,16,0,0,160,14,0,0,3,0,0,0,7,0,0,0,160,16,0,0,160,14,0,0,4,0,0,0,15,0,0,0,160,16,0,0,160,14,0,0,6,0,0,0,63,0,0,0,160,16,0,0,160,14,0,0,8,0,0,0,255,0,0,0,160,16,0,0,160,14,0,0,10,0,0,0,255,3,0,0,160,16,0,0,160,14,0,0,13,0,0,0,255,31,0,0,160,16,0,0,160,14,0,0,4,0,0,0,15,0,0,0,144,12,0,0,144,11,0,0,5,0,0,0,31,0,0,0,144,12,0,0,144,11,0,0,6,0,0,0,63,0,0,0,144,12,0,0,144,11,0,0,7,0,0,0,127,0,0,0,144,12,0,0,144,11,0,0,8,0,0,0,255,0,0,0,144,12,0,0,144,11,0,0,9,0,0,0,255,1,0,0,144,12,0,0,144,11,0,0,11,0,0,0,255,7,0,0,144,12,0,0,144,11,0,0,13,0,0,0,255,31,0,0,144,12,0,0,144,11,0,0,0,0,0,0,0,0,0,0,72,11,0,0,56,11,0,0,0,0,0,0,0,0,0,0,24,11,0,0,8,11,0,0,216,67,0,0,0,0,0,0,216,67,0,0,0,0,0,0,121,207,23,190,138,59,1,66,164,51,148,67,155,200,92,68,202,167,45,70,175,40,132,68,192,222,152,67,129,155,246,65,199,156,118,64,77,183,109,66,194,101,49,68,74,15,165,69,82,45,182,197,71,104,76,196,73,213,153,194,66,4,147,192,94,6,104,63,54,189,72,62,3,97,30,190,44,76,9,66,68,231,150,67,96,102,76,68,47,215,52,70,17,168,147,68,117,204,160,67,46,219,249,65,68,124,109,64,146,154,86,66,183,10,43,68,136,68,163,69,35,243,198,197,129,62,99,196,80,169,179,194,43,42,173,192,1,24,82,63,194,197,199,62,223,144,36,190,144,150,16,66,32,15,152,67,140,47,55,68,113,86,59,70,101,128,162,68,120,164,167,67,193,231,251,65,149,237,87,64,209,237,60,66,46,47,35,68,80,99,160,69,178,232,215,197,240,127,122,196,100,62,207,194,121,91,195,192,207,220,61,63,49,160,20,63,61,91,42,190,177,1,23,66,106,129,151,67,98,254,28,68,14,27,65,70,229,136,176,68,246,95,173,67,75,201,252,65,52,59,74,64,173,80,34,66,178,10,26,68,170,126,156,69,83,240,232,197,121,249,136,196,253,124,236,194,231,48,218,192,193,13,43,63,21,239,67,63,139,188,47,190,75,118,28,66,177,43,149,67,81,195,251,67,92,30,70,70,161,146,189,68,23,254,177,67,116,41,251,65,165,166,58,64,77,48,7,66,62,185,15,68,225,169,151,69,144,236,249,197,102,184,148,196,253,164,5,195,130,12,247,192,196,112,25,63,234,90,113,63,120,177,52,190,11,224,32,66,197,255,144,67,75,169,179,67,9,89,74,70,63,131,201,68,227,108,181,67,12,94,248,65,73,159,52,64,49,233,215,65,148,121,4,68,250,250,145,69,153,95,5,198,224,82,160,196,230,149,21,195,193,75,10,193,185,213,8,63,218,57,142,63,244,54,185,190,93,45,36,66,238,197,138,67,123,163,67,67,193,197,77,70,150,52,212,68,118,180,183,67,208,116,244,65,169,3,34,64,173,143,160,65,68,192,240,67,195,135,139,69,122,165,13,198,28,180,171,196,130,42,38,195,136,83,25,193,112,40,242,62,153,103,162,63,55,74,189,190,167,146,37,66,148,165,130,67,182,247,78,65,135,96,80,70,71,144,221,68,247,225,184,67,182,2,238,65,153,191,25,64,113,224,84,65,226,71,215,67,116,104,132,69,186,183,21,198,32,182,182,196,153,32,55,195,248,124,43,193,205,19,212,62,243,4,181,63,187,232,192,190,91,122,38,66,227,13,113,67,88,242,59,195,65,40,82,70,237,132,229,68,213,190,184,67,201,3,232,65,16,147,4,64,105,242,216,64,110,227,188,67,47,102,121,69,214,134,29,198,81,62,193,196,85,96,72,195,235,212,61,193,80,50,183,62,3,228,197,63,71,16,196,190,73,155,36,66,18,122,88,67,23,20,203,195,140,28,83,70,216,249,235,68,185,166,183,67,247,22,225,65,11,250,244,63,71,16,196,62,69,237,161,67,91,2,105,69,239,4,37,198,124,38,203,196,16,160,89,195,54,63,80,193,66,80,155,62,49,219,212,63,46,15,21,191,242,108,33,66,98,51,60,67,83,17,32,196,220,60,83,70,70,243,240,68,238,104,181,67,38,192,215,65,112,137,223,63,88,12,180,192,157,166,134,67,47,214,87,69,149,32,44,198,6,85,212,196,16,196,106,195,193,157,98,193,212,63,128,62,152,197,225,63,57,182,22,191,234,239,28,66,206,194,27,67,244,79,94,196,226,141,82,70,182,97,244,68,249,56,178,67,221,40,207,65,124,229,200,63,57,233,50,193,16,207,86,67,160,18,70,69,73,205,50,198,21,165,220,196,104,176,123,195,1,246,119,193,175,175,75,62,94,131,236,63,230,143,74,191,36,147,21,66,35,102,239,66,16,227,143,196,201,17,81,70,166,76,246,68,130,2,174,67,22,218,197,65,28,72,177,63,12,95,131,193,224,12,33,67,81,229,51,69,247,251,56,198,140,255,227,196,139,36,134,195,184,137,134,193,100,229,23,62,11,250,244,63,223,202,75,191,201,237,12,66,223,9,160,66,174,0,178,196,45,207,78,70,187,185,246,68,213,254,168,67,51,80,186,65,197,91,178,63,32,204,168,193,139,247,216,66,54,123,33,69,232,158,62,198,230,72,234,196,148,31,142,195,218,232,144,193,220,181,201,61,190,20,251,63,15,177,127,191,152,64,2,66,94,213,19,66,106,66,213,196,38,205,75,70,66,172,245,68,70,55,163,67,112,102,177,65,251,108,153,63,81,248,202,193,231,35,102,66,180,6,15,69,179,170,67,198,226,90,239,196,151,161,149,195,66,6,155,193,60,57,73,61,109,196,254,63,54,211,37,70,68,177,165,69,175,113,104,68,69,51,54,68,128,12,144,67,180,213,129,66,2,0,241,65,34,63,131,64,49,19,72,70,167,49,243,68,86,182,156,67,170,105,166,65,251,100,249,68,112,3,16,65,17,158,233,193,0,0,0,0,0,0,0,0,128,1,0,0,128,4,0,0,128,4,0,0,0,0,0,0,128,1,0,0,128,4,0,0,64,2,0,0,0,0,0,0,193,192,0,0,129,193,0,0,64,1,0,0,1,195,0,0,192,3,0,0,128,2,0,0,65,194,0,0,1,198,0,0,192,6,0,0,128,7,0,0,65,199,0,0,0,5,0,0,193,197,0,0,129,196,0,0,64,4,0,0,1,204,0,0,192,12,0,0,128,13,0,0,65,205,0,0,0,15,0,0,193,207,0,0,129,206,0,0,64,14,0,0,0,10,0,0,193,202,0,0,129,203,0,0,64,11,0,0,1,201,0,0,192,9,0,0,128,8,0,0,65,200,0,0,1,216,0,0,192,24,0,0,128,25,0,0,65,217,0,0,0,27,0,0,193,219,0,0,129,218,0,0,64,26,0,0,0,30,0,0,193,222,0,0,129,223,0,0,64,31,0,0,1,221,0,0,192,29,0,0,128,28,0,0,65,220,0,0,0,20,0,0,193,212,0,0,129,213,0,0,64,21,0,0,1,215,0,0,192,23,0,0,128,22,0,0,65,214,0,0,1,210,0,0,192,18,0,0,128,19,0,0,65,211,0,0,0,17,0,0,193,209,0,0,129,208,0,0,64,16,0,0,1,240,0,0,192,48,0,0,128,49,0,0,65,241,0,0,0,51,0,0,193,243,0,0,129,242,0,0,64,50,0,0,0,54,0,0,193,246,0,0,129,247,0,0,64,55,0,0,1,245,0,0,192,53,0,0,128,52,0,0,65,244,0,0,0,60,0,0,193,252,0,0,129,253,0,0,64,61,0,0,1,255,0,0,192,63,0,0,128,62,0,0,65,254,0,0,1,250,0,0,192,58,0,0,128,59,0,0,65,251,0,0,0,57,0,0,193,249,0,0,129,248,0,0,64,56,0,0,0,40,0,0,193,232,0,0,129,233,0,0,64,41,0,0,1,235,0,0,192,43,0,0,128,42,0,0,65,234,0,0,1,238,0,0,192,46,0,0,128,47,0,0,65,239,0,0,0,45,0,0,193,237,0,0,129,236,0,0,64,44,0,0,1,228,0,0,192,36,0,0,128,37,0,0,65,229,0,0,0,39,0,0,193,231,0,0,129,230,0,0,64,38,0,0,0,34,0,0,193,226,0,0,129,227,0,0,64,35,0,0,1,225,0,0,192,33,0,0,128,32,0,0,65,224,0,0,1,160,0,0,192,96,0,0,128,97,0,0,65,161,0,0,0,99,0,0,193,163,0,0,129,162,0,0,64,98,0,0,0,102,0,0,193,166,0,0,129,167,0,0,64,103,0,0,1,165,0,0,192,101,0,0,128,100,0,0,65,164,0,0,0,108,0,0,193,172,0,0,129,173,0,0,64,109,0,0,1,175,0,0,192,111,0,0,128,110,0,0,65,174,0,0,1,170,0,0,192,106,0,0,128,107,0,0,65,171,0,0,0,105,0,0,193,169,0,0,129,168,0,0,64,104,0,0,0,120,0,0,193,184,0,0,129,185,0,0,64,121,0,0,1,187,0,0,192,123,0,0,128,122,0,0,65,186,0,0,1,190,0,0,192,126,0,0,128,127,0,0,65,191,0,0,0,125,0,0,193,189,0,0,129,188,0,0,64,124,0,0,1,180,0,0,192,116,0,0,128,117,0,0,65,181,0,0,0,119,0,0,193,183,0,0,129,182,0,0,64,118,0,0,0,114,0,0,193,178,0,0,129,179,0,0,64,115,0,0,1,177,0,0,192,113,0,0,128,112,0,0,65,176,0,0,0,80,0,0,193,144,0,0,129,145,0,0,64,81,0,0,1,147,0,0,192,83,0,0,128,82,0,0,65,146,0,0,1,150,0,0,192,86,0,0,128,87,0,0,65,151,0,0,0,85,0,0,193,149,0,0,129,148,0,0,64,84,0,0,1,156,0,0,192,92,0,0,128,93,0,0,65,157,0,0,0,95,0,0,193,159,0,0,129,158,0,0,64,94,0,0,0,90,0,0,193,154,0,0,129,155,0,0,64,91,0,0,1,153,0,0,192,89,0,0,128,88,0,0,65,152,0,0,1,136,0,0,192,72,0,0,128,73,0,0,65,137,0,0,0,75,0,0,193,139,0,0,129,138,0,0,64,74,0,0,0,78,0,0,193,142,0,0,129,143,0,0,64,79,0,0,1,141,0,0,192,77,0,0,128,76,0,0,65,140,0,0,0,68,0,0,193,132,0,0,129,133,0,0,64,69,0,0,1,135,0,0,192,71,0,0,128,70,0,0,65,134,0,0,1,130,0,0,192,66,0,0,128,67,0,0,65,131,0,0,0,65,0,0,193,129,0,0,129,128,0,0,64,64,0,0,6,0,0,0,8,0,0,0,2,0,0,0,2,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,94,131,108,63,21,239,195,62,109,196,126,63,54,189,200,61,67,236,127,63,176,10,201,60,196,254,127,63,136,15,201,59,0,0,0,0,8,0,0,0,16,0,0,0,24,0,0,0,32,0,0,0,40,0,0,0,48,0,0,0,56,0,0,0,64,0,0,0,80,0,0,0,96,0,0,0,112,0,0,0,128,0,0,0,144,0,0,0,160,0,0,0,255,255,255,255,0,0,0,0,32,0,0,0,40,0,0,0,48,0,0,0,56,0,0,0,64,0,0,0,80,0,0,0,96,0,0,0,112,0,0,0,128,0,0,0,160,0,0,0,192,0,0,0,224,0,0,0,0,1,0,0,64,1,0,0,255,255,255,255,0,0,0,0,8,0,0,0,16,0,0,0,24,0,0,0,32,0,0,0,40,0,0,0,48,0,0,0,56,0,0,0,64,0,0,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,8,0,0,0,9,0,0,0,9,0,0,0,0,0,0,0,0,0,0,0,51,51,211,64,0,0,17,67,51,51,115,63,0,0,0,0,0,0,240,193,0,0,48,65,82,73,157,58,1,0,0,0,16,0,0,0,9,0,0,0,9,0,0,0,0,0,0,0,0,0,0,0,51,51,211,64,0,0,17,67,51,51,115,63,0,0,0,0,0,0,200,193,0,0,48,65,111,18,131,58,1,0,0,0,24,0,0,0,9,0,0,0,9,0,0,0,0,0,0,0,0,0,0,0,51,51,211,64,0,0,17,67,51,51,115,63,0,0,0,0,0,0,160,193,0,0,48,65,111,18,131,58,1,0,0,0,32,0,0,0,9,0,0,0,9,0,0,0,0,0,0,0,0,0,0,0,51,51,211,64,0,0,17,67,51,51,115,63,0,0,0,0,0,0,112,193,0,0,48,65,111,18,131,58,1,0,0,0,40,0,0,0,9,0,0,0,9,0,0,0,0,0,0,0,0,0,0,0,51,51,211,64,0,0,17,67,51,51,115,63,0,0,0,0,0,0,32,193,0,0,48,65,250,237,107,58,1,0,0,0,48,0,0,0,9,0,0,0,9,0,0,0,0,0,0,0,0,0,0,0,51,51,211,64,0,0,17,67,51,51,115,63,0,0,0,0,0,0,32,193,0,0,48,65,250,237,107,58,1,0,0,0,56,0,0,0,9,0,0,0,9,0,0,0,0,0,0,0,0,0,0,0,51,51,211,64,0,0,17,67,51,51,115,63,0,0,0,0,0,0,192,192,0,0,48,65,23,183,81,58,1,0,0,0,64,0,0,0,9,0,0,0,9,0,0,0,0,0,0,0,0,0,0,0,51,51,211,64,0,0,17,67,51,51,115,63,0,0,0,0,0,0,0,192,0,0,48,65,23,183,81,58,1,0,0,0,80,0,0,0,9,0,0,0,9,0,0,0,0,0,0,0,0,0,0,0,51,51,211,64,0,0,17,67,51,51,115,63,0,0,0,0,0,0,0,0,0,0,0,65,52,128,55,58,1,0,0,0,96,0,0,0,9,0,0,0,9,0,0,0,0,0,0,0,0,0,32,64,51,51,211,64,0,0,17,67,51,51,115,63,0,0,0,0,0,0,128,63,0,0,176,64,82,73,29,58,1,0,0,0,112,0,0,0,9,0,0,0,9,0,0,0,0,0,0,0,0,0,16,64,51,51,211,64,0,0,17,67,51,51,115,63,0,0,0,0,0,0,0,64,0,0,144,64,111,18,3,58,1,0,0,0,128,0,0,0,9,0,0,0,9,0,0,0,0,0,0,0,154,153,249,63,205,204,204,64,0,0,12,67,51,51,115,63,0,0,0,0,0,0,64,64,0,0,128,64,23,183,81,57,1,0,0,0,160,0,0,0,9,0,0,0,9,0,0,0,1,0,0,0,184,30,229,63,0,0,192,64,0,0,7,67,51,51,115,63,0,0,0,192,0,0,160,64,0,0,96,64,0,0,0,0,1,0,0,0,192,0,0,0,9,0,0,0,9,0,0,0,1,0,0,0,82,184,190,63,51,51,179,64,0,0,250,66,236,81,120,63,0,0,128,192,0,0,224,64,0,0,64,64,0,0,0,0,0,0,0,0,224,0,0,0,9,0,0,0,9,0,0,0,1,0,0,0,0,0,160,63,102,102,166,64,0,0,250,66,72,225,122,63,0,0,192,192,0,0,16,65,0,0,0,64,0,0,0,0,0,0,0,0,0,1,0,0,9,0,0,0,9,0,0,0,1,0,0,0,236,81,120,63,102,102,166,64,0,0,250,66,0,0,128,63,0,0,0,193,0,0,32,65,0,0,128,63,0,0,0,0,0,0,0,0,64,1,0,0,9,0,0,0,9,0,0,0,1,0,0,0,102,102,102,63,102,102,166,64,0,0,250,66,0,0,128,63,0,0,32,193,0,0,64,65,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,69,114,114,111,114,58,32,99,97,110,39,116,32,97,108,108,111,99,97,116,101,32,86,98,114,70,114,97,109,101,115,32,98,117,102,102,101,114,10,0,87,97,114,110,105,110,103,58,32,104,105,103,104,112,97,115,115,32,102,105,108,116,101,114,32,100,105,115,97,98,108,101,100,46,32,32,104,105,103,104,112,97,115,115,32,102,114,101,113,117,101,110,99,121,32,116,111,111,32,115,109,97,108,108,10,0,0,0,0,0,0,0,69,114,114,111,114,58,32,99,97,110,39,116,32,97,108,108,111,99,97,116,101,32,105,110,95,98,117,102,102,101,114,32,98,117,102,102,101,114,10,0,37,108,117,0,0,0,0,0,69,114,114,111,114,58,32,77,65,88,95,72,69,65,68,69,82,95,66,85,70,32,116,111,111,32,115,109,97,108,108,32,105,110,32,98,105,116,115,116,114,101,97,109,46,99,32,10,0,0,0,0,0,0,0,0,37,100,0,0,0,0,0,0,32,49,37,37,32,32,98,117,103,32,105,110,32,76,65,77,69,32,101,110,99,111,100,105,110,103,32,108,105,98,114,97,114,121,0,0,0,0,0,0,105,109,97,103,101,47,103,105,102,0,0,0,0,0,0,0,32,57,37,37,32,32,89,111,117,114,32,115,121,115,116,101,109,32,105,115,32,111,118,101,114,99,108,111,99,107,101,100,0,0,0,0,0,0,0,0,105,109,97,103,101,47,112,110,103,0,0,0,0,0,0,0,57,48,37,37,32,32,76,65,77,69,32,99,111,109,112,105,108,101,100,32,119,105,116,104,32,98,117,103,103,121,32,118,101,114,115,105,111,110,32,111,102,32,103,99,99,32,117,115,105,110,103,32,97,100,118,97,110,99,101,100,32,111,112,116,105,109,105,122,97,116,105,111,110,115,0,0,0,0,0,0,105,109,97,103,101,47,106,112,101,103,0,0,0,0,0,0,84,104,105,115,32,105,115,32,97,32,102,97,116,97,108,32,101,114,114,111,114,46,32,32,73,116,32,104,97,115,32,115,101,118,101,114,97,108,32,112,111,115,115,105,98,108,101,32,99,97,117,115,101,115,58,0,115,116,114,97,110,103,101,32,101,114,114,111,114,32,102,108,117,115,104,105,110,103,32,98,117,102,102,101,114,32,46,46,46,32,10,0,0,0,0,0,98,105,116,32,114,101,115,101,114,118,111,105,114,32,101,114,114,111,114,58,32,10,108,51,95,115,105,100,101,45,62,109,97,105,110,95,100,97,116,97,95,98,101,103,105,110,58,32,37,105,32,10,82,101,115,118,111,105,114,32,115,105,122,101,58,32,32,32,32,32,32,32,32,32,32,32,32,32,37,105,32,10,114,101,115,118,32,100,114,97,105,110,32,40,112,111,115,116,41,32,32,32,32,32,32,32,32,32,37,105,32,10,114,101,115,118,32,100,114,97,105,110,32,40,112,114,101,41,32,32,32,32,32,32,32,32,32,32,37,105,32,10,104,101,97,100,101,114,32,97,110,100,32,115,105,100,101,105,110,102,111,58,32,32,32,32,32,32,37,105,32,10,100,97,116,97,32,98,105,116,115,58,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,37,105,32,10,116,111,116,97,108,32,98,105,116,115,58,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,37,105,32,40,114,101,109,97,105,110,100,101,114,58,32,37,105,41,32,10,98,105,116,115,112,101,114,102,114,97,109,101,58,32,32,32,32,32,32,32,32,32,32,32,32,32,37,105,32,10,0,0,88,88,88,0,0,0,0,0,73,78,84,69,82,78,65,76,32,69,82,82,79,82,32,73,78,32,86,66,82,32,78,69,87,32,67,79,68,69,32,40,49,51,49,51,41,44,32,112,108,101,97,115,101,32,115,101,110,100,32,98,117,103,32,114,101,112,111,114,116,10,109,97,120,98,105,116,115,61,37,100,32,117,115,101,100,98,105,116,115,61,37,100,10,0,0,0,105,110,116,101,110,115,105,116,121,32,115,116,101,114,101,111,32,110,111,116,32,105,109,112,108,101,109,101,110,116,101,100,32,121,101,116,10,0,0,0,73,78,84,69,82,78,65,76,32,69,82,82,79,82,32,73,78,32,86,66,82,32,78,69,87,32,67,79,68,69,44,32,112,108,101,97,115,101,32,115,101,110,100,32,98,117,103,32,114,101,112,111,114,116,10,0,73,110,116,101,114,110,97,108,32,98,117,102,102,101,114,32,105,110,99,111,110,115,105,115,116,101,110,99,121,46,32,102,108,117,115,104,98,105,116,115,32,60,62,32,82,101,115,118,83,105,122,101,0,0,0,0,73,78,84,69,82,78,65,76,32,69,82,82,79,82,32,73,78,32,86,66,82,32,78,69,87,32,67,79,68,69,32,40,57,56,54,41,44,32,112,108,101,97,115,101,32,115,101,110,100,32,98,117,103,32,114,101,112,111,114,116,10,0,0,0,51,46,57,57,46,53,0,0,1,30,0,0,1,30,0,0,0,16,0,0,0,16,0,0,0,16,0,0,0,16,0,0,221,1,30,61,115,47,118,192,47,250,176,188,158,20,250,64,153,188,161,186,158,119,53,193,81,220,194,184,116,225,80,65,83,153,135,188,1,154,68,193,129,18,177,60,29,186,23,65,225,231,169,188,42,236,187,192,86,189,194,59,84,76,48,64,23,210,72,59,21,174,94,191,117,48,252,56,166,136,14,62,45,12,61,59,187,242,93,61,21,159,94,192,66,120,238,188,39,159,203,64,116,13,11,188,159,194,8,193,122,116,11,188,136,161,23,65,15,206,8,188,48,10,13,193,54,239,183,60,24,84,219,64,42,177,212,188,119,161,140,192,227,27,133,60,46,141,12,64,204,220,29,187,91,68,64,191,179,14,221,59,38,166,6,62,18,27,246,186,98,72,30,62,88,65,24,192,146,25,191,189,204,80,54,64,198,233,127,189,83,84,41,192,195,60,177,60,160,42,15,64,141,230,100,189,27,243,213,191,107,217,67,61,72,195,128,63,221,177,17,59,30,72,235,190,198,2,2,61,96,182,39,62,140,213,99,188,41,29,78,189,32,117,213,59,250,86,192,60,8,103,16,188,195,30,155,62,254,109,206,191,55,145,103,190,17,54,138,63,79,222,175,189,44,92,131,190,5,120,6,61,113,172,38,190,93,7,22,188,128,210,103,190,162,171,193,188,106,76,200,62,186,131,191,187,206,177,98,190,217,136,128,61,99,84,56,61,14,238,10,183,195,81,164,60,229,233,6,59,220,52,70,59,209,172,241,188,164,63,172,62,202,209,191,191,12,238,130,190,224,157,95,63,198,63,242,189,120,245,249,61,39,37,244,61,171,200,78,191,74,115,160,189,61,4,245,62,155,0,154,187,253,11,255,189,221,42,193,187,240,154,38,189,226,118,106,61,225,172,170,61,116,82,8,60,208,143,45,189,111,248,133,188,144,228,243,60,148,49,144,188,83,247,229,62,31,210,32,191,69,246,18,190,75,222,151,62,236,79,105,190,172,192,190,190,13,131,104,188,76,24,12,59,175,11,39,61,83,49,215,190,21,234,253,189,13,83,99,62,22,214,39,61,196,1,201,59,137,153,214,61,247,48,138,61,143,176,152,188,61,242,108,61,134,205,2,189,7,1,4,61,132,146,177,59,35,242,16,63,249,36,134,191,99,48,65,191,195,71,149,62,202,81,38,62,41,63,137,190,8,118,43,62,71,89,6,60,108,141,65,190,36,174,230,62,232,94,158,62,59,32,169,190,83,31,141,190,179,5,138,61,91,28,212,59,139,246,67,189,211,25,177,61,92,87,134,60,98,50,27,189,45,15,148,60,22,191,192,187,190,188,20,63,131,166,2,191,181,32,8,191,54,36,163,190,218,83,18,190,249,108,79,190,122,105,51,62,249,208,22,62,32,205,194,60,1,112,199,62,138,81,31,62,88,186,110,190,236,195,129,190,127,224,86,189,85,103,133,60,212,73,205,188,47,187,141,61,242,19,200,60,237,111,24,189,6,255,148,60,149,162,245,187,69,87,9,63,94,65,128,190,239,223,215,190,42,39,221,190,85,217,52,187,98,70,12,189,146,207,46,61,213,159,63,189,79,51,209,189,227,53,135,62,214,104,21,62,42,194,26,62,27,131,201,188,75,199,51,190,101,108,229,189,100,191,64,190,139,76,38,189,16,94,96,61,204,36,68,61,80,177,64,61,130,177,181,188,0,0,0,0,98,120,124,63,40,114,252,191,98,120,252,191,59,253,120,63,98,120,124,63,19,41,124,63,180,33,252,191,19,41,252,191,229,96,120,63,19,41,124,63,66,185,122,63,86,171,250,191,66,185,250,191,92,142,117,63,66,185,122,63,120,174,121,63,129,154,249,191,120,174,249,191,222,132,115,63,120,174,121,63,91,33,121,63,194,9,249,191,91,33,249,191,234,113,114,63,91,33,121,63,110,236,118,63,58,195,246,191,110,236,246,191,69,43,110,63,110,236,118,63,141,200,117,63,87,148,245,191,141,200,245,191,134,249,107,63,141,200,117,63,202,100,117,63,133,44,245,191,202,100,245,191,31,58,107,63,202,100,117,63,138,43,114,63,214,203,241,191,138,43,242,191,124,22,101,63,138,43,114,63,0,0,0,0], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+10240);



var tempDoublePtr = Runtime.alignMemory(allocate(12, "i8", ALLOC_STATIC), 8);

assert(tempDoublePtr % 8 == 0);

function copyTempFloat(ptr) { // functions, because inlining this code increases code size too much

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

}

function copyTempDouble(ptr) {

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

  HEAP8[tempDoublePtr+4] = HEAP8[ptr+4];

  HEAP8[tempDoublePtr+5] = HEAP8[ptr+5];

  HEAP8[tempDoublePtr+6] = HEAP8[ptr+6];

  HEAP8[tempDoublePtr+7] = HEAP8[ptr+7];

}


  var _llvm_pow_f64=Math_pow;

  var _llvm_pow_f32=Math_pow;

  
   
  Module["_memset"] = _memset;var _llvm_memset_p0i8_i32=_memset;

  var _fabs=Math_abs;

  
   
  Module["_memcpy"] = _memcpy;var _llvm_memcpy_p0i8_p0i8_i32=_memcpy;

  function _log10(x) {
      return Math.log(x) / Math.LN10;
    }

  var _atan=Math_atan;

  
  
  
  
  var ERRNO_CODES={EPERM:1,ENOENT:2,ESRCH:3,EINTR:4,EIO:5,ENXIO:6,E2BIG:7,ENOEXEC:8,EBADF:9,ECHILD:10,EAGAIN:11,EWOULDBLOCK:11,ENOMEM:12,EACCES:13,EFAULT:14,ENOTBLK:15,EBUSY:16,EEXIST:17,EXDEV:18,ENODEV:19,ENOTDIR:20,EISDIR:21,EINVAL:22,ENFILE:23,EMFILE:24,ENOTTY:25,ETXTBSY:26,EFBIG:27,ENOSPC:28,ESPIPE:29,EROFS:30,EMLINK:31,EPIPE:32,EDOM:33,ERANGE:34,ENOMSG:42,EIDRM:43,ECHRNG:44,EL2NSYNC:45,EL3HLT:46,EL3RST:47,ELNRNG:48,EUNATCH:49,ENOCSI:50,EL2HLT:51,EDEADLK:35,ENOLCK:37,EBADE:52,EBADR:53,EXFULL:54,ENOANO:55,EBADRQC:56,EBADSLT:57,EDEADLOCK:35,EBFONT:59,ENOSTR:60,ENODATA:61,ETIME:62,ENOSR:63,ENONET:64,ENOPKG:65,EREMOTE:66,ENOLINK:67,EADV:68,ESRMNT:69,ECOMM:70,EPROTO:71,EMULTIHOP:72,EDOTDOT:73,EBADMSG:74,ENOTUNIQ:76,EBADFD:77,EREMCHG:78,ELIBACC:79,ELIBBAD:80,ELIBSCN:81,ELIBMAX:82,ELIBEXEC:83,ENOSYS:38,ENOTEMPTY:39,ENAMETOOLONG:36,ELOOP:40,EOPNOTSUPP:95,EPFNOSUPPORT:96,ECONNRESET:104,ENOBUFS:105,EAFNOSUPPORT:97,EPROTOTYPE:91,ENOTSOCK:88,ENOPROTOOPT:92,ESHUTDOWN:108,ECONNREFUSED:111,EADDRINUSE:98,ECONNABORTED:103,ENETUNREACH:101,ENETDOWN:100,ETIMEDOUT:110,EHOSTDOWN:112,EHOSTUNREACH:113,EINPROGRESS:115,EALREADY:114,EDESTADDRREQ:89,EMSGSIZE:90,EPROTONOSUPPORT:93,ESOCKTNOSUPPORT:94,EADDRNOTAVAIL:99,ENETRESET:102,EISCONN:106,ENOTCONN:107,ETOOMANYREFS:109,EUSERS:87,EDQUOT:122,ESTALE:116,ENOTSUP:95,ENOMEDIUM:123,EILSEQ:84,EOVERFLOW:75,ECANCELED:125,ENOTRECOVERABLE:131,EOWNERDEAD:130,ESTRPIPE:86};
  
  var ERRNO_MESSAGES={0:"Success",1:"Not super-user",2:"No such file or directory",3:"No such process",4:"Interrupted system call",5:"I/O error",6:"No such device or address",7:"Arg list too long",8:"Exec format error",9:"Bad file number",10:"No children",11:"No more processes",12:"Not enough core",13:"Permission denied",14:"Bad address",15:"Block device required",16:"Mount device busy",17:"File exists",18:"Cross-device link",19:"No such device",20:"Not a directory",21:"Is a directory",22:"Invalid argument",23:"Too many open files in system",24:"Too many open files",25:"Not a typewriter",26:"Text file busy",27:"File too large",28:"No space left on device",29:"Illegal seek",30:"Read only file system",31:"Too many links",32:"Broken pipe",33:"Math arg out of domain of func",34:"Math result not representable",35:"File locking deadlock error",36:"File or path name too long",37:"No record locks available",38:"Function not implemented",39:"Directory not empty",40:"Too many symbolic links",42:"No message of desired type",43:"Identifier removed",44:"Channel number out of range",45:"Level 2 not synchronized",46:"Level 3 halted",47:"Level 3 reset",48:"Link number out of range",49:"Protocol driver not attached",50:"No CSI structure available",51:"Level 2 halted",52:"Invalid exchange",53:"Invalid request descriptor",54:"Exchange full",55:"No anode",56:"Invalid request code",57:"Invalid slot",59:"Bad font file fmt",60:"Device not a stream",61:"No data (for no delay io)",62:"Timer expired",63:"Out of streams resources",64:"Machine is not on the network",65:"Package not installed",66:"The object is remote",67:"The link has been severed",68:"Advertise error",69:"Srmount error",70:"Communication error on send",71:"Protocol error",72:"Multihop attempted",73:"Cross mount point (not really error)",74:"Trying to read unreadable message",75:"Value too large for defined data type",76:"Given log. name not unique",77:"f.d. invalid for this operation",78:"Remote address changed",79:"Can   access a needed shared lib",80:"Accessing a corrupted shared lib",81:".lib section in a.out corrupted",82:"Attempting to link in too many libs",83:"Attempting to exec a shared library",84:"Illegal byte sequence",86:"Streams pipe error",87:"Too many users",88:"Socket operation on non-socket",89:"Destination address required",90:"Message too long",91:"Protocol wrong type for socket",92:"Protocol not available",93:"Unknown protocol",94:"Socket type not supported",95:"Not supported",96:"Protocol family not supported",97:"Address family not supported by protocol family",98:"Address already in use",99:"Address not available",100:"Network interface is not configured",101:"Network is unreachable",102:"Connection reset by network",103:"Connection aborted",104:"Connection reset by peer",105:"No buffer space available",106:"Socket is already connected",107:"Socket is not connected",108:"Can't send after socket shutdown",109:"Too many references",110:"Connection timed out",111:"Connection refused",112:"Host is down",113:"Host is unreachable",114:"Socket already connected",115:"Connection already in progress",116:"Stale file handle",122:"Quota exceeded",123:"No medium (in tape drive)",125:"Operation canceled",130:"Previous owner died",131:"State not recoverable"};
  
  
  var ___errno_state=0;function ___setErrNo(value) {
      // For convenient setting and returning of errno.
      HEAP32[((___errno_state)>>2)]=value;
      return value;
    }
  
  var PATH={splitPath:function (filename) {
        var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
        return splitPathRe.exec(filename).slice(1);
      },normalizeArray:function (parts, allowAboveRoot) {
        // if the path tries to go above the root, `up` ends up > 0
        var up = 0;
        for (var i = parts.length - 1; i >= 0; i--) {
          var last = parts[i];
          if (last === '.') {
            parts.splice(i, 1);
          } else if (last === '..') {
            parts.splice(i, 1);
            up++;
          } else if (up) {
            parts.splice(i, 1);
            up--;
          }
        }
        // if the path is allowed to go above the root, restore leading ..s
        if (allowAboveRoot) {
          for (; up--; up) {
            parts.unshift('..');
          }
        }
        return parts;
      },normalize:function (path) {
        var isAbsolute = path.charAt(0) === '/',
            trailingSlash = path.substr(-1) === '/';
        // Normalize the path
        path = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), !isAbsolute).join('/');
        if (!path && !isAbsolute) {
          path = '.';
        }
        if (path && trailingSlash) {
          path += '/';
        }
        return (isAbsolute ? '/' : '') + path;
      },dirname:function (path) {
        var result = PATH.splitPath(path),
            root = result[0],
            dir = result[1];
        if (!root && !dir) {
          // No dirname whatsoever
          return '.';
        }
        if (dir) {
          // It has a dirname, strip trailing slash
          dir = dir.substr(0, dir.length - 1);
        }
        return root + dir;
      },basename:function (path) {
        // EMSCRIPTEN return '/'' for '/', not an empty string
        if (path === '/') return '/';
        var lastSlash = path.lastIndexOf('/');
        if (lastSlash === -1) return path;
        return path.substr(lastSlash+1);
      },extname:function (path) {
        return PATH.splitPath(path)[3];
      },join:function () {
        var paths = Array.prototype.slice.call(arguments, 0);
        return PATH.normalize(paths.join('/'));
      },join2:function (l, r) {
        return PATH.normalize(l + '/' + r);
      },resolve:function () {
        var resolvedPath = '',
          resolvedAbsolute = false;
        for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
          var path = (i >= 0) ? arguments[i] : FS.cwd();
          // Skip empty and invalid entries
          if (typeof path !== 'string') {
            throw new TypeError('Arguments to path.resolve must be strings');
          } else if (!path) {
            continue;
          }
          resolvedPath = path + '/' + resolvedPath;
          resolvedAbsolute = path.charAt(0) === '/';
        }
        // At this point the path should be resolved to a full absolute path, but
        // handle relative paths to be safe (might happen when process.cwd() fails)
        resolvedPath = PATH.normalizeArray(resolvedPath.split('/').filter(function(p) {
          return !!p;
        }), !resolvedAbsolute).join('/');
        return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
      },relative:function (from, to) {
        from = PATH.resolve(from).substr(1);
        to = PATH.resolve(to).substr(1);
        function trim(arr) {
          var start = 0;
          for (; start < arr.length; start++) {
            if (arr[start] !== '') break;
          }
          var end = arr.length - 1;
          for (; end >= 0; end--) {
            if (arr[end] !== '') break;
          }
          if (start > end) return [];
          return arr.slice(start, end - start + 1);
        }
        var fromParts = trim(from.split('/'));
        var toParts = trim(to.split('/'));
        var length = Math.min(fromParts.length, toParts.length);
        var samePartsLength = length;
        for (var i = 0; i < length; i++) {
          if (fromParts[i] !== toParts[i]) {
            samePartsLength = i;
            break;
          }
        }
        var outputParts = [];
        for (var i = samePartsLength; i < fromParts.length; i++) {
          outputParts.push('..');
        }
        outputParts = outputParts.concat(toParts.slice(samePartsLength));
        return outputParts.join('/');
      }};
  
  var TTY={ttys:[],init:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // currently, FS.init does not distinguish if process.stdin is a file or TTY
        //   // device, it always assumes it's a TTY device. because of this, we're forcing
        //   // process.stdin to UTF8 encoding to at least make stdin reading compatible
        //   // with text files until FS.init can be refactored.
        //   process['stdin']['setEncoding']('utf8');
        // }
      },shutdown:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // inolen: any idea as to why node -e 'process.stdin.read()' wouldn't exit immediately (with process.stdin being a tty)?
        //   // isaacs: because now it's reading from the stream, you've expressed interest in it, so that read() kicks off a _read() which creates a ReadReq operation
        //   // inolen: I thought read() in that case was a synchronous operation that just grabbed some amount of buffered data if it exists?
        //   // isaacs: it is. but it also triggers a _read() call, which calls readStart() on the handle
        //   // isaacs: do process.stdin.pause() and i'd think it'd probably close the pending call
        //   process['stdin']['pause']();
        // }
      },register:function (dev, ops) {
        TTY.ttys[dev] = { input: [], output: [], ops: ops };
        FS.registerDevice(dev, TTY.stream_ops);
      },stream_ops:{open:function (stream) {
          var tty = TTY.ttys[stream.node.rdev];
          if (!tty) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          stream.tty = tty;
          stream.seekable = false;
        },close:function (stream) {
          // flush any pending line data
          if (stream.tty.output.length) {
            stream.tty.ops.put_char(stream.tty, 10);
          }
        },read:function (stream, buffer, offset, length, pos /* ignored */) {
          if (!stream.tty || !stream.tty.ops.get_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          var bytesRead = 0;
          for (var i = 0; i < length; i++) {
            var result;
            try {
              result = stream.tty.ops.get_char(stream.tty);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            if (result === undefined && bytesRead === 0) {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
            if (result === null || result === undefined) break;
            bytesRead++;
            buffer[offset+i] = result;
          }
          if (bytesRead) {
            stream.node.timestamp = Date.now();
          }
          return bytesRead;
        },write:function (stream, buffer, offset, length, pos) {
          if (!stream.tty || !stream.tty.ops.put_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          for (var i = 0; i < length; i++) {
            try {
              stream.tty.ops.put_char(stream.tty, buffer[offset+i]);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
          }
          if (length) {
            stream.node.timestamp = Date.now();
          }
          return i;
        }},default_tty_ops:{get_char:function (tty) {
          if (!tty.input.length) {
            var result = null;
            if (ENVIRONMENT_IS_NODE) {
              result = process['stdin']['read']();
              if (!result) {
                if (process['stdin']['_readableState'] && process['stdin']['_readableState']['ended']) {
                  return null;  // EOF
                }
                return undefined;  // no data available
              }
            } else if (typeof window != 'undefined' &&
              typeof window.prompt == 'function') {
              // Browser.
              result = window.prompt('Input: ');  // returns null on cancel
              if (result !== null) {
                result += '\n';
              }
            } else if (typeof readline == 'function') {
              // Command line.
              result = readline();
              if (result !== null) {
                result += '\n';
              }
            }
            if (!result) {
              return null;
            }
            tty.input = intArrayFromString(result, true);
          }
          return tty.input.shift();
        },put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['print'](tty.output.join(''));
            tty.output = [];
          } else {
            tty.output.push(TTY.utf8.processCChar(val));
          }
        }},default_tty1_ops:{put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['printErr'](tty.output.join(''));
            tty.output = [];
          } else {
            tty.output.push(TTY.utf8.processCChar(val));
          }
        }}};
  
  var MEMFS={ops_table:null,CONTENT_OWNING:1,CONTENT_FLEXIBLE:2,CONTENT_FIXED:3,mount:function (mount) {
        return MEMFS.createNode(null, '/', 16384 | 0777, 0);
      },createNode:function (parent, name, mode, dev) {
        if (FS.isBlkdev(mode) || FS.isFIFO(mode)) {
          // no supported
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (!MEMFS.ops_table) {
          MEMFS.ops_table = {
            dir: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                lookup: MEMFS.node_ops.lookup,
                mknod: MEMFS.node_ops.mknod,
                mknod: MEMFS.node_ops.mknod,
                rename: MEMFS.node_ops.rename,
                unlink: MEMFS.node_ops.unlink,
                rmdir: MEMFS.node_ops.rmdir,
                readdir: MEMFS.node_ops.readdir,
                symlink: MEMFS.node_ops.symlink
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek
              }
            },
            file: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek,
                read: MEMFS.stream_ops.read,
                write: MEMFS.stream_ops.write,
                allocate: MEMFS.stream_ops.allocate,
                mmap: MEMFS.stream_ops.mmap
              }
            },
            link: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                readlink: MEMFS.node_ops.readlink
              },
              stream: {}
            },
            chrdev: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: FS.chrdev_stream_ops
            },
          };
        }
        var node = FS.createNode(parent, name, mode, dev);
        if (FS.isDir(node.mode)) {
          node.node_ops = MEMFS.ops_table.dir.node;
          node.stream_ops = MEMFS.ops_table.dir.stream;
          node.contents = {};
        } else if (FS.isFile(node.mode)) {
          node.node_ops = MEMFS.ops_table.file.node;
          node.stream_ops = MEMFS.ops_table.file.stream;
          node.contents = [];
          node.contentMode = MEMFS.CONTENT_FLEXIBLE;
        } else if (FS.isLink(node.mode)) {
          node.node_ops = MEMFS.ops_table.link.node;
          node.stream_ops = MEMFS.ops_table.link.stream;
        } else if (FS.isChrdev(node.mode)) {
          node.node_ops = MEMFS.ops_table.chrdev.node;
          node.stream_ops = MEMFS.ops_table.chrdev.stream;
        }
        node.timestamp = Date.now();
        // add the new node to the parent
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },ensureFlexible:function (node) {
        if (node.contentMode !== MEMFS.CONTENT_FLEXIBLE) {
          var contents = node.contents;
          node.contents = Array.prototype.slice.call(contents);
          node.contentMode = MEMFS.CONTENT_FLEXIBLE;
        }
      },node_ops:{getattr:function (node) {
          var attr = {};
          // device numbers reuse inode numbers.
          attr.dev = FS.isChrdev(node.mode) ? node.id : 1;
          attr.ino = node.id;
          attr.mode = node.mode;
          attr.nlink = 1;
          attr.uid = 0;
          attr.gid = 0;
          attr.rdev = node.rdev;
          if (FS.isDir(node.mode)) {
            attr.size = 4096;
          } else if (FS.isFile(node.mode)) {
            attr.size = node.contents.length;
          } else if (FS.isLink(node.mode)) {
            attr.size = node.link.length;
          } else {
            attr.size = 0;
          }
          attr.atime = new Date(node.timestamp);
          attr.mtime = new Date(node.timestamp);
          attr.ctime = new Date(node.timestamp);
          // NOTE: In our implementation, st_blocks = Math.ceil(st_size/st_blksize),
          //       but this is not required by the standard.
          attr.blksize = 4096;
          attr.blocks = Math.ceil(attr.size / attr.blksize);
          return attr;
        },setattr:function (node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
          if (attr.size !== undefined) {
            MEMFS.ensureFlexible(node);
            var contents = node.contents;
            if (attr.size < contents.length) contents.length = attr.size;
            else while (attr.size > contents.length) contents.push(0);
          }
        },lookup:function (parent, name) {
          throw FS.genericErrors[ERRNO_CODES.ENOENT];
        },mknod:function (parent, name, mode, dev) {
          return MEMFS.createNode(parent, name, mode, dev);
        },rename:function (old_node, new_dir, new_name) {
          // if we're overwriting a directory at new_name, make sure it's empty.
          if (FS.isDir(old_node.mode)) {
            var new_node;
            try {
              new_node = FS.lookupNode(new_dir, new_name);
            } catch (e) {
            }
            if (new_node) {
              for (var i in new_node.contents) {
                throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
              }
            }
          }
          // do the internal rewiring
          delete old_node.parent.contents[old_node.name];
          old_node.name = new_name;
          new_dir.contents[new_name] = old_node;
          old_node.parent = new_dir;
        },unlink:function (parent, name) {
          delete parent.contents[name];
        },rmdir:function (parent, name) {
          var node = FS.lookupNode(parent, name);
          for (var i in node.contents) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
          }
          delete parent.contents[name];
        },readdir:function (node) {
          var entries = ['.', '..']
          for (var key in node.contents) {
            if (!node.contents.hasOwnProperty(key)) {
              continue;
            }
            entries.push(key);
          }
          return entries;
        },symlink:function (parent, newname, oldpath) {
          var node = MEMFS.createNode(parent, newname, 0777 | 40960, 0);
          node.link = oldpath;
          return node;
        },readlink:function (node) {
          if (!FS.isLink(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return node.link;
        }},stream_ops:{read:function (stream, buffer, offset, length, position) {
          var contents = stream.node.contents;
          if (position >= contents.length)
            return 0;
          var size = Math.min(contents.length - position, length);
          assert(size >= 0);
          if (size > 8 && contents.subarray) { // non-trivial, and typed array
            buffer.set(contents.subarray(position, position + size), offset);
          } else
          {
            for (var i = 0; i < size; i++) {
              buffer[offset + i] = contents[position + i];
            }
          }
          return size;
        },write:function (stream, buffer, offset, length, position, canOwn) {
          var node = stream.node;
          node.timestamp = Date.now();
          var contents = node.contents;
          if (length && contents.length === 0 && position === 0 && buffer.subarray) {
            // just replace it with the new data
            if (canOwn && offset === 0) {
              node.contents = buffer; // this could be a subarray of Emscripten HEAP, or allocated from some other source.
              node.contentMode = (buffer.buffer === HEAP8.buffer) ? MEMFS.CONTENT_OWNING : MEMFS.CONTENT_FIXED;
            } else {
              node.contents = new Uint8Array(buffer.subarray(offset, offset+length));
              node.contentMode = MEMFS.CONTENT_FIXED;
            }
            return length;
          }
          MEMFS.ensureFlexible(node);
          var contents = node.contents;
          while (contents.length < position) contents.push(0);
          for (var i = 0; i < length; i++) {
            contents[position + i] = buffer[offset + i];
          }
          return length;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.contents.length;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          stream.ungotten = [];
          stream.position = position;
          return position;
        },allocate:function (stream, offset, length) {
          MEMFS.ensureFlexible(stream.node);
          var contents = stream.node.contents;
          var limit = offset + length;
          while (limit > contents.length) contents.push(0);
        },mmap:function (stream, buffer, offset, length, position, prot, flags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          var ptr;
          var allocated;
          var contents = stream.node.contents;
          // Only make a new copy when MAP_PRIVATE is specified.
          if ( !(flags & 2) &&
                (contents.buffer === buffer || contents.buffer === buffer.buffer) ) {
            // We can't emulate MAP_SHARED when the file is not backed by the buffer
            // we're mapping to (e.g. the HEAP buffer).
            allocated = false;
            ptr = contents.byteOffset;
          } else {
            // Try to avoid unnecessary slices.
            if (position > 0 || position + length < contents.length) {
              if (contents.subarray) {
                contents = contents.subarray(position, position + length);
              } else {
                contents = Array.prototype.slice.call(contents, position, position + length);
              }
            }
            allocated = true;
            ptr = _malloc(length);
            if (!ptr) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOMEM);
            }
            buffer.set(contents, ptr);
          }
          return { ptr: ptr, allocated: allocated };
        }}};
  
  var IDBFS={dbs:{},indexedDB:function () {
        return window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
      },DB_VERSION:20,DB_STORE_NAME:"FILE_DATA",mount:function (mount) {
        return MEMFS.mount.apply(null, arguments);
      },syncfs:function (mount, populate, callback) {
        IDBFS.getLocalSet(mount, function(err, local) {
          if (err) return callback(err);
  
          IDBFS.getRemoteSet(mount, function(err, remote) {
            if (err) return callback(err);
  
            var src = populate ? remote : local;
            var dst = populate ? local : remote;
  
            IDBFS.reconcile(src, dst, callback);
          });
        });
      },reconcile:function (src, dst, callback) {
        var total = 0;
  
        var create = {};
        for (var key in src.files) {
          if (!src.files.hasOwnProperty(key)) continue;
          var e = src.files[key];
          var e2 = dst.files[key];
          if (!e2 || e.timestamp > e2.timestamp) {
            create[key] = e;
            total++;
          }
        }
  
        var remove = {};
        for (var key in dst.files) {
          if (!dst.files.hasOwnProperty(key)) continue;
          var e = dst.files[key];
          var e2 = src.files[key];
          if (!e2) {
            remove[key] = e;
            total++;
          }
        }
  
        if (!total) {
          // early out
          return callback(null);
        }
  
        var completed = 0;
        function done(err) {
          if (err) return callback(err);
          if (++completed >= total) {
            return callback(null);
          }
        };
  
        // create a single transaction to handle and IDB reads / writes we'll need to do
        var db = src.type === 'remote' ? src.db : dst.db;
        var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readwrite');
        transaction.onerror = function transaction_onerror() { callback(this.error); };
        var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
  
        for (var path in create) {
          if (!create.hasOwnProperty(path)) continue;
          var entry = create[path];
  
          if (dst.type === 'local') {
            // save file to local
            try {
              if (FS.isDir(entry.mode)) {
                FS.mkdir(path, entry.mode);
              } else if (FS.isFile(entry.mode)) {
                var stream = FS.open(path, 'w+', 0666);
                FS.write(stream, entry.contents, 0, entry.contents.length, 0, true /* canOwn */);
                FS.close(stream);
              }
              done(null);
            } catch (e) {
              return done(e);
            }
          } else {
            // save file to IDB
            var req = store.put(entry, path);
            req.onsuccess = function req_onsuccess() { done(null); };
            req.onerror = function req_onerror() { done(this.error); };
          }
        }
  
        for (var path in remove) {
          if (!remove.hasOwnProperty(path)) continue;
          var entry = remove[path];
  
          if (dst.type === 'local') {
            // delete file from local
            try {
              if (FS.isDir(entry.mode)) {
                // TODO recursive delete?
                FS.rmdir(path);
              } else if (FS.isFile(entry.mode)) {
                FS.unlink(path);
              }
              done(null);
            } catch (e) {
              return done(e);
            }
          } else {
            // delete file from IDB
            var req = store.delete(path);
            req.onsuccess = function req_onsuccess() { done(null); };
            req.onerror = function req_onerror() { done(this.error); };
          }
        }
      },getLocalSet:function (mount, callback) {
        var files = {};
  
        function isRealDir(p) {
          return p !== '.' && p !== '..';
        };
        function toAbsolute(root) {
          return function(p) {
            return PATH.join2(root, p);
          }
        };
  
        var check = FS.readdir(mount.mountpoint)
          .filter(isRealDir)
          .map(toAbsolute(mount.mountpoint));
  
        while (check.length) {
          var path = check.pop();
          var stat, node;
  
          try {
            var lookup = FS.lookupPath(path);
            node = lookup.node;
            stat = FS.stat(path);
          } catch (e) {
            return callback(e);
          }
  
          if (FS.isDir(stat.mode)) {
            check.push.apply(check, FS.readdir(path)
              .filter(isRealDir)
              .map(toAbsolute(path)));
  
            files[path] = { mode: stat.mode, timestamp: stat.mtime };
          } else if (FS.isFile(stat.mode)) {
            files[path] = { contents: node.contents, mode: stat.mode, timestamp: stat.mtime };
          } else {
            return callback(new Error('node type not supported'));
          }
        }
  
        return callback(null, { type: 'local', files: files });
      },getDB:function (name, callback) {
        // look it up in the cache
        var db = IDBFS.dbs[name];
        if (db) {
          return callback(null, db);
        }
        var req;
        try {
          req = IDBFS.indexedDB().open(name, IDBFS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        req.onupgradeneeded = function req_onupgradeneeded() {
          db = req.result;
          db.createObjectStore(IDBFS.DB_STORE_NAME);
        };
        req.onsuccess = function req_onsuccess() {
          db = req.result;
          // add to the cache
          IDBFS.dbs[name] = db;
          callback(null, db);
        };
        req.onerror = function req_onerror() {
          callback(this.error);
        };
      },getRemoteSet:function (mount, callback) {
        var files = {};
  
        IDBFS.getDB(mount.mountpoint, function(err, db) {
          if (err) return callback(err);
  
          var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readonly');
          transaction.onerror = function transaction_onerror() { callback(this.error); };
  
          var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
          store.openCursor().onsuccess = function store_openCursor_onsuccess(event) {
            var cursor = event.target.result;
            if (!cursor) {
              return callback(null, { type: 'remote', db: db, files: files });
            }
  
            files[cursor.key] = cursor.value;
            cursor.continue();
          };
        });
      }};
  
  var NODEFS={isWindows:false,staticInit:function () {
        NODEFS.isWindows = !!process.platform.match(/^win/);
      },mount:function (mount) {
        assert(ENVIRONMENT_IS_NODE);
        return NODEFS.createNode(null, '/', NODEFS.getMode(mount.opts.root), 0);
      },createNode:function (parent, name, mode, dev) {
        if (!FS.isDir(mode) && !FS.isFile(mode) && !FS.isLink(mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node = FS.createNode(parent, name, mode);
        node.node_ops = NODEFS.node_ops;
        node.stream_ops = NODEFS.stream_ops;
        return node;
      },getMode:function (path) {
        var stat;
        try {
          stat = fs.lstatSync(path);
          if (NODEFS.isWindows) {
            // On Windows, directories return permission bits 'rw-rw-rw-', even though they have 'rwxrwxrwx', so 
            // propagate write bits to execute bits.
            stat.mode = stat.mode | ((stat.mode & 146) >> 1);
          }
        } catch (e) {
          if (!e.code) throw e;
          throw new FS.ErrnoError(ERRNO_CODES[e.code]);
        }
        return stat.mode;
      },realPath:function (node) {
        var parts = [];
        while (node.parent !== node) {
          parts.push(node.name);
          node = node.parent;
        }
        parts.push(node.mount.opts.root);
        parts.reverse();
        return PATH.join.apply(null, parts);
      },flagsToPermissionStringMap:{0:"r",1:"r+",2:"r+",64:"r",65:"r+",66:"r+",129:"rx+",193:"rx+",514:"w+",577:"w",578:"w+",705:"wx",706:"wx+",1024:"a",1025:"a",1026:"a+",1089:"a",1090:"a+",1153:"ax",1154:"ax+",1217:"ax",1218:"ax+",4096:"rs",4098:"rs+"},flagsToPermissionString:function (flags) {
        if (flags in NODEFS.flagsToPermissionStringMap) {
          return NODEFS.flagsToPermissionStringMap[flags];
        } else {
          return flags;
        }
      },node_ops:{getattr:function (node) {
          var path = NODEFS.realPath(node);
          var stat;
          try {
            stat = fs.lstatSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          // node.js v0.10.20 doesn't report blksize and blocks on Windows. Fake them with default blksize of 4096.
          // See http://support.microsoft.com/kb/140365
          if (NODEFS.isWindows && !stat.blksize) {
            stat.blksize = 4096;
          }
          if (NODEFS.isWindows && !stat.blocks) {
            stat.blocks = (stat.size+stat.blksize-1)/stat.blksize|0;
          }
          return {
            dev: stat.dev,
            ino: stat.ino,
            mode: stat.mode,
            nlink: stat.nlink,
            uid: stat.uid,
            gid: stat.gid,
            rdev: stat.rdev,
            size: stat.size,
            atime: stat.atime,
            mtime: stat.mtime,
            ctime: stat.ctime,
            blksize: stat.blksize,
            blocks: stat.blocks
          };
        },setattr:function (node, attr) {
          var path = NODEFS.realPath(node);
          try {
            if (attr.mode !== undefined) {
              fs.chmodSync(path, attr.mode);
              // update the common node structure mode as well
              node.mode = attr.mode;
            }
            if (attr.timestamp !== undefined) {
              var date = new Date(attr.timestamp);
              fs.utimesSync(path, date, date);
            }
            if (attr.size !== undefined) {
              fs.truncateSync(path, attr.size);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },lookup:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          var mode = NODEFS.getMode(path);
          return NODEFS.createNode(parent, name, mode);
        },mknod:function (parent, name, mode, dev) {
          var node = NODEFS.createNode(parent, name, mode, dev);
          // create the backing node for this in the fs root as well
          var path = NODEFS.realPath(node);
          try {
            if (FS.isDir(node.mode)) {
              fs.mkdirSync(path, node.mode);
            } else {
              fs.writeFileSync(path, '', { mode: node.mode });
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return node;
        },rename:function (oldNode, newDir, newName) {
          var oldPath = NODEFS.realPath(oldNode);
          var newPath = PATH.join2(NODEFS.realPath(newDir), newName);
          try {
            fs.renameSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },unlink:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.unlinkSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },rmdir:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.rmdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readdir:function (node) {
          var path = NODEFS.realPath(node);
          try {
            return fs.readdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },symlink:function (parent, newName, oldPath) {
          var newPath = PATH.join2(NODEFS.realPath(parent), newName);
          try {
            fs.symlinkSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readlink:function (node) {
          var path = NODEFS.realPath(node);
          try {
            return fs.readlinkSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        }},stream_ops:{open:function (stream) {
          var path = NODEFS.realPath(stream.node);
          try {
            if (FS.isFile(stream.node.mode)) {
              stream.nfd = fs.openSync(path, NODEFS.flagsToPermissionString(stream.flags));
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },close:function (stream) {
          try {
            if (FS.isFile(stream.node.mode) && stream.nfd) {
              fs.closeSync(stream.nfd);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },read:function (stream, buffer, offset, length, position) {
          // FIXME this is terrible.
          var nbuffer = new Buffer(length);
          var res;
          try {
            res = fs.readSync(stream.nfd, nbuffer, 0, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          if (res > 0) {
            for (var i = 0; i < res; i++) {
              buffer[offset + i] = nbuffer[i];
            }
          }
          return res;
        },write:function (stream, buffer, offset, length, position) {
          // FIXME this is terrible.
          var nbuffer = new Buffer(buffer.subarray(offset, offset + length));
          var res;
          try {
            res = fs.writeSync(stream.nfd, nbuffer, 0, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return res;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              try {
                var stat = fs.fstatSync(stream.nfd);
                position += stat.size;
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES[e.code]);
              }
            }
          }
  
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
  
          stream.position = position;
          return position;
        }}};
  
  var _stdin=allocate(1, "i32*", ALLOC_STATIC);
  
  var _stdout=allocate(1, "i32*", ALLOC_STATIC);
  
  var _stderr=allocate(1, "i32*", ALLOC_STATIC);
  
  function _fflush(stream) {
      // int fflush(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fflush.html
      // we don't currently perform any user-space buffering of data
    }var FS={root:null,mounts:[],devices:[null],streams:[null],nextInode:1,nameTable:null,currentPath:"/",initialized:false,ignorePermissions:true,ErrnoError:null,genericErrors:{},handleFSError:function (e) {
        if (!(e instanceof FS.ErrnoError)) throw e + ' : ' + stackTrace();
        return ___setErrNo(e.errno);
      },lookupPath:function (path, opts) {
        path = PATH.resolve(FS.cwd(), path);
        opts = opts || { recurse_count: 0 };
  
        if (opts.recurse_count > 8) {  // max recursive lookup of 8
          throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
        }
  
        // split the path
        var parts = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), false);
  
        // start at the root
        var current = FS.root;
        var current_path = '/';
  
        for (var i = 0; i < parts.length; i++) {
          var islast = (i === parts.length-1);
          if (islast && opts.parent) {
            // stop resolving
            break;
          }
  
          current = FS.lookupNode(current, parts[i]);
          current_path = PATH.join2(current_path, parts[i]);
  
          // jump to the mount's root node if this is a mountpoint
          if (FS.isMountpoint(current)) {
            current = current.mount.root;
          }
  
          // follow symlinks
          // by default, lookupPath will not follow a symlink if it is the final path component.
          // setting opts.follow = true will override this behavior.
          if (!islast || opts.follow) {
            var count = 0;
            while (FS.isLink(current.mode)) {
              var link = FS.readlink(current_path);
              current_path = PATH.resolve(PATH.dirname(current_path), link);
              
              var lookup = FS.lookupPath(current_path, { recurse_count: opts.recurse_count });
              current = lookup.node;
  
              if (count++ > 40) {  // limit max consecutive symlinks to 40 (SYMLOOP_MAX).
                throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
              }
            }
          }
        }
  
        return { path: current_path, node: current };
      },getPath:function (node) {
        var path;
        while (true) {
          if (FS.isRoot(node)) {
            var mount = node.mount.mountpoint;
            if (!path) return mount;
            return mount[mount.length-1] !== '/' ? mount + '/' + path : mount + path;
          }
          path = path ? node.name + '/' + path : node.name;
          node = node.parent;
        }
      },hashName:function (parentid, name) {
        var hash = 0;
  
  
        for (var i = 0; i < name.length; i++) {
          hash = ((hash << 5) - hash + name.charCodeAt(i)) | 0;
        }
        return ((parentid + hash) >>> 0) % FS.nameTable.length;
      },hashAddNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        node.name_next = FS.nameTable[hash];
        FS.nameTable[hash] = node;
      },hashRemoveNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        if (FS.nameTable[hash] === node) {
          FS.nameTable[hash] = node.name_next;
        } else {
          var current = FS.nameTable[hash];
          while (current) {
            if (current.name_next === node) {
              current.name_next = node.name_next;
              break;
            }
            current = current.name_next;
          }
        }
      },lookupNode:function (parent, name) {
        var err = FS.mayLookup(parent);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        var hash = FS.hashName(parent.id, name);
        for (var node = FS.nameTable[hash]; node; node = node.name_next) {
          var nodeName = node.name;
          if (node.parent.id === parent.id && nodeName === name) {
            return node;
          }
        }
        // if we failed to find it in the cache, call into the VFS
        return FS.lookup(parent, name);
      },createNode:function (parent, name, mode, rdev) {
        if (!FS.FSNode) {
          FS.FSNode = function(parent, name, mode, rdev) {
            this.id = FS.nextInode++;
            this.name = name;
            this.mode = mode;
            this.node_ops = {};
            this.stream_ops = {};
            this.rdev = rdev;
            this.parent = null;
            this.mount = null;
            if (!parent) {
              parent = this;  // root node sets parent to itself
            }
            this.parent = parent;
            this.mount = parent.mount;
            FS.hashAddNode(this);
          };
  
          // compatibility
          var readMode = 292 | 73;
          var writeMode = 146;
  
          FS.FSNode.prototype = {};
  
          // NOTE we must use Object.defineProperties instead of individual calls to
          // Object.defineProperty in order to make closure compiler happy
          Object.defineProperties(FS.FSNode.prototype, {
            read: {
              get: function() { return (this.mode & readMode) === readMode; },
              set: function(val) { val ? this.mode |= readMode : this.mode &= ~readMode; }
            },
            write: {
              get: function() { return (this.mode & writeMode) === writeMode; },
              set: function(val) { val ? this.mode |= writeMode : this.mode &= ~writeMode; }
            },
            isFolder: {
              get: function() { return FS.isDir(this.mode); },
            },
            isDevice: {
              get: function() { return FS.isChrdev(this.mode); },
            },
          });
        }
        return new FS.FSNode(parent, name, mode, rdev);
      },destroyNode:function (node) {
        FS.hashRemoveNode(node);
      },isRoot:function (node) {
        return node === node.parent;
      },isMountpoint:function (node) {
        return node.mounted;
      },isFile:function (mode) {
        return (mode & 61440) === 32768;
      },isDir:function (mode) {
        return (mode & 61440) === 16384;
      },isLink:function (mode) {
        return (mode & 61440) === 40960;
      },isChrdev:function (mode) {
        return (mode & 61440) === 8192;
      },isBlkdev:function (mode) {
        return (mode & 61440) === 24576;
      },isFIFO:function (mode) {
        return (mode & 61440) === 4096;
      },isSocket:function (mode) {
        return (mode & 49152) === 49152;
      },flagModes:{"r":0,"rs":1052672,"r+":2,"w":577,"wx":705,"xw":705,"w+":578,"wx+":706,"xw+":706,"a":1089,"ax":1217,"xa":1217,"a+":1090,"ax+":1218,"xa+":1218},modeStringToFlags:function (str) {
        var flags = FS.flagModes[str];
        if (typeof flags === 'undefined') {
          throw new Error('Unknown file open mode: ' + str);
        }
        return flags;
      },flagsToPermissionString:function (flag) {
        var accmode = flag & 2097155;
        var perms = ['r', 'w', 'rw'][accmode];
        if ((flag & 512)) {
          perms += 'w';
        }
        return perms;
      },nodePermissions:function (node, perms) {
        if (FS.ignorePermissions) {
          return 0;
        }
        // return 0 if any user, group or owner bits are set.
        if (perms.indexOf('r') !== -1 && !(node.mode & 292)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('w') !== -1 && !(node.mode & 146)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('x') !== -1 && !(node.mode & 73)) {
          return ERRNO_CODES.EACCES;
        }
        return 0;
      },mayLookup:function (dir) {
        return FS.nodePermissions(dir, 'x');
      },mayCreate:function (dir, name) {
        try {
          var node = FS.lookupNode(dir, name);
          return ERRNO_CODES.EEXIST;
        } catch (e) {
        }
        return FS.nodePermissions(dir, 'wx');
      },mayDelete:function (dir, name, isdir) {
        var node;
        try {
          node = FS.lookupNode(dir, name);
        } catch (e) {
          return e.errno;
        }
        var err = FS.nodePermissions(dir, 'wx');
        if (err) {
          return err;
        }
        if (isdir) {
          if (!FS.isDir(node.mode)) {
            return ERRNO_CODES.ENOTDIR;
          }
          if (FS.isRoot(node) || FS.getPath(node) === FS.cwd()) {
            return ERRNO_CODES.EBUSY;
          }
        } else {
          if (FS.isDir(node.mode)) {
            return ERRNO_CODES.EISDIR;
          }
        }
        return 0;
      },mayOpen:function (node, flags) {
        if (!node) {
          return ERRNO_CODES.ENOENT;
        }
        if (FS.isLink(node.mode)) {
          return ERRNO_CODES.ELOOP;
        } else if (FS.isDir(node.mode)) {
          if ((flags & 2097155) !== 0 ||  // opening for write
              (flags & 512)) {
            return ERRNO_CODES.EISDIR;
          }
        }
        return FS.nodePermissions(node, FS.flagsToPermissionString(flags));
      },MAX_OPEN_FDS:4096,nextfd:function (fd_start, fd_end) {
        fd_start = fd_start || 1;
        fd_end = fd_end || FS.MAX_OPEN_FDS;
        for (var fd = fd_start; fd <= fd_end; fd++) {
          if (!FS.streams[fd]) {
            return fd;
          }
        }
        throw new FS.ErrnoError(ERRNO_CODES.EMFILE);
      },getStream:function (fd) {
        return FS.streams[fd];
      },createStream:function (stream, fd_start, fd_end) {
        if (!FS.FSStream) {
          FS.FSStream = function(){};
          FS.FSStream.prototype = {};
          // compatibility
          Object.defineProperties(FS.FSStream.prototype, {
            object: {
              get: function() { return this.node; },
              set: function(val) { this.node = val; }
            },
            isRead: {
              get: function() { return (this.flags & 2097155) !== 1; }
            },
            isWrite: {
              get: function() { return (this.flags & 2097155) !== 0; }
            },
            isAppend: {
              get: function() { return (this.flags & 1024); }
            }
          });
        }
        if (stream.__proto__) {
          // reuse the object
          stream.__proto__ = FS.FSStream.prototype;
        } else {
          var newStream = new FS.FSStream();
          for (var p in stream) {
            newStream[p] = stream[p];
          }
          stream = newStream;
        }
        var fd = FS.nextfd(fd_start, fd_end);
        stream.fd = fd;
        FS.streams[fd] = stream;
        return stream;
      },closeStream:function (fd) {
        FS.streams[fd] = null;
      },chrdev_stream_ops:{open:function (stream) {
          var device = FS.getDevice(stream.node.rdev);
          // override node's stream ops with the device's
          stream.stream_ops = device.stream_ops;
          // forward the open call
          if (stream.stream_ops.open) {
            stream.stream_ops.open(stream);
          }
        },llseek:function () {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }},major:function (dev) {
        return ((dev) >> 8);
      },minor:function (dev) {
        return ((dev) & 0xff);
      },makedev:function (ma, mi) {
        return ((ma) << 8 | (mi));
      },registerDevice:function (dev, ops) {
        FS.devices[dev] = { stream_ops: ops };
      },getDevice:function (dev) {
        return FS.devices[dev];
      },syncfs:function (populate, callback) {
        if (typeof(populate) === 'function') {
          callback = populate;
          populate = false;
        }
  
        var completed = 0;
        var total = FS.mounts.length;
        function done(err) {
          if (err) {
            return callback(err);
          }
          if (++completed >= total) {
            callback(null);
          }
        };
  
        // sync all mounts
        for (var i = 0; i < FS.mounts.length; i++) {
          var mount = FS.mounts[i];
          if (!mount.type.syncfs) {
            done(null);
            continue;
          }
          mount.type.syncfs(mount, populate, done);
        }
      },mount:function (type, opts, mountpoint) {
        var lookup;
        if (mountpoint) {
          lookup = FS.lookupPath(mountpoint, { follow: false });
          mountpoint = lookup.path;  // use the absolute path
        }
        var mount = {
          type: type,
          opts: opts,
          mountpoint: mountpoint,
          root: null
        };
        // create a root node for the fs
        var root = type.mount(mount);
        root.mount = mount;
        mount.root = root;
        // assign the mount info to the mountpoint's node
        if (lookup) {
          lookup.node.mount = mount;
          lookup.node.mounted = true;
          // compatibility update FS.root if we mount to /
          if (mountpoint === '/') {
            FS.root = mount.root;
          }
        }
        // add to our cached list of mounts
        FS.mounts.push(mount);
        return root;
      },lookup:function (parent, name) {
        return parent.node_ops.lookup(parent, name);
      },mknod:function (path, mode, dev) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var err = FS.mayCreate(parent, name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.mknod) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.mknod(parent, name, mode, dev);
      },create:function (path, mode) {
        mode = mode !== undefined ? mode : 0666;
        mode &= 4095;
        mode |= 32768;
        return FS.mknod(path, mode, 0);
      },mkdir:function (path, mode) {
        mode = mode !== undefined ? mode : 0777;
        mode &= 511 | 512;
        mode |= 16384;
        return FS.mknod(path, mode, 0);
      },mkdev:function (path, mode, dev) {
        if (typeof(dev) === 'undefined') {
          dev = mode;
          mode = 0666;
        }
        mode |= 8192;
        return FS.mknod(path, mode, dev);
      },symlink:function (oldpath, newpath) {
        var lookup = FS.lookupPath(newpath, { parent: true });
        var parent = lookup.node;
        var newname = PATH.basename(newpath);
        var err = FS.mayCreate(parent, newname);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.symlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.symlink(parent, newname, oldpath);
      },rename:function (old_path, new_path) {
        var old_dirname = PATH.dirname(old_path);
        var new_dirname = PATH.dirname(new_path);
        var old_name = PATH.basename(old_path);
        var new_name = PATH.basename(new_path);
        // parents must exist
        var lookup, old_dir, new_dir;
        try {
          lookup = FS.lookupPath(old_path, { parent: true });
          old_dir = lookup.node;
          lookup = FS.lookupPath(new_path, { parent: true });
          new_dir = lookup.node;
        } catch (e) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        // need to be part of the same mount
        if (old_dir.mount !== new_dir.mount) {
          throw new FS.ErrnoError(ERRNO_CODES.EXDEV);
        }
        // source must exist
        var old_node = FS.lookupNode(old_dir, old_name);
        // old path should not be an ancestor of the new path
        var relative = PATH.relative(old_path, new_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        // new path should not be an ancestor of the old path
        relative = PATH.relative(new_path, old_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
        }
        // see if the new path already exists
        var new_node;
        try {
          new_node = FS.lookupNode(new_dir, new_name);
        } catch (e) {
          // not fatal
        }
        // early out if nothing needs to change
        if (old_node === new_node) {
          return;
        }
        // we'll need to delete the old entry
        var isdir = FS.isDir(old_node.mode);
        var err = FS.mayDelete(old_dir, old_name, isdir);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        // need delete permissions if we'll be overwriting.
        // need create permissions if new doesn't already exist.
        err = new_node ?
          FS.mayDelete(new_dir, new_name, isdir) :
          FS.mayCreate(new_dir, new_name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!old_dir.node_ops.rename) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(old_node) || (new_node && FS.isMountpoint(new_node))) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        // if we are going to change the parent, check write permissions
        if (new_dir !== old_dir) {
          err = FS.nodePermissions(old_dir, 'w');
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        // remove the node from the lookup hash
        FS.hashRemoveNode(old_node);
        // do the underlying fs rename
        try {
          old_dir.node_ops.rename(old_node, new_dir, new_name);
        } catch (e) {
          throw e;
        } finally {
          // add the node back to the hash (in case node_ops.rename
          // changed its name)
          FS.hashAddNode(old_node);
        }
      },rmdir:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, true);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.rmdir) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        parent.node_ops.rmdir(parent, name);
        FS.destroyNode(node);
      },readdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        if (!node.node_ops.readdir) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        return node.node_ops.readdir(node);
      },unlink:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, false);
        if (err) {
          // POSIX says unlink should set EPERM, not EISDIR
          if (err === ERRNO_CODES.EISDIR) err = ERRNO_CODES.EPERM;
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.unlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        parent.node_ops.unlink(parent, name);
        FS.destroyNode(node);
      },readlink:function (path) {
        var lookup = FS.lookupPath(path, { follow: false });
        var link = lookup.node;
        if (!link.node_ops.readlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        return link.node_ops.readlink(link);
      },stat:function (path, dontFollow) {
        var lookup = FS.lookupPath(path, { follow: !dontFollow });
        var node = lookup.node;
        if (!node.node_ops.getattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return node.node_ops.getattr(node);
      },lstat:function (path) {
        return FS.stat(path, true);
      },chmod:function (path, mode, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          mode: (mode & 4095) | (node.mode & ~4095),
          timestamp: Date.now()
        });
      },lchmod:function (path, mode) {
        FS.chmod(path, mode, true);
      },fchmod:function (fd, mode) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chmod(stream.node, mode);
      },chown:function (path, uid, gid, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          timestamp: Date.now()
          // we ignore the uid / gid for now
        });
      },lchown:function (path, uid, gid) {
        FS.chown(path, uid, gid, true);
      },fchown:function (fd, uid, gid) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chown(stream.node, uid, gid);
      },truncate:function (path, len) {
        if (len < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: true });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!FS.isFile(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.nodePermissions(node, 'w');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        node.node_ops.setattr(node, {
          size: len,
          timestamp: Date.now()
        });
      },ftruncate:function (fd, len) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        FS.truncate(stream.node, len);
      },utime:function (path, atime, mtime) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        node.node_ops.setattr(node, {
          timestamp: Math.max(atime, mtime)
        });
      },open:function (path, flags, mode, fd_start, fd_end) {
        flags = typeof flags === 'string' ? FS.modeStringToFlags(flags) : flags;
        mode = typeof mode === 'undefined' ? 0666 : mode;
        if ((flags & 64)) {
          mode = (mode & 4095) | 32768;
        } else {
          mode = 0;
        }
        var node;
        if (typeof path === 'object') {
          node = path;
        } else {
          path = PATH.normalize(path);
          try {
            var lookup = FS.lookupPath(path, {
              follow: !(flags & 131072)
            });
            node = lookup.node;
          } catch (e) {
            // ignore
          }
        }
        // perhaps we need to create the node
        if ((flags & 64)) {
          if (node) {
            // if O_CREAT and O_EXCL are set, error out if the node already exists
            if ((flags & 128)) {
              throw new FS.ErrnoError(ERRNO_CODES.EEXIST);
            }
          } else {
            // node doesn't exist, try to create it
            node = FS.mknod(path, mode, 0);
          }
        }
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        // can't truncate a device
        if (FS.isChrdev(node.mode)) {
          flags &= ~512;
        }
        // check permissions
        var err = FS.mayOpen(node, flags);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        // do truncation if necessary
        if ((flags & 512)) {
          FS.truncate(node, 0);
        }
        // we've already handled these, don't pass down to the underlying vfs
        flags &= ~(128 | 512);
  
        // register the stream with the filesystem
        var stream = FS.createStream({
          node: node,
          path: FS.getPath(node),  // we want the absolute path to the node
          flags: flags,
          seekable: true,
          position: 0,
          stream_ops: node.stream_ops,
          // used by the file family libc calls (fopen, fwrite, ferror, etc.)
          ungotten: [],
          error: false
        }, fd_start, fd_end);
        // call the new stream's open function
        if (stream.stream_ops.open) {
          stream.stream_ops.open(stream);
        }
        if (Module['logReadFiles'] && !(flags & 1)) {
          if (!FS.readFiles) FS.readFiles = {};
          if (!(path in FS.readFiles)) {
            FS.readFiles[path] = 1;
            Module['printErr']('read file: ' + path);
          }
        }
        return stream;
      },close:function (stream) {
        try {
          if (stream.stream_ops.close) {
            stream.stream_ops.close(stream);
          }
        } catch (e) {
          throw e;
        } finally {
          FS.closeStream(stream.fd);
        }
      },llseek:function (stream, offset, whence) {
        if (!stream.seekable || !stream.stream_ops.llseek) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        return stream.stream_ops.llseek(stream, offset, whence);
      },read:function (stream, buffer, offset, length, position) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.read) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesRead = stream.stream_ops.read(stream, buffer, offset, length, position);
        if (!seeking) stream.position += bytesRead;
        return bytesRead;
      },write:function (stream, buffer, offset, length, position, canOwn) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.write) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        if (stream.flags & 1024) {
          // seek to the end before writing in append mode
          FS.llseek(stream, 0, 2);
        }
        var bytesWritten = stream.stream_ops.write(stream, buffer, offset, length, position, canOwn);
        if (!seeking) stream.position += bytesWritten;
        return bytesWritten;
      },allocate:function (stream, offset, length) {
        if (offset < 0 || length <= 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (!FS.isFile(stream.node.mode) && !FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        if (!stream.stream_ops.allocate) {
          throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
        }
        stream.stream_ops.allocate(stream, offset, length);
      },mmap:function (stream, buffer, offset, length, position, prot, flags) {
        // TODO if PROT is PROT_WRITE, make sure we have write access
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EACCES);
        }
        if (!stream.stream_ops.mmap) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        return stream.stream_ops.mmap(stream, buffer, offset, length, position, prot, flags);
      },ioctl:function (stream, cmd, arg) {
        if (!stream.stream_ops.ioctl) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTTY);
        }
        return stream.stream_ops.ioctl(stream, cmd, arg);
      },readFile:function (path, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'r';
        opts.encoding = opts.encoding || 'binary';
        var ret;
        var stream = FS.open(path, opts.flags);
        var stat = FS.stat(path);
        var length = stat.size;
        var buf = new Uint8Array(length);
        FS.read(stream, buf, 0, length, 0);
        if (opts.encoding === 'utf8') {
          ret = '';
          var utf8 = new Runtime.UTF8Processor();
          for (var i = 0; i < length; i++) {
            ret += utf8.processCChar(buf[i]);
          }
        } else if (opts.encoding === 'binary') {
          ret = buf;
        } else {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        FS.close(stream);
        return ret;
      },writeFile:function (path, data, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'w';
        opts.encoding = opts.encoding || 'utf8';
        var stream = FS.open(path, opts.flags, opts.mode);
        if (opts.encoding === 'utf8') {
          var utf8 = new Runtime.UTF8Processor();
          var buf = new Uint8Array(utf8.processJSString(data));
          FS.write(stream, buf, 0, buf.length, 0);
        } else if (opts.encoding === 'binary') {
          FS.write(stream, data, 0, data.length, 0);
        } else {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        FS.close(stream);
      },cwd:function () {
        return FS.currentPath;
      },chdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        if (!FS.isDir(lookup.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        var err = FS.nodePermissions(lookup.node, 'x');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        FS.currentPath = lookup.path;
      },createDefaultDirectories:function () {
        FS.mkdir('/tmp');
      },createDefaultDevices:function () {
        // create /dev
        FS.mkdir('/dev');
        // setup /dev/null
        FS.registerDevice(FS.makedev(1, 3), {
          read: function() { return 0; },
          write: function() { return 0; }
        });
        FS.mkdev('/dev/null', FS.makedev(1, 3));
        // setup /dev/tty and /dev/tty1
        // stderr needs to print output using Module['printErr']
        // so we register a second tty just for it.
        TTY.register(FS.makedev(5, 0), TTY.default_tty_ops);
        TTY.register(FS.makedev(6, 0), TTY.default_tty1_ops);
        FS.mkdev('/dev/tty', FS.makedev(5, 0));
        FS.mkdev('/dev/tty1', FS.makedev(6, 0));
        // we're not going to emulate the actual shm device,
        // just create the tmp dirs that reside in it commonly
        FS.mkdir('/dev/shm');
        FS.mkdir('/dev/shm/tmp');
      },createStandardStreams:function () {
        // TODO deprecate the old functionality of a single
        // input / output callback and that utilizes FS.createDevice
        // and instead require a unique set of stream ops
  
        // by default, we symlink the standard streams to the
        // default tty devices. however, if the standard streams
        // have been overwritten we create a unique device for
        // them instead.
        if (Module['stdin']) {
          FS.createDevice('/dev', 'stdin', Module['stdin']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdin');
        }
        if (Module['stdout']) {
          FS.createDevice('/dev', 'stdout', null, Module['stdout']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdout');
        }
        if (Module['stderr']) {
          FS.createDevice('/dev', 'stderr', null, Module['stderr']);
        } else {
          FS.symlink('/dev/tty1', '/dev/stderr');
        }
  
        // open default streams for the stdin, stdout and stderr devices
        var stdin = FS.open('/dev/stdin', 'r');
        HEAP32[((_stdin)>>2)]=stdin.fd;
        assert(stdin.fd === 1, 'invalid handle for stdin (' + stdin.fd + ')');
  
        var stdout = FS.open('/dev/stdout', 'w');
        HEAP32[((_stdout)>>2)]=stdout.fd;
        assert(stdout.fd === 2, 'invalid handle for stdout (' + stdout.fd + ')');
  
        var stderr = FS.open('/dev/stderr', 'w');
        HEAP32[((_stderr)>>2)]=stderr.fd;
        assert(stderr.fd === 3, 'invalid handle for stderr (' + stderr.fd + ')');
      },ensureErrnoError:function () {
        if (FS.ErrnoError) return;
        FS.ErrnoError = function ErrnoError(errno) {
          this.errno = errno;
          for (var key in ERRNO_CODES) {
            if (ERRNO_CODES[key] === errno) {
              this.code = key;
              break;
            }
          }
          this.message = ERRNO_MESSAGES[errno];
        };
        FS.ErrnoError.prototype = new Error();
        FS.ErrnoError.prototype.constructor = FS.ErrnoError;
        // Some errors may happen quite a bit, to avoid overhead we reuse them (and suffer a lack of stack info)
        [ERRNO_CODES.ENOENT].forEach(function(code) {
          FS.genericErrors[code] = new FS.ErrnoError(code);
          FS.genericErrors[code].stack = '<generic error, no stack>';
        });
      },staticInit:function () {
        FS.ensureErrnoError();
  
        FS.nameTable = new Array(4096);
  
        FS.root = FS.createNode(null, '/', 16384 | 0777, 0);
        FS.mount(MEMFS, {}, '/');
  
        FS.createDefaultDirectories();
        FS.createDefaultDevices();
      },init:function (input, output, error) {
        assert(!FS.init.initialized, 'FS.init was previously called. If you want to initialize later with custom parameters, remove any earlier calls (note that one is automatically added to the generated code)');
        FS.init.initialized = true;
  
        FS.ensureErrnoError();
  
        // Allow Module.stdin etc. to provide defaults, if none explicitly passed to us here
        Module['stdin'] = input || Module['stdin'];
        Module['stdout'] = output || Module['stdout'];
        Module['stderr'] = error || Module['stderr'];
  
        FS.createStandardStreams();
      },quit:function () {
        FS.init.initialized = false;
        for (var i = 0; i < FS.streams.length; i++) {
          var stream = FS.streams[i];
          if (!stream) {
            continue;
          }
          FS.close(stream);
        }
      },getMode:function (canRead, canWrite) {
        var mode = 0;
        if (canRead) mode |= 292 | 73;
        if (canWrite) mode |= 146;
        return mode;
      },joinPath:function (parts, forceRelative) {
        var path = PATH.join.apply(null, parts);
        if (forceRelative && path[0] == '/') path = path.substr(1);
        return path;
      },absolutePath:function (relative, base) {
        return PATH.resolve(base, relative);
      },standardizePath:function (path) {
        return PATH.normalize(path);
      },findObject:function (path, dontResolveLastLink) {
        var ret = FS.analyzePath(path, dontResolveLastLink);
        if (ret.exists) {
          return ret.object;
        } else {
          ___setErrNo(ret.error);
          return null;
        }
      },analyzePath:function (path, dontResolveLastLink) {
        // operate from within the context of the symlink's target
        try {
          var lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          path = lookup.path;
        } catch (e) {
        }
        var ret = {
          isRoot: false, exists: false, error: 0, name: null, path: null, object: null,
          parentExists: false, parentPath: null, parentObject: null
        };
        try {
          var lookup = FS.lookupPath(path, { parent: true });
          ret.parentExists = true;
          ret.parentPath = lookup.path;
          ret.parentObject = lookup.node;
          ret.name = PATH.basename(path);
          lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          ret.exists = true;
          ret.path = lookup.path;
          ret.object = lookup.node;
          ret.name = lookup.node.name;
          ret.isRoot = lookup.path === '/';
        } catch (e) {
          ret.error = e.errno;
        };
        return ret;
      },createFolder:function (parent, name, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.mkdir(path, mode);
      },createPath:function (parent, path, canRead, canWrite) {
        parent = typeof parent === 'string' ? parent : FS.getPath(parent);
        var parts = path.split('/').reverse();
        while (parts.length) {
          var part = parts.pop();
          if (!part) continue;
          var current = PATH.join2(parent, part);
          try {
            FS.mkdir(current);
          } catch (e) {
            // ignore EEXIST
          }
          parent = current;
        }
        return current;
      },createFile:function (parent, name, properties, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.create(path, mode);
      },createDataFile:function (parent, name, data, canRead, canWrite, canOwn) {
        var path = name ? PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name) : parent;
        var mode = FS.getMode(canRead, canWrite);
        var node = FS.create(path, mode);
        if (data) {
          if (typeof data === 'string') {
            var arr = new Array(data.length);
            for (var i = 0, len = data.length; i < len; ++i) arr[i] = data.charCodeAt(i);
            data = arr;
          }
          // make sure we can write to the file
          FS.chmod(node, mode | 146);
          var stream = FS.open(node, 'w');
          FS.write(stream, data, 0, data.length, 0, canOwn);
          FS.close(stream);
          FS.chmod(node, mode);
        }
        return node;
      },createDevice:function (parent, name, input, output) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(!!input, !!output);
        if (!FS.createDevice.major) FS.createDevice.major = 64;
        var dev = FS.makedev(FS.createDevice.major++, 0);
        // Create a fake device that a set of stream ops to emulate
        // the old behavior.
        FS.registerDevice(dev, {
          open: function(stream) {
            stream.seekable = false;
          },
          close: function(stream) {
            // flush any pending line data
            if (output && output.buffer && output.buffer.length) {
              output(10);
            }
          },
          read: function(stream, buffer, offset, length, pos /* ignored */) {
            var bytesRead = 0;
            for (var i = 0; i < length; i++) {
              var result;
              try {
                result = input();
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
              if (result === undefined && bytesRead === 0) {
                throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
              }
              if (result === null || result === undefined) break;
              bytesRead++;
              buffer[offset+i] = result;
            }
            if (bytesRead) {
              stream.node.timestamp = Date.now();
            }
            return bytesRead;
          },
          write: function(stream, buffer, offset, length, pos) {
            for (var i = 0; i < length; i++) {
              try {
                output(buffer[offset+i]);
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
            }
            if (length) {
              stream.node.timestamp = Date.now();
            }
            return i;
          }
        });
        return FS.mkdev(path, mode, dev);
      },createLink:function (parent, name, target, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        return FS.symlink(target, path);
      },forceLoadFile:function (obj) {
        if (obj.isDevice || obj.isFolder || obj.link || obj.contents) return true;
        var success = true;
        if (typeof XMLHttpRequest !== 'undefined') {
          throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.");
        } else if (Module['read']) {
          // Command-line.
          try {
            // WARNING: Can't read binary files in V8's d8 or tracemonkey's js, as
            //          read() will try to parse UTF8.
            obj.contents = intArrayFromString(Module['read'](obj.url), true);
          } catch (e) {
            success = false;
          }
        } else {
          throw new Error('Cannot load without read() or XMLHttpRequest.');
        }
        if (!success) ___setErrNo(ERRNO_CODES.EIO);
        return success;
      },createLazyFile:function (parent, name, url, canRead, canWrite) {
        if (typeof XMLHttpRequest !== 'undefined') {
          if (!ENVIRONMENT_IS_WORKER) throw 'Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc';
          // Lazy chunked Uint8Array (implements get and length from Uint8Array). Actual getting is abstracted away for eventual reuse.
          function LazyUint8Array() {
            this.lengthKnown = false;
            this.chunks = []; // Loaded chunks. Index is the chunk number
          }
          LazyUint8Array.prototype.get = function LazyUint8Array_get(idx) {
            if (idx > this.length-1 || idx < 0) {
              return undefined;
            }
            var chunkOffset = idx % this.chunkSize;
            var chunkNum = Math.floor(idx / this.chunkSize);
            return this.getter(chunkNum)[chunkOffset];
          }
          LazyUint8Array.prototype.setDataGetter = function LazyUint8Array_setDataGetter(getter) {
            this.getter = getter;
          }
          LazyUint8Array.prototype.cacheLength = function LazyUint8Array_cacheLength() {
              // Find length
              var xhr = new XMLHttpRequest();
              xhr.open('HEAD', url, false);
              xhr.send(null);
              if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
              var datalength = Number(xhr.getResponseHeader("Content-length"));
              var header;
              var hasByteServing = (header = xhr.getResponseHeader("Accept-Ranges")) && header === "bytes";
              var chunkSize = 1024*1024; // Chunk size in bytes
  
              if (!hasByteServing) chunkSize = datalength;
  
              // Function to get a range from the remote URL.
              var doXHR = (function(from, to) {
                if (from > to) throw new Error("invalid range (" + from + ", " + to + ") or no bytes requested!");
                if (to > datalength-1) throw new Error("only " + datalength + " bytes available! programmer error!");
  
                // TODO: Use mozResponseArrayBuffer, responseStream, etc. if available.
                var xhr = new XMLHttpRequest();
                xhr.open('GET', url, false);
                if (datalength !== chunkSize) xhr.setRequestHeader("Range", "bytes=" + from + "-" + to);
  
                // Some hints to the browser that we want binary data.
                if (typeof Uint8Array != 'undefined') xhr.responseType = 'arraybuffer';
                if (xhr.overrideMimeType) {
                  xhr.overrideMimeType('text/plain; charset=x-user-defined');
                }
  
                xhr.send(null);
                if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
                if (xhr.response !== undefined) {
                  return new Uint8Array(xhr.response || []);
                } else {
                  return intArrayFromString(xhr.responseText || '', true);
                }
              });
              var lazyArray = this;
              lazyArray.setDataGetter(function(chunkNum) {
                var start = chunkNum * chunkSize;
                var end = (chunkNum+1) * chunkSize - 1; // including this byte
                end = Math.min(end, datalength-1); // if datalength-1 is selected, this is the last block
                if (typeof(lazyArray.chunks[chunkNum]) === "undefined") {
                  lazyArray.chunks[chunkNum] = doXHR(start, end);
                }
                if (typeof(lazyArray.chunks[chunkNum]) === "undefined") throw new Error("doXHR failed!");
                return lazyArray.chunks[chunkNum];
              });
  
              this._length = datalength;
              this._chunkSize = chunkSize;
              this.lengthKnown = true;
          }
  
          var lazyArray = new LazyUint8Array();
          Object.defineProperty(lazyArray, "length", {
              get: function() {
                  if(!this.lengthKnown) {
                      this.cacheLength();
                  }
                  return this._length;
              }
          });
          Object.defineProperty(lazyArray, "chunkSize", {
              get: function() {
                  if(!this.lengthKnown) {
                      this.cacheLength();
                  }
                  return this._chunkSize;
              }
          });
  
          var properties = { isDevice: false, contents: lazyArray };
        } else {
          var properties = { isDevice: false, url: url };
        }
  
        var node = FS.createFile(parent, name, properties, canRead, canWrite);
        // This is a total hack, but I want to get this lazy file code out of the
        // core of MEMFS. If we want to keep this lazy file concept I feel it should
        // be its own thin LAZYFS proxying calls to MEMFS.
        if (properties.contents) {
          node.contents = properties.contents;
        } else if (properties.url) {
          node.contents = null;
          node.url = properties.url;
        }
        // override each stream op with one that tries to force load the lazy file first
        var stream_ops = {};
        var keys = Object.keys(node.stream_ops);
        keys.forEach(function(key) {
          var fn = node.stream_ops[key];
          stream_ops[key] = function forceLoadLazyFile() {
            if (!FS.forceLoadFile(node)) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            return fn.apply(null, arguments);
          };
        });
        // use a custom read function
        stream_ops.read = function stream_ops_read(stream, buffer, offset, length, position) {
          if (!FS.forceLoadFile(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EIO);
          }
          var contents = stream.node.contents;
          if (position >= contents.length)
            return 0;
          var size = Math.min(contents.length - position, length);
          assert(size >= 0);
          if (contents.slice) { // normal array
            for (var i = 0; i < size; i++) {
              buffer[offset + i] = contents[position + i];
            }
          } else {
            for (var i = 0; i < size; i++) { // LazyUint8Array from sync binary XHR
              buffer[offset + i] = contents.get(position + i);
            }
          }
          return size;
        };
        node.stream_ops = stream_ops;
        return node;
      },createPreloadedFile:function (parent, name, url, canRead, canWrite, onload, onerror, dontCreateFile, canOwn) {
        Browser.init();
        // TODO we should allow people to just pass in a complete filename instead
        // of parent and name being that we just join them anyways
        var fullname = name ? PATH.resolve(PATH.join2(parent, name)) : parent;
        function processData(byteArray) {
          function finish(byteArray) {
            if (!dontCreateFile) {
              FS.createDataFile(parent, name, byteArray, canRead, canWrite, canOwn);
            }
            if (onload) onload();
            removeRunDependency('cp ' + fullname);
          }
          var handled = false;
          Module['preloadPlugins'].forEach(function(plugin) {
            if (handled) return;
            if (plugin['canHandle'](fullname)) {
              plugin['handle'](byteArray, fullname, finish, function() {
                if (onerror) onerror();
                removeRunDependency('cp ' + fullname);
              });
              handled = true;
            }
          });
          if (!handled) finish(byteArray);
        }
        addRunDependency('cp ' + fullname);
        if (typeof url == 'string') {
          Browser.asyncLoad(url, function(byteArray) {
            processData(byteArray);
          }, onerror);
        } else {
          processData(url);
        }
      },indexedDB:function () {
        return window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
      },DB_NAME:function () {
        return 'EM_FS_' + window.location.pathname;
      },DB_VERSION:20,DB_STORE_NAME:"FILE_DATA",saveFilesToDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = function openRequest_onupgradeneeded() {
          console.log('creating db');
          var db = openRequest.result;
          db.createObjectStore(FS.DB_STORE_NAME);
        };
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          var transaction = db.transaction([FS.DB_STORE_NAME], 'readwrite');
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var putRequest = files.put(FS.analyzePath(path).object.contents, path);
            putRequest.onsuccess = function putRequest_onsuccess() { ok++; if (ok + fail == total) finish() };
            putRequest.onerror = function putRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      },loadFilesFromDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = onerror; // no database to load from
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          try {
            var transaction = db.transaction([FS.DB_STORE_NAME], 'readonly');
          } catch(e) {
            onerror(e);
            return;
          }
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var getRequest = files.get(path);
            getRequest.onsuccess = function getRequest_onsuccess() {
              if (FS.analyzePath(path).exists) {
                FS.unlink(path);
              }
              FS.createDataFile(PATH.dirname(path), PATH.basename(path), getRequest.result, true, true, true);
              ok++;
              if (ok + fail == total) finish();
            };
            getRequest.onerror = function getRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      }};
  
  
  
  
  var _mkport=undefined;var SOCKFS={mount:function (mount) {
        return FS.createNode(null, '/', 16384 | 0777, 0);
      },createSocket:function (family, type, protocol) {
        var streaming = type == 1;
        if (protocol) {
          assert(streaming == (protocol == 6)); // if SOCK_STREAM, must be tcp
        }
  
        // create our internal socket structure
        var sock = {
          family: family,
          type: type,
          protocol: protocol,
          server: null,
          peers: {},
          pending: [],
          recv_queue: [],
          sock_ops: SOCKFS.websocket_sock_ops
        };
  
        // create the filesystem node to store the socket structure
        var name = SOCKFS.nextname();
        var node = FS.createNode(SOCKFS.root, name, 49152, 0);
        node.sock = sock;
  
        // and the wrapping stream that enables library functions such
        // as read and write to indirectly interact with the socket
        var stream = FS.createStream({
          path: name,
          node: node,
          flags: FS.modeStringToFlags('r+'),
          seekable: false,
          stream_ops: SOCKFS.stream_ops
        });
  
        // map the new stream to the socket structure (sockets have a 1:1
        // relationship with a stream)
        sock.stream = stream;
  
        return sock;
      },getSocket:function (fd) {
        var stream = FS.getStream(fd);
        if (!stream || !FS.isSocket(stream.node.mode)) {
          return null;
        }
        return stream.node.sock;
      },stream_ops:{poll:function (stream) {
          var sock = stream.node.sock;
          return sock.sock_ops.poll(sock);
        },ioctl:function (stream, request, varargs) {
          var sock = stream.node.sock;
          return sock.sock_ops.ioctl(sock, request, varargs);
        },read:function (stream, buffer, offset, length, position /* ignored */) {
          var sock = stream.node.sock;
          var msg = sock.sock_ops.recvmsg(sock, length);
          if (!msg) {
            // socket is closed
            return 0;
          }
          buffer.set(msg.buffer, offset);
          return msg.buffer.length;
        },write:function (stream, buffer, offset, length, position /* ignored */) {
          var sock = stream.node.sock;
          return sock.sock_ops.sendmsg(sock, buffer, offset, length);
        },close:function (stream) {
          var sock = stream.node.sock;
          sock.sock_ops.close(sock);
        }},nextname:function () {
        if (!SOCKFS.nextname.current) {
          SOCKFS.nextname.current = 0;
        }
        return 'socket[' + (SOCKFS.nextname.current++) + ']';
      },websocket_sock_ops:{createPeer:function (sock, addr, port) {
          var ws;
  
          if (typeof addr === 'object') {
            ws = addr;
            addr = null;
            port = null;
          }
  
          if (ws) {
            // for sockets that've already connected (e.g. we're the server)
            // we can inspect the _socket property for the address
            if (ws._socket) {
              addr = ws._socket.remoteAddress;
              port = ws._socket.remotePort;
            }
            // if we're just now initializing a connection to the remote,
            // inspect the url property
            else {
              var result = /ws[s]?:\/\/([^:]+):(\d+)/.exec(ws.url);
              if (!result) {
                throw new Error('WebSocket URL must be in the format ws(s)://address:port');
              }
              addr = result[1];
              port = parseInt(result[2], 10);
            }
          } else {
            // create the actual websocket object and connect
            try {
              var url = 'ws://' + addr + ':' + port;
              // the node ws library API is slightly different than the browser's
              var opts = ENVIRONMENT_IS_NODE ? {headers: {'websocket-protocol': ['binary']}} : ['binary'];
              // If node we use the ws library.
              var WebSocket = ENVIRONMENT_IS_NODE ? require('ws') : window['WebSocket'];
              ws = new WebSocket(url, opts);
              ws.binaryType = 'arraybuffer';
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EHOSTUNREACH);
            }
          }
  
  
          var peer = {
            addr: addr,
            port: port,
            socket: ws,
            dgram_send_queue: []
          };
  
          SOCKFS.websocket_sock_ops.addPeer(sock, peer);
          SOCKFS.websocket_sock_ops.handlePeerEvents(sock, peer);
  
          // if this is a bound dgram socket, send the port number first to allow
          // us to override the ephemeral port reported to us by remotePort on the
          // remote end.
          if (sock.type === 2 && typeof sock.sport !== 'undefined') {
            peer.dgram_send_queue.push(new Uint8Array([
                255, 255, 255, 255,
                'p'.charCodeAt(0), 'o'.charCodeAt(0), 'r'.charCodeAt(0), 't'.charCodeAt(0),
                ((sock.sport & 0xff00) >> 8) , (sock.sport & 0xff)
            ]));
          }
  
          return peer;
        },getPeer:function (sock, addr, port) {
          return sock.peers[addr + ':' + port];
        },addPeer:function (sock, peer) {
          sock.peers[peer.addr + ':' + peer.port] = peer;
        },removePeer:function (sock, peer) {
          delete sock.peers[peer.addr + ':' + peer.port];
        },handlePeerEvents:function (sock, peer) {
          var first = true;
  
          var handleOpen = function () {
            try {
              var queued = peer.dgram_send_queue.shift();
              while (queued) {
                peer.socket.send(queued);
                queued = peer.dgram_send_queue.shift();
              }
            } catch (e) {
              // not much we can do here in the way of proper error handling as we've already
              // lied and said this data was sent. shut it down.
              peer.socket.close();
            }
          };
  
          function handleMessage(data) {
            assert(typeof data !== 'string' && data.byteLength !== undefined);  // must receive an ArrayBuffer
            data = new Uint8Array(data);  // make a typed array view on the array buffer
  
  
            // if this is the port message, override the peer's port with it
            var wasfirst = first;
            first = false;
            if (wasfirst &&
                data.length === 10 &&
                data[0] === 255 && data[1] === 255 && data[2] === 255 && data[3] === 255 &&
                data[4] === 'p'.charCodeAt(0) && data[5] === 'o'.charCodeAt(0) && data[6] === 'r'.charCodeAt(0) && data[7] === 't'.charCodeAt(0)) {
              // update the peer's port and it's key in the peer map
              var newport = ((data[8] << 8) | data[9]);
              SOCKFS.websocket_sock_ops.removePeer(sock, peer);
              peer.port = newport;
              SOCKFS.websocket_sock_ops.addPeer(sock, peer);
              return;
            }
  
            sock.recv_queue.push({ addr: peer.addr, port: peer.port, data: data });
          };
  
          if (ENVIRONMENT_IS_NODE) {
            peer.socket.on('open', handleOpen);
            peer.socket.on('message', function(data, flags) {
              if (!flags.binary) {
                return;
              }
              handleMessage((new Uint8Array(data)).buffer);  // copy from node Buffer -> ArrayBuffer
            });
            peer.socket.on('error', function() {
              // don't throw
            });
          } else {
            peer.socket.onopen = handleOpen;
            peer.socket.onmessage = function peer_socket_onmessage(event) {
              handleMessage(event.data);
            };
          }
        },poll:function (sock) {
          if (sock.type === 1 && sock.server) {
            // listen sockets should only say they're available for reading
            // if there are pending clients.
            return sock.pending.length ? (64 | 1) : 0;
          }
  
          var mask = 0;
          var dest = sock.type === 1 ?  // we only care about the socket state for connection-based sockets
            SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport) :
            null;
  
          if (sock.recv_queue.length ||
              !dest ||  // connection-less sockets are always ready to read
              (dest && dest.socket.readyState === dest.socket.CLOSING) ||
              (dest && dest.socket.readyState === dest.socket.CLOSED)) {  // let recv return 0 once closed
            mask |= (64 | 1);
          }
  
          if (!dest ||  // connection-less sockets are always ready to write
              (dest && dest.socket.readyState === dest.socket.OPEN)) {
            mask |= 4;
          }
  
          if ((dest && dest.socket.readyState === dest.socket.CLOSING) ||
              (dest && dest.socket.readyState === dest.socket.CLOSED)) {
            mask |= 16;
          }
  
          return mask;
        },ioctl:function (sock, request, arg) {
          switch (request) {
            case 21531:
              var bytes = 0;
              if (sock.recv_queue.length) {
                bytes = sock.recv_queue[0].data.length;
              }
              HEAP32[((arg)>>2)]=bytes;
              return 0;
            default:
              return ERRNO_CODES.EINVAL;
          }
        },close:function (sock) {
          // if we've spawned a listen server, close it
          if (sock.server) {
            try {
              sock.server.close();
            } catch (e) {
            }
            sock.server = null;
          }
          // close any peer connections
          var peers = Object.keys(sock.peers);
          for (var i = 0; i < peers.length; i++) {
            var peer = sock.peers[peers[i]];
            try {
              peer.socket.close();
            } catch (e) {
            }
            SOCKFS.websocket_sock_ops.removePeer(sock, peer);
          }
          return 0;
        },bind:function (sock, addr, port) {
          if (typeof sock.saddr !== 'undefined' || typeof sock.sport !== 'undefined') {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);  // already bound
          }
          sock.saddr = addr;
          sock.sport = port || _mkport();
          // in order to emulate dgram sockets, we need to launch a listen server when
          // binding on a connection-less socket
          // note: this is only required on the server side
          if (sock.type === 2) {
            // close the existing server if it exists
            if (sock.server) {
              sock.server.close();
              sock.server = null;
            }
            // swallow error operation not supported error that occurs when binding in the
            // browser where this isn't supported
            try {
              sock.sock_ops.listen(sock, 0);
            } catch (e) {
              if (!(e instanceof FS.ErrnoError)) throw e;
              if (e.errno !== ERRNO_CODES.EOPNOTSUPP) throw e;
            }
          }
        },connect:function (sock, addr, port) {
          if (sock.server) {
            throw new FS.ErrnoError(ERRNO_CODS.EOPNOTSUPP);
          }
  
          // TODO autobind
          // if (!sock.addr && sock.type == 2) {
          // }
  
          // early out if we're already connected / in the middle of connecting
          if (typeof sock.daddr !== 'undefined' && typeof sock.dport !== 'undefined') {
            var dest = SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport);
            if (dest) {
              if (dest.socket.readyState === dest.socket.CONNECTING) {
                throw new FS.ErrnoError(ERRNO_CODES.EALREADY);
              } else {
                throw new FS.ErrnoError(ERRNO_CODES.EISCONN);
              }
            }
          }
  
          // add the socket to our peer list and set our
          // destination address / port to match
          var peer = SOCKFS.websocket_sock_ops.createPeer(sock, addr, port);
          sock.daddr = peer.addr;
          sock.dport = peer.port;
  
          // always "fail" in non-blocking mode
          throw new FS.ErrnoError(ERRNO_CODES.EINPROGRESS);
        },listen:function (sock, backlog) {
          if (!ENVIRONMENT_IS_NODE) {
            throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
          }
          if (sock.server) {
             throw new FS.ErrnoError(ERRNO_CODES.EINVAL);  // already listening
          }
          var WebSocketServer = require('ws').Server;
          var host = sock.saddr;
          sock.server = new WebSocketServer({
            host: host,
            port: sock.sport
            // TODO support backlog
          });
  
          sock.server.on('connection', function(ws) {
            if (sock.type === 1) {
              var newsock = SOCKFS.createSocket(sock.family, sock.type, sock.protocol);
  
              // create a peer on the new socket
              var peer = SOCKFS.websocket_sock_ops.createPeer(newsock, ws);
              newsock.daddr = peer.addr;
              newsock.dport = peer.port;
  
              // push to queue for accept to pick up
              sock.pending.push(newsock);
            } else {
              // create a peer on the listen socket so calling sendto
              // with the listen socket and an address will resolve
              // to the correct client
              SOCKFS.websocket_sock_ops.createPeer(sock, ws);
            }
          });
          sock.server.on('closed', function() {
            sock.server = null;
          });
          sock.server.on('error', function() {
            // don't throw
          });
        },accept:function (listensock) {
          if (!listensock.server) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          var newsock = listensock.pending.shift();
          newsock.stream.flags = listensock.stream.flags;
          return newsock;
        },getname:function (sock, peer) {
          var addr, port;
          if (peer) {
            if (sock.daddr === undefined || sock.dport === undefined) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
            }
            addr = sock.daddr;
            port = sock.dport;
          } else {
            // TODO saddr and sport will be set for bind()'d UDP sockets, but what
            // should we be returning for TCP sockets that've been connect()'d?
            addr = sock.saddr || 0;
            port = sock.sport || 0;
          }
          return { addr: addr, port: port };
        },sendmsg:function (sock, buffer, offset, length, addr, port) {
          if (sock.type === 2) {
            // connection-less sockets will honor the message address,
            // and otherwise fall back to the bound destination address
            if (addr === undefined || port === undefined) {
              addr = sock.daddr;
              port = sock.dport;
            }
            // if there was no address to fall back to, error out
            if (addr === undefined || port === undefined) {
              throw new FS.ErrnoError(ERRNO_CODES.EDESTADDRREQ);
            }
          } else {
            // connection-based sockets will only use the bound
            addr = sock.daddr;
            port = sock.dport;
          }
  
          // find the peer for the destination address
          var dest = SOCKFS.websocket_sock_ops.getPeer(sock, addr, port);
  
          // early out if not connected with a connection-based socket
          if (sock.type === 1) {
            if (!dest || dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
            } else if (dest.socket.readyState === dest.socket.CONNECTING) {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
          }
  
          // create a copy of the incoming data to send, as the WebSocket API
          // doesn't work entirely with an ArrayBufferView, it'll just send
          // the entire underlying buffer
          var data;
          if (buffer instanceof Array || buffer instanceof ArrayBuffer) {
            data = buffer.slice(offset, offset + length);
          } else {  // ArrayBufferView
            data = buffer.buffer.slice(buffer.byteOffset + offset, buffer.byteOffset + offset + length);
          }
  
          // if we're emulating a connection-less dgram socket and don't have
          // a cached connection, queue the buffer to send upon connect and
          // lie, saying the data was sent now.
          if (sock.type === 2) {
            if (!dest || dest.socket.readyState !== dest.socket.OPEN) {
              // if we're not connected, open a new connection
              if (!dest || dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {
                dest = SOCKFS.websocket_sock_ops.createPeer(sock, addr, port);
              }
              dest.dgram_send_queue.push(data);
              return length;
            }
          }
  
          try {
            // send the actual data
            dest.socket.send(data);
            return length;
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
        },recvmsg:function (sock, length) {
          // http://pubs.opengroup.org/onlinepubs/7908799/xns/recvmsg.html
          if (sock.type === 1 && sock.server) {
            // tcp servers should not be recv()'ing on the listen socket
            throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
          }
  
          var queued = sock.recv_queue.shift();
          if (!queued) {
            if (sock.type === 1) {
              var dest = SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport);
  
              if (!dest) {
                // if we have a destination address but are not connected, error out
                throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
              }
              else if (dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {
                // return null if the socket has closed
                return null;
              }
              else {
                // else, our socket is in a valid state but truly has nothing available
                throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
              }
            } else {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
          }
  
          // queued.data will be an ArrayBuffer if it's unadulterated, but if it's
          // requeued TCP data it'll be an ArrayBufferView
          var queuedLength = queued.data.byteLength || queued.data.length;
          var queuedOffset = queued.data.byteOffset || 0;
          var queuedBuffer = queued.data.buffer || queued.data;
          var bytesRead = Math.min(length, queuedLength);
          var res = {
            buffer: new Uint8Array(queuedBuffer, queuedOffset, bytesRead),
            addr: queued.addr,
            port: queued.port
          };
  
  
          // push back any unread data for TCP connections
          if (sock.type === 1 && bytesRead < queuedLength) {
            var bytesRemaining = queuedLength - bytesRead;
            queued.data = new Uint8Array(queuedBuffer, queuedOffset + bytesRead, bytesRemaining);
            sock.recv_queue.unshift(queued);
          }
  
          return res;
        }}};function _send(fd, buf, len, flags) {
      var sock = SOCKFS.getSocket(fd);
      if (!sock) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      // TODO honor flags
      return _write(fd, buf, len);
    }
  
  function _pwrite(fildes, buf, nbyte, offset) {
      // ssize_t pwrite(int fildes, const void *buf, size_t nbyte, off_t offset);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/write.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      try {
        var slab = HEAP8;
        return FS.write(stream, slab, buf, nbyte, offset);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _write(fildes, buf, nbyte) {
      // ssize_t write(int fildes, const void *buf, size_t nbyte);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/write.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
  
  
      try {
        var slab = HEAP8;
        return FS.write(stream, slab, buf, nbyte);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _fwrite(ptr, size, nitems, stream) {
      // size_t fwrite(const void *restrict ptr, size_t size, size_t nitems, FILE *restrict stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fwrite.html
      var bytesToWrite = nitems * size;
      if (bytesToWrite == 0) return 0;
      var bytesWritten = _write(stream, ptr, bytesToWrite);
      if (bytesWritten == -1) {
        var streamObj = FS.getStream(stream);
        if (streamObj) streamObj.error = true;
        return 0;
      } else {
        return Math.floor(bytesWritten / size);
      }
    }
  
  
   
  Module["_strlen"] = _strlen;
  
  function __reallyNegative(x) {
      return x < 0 || (x === 0 && (1/x) === -Infinity);
    }function __formatString(format, varargs) {
      var textIndex = format;
      var argIndex = 0;
      function getNextArg(type) {
        // NOTE: Explicitly ignoring type safety. Otherwise this fails:
        //       int x = 4; printf("%c\n", (char)x);
        var ret;
        if (type === 'double') {
          ret = HEAPF64[(((varargs)+(argIndex))>>3)];
        } else if (type == 'i64') {
          ret = [HEAP32[(((varargs)+(argIndex))>>2)],
                 HEAP32[(((varargs)+(argIndex+8))>>2)]];
          argIndex += 8; // each 32-bit chunk is in a 64-bit block
  
        } else {
          type = 'i32'; // varargs are always i32, i64, or double
          ret = HEAP32[(((varargs)+(argIndex))>>2)];
        }
        argIndex += Math.max(Runtime.getNativeFieldSize(type), Runtime.getAlignSize(type, null, true));
        return ret;
      }
  
      var ret = [];
      var curr, next, currArg;
      while(1) {
        var startTextIndex = textIndex;
        curr = HEAP8[(textIndex)];
        if (curr === 0) break;
        next = HEAP8[((textIndex+1)|0)];
        if (curr == 37) {
          // Handle flags.
          var flagAlwaysSigned = false;
          var flagLeftAlign = false;
          var flagAlternative = false;
          var flagZeroPad = false;
          var flagPadSign = false;
          flagsLoop: while (1) {
            switch (next) {
              case 43:
                flagAlwaysSigned = true;
                break;
              case 45:
                flagLeftAlign = true;
                break;
              case 35:
                flagAlternative = true;
                break;
              case 48:
                if (flagZeroPad) {
                  break flagsLoop;
                } else {
                  flagZeroPad = true;
                  break;
                }
              case 32:
                flagPadSign = true;
                break;
              default:
                break flagsLoop;
            }
            textIndex++;
            next = HEAP8[((textIndex+1)|0)];
          }
  
          // Handle width.
          var width = 0;
          if (next == 42) {
            width = getNextArg('i32');
            textIndex++;
            next = HEAP8[((textIndex+1)|0)];
          } else {
            while (next >= 48 && next <= 57) {
              width = width * 10 + (next - 48);
              textIndex++;
              next = HEAP8[((textIndex+1)|0)];
            }
          }
  
          // Handle precision.
          var precisionSet = false, precision = -1;
          if (next == 46) {
            precision = 0;
            precisionSet = true;
            textIndex++;
            next = HEAP8[((textIndex+1)|0)];
            if (next == 42) {
              precision = getNextArg('i32');
              textIndex++;
            } else {
              while(1) {
                var precisionChr = HEAP8[((textIndex+1)|0)];
                if (precisionChr < 48 ||
                    precisionChr > 57) break;
                precision = precision * 10 + (precisionChr - 48);
                textIndex++;
              }
            }
            next = HEAP8[((textIndex+1)|0)];
          }
          if (precision === -1) {
            precision = 6; // Standard default.
            precisionSet = false;
          }
  
          // Handle integer sizes. WARNING: These assume a 32-bit architecture!
          var argSize;
          switch (String.fromCharCode(next)) {
            case 'h':
              var nextNext = HEAP8[((textIndex+2)|0)];
              if (nextNext == 104) {
                textIndex++;
                argSize = 1; // char (actually i32 in varargs)
              } else {
                argSize = 2; // short (actually i32 in varargs)
              }
              break;
            case 'l':
              var nextNext = HEAP8[((textIndex+2)|0)];
              if (nextNext == 108) {
                textIndex++;
                argSize = 8; // long long
              } else {
                argSize = 4; // long
              }
              break;
            case 'L': // long long
            case 'q': // int64_t
            case 'j': // intmax_t
              argSize = 8;
              break;
            case 'z': // size_t
            case 't': // ptrdiff_t
            case 'I': // signed ptrdiff_t or unsigned size_t
              argSize = 4;
              break;
            default:
              argSize = null;
          }
          if (argSize) textIndex++;
          next = HEAP8[((textIndex+1)|0)];
  
          // Handle type specifier.
          switch (String.fromCharCode(next)) {
            case 'd': case 'i': case 'u': case 'o': case 'x': case 'X': case 'p': {
              // Integer.
              var signed = next == 100 || next == 105;
              argSize = argSize || 4;
              var currArg = getNextArg('i' + (argSize * 8));
              var origArg = currArg;
              var argText;
              // Flatten i64-1 [low, high] into a (slightly rounded) double
              if (argSize == 8) {
                currArg = Runtime.makeBigInt(currArg[0], currArg[1], next == 117);
              }
              // Truncate to requested size.
              if (argSize <= 4) {
                var limit = Math.pow(256, argSize) - 1;
                currArg = (signed ? reSign : unSign)(currArg & limit, argSize * 8);
              }
              // Format the number.
              var currAbsArg = Math.abs(currArg);
              var prefix = '';
              if (next == 100 || next == 105) {
                if (argSize == 8 && i64Math) argText = i64Math.stringify(origArg[0], origArg[1], null); else
                argText = reSign(currArg, 8 * argSize, 1).toString(10);
              } else if (next == 117) {
                if (argSize == 8 && i64Math) argText = i64Math.stringify(origArg[0], origArg[1], true); else
                argText = unSign(currArg, 8 * argSize, 1).toString(10);
                currArg = Math.abs(currArg);
              } else if (next == 111) {
                argText = (flagAlternative ? '0' : '') + currAbsArg.toString(8);
              } else if (next == 120 || next == 88) {
                prefix = (flagAlternative && currArg != 0) ? '0x' : '';
                if (argSize == 8 && i64Math) {
                  if (origArg[1]) {
                    argText = (origArg[1]>>>0).toString(16);
                    var lower = (origArg[0]>>>0).toString(16);
                    while (lower.length < 8) lower = '0' + lower;
                    argText += lower;
                  } else {
                    argText = (origArg[0]>>>0).toString(16);
                  }
                } else
                if (currArg < 0) {
                  // Represent negative numbers in hex as 2's complement.
                  currArg = -currArg;
                  argText = (currAbsArg - 1).toString(16);
                  var buffer = [];
                  for (var i = 0; i < argText.length; i++) {
                    buffer.push((0xF - parseInt(argText[i], 16)).toString(16));
                  }
                  argText = buffer.join('');
                  while (argText.length < argSize * 2) argText = 'f' + argText;
                } else {
                  argText = currAbsArg.toString(16);
                }
                if (next == 88) {
                  prefix = prefix.toUpperCase();
                  argText = argText.toUpperCase();
                }
              } else if (next == 112) {
                if (currAbsArg === 0) {
                  argText = '(nil)';
                } else {
                  prefix = '0x';
                  argText = currAbsArg.toString(16);
                }
              }
              if (precisionSet) {
                while (argText.length < precision) {
                  argText = '0' + argText;
                }
              }
  
              // Add sign if needed
              if (currArg >= 0) {
                if (flagAlwaysSigned) {
                  prefix = '+' + prefix;
                } else if (flagPadSign) {
                  prefix = ' ' + prefix;
                }
              }
  
              // Move sign to prefix so we zero-pad after the sign
              if (argText.charAt(0) == '-') {
                prefix = '-' + prefix;
                argText = argText.substr(1);
              }
  
              // Add padding.
              while (prefix.length + argText.length < width) {
                if (flagLeftAlign) {
                  argText += ' ';
                } else {
                  if (flagZeroPad) {
                    argText = '0' + argText;
                  } else {
                    prefix = ' ' + prefix;
                  }
                }
              }
  
              // Insert the result into the buffer.
              argText = prefix + argText;
              argText.split('').forEach(function(chr) {
                ret.push(chr.charCodeAt(0));
              });
              break;
            }
            case 'f': case 'F': case 'e': case 'E': case 'g': case 'G': {
              // Float.
              var currArg = getNextArg('double');
              var argText;
              if (isNaN(currArg)) {
                argText = 'nan';
                flagZeroPad = false;
              } else if (!isFinite(currArg)) {
                argText = (currArg < 0 ? '-' : '') + 'inf';
                flagZeroPad = false;
              } else {
                var isGeneral = false;
                var effectivePrecision = Math.min(precision, 20);
  
                // Convert g/G to f/F or e/E, as per:
                // http://pubs.opengroup.org/onlinepubs/9699919799/functions/printf.html
                if (next == 103 || next == 71) {
                  isGeneral = true;
                  precision = precision || 1;
                  var exponent = parseInt(currArg.toExponential(effectivePrecision).split('e')[1], 10);
                  if (precision > exponent && exponent >= -4) {
                    next = ((next == 103) ? 'f' : 'F').charCodeAt(0);
                    precision -= exponent + 1;
                  } else {
                    next = ((next == 103) ? 'e' : 'E').charCodeAt(0);
                    precision--;
                  }
                  effectivePrecision = Math.min(precision, 20);
                }
  
                if (next == 101 || next == 69) {
                  argText = currArg.toExponential(effectivePrecision);
                  // Make sure the exponent has at least 2 digits.
                  if (/[eE][-+]\d$/.test(argText)) {
                    argText = argText.slice(0, -1) + '0' + argText.slice(-1);
                  }
                } else if (next == 102 || next == 70) {
                  argText = currArg.toFixed(effectivePrecision);
                  if (currArg === 0 && __reallyNegative(currArg)) {
                    argText = '-' + argText;
                  }
                }
  
                var parts = argText.split('e');
                if (isGeneral && !flagAlternative) {
                  // Discard trailing zeros and periods.
                  while (parts[0].length > 1 && parts[0].indexOf('.') != -1 &&
                         (parts[0].slice(-1) == '0' || parts[0].slice(-1) == '.')) {
                    parts[0] = parts[0].slice(0, -1);
                  }
                } else {
                  // Make sure we have a period in alternative mode.
                  if (flagAlternative && argText.indexOf('.') == -1) parts[0] += '.';
                  // Zero pad until required precision.
                  while (precision > effectivePrecision++) parts[0] += '0';
                }
                argText = parts[0] + (parts.length > 1 ? 'e' + parts[1] : '');
  
                // Capitalize 'E' if needed.
                if (next == 69) argText = argText.toUpperCase();
  
                // Add sign.
                if (currArg >= 0) {
                  if (flagAlwaysSigned) {
                    argText = '+' + argText;
                  } else if (flagPadSign) {
                    argText = ' ' + argText;
                  }
                }
              }
  
              // Add padding.
              while (argText.length < width) {
                if (flagLeftAlign) {
                  argText += ' ';
                } else {
                  if (flagZeroPad && (argText[0] == '-' || argText[0] == '+')) {
                    argText = argText[0] + '0' + argText.slice(1);
                  } else {
                    argText = (flagZeroPad ? '0' : ' ') + argText;
                  }
                }
              }
  
              // Adjust case.
              if (next < 97) argText = argText.toUpperCase();
  
              // Insert the result into the buffer.
              argText.split('').forEach(function(chr) {
                ret.push(chr.charCodeAt(0));
              });
              break;
            }
            case 's': {
              // String.
              var arg = getNextArg('i8*');
              var argLength = arg ? _strlen(arg) : '(null)'.length;
              if (precisionSet) argLength = Math.min(argLength, precision);
              if (!flagLeftAlign) {
                while (argLength < width--) {
                  ret.push(32);
                }
              }
              if (arg) {
                for (var i = 0; i < argLength; i++) {
                  ret.push(HEAPU8[((arg++)|0)]);
                }
              } else {
                ret = ret.concat(intArrayFromString('(null)'.substr(0, argLength), true));
              }
              if (flagLeftAlign) {
                while (argLength < width--) {
                  ret.push(32);
                }
              }
              break;
            }
            case 'c': {
              // Character.
              if (flagLeftAlign) ret.push(getNextArg('i8'));
              while (--width > 0) {
                ret.push(32);
              }
              if (!flagLeftAlign) ret.push(getNextArg('i8'));
              break;
            }
            case 'n': {
              // Write the length written so far to the next parameter.
              var ptr = getNextArg('i32*');
              HEAP32[((ptr)>>2)]=ret.length;
              break;
            }
            case '%': {
              // Literal percent sign.
              ret.push(curr);
              break;
            }
            default: {
              // Unknown specifiers remain untouched.
              for (var i = startTextIndex; i < textIndex + 2; i++) {
                ret.push(HEAP8[(i)]);
              }
            }
          }
          textIndex += 2;
          // TODO: Support a/A (hex float) and m (last error) specifiers.
          // TODO: Support %1${specifier} for arg selection.
        } else {
          ret.push(curr);
          textIndex += 1;
        }
      }
      return ret;
    }function _fprintf(stream, format, varargs) {
      // int fprintf(FILE *restrict stream, const char *restrict format, ...);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/printf.html
      var result = __formatString(format, varargs);
      var stack = Runtime.stackSave();
      var ret = _fwrite(allocate(result, 'i8', ALLOC_STACK), 1, result.length, stream);
      Runtime.stackRestore(stack);
      return ret;
    }function _vfprintf(s, f, va_arg) {
      return _fprintf(s, f, HEAP32[((va_arg)>>2)]);
    }


  var _llvm_va_start=undefined;

  function _llvm_va_end() {}

  var _log=Math_log;

  var _floor=Math_floor;

  var _cos=Math_cos;

  var _sin=Math_sin;

  var _exp=Math_exp;

  var _ceil=Math_ceil;

  var _abs=Math_abs;

  
   
  Module["_memmove"] = _memmove;var _llvm_memmove_p0i8_p0i8_i32=_memmove;

  function _ExitMP3() {
  Module['printErr']('missing function: ExitMP3'); abort(-1);
  }

  function _InitMP3() {
  Module['printErr']('missing function: InitMP3'); abort(-1);
  }

  function _decodeMP3_unclipped() {
  Module['printErr']('missing function: decodeMP3_unclipped'); abort(-1);
  }

  var _sqrt=Math_sqrt;

  
  function __exit(status) {
      // void _exit(int status);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/exit.html
      Module['exit'](status);
    }function _exit(status) {
      __exit(status);
    }

  function _qsort(base, num, size, cmp) {
      if (num == 0 || size == 0) return;
      // forward calls to the JavaScript sort method
      // first, sort the items logically
      var keys = [];
      for (var i = 0; i < num; i++) keys.push(i);
      keys.sort(function(a, b) {
        return Module['dynCall_iii'](cmp, base+a*size, base+b*size);
      });
      // apply the sort
      var temp = _malloc(num*size);
      _memcpy(temp, base, num*size);
      for (var i = 0; i < num; i++) {
        if (keys[i] == i) continue; // already in place
        _memcpy(base+i*size, temp+keys[i]*size, size);
      }
      _free(temp);
    }

  var _fabsf=Math_abs;

  var _log10f=_log10;


  
  function _snprintf(s, n, format, varargs) {
      // int snprintf(char *restrict s, size_t n, const char *restrict format, ...);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/printf.html
      var result = __formatString(format, varargs);
      var limit = (n === undefined) ? result.length
                                    : Math.min(result.length, Math.max(n - 1, 0));
      if (s < 0) {
        s = -s;
        var buf = _malloc(limit+1);
        HEAP32[((s)>>2)]=buf;
        s = buf;
      }
      for (var i = 0; i < limit; i++) {
        HEAP8[(((s)+(i))|0)]=result[i];
      }
      if (limit < n || (n === undefined)) HEAP8[(((s)+(i))|0)]=0;
      return result.length;
    }function _sprintf(s, format, varargs) {
      // int sprintf(char *restrict s, const char *restrict format, ...);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/printf.html
      return _snprintf(s, undefined, format, varargs);
    }

   
  Module["_tolower"] = _tolower;

  function _abort() {
      Module['abort']();
    }

  function ___errno_location() {
      return ___errno_state;
    }

  function _sbrk(bytes) {
      // Implement a Linux-like 'memory area' for our 'process'.
      // Changes the size of the memory area by |bytes|; returns the
      // address of the previous top ('break') of the memory area
      // We control the "dynamic" memory - DYNAMIC_BASE to DYNAMICTOP
      var self = _sbrk;
      if (!self.called) {
        DYNAMICTOP = alignMemoryPage(DYNAMICTOP); // make sure we start out aligned
        self.called = true;
        assert(Runtime.dynamicAlloc);
        self.alloc = Runtime.dynamicAlloc;
        Runtime.dynamicAlloc = function() { abort('cannot dynamically allocate, sbrk now has control') };
      }
      var ret = DYNAMICTOP;
      if (bytes != 0) self.alloc(bytes);
      return ret;  // Previous break location.
    }

  function _sysconf(name) {
      // long sysconf(int name);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/sysconf.html
      switch(name) {
        case 30: return PAGE_SIZE;
        case 132:
        case 133:
        case 12:
        case 137:
        case 138:
        case 15:
        case 235:
        case 16:
        case 17:
        case 18:
        case 19:
        case 20:
        case 149:
        case 13:
        case 10:
        case 236:
        case 153:
        case 9:
        case 21:
        case 22:
        case 159:
        case 154:
        case 14:
        case 77:
        case 78:
        case 139:
        case 80:
        case 81:
        case 79:
        case 82:
        case 68:
        case 67:
        case 164:
        case 11:
        case 29:
        case 47:
        case 48:
        case 95:
        case 52:
        case 51:
        case 46:
          return 200809;
        case 27:
        case 246:
        case 127:
        case 128:
        case 23:
        case 24:
        case 160:
        case 161:
        case 181:
        case 182:
        case 242:
        case 183:
        case 184:
        case 243:
        case 244:
        case 245:
        case 165:
        case 178:
        case 179:
        case 49:
        case 50:
        case 168:
        case 169:
        case 175:
        case 170:
        case 171:
        case 172:
        case 97:
        case 76:
        case 32:
        case 173:
        case 35:
          return -1;
        case 176:
        case 177:
        case 7:
        case 155:
        case 8:
        case 157:
        case 125:
        case 126:
        case 92:
        case 93:
        case 129:
        case 130:
        case 131:
        case 94:
        case 91:
          return 1;
        case 74:
        case 60:
        case 69:
        case 70:
        case 4:
          return 1024;
        case 31:
        case 42:
        case 72:
          return 32;
        case 87:
        case 26:
        case 33:
          return 2147483647;
        case 34:
        case 1:
          return 47839;
        case 38:
        case 36:
          return 99;
        case 43:
        case 37:
          return 2048;
        case 0: return 2097152;
        case 3: return 65536;
        case 28: return 32768;
        case 44: return 32767;
        case 75: return 16384;
        case 39: return 1000;
        case 89: return 700;
        case 71: return 256;
        case 40: return 255;
        case 2: return 100;
        case 180: return 64;
        case 25: return 20;
        case 5: return 16;
        case 6: return 6;
        case 73: return 4;
        case 84: return 1;
      }
      ___setErrNo(ERRNO_CODES.EINVAL);
      return -1;
    }

  function _time(ptr) {
      var ret = Math.floor(Date.now()/1000);
      if (ptr) {
        HEAP32[((ptr)>>2)]=ret;
      }
      return ret;
    }






  var Browser={mainLoop:{scheduler:null,shouldPause:false,paused:false,queue:[],pause:function () {
          Browser.mainLoop.shouldPause = true;
        },resume:function () {
          if (Browser.mainLoop.paused) {
            Browser.mainLoop.paused = false;
            Browser.mainLoop.scheduler();
          }
          Browser.mainLoop.shouldPause = false;
        },updateStatus:function () {
          if (Module['setStatus']) {
            var message = Module['statusMessage'] || 'Please wait...';
            var remaining = Browser.mainLoop.remainingBlockers;
            var expected = Browser.mainLoop.expectedBlockers;
            if (remaining) {
              if (remaining < expected) {
                Module['setStatus'](message + ' (' + (expected - remaining) + '/' + expected + ')');
              } else {
                Module['setStatus'](message);
              }
            } else {
              Module['setStatus']('');
            }
          }
        }},isFullScreen:false,pointerLock:false,moduleContextCreatedCallbacks:[],workers:[],init:function () {
        if (!Module["preloadPlugins"]) Module["preloadPlugins"] = []; // needs to exist even in workers
  
        if (Browser.initted || ENVIRONMENT_IS_WORKER) return;
        Browser.initted = true;
  
        try {
          new Blob();
          Browser.hasBlobConstructor = true;
        } catch(e) {
          Browser.hasBlobConstructor = false;
          console.log("warning: no blob constructor, cannot create blobs with mimetypes");
        }
        Browser.BlobBuilder = typeof MozBlobBuilder != "undefined" ? MozBlobBuilder : (typeof WebKitBlobBuilder != "undefined" ? WebKitBlobBuilder : (!Browser.hasBlobConstructor ? console.log("warning: no BlobBuilder") : null));
        Browser.URLObject = typeof window != "undefined" ? (window.URL ? window.URL : window.webkitURL) : undefined;
        if (!Module.noImageDecoding && typeof Browser.URLObject === 'undefined') {
          console.log("warning: Browser does not support creating object URLs. Built-in browser image decoding will not be available.");
          Module.noImageDecoding = true;
        }
  
        // Support for plugins that can process preloaded files. You can add more of these to
        // your app by creating and appending to Module.preloadPlugins.
        //
        // Each plugin is asked if it can handle a file based on the file's name. If it can,
        // it is given the file's raw data. When it is done, it calls a callback with the file's
        // (possibly modified) data. For example, a plugin might decompress a file, or it
        // might create some side data structure for use later (like an Image element, etc.).
  
        var imagePlugin = {};
        imagePlugin['canHandle'] = function imagePlugin_canHandle(name) {
          return !Module.noImageDecoding && /\.(jpg|jpeg|png|bmp)$/i.test(name);
        };
        imagePlugin['handle'] = function imagePlugin_handle(byteArray, name, onload, onerror) {
          var b = null;
          if (Browser.hasBlobConstructor) {
            try {
              b = new Blob([byteArray], { type: Browser.getMimetype(name) });
              if (b.size !== byteArray.length) { // Safari bug #118630
                // Safari's Blob can only take an ArrayBuffer
                b = new Blob([(new Uint8Array(byteArray)).buffer], { type: Browser.getMimetype(name) });
              }
            } catch(e) {
              Runtime.warnOnce('Blob constructor present but fails: ' + e + '; falling back to blob builder');
            }
          }
          if (!b) {
            var bb = new Browser.BlobBuilder();
            bb.append((new Uint8Array(byteArray)).buffer); // we need to pass a buffer, and must copy the array to get the right data range
            b = bb.getBlob();
          }
          var url = Browser.URLObject.createObjectURL(b);
          var img = new Image();
          img.onload = function img_onload() {
            assert(img.complete, 'Image ' + name + ' could not be decoded');
            var canvas = document.createElement('canvas');
            canvas.width = img.width;
            canvas.height = img.height;
            var ctx = canvas.getContext('2d');
            ctx.drawImage(img, 0, 0);
            Module["preloadedImages"][name] = canvas;
            Browser.URLObject.revokeObjectURL(url);
            if (onload) onload(byteArray);
          };
          img.onerror = function img_onerror(event) {
            console.log('Image ' + url + ' could not be decoded');
            if (onerror) onerror();
          };
          img.src = url;
        };
        Module['preloadPlugins'].push(imagePlugin);
  
        var audioPlugin = {};
        audioPlugin['canHandle'] = function audioPlugin_canHandle(name) {
          return !Module.noAudioDecoding && name.substr(-4) in { '.ogg': 1, '.wav': 1, '.mp3': 1 };
        };
        audioPlugin['handle'] = function audioPlugin_handle(byteArray, name, onload, onerror) {
          var done = false;
          function finish(audio) {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = audio;
            if (onload) onload(byteArray);
          }
          function fail() {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = new Audio(); // empty shim
            if (onerror) onerror();
          }
          if (Browser.hasBlobConstructor) {
            try {
              var b = new Blob([byteArray], { type: Browser.getMimetype(name) });
            } catch(e) {
              return fail();
            }
            var url = Browser.URLObject.createObjectURL(b); // XXX we never revoke this!
            var audio = new Audio();
            audio.addEventListener('canplaythrough', function() { finish(audio) }, false); // use addEventListener due to chromium bug 124926
            audio.onerror = function audio_onerror(event) {
              if (done) return;
              console.log('warning: browser could not fully decode audio ' + name + ', trying slower base64 approach');
              function encode64(data) {
                var BASE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
                var PAD = '=';
                var ret = '';
                var leftchar = 0;
                var leftbits = 0;
                for (var i = 0; i < data.length; i++) {
                  leftchar = (leftchar << 8) | data[i];
                  leftbits += 8;
                  while (leftbits >= 6) {
                    var curr = (leftchar >> (leftbits-6)) & 0x3f;
                    leftbits -= 6;
                    ret += BASE[curr];
                  }
                }
                if (leftbits == 2) {
                  ret += BASE[(leftchar&3) << 4];
                  ret += PAD + PAD;
                } else if (leftbits == 4) {
                  ret += BASE[(leftchar&0xf) << 2];
                  ret += PAD;
                }
                return ret;
              }
              audio.src = 'data:audio/x-' + name.substr(-3) + ';base64,' + encode64(byteArray);
              finish(audio); // we don't wait for confirmation this worked - but it's worth trying
            };
            audio.src = url;
            // workaround for chrome bug 124926 - we do not always get oncanplaythrough or onerror
            Browser.safeSetTimeout(function() {
              finish(audio); // try to use it even though it is not necessarily ready to play
            }, 10000);
          } else {
            return fail();
          }
        };
        Module['preloadPlugins'].push(audioPlugin);
  
        // Canvas event setup
  
        var canvas = Module['canvas'];
        canvas.requestPointerLock = canvas['requestPointerLock'] ||
                                    canvas['mozRequestPointerLock'] ||
                                    canvas['webkitRequestPointerLock'];
        canvas.exitPointerLock = document['exitPointerLock'] ||
                                 document['mozExitPointerLock'] ||
                                 document['webkitExitPointerLock'] ||
                                 function(){}; // no-op if function does not exist
        canvas.exitPointerLock = canvas.exitPointerLock.bind(document);
  
        function pointerLockChange() {
          Browser.pointerLock = document['pointerLockElement'] === canvas ||
                                document['mozPointerLockElement'] === canvas ||
                                document['webkitPointerLockElement'] === canvas;
        }
  
        document.addEventListener('pointerlockchange', pointerLockChange, false);
        document.addEventListener('mozpointerlockchange', pointerLockChange, false);
        document.addEventListener('webkitpointerlockchange', pointerLockChange, false);
  
        if (Module['elementPointerLock']) {
          canvas.addEventListener("click", function(ev) {
            if (!Browser.pointerLock && canvas.requestPointerLock) {
              canvas.requestPointerLock();
              ev.preventDefault();
            }
          }, false);
        }
      },createContext:function (canvas, useWebGL, setInModule, webGLContextAttributes) {
        var ctx;
        try {
          if (useWebGL) {
            var contextAttributes = {
              antialias: false,
              alpha: false
            };
  
            if (webGLContextAttributes) {
              for (var attribute in webGLContextAttributes) {
                contextAttributes[attribute] = webGLContextAttributes[attribute];
              }
            }
  
  
            var errorInfo = '?';
            function onContextCreationError(event) {
              errorInfo = event.statusMessage || errorInfo;
            }
            canvas.addEventListener('webglcontextcreationerror', onContextCreationError, false);
            try {
              ['experimental-webgl', 'webgl'].some(function(webglId) {
                return ctx = canvas.getContext(webglId, contextAttributes);
              });
            } finally {
              canvas.removeEventListener('webglcontextcreationerror', onContextCreationError, false);
            }
          } else {
            ctx = canvas.getContext('2d');
          }
          if (!ctx) throw ':(';
        } catch (e) {
          Module.print('Could not create canvas: ' + [errorInfo, e]);
          return null;
        }
        if (useWebGL) {
          // Set the background of the WebGL canvas to black
          canvas.style.backgroundColor = "black";
  
          // Warn on context loss
          canvas.addEventListener('webglcontextlost', function(event) {
            alert('WebGL context lost. You will need to reload the page.');
          }, false);
        }
        if (setInModule) {
          GLctx = Module.ctx = ctx;
          Module.useWebGL = useWebGL;
          Browser.moduleContextCreatedCallbacks.forEach(function(callback) { callback() });
          Browser.init();
        }
        return ctx;
      },destroyContext:function (canvas, useWebGL, setInModule) {},fullScreenHandlersInstalled:false,lockPointer:undefined,resizeCanvas:undefined,requestFullScreen:function (lockPointer, resizeCanvas) {
        Browser.lockPointer = lockPointer;
        Browser.resizeCanvas = resizeCanvas;
        if (typeof Browser.lockPointer === 'undefined') Browser.lockPointer = true;
        if (typeof Browser.resizeCanvas === 'undefined') Browser.resizeCanvas = false;
  
        var canvas = Module['canvas'];
        function fullScreenChange() {
          Browser.isFullScreen = false;
          if ((document['webkitFullScreenElement'] || document['webkitFullscreenElement'] ||
               document['mozFullScreenElement'] || document['mozFullscreenElement'] ||
               document['fullScreenElement'] || document['fullscreenElement']) === canvas) {
            canvas.cancelFullScreen = document['cancelFullScreen'] ||
                                      document['mozCancelFullScreen'] ||
                                      document['webkitCancelFullScreen'];
            canvas.cancelFullScreen = canvas.cancelFullScreen.bind(document);
            if (Browser.lockPointer) canvas.requestPointerLock();
            Browser.isFullScreen = true;
            if (Browser.resizeCanvas) Browser.setFullScreenCanvasSize();
          } else if (Browser.resizeCanvas){
            Browser.setWindowedCanvasSize();
          }
          if (Module['onFullScreen']) Module['onFullScreen'](Browser.isFullScreen);
        }
  
        if (!Browser.fullScreenHandlersInstalled) {
          Browser.fullScreenHandlersInstalled = true;
          document.addEventListener('fullscreenchange', fullScreenChange, false);
          document.addEventListener('mozfullscreenchange', fullScreenChange, false);
          document.addEventListener('webkitfullscreenchange', fullScreenChange, false);
        }
  
        canvas.requestFullScreen = canvas['requestFullScreen'] ||
                                   canvas['mozRequestFullScreen'] ||
                                   (canvas['webkitRequestFullScreen'] ? function() { canvas['webkitRequestFullScreen'](Element['ALLOW_KEYBOARD_INPUT']) } : null);
        canvas.requestFullScreen();
      },requestAnimationFrame:function requestAnimationFrame(func) {
        if (typeof window === 'undefined') { // Provide fallback to setTimeout if window is undefined (e.g. in Node.js)
          setTimeout(func, 1000/60);
        } else {
          if (!window.requestAnimationFrame) {
            window.requestAnimationFrame = window['requestAnimationFrame'] ||
                                           window['mozRequestAnimationFrame'] ||
                                           window['webkitRequestAnimationFrame'] ||
                                           window['msRequestAnimationFrame'] ||
                                           window['oRequestAnimationFrame'] ||
                                           window['setTimeout'];
          }
          window.requestAnimationFrame(func);
        }
      },safeCallback:function (func) {
        return function() {
          if (!ABORT) return func.apply(null, arguments);
        };
      },safeRequestAnimationFrame:function (func) {
        return Browser.requestAnimationFrame(function() {
          if (!ABORT) func();
        });
      },safeSetTimeout:function (func, timeout) {
        return setTimeout(function() {
          if (!ABORT) func();
        }, timeout);
      },safeSetInterval:function (func, timeout) {
        return setInterval(function() {
          if (!ABORT) func();
        }, timeout);
      },getMimetype:function (name) {
        return {
          'jpg': 'image/jpeg',
          'jpeg': 'image/jpeg',
          'png': 'image/png',
          'bmp': 'image/bmp',
          'ogg': 'audio/ogg',
          'wav': 'audio/wav',
          'mp3': 'audio/mpeg'
        }[name.substr(name.lastIndexOf('.')+1)];
      },getUserMedia:function (func) {
        if(!window.getUserMedia) {
          window.getUserMedia = navigator['getUserMedia'] ||
                                navigator['mozGetUserMedia'];
        }
        window.getUserMedia(func);
      },getMovementX:function (event) {
        return event['movementX'] ||
               event['mozMovementX'] ||
               event['webkitMovementX'] ||
               0;
      },getMovementY:function (event) {
        return event['movementY'] ||
               event['mozMovementY'] ||
               event['webkitMovementY'] ||
               0;
      },mouseX:0,mouseY:0,mouseMovementX:0,mouseMovementY:0,calculateMouseEvent:function (event) { // event should be mousemove, mousedown or mouseup
        if (Browser.pointerLock) {
          // When the pointer is locked, calculate the coordinates
          // based on the movement of the mouse.
          // Workaround for Firefox bug 764498
          if (event.type != 'mousemove' &&
              ('mozMovementX' in event)) {
            Browser.mouseMovementX = Browser.mouseMovementY = 0;
          } else {
            Browser.mouseMovementX = Browser.getMovementX(event);
            Browser.mouseMovementY = Browser.getMovementY(event);
          }
          
          // check if SDL is available
          if (typeof SDL != "undefined") {
          	Browser.mouseX = SDL.mouseX + Browser.mouseMovementX;
          	Browser.mouseY = SDL.mouseY + Browser.mouseMovementY;
          } else {
          	// just add the mouse delta to the current absolut mouse position
          	// FIXME: ideally this should be clamped against the canvas size and zero
          	Browser.mouseX += Browser.mouseMovementX;
          	Browser.mouseY += Browser.mouseMovementY;
          }        
        } else {
          // Otherwise, calculate the movement based on the changes
          // in the coordinates.
          var rect = Module["canvas"].getBoundingClientRect();
          var x, y;
          
          // Neither .scrollX or .pageXOffset are defined in a spec, but
          // we prefer .scrollX because it is currently in a spec draft.
          // (see: http://www.w3.org/TR/2013/WD-cssom-view-20131217/)
          var scrollX = ((typeof window.scrollX !== 'undefined') ? window.scrollX : window.pageXOffset);
          var scrollY = ((typeof window.scrollY !== 'undefined') ? window.scrollY : window.pageYOffset);
          if (event.type == 'touchstart' ||
              event.type == 'touchend' ||
              event.type == 'touchmove') {
            var t = event.touches.item(0);
            if (t) {
              x = t.pageX - (scrollX + rect.left);
              y = t.pageY - (scrollY + rect.top);
            } else {
              return;
            }
          } else {
            x = event.pageX - (scrollX + rect.left);
            y = event.pageY - (scrollY + rect.top);
          }
  
          // the canvas might be CSS-scaled compared to its backbuffer;
          // SDL-using content will want mouse coordinates in terms
          // of backbuffer units.
          var cw = Module["canvas"].width;
          var ch = Module["canvas"].height;
          x = x * (cw / rect.width);
          y = y * (ch / rect.height);
  
          Browser.mouseMovementX = x - Browser.mouseX;
          Browser.mouseMovementY = y - Browser.mouseY;
          Browser.mouseX = x;
          Browser.mouseY = y;
        }
      },xhrLoad:function (url, onload, onerror) {
        var xhr = new XMLHttpRequest();
        xhr.open('GET', url, true);
        xhr.responseType = 'arraybuffer';
        xhr.onload = function xhr_onload() {
          if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
            onload(xhr.response);
          } else {
            onerror();
          }
        };
        xhr.onerror = onerror;
        xhr.send(null);
      },asyncLoad:function (url, onload, onerror, noRunDep) {
        Browser.xhrLoad(url, function(arrayBuffer) {
          assert(arrayBuffer, 'Loading data file "' + url + '" failed (no arrayBuffer).');
          onload(new Uint8Array(arrayBuffer));
          if (!noRunDep) removeRunDependency('al ' + url);
        }, function(event) {
          if (onerror) {
            onerror();
          } else {
            throw 'Loading data file "' + url + '" failed.';
          }
        });
        if (!noRunDep) addRunDependency('al ' + url);
      },resizeListeners:[],updateResizeListeners:function () {
        var canvas = Module['canvas'];
        Browser.resizeListeners.forEach(function(listener) {
          listener(canvas.width, canvas.height);
        });
      },setCanvasSize:function (width, height, noUpdates) {
        var canvas = Module['canvas'];
        canvas.width = width;
        canvas.height = height;
        if (!noUpdates) Browser.updateResizeListeners();
      },windowedWidth:0,windowedHeight:0,setFullScreenCanvasSize:function () {
        var canvas = Module['canvas'];
        this.windowedWidth = canvas.width;
        this.windowedHeight = canvas.height;
        canvas.width = screen.width;
        canvas.height = screen.height;
        // check if SDL is available   
        if (typeof SDL != "undefined") {
        	var flags = HEAPU32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)];
        	flags = flags | 0x00800000; // set SDL_FULLSCREEN flag
        	HEAP32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)]=flags
        }
        Browser.updateResizeListeners();
      },setWindowedCanvasSize:function () {
        var canvas = Module['canvas'];
        canvas.width = this.windowedWidth;
        canvas.height = this.windowedHeight;
        // check if SDL is available       
        if (typeof SDL != "undefined") {
        	var flags = HEAPU32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)];
        	flags = flags & ~0x00800000; // clear SDL_FULLSCREEN flag
        	HEAP32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)]=flags
        }
        Browser.updateResizeListeners();
      }};
FS.staticInit();__ATINIT__.unshift({ func: function() { if (!Module["noFSInit"] && !FS.init.initialized) FS.init() } });__ATMAIN__.push({ func: function() { FS.ignorePermissions = false } });__ATEXIT__.push({ func: function() { FS.quit() } });Module["FS_createFolder"] = FS.createFolder;Module["FS_createPath"] = FS.createPath;Module["FS_createDataFile"] = FS.createDataFile;Module["FS_createPreloadedFile"] = FS.createPreloadedFile;Module["FS_createLazyFile"] = FS.createLazyFile;Module["FS_createLink"] = FS.createLink;Module["FS_createDevice"] = FS.createDevice;
___errno_state = Runtime.staticAlloc(4); HEAP32[((___errno_state)>>2)]=0;
__ATINIT__.unshift({ func: function() { TTY.init() } });__ATEXIT__.push({ func: function() { TTY.shutdown() } });TTY.utf8 = new Runtime.UTF8Processor();
if (ENVIRONMENT_IS_NODE) { var fs = require("fs"); NODEFS.staticInit(); }
__ATINIT__.push({ func: function() { SOCKFS.root = FS.mount(SOCKFS, {}, null); } });
Module["requestFullScreen"] = function Module_requestFullScreen(lockPointer, resizeCanvas) { Browser.requestFullScreen(lockPointer, resizeCanvas) };
  Module["requestAnimationFrame"] = function Module_requestAnimationFrame(func) { Browser.requestAnimationFrame(func) };
  Module["setCanvasSize"] = function Module_setCanvasSize(width, height, noUpdates) { Browser.setCanvasSize(width, height, noUpdates) };
  Module["pauseMainLoop"] = function Module_pauseMainLoop() { Browser.mainLoop.pause() };
  Module["resumeMainLoop"] = function Module_resumeMainLoop() { Browser.mainLoop.resume() };
  Module["getUserMedia"] = function Module_getUserMedia() { Browser.getUserMedia() }
STACK_BASE = STACKTOP = Runtime.alignMemory(STATICTOP);

staticSealed = true; // seal the static portion of memory

STACK_MAX = STACK_BASE + 5242880;

DYNAMIC_BASE = DYNAMICTOP = Runtime.alignMemory(STACK_MAX);

assert(DYNAMIC_BASE < TOTAL_MEMORY, "TOTAL_MEMORY not big enough for stack");


var Math_min = Math.min;
function invoke_ii(index,a1) {
  try {
    return Module["dynCall_ii"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiifii(index,a1,a2,a3,a4,a5) {
  try {
    return Module["dynCall_iiifii"](index,a1,a2,a3,a4,a5);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_vi(index,a1) {
  try {
    Module["dynCall_vi"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_vii(index,a1,a2) {
  try {
    Module["dynCall_vii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiiiiii(index,a1,a2,a3,a4,a5,a6) {
  try {
    return Module["dynCall_iiiiiii"](index,a1,a2,a3,a4,a5,a6);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiii(index,a1,a2,a3) {
  try {
    return Module["dynCall_iiii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_v(index) {
  try {
    Module["dynCall_v"](index);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiiii(index,a1,a2,a3,a4) {
  try {
    return Module["dynCall_iiiii"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iii(index,a1,a2) {
  try {
    return Module["dynCall_iii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiii(index,a1,a2,a3,a4) {
  try {
    Module["dynCall_viiii"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function asmPrintInt(x, y) {
  Module.print('int ' + x + ',' + y);// + ' ' + new Error().stack);
}
function asmPrintFloat(x, y) {
  Module.print('float ' + x + ',' + y);// + ' ' + new Error().stack);
}
// EMSCRIPTEN_START_ASM
var asm = (function(global, env, buffer) {
  'use asm';
  var HEAP8 = new global.Int8Array(buffer);
  var HEAP16 = new global.Int16Array(buffer);
  var HEAP32 = new global.Int32Array(buffer);
  var HEAPU8 = new global.Uint8Array(buffer);
  var HEAPU16 = new global.Uint16Array(buffer);
  var HEAPU32 = new global.Uint32Array(buffer);
  var HEAPF32 = new global.Float32Array(buffer);
  var HEAPF64 = new global.Float64Array(buffer);

  var STACKTOP=env.STACKTOP|0;
  var STACK_MAX=env.STACK_MAX|0;
  var tempDoublePtr=env.tempDoublePtr|0;
  var ABORT=env.ABORT|0;
  var _stderr=env._stderr|0;
  var _freqs=env._freqs|0;
  var _tabsel_123=env._tabsel_123|0;
  var NaN=+env.NaN;
  var Infinity=+env.Infinity;

  var __THREW__ = 0;
  var threwValue = 0;
  var setjmpId = 0;
  var undef = 0;
  var tempInt = 0, tempBigInt = 0, tempBigIntP = 0, tempBigIntS = 0, tempBigIntR = 0.0, tempBigIntI = 0, tempBigIntD = 0, tempValue = 0, tempDouble = 0.0;

  var tempRet0 = 0;
  var tempRet1 = 0;
  var tempRet2 = 0;
  var tempRet3 = 0;
  var tempRet4 = 0;
  var tempRet5 = 0;
  var tempRet6 = 0;
  var tempRet7 = 0;
  var tempRet8 = 0;
  var tempRet9 = 0;
  var Math_floor=global.Math.floor;
  var Math_abs=global.Math.abs;
  var Math_sqrt=global.Math.sqrt;
  var Math_pow=global.Math.pow;
  var Math_cos=global.Math.cos;
  var Math_sin=global.Math.sin;
  var Math_tan=global.Math.tan;
  var Math_acos=global.Math.acos;
  var Math_asin=global.Math.asin;
  var Math_atan=global.Math.atan;
  var Math_atan2=global.Math.atan2;
  var Math_exp=global.Math.exp;
  var Math_log=global.Math.log;
  var Math_ceil=global.Math.ceil;
  var Math_imul=global.Math.imul;
  var abort=env.abort;
  var assert=env.assert;
  var asmPrintInt=env.asmPrintInt;
  var asmPrintFloat=env.asmPrintFloat;
  var Math_min=env.min;
  var invoke_ii=env.invoke_ii;
  var invoke_iiifii=env.invoke_iiifii;
  var invoke_vi=env.invoke_vi;
  var invoke_vii=env.invoke_vii;
  var invoke_iiiiiii=env.invoke_iiiiiii;
  var invoke_iiii=env.invoke_iiii;
  var invoke_v=env.invoke_v;
  var invoke_iiiii=env.invoke_iiiii;
  var invoke_iii=env.invoke_iii;
  var invoke_viiii=env.invoke_viiii;
  var _llvm_va_end=env._llvm_va_end;
  var _fabsf=env._fabsf;
  var _snprintf=env._snprintf;
  var _abort=env._abort;
  var _fprintf=env._fprintf;
  var _sqrt=env._sqrt;
  var _fflush=env._fflush;
  var __reallyNegative=env.__reallyNegative;
  var _llvm_pow_f32=env._llvm_pow_f32;
  var _log=env._log;
  var _fabs=env._fabs;
  var _floor=env._floor;
  var ___setErrNo=env.___setErrNo;
  var _fwrite=env._fwrite;
  var _decodeMP3_unclipped=env._decodeMP3_unclipped;
  var _qsort=env._qsort;
  var _send=env._send;
  var _write=env._write;
  var _abs=env._abs;
  var _exit=env._exit;
  var _sprintf=env._sprintf;
  var _log10=env._log10;
  var _sin=env._sin;
  var _ExitMP3=env._ExitMP3;
  var _InitMP3=env._InitMP3;
  var _atan=env._atan;
  var _time=env._time;
  var __formatString=env.__formatString;
  var _ceil=env._ceil;
  var _vfprintf=env._vfprintf;
  var _cos=env._cos;
  var _pwrite=env._pwrite;
  var _llvm_pow_f64=env._llvm_pow_f64;
  var _sbrk=env._sbrk;
  var ___errno_location=env.___errno_location;
  var _exp=env._exp;
  var _sysconf=env._sysconf;
  var __exit=env.__exit;
  var tempFloat = 0.0;

// EMSCRIPTEN_START_FUNCS
function stackAlloc(size) {
  size = size|0;
  var ret = 0;
  ret = STACKTOP;
  STACKTOP = (STACKTOP + size)|0;
STACKTOP = (STACKTOP + 7)&-8;
  return ret|0;
}
function stackSave() {
  return STACKTOP|0;
}
function stackRestore(top) {
  top = top|0;
  STACKTOP = top;
}
function setThrew(threw, value) {
  threw = threw|0;
  value = value|0;
  if ((__THREW__|0) == 0) {
    __THREW__ = threw;
    threwValue = value;
  }
}
function copyTempFloat(ptr) {
  ptr = ptr|0;
  HEAP8[tempDoublePtr] = HEAP8[ptr];
  HEAP8[tempDoublePtr+1|0] = HEAP8[ptr+1|0];
  HEAP8[tempDoublePtr+2|0] = HEAP8[ptr+2|0];
  HEAP8[tempDoublePtr+3|0] = HEAP8[ptr+3|0];
}
function copyTempDouble(ptr) {
  ptr = ptr|0;
  HEAP8[tempDoublePtr] = HEAP8[ptr];
  HEAP8[tempDoublePtr+1|0] = HEAP8[ptr+1|0];
  HEAP8[tempDoublePtr+2|0] = HEAP8[ptr+2|0];
  HEAP8[tempDoublePtr+3|0] = HEAP8[ptr+3|0];
  HEAP8[tempDoublePtr+4|0] = HEAP8[ptr+4|0];
  HEAP8[tempDoublePtr+5|0] = HEAP8[ptr+5|0];
  HEAP8[tempDoublePtr+6|0] = HEAP8[ptr+6|0];
  HEAP8[tempDoublePtr+7|0] = HEAP8[ptr+7|0];
}

function setTempRet0(value) {
  value = value|0;
  tempRet0 = value;
}

function setTempRet1(value) {
  value = value|0;
  tempRet1 = value;
}

function setTempRet2(value) {
  value = value|0;
  tempRet2 = value;
}

function setTempRet3(value) {
  value = value|0;
  tempRet3 = value;
}

function setTempRet4(value) {
  value = value|0;
  tempRet4 = value;
}

function setTempRet5(value) {
  value = value|0;
  tempRet5 = value;
}

function setTempRet6(value) {
  value = value|0;
  tempRet6 = value;
}

function setTempRet7(value) {
  value = value|0;
  tempRet7 = value;
}

function setTempRet8(value) {
  value = value|0;
  tempRet8 = value;
}

function setTempRet9(value) {
  value = value|0;
  tempRet9 = value;
}
function runPostSets() {


}

function _iteration_init($gfc){
 $gfc=($gfc)|0;
 var $1=0,$cfg=0,$l3_side=0,$adjust=.0,$db=.0,$i=0,$sel=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$11=0,$12=0,$13=0,$14=0,$15=0;
 var $17=0,$18=0,$20=0,$21=.0,$22=.0,$23=.0,$24=.0,$25=0,$26=0,$28=0,$29=0,$32=0,$33=0,$35=0,$36=.0,$37=.0,$38=0,$39=0,$40=0,$41=.0;
 var $42=0,$43=0,$44=.0,$45=.0,$46=.0,$47=.0,$48=.0,$49=.0,$50=.0,$51=0,$52=0,$54=0,$55=0,$58=0,$59=0,$61=0,$62=0,$63=.0,$64=.0,$65=.0;
 var $66=.0,$67=0,$68=0,$70=0,$71=0,$74=0,$75=0,$77=0,$78=0,$79=0,$80=.0,$81=.0,$82=.0,$83=.0,$84=0,$85=0,$87=0,$88=0,$90=0,$91=0;
 var $92=0,$93=0,$94=.0,$95=0,$96=0,$97=0,$98=.0,$99=.0,$100=.0,$101=.0,$102=.0,$104=0,$105=0,$107=.0,$108=0,$109=0,$110=0,$111=0,$112=0,$114=0;
 var $115=0,$117=0,$118=0,$119=.0,$120=0,$121=0,$122=0,$123=.0,$124=.0,$125=.0,$126=.0,$127=.0,$129=0,$130=0,$132=.0,$133=0,$134=0,$135=0,$136=0,$137=0;
 var $139=0,$140=0,$142=0,$143=0,$144=.0,$145=0,$146=0,$147=0,$148=.0,$149=.0,$150=.0,$151=.0,$152=.0,$154=0,$155=0,$157=.0,$158=0,$159=0,$160=0,$161=0;
 var $162=0,$164=0,$165=0,$167=0,$168=0,$169=.0,$170=0,$171=0,$172=0,$173=.0,$174=.0,$175=.0,$176=.0,$177=.0,$179=0,$180=0,$182=.0,$183=0,$184=0,$185=0;
 var $186=0,$187=0,$189=0,$190=0,$192=0,$193=0,$194=.0,$195=0,$196=0,$197=0,$198=.0,$199=.0,$200=.0,$201=.0,$202=.0,$204=0,$205=0,$207=.0,$208=0,$209=0;
 var $210=0,$211=0,$212=0,$214=0,$215=0,$217=0,$218=0,$219=.0,$220=0,$221=0,$222=0,$223=.0,$224=.0,$225=.0,$226=.0,$227=.0,$229=0,$230=0,$232=.0,$233=0;
 var $234=0,$235=0,$236=0,$237=0,$239=0,$240=0,$242=0,$243=0,$244=.0,$245=0,$246=0,$247=0,$248=.0,$249=.0,$250=.0,$251=.0,$252=.0,$254=0,$255=0,$257=.0;
 var $258=0,$259=0,$260=0,$261=0,$262=0,$264=0,$265=0,$267=0,$268=0,$269=.0,$270=0,$271=0,$272=0,$273=.0,$274=.0,$275=.0,$276=.0,$277=.0,$279=0,$280=0;
 var $282=.0,$283=0,$284=0,$285=0,$286=0,$287=0,$289=0,$290=0,label=0;
 var sp=0;sp=STACKTOP;







 $1=$gfc;
 $2=$1;
 $3=(($2+16)|0);
 $cfg=$3;
 $4=$1;
 $5=(($4+304)|0);
 $l3_side=$5;
 $6=$1;
 $7=(($6+8)|0);
 $8=((HEAP32[(($7)>>2)])|0);
 $9=($8|0)==0;
 if (!($9)) {
  STACKTOP=sp;return;
 }
 $11=$1;
 $12=(($11+8)|0);
 HEAP32[(($12)>>2)]=1;
 $13=$l3_side;
 $14=(($13+21008)|0);
 HEAP32[(($14)>>2)]=0;
 $15=$1;
 _compute_ath($15);
 HEAPF32[((22952)>>2)]=0.0;
 $i=1;
 while(1) {
  $17=$i;
  $18=($17|0)<8208;
  if (!($18)) {
   break;
  }
  $20=$i;
  $21=(+((($20|0))|0));
  $22=$21;
  $23=(+(Math_pow((+($22)),1.3333333333333333)));
  $24=$23;
  $25=$i;
  $26=((22952+($25<<2))|0);
  HEAPF32[(($26)>>2)]=$24;
  $28=$i;
  $29=((($28)+(1))|0);
  $i=$29;
 }
 HEAPF32[((69616)>>2)]=0.0;
 $i=1;
 while(1) {
  $32=$i;
  $33=($32|0)<8208;
  if (!($33)) {
   break;
  }
  $35=$i;
  $36=(+((($35|0))|0));
  $37=($36)-((0.5));
  $38=$i;
  $39=((($38)-(1))|0);
  $40=((22952+($39<<2))|0);
  $41=(+(HEAPF32[(($40)>>2)]));
  $42=$i;
  $43=((22952+($42<<2))|0);
  $44=(+(HEAPF32[(($43)>>2)]));
  $45=($41)+($44);
  $46=$45;
  $47=((0.5))*($46);
  $48=(+(Math_pow((+($47)),0.75)));
  $49=($37)-($48);
  $50=$49;
  $51=$i;
  $52=((69616+($51<<2))|0);
  HEAPF32[(($52)>>2)]=$50;
  $54=$i;
  $55=((($54)+(1))|0);
  $i=$55;
 }
 $i=0;
 while(1) {
  $58=$i;
  $59=($58|0)<257;
  if (!($59)) {
   break;
  }
  $61=$i;
  $62=((($61)-(210))|0);
  $63=(+((($62|0))|0));
  $64=($63)*((-0.1875));
  $65=(+(Math_pow(2.0,(+($64)))));
  $66=$65;
  $67=$i;
  $68=((59360+($67<<2))|0);
  HEAPF32[(($68)>>2)]=$66;
  $70=$i;
  $71=((($70)+(1))|0);
  $i=$71;
 }
 $i=0;
 while(1) {
  $74=$i;
  $75=($74|0)<=373;
  if (!($75)) {
   break;
  }
  $77=$i;
  $78=((($77)-(210))|0);
  $79=((($78)-(116))|0);
  $80=(+((($79|0))|0));
  $81=($80)*((0.25));
  $82=(+(Math_pow(2.0,(+($81)))));
  $83=$82;
  $84=$i;
  $85=((55784+($84<<2))|0);
  HEAPF32[(($85)>>2)]=$83;
  $87=$i;
  $88=((($87)+(1))|0);
  $i=$88;
 }
 $90=$1;
 _huffman_init($90);
 $91=$1;
 _init_xrpow_core_init($91);
 $sel=1;
 $92=$cfg;
 $93=(($92+216)|0);
 $94=(+(HEAPF32[(($93)>>2)]));
 $95=$sel;
 $96=((9808+($95<<4))|0);
 $97=(($96)|0);
 $98=(+(HEAPF32[(($97)>>2)]));
 $99=($94)+($98);
 $db=$99;
 $100=$db;
 $101=($100)*((0.10000000149011612));
 $102=(+(Math_pow(10.0,(+($101)))));
 $adjust=$102;
 $i=0;
 while(1) {
  $104=$i;
  $105=($104|0)<=6;
  if (!($105)) {
   break;
  }
  $107=$adjust;
  $108=$i;
  $109=$1;
  $110=(($109+84768)|0);
  $111=(($110)|0);
  $112=(($111+($108<<2))|0);
  HEAPF32[(($112)>>2)]=$107;
  $114=$i;
  $115=((($114)+(1))|0);
  $i=$115;
 }
 $117=$cfg;
 $118=(($117+212)|0);
 $119=(+(HEAPF32[(($118)>>2)]));
 $120=$sel;
 $121=((9808+($120<<4))|0);
 $122=(($121+4)|0);
 $123=(+(HEAPF32[(($122)>>2)]));
 $124=($119)+($123);
 $db=$124;
 $125=$db;
 $126=($125)*((0.10000000149011612));
 $127=(+(Math_pow(10.0,(+($126)))));
 $adjust=$127;
 while(1) {
  $129=$i;
  $130=($129|0)<=13;
  if (!($130)) {
   break;
  }
  $132=$adjust;
  $133=$i;
  $134=$1;
  $135=(($134+84768)|0);
  $136=(($135)|0);
  $137=(($136+($133<<2))|0);
  HEAPF32[(($137)>>2)]=$132;
  $139=$i;
  $140=((($139)+(1))|0);
  $i=$140;
 }
 $142=$cfg;
 $143=(($142+220)|0);
 $144=(+(HEAPF32[(($143)>>2)]));
 $145=$sel;
 $146=((9808+($145<<4))|0);
 $147=(($146+8)|0);
 $148=(+(HEAPF32[(($147)>>2)]));
 $149=($144)+($148);
 $db=$149;
 $150=$db;
 $151=($150)*((0.10000000149011612));
 $152=(+(Math_pow(10.0,(+($151)))));
 $adjust=$152;
 while(1) {
  $154=$i;
  $155=($154|0)<=20;
  if (!($155)) {
   break;
  }
  $157=$adjust;
  $158=$i;
  $159=$1;
  $160=(($159+84768)|0);
  $161=(($160)|0);
  $162=(($161+($158<<2))|0);
  HEAPF32[(($162)>>2)]=$157;
  $164=$i;
  $165=((($164)+(1))|0);
  $i=$165;
 }
 $167=$cfg;
 $168=(($167+224)|0);
 $169=(+(HEAPF32[(($168)>>2)]));
 $170=$sel;
 $171=((9808+($170<<4))|0);
 $172=(($171+12)|0);
 $173=(+(HEAPF32[(($172)>>2)]));
 $174=($169)+($173);
 $db=$174;
 $175=$db;
 $176=($175)*((0.10000000149011612));
 $177=(+(Math_pow(10.0,(+($176)))));
 $adjust=$177;
 while(1) {
  $179=$i;
  $180=($179|0)<22;
  if (!($180)) {
   break;
  }
  $182=$adjust;
  $183=$i;
  $184=$1;
  $185=(($184+84768)|0);
  $186=(($185)|0);
  $187=(($186+($183<<2))|0);
  HEAPF32[(($187)>>2)]=$182;
  $189=$i;
  $190=((($189)+(1))|0);
  $i=$190;
 }
 $192=$cfg;
 $193=(($192+216)|0);
 $194=(+(HEAPF32[(($193)>>2)]));
 $195=$sel;
 $196=((9776+($195<<4))|0);
 $197=(($196)|0);
 $198=(+(HEAPF32[(($197)>>2)]));
 $199=($194)+($198);
 $db=$199;
 $200=$db;
 $201=($200)*((0.10000000149011612));
 $202=(+(Math_pow(10.0,(+($201)))));
 $adjust=$202;
 $i=0;
 while(1) {
  $204=$i;
  $205=($204|0)<=2;
  if (!($205)) {
   break;
  }
  $207=$adjust;
  $208=$i;
  $209=$1;
  $210=(($209+84768)|0);
  $211=(($210+88)|0);
  $212=(($211+($208<<2))|0);
  HEAPF32[(($212)>>2)]=$207;
  $214=$i;
  $215=((($214)+(1))|0);
  $i=$215;
 }
 $217=$cfg;
 $218=(($217+212)|0);
 $219=(+(HEAPF32[(($218)>>2)]));
 $220=$sel;
 $221=((9776+($220<<4))|0);
 $222=(($221+4)|0);
 $223=(+(HEAPF32[(($222)>>2)]));
 $224=($219)+($223);
 $db=$224;
 $225=$db;
 $226=($225)*((0.10000000149011612));
 $227=(+(Math_pow(10.0,(+($226)))));
 $adjust=$227;
 while(1) {
  $229=$i;
  $230=($229|0)<=6;
  if (!($230)) {
   break;
  }
  $232=$adjust;
  $233=$i;
  $234=$1;
  $235=(($234+84768)|0);
  $236=(($235+88)|0);
  $237=(($236+($233<<2))|0);
  HEAPF32[(($237)>>2)]=$232;
  $239=$i;
  $240=((($239)+(1))|0);
  $i=$240;
 }
 $242=$cfg;
 $243=(($242+220)|0);
 $244=(+(HEAPF32[(($243)>>2)]));
 $245=$sel;
 $246=((9776+($245<<4))|0);
 $247=(($246+8)|0);
 $248=(+(HEAPF32[(($247)>>2)]));
 $249=($244)+($248);
 $db=$249;
 $250=$db;
 $251=($250)*((0.10000000149011612));
 $252=(+(Math_pow(10.0,(+($251)))));
 $adjust=$252;
 while(1) {
  $254=$i;
  $255=($254|0)<=11;
  if (!($255)) {
   break;
  }
  $257=$adjust;
  $258=$i;
  $259=$1;
  $260=(($259+84768)|0);
  $261=(($260+88)|0);
  $262=(($261+($258<<2))|0);
  HEAPF32[(($262)>>2)]=$257;
  $264=$i;
  $265=((($264)+(1))|0);
  $i=$265;
 }
 $267=$cfg;
 $268=(($267+224)|0);
 $269=(+(HEAPF32[(($268)>>2)]));
 $270=$sel;
 $271=((9776+($270<<4))|0);
 $272=(($271+12)|0);
 $273=(+(HEAPF32[(($272)>>2)]));
 $274=($269)+($273);
 $db=$274;
 $275=$db;
 $276=($275)*((0.10000000149011612));
 $277=(+(Math_pow(10.0,(+($276)))));
 $adjust=$277;
 while(1) {
  $279=$i;
  $280=($279|0)<13;
  if (!($280)) {
   break;
  }
  $282=$adjust;
  $283=$i;
  $284=$1;
  $285=(($284+84768)|0);
  $286=(($285+88)|0);
  $287=(($286+($283<<2))|0);
  HEAPF32[(($287)>>2)]=$282;
  $289=$i;
  $290=((($289)+(1))|0);
  $i=$290;
 }
 STACKTOP=sp;return;
}


function _compute_ath($gfc){
 $gfc=($gfc)|0;
 var $1=0,$cfg=0,$ATH_l=0,$ATH_psfb21=0,$ATH_s=0,$ATH_psfb12=0,$sfb=0,$i=0,$start=0,$end=0,$ATH_f=.0,$samp_freq=.0,$freq=.0,$freq1=.0,$freq2=.0,$freq3=.0,$2=0,$3=0,$4=0,$5=0;
 var $6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$14=0,$15=0,$16=0,$17=0,$18=0,$19=0,$20=0,$21=0,$22=0,$23=0,$24=0,$25=0;
 var $26=0,$27=.0,$29=0,$30=0,$32=0,$33=0,$34=0,$35=0,$36=0,$37=0,$38=0,$39=0,$40=0,$41=0,$42=0,$43=0,$44=0,$45=0,$46=0,$47=0;
 var $48=0,$50=0,$51=0,$52=0,$54=0,$55=.0,$56=.0,$57=.0,$58=.0,$59=0,$60=.0,$61=.0,$62=0,$63=0,$64=0,$65=.0,$66=.0,$67=0,$69=0,$70=0;
 var $71=0,$72=.0,$74=.0,$76=.0,$77=0,$78=0,$79=0,$81=0,$82=0,$85=0,$86=0,$89=0,$90=0,$92=0,$93=0,$94=0,$95=0,$96=0,$97=0,$98=0;
 var $99=0,$100=0,$101=0,$102=0,$103=0,$104=0,$105=0,$106=0,$107=0,$108=0,$110=0,$111=0,$112=0,$114=0,$115=.0,$116=.0,$117=.0,$118=.0,$119=0,$120=.0;
 var $121=.0,$122=0,$123=0,$124=0,$125=.0,$126=.0,$127=0,$129=0,$130=0,$131=0,$132=.0,$134=.0,$136=.0,$137=0,$138=0,$139=0,$141=0,$142=0,$145=0,$146=0;
 var $149=0,$150=0,$152=0,$153=0,$154=0,$155=0,$156=0,$157=0,$158=0,$159=0,$160=0,$161=0,$162=0,$163=0,$164=0,$165=0,$166=0,$167=0,$168=0,$170=0;
 var $171=0,$172=0,$174=0,$175=.0,$176=.0,$177=.0,$178=.0,$179=0,$180=.0,$181=.0,$182=0,$183=0,$184=0,$185=.0,$186=.0,$187=0,$189=0,$190=0,$191=0,$192=.0;
 var $194=.0,$196=.0,$197=0,$198=0,$199=0,$201=0,$202=0,$204=0,$205=0,$206=0,$207=0,$208=0,$209=0,$210=0,$211=0,$212=0,$213=0,$214=0,$215=0,$216=0;
 var $217=0,$218=.0,$219=0,$220=0,$221=0,$222=.0,$223=.0,$225=0,$226=0,$229=0,$230=0,$232=0,$233=0,$234=0,$235=0,$236=0,$237=0,$238=0,$239=0,$240=0;
 var $241=0,$242=0,$243=0,$244=0,$245=0,$246=0,$247=0,$248=0,$250=0,$251=0,$252=0,$254=0,$255=.0,$256=.0,$257=.0,$258=.0,$259=0,$260=.0,$261=.0,$262=0;
 var $263=0,$264=0,$265=.0,$266=.0,$267=0,$269=0,$270=0,$271=0,$272=.0,$274=.0,$276=.0,$277=0,$278=0,$279=0,$281=0,$282=0,$284=0,$285=0,$286=0,$287=0;
 var $288=0,$289=0,$290=0,$291=0,$292=0,$293=0,$294=0,$295=.0,$296=0,$297=0,$298=0,$299=.0,$300=.0,$302=0,$303=0,$305=0,$306=0,$307=0,$308=0,$311=0;
 var $312=0,$314=0,$315=0,$316=0,$318=0,$319=0,$322=0,$323=0,$325=0,$326=0,$327=0,$329=0,$330=0,$333=0,$334=0,$336=0,$337=0,$338=0,$340=0,$341=0;
 var $344=0,$345=0,$347=0,$348=0,$349=0,$351=0,$352=0,$355=0,$356=.0,$357=.0,$358=.0,$359=.0,$360=.0,$361=0,$362=0,$363=0,$364=0,label=0;
 var sp=0;sp=STACKTOP;
















 $1=$gfc;
 $2=$1;
 $3=(($2+16)|0);
 $cfg=$3;
 $4=$1;
 $5=(($4+85796)|0);
 $6=((HEAP32[(($5)>>2)])|0);
 $7=(($6+24)|0);
 $8=(($7)|0);
 $ATH_l=$8;
 $9=$1;
 $10=(($9+85796)|0);
 $11=((HEAP32[(($10)>>2)])|0);
 $12=(($11+164)|0);
 $13=(($12)|0);
 $ATH_psfb21=$13;
 $14=$1;
 $15=(($14+85796)|0);
 $16=((HEAP32[(($15)>>2)])|0);
 $17=(($16+112)|0);
 $18=(($17)|0);
 $ATH_s=$18;
 $19=$1;
 $20=(($19+85796)|0);
 $21=((HEAP32[(($20)>>2)])|0);
 $22=(($21+188)|0);
 $23=(($22)|0);
 $ATH_psfb12=$23;
 $24=$cfg;
 $25=(($24+48)|0);
 $26=((HEAP32[(($25)>>2)])|0);
 $27=(+((($26|0))|0));
 $samp_freq=$27;
 $sfb=0;
 while(1) {
  $29=$sfb;
  $30=($29|0)<22;
  if (!($30)) {
   break;
  }
  $32=$sfb;
  $33=$1;
  $34=(($33+21360)|0);
  $35=(($34)|0);
  $36=(($35+($32<<2))|0);
  $37=((HEAP32[(($36)>>2)])|0);
  $start=$37;
  $38=$sfb;
  $39=((($38)+(1))|0);
  $40=$1;
  $41=(($40+21360)|0);
  $42=(($41)|0);
  $43=(($42+($39<<2))|0);
  $44=((HEAP32[(($43)>>2)])|0);
  $end=$44;
  $45=$sfb;
  $46=$ATH_l;
  $47=(($46+($45<<2))|0);
  HEAPF32[(($47)>>2)]=9.999999933815813e+36;
  $48=$start;
  $i=$48;
  while(1) {
   $50=$i;
   $51=$end;
   $52=($50|0)<($51|0);
   if (!($52)) {
    break;
   }
   $54=$i;
   $55=(+((($54|0))|0));
   $56=$samp_freq;
   $57=($55)*($56);
   $58=($57)/((1152.0));
   $freq=$58;
   $59=$cfg;
   $60=$freq;
   $61=(+(_ATHmdct($59,$60)));
   $ATH_f=$61;
   $62=$sfb;
   $63=$ATH_l;
   $64=(($63+($62<<2))|0);
   $65=(+(HEAPF32[(($64)>>2)]));
   $66=$ATH_f;
   $67=$65<$66;
   if ($67) {
    $69=$sfb;
    $70=$ATH_l;
    $71=(($70+($69<<2))|0);
    $72=(+(HEAPF32[(($71)>>2)]));
    $76=$72;
   } else {
    $74=$ATH_f;
    $76=$74;
   }

   $77=$sfb;
   $78=$ATH_l;
   $79=(($78+($77<<2))|0);
   HEAPF32[(($79)>>2)]=$76;
   $81=$i;
   $82=((($81)+(1))|0);
   $i=$82;
  }
  $85=$sfb;
  $86=((($85)+(1))|0);
  $sfb=$86;
 }
 $sfb=0;
 while(1) {
  $89=$sfb;
  $90=($89|0)<6;
  if (!($90)) {
   break;
  }
  $92=$sfb;
  $93=$1;
  $94=(($93+21360)|0);
  $95=(($94+148)|0);
  $96=(($95+($92<<2))|0);
  $97=((HEAP32[(($96)>>2)])|0);
  $start=$97;
  $98=$sfb;
  $99=((($98)+(1))|0);
  $100=$1;
  $101=(($100+21360)|0);
  $102=(($101+148)|0);
  $103=(($102+($99<<2))|0);
  $104=((HEAP32[(($103)>>2)])|0);
  $end=$104;
  $105=$sfb;
  $106=$ATH_psfb21;
  $107=(($106+($105<<2))|0);
  HEAPF32[(($107)>>2)]=9.999999933815813e+36;
  $108=$start;
  $i=$108;
  while(1) {
   $110=$i;
   $111=$end;
   $112=($110|0)<($111|0);
   if (!($112)) {
    break;
   }
   $114=$i;
   $115=(+((($114|0))|0));
   $116=$samp_freq;
   $117=($115)*($116);
   $118=($117)/((1152.0));
   $freq1=$118;
   $119=$cfg;
   $120=$freq1;
   $121=(+(_ATHmdct($119,$120)));
   $ATH_f=$121;
   $122=$sfb;
   $123=$ATH_psfb21;
   $124=(($123+($122<<2))|0);
   $125=(+(HEAPF32[(($124)>>2)]));
   $126=$ATH_f;
   $127=$125<$126;
   if ($127) {
    $129=$sfb;
    $130=$ATH_psfb21;
    $131=(($130+($129<<2))|0);
    $132=(+(HEAPF32[(($131)>>2)]));
    $136=$132;
   } else {
    $134=$ATH_f;
    $136=$134;
   }

   $137=$sfb;
   $138=$ATH_psfb21;
   $139=(($138+($137<<2))|0);
   HEAPF32[(($139)>>2)]=$136;
   $141=$i;
   $142=((($141)+(1))|0);
   $i=$142;
  }
  $145=$sfb;
  $146=((($145)+(1))|0);
  $sfb=$146;
 }
 $sfb=0;
 while(1) {
  $149=$sfb;
  $150=($149|0)<13;
  if (!($150)) {
   break;
  }
  $152=$sfb;
  $153=$1;
  $154=(($153+21360)|0);
  $155=(($154+92)|0);
  $156=(($155+($152<<2))|0);
  $157=((HEAP32[(($156)>>2)])|0);
  $start=$157;
  $158=$sfb;
  $159=((($158)+(1))|0);
  $160=$1;
  $161=(($160+21360)|0);
  $162=(($161+92)|0);
  $163=(($162+($159<<2))|0);
  $164=((HEAP32[(($163)>>2)])|0);
  $end=$164;
  $165=$sfb;
  $166=$ATH_s;
  $167=(($166+($165<<2))|0);
  HEAPF32[(($167)>>2)]=9.999999933815813e+36;
  $168=$start;
  $i=$168;
  while(1) {
   $170=$i;
   $171=$end;
   $172=($170|0)<($171|0);
   if (!($172)) {
    break;
   }
   $174=$i;
   $175=(+((($174|0))|0));
   $176=$samp_freq;
   $177=($175)*($176);
   $178=($177)/((384.0));
   $freq2=$178;
   $179=$cfg;
   $180=$freq2;
   $181=(+(_ATHmdct($179,$180)));
   $ATH_f=$181;
   $182=$sfb;
   $183=$ATH_s;
   $184=(($183+($182<<2))|0);
   $185=(+(HEAPF32[(($184)>>2)]));
   $186=$ATH_f;
   $187=$185<$186;
   if ($187) {
    $189=$sfb;
    $190=$ATH_s;
    $191=(($190+($189<<2))|0);
    $192=(+(HEAPF32[(($191)>>2)]));
    $196=$192;
   } else {
    $194=$ATH_f;
    $196=$194;
   }

   $197=$sfb;
   $198=$ATH_s;
   $199=(($198+($197<<2))|0);
   HEAPF32[(($199)>>2)]=$196;
   $201=$i;
   $202=((($201)+(1))|0);
   $i=$202;
  }
  $204=$sfb;
  $205=((($204)+(1))|0);
  $206=$1;
  $207=(($206+21360)|0);
  $208=(($207+92)|0);
  $209=(($208+($205<<2))|0);
  $210=((HEAP32[(($209)>>2)])|0);
  $211=$sfb;
  $212=$1;
  $213=(($212+21360)|0);
  $214=(($213+92)|0);
  $215=(($214+($211<<2))|0);
  $216=((HEAP32[(($215)>>2)])|0);
  $217=((($210)-($216))|0);
  $218=(+((($217|0))|0));
  $219=$sfb;
  $220=$ATH_s;
  $221=(($220+($219<<2))|0);
  $222=(+(HEAPF32[(($221)>>2)]));
  $223=($222)*($218);
  HEAPF32[(($221)>>2)]=$223;
  $225=$sfb;
  $226=((($225)+(1))|0);
  $sfb=$226;
 }
 $sfb=0;
 while(1) {
  $229=$sfb;
  $230=($229|0)<6;
  if (!($230)) {
   break;
  }
  $232=$sfb;
  $233=$1;
  $234=(($233+21360)|0);
  $235=(($234+176)|0);
  $236=(($235+($232<<2))|0);
  $237=((HEAP32[(($236)>>2)])|0);
  $start=$237;
  $238=$sfb;
  $239=((($238)+(1))|0);
  $240=$1;
  $241=(($240+21360)|0);
  $242=(($241+176)|0);
  $243=(($242+($239<<2))|0);
  $244=((HEAP32[(($243)>>2)])|0);
  $end=$244;
  $245=$sfb;
  $246=$ATH_psfb12;
  $247=(($246+($245<<2))|0);
  HEAPF32[(($247)>>2)]=9.999999933815813e+36;
  $248=$start;
  $i=$248;
  while(1) {
   $250=$i;
   $251=$end;
   $252=($250|0)<($251|0);
   if (!($252)) {
    break;
   }
   $254=$i;
   $255=(+((($254|0))|0));
   $256=$samp_freq;
   $257=($255)*($256);
   $258=($257)/((384.0));
   $freq3=$258;
   $259=$cfg;
   $260=$freq3;
   $261=(+(_ATHmdct($259,$260)));
   $ATH_f=$261;
   $262=$sfb;
   $263=$ATH_psfb12;
   $264=(($263+($262<<2))|0);
   $265=(+(HEAPF32[(($264)>>2)]));
   $266=$ATH_f;
   $267=$265<$266;
   if ($267) {
    $269=$sfb;
    $270=$ATH_psfb12;
    $271=(($270+($269<<2))|0);
    $272=(+(HEAPF32[(($271)>>2)]));
    $276=$272;
   } else {
    $274=$ATH_f;
    $276=$274;
   }

   $277=$sfb;
   $278=$ATH_psfb12;
   $279=(($278+($277<<2))|0);
   HEAPF32[(($279)>>2)]=$276;
   $281=$i;
   $282=((($281)+(1))|0);
   $i=$282;
  }
  $284=$1;
  $285=(($284+21360)|0);
  $286=(($285+92)|0);
  $287=(($286+52)|0);
  $288=((HEAP32[(($287)>>2)])|0);
  $289=$1;
  $290=(($289+21360)|0);
  $291=(($290+92)|0);
  $292=(($291+48)|0);
  $293=((HEAP32[(($292)>>2)])|0);
  $294=((($288)-($293))|0);
  $295=(+((($294|0))|0));
  $296=$sfb;
  $297=$ATH_psfb12;
  $298=(($297+($296<<2))|0);
  $299=(+(HEAPF32[(($298)>>2)]));
  $300=($299)*($295);
  HEAPF32[(($298)>>2)]=$300;
  $302=$sfb;
  $303=((($302)+(1))|0);
  $sfb=$303;
 }
 $305=$cfg;
 $306=(($305+204)|0);
 $307=((HEAP32[(($306)>>2)])|0);
 $308=($307|0)!=0;
 if (!($308)) {
  $355=$cfg;
  $356=(+(_ATHmdct($355,-1.0)));
  $357=$356;
  $358=(+(_log10((+($357)))));
  $359=((10.0))*($358);
  $360=$359;
  $361=$1;
  $362=(($361+85796)|0);
  $363=((HEAP32[(($362)>>2)])|0);
  $364=(($363+20)|0);
  HEAPF32[(($364)>>2)]=$360;
  STACKTOP=sp;return;
 }
 $sfb=0;
 while(1) {
  $311=$sfb;
  $312=($311|0)<22;
  if (!($312)) {
   break;
  }
  $314=$sfb;
  $315=$ATH_l;
  $316=(($315+($314<<2))|0);
  HEAPF32[(($316)>>2)]=9.999999682655225e-21;
  $318=$sfb;
  $319=((($318)+(1))|0);
  $sfb=$319;
 }
 $sfb=0;
 while(1) {
  $322=$sfb;
  $323=($322|0)<6;
  if (!($323)) {
   break;
  }
  $325=$sfb;
  $326=$ATH_psfb21;
  $327=(($326+($325<<2))|0);
  HEAPF32[(($327)>>2)]=9.999999682655225e-21;
  $329=$sfb;
  $330=((($329)+(1))|0);
  $sfb=$330;
 }
 $sfb=0;
 while(1) {
  $333=$sfb;
  $334=($333|0)<13;
  if (!($334)) {
   break;
  }
  $336=$sfb;
  $337=$ATH_s;
  $338=(($337+($336<<2))|0);
  HEAPF32[(($338)>>2)]=9.999999682655225e-21;
  $340=$sfb;
  $341=((($340)+(1))|0);
  $sfb=$341;
 }
 $sfb=0;
 while(1) {
  $344=$sfb;
  $345=($344|0)<6;
  if (!($345)) {
   break;
  }
  $347=$sfb;
  $348=$ATH_psfb12;
  $349=(($348+($347<<2))|0);
  HEAPF32[(($349)>>2)]=9.999999682655225e-21;
  $351=$sfb;
  $352=((($351)+(1))|0);
  $sfb=$352;
 }
 $355=$cfg;
 $356=(+(_ATHmdct($355,-1.0)));
 $357=$356;
 $358=(+(_log10((+($357)))));
 $359=((10.0))*($358);
 $360=$359;
 $361=$1;
 $362=(($361+85796)|0);
 $363=((HEAP32[(($362)>>2)])|0);
 $364=(($363+20)|0);
 HEAPF32[(($364)>>2)]=$360;
 STACKTOP=sp;return;
}


function _on_pe($gfc,$pe,$targ_bits,$mean_bits,$gr,$cbr){
 $gfc=($gfc)|0;
 $pe=($pe)|0;
 $targ_bits=($targ_bits)|0;
 $mean_bits=($mean_bits)|0;
 $gr=($gr)|0;
 $cbr=($cbr)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$cfg=0,$extra_bits=0,$tbits=0,$bits=0,$add_bits=0,$max_bits=0,$ch=0,$sum=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0;
 var $13=0,$14=0,$15=0,$16=0,$17=0,$21=0,$22=0,$23=0,$24=0,$25=0,$27=0,$28=0,$29=0,$30=0,$31=0,$32=0,$35=0,$36=0,$37=0,$38=0;
 var $39=0,$41=0,$42=0,$43=0,$44=0,$45=0,$46=0,$47=0,$48=0,$49=.0,$50=0,$51=0,$52=0,$53=0,$54=0,$55=.0,$56=.0,$57=.0,$58=.0,$59=0;
 var $60=0,$61=0,$62=0,$63=.0,$64=.0,$65=0,$66=0,$67=0,$68=0,$69=0,$70=0,$71=0,$72=0,$73=0,$74=0,$76=0,$77=0,$78=0,$79=0,$80=0;
 var $82=0,$83=0,$84=0,$85=0,$87=0,$88=0,$90=0,$91=0,$92=0,$93=0,$94=0,$95=0,$96=0,$97=0,$98=0,$100=0,$101=0,$102=0,$103=0,$104=0;
 var $105=0,$108=0,$109=0,$110=0,$111=0,$112=0,$114=0,$115=0,$116=0,$118=0,$119=0,$120=0,$121=0,$122=0,$124=0,$125=0,$127=0,$128=0,$129=0,$131=0;
 var $132=0,$135=0,$136=0,$137=0,$138=0,$139=0,$141=0,$142=0,$143=0,$144=0,$145=0,$146=0,$147=0,$148=0,$149=0,$151=0,$152=0,$156=0,$157=0,$158=0;
 var $159=0,$160=0,$162=0,$163=0,$164=0,$165=0,$166=0,$167=0,$168=0,$169=0,$170=0,$171=0,$172=0,$173=0,$174=0,$176=0,$177=0,$180=0,$181=0,$182=0;
 var $183=0,$184=0,$186=0,$187=0,$188=0,$189=0,$190=0,$191=0,$193=0,$194=0,$196=0,$197=0,$200=0,$201=0,$202=0,$203=0,$204=0,$206=0,$207=0,$208=0;
 var $209=0,$210=0,$211=0,$212=0,$213=0,$214=0,$215=0,$216=0,$217=0,$218=0,$219=0,$220=0,$221=0,$222=0,$224=0,$225=0,$228=0,label=0;
 var sp=0;sp=STACKTOP;STACKTOP=(STACKTOP+24)|0;







 $extra_bits=((sp)|0);
 $tbits=(((sp)+(8))|0);

 $add_bits=(((sp)+(16))|0);



 $1=$gfc;
 $2=$pe;
 $3=$targ_bits;
 $4=$mean_bits;
 $5=$gr;
 $6=$cbr;
 $7=$1;
 $8=(($7+16)|0);
 $cfg=$8;
 HEAP32[(($extra_bits)>>2)]=0;
 $9=$add_bits;
 _memset((((($9)|0))|0), ((((0)|0))|0), ((((8)|0))|0))|0;
 $10=$1;
 $11=$4;
 $12=$6;
 _ResvMaxBits($10,$11,$tbits,$extra_bits,$12);
 $13=((HEAP32[(($tbits)>>2)])|0);
 $14=((HEAP32[(($extra_bits)>>2)])|0);
 $15=((($13)+($14))|0);
 $max_bits=$15;
 $16=$max_bits;
 $17=($16|0)>7680;
 if ($17) {
  $max_bits=7680;
 }
 $bits=0;
 $ch=0;
 while(1) {
  $21=$ch;
  $22=$cfg;
  $23=(($22+56)|0);
  $24=((HEAP32[(($23)>>2)])|0);
  $25=($21|0)<($24|0);
  if (!($25)) {
   break;
  }
  $27=((HEAP32[(($tbits)>>2)])|0);
  $28=$cfg;
  $29=(($28+56)|0);
  $30=((HEAP32[(($29)>>2)])|0);
  $31=(((($27|0))/(($30|0)))&-1);
  $32=4095<($31|0);
  if ($32) {
   $41=4095;
  } else {
   $35=((HEAP32[(($tbits)>>2)])|0);
   $36=$cfg;
   $37=(($36+56)|0);
   $38=((HEAP32[(($37)>>2)])|0);
   $39=(((($35|0))/(($38|0)))&-1);
   $41=$39;
  }

  $42=$ch;
  $43=$3;
  $44=(($43+($42<<2))|0);
  HEAP32[(($44)>>2)]=$41;
  $45=$ch;
  $46=$3;
  $47=(($46+($45<<2))|0);
  $48=((HEAP32[(($47)>>2)])|0);
  $49=(+((($48|0))|0));
  $50=$ch;
  $51=$5;
  $52=$2;
  $53=(($52+($51<<3))|0);
  $54=(($53+($50<<2))|0);
  $55=(+(HEAPF32[(($54)>>2)]));
  $56=($49)*($55);
  $57=$56;
  $58=($57)/((700.0));
  $59=$ch;
  $60=$3;
  $61=(($60+($59<<2))|0);
  $62=((HEAP32[(($61)>>2)])|0);
  $63=(+((($62|0))|0));
  $64=($58)-($63);
  $65=(~~($64));
  $66=$ch;
  $67=(($add_bits+($66<<2))|0);
  HEAP32[(($67)>>2)]=$65;
  $68=$ch;
  $69=(($add_bits+($68<<2))|0);
  $70=((HEAP32[(($69)>>2)])|0);
  $71=$4;
  $72=((($71)*(3))&-1);
  $73=(((($72|0))/(4))&-1);
  $74=($70|0)>($73|0);
  if ($74) {
   $76=$4;
   $77=((($76)*(3))&-1);
   $78=(((($77|0))/(4))&-1);
   $79=$ch;
   $80=(($add_bits+($79<<2))|0);
   HEAP32[(($80)>>2)]=$78;
  }
  $82=$ch;
  $83=(($add_bits+($82<<2))|0);
  $84=((HEAP32[(($83)>>2)])|0);
  $85=($84|0)<0;
  if ($85) {
   $87=$ch;
   $88=(($add_bits+($87<<2))|0);
   HEAP32[(($88)>>2)]=0;
  }
  $90=$ch;
  $91=(($add_bits+($90<<2))|0);
  $92=((HEAP32[(($91)>>2)])|0);
  $93=$ch;
  $94=$3;
  $95=(($94+($93<<2))|0);
  $96=((HEAP32[(($95)>>2)])|0);
  $97=((($92)+($96))|0);
  $98=($97|0)>4095;
  if ($98) {
   $100=$ch;
   $101=$3;
   $102=(($101+($100<<2))|0);
   $103=((HEAP32[(($102)>>2)])|0);
   $104=(((4095)-($103))|0);
   $105=0>($104|0);
   if ($105) {
    $114=0;
   } else {
    $108=$ch;
    $109=$3;
    $110=(($109+($108<<2))|0);
    $111=((HEAP32[(($110)>>2)])|0);
    $112=(((4095)-($111))|0);
    $114=$112;
   }

   $115=$ch;
   $116=(($add_bits+($115<<2))|0);
   HEAP32[(($116)>>2)]=$114;
  }
  $118=$ch;
  $119=(($add_bits+($118<<2))|0);
  $120=((HEAP32[(($119)>>2)])|0);
  $121=$bits;
  $122=((($121)+($120))|0);
  $bits=$122;
  $124=$ch;
  $125=((($124)+(1))|0);
  $ch=$125;
 }
 $127=$bits;
 $128=((HEAP32[(($extra_bits)>>2)])|0);
 $129=($127|0)>($128|0);
 do {
  if ($129) {
   $131=$bits;
   $132=($131|0)>0;
   if (!($132)) {
    break;
   }
   $ch=0;
   while(1) {
    $135=$ch;
    $136=$cfg;
    $137=(($136+56)|0);
    $138=((HEAP32[(($137)>>2)])|0);
    $139=($135|0)<($138|0);
    if (!($139)) {
     break;
    }
    $141=((HEAP32[(($extra_bits)>>2)])|0);
    $142=$ch;
    $143=(($add_bits+($142<<2))|0);
    $144=((HEAP32[(($143)>>2)])|0);
    $145=(Math_imul($141,$144)|0);
    $146=$bits;
    $147=(((($145|0))/(($146|0)))&-1);
    $148=$ch;
    $149=(($add_bits+($148<<2))|0);
    HEAP32[(($149)>>2)]=$147;
    $151=$ch;
    $152=((($151)+(1))|0);
    $ch=$152;
   }
  }
 } while(0);
 $ch=0;
 while(1) {
  $156=$ch;
  $157=$cfg;
  $158=(($157+56)|0);
  $159=((HEAP32[(($158)>>2)])|0);
  $160=($156|0)<($159|0);
  if (!($160)) {
   break;
  }
  $162=$ch;
  $163=(($add_bits+($162<<2))|0);
  $164=((HEAP32[(($163)>>2)])|0);
  $165=$ch;
  $166=$3;
  $167=(($166+($165<<2))|0);
  $168=((HEAP32[(($167)>>2)])|0);
  $169=((($168)+($164))|0);
  HEAP32[(($167)>>2)]=$169;
  $170=$ch;
  $171=(($add_bits+($170<<2))|0);
  $172=((HEAP32[(($171)>>2)])|0);
  $173=((HEAP32[(($extra_bits)>>2)])|0);
  $174=((($173)-($172))|0);
  HEAP32[(($extra_bits)>>2)]=$174;
  $176=$ch;
  $177=((($176)+(1))|0);
  $ch=$177;
 }
 $bits=0;
 $ch=0;
 while(1) {
  $180=$ch;
  $181=$cfg;
  $182=(($181+56)|0);
  $183=((HEAP32[(($182)>>2)])|0);
  $184=($180|0)<($183|0);
  if (!($184)) {
   break;
  }
  $186=$ch;
  $187=$3;
  $188=(($187+($186<<2))|0);
  $189=((HEAP32[(($188)>>2)])|0);
  $190=$bits;
  $191=((($190)+($189))|0);
  $bits=$191;
  $193=$ch;
  $194=((($193)+(1))|0);
  $ch=$194;
 }
 $196=$bits;
 $197=($196|0)>7680;
 if (!($197)) {
  $228=$max_bits;
  STACKTOP=sp;return (($228)|0);
 }
 $sum=0;
 $ch=0;
 while(1) {
  $200=$ch;
  $201=$cfg;
  $202=(($201+56)|0);
  $203=((HEAP32[(($202)>>2)])|0);
  $204=($200|0)<($203|0);
  if (!($204)) {
   break;
  }
  $206=$ch;
  $207=$3;
  $208=(($207+($206<<2))|0);
  $209=((HEAP32[(($208)>>2)])|0);
  $210=((($209)*(7680))&-1);
  HEAP32[(($208)>>2)]=$210;
  $211=$bits;
  $212=$ch;
  $213=$3;
  $214=(($213+($212<<2))|0);
  $215=((HEAP32[(($214)>>2)])|0);
  $216=(((($215|0))/(($211|0)))&-1);
  HEAP32[(($214)>>2)]=$216;
  $217=$ch;
  $218=$3;
  $219=(($218+($217<<2))|0);
  $220=((HEAP32[(($219)>>2)])|0);
  $221=$sum;
  $222=((($221)+($220))|0);
  $sum=$222;
  $224=$ch;
  $225=((($224)+(1))|0);
  $ch=$225;
 }
 $228=$max_bits;
 STACKTOP=sp;return (($228)|0);
}


function _reduce_side($targ_bits,$ms_ener_ratio,$mean_bits,$max_bits){
 $targ_bits=($targ_bits)|0;
 $ms_ener_ratio=+($ms_ener_ratio);
 $mean_bits=($mean_bits)|0;
 $max_bits=($max_bits)|0;
 var $1=0,$2=.0,$3=0,$4=0,$move_bits=0,$fac=.0,$5=.0,$6=.0,$7=.0,$8=.0,$9=.0,$10=.0,$11=.0,$12=0,$15=.0,$16=.0,$17=0,$20=.0,$21=.0,$22=.0;
 var $23=0,$24=0,$25=0,$26=0,$27=0,$28=0,$29=0,$30=.0,$31=.0,$32=0,$33=0,$34=0,$35=0,$36=0,$37=0,$38=0,$40=0,$41=0,$42=0,$43=0;
 var $45=0,$46=0,$49=0,$50=0,$51=0,$52=0,$54=0,$55=0,$56=0,$57=0,$58=0,$59=0,$61=0,$62=0,$63=0,$64=0,$65=0,$67=0,$68=0,$69=0;
 var $70=0,$71=0,$73=0,$74=0,$75=0,$76=0,$77=0,$79=0,$80=0,$81=0,$82=0,$83=0,$84=0,$85=0,$86=0,$87=0,$88=0,$91=0,$92=0,$93=0;
 var $94=0,$95=0,$96=0,$97=0,$98=0,$99=0,$100=0,$102=0,$103=0,$104=0,$105=0,$106=0,$107=0,$108=0,$109=0,$110=0,$111=0,$112=0,$113=0,$114=0;
 var $115=0,$116=0,$117=0,$118=0,$119=0,label=0;
 var sp=0;sp=STACKTOP;






 $1=$targ_bits;
 $2=$ms_ener_ratio;
 $3=$mean_bits;
 $4=$max_bits;
 $5=$2;
 $6=$5;
 $7=((0.5))-($6);
 $8=((0.33))*($7);
 $9=($8)/((0.5));
 $10=$9;
 $fac=$10;
 $11=$fac;
 $12=$11<(0.0);
 if ($12) {
  $fac=0.0;
 }
 $15=$fac;
 $16=$15;
 $17=$16>(0.5);
 if ($17) {
  $fac=0.5;
 }
 $20=$fac;
 $21=$20;
 $22=($21)*((0.5));
 $23=$1;
 $24=(($23)|0);
 $25=((HEAP32[(($24)>>2)])|0);
 $26=$1;
 $27=(($26+4)|0);
 $28=((HEAP32[(($27)>>2)])|0);
 $29=((($25)+($28))|0);
 $30=(+((($29|0))|0));
 $31=($22)*($30);
 $32=(~~($31));
 $move_bits=$32;
 $33=$move_bits;
 $34=$1;
 $35=(($34)|0);
 $36=((HEAP32[(($35)>>2)])|0);
 $37=(((4095)-($36))|0);
 $38=($33|0)>($37|0);
 if ($38) {
  $40=$1;
  $41=(($40)|0);
  $42=((HEAP32[(($41)>>2)])|0);
  $43=(((4095)-($42))|0);
  $move_bits=$43;
 }
 $45=$move_bits;
 $46=($45|0)<0;
 if ($46) {
  $move_bits=0;
 }
 $49=$1;
 $50=(($49+4)|0);
 $51=((HEAP32[(($50)>>2)])|0);
 $52=($51|0)>=125;
 if ($52) {
  $54=$1;
  $55=(($54+4)|0);
  $56=((HEAP32[(($55)>>2)])|0);
  $57=$move_bits;
  $58=((($56)-($57))|0);
  $59=($58|0)>125;
  if ($59) {
   $61=$1;
   $62=(($61)|0);
   $63=((HEAP32[(($62)>>2)])|0);
   $64=$3;
   $65=($63|0)<($64|0);
   if ($65) {
    $67=$move_bits;
    $68=$1;
    $69=(($68)|0);
    $70=((HEAP32[(($69)>>2)])|0);
    $71=((($70)+($67))|0);
    HEAP32[(($69)>>2)]=$71;
   }
   $73=$move_bits;
   $74=$1;
   $75=(($74+4)|0);
   $76=((HEAP32[(($75)>>2)])|0);
   $77=((($76)-($73))|0);
   HEAP32[(($75)>>2)]=$77;
  } else {
   $79=$1;
   $80=(($79+4)|0);
   $81=((HEAP32[(($80)>>2)])|0);
   $82=((($81)-(125))|0);
   $83=$1;
   $84=(($83)|0);
   $85=((HEAP32[(($84)>>2)])|0);
   $86=((($85)+($82))|0);
   HEAP32[(($84)>>2)]=$86;
   $87=$1;
   $88=(($87+4)|0);
   HEAP32[(($88)>>2)]=125;
  }
 }
 $91=$1;
 $92=(($91)|0);
 $93=((HEAP32[(($92)>>2)])|0);
 $94=$1;
 $95=(($94+4)|0);
 $96=((HEAP32[(($95)>>2)])|0);
 $97=((($93)+($96))|0);
 $move_bits=$97;
 $98=$move_bits;
 $99=$4;
 $100=($98|0)>($99|0);
 if (!($100)) {
  STACKTOP=sp;return;
 }
 $102=$4;
 $103=$1;
 $104=(($103)|0);
 $105=((HEAP32[(($104)>>2)])|0);
 $106=(Math_imul($102,$105)|0);
 $107=$move_bits;
 $108=(((($106|0))/(($107|0)))&-1);
 $109=$1;
 $110=(($109)|0);
 HEAP32[(($110)>>2)]=$108;
 $111=$4;
 $112=$1;
 $113=(($112+4)|0);
 $114=((HEAP32[(($113)>>2)])|0);
 $115=(Math_imul($111,$114)|0);
 $116=$move_bits;
 $117=(((($115|0))/(($116|0)))&-1);
 $118=$1;
 $119=(($118+4)|0);
 HEAP32[(($119)>>2)]=$117;
 STACKTOP=sp;return;
}


function _athAdjust($a,$x,$athFloor,$ATHfixpoint){
 $a=+($a);
 $x=+($x);
 $athFloor=+($athFloor);
 $ATHfixpoint=+($ATHfixpoint);
 var $1=.0,$2=.0,$3=.0,$4=.0,$o=.0,$p=.0,$u=.0,$v=.0,$w=.0,$5=.0,$6=0,$9=.0,$11=.0,$12=.0,$13=.0,$14=.0,$15=.0,$16=.0,$17=.0,$18=.0;
 var $19=.0,$20=.0,$21=.0,$22=.0,$23=.0,$24=0,$26=.0,$27=.0,$28=.0,$29=.0,$30=.0,$31=.0,$33=.0,$34=0,$37=.0,$38=.0,$39=.0,$40=.0,$41=.0,$42=.0;
 var $43=.0,$44=.0,$45=.0,$46=.0,$47=.0,$48=.0,label=0;
 var sp=0;sp=STACKTOP;









 $1=$a;
 $2=$x;
 $3=$athFloor;
 $4=$ATHfixpoint;
 $o=90.30873107910156;
 $5=$4;
 $6=$5<(1.0);
 if ($6) {
  $11=94.82444763183594;
 } else {
  $9=$4;
  $11=$9;
 }

 $p=$11;
 $12=$2;
 $13=(+(_fast_log2($12)));
 $14=$13;
 $15=($14)*((3.0102999566398116));
 $16=$15;
 $u=$16;
 $17=$1;
 $18=$1;
 $19=($17)*($18);
 $v=$19;
 $w=0.0;
 $20=$3;
 $21=$u;
 $22=($21)-($20);
 $u=$22;
 $23=$v;
 $24=$23>(9.999999682655225e-21);
 if ($24) {
  $26=$v;
  $27=(+(_fast_log2($26)));
  $28=$27;
  $29=($28)*((0.03333343265598758));
  $30=((1.0))+($29);
  $31=$30;
  $w=$31;
 }
 $33=$w;
 $34=$33<(0.0);
 if ($34) {
  $w=0.0;
 }
 $37=$w;
 $38=$u;
 $39=($38)*($37);
 $u=$39;
 $40=$3;
 $41=($40)+((90.30873107910156));
 $42=$p;
 $43=($41)-($42);
 $44=$u;
 $45=($44)+($43);
 $u=$45;
 $46=$u;
 $47=((0.10000000149011612))*($46);
 $48=(+(Math_pow(10.0,(+($47)))));
 STACKTOP=sp;return (+($48));
}


function _calc_xmin($gfc,$ratio,$cod_info,$pxmin){
 $gfc=($gfc)|0;
 $ratio=($ratio)|0;
 $cod_info=($cod_info)|0;
 $pxmin=($pxmin)|0;
 var $1=0,$2=0,$3=0,$4=0,$cfg=0,$sfb=0,$gsfb=0,$j=0,$ath_over=0,$k=0,$ATH=0,$xr=0,$max_nonzero=0,$en0=.0,$xmin=.0,$rh1=.0,$rh2=.0,$rh3=.0,$width=0,$l=0;
 var $xa=.0,$x2=.0,$e=.0,$x=.0,$sfb_l=0,$sfb_s=0,$limit=0,$width1=0,$b=0,$l2=0,$tmpATH=.0,$en03=.0,$xmin4=.0,$rh15=.0,$rh26=.0,$rh37=.0,$xa8=.0,$x29=.0,$e10=.0,$x11=.0;
 var $5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0,$14=0,$15=0,$16=0,$17=0,$18=0,$20=0,$21=0,$22=.0,$23=0,$24=0,$25=0,$26=0;
 var $27=.0,$28=0,$29=0,$30=.0,$31=0,$32=0,$33=.0,$34=.0,$35=0,$36=0,$37=0,$38=0,$39=0,$40=.0,$41=.0,$42=.0,$43=0,$44=0,$45=0,$46=0;
 var $47=0,$48=.0,$49=0,$50=.0,$51=.0,$53=0,$54=0,$55=0,$57=0,$58=0,$59=0,$60=0,$61=.0,$62=.0,$63=.0,$64=.0,$65=.0,$66=.0,$67=.0,$68=.0;
 var $69=.0,$70=0,$72=.0,$74=.0,$76=.0,$77=.0,$78=.0,$80=0,$81=0,$83=.0,$84=.0,$85=0,$87=0,$88=0,$90=.0,$91=.0,$92=0,$94=.0,$96=.0,$97=.0;
 var $98=0,$100=.0,$102=.0,$105=.0,$106=0,$107=0,$108=0,$109=0,$110=0,$111=.0,$112=.0,$113=0,$115=.0,$116=0,$117=0,$118=0,$119=0,$120=0,$121=.0,$122=.0;
 var $123=.0,$124=.0,$125=0,$126=0,$127=0,$128=0,$129=0,$130=.0,$131=.0,$132=.0,$133=.0,$134=.0,$135=0,$137=.0,$140=.0,$141=.0,$142=0,$144=.0,$145=.0,$148=.0;
 var $149=.0,$150=.0,$151=.0,$152=.0,$153=0,$154=0,$155=0,$156=0,$157=0,$158=0,$159=0,$160=.0,$161=0,$162=0,$164=0,$165=0,$168=0,$169=0,$171=0,$172=0;
 var $173=0,$174=.0,$175=.0,$176=.0,$177=0,$179=0,$182=0,$183=0,$185=0,$186=0,$187=0,$188=0,$190=0,$191=0,$193=0,$194=0,$195=0,$196=0,$197=0,$198=0;
 var $200=0,$201=0,$202=0,$203=0,$204=0,$206=0,$207=0,$208=0,$209=0,$211=0,$212=0,$213=0,$214=0,$215=0,$216=0,$217=0,$218=0,$219=0,$220=0,$221=0;
 var $222=0,$223=0,$224=0,$226=0,$227=0,$228=0,$229=0,$230=0,$231=0,$232=0,$234=0,$235=0,$236=0,$237=0,$238=0,$239=0,$240=0,$241=0,$243=0,$244=0;
 var $245=0,$247=0,$250=0,$251=0,$252=0,$253=0,$254=0,$255=0,$257=0,$258=0,$259=0,$260=0,$261=0,$263=0,$264=0,$265=.0,$266=0,$267=0,$268=0,$269=0;
 var $270=.0,$271=0,$272=0,$273=.0,$274=0,$275=0,$276=.0,$277=.0,$278=0,$279=0,$280=0,$281=0,$282=0,$283=.0,$284=.0,$285=.0,$286=0,$287=0,$288=0,$289=0;
 var $290=0,$292=0,$293=0,$295=.0,$296=.0,$297=0,$298=.0,$299=.0,$301=0,$302=0,$303=0,$305=0,$306=0,$307=0,$308=0,$309=.0,$310=.0,$311=.0,$312=.0,$313=.0;
 var $314=.0,$315=.0,$316=.0,$317=.0,$318=0,$320=.0,$322=.0,$324=.0,$325=.0,$326=.0,$328=0,$329=0,$331=.0,$332=.0,$333=0,$335=0,$336=0,$338=.0,$339=.0,$340=0;
 var $342=.0,$344=.0,$345=.0,$346=0,$348=.0,$350=.0,$353=.0,$354=0,$355=0,$356=0,$357=0,$358=0,$359=0,$360=0,$361=.0,$362=.0,$363=0,$365=.0,$366=0,$367=0;
 var $368=0,$369=0,$370=0,$371=0,$372=0,$373=.0,$374=.0,$375=.0,$376=.0,$377=0,$378=0,$379=0,$380=0,$381=0,$382=.0,$383=.0,$384=.0,$385=.0,$386=.0,$387=0;
 var $389=.0,$392=.0,$393=.0,$394=0,$396=.0,$397=.0,$400=.0,$401=.0,$402=.0,$403=.0,$404=.0,$405=0,$406=0,$407=0,$408=0,$409=0,$410=0,$411=0,$412=0,$413=0;
 var $414=.0,$415=0,$416=0,$418=0,$419=0,$421=0,$422=0,$423=0,$424=0,$426=0,$427=0,$428=.0,$429=0,$430=0,$431=.0,$432=0,$434=0,$435=0,$436=.0,$437=0;
 var $438=0,$439=.0,$440=.0,$441=0,$442=0,$443=0,$444=0,$445=.0,$446=.0,$447=0,$448=0,$449=.0,$450=.0,$452=0,$453=0,$454=.0,$455=0,$456=0,$457=.0,$458=0;
 var $460=0,$461=0,$462=.0,$463=0,$464=0,$465=.0,$466=.0,$467=0,$468=0,$469=0,$470=0,$471=.0,$472=.0,$473=0,$474=0,$475=.0,$476=.0,$480=0,$481=0,$482=0;
 var $483=0,$485=0,label=0;
 var sp=0;sp=STACKTOP;








































 $1=$gfc;
 $2=$ratio;
 $3=$cod_info;
 $4=$pxmin;
 $5=$1;
 $6=(($5+16)|0);
 $cfg=$6;
 $j=0;
 $ath_over=0;
 $7=$1;
 $8=(($7+85796)|0);
 $9=((HEAP32[(($8)>>2)])|0);
 $ATH=$9;
 $10=$3;
 $11=(($10)|0);
 $12=(($11)|0);
 $xr=$12;
 $gsfb=0;
 while(1) {
  $14=$gsfb;
  $15=$3;
  $16=(($15+4856)|0);
  $17=((HEAP32[(($16)>>2)])|0);
  $18=($14|0)<($17|0);
  if (!($18)) {
   break;
  }
  $20=$ATH;
  $21=(($20+8)|0);
  $22=(+(HEAPF32[(($21)>>2)]));
  $23=$gsfb;
  $24=$ATH;
  $25=(($24+24)|0);
  $26=(($25+($23<<2))|0);
  $27=(+(HEAPF32[(($26)>>2)]));
  $28=$ATH;
  $29=(($28+20)|0);
  $30=(+(HEAPF32[(($29)>>2)]));
  $31=$cfg;
  $32=(($31+208)|0);
  $33=(+(HEAPF32[(($32)>>2)]));
  $34=(+(_athAdjust($22,$27,$30,$33)));
  $xmin=$34;
  $35=$gsfb;
  $36=$1;
  $37=(($36+84768)|0);
  $38=(($37)|0);
  $39=(($38+($35<<2))|0);
  $40=(+(HEAPF32[(($39)>>2)]));
  $41=$xmin;
  $42=($41)*($40);
  $xmin=$42;
  $43=$gsfb;
  $44=$3;
  $45=(($44+4872)|0);
  $46=(($45+($43<<2))|0);
  $47=((HEAP32[(($46)>>2)])|0);
  $width=$47;
  $48=$xmin;
  $49=$width;
  $50=(+((($49|0))|0));
  $51=($48)/($50);
  $rh1=$51;
  $rh2=2.220446049250313e-16;
  $en0=0.0;
  $l=0;
  while(1) {
   $53=$l;
   $54=$width;
   $55=($53|0)<($54|0);
   if (!($55)) {
    break;
   }
   $57=$j;
   $58=((($57)+(1))|0);
   $j=$58;
   $59=$xr;
   $60=(($59+($57<<2))|0);
   $61=(+(HEAPF32[(($60)>>2)]));
   $xa=$61;
   $62=$xa;
   $63=$xa;
   $64=($62)*($63);
   $x2=$64;
   $65=$x2;
   $66=$en0;
   $67=($66)+($65);
   $en0=$67;
   $68=$x2;
   $69=$rh1;
   $70=$68<$69;
   if ($70) {
    $72=$x2;
    $76=$72;
   } else {
    $74=$rh1;
    $76=$74;
   }

   $77=$rh2;
   $78=($77)+($76);
   $rh2=$78;
   $80=$l;
   $81=((($80)+(1))|0);
   $l=$81;
  }
  $83=$en0;
  $84=$xmin;
  $85=$83>$84;
  if ($85) {
   $87=$ath_over;
   $88=((($87)+(1))|0);
   $ath_over=$88;
  }
  $90=$en0;
  $91=$xmin;
  $92=$90<$91;
  if ($92) {
   $94=$en0;
   $rh3=$94;
  } else {
   $96=$rh2;
   $97=$xmin;
   $98=$96<$97;
   if ($98) {
    $100=$xmin;
    $rh3=$100;
   } else {
    $102=$rh2;
    $rh3=$102;
   }
  }
  $105=$rh3;
  $xmin=$105;
  $106=$gsfb;
  $107=$2;
  $108=(($107+244)|0);
  $109=(($108)|0);
  $110=(($109+($106<<2))|0);
  $111=(+(HEAPF32[(($110)>>2)]));
  $e=$111;
  $112=$e;
  $113=$112>(9.999999960041972e-13);
  if ($113) {
   $115=$en0;
   $116=$gsfb;
   $117=$2;
   $118=(($117)|0);
   $119=(($118)|0);
   $120=(($119+($116<<2))|0);
   $121=(+(HEAPF32[(($120)>>2)]));
   $122=($115)*($121);
   $123=$e;
   $124=($122)/($123);
   $x=$124;
   $125=$gsfb;
   $126=$1;
   $127=(($126+84768)|0);
   $128=(($127)|0);
   $129=(($128+($125<<2))|0);
   $130=(+(HEAPF32[(($129)>>2)]));
   $131=$x;
   $132=($131)*($130);
   $x=$132;
   $133=$xmin;
   $134=$x;
   $135=$133<$134;
   if ($135) {
    $137=$x;
    $xmin=$137;
   }
  }
  $140=$xmin;
  $141=$140;
  $142=$141>(2.220446049250313e-16);
  if ($142) {
   $144=$xmin;
   $145=$144;
   $148=$145;
  } else {
   $148=2.220446049250313e-16;
  }

  $149=$148;
  $xmin=$149;
  $150=$en0;
  $151=$xmin;
  $152=($151)+((9.9999998245167e-15));
  $153=$150>$152;
  $154=($153?1:0);
  $155=(($154)&255);
  $156=$gsfb;
  $157=$3;
  $158=(($157+5212)|0);
  $159=(($158+$156)|0);
  HEAP8[($159)]=$155;
  $160=$xmin;
  $161=$4;
  $162=(($161+4)|0);
  $4=$162;
  HEAPF32[(($161)>>2)]=$160;
  $164=$gsfb;
  $165=((($164)+(1))|0);
  $gsfb=$165;
 }
 $max_nonzero=0;
 $k=575;
 while(1) {
  $168=$k;
  $169=($168|0)>0;
  if (!($169)) {
   break;
  }
  $171=$k;
  $172=$xr;
  $173=(($172+($171<<2))|0);
  $174=(+(HEAPF32[(($173)>>2)]));
  $175=$174;
  $176=(+(Math_abs((+($175)))));
  $177=$176>(9.999999960041972e-13);
  if ($177) {
   label = 30;
   break;
  }
  $182=$k;
  $183=((($182)-(1))|0);
  $k=$183;
 }
 if ((label|0) == 30) {
  $179=$k;
  $max_nonzero=$179;
 }
 $185=$3;
 $186=(($185+4788)|0);
 $187=((HEAP32[(($186)>>2)])|0);
 $188=($187|0)!=2;
 if ($188) {
  $190=$max_nonzero;
  $191=$190|1;
  $max_nonzero=$191;
 } else {
  $193=$max_nonzero;
  $194=(((($193|0))/(6))&-1);
  $max_nonzero=$194;
  $195=$max_nonzero;
  $196=((($195)*(6))&-1);
  $max_nonzero=$196;
  $197=$max_nonzero;
  $198=((($197)+(5))|0);
  $max_nonzero=$198;
 }
 $200=$1;
 $201=(($200+84768)|0);
 $202=(($201+324)|0);
 $203=((HEAP32[(($202)>>2)])|0);
 $204=($203|0)==0;
 do {
  if ($204) {
   $206=$cfg;
   $207=(($206+48)|0);
   $208=((HEAP32[(($207)>>2)])|0);
   $209=($208|0)<44000;
   if (!($209)) {
    break;
   }
   $211=$cfg;
   $212=(($211+48)|0);
   $213=((HEAP32[(($212)>>2)])|0);
   $214=($213|0)<=8000;
   $215=($214?17:21);
   $sfb_l=$215;
   $216=$cfg;
   $217=(($216+48)|0);
   $218=((HEAP32[(($217)>>2)])|0);
   $219=($218|0)<=8000;
   $220=($219?9:12);
   $sfb_s=$220;
   $limit=575;
   $221=$3;
   $222=(($221+4788)|0);
   $223=((HEAP32[(($222)>>2)])|0);
   $224=($223|0)!=2;
   if ($224) {
    $226=$sfb_l;
    $227=$1;
    $228=(($227+21360)|0);
    $229=(($228)|0);
    $230=(($229+($226<<2))|0);
    $231=((HEAP32[(($230)>>2)])|0);
    $232=((($231)-(1))|0);
    $limit=$232;
   } else {
    $234=$sfb_s;
    $235=$1;
    $236=(($235+21360)|0);
    $237=(($236+92)|0);
    $238=(($237+($234<<2))|0);
    $239=((HEAP32[(($238)>>2)])|0);
    $240=((($239)*(3))&-1);
    $241=((($240)-(1))|0);
    $limit=$241;
   }
   $243=$max_nonzero;
   $244=$limit;
   $245=($243|0)>($244|0);
   if ($245) {
    $247=$limit;
    $max_nonzero=$247;
   }
  }
 } while(0);
 $250=$max_nonzero;
 $251=$3;
 $252=(($251+5208)|0);
 HEAP32[(($252)>>2)]=$250;
 $253=$3;
 $254=(($253+4852)|0);
 $255=((HEAP32[(($254)>>2)])|0);
 $sfb=$255;
 while(1) {
  $257=$gsfb;
  $258=$3;
  $259=(($258+4864)|0);
  $260=((HEAP32[(($259)>>2)])|0);
  $261=($257|0)<($260|0);
  if (!($261)) {
   break;
  }
  $263=$ATH;
  $264=(($263+8)|0);
  $265=(+(HEAPF32[(($264)>>2)]));
  $266=$sfb;
  $267=$ATH;
  $268=(($267+112)|0);
  $269=(($268+($266<<2))|0);
  $270=(+(HEAPF32[(($269)>>2)]));
  $271=$ATH;
  $272=(($271+20)|0);
  $273=(+(HEAPF32[(($272)>>2)]));
  $274=$cfg;
  $275=(($274+208)|0);
  $276=(+(HEAPF32[(($275)>>2)]));
  $277=(+(_athAdjust($265,$270,$273,$276)));
  $tmpATH=$277;
  $278=$sfb;
  $279=$1;
  $280=(($279+84768)|0);
  $281=(($280+88)|0);
  $282=(($281+($278<<2))|0);
  $283=(+(HEAPF32[(($282)>>2)]));
  $284=$tmpATH;
  $285=($284)*($283);
  $tmpATH=$285;
  $286=$gsfb;
  $287=$3;
  $288=(($287+4872)|0);
  $289=(($288+($286<<2))|0);
  $290=((HEAP32[(($289)>>2)])|0);
  $width1=$290;
  $b=0;
  while(1) {
   $292=$b;
   $293=($292|0)<3;
   if (!($293)) {
    break;
   }
   $en03=0.0;
   $295=$tmpATH;
   $xmin4=$295;
   $296=$tmpATH;
   $297=$width1;
   $298=(+((($297|0))|0));
   $299=($296)/($298);
   $rh15=$299;
   $rh26=2.220446049250313e-16;
   $l2=0;
   while(1) {
    $301=$l2;
    $302=$width1;
    $303=($301|0)<($302|0);
    if (!($303)) {
     break;
    }
    $305=$j;
    $306=((($305)+(1))|0);
    $j=$306;
    $307=$xr;
    $308=(($307+($305<<2))|0);
    $309=(+(HEAPF32[(($308)>>2)]));
    $xa8=$309;
    $310=$xa8;
    $311=$xa8;
    $312=($310)*($311);
    $x29=$312;
    $313=$x29;
    $314=$en03;
    $315=($314)+($313);
    $en03=$315;
    $316=$x29;
    $317=$rh15;
    $318=$316<$317;
    if ($318) {
     $320=$x29;
     $324=$320;
    } else {
     $322=$rh15;
     $324=$322;
    }

    $325=$rh26;
    $326=($325)+($324);
    $rh26=$326;
    $328=$l2;
    $329=((($328)+(1))|0);
    $l2=$329;
   }
   $331=$en03;
   $332=$tmpATH;
   $333=$331>$332;
   if ($333) {
    $335=$ath_over;
    $336=((($335)+(1))|0);
    $ath_over=$336;
   }
   $338=$en03;
   $339=$tmpATH;
   $340=$338<$339;
   if ($340) {
    $342=$en03;
    $rh37=$342;
   } else {
    $344=$rh26;
    $345=$tmpATH;
    $346=$344<$345;
    if ($346) {
     $348=$tmpATH;
     $rh37=$348;
    } else {
     $350=$rh26;
     $rh37=$350;
    }
   }
   $353=$rh37;
   $xmin4=$353;
   $354=$b;
   $355=$sfb;
   $356=$2;
   $357=(($356+244)|0);
   $358=(($357+88)|0);
   $359=(($358+((($355)*(12))&-1))|0);
   $360=(($359+($354<<2))|0);
   $361=(+(HEAPF32[(($360)>>2)]));
   $e10=$361;
   $362=$e10;
   $363=$362>(9.999999960041972e-13);
   if ($363) {
    $365=$en03;
    $366=$b;
    $367=$sfb;
    $368=$2;
    $369=(($368)|0);
    $370=(($369+88)|0);
    $371=(($370+((($367)*(12))&-1))|0);
    $372=(($371+($366<<2))|0);
    $373=(+(HEAPF32[(($372)>>2)]));
    $374=($365)*($373);
    $375=$e10;
    $376=($374)/($375);
    $x11=$376;
    $377=$sfb;
    $378=$1;
    $379=(($378+84768)|0);
    $380=(($379+88)|0);
    $381=(($380+($377<<2))|0);
    $382=(+(HEAPF32[(($381)>>2)]));
    $383=$x11;
    $384=($383)*($382);
    $x11=$384;
    $385=$xmin4;
    $386=$x11;
    $387=$385<$386;
    if ($387) {
     $389=$x11;
     $xmin4=$389;
    }
   }
   $392=$xmin4;
   $393=$392;
   $394=$393>(2.220446049250313e-16);
   if ($394) {
    $396=$xmin4;
    $397=$396;
    $400=$397;
   } else {
    $400=2.220446049250313e-16;
   }

   $401=$400;
   $xmin4=$401;
   $402=$en03;
   $403=$xmin4;
   $404=($403)+((9.9999998245167e-15));
   $405=$402>$404;
   $406=($405?1:0);
   $407=(($406)&255);
   $408=$gsfb;
   $409=$b;
   $410=((($408)+($409))|0);
   $411=$3;
   $412=(($411+5212)|0);
   $413=(($412+$410)|0);
   HEAP8[($413)]=$407;
   $414=$xmin4;
   $415=$4;
   $416=(($415+4)|0);
   $4=$416;
   HEAPF32[(($415)>>2)]=$414;
   $418=$b;
   $419=((($418)+(1))|0);
   $b=$419;
  }
  $421=$cfg;
  $422=(($421+76)|0);
  $423=((HEAP32[(($422)>>2)])|0);
  $424=($423|0)!=0;
  if ($424) {
   $426=$4;
   $427=((($426)-(12))|0);
   $428=(+(HEAPF32[(($427)>>2)]));
   $429=$4;
   $430=((($429)-(8))|0);
   $431=(+(HEAPF32[(($430)>>2)]));
   $432=$428>$431;
   if ($432) {
    $434=$4;
    $435=((($434)-(12))|0);
    $436=(+(HEAPF32[(($435)>>2)]));
    $437=$4;
    $438=((($437)-(8))|0);
    $439=(+(HEAPF32[(($438)>>2)]));
    $440=($436)-($439);
    $441=$1;
    $442=(($441+85800)|0);
    $443=((HEAP32[(($442)>>2)])|0);
    $444=(($443+6496)|0);
    $445=(+(HEAPF32[(($444)>>2)]));
    $446=($440)*($445);
    $447=$4;
    $448=((($447)-(8))|0);
    $449=(+(HEAPF32[(($448)>>2)]));
    $450=($449)+($446);
    HEAPF32[(($448)>>2)]=$450;
   }
   $452=$4;
   $453=((($452)-(8))|0);
   $454=(+(HEAPF32[(($453)>>2)]));
   $455=$4;
   $456=((($455)-(4))|0);
   $457=(+(HEAPF32[(($456)>>2)]));
   $458=$454>$457;
   if ($458) {
    $460=$4;
    $461=((($460)-(8))|0);
    $462=(+(HEAPF32[(($461)>>2)]));
    $463=$4;
    $464=((($463)-(4))|0);
    $465=(+(HEAPF32[(($464)>>2)]));
    $466=($462)-($465);
    $467=$1;
    $468=(($467+85800)|0);
    $469=((HEAP32[(($468)>>2)])|0);
    $470=(($469+6496)|0);
    $471=(+(HEAPF32[(($470)>>2)]));
    $472=($466)*($471);
    $473=$4;
    $474=((($473)-(4))|0);
    $475=(+(HEAPF32[(($474)>>2)]));
    $476=($475)+($472);
    HEAPF32[(($474)>>2)]=$476;
   }
  }
  $480=$sfb;
  $481=((($480)+(1))|0);
  $sfb=$481;
  $482=$gsfb;
  $483=((($482)+(3))|0);
  $gsfb=$483;
 }
 $485=$ath_over;
 STACKTOP=sp;return (($485)|0);
}


function _calc_noise($cod_info,$l3_xmin,$distort,$res,$prev_noise){
 $cod_info=($cod_info)|0;
 $l3_xmin=($l3_xmin)|0;
 $distort=($distort)|0;
 $res=($res)|0;
 $prev_noise=($prev_noise)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$sfb=0,$l=0,$over=0,$over_noise_db=.0,$tot_noise_db=.0,$max_noise=.0,$j=0,$scalefac=0,$s=0,$r_l3_xmin=.0,$distort_=.0,$noise=.0,$step=.0,$usefullsize=0,$tmp=0;
 var $6=0,$7=0,$8=0,$9=0,$10=0,$12=0,$13=0,$14=0,$15=0,$16=0,$18=0,$19=0,$20=0,$21=0,$22=0,$23=0,$24=0,$25=0,$26=0,$27=0;
 var $29=0,$30=0,$31=0,$34=0,$35=0,$36=0,$37=0,$38=0,$39=0,$40=0,$41=0,$42=0,$43=0,$44=0,$45=0,$46=0,$47=0,$48=0,$49=0,$50=0;
 var $51=0,$52=0,$53=0,$54=0,$55=.0,$56=.0,$57=0,$58=0,$60=0,$61=0,$62=0,$63=0,$64=0,$65=0,$66=0,$68=0,$69=0,$70=0,$71=0,$72=0;
 var $73=0,$74=0,$75=.0,$76=0,$77=0,$78=0,$79=0,$80=.0,$81=.0,$82=0,$83=0,$84=0,$85=0,$86=.0,$88=0,$89=0,$90=0,$91=.0,$92=0,$93=0;
 var $94=0,$95=0,$96=0,$97=0,$98=0,$99=0,$100=0,$101=0,$102=0,$103=0,$104=0,$105=0,$106=0,$107=0,$108=0,$110=0,$111=0,$112=0,$113=0,$114=0;
 var $115=0,$116=0,$117=0,$119=0,$120=0,$124=0,$125=0,$126=.0,$127=.0,$128=0,$129=0,$131=0,$132=0,$133=0,$134=0,$135=0,$136=.0,$137=0,$138=0,$139=0;
 var $140=0,$142=.0,$143=.0,$144=.0,$145=.0,$146=0,$148=.0,$151=.0,$152=.0,$153=.0,$154=.0,$155=.0,$156=0,$157=0,$159=.0,$160=0,$161=0,$162=0,$163=0,$166=.0;
 var $167=0,$168=0,$169=0,$170=0,$172=0,$173=0,$174=0,$175=0,$176=0,$178=.0,$179=.0,$180=.0,$181=.0,$182=.0,$183=0,$185=.0,$186=.0,$187=.0,$188=.0,$189=0;
 var $190=0,$192=.0,$193=.0,$194=.0,$195=.0,$196=0,$199=0,$200=0,$201=0,$202=0,$203=0,$204=0,$205=0,$206=0,$207=0,$208=0,$209=.0,$210=.0,$211=.0,$213=.0;
 var $214=.0,$215=0,$217=.0,$219=.0,$221=.0,$223=0,$224=0,$226=0,$227=0,$228=0,$229=.0,$230=0,$231=0,$232=.0,$233=0,$234=0,$235=.0,$236=0,$237=0,$238=0;
 var label=0;
 var sp=0;sp=STACKTOP;STACKTOP=(STACKTOP+8)|0;











 $j=((sp)|0);








 $1=$cod_info;
 $2=$l3_xmin;
 $3=$distort;
 $4=$res;
 $5=$prev_noise;
 $over=0;
 $over_noise_db=0.0;
 $tot_noise_db=0.0;
 $max_noise=-20.0;
 HEAP32[(($j)>>2)]=0;
 $6=$1;
 $7=(($6+4608)|0);
 $8=(($7)|0);
 $scalefac=$8;
 $9=$4;
 $10=(($9+16)|0);
 HEAP32[(($10)>>2)]=0;
 $sfb=0;
 while(1) {
  $12=$sfb;
  $13=$1;
  $14=(($13+4864)|0);
  $15=((HEAP32[(($14)>>2)])|0);
  $16=($12|0)<($15|0);
  if (!($16)) {
   break;
  }
  $18=$1;
  $19=(($18+4780)|0);
  $20=((HEAP32[(($19)>>2)])|0);
  $21=$scalefac;
  $22=(($21+4)|0);
  $scalefac=$22;
  $23=((HEAP32[(($21)>>2)])|0);
  $24=$1;
  $25=(($24+4832)|0);
  $26=((HEAP32[(($25)>>2)])|0);
  $27=($26|0)!=0;
  if ($27) {
   $29=$sfb;
   $30=((9552+($29<<2))|0);
   $31=((HEAP32[(($30)>>2)])|0);
   $34=$31;
  } else {
   $34=0;
  }

  $35=((($23)+($34))|0);
  $36=$1;
  $37=(($36+4836)|0);
  $38=((HEAP32[(($37)>>2)])|0);
  $39=((($38)+(1))|0);
  $40=$35<<$39;
  $41=((($20)-($40))|0);
  $42=$sfb;
  $43=$1;
  $44=(($43+5028)|0);
  $45=(($44+($42<<2))|0);
  $46=((HEAP32[(($45)>>2)])|0);
  $47=$1;
  $48=(($47+4808)|0);
  $49=(($48+($46<<2))|0);
  $50=((HEAP32[(($49)>>2)])|0);
  $51=($50<<3);
  $52=((($41)-($51))|0);
  $s=$52;
  $53=$2;
  $54=(($53+4)|0);
  $2=$54;
  $55=(+(HEAPF32[(($53)>>2)]));
  $56=((1.0))/($55);
  $r_l3_xmin=$56;
  $distort_=0.0;
  $noise=0.0;
  $57=$5;
  $58=($57|0)!=0;
  do {
   if ($58) {
    $60=$sfb;
    $61=$5;
    $62=(($61+8)|0);
    $63=(($62+($60<<2))|0);
    $64=((HEAP32[(($63)>>2)])|0);
    $65=$s;
    $66=($64|0)==($65|0);
    if (!($66)) {
     label = 9;
     break;
    }
    $68=$sfb;
    $69=$1;
    $70=(($69+4872)|0);
    $71=(($70+($68<<2))|0);
    $72=((HEAP32[(($71)>>2)])|0);
    $73=((HEAP32[(($j)>>2)])|0);
    $74=((($73)+($72))|0);
    HEAP32[(($j)>>2)]=$74;
    $75=$r_l3_xmin;
    $76=$sfb;
    $77=$5;
    $78=(($77+164)|0);
    $79=(($78+($76<<2))|0);
    $80=(+(HEAPF32[(($79)>>2)]));
    $81=($75)*($80);
    $distort_=$81;
    $82=$sfb;
    $83=$5;
    $84=(($83+320)|0);
    $85=(($84+($82<<2))|0);
    $86=(+(HEAPF32[(($85)>>2)]));
    $noise=$86;
   } else {
    label = 9;
   }
  } while(0);
  if ((label|0) == 9) {
   label = 0;
   $88=$s;
   $89=((($88)+(116))|0);
   $90=((55784+($89<<2))|0);
   $91=(+(HEAPF32[(($90)>>2)]));
   $step=$91;
   $92=$sfb;
   $93=$1;
   $94=(($93+4872)|0);
   $95=(($94+($92<<2))|0);
   $96=((HEAP32[(($95)>>2)])|0);
   $97=$96>>1;
   $l=$97;
   $98=((HEAP32[(($j)>>2)])|0);
   $99=$sfb;
   $100=$1;
   $101=(($100+4872)|0);
   $102=(($101+($99<<2))|0);
   $103=((HEAP32[(($102)>>2)])|0);
   $104=((($98)+($103))|0);
   $105=$1;
   $106=(($105+5208)|0);
   $107=((HEAP32[(($106)>>2)])|0);
   $108=($104|0)>($107|0);
   if ($108) {
    $110=$1;
    $111=(($110+5208)|0);
    $112=((HEAP32[(($111)>>2)])|0);
    $113=((HEAP32[(($j)>>2)])|0);
    $114=((($112)-($113))|0);
    $115=((($114)+(1))|0);
    $usefullsize=$115;
    $116=$usefullsize;
    $117=($116|0)>0;
    if ($117) {
     $119=$usefullsize;
     $120=$119>>1;
     $l=$120;
    } else {
     $l=0;
    }
   }
   $124=$1;
   $125=$l;
   $126=$step;
   $127=(+(_calc_noise_core_c($124,$j,$125,$126)));
   $noise=$127;
   $128=$5;
   $129=($128|0)!=0;
   if ($129) {
    $131=$s;
    $132=$sfb;
    $133=$5;
    $134=(($133+8)|0);
    $135=(($134+($132<<2))|0);
    HEAP32[(($135)>>2)]=$131;
    $136=$noise;
    $137=$sfb;
    $138=$5;
    $139=(($138+164)|0);
    $140=(($139+($137<<2))|0);
    HEAPF32[(($140)>>2)]=$136;
   }
   $142=$r_l3_xmin;
   $143=$noise;
   $144=($142)*($143);
   $distort_=$144;
   $145=$distort_;
   $146=$145>(9.999999682655225e-21);
   if ($146) {
    $148=$distort_;
    $151=$148;
   } else {
    $151=9.999999682655225e-21;
   }

   $152=(+(_fast_log2($151)));
   $153=$152;
   $154=($153)*((0.30102999566398114));
   $155=$154;
   $noise=$155;
   $156=$5;
   $157=($156|0)!=0;
   if ($157) {
    $159=$noise;
    $160=$sfb;
    $161=$5;
    $162=(($161+320)|0);
    $163=(($162+($160<<2))|0);
    HEAPF32[(($163)>>2)]=$159;
   }
  }
  $166=$distort_;
  $167=$3;
  $168=(($167+4)|0);
  $3=$168;
  HEAPF32[(($167)>>2)]=$166;
  $169=$5;
  $170=($169|0)!=0;
  if ($170) {
   $172=$1;
   $173=(($172+4780)|0);
   $174=((HEAP32[(($173)>>2)])|0);
   $175=$5;
   $176=(($175)|0);
   HEAP32[(($176)>>2)]=$174;
  }
  $178=$noise;
  $179=$tot_noise_db;
  $180=($179)+($178);
  $tot_noise_db=$180;
  $181=$noise;
  $182=$181;
  $183=$182>(0.0);
  if ($183) {
   $185=$noise;
   $186=($185)*((10.0));
   $187=$186;
   $188=($187)+((0.5));
   $189=(~~($188));
   $190=($189|0)>1;
   if ($190) {
    $192=$noise;
    $193=($192)*((10.0));
    $194=$193;
    $195=($194)+((0.5));
    $196=(~~($195));
    $199=$196;
   } else {
    $199=1;
   }

   $tmp=$199;
   $200=$tmp;
   $201=$tmp;
   $202=(Math_imul($200,$201)|0);
   $203=$4;
   $204=(($203+16)|0);
   $205=((HEAP32[(($204)>>2)])|0);
   $206=((($205)+($202))|0);
   HEAP32[(($204)>>2)]=$206;
   $207=$over;
   $208=((($207)+(1))|0);
   $over=$208;
   $209=$noise;
   $210=$over_noise_db;
   $211=($210)+($209);
   $over_noise_db=$211;
  }
  $213=$max_noise;
  $214=$noise;
  $215=$213>$214;
  if ($215) {
   $217=$max_noise;
   $221=$217;
  } else {
   $219=$noise;
   $221=$219;
  }

  $max_noise=$221;
  $223=$sfb;
  $224=((($223)+(1))|0);
  $sfb=$224;
 }
 $226=$over;
 $227=$4;
 $228=(($227+12)|0);
 HEAP32[(($228)>>2)]=$226;
 $229=$tot_noise_db;
 $230=$4;
 $231=(($230+4)|0);
 HEAPF32[(($231)>>2)]=$229;
 $232=$over_noise_db;
 $233=$4;
 $234=(($233)|0);
 HEAPF32[(($234)>>2)]=$232;
 $235=$max_noise;
 $236=$4;
 $237=(($236+8)|0);
 HEAPF32[(($237)>>2)]=$235;
 $238=$over;
 STACKTOP=sp;return (($238)|0);
}


function _calc_noise_core_c($cod_info,$startline,$l,$step){
 $cod_info=($cod_info)|0;
 $startline=($startline)|0;
 $l=($l)|0;
 $step=+($step);
 var $1=0,$2=0,$3=0,$4=.0,$noise=.0,$j=0,$ix=0,$temp=.0,$ix01=0,$temp1=.0,$temp2=.0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0;
 var $14=0,$17=0,$18=0,$19=0,$21=0,$22=0,$23=0,$24=0,$25=.0,$26=0,$27=0,$28=.0,$29=.0,$30=.0,$31=.0,$32=.0,$33=0,$34=0,$35=0,$36=0;
 var $37=.0,$38=0,$39=0,$40=.0,$41=.0,$42=.0,$43=.0,$44=.0,$47=0,$48=0,$49=0,$50=0,$51=0,$53=0,$54=.0,$55=0,$57=0,$58=0,$59=0,$61=0;
 var $62=0,$63=0,$64=0,$65=.0,$66=.0,$67=.0,$68=0,$69=0,$70=0,$71=0,$72=0,$73=.0,$74=.0,$75=.0,$76=.0,$77=0,$78=0,$79=.0,$80=.0,$81=.0;
 var $82=.0,$83=.0,$84=0,$85=0,$86=0,$87=0,$88=.0,$89=.0,$90=.0,$91=0,$92=0,$93=0,$94=0,$95=0,$96=.0,$97=.0,$98=.0,$99=.0,$100=0,$101=0;
 var $102=.0,$103=.0,$104=.0,$105=.0,$106=.0,$110=0,$111=0,$112=0,$114=0,$115=0,$116=0,$117=0,$118=.0,$119=.0,$120=.0,$121=0,$122=0,$123=0,$124=0,$125=0;
 var $126=.0,$127=.0,$128=.0,$129=.0,$130=.0,$131=.0,$132=0,$133=0,$134=.0,$135=.0,$136=.0,$137=.0,$138=.0,$139=0,$140=0,$141=0,$142=0,$143=.0,$144=.0,$145=.0;
 var $146=0,$147=0,$148=0,$149=0,$150=0,$151=.0,$152=.0,$153=.0,$154=.0,$155=.0,$156=.0,$157=0,$158=0,$159=.0,$160=.0,$161=.0,$162=.0,$163=.0,$167=0,$168=0;
 var $169=.0,label=0;
 var sp=0;sp=STACKTOP;STACKTOP=(STACKTOP+8)|0;








 $ix01=((sp)|0);


 $1=$cod_info;
 $2=$startline;
 $3=$l;
 $4=$step;
 $noise=0.0;
 $5=$2;
 $6=((HEAP32[(($5)>>2)])|0);
 $j=$6;
 $7=$1;
 $8=(($7+2304)|0);
 $9=(($8)|0);
 $ix=$9;
 $10=$j;
 $11=$1;
 $12=(($11+4776)|0);
 $13=((HEAP32[(($12)>>2)])|0);
 $14=($10|0)>($13|0);
 if ($14) {
  while(1) {
   $17=$3;
   $18=((($17)-(1))|0);
   $3=$18;
   $19=($17|0)!=0;
   if (!($19)) {
    break;
   }
   $21=$j;
   $22=$1;
   $23=(($22)|0);
   $24=(($23+($21<<2))|0);
   $25=(+(HEAPF32[(($24)>>2)]));
   $temp=$25;
   $26=$j;
   $27=((($26)+(1))|0);
   $j=$27;
   $28=$temp;
   $29=$temp;
   $30=($28)*($29);
   $31=$noise;
   $32=($31)+($30);
   $noise=$32;
   $33=$j;
   $34=$1;
   $35=(($34)|0);
   $36=(($35+($33<<2))|0);
   $37=(+(HEAPF32[(($36)>>2)]));
   $temp=$37;
   $38=$j;
   $39=((($38)+(1))|0);
   $j=$39;
   $40=$temp;
   $41=$temp;
   $42=($40)*($41);
   $43=$noise;
   $44=($43)+($42);
   $noise=$44;
  }
  $167=$j;
  $168=$2;
  HEAP32[(($168)>>2)]=$167;
  $169=$noise;
  STACKTOP=sp;return (+($169));
 }
 $47=$j;
 $48=$1;
 $49=(($48+4772)|0);
 $50=((HEAP32[(($49)>>2)])|0);
 $51=($47|0)>($50|0);
 if ($51) {
  $53=(($ix01)|0);
  HEAPF32[(($53)>>2)]=0.0;
  $54=$4;
  $55=(($ix01+4)|0);
  HEAPF32[(($55)>>2)]=$54;
  while(1) {
   $57=$3;
   $58=((($57)-(1))|0);
   $3=$58;
   $59=($57|0)!=0;
   if (!($59)) {
    break;
   }
   $61=$j;
   $62=$1;
   $63=(($62)|0);
   $64=(($63+($61<<2))|0);
   $65=(+(HEAPF32[(($64)>>2)]));
   $66=$65;
   $67=(+(Math_abs((+($66)))));
   $68=$j;
   $69=$ix;
   $70=(($69+($68<<2))|0);
   $71=((HEAP32[(($70)>>2)])|0);
   $72=(($ix01+($71<<2))|0);
   $73=(+(HEAPF32[(($72)>>2)]));
   $74=$73;
   $75=($67)-($74);
   $76=$75;
   $temp1=$76;
   $77=$j;
   $78=((($77)+(1))|0);
   $j=$78;
   $79=$temp1;
   $80=$temp1;
   $81=($79)*($80);
   $82=$noise;
   $83=($82)+($81);
   $noise=$83;
   $84=$j;
   $85=$1;
   $86=(($85)|0);
   $87=(($86+($84<<2))|0);
   $88=(+(HEAPF32[(($87)>>2)]));
   $89=$88;
   $90=(+(Math_abs((+($89)))));
   $91=$j;
   $92=$ix;
   $93=(($92+($91<<2))|0);
   $94=((HEAP32[(($93)>>2)])|0);
   $95=(($ix01+($94<<2))|0);
   $96=(+(HEAPF32[(($95)>>2)]));
   $97=$96;
   $98=($90)-($97);
   $99=$98;
   $temp1=$99;
   $100=$j;
   $101=((($100)+(1))|0);
   $j=$101;
   $102=$temp1;
   $103=$temp1;
   $104=($102)*($103);
   $105=$noise;
   $106=($105)+($104);
   $noise=$106;
  }
 } else {
  while(1) {
   $110=$3;
   $111=((($110)-(1))|0);
   $3=$111;
   $112=($110|0)!=0;
   if (!($112)) {
    break;
   }
   $114=$j;
   $115=$1;
   $116=(($115)|0);
   $117=(($116+($114<<2))|0);
   $118=(+(HEAPF32[(($117)>>2)]));
   $119=$118;
   $120=(+(Math_abs((+($119)))));
   $121=$j;
   $122=$ix;
   $123=(($122+($121<<2))|0);
   $124=((HEAP32[(($123)>>2)])|0);
   $125=((22952+($124<<2))|0);
   $126=(+(HEAPF32[(($125)>>2)]));
   $127=$4;
   $128=($126)*($127);
   $129=$128;
   $130=($120)-($129);
   $131=$130;
   $temp2=$131;
   $132=$j;
   $133=((($132)+(1))|0);
   $j=$133;
   $134=$temp2;
   $135=$temp2;
   $136=($134)*($135);
   $137=$noise;
   $138=($137)+($136);
   $noise=$138;
   $139=$j;
   $140=$1;
   $141=(($140)|0);
   $142=(($141+($139<<2))|0);
   $143=(+(HEAPF32[(($142)>>2)]));
   $144=$143;
   $145=(+(Math_abs((+($144)))));
   $146=$j;
   $147=$ix;
   $148=(($147+($146<<2))|0);
   $149=((HEAP32[(($148)>>2)])|0);
   $150=((22952+($149<<2))|0);
   $151=(+(HEAPF32[(($150)>>2)]));
   $152=$4;
   $153=($151)*($152);
   $154=$153;
   $155=($145)-($154);
   $156=$155;
   $temp2=$156;
   $157=$j;
   $158=((($157)+(1))|0);
   $j=$158;
   $159=$temp2;
   $160=$temp2;
   $161=($159)*($160);
   $162=$noise;
   $163=($162)+($161);
   $noise=$163;
  }
 }
 $167=$j;
 $168=$2;
 HEAP32[(($168)>>2)]=$167;
 $169=$noise;
 STACKTOP=sp;return (+($169));
}


function _set_frame_pinfo($gfc,$ratio){
 $gfc=($gfc)|0;
 $ratio=($ratio)|0;
 var $1=0,$2=0,$cfg=0,$ch=0,$gr=0,$cod_info=0,$scalefac_sav=0,$sfb=0,$3=0,$4=0,$6=0,$7=0,$8=0,$9=0,$10=0,$13=0,$14=0,$15=0,$16=0,$17=0;
 var $19=0,$20=0,$21=0,$22=0,$23=0,$24=0,$25=0,$26=0,$27=0,$28=0,$29=0,$30=0,$31=0,$34=0,$35=0,$36=0,$37=0,$38=0,$40=0,$41=0;
 var $42=0,$43=0,$44=0,$45=0,$47=0,$48=0,$49=0,$50=0,$51=0,$52=0,$53=0,$54=0,$55=0,$56=0,$57=0,$58=0,$59=0,$60=0,$63=0,$64=0;
 var $67=0,$68=0,$69=0,$70=0,$71=0,$72=0,$73=0,$74=0,$75=0,$76=0,$77=0,$78=0,$79=0,$81=0,$82=0,$85=0,$86=0,label=0;
 var sp=0;sp=STACKTOP;STACKTOP=(STACKTOP+160)|0;






 $scalefac_sav=((sp)|0);

 $1=$gfc;
 $2=$ratio;
 $3=$1;
 $4=(($3+16)|0);
 $cfg=$4;
 $gr=0;
 while(1) {
  $6=$gr;
  $7=$cfg;
  $8=(($7+60)|0);
  $9=((HEAP32[(($8)>>2)])|0);
  $10=($6|0)<($9|0);
  if (!($10)) {
   break;
  }
  $ch=0;
  while(1) {
   $13=$ch;
   $14=$cfg;
   $15=(($14+56)|0);
   $16=((HEAP32[(($15)>>2)])|0);
   $17=($13|0)<($16|0);
   if (!($17)) {
    break;
   }
   $19=$ch;
   $20=$gr;
   $21=$1;
   $22=(($21+304)|0);
   $23=(($22)|0);
   $24=(($23+((($20)*(10504))&-1))|0);
   $25=(($24+((($19)*(5252))&-1))|0);
   $cod_info=$25;
   $26=$scalefac_sav;
   $27=$cod_info;
   $28=(($27+4608)|0);
   $29=$28;
   (_memcpy((($26)|0), (($29)|0), 156)|0);
   $30=$gr;
   $31=($30|0)==1;
   if ($31) {
    $sfb=0;
    while(1) {
     $34=$sfb;
     $35=$cod_info;
     $36=(($35+4848)|0);
     $37=((HEAP32[(($36)>>2)])|0);
     $38=($34|0)<($37|0);
     if (!($38)) {
      break;
     }
     $40=$sfb;
     $41=$cod_info;
     $42=(($41+4608)|0);
     $43=(($42+($40<<2))|0);
     $44=((HEAP32[(($43)>>2)])|0);
     $45=($44|0)<0;
     if ($45) {
      $47=$sfb;
      $48=$ch;
      $49=$1;
      $50=(($49+304)|0);
      $51=(($50)|0);
      $52=(($51)|0);
      $53=(($52+((($48)*(5252))&-1))|0);
      $54=(($53+4608)|0);
      $55=(($54+($47<<2))|0);
      $56=((HEAP32[(($55)>>2)])|0);
      $57=$sfb;
      $58=$cod_info;
      $59=(($58+4608)|0);
      $60=(($59+($57<<2))|0);
      HEAP32[(($60)>>2)]=$56;
     }
     $63=$sfb;
     $64=((($63)+(1))|0);
     $sfb=$64;
    }
   }
   $67=$1;
   $68=$cod_info;
   $69=$ch;
   $70=$gr;
   $71=$2;
   $72=(($71+((($70)*(976))&-1))|0);
   $73=(($72+((($69)*(488))&-1))|0);
   $74=$gr;
   $75=$ch;
   _set_pinfo($67,$68,$73,$74,$75);
   $76=$cod_info;
   $77=(($76+4608)|0);
   $78=$77;
   $79=$scalefac_sav;
   (_memcpy((($78)|0), (($79)|0), 156)|0);
   $81=$ch;
   $82=((($81)+(1))|0);
   $ch=$82;
  }
  $85=$gr;
  $86=((($85)+(1))|0);
  $gr=$86;
 }
 STACKTOP=sp;return;
}


function _set_pinfo($gfc,$cod_info,$ratio,$gr,$ch){
 $gfc=($gfc)|0;
 $cod_info=($cod_info)|0;
 $ratio=($ratio)|0;
 $gr=($gr)|0;
 $ch=($ch)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$cfg=0,$sfb=0,$sfb2=0,$j=0,$i=0,$l=0,$start=0,$end=0,$bw=0,$en0=.0,$en1=.0,$ifqstep=.0,$scalefac=0,$l3_xmin=0,$xfsf=0;
 var $noise=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=.0,$13=.0,$14=0,$15=0,$16=0,$17=0,$18=0,$19=0,$20=0,$21=0,$22=0,$23=0,$24=0;
 var $25=0,$26=0,$27=0,$28=0,$29=0,$30=0,$31=0,$32=0,$34=0,$35=0,$36=0,$37=0,$41=0,$42=0,$43=0,$45=0,$46=0,$47=0,$48=0,$49=0;
 var $50=0,$51=0,$52=0,$53=0,$54=0,$55=0,$56=0,$57=0,$58=0,$59=0,$60=0,$62=0,$63=0,$64=0,$66=0,$67=0,$68=0,$69=0,$70=.0,$71=0;
 var $72=0,$73=0,$74=0,$75=.0,$76=.0,$77=.0,$78=.0,$80=0,$81=0,$83=0,$84=.0,$85=.0,$86=.0,$87=.0,$88=.0,$89=.0,$90=.0,$91=0,$92=0,$93=0;
 var $94=0,$95=0,$96=0,$97=0,$98=0,$99=0,$100=0,$101=.0,$102=0,$103=0,$104=.0,$105=.0,$106=0,$107=0,$108=.0,$109=.0,$110=0,$111=.0,$112=.0,$113=.0;
 var $114=0,$115=0,$116=0,$117=0,$118=0,$119=0,$120=0,$121=0,$122=0,$123=0,$124=0,$125=0,$126=0,$127=0,$128=0,$129=.0,$130=0,$132=0,$133=0,$134=0;
 var $135=0,$137=.0,$138=0,$139=0,$140=0,$141=0,$142=0,$143=.0,$144=.0,$147=.0,$148=.0,$149=0,$150=0,$151=0,$152=0,$153=0,$154=.0,$155=.0,$156=0,$157=0;
 var $158=0,$159=0,$160=0,$161=0,$162=.0,$163=0,$165=.0,$166=0,$167=0,$168=0,$169=0,$170=0,$171=.0,$172=.0,$174=0,$175=0,$176=0,$177=0,$178=0,$179=0;
 var $180=.0,$182=.0,$183=.0,$184=.0,$185=0,$186=0,$187=0,$188=0,$189=0,$190=0,$191=0,$192=0,$193=0,$194=0,$195=0,$196=0,$197=0,$198=0,$199=0,$200=0;
 var $201=0,$202=0,$203=0,$204=0,$205=0,$206=0,$207=0,$208=0,$210=0,$211=0,$213=.0,$214=.0,$215=0,$216=0,$217=0,$218=.0,$219=.0,$220=.0,$221=0,$222=0;
 var $223=0,$224=0,$225=0,$226=0,$227=0,$228=0,$229=0,$230=0,$232=0,$233=0,$235=.0,$236=0,$237=0,$238=0,$239=0,$240=.0,$241=.0,$242=.0,$243=0,$244=0;
 var $245=0,$246=0,$247=0,$248=0,$249=0,$250=0,$251=0,$252=0,$253=.0,$254=.0,$257=0,$258=0,$260=0,$261=0,$262=0,$263=0,$265=0,$266=0,$267=0,$268=0;
 var $270=0,$271=0,$273=0,$274=0,$275=0,$276=0,$277=0,$278=0,$279=0,$280=0,$281=0,$282=0,$283=0,$284=0,$285=0,$286=0,$287=0,$288=0,$290=0,$291=0;
 var $293=0,$295=0,$296=0,$297=0,$299=0,$300=0,$301=0,$302=0,$303=.0,$304=0,$305=0,$306=0,$307=0,$308=.0,$309=.0,$310=.0,$311=.0,$312=0,$313=0,$315=0;
 var $316=0,$318=.0,$319=0,$320=.0,$321=.0,$322=.0,$323=0,$325=.0,$326=0,$327=.0,$328=.0,$329=.0,$332=.0,$333=.0,$334=.0,$335=.0,$336=.0,$337=.0,$338=0,$339=0;
 var $340=0,$341=0,$342=0,$343=0,$344=0,$345=0,$346=0,$347=0,$348=0,$349=0,$350=0,$351=.0,$352=0,$353=0,$354=.0,$355=.0,$356=0,$357=0,$358=.0,$359=.0;
 var $360=0,$361=.0,$362=.0,$363=.0,$364=0,$365=0,$366=0,$367=0,$368=0,$369=0,$370=0,$371=0,$372=0,$373=0,$374=0,$375=0,$376=0,$377=0,$378=0,$379=0;
 var $380=0,$381=0,$382=0,$383=0,$384=.0,$385=0,$387=.0,$388=0,$389=0,$390=0,$391=0,$392=0,$393=0,$394=0,$395=.0,$396=.0,$399=0,$400=0,$401=0,$402=0;
 var $404=0,$405=0,$406=0,$407=0,$410=.0,$411=.0,$412=0,$413=0,$414=0,$415=0,$416=0,$417=0,$418=0,$419=.0,$420=.0,$421=0,$422=0,$423=0,$424=0,$425=0;
 var $426=0,$427=.0,$428=0,$430=.0,$431=0,$432=0,$433=0,$434=0,$435=0,$436=0,$437=0,$438=.0,$439=.0,$441=0,$442=0,$443=0,$444=0,$445=0,$446=0,$447=.0;
 var $449=.0,$450=.0,$451=.0,$452=0,$453=0,$454=0,$455=0,$456=0,$457=0,$458=0,$459=0,$460=0,$461=0,$462=0,$463=0,$464=0,$465=0,$466=0,$467=0,$468=0;
 var $469=0,$470=.0,$471=.0,$472=0,$473=0,$474=0,$475=0,$476=0,$477=0,$478=0,$479=0,$480=0,$481=0,$482=0,$483=0,$484=0,$485=0,$486=0,$488=.0,$489=0;
 var $490=0,$491=0,$492=0,$493=.0,$494=.0,$495=.0,$496=0,$497=0,$498=0,$499=0,$500=0,$501=0,$502=0,$503=0,$504=0,$505=0,$506=0,$507=0,$508=0,$509=.0;
 var $510=.0,$512=0,$513=0,$515=0,$516=0,$519=0,$520=0,$523=0,$524=0,$525=0,$526=0,$527=0,$528=0,$529=0,$530=0,$531=0,$532=0,$533=0,$534=0,$535=0;
 var $536=0,$537=0,$538=0,$539=0,$540=0,$541=0,$542=0,$543=0,$544=0,$545=0,$546=0,$547=0,$548=0,$549=0,$550=0,$551=0,$552=0,$553=0,$554=0,$555=0;
 var $556=0,$557=0,$558=0,$559=0,$560=0,$561=0,$562=0,$563=0,$564=0,$565=0,$566=0,$567=0,$568=0,$569=0,$570=0,$571=.0,$572=.0,$573=.0,$574=0,$575=0;
 var $576=0,$577=0,$578=0,$579=0,$580=0,$581=0,$582=0,$583=.0,$584=.0,$585=.0,$586=0,$587=0,$588=0,$589=0,$590=0,$591=0,$592=0,$593=0,$594=0,$595=.0;
 var $596=.0,$597=.0,$598=0,$599=0,$600=0,$601=0,$602=0,$603=0,$604=0,$605=0,$606=0,$607=0,$608=0,$609=0,$610=0,$611=0,$612=0,$613=0,$614=0,$615=0;
 var label=0;
 var sp=0;sp=STACKTOP;STACKTOP=(STACKTOP+344)|0;


















 $l3_xmin=((sp)|0);
 $xfsf=(((sp)+(160))|0);
 $noise=(((sp)+(320))|0);
 $1=$gfc;
 $2=$cod_info;
 $3=$ratio;
 $4=$gr;
 $5=$ch;
 $6=$1;
 $7=(($6+16)|0);
 $cfg=$7;
 $8=$2;
 $9=(($8+4836)|0);
 $10=((HEAP32[(($9)>>2)])|0);
 $11=($10|0)==0;
 $12=($11?(0.5):(1.0));
 $13=$12;
 $ifqstep=$13;
 $14=$2;
 $15=(($14+4608)|0);
 $16=(($15)|0);
 $scalefac=$16;
 $17=$1;
 $18=$3;
 $19=$2;
 $20=(($l3_xmin)|0);
 $21=((_calc_xmin($17,$18,$19,$20))|0);
 $22=$2;
 $23=(($l3_xmin)|0);
 $24=(($xfsf)|0);
 $25=((_calc_noise($22,$23,$24,$noise,0))|0);
 $j=0;
 $26=$2;
 $27=(($26+4848)|0);
 $28=((HEAP32[(($27)>>2)])|0);
 $sfb2=$28;
 $29=$2;
 $30=(($29+4788)|0);
 $31=((HEAP32[(($30)>>2)])|0);
 $32=($31|0)!=2;
 do {
  if ($32) {
   $34=$2;
   $35=(($34+4792)|0);
   $36=((HEAP32[(($35)>>2)])|0);
   $37=($36|0)!=0;
   if ($37) {
    break;
   }
   $sfb2=22;
  }
 } while(0);
 $sfb=0;
 while(1) {
  $41=$sfb;
  $42=$sfb2;
  $43=($41|0)<($42|0);
  if (!($43)) {
   break;
  }
  $45=$sfb;
  $46=$1;
  $47=(($46+21360)|0);
  $48=(($47)|0);
  $49=(($48+($45<<2))|0);
  $50=((HEAP32[(($49)>>2)])|0);
  $start=$50;
  $51=$sfb;
  $52=((($51)+(1))|0);
  $53=$1;
  $54=(($53+21360)|0);
  $55=(($54)|0);
  $56=(($55+($52<<2))|0);
  $57=((HEAP32[(($56)>>2)])|0);
  $end=$57;
  $58=$end;
  $59=$start;
  $60=((($58)-($59))|0);
  $bw=$60;
  $en0=0.0;
  while(1) {
   $62=$j;
   $63=$end;
   $64=($62|0)<($63|0);
   if (!($64)) {
    break;
   }
   $66=$j;
   $67=$2;
   $68=(($67)|0);
   $69=(($68+($66<<2))|0);
   $70=(+(HEAPF32[(($69)>>2)]));
   $71=$j;
   $72=$2;
   $73=(($72)|0);
   $74=(($73+($71<<2))|0);
   $75=(+(HEAPF32[(($74)>>2)]));
   $76=($70)*($75);
   $77=$en0;
   $78=($77)+($76);
   $en0=$78;
   $80=$j;
   $81=((($80)+(1))|0);
   $j=$81;
  }
  $83=$bw;
  $84=(+((($83|0))|0));
  $85=$en0;
  $86=($85)/($84);
  $en0=$86;
  $en1=999999986991104.0;
  $87=$en1;
  $88=$en0;
  $89=($87)*($88);
  $90=$89;
  $91=$sfb;
  $92=$5;
  $93=$4;
  $94=$1;
  $95=(($94+85804)|0);
  $96=((HEAP32[(($95)>>2)])|0);
  $97=(($96+190712)|0);
  $98=(($97+((($93)*(704))&-1))|0);
  $99=(($98+((($92)*(176))&-1))|0);
  $100=(($99+($91<<3))|0);
  HEAPF64[(($100)>>3)]=$90;
  $101=$en1;
  $102=$sfb;
  $103=(($l3_xmin+($102<<2))|0);
  $104=(+(HEAPF32[(($103)>>2)]));
  $105=($101)*($104);
  $106=$sfb;
  $107=(($xfsf+($106<<2))|0);
  $108=(+(HEAPF32[(($107)>>2)]));
  $109=($105)*($108);
  $110=$bw;
  $111=(+((($110|0))|0));
  $112=($109)/($111);
  $113=$112;
  $114=$sfb;
  $115=$5;
  $116=$4;
  $117=$1;
  $118=(($117+85804)|0);
  $119=((HEAP32[(($118)>>2)])|0);
  $120=(($119+201208)|0);
  $121=(($120+((($116)*(352))&-1))|0);
  $122=(($121+((($115)*(176))&-1))|0);
  $123=(($122+($114<<3))|0);
  HEAPF64[(($123)>>3)]=$113;
  $124=$sfb;
  $125=$3;
  $126=(($125+244)|0);
  $127=(($126)|0);
  $128=(($127+($124<<2))|0);
  $129=(+(HEAPF32[(($128)>>2)]));
  $130=$129>(0.0);
  do {
   if ($130) {
    $132=$cfg;
    $133=(($132+196)|0);
    $134=((HEAP32[(($133)>>2)])|0);
    $135=($134|0)!=0;
    if ($135) {
     label = 13;
     break;
    }
    $137=$en0;
    $138=$sfb;
    $139=$3;
    $140=(($139+244)|0);
    $141=(($140)|0);
    $142=(($141+($138<<2))|0);
    $143=(+(HEAPF32[(($142)>>2)]));
    $144=($137)/($143);
    $en0=$144;
   } else {
    label = 13;
   }
  } while(0);
  if ((label|0) == 13) {
   label = 0;
   $en0=0.0;
  }
  $147=$en1;
  $148=$en0;
  $149=$sfb;
  $150=$3;
  $151=(($150)|0);
  $152=(($151)|0);
  $153=(($152+($149<<2))|0);
  $154=(+(HEAPF32[(($153)>>2)]));
  $155=($148)*($154);
  $156=$sfb;
  $157=$1;
  $158=(($157+85796)|0);
  $159=((HEAP32[(($158)>>2)])|0);
  $160=(($159+24)|0);
  $161=(($160+($156<<2))|0);
  $162=(+(HEAPF32[(($161)>>2)]));
  $163=$155>$162;
  if ($163) {
   $165=$en0;
   $166=$sfb;
   $167=$3;
   $168=(($167)|0);
   $169=(($168)|0);
   $170=(($169+($166<<2))|0);
   $171=(+(HEAPF32[(($170)>>2)]));
   $172=($165)*($171);
   $182=$172;
  } else {
   $174=$sfb;
   $175=$1;
   $176=(($175+85796)|0);
   $177=((HEAP32[(($176)>>2)])|0);
   $178=(($177+24)|0);
   $179=(($178+($174<<2))|0);
   $180=(+(HEAPF32[(($179)>>2)]));
   $182=$180;
  }

  $183=($147)*($182);
  $184=$183;
  $185=$sfb;
  $186=$5;
  $187=$4;
  $188=$1;
  $189=(($188+85804)|0);
  $190=((HEAP32[(($189)>>2)])|0);
  $191=(($190+189304)|0);
  $192=(($191+((($187)*(704))&-1))|0);
  $193=(($192+((($186)*(176))&-1))|0);
  $194=(($193+($185<<3))|0);
  HEAPF64[(($194)>>3)]=$184;
  $195=$sfb;
  $196=$5;
  $197=$4;
  $198=$1;
  $199=(($198+85804)|0);
  $200=((HEAP32[(($199)>>2)])|0);
  $201=(($200+199160)|0);
  $202=(($201+((($197)*(352))&-1))|0);
  $203=(($202+((($196)*(176))&-1))|0);
  $204=(($203+($195<<3))|0);
  HEAPF64[(($204)>>3)]=0.0;
  $205=$2;
  $206=(($205+4832)|0);
  $207=((HEAP32[(($206)>>2)])|0);
  $208=($207|0)!=0;
  do {
   if ($208) {
    $210=$sfb;
    $211=($210|0)>=11;
    if (!($211)) {
     break;
    }
    $213=$ifqstep;
    $214=((-.0))-($213);
    $215=$sfb;
    $216=((9552+($215<<2))|0);
    $217=((HEAP32[(($216)>>2)])|0);
    $218=(+((($217|0))|0));
    $219=($214)*($218);
    $220=$219;
    $221=$sfb;
    $222=$5;
    $223=$4;
    $224=$1;
    $225=(($224+85804)|0);
    $226=((HEAP32[(($225)>>2)])|0);
    $227=(($226+199160)|0);
    $228=(($227+((($223)*(352))&-1))|0);
    $229=(($228+((($222)*(176))&-1))|0);
    $230=(($229+($221<<3))|0);
    HEAPF64[(($230)>>3)]=$220;
   }
  } while(0);
  $232=$sfb;
  $233=($232|0)<21;
  if ($233) {
   $235=$ifqstep;
   $236=$sfb;
   $237=$scalefac;
   $238=(($237+($236<<2))|0);
   $239=((HEAP32[(($238)>>2)])|0);
   $240=(+((($239|0))|0));
   $241=($235)*($240);
   $242=$241;
   $243=$sfb;
   $244=$5;
   $245=$4;
   $246=$1;
   $247=(($246+85804)|0);
   $248=((HEAP32[(($247)>>2)])|0);
   $249=(($248+199160)|0);
   $250=(($249+((($245)*(352))&-1))|0);
   $251=(($250+((($244)*(176))&-1))|0);
   $252=(($251+($243<<3))|0);
   $253=(+(HEAPF64[(($252)>>3)]));
   $254=($253)-($242);
   HEAPF64[(($252)>>3)]=$254;
  }
  $257=$sfb;
  $258=((($257)+(1))|0);
  $sfb=$258;
 }
 $260=$2;
 $261=(($260+4788)|0);
 $262=((HEAP32[(($261)>>2)])|0);
 $263=($262|0)==2;
 if (!($263)) {
  $523=$2;
  $524=(($523+4780)|0);
  $525=((HEAP32[(($524)>>2)])|0);
  $526=$5;
  $527=$4;
  $528=$1;
  $529=(($528+85804)|0);
  $530=((HEAP32[(($529)>>2)])|0);
  $531=(($530+201112)|0);
  $532=(($531+($527<<3))|0);
  $533=(($532+($526<<2))|0);
  HEAP32[(($533)>>2)]=$525;
  $534=$2;
  $535=(($534+4768)|0);
  $536=((HEAP32[(($535)>>2)])|0);
  $537=$2;
  $538=(($537+4844)|0);
  $539=((HEAP32[(($538)>>2)])|0);
  $540=((($536)+($539))|0);
  $541=$5;
  $542=$4;
  $543=$1;
  $544=(($543+85804)|0);
  $545=((HEAP32[(($544)>>2)])|0);
  $546=(($545+203400)|0);
  $547=(($546+($542<<3))|0);
  $548=(($547+($541<<2))|0);
  HEAP32[(($548)>>2)]=$540;
  $549=$2;
  $550=(($549+4844)|0);
  $551=((HEAP32[(($550)>>2)])|0);
  $552=$5;
  $553=$4;
  $554=$1;
  $555=(($554+85804)|0);
  $556=((HEAP32[(($555)>>2)])|0);
  $557=(($556+203416)|0);
  $558=(($557+($553<<3))|0);
  $559=(($558+($552<<2))|0);
  HEAP32[(($559)>>2)]=$551;
  $560=(($noise+12)|0);
  $561=((HEAP32[(($560)>>2)])|0);
  $562=$5;
  $563=$4;
  $564=$1;
  $565=(($564+85804)|0);
  $566=((HEAP32[(($565)>>2)])|0);
  $567=(($566+203160)|0);
  $568=(($567+($563<<3))|0);
  $569=(($568+($562<<2))|0);
  HEAP32[(($569)>>2)]=$561;
  $570=(($noise+8)|0);
  $571=(+(HEAPF32[(($570)>>2)]));
  $572=$571;
  $573=($572)*((10.0));
  $574=$5;
  $575=$4;
  $576=$1;
  $577=(($576+85804)|0);
  $578=((HEAP32[(($577)>>2)])|0);
  $579=(($578+203208)|0);
  $580=(($579+($575<<4))|0);
  $581=(($580+($574<<3))|0);
  HEAPF64[(($581)>>3)]=$573;
  $582=(($noise)|0);
  $583=(+(HEAPF32[(($582)>>2)]));
  $584=$583;
  $585=($584)*((10.0));
  $586=$5;
  $587=$4;
  $588=$1;
  $589=(($588+85804)|0);
  $590=((HEAP32[(($589)>>2)])|0);
  $591=(($590+203240)|0);
  $592=(($591+($587<<4))|0);
  $593=(($592+($586<<3))|0);
  HEAPF64[(($593)>>3)]=$585;
  $594=(($noise+4)|0);
  $595=(+(HEAPF32[(($594)>>2)]));
  $596=$595;
  $597=($596)*((10.0));
  $598=$5;
  $599=$4;
  $600=$1;
  $601=(($600+85804)|0);
  $602=((HEAP32[(($601)>>2)])|0);
  $603=(($602+203176)|0);
  $604=(($603+($599<<4))|0);
  $605=(($604+($598<<3))|0);
  HEAPF64[(($605)>>3)]=$597;
  $606=(($noise+16)|0);
  $607=((HEAP32[(($606)>>2)])|0);
  $608=$5;
  $609=$4;
  $610=$1;
  $611=(($610+85804)|0);
  $612=((HEAP32[(($611)>>2)])|0);
  $613=(($612+203272)|0);
  $614=(($613+($609<<3))|0);
  $615=(($614+($608<<2))|0);
  HEAP32[(($615)>>2)]=$607;
  STACKTOP=sp;return;
 }
 $265=$sfb;
 $sfb2=$265;
 $266=$2;
 $267=(($266+4852)|0);
 $268=((HEAP32[(($267)>>2)])|0);
 $sfb=$268;
 while(1) {
  $270=$sfb;
  $271=($270|0)<13;
  if (!($271)) {
   break;
  }
  $273=$sfb;
  $274=$1;
  $275=(($274+21360)|0);
  $276=(($275+92)|0);
  $277=(($276+($273<<2))|0);
  $278=((HEAP32[(($277)>>2)])|0);
  $start=$278;
  $279=$sfb;
  $280=((($279)+(1))|0);
  $281=$1;
  $282=(($281+21360)|0);
  $283=(($282+92)|0);
  $284=(($283+($280<<2))|0);
  $285=((HEAP32[(($284)>>2)])|0);
  $end=$285;
  $286=$end;
  $287=$start;
  $288=((($286)-($287))|0);
  $bw=$288;
  $i=0;
  while(1) {
   $290=$i;
   $291=($290|0)<3;
   if (!($291)) {
    break;
   }
   $en0=0.0;
   $293=$start;
   $l=$293;
   while(1) {
    $295=$l;
    $296=$end;
    $297=($295|0)<($296|0);
    if (!($297)) {
     break;
    }
    $299=$j;
    $300=$2;
    $301=(($300)|0);
    $302=(($301+($299<<2))|0);
    $303=(+(HEAPF32[(($302)>>2)]));
    $304=$j;
    $305=$2;
    $306=(($305)|0);
    $307=(($306+($304<<2))|0);
    $308=(+(HEAPF32[(($307)>>2)]));
    $309=($303)*($308);
    $310=$en0;
    $311=($310)+($309);
    $en0=$311;
    $312=$j;
    $313=((($312)+(1))|0);
    $j=$313;
    $315=$l;
    $316=((($315)+(1))|0);
    $l=$316;
   }
   $318=$en0;
   $319=$bw;
   $320=(+((($319|0))|0));
   $321=($318)/($320);
   $322=$321;
   $323=$322>(1.0e-20);
   if ($323) {
    $325=$en0;
    $326=$bw;
    $327=(+((($326|0))|0));
    $328=($325)/($327);
    $329=$328;
    $332=$329;
   } else {
    $332=1.0e-20;
   }

   $333=$332;
   $en0=$333;
   $en1=999999986991104.0;
   $334=$en1;
   $335=$en0;
   $336=($334)*($335);
   $337=$336;
   $338=$sfb;
   $339=((($338)*(3))&-1);
   $340=$i;
   $341=((($339)+($340))|0);
   $342=$5;
   $343=$4;
   $344=$1;
   $345=(($344+85804)|0);
   $346=((HEAP32[(($345)>>2)])|0);
   $347=(($346+194616)|0);
   $348=(($347+((($343)*(1248))&-1))|0);
   $349=(($348+((($342)*(312))&-1))|0);
   $350=(($349+($341<<3))|0);
   HEAPF64[(($350)>>3)]=$337;
   $351=$en1;
   $352=$sfb2;
   $353=(($l3_xmin+($352<<2))|0);
   $354=(+(HEAPF32[(($353)>>2)]));
   $355=($351)*($354);
   $356=$sfb2;
   $357=(($xfsf+($356<<2))|0);
   $358=(+(HEAPF32[(($357)>>2)]));
   $359=($355)*($358);
   $360=$bw;
   $361=(+((($360|0))|0));
   $362=($359)/($361);
   $363=$362;
   $364=$sfb;
   $365=((($364)*(3))&-1);
   $366=$i;
   $367=((($365)+($366))|0);
   $368=$5;
   $369=$4;
   $370=$1;
   $371=(($370+85804)|0);
   $372=((HEAP32[(($371)>>2)])|0);
   $373=(($372+201912)|0);
   $374=(($373+((($369)*(624))&-1))|0);
   $375=(($374+((($368)*(312))&-1))|0);
   $376=(($375+($367<<3))|0);
   HEAPF64[(($376)>>3)]=$363;
   $377=$i;
   $378=$sfb;
   $379=$3;
   $380=(($379+244)|0);
   $381=(($380+88)|0);
   $382=(($381+((($378)*(12))&-1))|0);
   $383=(($382+($377<<2))|0);
   $384=(+(HEAPF32[(($383)>>2)]));
   $385=$384>(0.0);
   if ($385) {
    $387=$en0;
    $388=$i;
    $389=$sfb;
    $390=$3;
    $391=(($390+244)|0);
    $392=(($391+88)|0);
    $393=(($392+((($389)*(12))&-1))|0);
    $394=(($393+($388<<2))|0);
    $395=(+(HEAPF32[(($394)>>2)]));
    $396=($387)/($395);
    $en0=$396;
   } else {
    $en0=0.0;
   }
   $399=$cfg;
   $400=(($399+196)|0);
   $401=((HEAP32[(($400)>>2)])|0);
   $402=($401|0)!=0;
   if ($402) {
    label = 41;
   } else {
    $404=$cfg;
    $405=(($404+200)|0);
    $406=((HEAP32[(($405)>>2)])|0);
    $407=($406|0)!=0;
    if ($407) {
     label = 41;
    }
   }
   if ((label|0) == 41) {
    label = 0;
    $en0=0.0;
   }
   $410=$en1;
   $411=$en0;
   $412=$i;
   $413=$sfb;
   $414=$3;
   $415=(($414)|0);
   $416=(($415+88)|0);
   $417=(($416+((($413)*(12))&-1))|0);
   $418=(($417+($412<<2))|0);
   $419=(+(HEAPF32[(($418)>>2)]));
   $420=($411)*($419);
   $421=$sfb;
   $422=$1;
   $423=(($422+85796)|0);
   $424=((HEAP32[(($423)>>2)])|0);
   $425=(($424+112)|0);
   $426=(($425+($421<<2))|0);
   $427=(+(HEAPF32[(($426)>>2)]));
   $428=$420>$427;
   if ($428) {
    $430=$en0;
    $431=$i;
    $432=$sfb;
    $433=$3;
    $434=(($433)|0);
    $435=(($434+88)|0);
    $436=(($435+((($432)*(12))&-1))|0);
    $437=(($436+($431<<2))|0);
    $438=(+(HEAPF32[(($437)>>2)]));
    $439=($430)*($438);
    $449=$439;
   } else {
    $441=$sfb;
    $442=$1;
    $443=(($442+85796)|0);
    $444=((HEAP32[(($443)>>2)])|0);
    $445=(($444+112)|0);
    $446=(($445+($441<<2))|0);
    $447=(+(HEAPF32[(($446)>>2)]));
    $449=$447;
   }

   $450=($410)*($449);
   $451=$450;
   $452=$sfb;
   $453=((($452)*(3))&-1);
   $454=$i;
   $455=((($453)+($454))|0);
   $456=$5;
   $457=$4;
   $458=$1;
   $459=(($458+85804)|0);
   $460=((HEAP32[(($459)>>2)])|0);
   $461=(($460+192120)|0);
   $462=(($461+((($457)*(1248))&-1))|0);
   $463=(($462+((($456)*(312))&-1))|0);
   $464=(($463+($455<<3))|0);
   HEAPF64[(($464)>>3)]=$451;
   $465=$i;
   $466=$2;
   $467=(($466+4808)|0);
   $468=(($467+($465<<2))|0);
   $469=((HEAP32[(($468)>>2)])|0);
   $470=(+((($469|0))|0));
   $471=((-2.0))*($470);
   $472=$sfb;
   $473=((($472)*(3))&-1);
   $474=$i;
   $475=((($473)+($474))|0);
   $476=$5;
   $477=$4;
   $478=$1;
   $479=(($478+85804)|0);
   $480=((HEAP32[(($479)>>2)])|0);
   $481=(($480+199864)|0);
   $482=(($481+((($477)*(624))&-1))|0);
   $483=(($482+((($476)*(312))&-1))|0);
   $484=(($483+($475<<3))|0);
   HEAPF64[(($484)>>3)]=$471;
   $485=$sfb;
   $486=($485|0)<12;
   if ($486) {
    $488=$ifqstep;
    $489=$sfb2;
    $490=$scalefac;
    $491=(($490+($489<<2))|0);
    $492=((HEAP32[(($491)>>2)])|0);
    $493=(+((($492|0))|0));
    $494=($488)*($493);
    $495=$494;
    $496=$sfb;
    $497=((($496)*(3))&-1);
    $498=$i;
    $499=((($497)+($498))|0);
    $500=$5;
    $501=$4;
    $502=$1;
    $503=(($502+85804)|0);
    $504=((HEAP32[(($503)>>2)])|0);
    $505=(($504+199864)|0);
    $506=(($505+((($501)*(624))&-1))|0);
    $507=(($506+((($500)*(312))&-1))|0);
    $508=(($507+($499<<3))|0);
    $509=(+(HEAPF64[(($508)>>3)]));
    $510=($509)-($495);
    HEAPF64[(($508)>>3)]=$510;
   }
   $512=$sfb2;
   $513=((($512)+(1))|0);
   $sfb2=$513;
   $515=$i;
   $516=((($515)+(1))|0);
   $i=$516;
  }
  $519=$sfb;
  $520=((($519)+(1))|0);
  $sfb=$520;
 }
 $523=$2;
 $524=(($523+4780)|0);
 $525=((HEAP32[(($524)>>2)])|0);
 $526=$5;
 $527=$4;
 $528=$1;
 $529=(($528+85804)|0);
 $530=((HEAP32[(($529)>>2)])|0);
 $531=(($530+201112)|0);
 $532=(($531+($527<<3))|0);
 $533=(($532+($526<<2))|0);
 HEAP32[(($533)>>2)]=$525;
 $534=$2;
 $535=(($534+4768)|0);
 $536=((HEAP32[(($535)>>2)])|0);
 $537=$2;
 $538=(($537+4844)|0);
 $539=((HEAP32[(($538)>>2)])|0);
 $540=((($536)+($539))|0);
 $541=$5;
 $542=$4;
 $543=$1;
 $544=(($543+85804)|0);
 $545=((HEAP32[(($544)>>2)])|0);
 $546=(($545+203400)|0);
 $547=(($546+($542<<3))|0);
 $548=(($547+($541<<2))|0);
 HEAP32[(($548)>>2)]=$540;
 $549=$2;
 $550=(($549+4844)|0);
 $551=((HEAP32[(($550)>>2)])|0);
 $552=$5;
 $553=$4;
 $554=$1;
 $555=(($554+85804)|0);
 $556=((HEAP32[(($555)>>2)])|0);
 $557=(($556+203416)|0);
 $558=(($557+($553<<3))|0);
 $559=(($558+($552<<2))|0);
 HEAP32[(($559)>>2)]=$551;
 $560=(($noise+12)|0);
 $561=((HEAP32[(($560)>>2)])|0);
 $562=$5;
 $563=$4;
 $564=$1;
 $565=(($564+85804)|0);
 $566=((HEAP32[(($565)>>2)])|0);
 $567=(($566+203160)|0);
 $568=(($567+($563<<3))|0);
 $569=(($568+($562<<2))|0);
 HEAP32[(($569)>>2)]=$561;
 $570=(($noise+8)|0);
 $571=(+(HEAPF32[(($570)>>2)]));
 $572=$571;
 $573=($572)*((10.0));
 $574=$5;
 $575=$4;
 $576=$1;
 $577=(($576+85804)|0);
 $578=((HEAP32[(($577)>>2)])|0);
 $579=(($578+203208)|0);
 $580=(($579+($575<<4))|0);
 $581=(($580+($574<<3))|0);
 HEAPF64[(($581)>>3)]=$573;
 $582=(($noise)|0);
 $583=(+(HEAPF32[(($582)>>2)]));
 $584=$583;
 $585=($584)*((10.0));
 $586=$5;
 $587=$4;
 $588=$1;
 $589=(($588+85804)|0);
 $590=((HEAP32[(($589)>>2)])|0);
 $591=(($590+203240)|0);
 $592=(($591+($587<<4))|0);
 $593=(($592+($586<<3))|0);
 HEAPF64[(($593)>>3)]=$585;
 $594=(($noise+4)|0);
 $595=(+(HEAPF32[(($594)>>2)]));
 $596=$595;
 $597=($596)*((10.0));
 $598=$5;
 $599=$4;
 $600=$1;
 $601=(($600+85804)|0);
 $602=((HEAP32[(($601)>>2)])|0);
 $603=(($602+203176)|0);
 $604=(($603+($599<<4))|0);
 $605=(($604+($598<<3))|0);
 HEAPF64[(($605)>>3)]=$597;
 $606=(($noise+16)|0);
 $607=((HEAP32[(($606)>>2)])|0);
 $608=$5;
 $609=$4;
 $610=$1;
 $611=(($610+85804)|0);
 $612=((HEAP32[(($611)>>2)])|0);
 $613=(($612+203272)|0);
 $614=(($613+($609<<3))|0);
 $615=(($614+($608<<2))|0);
 HEAP32[(($615)>>2)]=$607;
 STACKTOP=sp;return;
}


function _ATHmdct($cfg,$f){
 $cfg=($cfg)|0;
 $f=+($f);
 var $1=0,$2=.0,$ath=.0,$3=0,$4=.0,$5=.0,$6=0,$7=0,$8=.0,$9=0,$11=0,$12=0,$13=.0,$14=.0,$15=.0,$17=.0,$18=.0,$20=0,$21=0,$22=.0;
 var $23=.0,$24=.0,$25=.0,$26=.0,$27=.0,$28=.0,label=0;
 var sp=0;sp=STACKTOP;



 $1=$cfg;
 $2=$f;
 $3=$1;
 $4=$2;
 $5=(+(_ATHformula($3,$4)));
 $ath=$5;
 $6=$1;
 $7=(($6+208)|0);
 $8=(+(HEAPF32[(($7)>>2)]));
 $9=$8>(0.0);
 if ($9) {
  $11=$1;
  $12=(($11+208)|0);
  $13=(+(HEAPF32[(($12)>>2)]));
  $14=$ath;
  $15=($14)-($13);
  $ath=$15;
 } else {
  $17=$ath;
  $18=($17)-((100.0));
  $ath=$18;
 }
 $20=$1;
 $21=(($20+180)|0);
 $22=(+(HEAPF32[(($21)>>2)]));
 $23=$ath;
 $24=($23)+($22);
 $ath=$24;
 $25=$ath;
 $26=($25)*((0.10000000149011612));
 $27=(+(Math_pow(10.0,(+($26)))));
 $ath=$27;
 $28=$ath;
 STACKTOP=sp;return (+($28));
}


function _free_id3tag($gfc){
 $gfc=($gfc)|0;
 var $1=0,$node=0,$p=0,$q=0,$r=0,$2=0,$3=0,$4=0,$5=0,$6=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$14=0,$16=0,$17=0,$18=0;
 var $19=0,$20=0,$22=0,$23=0,$24=0,$25=0,$26=0,$27=0,$28=0,$30=0,$31=0,$32=0,$33=0,$34=0,$36=0,$37=0,$38=0,$39=0,$40=0,$41=0;
 var $42=0,$44=0,$45=0,$46=0,$47=0,$48=0,$50=0,$51=0,$52=0,$53=0,$54=0,$55=0,$56=0,$58=0,$59=0,$60=0,$61=0,$62=0,$64=0,$65=0;
 var $66=0,$67=0,$68=0,$69=0,$70=0,$71=0,$72=0,$73=0,$74=0,$75=0,$76=0,$78=0,$79=0,$80=0,$81=0,$82=0,$84=0,$85=0,$86=0,$87=0;
 var $89=0,$90=0,$91=0,$92=0,$93=0,$94=0,$95=0,$96=0,$97=0,$98=0,$99=0,$100=0,$101=0,$102=0,$103=0,$104=0,$105=0,$106=0,$108=0,$109=0;
 var $111=0,$112=0,$113=0,$114=0,$115=0,$116=0,label=0;
 var sp=0;sp=STACKTOP;





 $1=$gfc;
 $2=$1;
 $3=(($2+85696)|0);
 $4=(($3+8)|0);
 $5=((HEAP32[(($4)>>2)])|0);
 $6=($5|0)!=0;
 if ($6) {
  $8=$1;
  $9=(($8+85696)|0);
  $10=(($9+8)|0);
  $11=((HEAP32[(($10)>>2)])|0);
  _free($11);
  $12=$1;
  $13=(($12+85696)|0);
  $14=(($13+8)|0);
  HEAP32[(($14)>>2)]=0;
 }
 $16=$1;
 $17=(($16+85696)|0);
 $18=(($17+12)|0);
 $19=((HEAP32[(($18)>>2)])|0);
 $20=($19|0)!=0;
 if ($20) {
  $22=$1;
  $23=(($22+85696)|0);
  $24=(($23+12)|0);
  $25=((HEAP32[(($24)>>2)])|0);
  _free($25);
  $26=$1;
  $27=(($26+85696)|0);
  $28=(($27+12)|0);
  HEAP32[(($28)>>2)]=0;
 }
 $30=$1;
 $31=(($30+85696)|0);
 $32=(($31+16)|0);
 $33=((HEAP32[(($32)>>2)])|0);
 $34=($33|0)!=0;
 if ($34) {
  $36=$1;
  $37=(($36+85696)|0);
  $38=(($37+16)|0);
  $39=((HEAP32[(($38)>>2)])|0);
  _free($39);
  $40=$1;
  $41=(($40+85696)|0);
  $42=(($41+16)|0);
  HEAP32[(($42)>>2)]=0;
 }
 $44=$1;
 $45=(($44+85696)|0);
 $46=(($45+20)|0);
 $47=((HEAP32[(($46)>>2)])|0);
 $48=($47|0)!=0;
 if ($48) {
  $50=$1;
  $51=(($50+85696)|0);
  $52=(($51+20)|0);
  $53=((HEAP32[(($52)>>2)])|0);
  _free($53);
  $54=$1;
  $55=(($54+85696)|0);
  $56=(($55+20)|0);
  HEAP32[(($56)>>2)]=0;
 }
 $58=$1;
 $59=(($58+85696)|0);
 $60=(($59+32)|0);
 $61=((HEAP32[(($60)>>2)])|0);
 $62=($61|0)!=0;
 if ($62) {
  $64=$1;
  $65=(($64+85696)|0);
  $66=(($65+32)|0);
  $67=((HEAP32[(($66)>>2)])|0);
  _free($67);
  $68=$1;
  $69=(($68+85696)|0);
  $70=(($69+32)|0);
  HEAP32[(($70)>>2)]=0;
  $71=$1;
  $72=(($71+85696)|0);
  $73=(($72+36)|0);
  HEAP32[(($73)>>2)]=0;
  $74=$1;
  $75=(($74+85696)|0);
  $76=(($75+44)|0);
  HEAP32[(($76)>>2)]=0;
 }
 $78=$1;
 $79=(($78+85696)|0);
 $80=(($79+48)|0);
 $81=((HEAP32[(($80)>>2)])|0);
 $82=($81|0)!=0;
 if (!($82)) {
  STACKTOP=sp;return;
 }
 $84=$1;
 $85=(($84+85696)|0);
 $86=(($85+48)|0);
 $87=((HEAP32[(($86)>>2)])|0);
 $node=$87;
 while(1) {
  $89=$node;
  $90=(($89+12)|0);
  $91=(($90)|0);
  $92=$91;
  $93=((HEAP32[(($92)>>2)])|0);
  $p=$93;
  $94=$node;
  $95=(($94+24)|0);
  $96=(($95)|0);
  $97=$96;
  $98=((HEAP32[(($97)>>2)])|0);
  $q=$98;
  $99=$node;
  $100=$99;
  $r=$100;
  $101=$node;
  $102=(($101)|0);
  $103=((HEAP32[(($102)>>2)])|0);
  $node=$103;
  $104=$p;
  _free($104);
  $105=$q;
  _free($105);
  $106=$r;
  _free($106);
  $108=$node;
  $109=($108|0)!=0;
  if (!($109)) {
   break;
  }
 }
 $111=$1;
 $112=(($111+85696)|0);
 $113=(($112+48)|0);
 HEAP32[(($113)>>2)]=0;
 $114=$1;
 $115=(($114+85696)|0);
 $116=(($115+52)|0);
 HEAP32[(($116)>>2)]=0;
 STACKTOP=sp;return;
}


function _freegfc($gfc){
 $gfc=($gfc)|0;
 var $1=0,$i=0,$3=0,$4=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0,$14=0,$15=0,$16=0,$17=0,$18=0,$19=0,$20=0,$21=0,$22=0;
 var $23=0,$24=0,$25=0,$28=0,$29=0,$31=0,$32=0,$33=0,$34=0,$35=0,$36=0,$38=0,$39=0,$40=0,$41=0,$42=0,$43=0,$44=0,$45=0,$46=0;
 var $47=0,$49=0,$50=0,$51=0,$52=0,$53=0,$54=0,$56=0,$57=0,$58=0,$59=0,$60=0,$61=0,$62=0,$63=0,$64=0,$65=0,$67=0,$68=0,$69=0;
 var $70=0,$71=0,$73=0,$74=0,$75=0,$76=0,$77=0,$78=0,$79=0,$81=0,$82=0,$83=0,$84=0,$85=0,$87=0,$88=0,$89=0,$90=0,$91=0,$92=0;
 var $93=0,$94=0,$95=0,$96=0,$97=0,$99=0,$100=0,$101=0,$102=0,$104=0,$105=0,$106=0,$107=0,$109=0,$110=0,$111=0,$112=0,$113=0,$115=0,$116=0;
 var $117=0,$118=0,$119=0,$121=0,$122=0,$123=0,$124=0,$125=0,$127=0,$128=0,$129=0,$130=0,$131=0,$133=0,$134=0,$135=0,$136=0,$137=0,$139=0,$140=0;
 var $141=0,$142=0,$143=0,$145=0,$146=0,$147=0,$148=0,$149=0,$151=0,$152=0,$153=0,$154=0,$155=0,$156=0,$158=0,$159=0,$160=0,label=0;
 var sp=0;sp=STACKTOP;


 $1=$gfc;
 $i=0;
 while(1) {
  $3=$i;
  $4=($3|0)<=640;
  if (!($4)) {
   break;
  }
  $6=$i;
  $7=$1;
  $8=(($7+27824)|0);
  $9=(($8+9368)|0);
  $10=(($9+($6<<2))|0);
  $11=((HEAP32[(($10)>>2)])|0);
  $12=($11|0)!=0;
  if ($12) {
   $14=$i;
   $15=$1;
   $16=(($15+27824)|0);
   $17=(($16+9368)|0);
   $18=(($17+($14<<2))|0);
   $19=((HEAP32[(($18)>>2)])|0);
   $20=$19;
   _free($20);
   $21=$i;
   $22=$1;
   $23=(($22+27824)|0);
   $24=(($23+9368)|0);
   $25=(($24+($21<<2))|0);
   HEAP32[(($25)>>2)]=0;
  }
  $28=$i;
  $29=((($28)+(1))|0);
  $i=$29;
 }
 $31=$1;
 $32=(($31+27824)|0);
 $33=(($32+9360)|0);
 $34=(($33)|0);
 $35=((HEAP32[(($34)>>2)])|0);
 $36=($35|0)!=0;
 if ($36) {
  $38=$1;
  $39=(($38+27824)|0);
  $40=(($39+9360)|0);
  $41=(($40)|0);
  $42=((HEAP32[(($41)>>2)])|0);
  $43=$42;
  _free($43);
  $44=$1;
  $45=(($44+27824)|0);
  $46=(($45+9360)|0);
  $47=(($46)|0);
  HEAP32[(($47)>>2)]=0;
 }
 $49=$1;
 $50=(($49+27824)|0);
 $51=(($50+9360)|0);
 $52=(($51+4)|0);
 $53=((HEAP32[(($52)>>2)])|0);
 $54=($53|0)!=0;
 if ($54) {
  $56=$1;
  $57=(($56+27824)|0);
  $58=(($57+9360)|0);
  $59=(($58+4)|0);
  $60=((HEAP32[(($59)>>2)])|0);
  $61=$60;
  _free($61);
  $62=$1;
  $63=(($62+27824)|0);
  $64=(($63+9360)|0);
  $65=(($64+4)|0);
  HEAP32[(($65)>>2)]=0;
 }
 $67=$1;
 $68=(($67+284)|0);
 $69=(($68)|0);
 $70=((HEAP32[(($69)>>2)])|0);
 $71=($70|0)!=0;
 if ($71) {
  $73=$1;
  $74=(($73+284)|0);
  $75=(($74)|0);
  $76=((HEAP32[(($75)>>2)])|0);
  _free($76);
  $77=$1;
  $78=(($77+284)|0);
  $79=(($78)|0);
  HEAP32[(($79)>>2)]=0;
 }
 $81=$1;
 $82=(($81+85760)|0);
 $83=(($82+20)|0);
 $84=((HEAP32[(($83)>>2)])|0);
 $85=($84|0)!=0;
 if ($85) {
  $87=$1;
  $88=(($87+85760)|0);
  $89=(($88+20)|0);
  $90=((HEAP32[(($89)>>2)])|0);
  $91=$90;
  _free($91);
  $92=$1;
  $93=(($92+85760)|0);
  $94=(($93+20)|0);
  HEAP32[(($94)>>2)]=0;
  $95=$1;
  $96=(($95+85760)|0);
  $97=(($96+16)|0);
  HEAP32[(($97)>>2)]=0;
 }
 $99=$1;
 $100=(($99+85796)|0);
 $101=((HEAP32[(($100)>>2)])|0);
 $102=($101|0)!=0;
 if ($102) {
  $104=$1;
  $105=(($104+85796)|0);
  $106=((HEAP32[(($105)>>2)])|0);
  $107=$106;
  _free($107);
 }
 $109=$1;
 $110=(($109+85676)|0);
 $111=(($110)|0);
 $112=((HEAP32[(($111)>>2)])|0);
 $113=($112|0)!=0;
 if ($113) {
  $115=$1;
  $116=(($115+85676)|0);
  $117=(($116)|0);
  $118=((HEAP32[(($117)>>2)])|0);
  $119=$118;
  _free($119);
 }
 $121=$1;
 $122=(($121+27824)|0);
 $123=(($122+24328)|0);
 $124=((HEAP32[(($123)>>2)])|0);
 $125=($124|0)!=0;
 if ($125) {
  $127=$1;
  $128=(($127+27824)|0);
  $129=(($128+24328)|0);
  $130=((HEAP32[(($129)>>2)])|0);
  $131=$130;
  _free($131);
 }
 $133=$1;
 $134=(($133+27824)|0);
 $135=(($134+24332)|0);
 $136=((HEAP32[(($135)>>2)])|0);
 $137=($136|0)!=0;
 if ($137) {
  $139=$1;
  $140=(($139+27824)|0);
  $141=(($140+24332)|0);
  $142=((HEAP32[(($141)>>2)])|0);
  $143=$142;
  _free($143);
 }
 $145=$1;
 _free_id3tag($145);
 $146=$1;
 $147=(($146+85808)|0);
 $148=((HEAP32[(($147)>>2)])|0);
 $149=($148|0)!=0;
 if (!($149)) {
  $158=$1;
  _free_global_data($158);
  $159=$1;
  $160=$159;
  _free($160);
  STACKTOP=sp;return;
 }
 $151=$1;
 $152=(($151+85808)|0);
 $153=((HEAP32[(($152)>>2)])|0);
 $154=((_hip_decode_exit($153))|0);
 $155=$1;
 $156=(($155+85808)|0);
 HEAP32[(($156)>>2)]=0;
 $158=$1;
 _free_global_data($158);
 $159=$1;
 $160=$159;
 _free($160);
 STACKTOP=sp;return;
}


function _ATHformula($cfg,$f){
 $cfg=($cfg)|0;
 $f=+($f);
 var $1=0,$2=.0,$ath=.0,$3=0,$4=0,$5=0,$7=.0,$8=.0,$10=.0,$11=.0,$13=.0,$14=.0,$16=.0,$17=.0,$18=.0,$20=.0,$21=0,$22=0,$23=.0,$24=.0;
 var $26=.0,$27=0,$28=0,$29=.0,$30=.0,$32=.0,$33=.0,$35=.0,label=0;
 var sp=0;sp=STACKTOP;



 $1=$cfg;
 $2=$f;
 $3=$1;
 $4=(($3+192)|0);
 $5=((HEAP32[(($4)>>2)])|0);
 switch (($5|0)) {
 case 0: {
  $7=$2;
  $8=(+(_ATHformula_GB($7,9.0,0.10000000149011612,24.0)));
  $ath=$8;
  break;
 }
 case 1: {
  $10=$2;
  $11=(+(_ATHformula_GB($10,-1.0,0.10000000149011612,24.0)));
  $ath=$11;
  break;
 }
 case 2: {
  $13=$2;
  $14=(+(_ATHformula_GB($13,0.0,0.10000000149011612,24.0)));
  $ath=$14;
  break;
 }
 case 3: {
  $16=$2;
  $17=(+(_ATHformula_GB($16,1.0,0.10000000149011612,24.0)));
  $18=($17)+((6.0));
  $ath=$18;
  break;
 }
 case 4: {
  $20=$2;
  $21=$1;
  $22=(($21+188)|0);
  $23=(+(HEAPF32[(($22)>>2)]));
  $24=(+(_ATHformula_GB($20,$23,0.10000000149011612,24.0)));
  $ath=$24;
  break;
 }
 case 5: {
  $26=$2;
  $27=$1;
  $28=(($27+188)|0);
  $29=(+(HEAPF32[(($28)>>2)]));
  $30=(+(_ATHformula_GB($26,$29,3.4100000858306885,16.100000381469727)));
  $ath=$30;
  break;
 }
 default: {
  $32=$2;
  $33=(+(_ATHformula_GB($32,0.0,0.10000000149011612,24.0)));
  $ath=$33;
 }
 }
 $35=$ath;
 STACKTOP=sp;return (+($35));
}


function _freq2bark($freq){
 $freq=+($freq);
 var $1=.0,$2=.0,$3=0,$6=.0,$7=.0,$8=.0,$9=.0,$10=.0,$11=.0,$12=.0,$13=.0,$14=.0,$15=.0,$16=.0,$17=.0,$18=.0,$19=.0,$20=.0,$21=.0,$22=.0;
 var $23=.0,label=0;
 var sp=0;sp=STACKTOP;

 $1=$freq;
 $2=$1;
 $3=$2<(0.0);
 if ($3) {
  $1=0.0;
 }
 $6=$1;
 $7=$6;
 $8=($7)*((0.001));
 $9=$8;
 $1=$9;
 $10=$1;
 $11=$10;
 $12=((0.76))*($11);
 $13=(+(Math_atan($12)));
 $14=((13.0))*($13);
 $15=$1;
 $16=$1;
 $17=($15)*($16);
 $18=$17;
 $19=($18)/((56.25));
 $20=(+(Math_atan($19)));
 $21=((3.5))*($20);
 $22=($14)+($21);
 $23=$22;
 STACKTOP=sp;return (+($23));
}


function _FindNearestBitrate($bRate,$version,$samplerate){
 $bRate=($bRate)|0;
 $version=($version)|0;
 $samplerate=($samplerate)|0;
 var $1=0,$2=0,$3=0,$bitrate=0,$i=0,$4=0,$5=0,$8=0,$9=0,$10=0,$11=0,$13=0,$14=0,$16=0,$17=0,$18=0,$19=0,$20=0,$21=0,$23=0;
 var $24=0,$25=0,$26=0,$27=0,$28=0,$29=0,$30=0,$32=0,$33=0,$34=0,$35=0,$36=0,$37=0,$38=0,$40=0,$41=0,$42=0,$43=0,$44=0,$45=0;
 var $46=0,$47=0,$49=0,$50=0,$51=0,$52=0,$53=0,$55=0,$56=0,$57=0,$59=0,$60=0,$61=0,$62=0,$64=0,$65=0,$67=0,$68=0,$69=0,$70=0;
 var $71=0,$75=0,$76=0,$78=0,label=0;
 var sp=0;sp=STACKTOP;





 $1=$bRate;
 $2=$version;
 $3=$samplerate;
 $4=$3;
 $5=($4|0)<16000;
 if ($5) {
  $2=2;
 }
 $8=$2;
 $9=((15168+($8<<6))|0);
 $10=(($9+4)|0);
 $11=((HEAP32[(($10)>>2)])|0);
 $bitrate=$11;
 $i=2;
 while(1) {
  $13=$i;
  $14=($13|0)<=14;
  if (!($14)) {
   break;
  }
  $16=$i;
  $17=$2;
  $18=((15168+($17<<6))|0);
  $19=(($18+($16<<2))|0);
  $20=((HEAP32[(($19)>>2)])|0);
  $21=($20|0)>0;
  if ($21) {
   $23=$i;
   $24=$2;
   $25=((15168+($24<<6))|0);
   $26=(($25+($23<<2))|0);
   $27=((HEAP32[(($26)>>2)])|0);
   $28=$1;
   $29=((($27)-($28))|0);
   $30=($29|0)>0;
   if ($30) {
    $32=$i;
    $33=$2;
    $34=((15168+($33<<6))|0);
    $35=(($34+($32<<2))|0);
    $36=((HEAP32[(($35)>>2)])|0);
    $37=$1;
    $38=((($36)-($37))|0);
    $49=$38;
   } else {
    $40=$i;
    $41=$2;
    $42=((15168+($41<<6))|0);
    $43=(($42+($40<<2))|0);
    $44=((HEAP32[(($43)>>2)])|0);
    $45=$1;
    $46=((($44)-($45))|0);
    $47=(((-$46))|0);
    $49=$47;
   }

   $50=$bitrate;
   $51=$1;
   $52=((($50)-($51))|0);
   $53=($52|0)>0;
   if ($53) {
    $55=$bitrate;
    $56=$1;
    $57=((($55)-($56))|0);
    $64=$57;
   } else {
    $59=$bitrate;
    $60=$1;
    $61=((($59)-($60))|0);
    $62=(((-$61))|0);
    $64=$62;
   }

   $65=($49|0)<($64|0);
   if ($65) {
    $67=$i;
    $68=$2;
    $69=((15168+($68<<6))|0);
    $70=(($69+($67<<2))|0);
    $71=((HEAP32[(($70)>>2)])|0);
    $bitrate=$71;
   }
  }
  $75=$i;
  $76=((($75)+(1))|0);
  $i=$76;
 }
 $78=$bitrate;
 STACKTOP=sp;return (($78)|0);
}


function _nearestBitrateFullIndex($bitrate){
 $bitrate=($bitrate)|0;
 var $1=0,$2=0,$lower_range=0,$lower_range_kbps=0,$upper_range=0,$upper_range_kbps=0,$b=0,$3=0,$4=0,$6=0,$7=0,$9=0,$10=0,$11=0,$12=0,$13=0,$14=0,$15=0,$17=0,$18=0;
 var $20=0,$21=0,$22=0,$23=0,$25=0,$26=0,$27=0,$28=0,$30=0,$31=0,$32=0,$33=0,$34=0,$35=0,$36=0,$37=0,$38=0,$39=0,$42=0,$43=0;
 var $45=0,$46=0,$47=0,$48=0,$49=0,$50=0,$51=0,$52=0,$53=0,$55=0,$57=0,$59=0,label=0;
 var sp=0;sp=STACKTOP;







 $2=$bitrate;
 $lower_range=0;
 $lower_range_kbps=0;
 $upper_range=0;
 $upper_range_kbps=0;
 $3=((HEAP32[((10456)>>2)])|0);
 $upper_range_kbps=$3;
 $upper_range=16;
 $4=((HEAP32[((10456)>>2)])|0);
 $lower_range_kbps=$4;
 $lower_range=16;
 $b=0;
 while(1) {
  $6=$b;
  $7=($6|0)<16;
  if (!($7)) {
   break;
  }
  $9=$2;
  $10=($9&65535);
  $11=$b;
  $12=((($11)+(1))|0);
  $13=((10392+($12<<2))|0);
  $14=((HEAP32[(($13)>>2)])|0);
  $15=($10|0)>($14|0);
  if ($15) {
   $17=$2;
   $18=($17&65535);
   $25=$18;
  } else {
   $20=$b;
   $21=((($20)+(1))|0);
   $22=((10392+($21<<2))|0);
   $23=((HEAP32[(($22)>>2)])|0);
   $25=$23;
  }

  $26=$2;
  $27=($26&65535);
  $28=($25|0)!=($27|0);
  if ($28) {
   label = 7;
   break;
  }
  $42=$b;
  $43=((($42)+(1))|0);
  $b=$43;
 }
 if ((label|0) == 7) {
  $30=$b;
  $31=((($30)+(1))|0);
  $32=((10392+($31<<2))|0);
  $33=((HEAP32[(($32)>>2)])|0);
  $upper_range_kbps=$33;
  $34=$b;
  $35=((($34)+(1))|0);
  $upper_range=$35;
  $36=$b;
  $37=((10392+($36<<2))|0);
  $38=((HEAP32[(($37)>>2)])|0);
  $lower_range_kbps=$38;
  $39=$b;
  $lower_range=$39;
 }
 $45=$upper_range_kbps;
 $46=$2;
 $47=($46&65535);
 $48=((($45)-($47))|0);
 $49=$2;
 $50=($49&65535);
 $51=$lower_range_kbps;
 $52=((($50)-($51))|0);
 $53=($48|0)>($52|0);
 if ($53) {
  $55=$lower_range;
  $1=$55;
  $59=$1;
  STACKTOP=sp;return (($59)|0);
 } else {
  $57=$upper_range;
  $1=$57;
  $59=$1;
  STACKTOP=sp;return (($59)|0);
 }
  return 0;
}


function _map2MP3Frequency($freq){
 $freq=($freq)|0;
 var $1=0,$2=0,$3=0,$4=0,$7=0,$8=0,$11=0,$12=0,$15=0,$16=0,$19=0,$20=0,$23=0,$24=0,$27=0,$28=0,$31=0,$32=0,$36=0,label=0;
 var sp=0;sp=STACKTOP;


 $2=$freq;
 $3=$2;
 $4=($3|0)<=8000;
 do {
  if ($4) {
   $1=8000;
  } else {
   $7=$2;
   $8=($7|0)<=11025;
   if ($8) {
    $1=11025;
    break;
   }
   $11=$2;
   $12=($11|0)<=12000;
   if ($12) {
    $1=12000;
    break;
   }
   $15=$2;
   $16=($15|0)<=16000;
   if ($16) {
    $1=16000;
    break;
   }
   $19=$2;
   $20=($19|0)<=22050;
   if ($20) {
    $1=22050;
    break;
   }
   $23=$2;
   $24=($23|0)<=24000;
   if ($24) {
    $1=24000;
    break;
   }
   $27=$2;
   $28=($27|0)<=32000;
   if ($28) {
    $1=32000;
    break;
   }
   $31=$2;
   $32=($31|0)<=44100;
   if ($32) {
    $1=44100;
    break;
   } else {
    $1=48000;
    break;
   }
  }
 } while(0);
 $36=$1;
 STACKTOP=sp;return (($36)|0);
}


function _BitrateIndex($bRate,$version,$samplerate){
 $bRate=($bRate)|0;
 $version=($version)|0;
 $samplerate=($samplerate)|0;
 var $1=0,$2=0,$3=0,$4=0,$i=0,$5=0,$6=0,$10=0,$11=0,$13=0,$14=0,$15=0,$16=0,$17=0,$18=0,$20=0,$21=0,$22=0,$23=0,$24=0;
 var $25=0,$26=0,$28=0,$32=0,$33=0,$36=0,label=0;
 var sp=0;sp=STACKTOP;





 $2=$bRate;
 $3=$version;
 $4=$samplerate;
 $5=$4;
 $6=($5|0)<16000;
 if ($6) {
  $3=2;
 }
 $i=0;
 while(1) {
  $10=$i;
  $11=($10|0)<=14;
  if (!($11)) {
   label = 11;
   break;
  }
  $13=$i;
  $14=$3;
  $15=((15168+($14<<6))|0);
  $16=(($15+($13<<2))|0);
  $17=((HEAP32[(($16)>>2)])|0);
  $18=($17|0)>0;
  if ($18) {
   $20=$i;
   $21=$3;
   $22=((15168+($21<<6))|0);
   $23=(($22+($20<<2))|0);
   $24=((HEAP32[(($23)>>2)])|0);
   $25=$2;
   $26=($24|0)==($25|0);
   if ($26) {
    label = 7;
    break;
   }
  }
  $32=$i;
  $33=((($32)+(1))|0);
  $i=$33;
 }
 if ((label|0) == 7) {
  $28=$i;
  $1=$28;
  $36=$1;
  STACKTOP=sp;return (($36)|0);
 }
 else if ((label|0) == 11) {
  $1=-1;
  $36=$1;
  STACKTOP=sp;return (($36)|0);
 }
  return 0;
}


function _SmpFrqIndex($sample_freq,$version){
 $sample_freq=($sample_freq)|0;
 $version=($version)|0;
 var $1=0,$2=0,$3=0,$4=0,$6=0,$8=0,$10=0,$12=0,$14=0,$16=0,$18=0,$20=0,$22=0,$24=0,$26=0,label=0;
 var sp=0;sp=STACKTOP;



 $2=$sample_freq;
 $3=$version;
 $4=$2;
 if (((($4|0))|0)==((44100)|0)) {
  $6=$3;
  HEAP32[(($6)>>2)]=1;
  $1=0;
 } else if (((($4|0))|0)==((48000)|0)) {
  $8=$3;
  HEAP32[(($8)>>2)]=1;
  $1=1;
 } else if (((($4|0))|0)==((32000)|0)) {
  $10=$3;
  HEAP32[(($10)>>2)]=1;
  $1=2;
 } else if (((($4|0))|0)==((22050)|0)) {
  $12=$3;
  HEAP32[(($12)>>2)]=0;
  $1=0;
 } else if (((($4|0))|0)==((24000)|0)) {
  $14=$3;
  HEAP32[(($14)>>2)]=0;
  $1=1;
 } else if (((($4|0))|0)==((16000)|0)) {
  $16=$3;
  HEAP32[(($16)>>2)]=0;
  $1=2;
 } else if (((($4|0))|0)==((11025)|0)) {
  $18=$3;
  HEAP32[(($18)>>2)]=0;
  $1=0;
 } else if (((($4|0))|0)==((12000)|0)) {
  $20=$3;
  HEAP32[(($20)>>2)]=0;
  $1=1;
 } else if (((($4|0))|0)==((8000)|0)) {
  $22=$3;
  HEAP32[(($22)>>2)]=0;
  $1=2;
 } else {
  $24=$3;
  HEAP32[(($24)>>2)]=0;
  $1=-1;
 }
 $26=$1;
 STACKTOP=sp;return (($26)|0);
}


function _isResamplingNecessary($cfg){
 $cfg=($cfg)|0;
 var $1=0,$l=0,$h=0,$2=0,$3=0,$4=0,$5=.0,$6=.0,$7=0,$8=0,$9=0,$10=0,$11=.0,$12=.0,$13=0,$14=0,$15=0,$16=0,$17=0,$18=0;
 var $20=0,$21=0,$22=0,$23=0,$24=0,$26=0,$27=0,label=0;
 var sp=0;sp=STACKTOP;



 $1=$cfg;
 $2=$1;
 $3=(($2+48)|0);
 $4=((HEAP32[(($3)>>2)])|0);
 $5=(+((($4|0))|0));
 $6=($5)*((0.9994999766349792));
 $7=(~~($6));
 $l=$7;
 $8=$1;
 $9=(($8+48)|0);
 $10=((HEAP32[(($9)>>2)])|0);
 $11=(+((($10|0))|0));
 $12=($11)*((1.000499963760376));
 $13=(~~($12));
 $h=$13;
 $14=$1;
 $15=(($14+44)|0);
 $16=((HEAP32[(($15)>>2)])|0);
 $17=$l;
 $18=($16|0)<($17|0);
 if ($18) {
  $26=1;

  $27=($26?1:0);
  STACKTOP=sp;return (($27)|0);
 }
 $20=$h;
 $21=$1;
 $22=(($21+44)|0);
 $23=((HEAP32[(($22)>>2)])|0);
 $24=($20|0)<($23|0);
 $26=$24;

 $27=($26?1:0);
 STACKTOP=sp;return (($27)|0);
}


function _fill_buffer($gfc,$mfbuf,$in_buffer,$nsamples,$n_in,$n_out){
 $gfc=($gfc)|0;
 $mfbuf=($mfbuf)|0;
 $in_buffer=($in_buffer)|0;
 $nsamples=($nsamples)|0;
 $n_in=($n_in)|0;
 $n_out=($n_out)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$cfg=0,$mf_size=0,$framesize=0,$nout=0,$ch=0,$nch=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$14=0;
 var $15=0,$16=0,$17=0,$18=0,$19=0,$20=0,$21=0,$22=0,$25=0,$26=0,$27=0,$28=0,$29=0,$30=0,$31=0,$32=0,$33=0,$34=0,$35=0,$36=0;
 var $37=0,$38=0,$39=0,$40=0,$42=0,$43=0,$44=0,$45=0,$47=0,$48=0,$50=0,$51=0,$52=0,$54=0,$56=0,$58=0,$60=0,$61=0,$62=0,$63=0;
 var $64=0,$65=0,$66=0,$67=0,$68=0,$69=0,$70=0,$71=0,$72=0,$73=0,$74=0,$76=0,$77=0,$78=0,$79=0,$81=0,$82=0,$83=0,$84=0,label=0;
 var sp=0;sp=STACKTOP;












 $1=$gfc;
 $2=$mfbuf;
 $3=$in_buffer;
 $4=$nsamples;
 $5=$n_in;
 $6=$n_out;
 $7=$1;
 $8=(($7+16)|0);
 $cfg=$8;
 $9=$1;
 $10=(($9+27824)|0);
 $11=(($10+56212)|0);
 $12=((HEAP32[(($11)>>2)])|0);
 $mf_size=$12;
 $13=$cfg;
 $14=(($13+60)|0);
 $15=((HEAP32[(($14)>>2)])|0);
 $16=((($15)*(576))&-1);
 $framesize=$16;
 $ch=0;
 $17=$cfg;
 $18=(($17+56)|0);
 $19=((HEAP32[(($18)>>2)])|0);
 $nch=$19;
 $20=$cfg;
 $21=((_isResamplingNecessary($20))|0);
 $22=($21|0)!=0;
 if ($22) {
  while(1) {
   $25=$1;
   $26=$mf_size;
   $27=$ch;
   $28=$2;
   $29=(($28+($27<<2))|0);
   $30=((HEAP32[(($29)>>2)])|0);
   $31=(($30+($26<<2))|0);
   $32=$framesize;
   $33=$ch;
   $34=$3;
   $35=(($34+($33<<2))|0);
   $36=((HEAP32[(($35)>>2)])|0);
   $37=$4;
   $38=$5;
   $39=$ch;
   $40=((_fill_buffer_resample($25,$31,$32,$36,$37,$38,$39))|0);
   $nout=$40;
   $42=$ch;
   $43=((($42)+(1))|0);
   $ch=$43;
   $44=$nch;
   $45=($43|0)<($44|0);
   if (!($45)) {
    break;
   }
  }
  $47=$nout;
  $48=$6;
  HEAP32[(($48)>>2)]=$47;
  STACKTOP=sp;return;
 }
 $50=$framesize;
 $51=$4;
 $52=($50|0)<($51|0);
 if ($52) {
  $54=$framesize;
  $58=$54;
 } else {
  $56=$4;
  $58=$56;
 }

 $nout=$58;
 while(1) {
  $60=$mf_size;
  $61=$ch;
  $62=$2;
  $63=(($62+($61<<2))|0);
  $64=((HEAP32[(($63)>>2)])|0);
  $65=(($64+($60<<2))|0);
  $66=$65;
  $67=$ch;
  $68=$3;
  $69=(($68+($67<<2))|0);
  $70=((HEAP32[(($69)>>2)])|0);
  $71=(($70)|0);
  $72=$71;
  $73=$nout;
  $74=($73<<2);
  (_memcpy((($66)|0), (($72)|0), $74)|0);
  $76=$ch;
  $77=((($76)+(1))|0);
  $ch=$77;
  $78=$nch;
  $79=($77|0)<($78|0);
  if (!($79)) {
   break;
  }
 }
 $81=$nout;
 $82=$6;
 HEAP32[(($82)>>2)]=$81;
 $83=$nout;
 $84=$5;
 HEAP32[(($84)>>2)]=$83;
 STACKTOP=sp;return;
}


function _lame_report_def($format,$args){
 $format=($format)|0;
 $args=($args)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,label=0;
 var sp=0;sp=STACKTOP;


 $1=$format;
 $2=$args;
 $3=((HEAP32[((_stderr)>>2)])|0);
 $4=$1;
 $5=$2;
 $6=((_vfprintf((($3)|0),(($4)|0),(($5)|0)))|0);
 $7=((HEAP32[((_stderr)>>2)])|0);
 $8=((_fflush((($7)|0)))|0);
 STACKTOP=sp;return;
}


function _lame_msgf($gfc,$format,varrp){
 $gfc=($gfc)|0;
 $format=($format)|0;
 varrp=(varrp)|0;
 var $1=0,$2=0,$args=0,$3=0,$4=0,$6=0,$7=0,$8=0,$9=0,$11=0,$12=0,$13=0,$14=0,$15=0,$16=0,$17=0,$18=0,$19=0,label=0;
 var sp=0;sp=STACKTOP;STACKTOP=(STACKTOP+16)|0;


 $args=((sp)|0);
 $1=$gfc;
 $2=$format;
 $3=$1;
 $4=($3|0)!=0;
 if (!($4)) {
  STACKTOP=sp;return;
 }
 $6=$1;
 $7=(($6+85828)|0);
 $8=((HEAP32[(($7)>>2)])|0);
 $9=($8|0)!=0;
 if (!($9)) {
  STACKTOP=sp;return;
 }
 $11=(($args)|0);
 $12=$11;
 HEAP32[(($12)>>2)]=varrp;HEAP32[((($12)+(4))>>2)]=0;
 $13=$1;
 $14=(($13+85828)|0);
 $15=((HEAP32[(($14)>>2)])|0);
 $16=$2;
 $17=(($args)|0);
 FUNCTION_TABLE_vii[($15)&7]($16,$17);
 $18=(($args)|0);
 $19=$18;

 STACKTOP=sp;return;
}


function _lame_errorf($gfc,$format,varrp){
 $gfc=($gfc)|0;
 $format=($format)|0;
 varrp=(varrp)|0;
 var $1=0,$2=0,$args=0,$3=0,$4=0,$6=0,$7=0,$8=0,$9=0,$11=0,$12=0,$13=0,$14=0,$15=0,$16=0,$17=0,$18=0,$19=0,label=0;
 var sp=0;sp=STACKTOP;STACKTOP=(STACKTOP+16)|0;


 $args=((sp)|0);
 $1=$gfc;
 $2=$format;
 $3=$1;
 $4=($3|0)!=0;
 if (!($4)) {
  STACKTOP=sp;return;
 }
 $6=$1;
 $7=(($6+85836)|0);
 $8=((HEAP32[(($7)>>2)])|0);
 $9=($8|0)!=0;
 if (!($9)) {
  STACKTOP=sp;return;
 }
 $11=(($args)|0);
 $12=$11;
 HEAP32[(($12)>>2)]=varrp;HEAP32[((($12)+(4))>>2)]=0;
 $13=$1;
 $14=(($13+85836)|0);
 $15=((HEAP32[(($14)>>2)])|0);
 $16=$2;
 $17=(($args)|0);
 FUNCTION_TABLE_vii[($15)&7]($16,$17);
 $18=(($args)|0);
 $19=$18;

 STACKTOP=sp;return;
}


function _has_MMX(){
 var label=0;

 return ((0)|0);
}


function _has_3DNow(){
 var label=0;

 return ((0)|0);
}


function _has_SSE(){
 var label=0;

 return ((0)|0);
}


function _has_SSE2(){
 var label=0;

 return ((0)|0);
}


function _disable_FPE(){
 var label=0;

 return;
}


function _init_log_table(){
 var $j=0,$1=0,$2=0,$5=0,$6=0,$8=0,$9=.0,$10=.0,$11=.0,$12=.0,$13=.0,$14=.0,$15=.0,$16=.0,$17=0,$18=0,$20=0,$21=0,label=0;
 var sp=0;sp=STACKTOP;

 $1=((HEAP32[((60392)>>2)])|0);
 $2=($1|0)!=0;
 if ($2) {
  HEAP32[((60392)>>2)]=1;
  STACKTOP=sp;return;
 }
 $j=0;
 while(1) {
  $5=$j;
  $6=($5|0)<513;
  if (!($6)) {
   break;
  }
  $8=$j;
  $9=(+((($8|0))|0));
  $10=($9)/((512.0));
  $11=((1.0))+($10);
  $12=$11;
  $13=(+(Math_log($12)));
  $14=(+(Math_log(2.0)));
  $15=($13)/($14);
  $16=$15;
  $17=$j;
  $18=((57304+($17<<2))|0);
  HEAPF32[(($18)>>2)]=$16;
  $20=$j;
  $21=((($20)+(1))|0);
  $j=$21;
 }
 HEAP32[((60392)>>2)]=1;
 STACKTOP=sp;return;
}


function _fast_log2($x){
 $x=+($x);
 var $1=.0,$log2val=.0,$partial=.0,$fi=0,$mantisse=0,$2=.0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=.0,$13=0,$14=0,$15=.0,$16=.0;
 var $17=.0,$18=0,$19=0,$20=0,$21=0,$22=.0,$23=.0,$24=.0,$25=.0,$26=0,$27=0,$28=0,$29=.0,$30=.0,$31=.0,$32=.0,$33=.0,$34=.0,$35=.0,label=0;
 var sp=0;sp=STACKTOP;STACKTOP=(STACKTOP+8)|0;



 $fi=((sp)|0);

 $1=$x;
 $2=$1;
 $3=$fi;
 HEAPF32[(($3)>>2)]=$2;
 $4=$fi;
 $5=((HEAP32[(($4)>>2)])|0);
 $6=$5&8388607;
 $mantisse=$6;
 $7=$fi;
 $8=((HEAP32[(($7)>>2)])|0);
 $9=$8>>23;
 $10=$9&255;
 $11=((($10)-(127))|0);
 $12=(+((($11|0))|0));
 $log2val=$12;
 $13=$mantisse;
 $14=$13&16383;
 $15=(+((($14|0))|0));
 $partial=$15;
 $16=$partial;
 $17=($16)*((0.00006103515625));
 $partial=$17;
 $18=$mantisse;
 $19=$18>>14;
 $mantisse=$19;
 $20=$mantisse;
 $21=((57304+($20<<2))|0);
 $22=(+(HEAPF32[(($21)>>2)]));
 $23=$partial;
 $24=((1.0))-($23);
 $25=($22)*($24);
 $26=$mantisse;
 $27=((($26)+(1))|0);
 $28=((57304+($27<<2))|0);
 $29=(+(HEAPF32[(($28)>>2)]));
 $30=$partial;
 $31=($29)*($30);
 $32=($25)+($31);
 $33=$log2val;
 $34=($33)+($32);
 $log2val=$34;
 $35=$log2val;
 STACKTOP=sp;return (+($35));
}


function _free_global_data($gfc){
 $gfc=($gfc)|0;
 var $1=0,$2=0,$3=0,$5=0,$6=0,$7=0,$8=0,$10=0,$11=0,$12=0,$13=0,$14=0,$15=0,$16=0,$18=0,$19=0,$20=0,$21=0,$22=0,$23=0;
 var $24=0,$26=0,$27=0,$28=0,$29=0,$30=0,$31=0,$32=0,$34=0,$35=0,$36=0,$37=0,$38=0,$39=0,$40=0,$42=0,$43=0,$44=0,$45=0,$46=0;
 var $47=0,label=0;
 var sp=0;sp=STACKTOP;

 $1=$gfc;
 $2=$1;
 $3=($2|0)!=0;
 if (!($3)) {
  STACKTOP=sp;return;
 }
 $5=$1;
 $6=(($5+85800)|0);
 $7=((HEAP32[(($6)>>2)])|0);
 $8=($7|0)!=0;
 if (!($8)) {
  STACKTOP=sp;return;
 }
 $10=$1;
 $11=(($10+85800)|0);
 $12=((HEAP32[(($11)>>2)])|0);
 $13=(($12)|0);
 $14=(($13+2156)|0);
 $15=((HEAP32[(($14)>>2)])|0);
 $16=($15|0)!=0;
 if ($16) {
  $18=$1;
  $19=(($18+85800)|0);
  $20=((HEAP32[(($19)>>2)])|0);
  $21=(($20)|0);
  $22=(($21+2156)|0);
  $23=((HEAP32[(($22)>>2)])|0);
  $24=$23;
  _free($24);
 }
 $26=$1;
 $27=(($26+85800)|0);
 $28=((HEAP32[(($27)>>2)])|0);
 $29=(($28+2160)|0);
 $30=(($29+2156)|0);
 $31=((HEAP32[(($30)>>2)])|0);
 $32=($31|0)!=0;
 if ($32) {
  $34=$1;
  $35=(($34+85800)|0);
  $36=((HEAP32[(($35)>>2)])|0);
  $37=(($36+2160)|0);
  $38=(($37+2156)|0);
  $39=((HEAP32[(($38)>>2)])|0);
  $40=$39;
  _free($40);
 }
 $42=$1;
 $43=(($42+85800)|0);
 $44=((HEAP32[(($43)>>2)])|0);
 $45=$44;
 _free($45);
 $46=$1;
 $47=(($46+85800)|0);
 HEAP32[(($47)>>2)]=0;
 STACKTOP=sp;return;
}


function _ATHformula_GB($f,$value,$f_min,$f_max){
 $f=+($f);
 $value=+($value);
 $f_min=+($f_min);
 $f_max=+($f_max);
 var $1=.0,$2=.0,$3=.0,$4=.0,$ath=.0,$5=.0,$6=.0,$7=0,$10=.0,$11=.0,$12=.0,$13=.0,$14=0,$16=.0,$18=.0,$20=.0,$21=.0,$22=.0,$23=0,$25=.0;
 var $27=.0,$29=.0,$30=.0,$31=.0,$32=.0,$33=.0,$34=.0,$35=.0,$36=.0,$37=.0,$38=.0,$39=.0,$40=.0,$41=.0,$42=.0,$43=.0,$44=.0,$45=.0,$46=.0,$47=.0;
 var $48=.0,$49=.0,$50=.0,$51=.0,$52=.0,$53=.0,$54=.0,$55=.0,$56=.0,$57=.0,$58=.0,$59=.0,$60=.0,$61=.0,label=0;
 var sp=0;sp=STACKTOP;





 $1=$f;
 $2=$value;
 $3=$f_min;
 $4=$f_max;
 $5=$1;
 $6=$5;
 $7=$6<(-0.3);
 if ($7) {
  $1=3410.0;
 }
 $10=$1;
 $11=($10)/((1000.0));
 $1=$11;
 $12=$3;
 $13=$1;
 $14=$12>$13;
 if ($14) {
  $16=$3;
  $20=$16;
 } else {
  $18=$1;
  $20=$18;
 }

 $1=$20;
 $21=$4;
 $22=$1;
 $23=$21<$22;
 if ($23) {
  $25=$4;
  $29=$25;
 } else {
  $27=$1;
  $29=$27;
 }

 $1=$29;
 $30=$1;
 $31=$30;
 $32=(+(Math_pow((+($31)),-0.8)));
 $33=((3.64))*($32);
 $34=$1;
 $35=$34;
 $36=($35)-((3.4));
 $37=(+(Math_pow((+($36)),2.0)));
 $38=((-0.6))*($37);
 $39=(+(Math_exp($38)));
 $40=((6.8))*($39);
 $41=($33)-($40);
 $42=$1;
 $43=$42;
 $44=($43)-((8.7));
 $45=(+(Math_pow((+($44)),2.0)));
 $46=((-0.15))*($45);
 $47=(+(Math_exp($46)));
 $48=((6.0))*($47);
 $49=($41)+($48);
 $50=$2;
 $51=$50;
 $52=((0.04))*($51);
 $53=((0.6))+($52);
 $54=($53)*((0.001));
 $55=$1;
 $56=$55;
 $57=(+(Math_pow((+($56)),4.0)));
 $58=($54)*($57);
 $59=($49)+($58);
 $60=$59;
 $ath=$60;
 $61=$ath;
 STACKTOP=sp;return (+($61));
}


function _fill_buffer_resample($gfc,$outbuf,$desired_len,$inbuf,$len,$num_used,$ch){
 $gfc=($gfc)|0;
 $outbuf=($outbuf)|0;
 $desired_len=($desired_len)|0;
 $inbuf=($inbuf)|0;
 $len=($len)|0;
 $num_used=($num_used)|0;
 $ch=($ch)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$cfg=0,$esv=0,$resample_ratio=.0,$BLACKSIZE=0,$offset=.0,$xvalue=.0,$i=0,$j=0,$k=0,$filter_l=0,$fcn=.0,$intratio=.0,$inbuf_old=0;
 var $bpc=0,$sum=.0,$time0=.0,$joff=0,$j2=0,$y=.0,$n_shift=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$14=0,$15=.0,$16=0,$17=0,$18=0,$19=.0,$20=.0;
 var $21=0,$22=0,$23=0,$24=0,$25=0,$26=0,$27=0,$28=0,$29=0,$30=0,$31=0,$32=0,$33=0,$36=.0,$37=.0,$38=.0,$39=.0,$40=.0,$41=.0,$42=0;
 var $43=0,$44=.0,$45=.0,$46=.0,$47=.0,$48=.0,$49=.0,$50=0,$53=.0,$54=0,$55=.0,$56=.0,$57=0,$58=0,$59=0,$60=0,$61=0,$62=0,$63=0,$65=0;
 var $66=0,$67=0,$68=0,$69=0,$70=0,$71=0,$72=0,$73=0,$74=0,$75=0,$76=0,$78=0,$79=0,$80=0,$81=0,$83=0,$84=0,$85=0,$86=0,$87=0;
 var $88=0,$89=0,$91=0,$92=0,$94=0,$95=0,$96=0,$97=0,$98=0,$99=0,$101=0,$102=0,$103=0,$104=0,$106=0,$107=0,$108=0,$109=.0,$110=0,$111=.0;
 var $112=.0,$113=.0,$114=.0,$116=0,$117=0,$118=0,$120=0,$121=.0,$122=.0,$123=.0,$124=.0,$125=0,$126=.0,$127=0,$128=0,$129=0,$130=0,$131=0,$132=0,$133=0;
 var $134=.0,$135=.0,$137=0,$138=0,$141=0,$142=0,$143=0,$145=.0,$146=0,$147=0,$148=0,$149=0,$150=0,$151=0,$152=0,$153=.0,$154=.0,$156=0,$157=0,$160=0;
 var $161=0,$163=0,$164=0,$166=0,$167=0,$168=0,$169=0,$170=0,$172=0,$173=0,$174=0,$176=0,$177=.0,$178=.0,$179=.0,$180=.0,$181=0,$182=0,$183=0,$184=0;
 var $185=.0,$186=.0,$187=.0,$188=0,$189=0,$190=0,$191=0,$192=0,$193=0,$194=0,$195=0,$196=0,$199=.0,$200=0,$201=0,$202=0,$203=0,$204=.0,$205=.0,$206=0;
 var $207=.0,$208=0,$209=0,$210=.0,$211=.0,$212=.0,$213=.0,$214=.0,$215=.0,$216=.0,$217=0,$218=.0,$219=.0,$220=0,$221=.0,$222=.0,$223=.0,$224=.0,$225=.0,$226=0;
 var $228=0,$229=0,$230=0,$232=0,$233=0,$234=0,$235=0,$236=0,$237=0,$238=0,$239=0,$241=0,$242=0,$243=0,$244=0,$245=0,$246=.0,$248=0,$249=0,$250=0;
 var $251=.0,$253=.0,$254=.0,$255=0,$256=0,$257=0,$258=0,$259=0,$260=0,$261=0,$262=.0,$263=.0,$264=.0,$265=.0,$267=0,$268=0,$270=.0,$271=0,$272=0,$273=0;
 var $275=0,$276=0,$278=0,$279=0,$280=0,$281=0,$282=0,$283=0,$284=0,$285=0,$287=0,$289=0,$290=0,$291=0,$292=0,$293=0,$294=0,$296=0,$297=0,$298=0;
 var $299=0,$300=.0,$301=0,$302=.0,$303=.0,$304=.0,$305=.0,$306=0,$307=0,$308=0,$309=0,$310=.0,$311=.0,$312=0,$313=0,$314=0,$315=0,$318=0,$319=0,$320=0;
 var $322=0,$323=0,$324=0,$325=0,$326=0,$327=0,$328=0,$329=0,$330=.0,$331=0,$332=0,$333=0,$335=0,$336=0,$339=0,$340=0,$341=0,$342=0,$344=0,$345=0;
 var $346=0,$348=0,$349=0,$350=0,$351=0,$352=0,$353=0,$354=.0,$355=0,$356=0,$357=0,$359=0,$360=0,$363=0,$364=0,$365=0,$367=0,$368=0,$369=0,$370=.0;
 var $371=0,$372=0,$373=0,$375=0,$376=0,$377=0,$378=0,$381=0,label=0;
 var sp=0;sp=STACKTOP;



























 $1=$gfc;
 $2=$outbuf;
 $3=$desired_len;
 $4=$inbuf;
 $5=$len;
 $6=$num_used;
 $7=$ch;
 $8=$1;
 $9=(($8+16)|0);
 $cfg=$9;
 $10=$1;
 $11=(($10+27824)|0);
 $esv=$11;
 $12=$cfg;
 $13=(($12+44)|0);
 $14=((HEAP32[(($13)>>2)])|0);
 $15=(+((($14|0))|0));
 $16=$cfg;
 $17=(($16+48)|0);
 $18=((HEAP32[(($17)>>2)])|0);
 $19=(+((($18|0))|0));
 $20=($15)/($19);
 $resample_ratio=$20;
 $j=0;
 $21=$cfg;
 $22=(($21+48)|0);
 $23=((HEAP32[(($22)>>2)])|0);
 $24=$cfg;
 $25=(($24+48)|0);
 $26=((HEAP32[(($25)>>2)])|0);
 $27=$cfg;
 $28=(($27+44)|0);
 $29=((HEAP32[(($28)>>2)])|0);
 $30=((_gcd($26,$29))|0);
 $31=(((($23|0))/(($30|0)))&-1);
 $bpc=$31;
 $32=$bpc;
 $33=($32|0)>320;
 if ($33) {
  $bpc=320;
 }
 $36=$resample_ratio;
 $37=$resample_ratio;
 $38=((0.5))+($37);
 $39=(+(Math_floor($38)));
 $40=($36)-($39);
 $41=(+(Math_abs((+($40)))));
 $42=$41<(0.0001);
 $43=($42&1);
 $44=(+((($43|0))|0));
 $intratio=$44;
 $45=$resample_ratio;
 $46=((1.0))/($45);
 $47=$46;
 $fcn=$47;
 $48=$fcn;
 $49=$48;
 $50=$49>(1.0);
 if ($50) {
  $fcn=1.0;
 }
 $filter_l=31;
 $53=$intratio;
 $54=$filter_l;
 $55=(+((($54|0))|0));
 $56=($55)+($53);
 $57=(~~($56));
 $filter_l=$57;
 $58=$filter_l;
 $59=((($58)+(1))|0);
 $BLACKSIZE=$59;
 $60=$1;
 $61=(($60+12)|0);
 $62=((HEAP32[(($61)>>2)])|0);
 $63=($62|0)==0;
 if ($63) {
  $65=$BLACKSIZE;
  $66=((_calloc($65,4))|0);
  $67=$66;
  $68=$esv;
  $69=(($68+9360)|0);
  $70=(($69)|0);
  HEAP32[(($70)>>2)]=$67;
  $71=$BLACKSIZE;
  $72=((_calloc($71,4))|0);
  $73=$72;
  $74=$esv;
  $75=(($74+9360)|0);
  $76=(($75+4)|0);
  HEAP32[(($76)>>2)]=$73;
  $i=0;
  while(1) {
   $78=$i;
   $79=$bpc;
   $80=($79<<1);
   $81=($78|0)<=($80|0);
   if (!($81)) {
    break;
   }
   $83=$BLACKSIZE;
   $84=((_calloc($83,4))|0);
   $85=$84;
   $86=$i;
   $87=$esv;
   $88=(($87+9368)|0);
   $89=(($88+($86<<2))|0);
   HEAP32[(($89)>>2)]=$85;
   $91=$i;
   $92=((($91)+(1))|0);
   $i=$92;
  }
  $94=$esv;
  $95=(($94+9344)|0);
  $96=(($95)|0);
  HEAPF64[(($96)>>3)]=0.0;
  $97=$esv;
  $98=(($97+9344)|0);
  $99=(($98+8)|0);
  HEAPF64[(($99)>>3)]=0.0;
  $j=0;
  while(1) {
   $101=$j;
   $102=$bpc;
   $103=($102<<1);
   $104=($101|0)<=($103|0);
   if (!($104)) {
    break;
   }
   $sum=0.0;
   $106=$j;
   $107=$bpc;
   $108=((($106)-($107))|0);
   $109=(+((($108|0))|0));
   $110=$bpc;
   $111=(+((($110|0))|0));
   $112=((2.0))*($111);
   $113=($109)/($112);
   $114=$113;
   $offset=$114;
   $i=0;
   while(1) {
    $116=$i;
    $117=$filter_l;
    $118=($116|0)<=($117|0);
    if (!($118)) {
     break;
    }
    $120=$i;
    $121=(+((($120|0))|0));
    $122=$offset;
    $123=($121)-($122);
    $124=$fcn;
    $125=$filter_l;
    $126=(+(_blackman($123,$124,$125)));
    $127=$i;
    $128=$j;
    $129=$esv;
    $130=(($129+9368)|0);
    $131=(($130+($128<<2))|0);
    $132=((HEAP32[(($131)>>2)])|0);
    $133=(($132+($127<<2))|0);
    HEAPF32[(($133)>>2)]=$126;
    $134=$sum;
    $135=($134)+($126);
    $sum=$135;
    $137=$i;
    $138=((($137)+(1))|0);
    $i=$138;
   }
   $i=0;
   while(1) {
    $141=$i;
    $142=$filter_l;
    $143=($141|0)<=($142|0);
    if (!($143)) {
     break;
    }
    $145=$sum;
    $146=$i;
    $147=$j;
    $148=$esv;
    $149=(($148+9368)|0);
    $150=(($149+($147<<2))|0);
    $151=((HEAP32[(($150)>>2)])|0);
    $152=(($151+($146<<2))|0);
    $153=(+(HEAPF32[(($152)>>2)]));
    $154=($153)/($145);
    HEAPF32[(($152)>>2)]=$154;
    $156=$i;
    $157=((($156)+(1))|0);
    $i=$157;
   }
   $160=$j;
   $161=((($160)+(1))|0);
   $j=$161;
  }
  $163=$1;
  $164=(($163+12)|0);
  HEAP32[(($164)>>2)]=1;
 }
 $166=$7;
 $167=$esv;
 $168=(($167+9360)|0);
 $169=(($168+($166<<2))|0);
 $170=((HEAP32[(($169)>>2)])|0);
 $inbuf_old=$170;
 $k=0;
 while(1) {
  $172=$k;
  $173=$3;
  $174=($172|0)<($173|0);
  if (!($174)) {
   break;
  }
  $176=$k;
  $177=(+((($176|0))|0));
  $178=$resample_ratio;
  $179=($177)*($178);
  $time0=$179;
  $180=$time0;
  $181=$7;
  $182=$esv;
  $183=(($182+9344)|0);
  $184=(($183+($181<<3))|0);
  $185=(+(HEAPF64[(($184)>>3)]));
  $186=($180)-($185);
  $187=(+(Math_floor($186)));
  $188=(~~($187));
  $j=$188;
  $189=$filter_l;
  $190=$j;
  $191=((($189)+($190))|0);
  $192=$filter_l;
  $193=(((($192|0))/(2))&-1);
  $194=((($191)-($193))|0);
  $195=$5;
  $196=($194|0)>=($195|0);
  if ($196) {
   label = 26;
   break;
  }
  $199=$time0;
  $200=$7;
  $201=$esv;
  $202=(($201+9344)|0);
  $203=(($202+($200<<3))|0);
  $204=(+(HEAPF64[(($203)>>3)]));
  $205=($199)-($204);
  $206=$j;
  $207=(+((($206|0))|0));
  $208=$filter_l;
  $209=(((($208|0))%(2))&-1);
  $210=(+((($209|0))|0));
  $211=((0.5))*($210);
  $212=($207)+($211);
  $213=($205)-($212);
  $214=$213;
  $offset=$214;
  $215=$offset;
  $216=($215)*((2.0));
  $217=$bpc;
  $218=(+((($217|0))|0));
  $219=($216)*($218);
  $220=$bpc;
  $221=(+((($220|0))|0));
  $222=($219)+($221);
  $223=$222;
  $224=($223)+((0.5));
  $225=(+(Math_floor($224)));
  $226=(~~($225));
  $joff=$226;
  $xvalue=0.0;
  $i=0;
  while(1) {
   $228=$i;
   $229=$filter_l;
   $230=($228|0)<=($229|0);
   if (!($230)) {
    break;
   }
   $232=$i;
   $233=$j;
   $234=((($232)+($233))|0);
   $235=$filter_l;
   $236=(((($235|0))/(2))&-1);
   $237=((($234)-($236))|0);
   $j2=$237;
   $238=$j2;
   $239=($238|0)<0;
   if ($239) {
    $241=$BLACKSIZE;
    $242=$j2;
    $243=((($241)+($242))|0);
    $244=$inbuf_old;
    $245=(($244+($243<<2))|0);
    $246=(+(HEAPF32[(($245)>>2)]));
    $253=$246;
   } else {
    $248=$j2;
    $249=$4;
    $250=(($249+($248<<2))|0);
    $251=(+(HEAPF32[(($250)>>2)]));
    $253=$251;
   }

   $y=$253;
   $254=$y;
   $255=$i;
   $256=$joff;
   $257=$esv;
   $258=(($257+9368)|0);
   $259=(($258+($256<<2))|0);
   $260=((HEAP32[(($259)>>2)])|0);
   $261=(($260+($255<<2))|0);
   $262=(+(HEAPF32[(($261)>>2)]));
   $263=($254)*($262);
   $264=$xvalue;
   $265=($264)+($263);
   $xvalue=$265;
   $267=$i;
   $268=((($267)+(1))|0);
   $i=$268;
  }
  $270=$xvalue;
  $271=$k;
  $272=$2;
  $273=(($272+($271<<2))|0);
  HEAPF32[(($273)>>2)]=$270;
  $275=$k;
  $276=((($275)+(1))|0);
  $k=$276;
 }
 if ((label|0) == 26) {
 }
 $278=$5;
 $279=$filter_l;
 $280=$j;
 $281=((($279)+($280))|0);
 $282=$filter_l;
 $283=(((($282|0))/(2))&-1);
 $284=((($281)-($283))|0);
 $285=($278|0)<($284|0);
 if ($285) {
  $287=$5;
  $296=$287;
 } else {
  $289=$filter_l;
  $290=$j;
  $291=((($289)+($290))|0);
  $292=$filter_l;
  $293=(((($292|0))/(2))&-1);
  $294=((($291)-($293))|0);
  $296=$294;
 }

 $297=$6;
 HEAP32[(($297)>>2)]=$296;
 $298=$6;
 $299=((HEAP32[(($298)>>2)])|0);
 $300=(+((($299|0))|0));
 $301=$k;
 $302=(+((($301|0))|0));
 $303=$resample_ratio;
 $304=($302)*($303);
 $305=($300)-($304);
 $306=$7;
 $307=$esv;
 $308=(($307+9344)|0);
 $309=(($308+($306<<3))|0);
 $310=(+(HEAPF64[(($309)>>3)]));
 $311=($310)+($305);
 HEAPF64[(($309)>>3)]=$311;
 $312=$6;
 $313=((HEAP32[(($312)>>2)])|0);
 $314=$BLACKSIZE;
 $315=($313|0)>=($314|0);
 if ($315) {
  $i=0;
  while(1) {
   $318=$i;
   $319=$BLACKSIZE;
   $320=($318|0)<($319|0);
   if (!($320)) {
    break;
   }
   $322=$6;
   $323=((HEAP32[(($322)>>2)])|0);
   $324=$i;
   $325=((($323)+($324))|0);
   $326=$BLACKSIZE;
   $327=((($325)-($326))|0);
   $328=$4;
   $329=(($328+($327<<2))|0);
   $330=(+(HEAPF32[(($329)>>2)]));
   $331=$i;
   $332=$inbuf_old;
   $333=(($332+($331<<2))|0);
   HEAPF32[(($333)>>2)]=$330;
   $335=$i;
   $336=((($335)+(1))|0);
   $i=$336;
  }
  $381=$k;
  STACKTOP=sp;return (($381)|0);
 }
 $339=$BLACKSIZE;
 $340=$6;
 $341=((HEAP32[(($340)>>2)])|0);
 $342=((($339)-($341))|0);
 $n_shift=$342;
 $i=0;
 while(1) {
  $344=$i;
  $345=$n_shift;
  $346=($344|0)<($345|0);
  if (!($346)) {
   break;
  }
  $348=$i;
  $349=$6;
  $350=((HEAP32[(($349)>>2)])|0);
  $351=((($348)+($350))|0);
  $352=$inbuf_old;
  $353=(($352+($351<<2))|0);
  $354=(+(HEAPF32[(($353)>>2)]));
  $355=$i;
  $356=$inbuf_old;
  $357=(($356+($355<<2))|0);
  HEAPF32[(($357)>>2)]=$354;
  $359=$i;
  $360=((($359)+(1))|0);
  $i=$360;
 }
 $j=0;
 while(1) {
  $363=$i;
  $364=$BLACKSIZE;
  $365=($363|0)<($364|0);
  if (!($365)) {
   break;
  }
  $367=$j;
  $368=$4;
  $369=(($368+($367<<2))|0);
  $370=(+(HEAPF32[(($369)>>2)]));
  $371=$i;
  $372=$inbuf_old;
  $373=(($372+($371<<2))|0);
  HEAPF32[(($373)>>2)]=$370;
  $375=$i;
  $376=((($375)+(1))|0);
  $i=$376;
  $377=$j;
  $378=((($377)+(1))|0);
  $j=$378;
 }
 $381=$k;
 STACKTOP=sp;return (($381)|0);
}


function _gcd($i,$j){
 $i=($i)|0;
 $j=($j)|0;
 var $1=0,$2=0,$3=0,$4=0,$6=0,$7=0,$8=0,$9=0,$10=0,$12=0,$14=0,label=0;
 var sp=0;sp=STACKTOP;


 $1=$i;
 $2=$j;
 $3=$2;
 $4=($3|0)!=0;
 if ($4) {
  $6=$2;
  $7=$1;
  $8=$2;
  $9=(((($7|0))%(($8|0)))&-1);
  $10=((_gcd($6,$9))|0);
  $14=$10;
 } else {
  $12=$1;
  $14=$12;
 }

 STACKTOP=sp;return (($14)|0);
}


function _blackman($x,$fcn,$l){
 $x=+($x);
 $fcn=+($fcn);
 $l=($l)|0;
 var $1=.0,$2=.0,$3=.0,$4=0,$bkwn=.0,$x2=.0,$wcn=.0,$5=.0,$6=.0,$7=.0,$8=.0,$9=0,$10=.0,$11=.0,$12=.0,$13=.0,$14=0,$17=.0,$18=0,$21=.0;
 var $22=.0,$23=.0,$24=.0,$25=.0,$26=.0,$27=.0,$28=.0,$29=.0,$30=.0,$31=.0,$32=.0,$33=.0,$34=.0,$35=.0,$36=.0,$37=.0,$38=.0,$39=.0,$40=.0,$41=.0;
 var $42=.0,$43=0,$45=.0,$46=.0,$47=.0,$48=.0,$50=.0,$51=.0,$52=0,$53=.0,$54=.0,$55=.0,$56=.0,$57=.0,$58=.0,$59=.0,$60=.0,$61=0,$62=.0,$63=.0;
 var $64=.0,$65=.0,$66=.0,$67=.0,$68=.0,$70=.0,label=0;
 var sp=0;sp=STACKTOP;







 $2=$x;
 $3=$fcn;
 $4=$l;
 $5=$3;
 $6=$5;
 $7=((3.141592653589793))*($6);
 $8=$7;
 $wcn=$8;
 $9=$4;
 $10=(+((($9|0))|0));
 $11=$2;
 $12=($11)/($10);
 $2=$12;
 $13=$2;
 $14=$13<(0.0);
 if ($14) {
  $2=0.0;
 }
 $17=$2;
 $18=$17>(1.0);
 if ($18) {
  $2=1.0;
 }
 $21=$2;
 $22=$21;
 $23=($22)-((0.5));
 $24=$23;
 $x2=$24;
 $25=$2;
 $26=((2.0))*($25);
 $27=$26;
 $28=($27)*((3.141592653589793));
 $29=(+(Math_cos($28)));
 $30=((0.5))*($29);
 $31=((0.42))-($30);
 $32=$2;
 $33=((4.0))*($32);
 $34=$33;
 $35=($34)*((3.141592653589793));
 $36=(+(Math_cos($35)));
 $37=((0.08))*($36);
 $38=($31)+($37);
 $39=$38;
 $bkwn=$39;
 $40=$x2;
 $41=$40;
 $42=(+(Math_abs((+($41)))));
 $43=$42<(1.0e-9);
 if ($43) {
  $45=$wcn;
  $46=$45;
  $47=($46)/((3.141592653589793));
  $48=$47;
  $1=$48;
  $70=$1;
  STACKTOP=sp;return (+($70));
 } else {
  $50=$bkwn;
  $51=$50;
  $52=$4;
  $53=(+((($52|0))|0));
  $54=$wcn;
  $55=($53)*($54);
  $56=$x2;
  $57=($55)*($56);
  $58=$57;
  $59=(+(Math_sin($58)));
  $60=($51)*($59);
  $61=$4;
  $62=(+((($61|0))|0));
  $63=((3.141592653589793))*($62);
  $64=$x2;
  $65=$64;
  $66=($63)*($65);
  $67=($60)/($66);
  $68=$67;
  $1=$68;
  $70=$1;
  STACKTOP=sp;return (+($70));
 }
  return .0;
}


function _is_lame_global_flags_valid($gfp){
 $gfp=($gfp)|0;
 var $1=0,$2=0,$3=0,$4=0,$7=0,$8=0,$9=0,$10=0,$14=0,label=0;
 var sp=0;sp=STACKTOP;


 $2=$gfp;
 $3=$2;
 $4=($3|0)==0;
 do {
  if ($4) {
   $1=0;
  } else {
   $7=$2;
   $8=(($7)|0);
   $9=((HEAP32[(($8)>>2)])|0);
   $10=($9|0)!=-487877;
   if ($10) {
    $1=0;
    break;
   } else {
    $1=1;
    break;
   }
  }
 } while(0);
 $14=$1;
 STACKTOP=sp;return (($14)|0);
}


function _is_lame_internal_flags_valid($gfc){
 $gfc=($gfc)|0;
 var $1=0,$2=0,$3=0,$4=0,$7=0,$8=0,$9=0,$10=0,$14=0,label=0;
 var sp=0;sp=STACKTOP;


 $2=$gfc;
 $3=$2;
 $4=($3|0)==0;
 do {
  if ($4) {
   $1=0;
  } else {
   $7=$2;
   $8=(($7)|0);
   $9=((HEAP32[(($8)>>2)])|0);
   $10=($9|0)!=-487877;
   if ($10) {
    $1=0;
    break;
   } else {
    $1=1;
    break;
   }
  }
 } while(0);
 $14=$1;
 STACKTOP=sp;return (($14)|0);
}


function _lame_init_params($gfp){
 $gfp=($gfp)|0;
 var $1=0,$2=0,$i=0,$j=0,$gfc=0,$cfg=0,$qval=.0,$d=.0,$q_=.0,$t_=.0,$d1=.0,$lowpass=0,$highpass=0,$a=.0,$b=.0,$m=.0,$a2=.0,$b3=.0,$m4=.0,$a5=.0;
 var $b6=.0,$m7=.0,$size=0,$start=0,$size8=0,$start9=0,$k=0,$vbrmode=0,$m10=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0;
 var $14=0,$15=0,$16=0,$17=0,$18=0,$19=0,$20=0,$21=0,$22=0,$23=0,$25=0,$26=0,$28=0,$29=0,$30=0,$31=0,$33=0,$34=0,$36=0,$37=0;
 var $38=0,$39=0,$40=0,$41=0,$42=0,$43=0,$44=0,$45=0,$46=0,$47=0,$48=0,$49=0,$50=0,$51=0,$52=0,$53=0,$54=0,$55=0,$56=0,$57=0;
 var $58=0,$60=0,$61=0,$62=0,$63=0,$64=0,$65=0,$66=0,$67=0,$68=0,$70=0,$71=0,$72=0,$73=0,$74=0,$76=0,$77=0,$78=0,$79=0,$80=0;
 var $82=0,$83=0,$84=0,$85=0,$86=0,$87=0,$88=0,$89=0,$91=0,$92=0,$93=0,$94=0,$95=0,$97=0,$98=0,$99=0,$100=0,$101=0,$103=0,$104=0;
 var $105=0,$106=0,$107=0,$108=0,$109=0,$110=0,$111=0,$112=0,$113=0,$114=0,$115=0,$116=0,$117=0,$118=0,$119=0,$120=0,$122=0,$123=0,$124=0,$125=0;
 var $126=0,$127=0,$128=0,$129=0,$130=0,$131=0,$133=0,$134=0,$135=0,$136=0,$138=0,$139=0,$140=0,$141=0,$143=0,$144=0,$145=0,$146=0,$149=0,$150=0;
 var $151=0,$152=0,$153=0,$155=0,$156=0,$157=0,$158=0,$159=0,$161=0,$162=0,$163=0,$164=0,$165=0,$167=0,$168=0,$169=0,$171=0,$172=0,$173=0,$174=0;
 var $175=0,$176=0,$177=0,$178=0,$179=0,$180=0,$181=0,$182=0,$183=0,$184=0,$185=0,$186=0,$187=0,$188=0,$189=0,$190=0,$191=0,$192=0,$193=0,$194=0;
 var $195=0,$196=0,$197=0,$198=0,$199=0,$200=0,$201=0,$202=0,$203=0,$204=0,$206=0,$207=0,$209=0,$210=0,$211=0,$212=0,$213=0,$214=0,$215=0,$216=0;
 var $217=0,$218=0,$219=0,$221=0,$222=0,$224=0,$225=0,$226=0,$227=0,$228=0,$229=0,$230=0,$231=0,$232=0,$234=0,$235=0,$236=0,$237=0,$239=0,$240=0;
 var $241=0,$242=0,$244=0,$245=0,$246=0,$247=0,$248=0,$250=0,$251=0,$252=0,$255=0,$256=0,$258=0,$259=0,$260=0,$261=0,$262=0,$263=0,$264=0,$265=0;
 var $266=0,$268=0,$269=0,$270=0,$271=0,$273=0,$274=0,$275=.0,$276=.0,$277=.0,$278=.0,$279=0,$281=0,$282=0,$283=.0,$284=.0,$285=.0,$286=.0,$287=0,$288=0;
 var $289=.0,$290=.0,$291=.0,$292=.0,$293=0,$295=0,$296=0,$297=.0,$298=.0,$299=.0,$300=.0,$301=.0,$302=.0,$303=0,$305=0,$306=0,$309=0,$310=0,$311=0,$312=0;
 var $314=0,$315=0,$316=.0,$317=0,$319=0,$320=0,$321=0,$322=0,$324=0,$325=0,$326=0,$327=.0,$328=.0,$329=0,$330=0,$331=0,$332=0,$334=0,$335=0,$336=0;
 var $337=0,$338=0,$339=0,$340=0,$341=0,$342=.0,$343=0,$344=0,$345=.0,$346=.0,$347=.0,$348=.0,$349=0,$350=0,$351=0,$352=0,$353=0,$354=0,$355=0,$356=0;
 var $357=0,$358=0,$359=0,$360=0,$361=0,$362=0,$363=0,$365=0,$366=0,$367=0,$368=0,$369=0,$370=0,$371=0,$372=0,$373=0,$374=0,$375=0,$376=0,$379=0;
 var $380=0,$381=0,$382=0,$384=0,$385=0,$386=0,$387=0,$389=0,$390=0,$391=0,$392=0,$394=0,$395=0,$396=0,$399=0,$400=0,$401=0,$402=0,$403=0,$404=0;
 var $405=0,$407=0,$408=0,$409=0,$412=0,$413=0,$414=0,$416=0,$417=0,$418=0,$419=0,$421=0,$422=0,$423=0,$424=0,$426=0,$427=0,$428=0,$431=0,$432=0;
 var $433=0,$434=0,$435=0,$436=0,$437=0,$439=0,$440=0,$441=0,$444=0,$445=0,$446=0,$448=0,$449=0,$450=0,$451=0,$453=0,$454=0,$455=0,$458=0,$459=0;
 var $460=0,$461=0,$462=0,$463=0,$464=0,$466=0,$467=0,$468=0,$471=0,$472=0,$473=0,$477=0,$478=0,$479=0,$480=0,$482=0,$483=0,$484=0,$485=0,$487=0;
 var $488=0,$489=0,$490=0,$492=0,$493=0,$494=0,$495=.0,$496=0,$497=0,$498=.0,$499=.0,$501=0,$502=0,$504=0,$505=0,$506=0,$507=0,$508=0,$509=0,$510=0;
 var $511=0,$513=.0,$514=0,$515=0,$516=0,$517=.0,$518=0,$520=.0,$521=0,$522=0,$523=0,$524=.0,$525=.0,$526=.0,$527=.0,$528=0,$529=0,$530=0,$531=.0,$532=.0;
 var $533=.0,$534=.0,$535=0,$536=0,$537=0,$538=.0,$539=0,$540=0,$541=0,$542=.0,$543=.0,$544=.0,$545=0,$546=0,$549=0,$550=0,$551=0,$552=0,$553=0,$554=0;
 var $555=0,$556=0,$558=0,$559=0,$560=0,$561=.0,$562=.0,$563=0,$565=.0,$566=0,$567=0,$568=0,$569=.0,$570=0,$572=0,$573=0,$574=0,$575=.0,$576=0,$577=0;
 var $578=0,$579=.0,$580=.0,$581=0,$582=0,$583=0,$584=.0,$585=0,$586=0,$587=0,$588=.0,$589=.0,$590=0,$591=0,$592=0,$593=.0,$594=.0,$595=.0,$596=0,$597=0;
 var $598=0,$599=.0,$600=.0,$601=.0,$602=.0,$603=.0,$604=.0,$605=.0,$606=.0,$607=0,$608=0,$609=0,$610=.0,$611=0,$612=0,$613=0,$614=.0,$615=.0,$616=.0,$617=0;
 var $618=0,$619=0,$620=0,$621=0,$622=0,$623=0,$624=0,$625=0,$626=0,$627=0,$628=0,$630=0,$631=0,$636=0,$637=0,$640=0,$641=0,$642=0,$643=0,$645=0;
 var $646=0,$647=0,$649=0,$650=0,$651=0,$653=0,$654=0,$655=0,$657=0,$658=0,$659=0,$660=0,$662=0,$663=0,$664=0,$665=0,$667=0,$668=0,$669=0,$670=0;
 var $671=0,$672=.0,$673=0,$674=0,$675=0,$676=0,$677=0,$678=0,$679=.0,$680=0,$681=0,$682=.0,$683=.0,$684=.0,$685=.0,$686=.0,$687=.0,$691=0,$692=0,$693=0;
 var $694=0,$696=0,$697=0,$698=0,$699=0,$701=0,$702=0,$703=0,$704=0,$705=0,$706=.0,$707=0,$708=0,$709=0,$710=0,$711=0,$712=0,$713=.0,$714=0,$715=0;
 var $716=.0,$717=.0,$718=.0,$719=.0,$720=.0,$721=.0,$725=0,$726=0,$727=0,$728=0,$730=0,$731=0,$732=0,$733=0,$735=0,$736=0,$737=0,$738=0,$739=0,$740=.0;
 var $741=0,$742=0,$743=0,$744=0,$745=0,$746=0,$747=.0,$748=0,$749=0,$750=.0,$751=.0,$752=.0,$753=.0,$754=.0,$755=.0,$759=0,$760=0,$761=0,$762=0,$764=0;
 var $765=0,$766=0,$767=0,$769=0,$770=0,$771=0,$772=0,$774=.0,$775=.0,$777=.0,$778=0,$779=0,$780=0,$782=0,$783=0,$784=0,$785=0,$787=0,$788=0,$789=0;
 var $790=0,$791=0,$792=0,$793=0,$794=0,$796=0,$797=0,$798=0,$799=0,$800=0,$801=0,$803=0,$804=0,$805=0,$806=0,$807=0,$808=0,$809=0,$810=0,$811=0;
 var $813=0,$814=0,$815=0,$816=0,$818=0,$819=0,$820=0,$821=0,$823=0,$824=0,$825=0,$826=0,$829=0,$830=0,$831=0,$833=0,$834=0,$835=0,$837=0,$838=0;
 var $839=0,$840=0,$843=0,$844=0,$845=0,$847=0,$848=0,$849=0,$851=0,$852=0,$853=0,$854=0,$855=0,$856=0,$857=0,$858=0,$860=0,$861=0,$862=0,$863=0;
 var $865=0,$866=0,$867=0,$869=0,$870=0,$871=0,$872=0,$873=0,$874=0,$875=0,$877=0,$878=0,$879=0,$880=0,$881=0,$882=0,$883=0,$884=0,$885=.0,$886=0;
 var $887=0,$888=0,$889=.0,$890=.0,$891=.0,$892=.0,$893=0,$894=0,$896=0,$897=0,$898=0,$899=0,$901=0,$902=0,$903=0,$904=0,$905=0,$906=0,$907=0,$908=0;
 var $909=.0,$910=0,$911=0,$912=0,$913=.0,$914=.0,$915=.0,$916=.0,$917=0,$918=0,$920=0,$921=0,$922=0,$923=0,$925=0,$926=0,$927=0,$928=0,$929=0,$930=0;
 var $932=0,$933=0,$934=0,$935=0,$936=0,$937=0,$938=0,$939=0,$940=0,$941=0,$942=0,$943=0,$944=0,$945=0,$947=0,$948=0,$950=0,$951=0,$952=0,$953=0;
 var $955=0,$956=0,$957=0,$958=0,$959=0,$960=0,$961=0,$962=0,$963=0,$965=0,$966=0,$967=0,$970=0,$971=0,$972=0,$973=0,$975=0,$976=0,$977=0,$978=0;
 var $980=0,$981=0,$982=0,$983=0,$985=0,$986=0,$987=0,$988=0,$990=0,$991=0,$992=0,$993=0,$994=0,$995=0,$996=0,$997=0,$998=0,$999=0,$1000=0,$1001=0;
 var $1002=0,$1003=0,$1004=0,$1005=0,$1006=0,$1007=0,$1008=0,$1009=0,$1010=0,$1011=0,$1012=0,$1013=0,$1015=0,$1016=0,$1017=0,$1018=0,$1019=0,$1020=0,$1021=0,$1022=0;
 var $1023=0,$1024=0,$1025=0,$1026=0,$1027=0,$1028=0,$1029=0,$1030=0,$1031=0,$1032=0,$1033=0,$1034=0,$1035=0,$1036=0,$1037=0,$1038=0,$1039=0,$1040=0,$1041=0,$1042=0;
 var $1043=0,$1044=0,$1045=0,$1046=0,$1047=0,$1048=0,$1049=0,$1050=0,$1051=0,$1052=0,$1054=0,$1055=0,$1056=0,$1057=0,$1058=.0,$1059=0,$1060=0,$1062=0,$1063=0,$1064=0;
 var $1065=0,$1066=0,$1067=0,$1068=0,$1069=0,$1070=.0,$1071=0,$1072=0,$1073=0,$1074=.0,$1075=.0,$1076=.0,$1077=.0,$1078=0,$1079=0,$1081=0,$1082=0,$1083=0,$1084=0,$1085=0;
 var $1086=0,$1087=0,$1088=0,$1089=.0,$1090=0,$1091=0,$1092=0,$1093=.0,$1094=.0,$1095=.0,$1096=.0,$1097=0,$1098=0,$1100=0,$1101=0,$1102=0,$1103=0,$1105=0,$1106=0,$1108=0;
 var $1109=0,$1110=0,$1111=0,$1112=0,$1113=0,$1114=0,$1115=0,$1116=0,$1118=0,$1119=0,$1120=0,$1121=.0,$1122=.0,$1123=.0,$1124=0,$1125=0,$1126=0,$1127=0,$1128=0,$1129=0;
 var $1131=0,$1132=0,$1133=0,$1134=0,$1135=0,$1136=0,$1137=0,$1138=.0,$1139=.0,$1140=.0,$1141=0,$1142=0,$1144=0,$1145=0,$1146=0,$1147=.0,$1148=.0,$1149=.0,$1150=0,$1151=0;
 var $1153=0,$1154=0,$1155=0,$1156=.0,$1157=0,$1158=0,$1159=.0,$1160=.0,$1161=0,$1162=0,$1163=0,$1164=.0,$1165=0,$1166=0,$1167=.0,$1168=.0,$1170=0,$1171=0,$1172=0,$1173=0;
 var $1175=0,$1176=0,$1177=0,$1178=0,$1179=0,$1180=0,$1181=0,$1182=0,$1184=0,$1185=0,$1186=0,$1187=0,$1188=0,$1189=0,$1190=0,$1191=0,$1193=0,$1194=0,$1195=0,$1196=.0;
 var $1197=.0,$1198=.0,$1199=0,$1200=0,$1201=0,$1202=0,$1203=0,$1204=0,$1206=0,$1207=0,$1208=0,$1209=0,$1210=0,$1211=0,$1212=0,$1213=.0,$1214=.0,$1215=.0,$1216=0,$1217=0;
 var $1218=0,$1219=0,$1220=.0,$1221=0,$1223=0,$1224=0,$1227=0,$1228=0,$1229=0,$1230=.0,$1231=.0,$1232=.0,$1233=0,$1234=0,$1236=0,$1237=0,$1238=0,$1239=.0,$1240=0,$1241=0;
 var $1242=.0,$1243=.0,$1244=0,$1245=0,$1246=0,$1247=.0,$1248=0,$1249=0,$1250=.0,$1251=.0,$1253=0,$1254=0,$1255=0,$1256=0,$1257=0,$1258=0,$1259=0,$1260=0,$1261=0,$1262=0;
 var $1263=0,$1264=0,$1265=0,$1267=0,$1268=0,$1269=0,$1271=0,$1272=0,$1273=0,$1274=0,$1276=0,$1277=0,$1278=0,$1279=0,$1281=0,$1282=0,$1283=0,$1285=0,$1286=0,$1287=0;
 var $1288=0,$1289=0,$1290=0,$1291=0,$1292=0,$1293=0,$1294=0,$1295=0,$1296=0,$1297=0,$1298=0,$1299=0,$1300=0,$1301=0,$1302=0,$1303=0,$1304=0,$1305=0,$1306=0,$1307=0;
 var $1308=0,$1309=0,$1310=0,$1311=0,$1312=0,$1313=0,$1314=0,$1316=0,$1317=0,$1318=0,$1322=0,$1323=0,$1324=0,$1326=0,$1327=0,$1328=0,$1329=0,$1330=0,$1331=0,$1332=0;
 var $1333=0,$1334=0,$1335=0,$1336=0,$1337=0,$1338=0,$1339=0,$1340=0,$1341=0,$1343=0,$1344=0,$1346=0,$1347=0,$1348=0,$1349=0,$1350=0,$1351=0,$1352=0,$1353=0,$1354=0;
 var $1355=0,$1356=0,$1358=0,$1359=0,$1362=0,$1363=0,$1365=0,$1366=0,$1367=0,$1368=0,$1369=0,$1370=0,$1371=0,$1372=0,$1373=0,$1374=0,$1375=0,$1376=0,$1377=0,$1378=0;
 var $1379=0,$1380=0,$1381=0,$1382=0,$1383=0,$1384=0,$1385=0,$1386=0,$1387=0,$1388=0,$1389=0,$1390=0,$1391=0,$1393=0,$1394=0,$1396=0,$1397=0,$1398=0,$1399=0,$1401=0;
 var $1402=0,$1404=0,$1405=0,$1406=0,$1407=0,$1408=0,$1409=0,$1410=0,$1411=0,$1412=0,$1413=0,$1414=0,$1416=0,$1417=0,$1420=0,$1421=0,$1423=0,$1424=0,$1425=0,$1426=0;
 var $1427=0,$1428=0,$1429=0,$1430=0,$1431=0,$1432=0,$1433=0,$1434=0,$1435=0,$1436=0,$1437=0,$1438=0,$1439=0,$1440=0,$1441=0,$1442=0,$1443=0,$1444=0,$1445=0,$1446=0;
 var $1447=0,$1448=0,$1449=0,$1451=0,$1452=0,$1454=0,$1455=0,$1456=0,$1457=0,$1458=0,$1459=0,$1460=0,$1461=0,$1463=0,$1464=0,$1465=0,$1466=0,$1467=0,$1468=0,$1469=0;
 var $1471=0,$1472=0,$1473=0,$1474=0,$1475=0,$1476=0,$1477=0,$1479=0,$1480=0,$1481=0,$1482=0,$1484=0,$1485=0,$1486=0,$1487=0,$1489=0,$1490=0,$1492=0,$1493=0,$1495=0;
 var $1496=0,$1497=0,$1498=0,$1499=0,$1500=0,$1501=0,$1502=0,$1503=.0,$1504=0,$1505=0,$1506=0,$1507=0,$1508=0,$1510=0,$1511=0,$1513=0,$1514=0,$1515=0,$1516=0,$1518=0;
 var $1519=0,$1521=0,$1522=0,$1523=0,$1525=0,$1526=0,$1527=0,$1528=0,$1530=0,$1531=0,$1533=0,$1534=0,$1535=0,$1536=0,$1538=0,$1539=0,$1541=0,$1542=0,$1543=0,$1544=0;
 var $1545=0,$1546=0,$1547=0,$1548=0,$1549=0,$1550=0,$1551=0,$1553=0,$1554=0,$1556=0,$1557=0,$1558=0,$1559=0,$1561=0,$1562=0,$1564=0,$1565=0,$1566=0,$1567=0,$1569=0;
 var $1570=0,$1572=0,$1573=0,$1574=0,$1575=0,$1577=0,$1578=0,$1579=0,$1581=0,$1582=0,$1583=0,$1584=0,$1585=0,$1586=0,$1587=0,$1588=0,$1590=0,$1591=0,$1593=0,$1594=0;
 var $1595=0,$1596=0,$1597=0,$1598=0,$1599=0,$1600=0,$1601=0,$1602=0,$1603=0,$1605=0,$1606=0,$1607=0,$1609=0,$1610=0,$1611=0,$1612=0,$1613=0,$1614=0,$1615=0,$1616=0;
 var $1618=0,$1619=0,$1620=0,$1621=0,$1623=0,$1624=0,$1626=0,$1627=0,$1628=0,$1629=0,$1631=0,$1632=0,$1634=0,$1635=0,$1637=0,$1638=0,$1639=0,$1640=0,$1641=0,$1642=0;
 var $1643=0,$1645=0,$1646=0,$1648=0,$1649=0,$1650=0,$1651=0,$1652=0,$1654=0,$1655=0,$1656=0,$1657=0,$1658=0,$1660=0,$1661=0,$1662=0,$1663=0,$1664=0,$1665=0,$1666=0;
 var $1667=0,$1668=0,$1669=0,$1671=0,$1672=0,$1674=0,$1675=0,$1678=0,$1679=0,$1680=.0,$1681=0,$1682=0,$1683=0,$1684=0,$1685=0,$1686=.0,$1687=0,$1688=0,$1689=0,$1690=0;
 var $1691=0,$1692=0,$1693=0,$1695=0,$1696=0,$1697=.0,$1698=0,$1699=0,$1700=0,$1701=.0,$1702=.0,$1703=0,$1704=0,$1705=.0,$1706=0,$1707=0,$1708=0,$1709=.0,$1710=.0,$1712=0;
 var $1713=0,$1714=0,$1715=0,$1717=0,$1718=0,$1719=0,$1720=0,$1721=0,$1722=0,$1723=0,$1724=0,$1726=0,$1727=0,$1729=0,$1730=0,$1731=0,$1732=0,$1734=0,$1735=0,$1736=0;
 var $1737=0,$1738=0,$1739=0,$1740=0,$1741=0,$1742=0,$1743=0,$1744=0,$1745=0,$1746=0,$1747=0,$1748=0,$1749=0,$1750=0,$1751=0,$1752=0,$1753=0,$1754=0,$1755=0,$1756=0;
 var $1757=0,$1758=0,$1759=0,$1760=0,$1761=0,$1765=0,$1766=0,$1767=0,$1768=0,$1770=0,$1771=0,$1772=0,$1773=0,$1774=0,$1775=0,$1776=0,$1777=0,$1778=0,$1779=0,$1780=0;
 var $1781=0,$1782=0,$1783=0,$1784=0,$1785=0,$1786=0,$1787=0,$1788=0,$1789=0,$1790=0,$1791=0,$1792=0,$1793=0,$1794=0,$1795=0,$1796=0,$1797=0,$1801=0,$1802=0,$1803=0;
 var $1804=0,$1805=0,$1806=0,$1807=0,$1808=0,$1809=0,$1810=0,$1811=0,$1812=0,$1813=0,$1814=0,$1815=0,$1816=0,$1817=0,$1818=0,$1819=0,$1820=0,$1821=0,$1822=0,$1823=0;
 var $1824=0,$1825=0,$1826=0,$1827=0,$1828=0,$1829=0,$1830=0,$1831=0,$1832=0,$1833=0,$1834=0,$1835=0,$1837=0,$1838=0,$1839=0,$1840=0,$1841=0,$1842=0,$1843=0,$1844=0;
 var $1845=0,$1847=0,$1848=0,$1849=0,$1851=0,$1852=0,$1853=0,$1854=0,$1855=0,$1856=0,$1857=0,$1858=0,$1859=0,$1860=0,$1861=0,$1862=0,$1863=0,$1864=0,$1865=0,$1866=0;
 var $1868=0,$1869=0,$1870=0,$1871=0,$1872=0,$1873=0,$1874=0,$1875=0,$1876=0,$1878=0,$1879=0,$1880=0,$1882=0,$1883=0,$1884=0,$1886=0,$1887=0,$1888=0,$1889=0,$1890=0;
 var $1891=0,$1892=0,$1893=0,$1894=0,$1895=0,$1896=0,$1897=0,$1898=0,$1899=0,$1900=0,$1901=0,$1902=0,$1903=0,$1904=0,$1905=0,$1906=0,$1907=0,$1908=0,$1909=0,$1910=0;
 var $1911=0,$1912=0,$1913=0,$1914=0,$1915=0,$1916=0,$1917=0,$1918=0,$1919=0,$1920=0,$1921=0,$1922=0,$1923=0,$1924=0,$1925=0,$1926=0,$1927=0,$1928=0,$1929=0,$1930=0;
 var $1931=0,$1932=0,$1933=0,$1934=.0,$1935=0,$1936=0,$1937=0,$1938=0,$1939=0,$1940=0,$1941=0,$1943=0,$1944=0,$1945=0,$1946=0,$1948=0,$1949=0,$1950=0,$1951=0,$1952=0;
 var $1953=0,$1954=0,$1956=0,$1957=0,$1958=.0,$1959=.0,$1960=.0,$1961=.0,$1962=.0,$1963=0,$1964=0,$1965=0,$1966=0,$1967=0,$1968=0,$1969=0,$1970=0,$1972=0,$1973=0,$1975=0;
 var $1976=0,$1977=0,$1978=0,$1980=0,$1981=0,$1982=0,$1983=0,$1985=0,$1986=0,$1987=0,$1988=0,$1990=0,$1991=0,$1993=0,$1994=0,$1995=0,$1996=0,$1997=0,$1998=0,$1999=0;
 var $2000=0,$2002=0,$2003=0,$2005=0,$2006=0,$2007=0,$2009=0,$2010=0,$2012=0,$2013=.0,$2014=0,$2016=0,$2018=0,$2019=0,$2020=0,$2021=0,$2022=0,$2023=0,$2024=0,$2025=0;
 var $2026=0,$2028=0,$2029=0,$2031=0,$2032=0,$2033=.0,$2034=0,$2036=0,$2037=0,$2039=0,$2040=0,$2041=.0,$2042=0,$2044=0,$2045=0,$2047=0,$2048=0,$2049=0,$2050=0,$2052=0;
 var $2053=0,$2055=0,$2056=0,$2057=.0,$2058=0,$2059=0,$2060=0,$2061=0,$2062=.0,$2063=0,$2064=0,$2065=0,$2066=0,$2067=.0,$2068=.0,$2069=0,$2070=0,$2071=0,$2072=0,$2073=.0;
 var $2074=.0,$2075=.0,$2076=0,$2077=0,$2078=0,$2079=0,$2080=.0,$2081=0,$2082=0,$2083=0,$2084=0,$2085=0,$2086=0,$2087=0,$2088=0,$2089=0,$2090=0,$2091=0,$2092=0,$2093=0;
 var $2094=0,$2095=0,$2096=0,$2097=0,$2098=0,$2099=0,$2100=0,$2101=0,$2102=0,$2103=0,$2104=0,$2105=0,$2106=0,$2107=0,$2108=0,$2109=0,$2110=0,$2111=0,$2112=0,$2113=0;
 var $2114=0,$2115=0,$2116=0,$2117=0,$2118=0,$2119=0,$2120=0,$2121=0,$2122=0,$2123=0,$2124=0,$2125=0,$2126=0,$2127=0,$2128=0,$2129=.0,$2130=0,$2131=0,$2132=0,$2133=0;
 var $2134=.0,$2135=0,$2137=0,$2138=0,$2139=.0,$2140=.0,$2142=0,$2143=0,$2144=.0,$2145=.0,$2146=0,$2147=0,$2148=0,$2149=0,$2150=0,$2151=.0,$2152=0,$2153=0,$2154=0,$2155=0;
 var $2156=.0,$2157=0,$2159=0,$2160=0,$2161=.0,$2162=.0,$2164=0,$2165=0,$2166=.0,$2167=.0,$2168=0,$2169=0,$2170=0,$2171=0,$2172=0,$2173=.0,$2174=0,$2175=0,$2176=0,$2177=0;
 var $2178=.0,$2179=0,$2181=0,$2182=0,$2183=.0,$2184=.0,$2186=0,$2187=0,$2188=.0,$2189=.0,$2190=0,$2191=0,$2192=0,$2193=0,$2194=0,$2195=.0,$2196=0,$2197=0,$2198=0,$2199=0;
 var $2200=.0,$2201=0,$2203=0,$2204=0,$2205=.0,$2206=.0,$2208=0,$2209=0,$2210=.0,$2211=.0,$2212=0,$2213=0,$2214=.0,$2215=0,$2216=0,$2217=.0,$2218=.0,$2219=0,$2220=0,$2221=0;
 var $2222=.0,$2223=0,$2224=0,$2225=.0,$2226=.0,$2227=0,$2228=0,$2229=.0,$2230=0,$2231=0,$2232=.0,$2233=.0,$2234=0,$2235=0,$2236=.0,$2237=0,$2238=0,$2239=.0,$2240=.0,$2241=0;
 var $2242=0,$2243=.0,$2244=0,$2245=0,$2246=.0,$2247=.0,$2248=0,$2249=0,$2250=.0,$2251=0,$2252=0,$2253=.0,$2254=.0,$2255=0,$2256=0,$2257=.0,$2258=0,$2259=0,$2260=.0,$2261=.0;
 var $2262=0,$2263=0,$2264=.0,$2265=0,$2266=0,$2267=.0,$2268=.0,$2269=0,$2270=0,$2271=.0,$2272=0,$2273=0,$2274=.0,$2275=.0,$2276=0,$2277=0,$2278=0,$2279=0,$2281=0,$2282=0;
 var $2283=0,$2284=0,$2286=0,$2287=0,$2288=.0,$2289=0,$2290=0,$2291=.0,$2292=.0,$2293=.0,$2294=0,$2295=0,$2296=0,$2297=0,$2298=.0,$2299=0,$2300=0,$2301=.0,$2302=.0,$2303=.0;
 var $2304=0,$2305=0,$2306=0,$2307=0,$2308=0,$2309=0,$2311=0,$2312=0,$2313=.0,$2314=0,$2315=0,$2316=0,$2317=0,$2318=0,$2319=0,$2320=.0,$2321=0,$2322=0,$2323=0,$2324=0;
 var $2325=0,$2326=0,$2327=.0,$2328=0,$2329=0,$2330=0,$2331=0,$2332=0,$2333=0,$2334=.0,$2335=0,$2336=0,$2337=0,$2338=0,$2339=0,$2340=0,$2341=0,$2342=0,$2343=0,$2344=0;
 var $2345=0,$2346=0,$2347=0,$2348=0,$2350=0,$2351=0,$2352=0,$2353=0,$2354=0,$2355=0,$2356=0,$2357=0,$2358=0,$2359=0,$2360=0,$2361=0,$2362=0,$2363=0,$2364=0,$2365=0;
 var $2366=0,$2367=0,$2368=0,$2370=0,$2371=0,$2372=0,$2373=0,$2374=0,$2375=0,$2376=0,$2377=0,$2378=0,$2379=0,$2380=0,$2381=0,$2383=0,label=0;
 var sp=0;sp=STACKTOP;STACKTOP=(STACKTOP+32)|0;











 $lowpass=((sp)|0);
 $highpass=(((sp)+(8))|0);















 $m10=(((sp)+(16))|0);
 $2=$gfp;
 $3=$2;
 $4=(($3+288)|0);
 $5=((HEAP32[(($4)>>2)])|0);
 $gfc=$5;
 $6=$gfc;
 $7=(($6+16)|0);
 $cfg=$7;
 $8=$gfc;
 $9=(($8)|0);
 HEAP32[(($9)>>2)]=0;
 $10=$2;
 $11=(($10+180)|0);
 $12=((HEAP32[(($11)>>2)])|0);
 $13=$cfg;
 $14=(($13+108)|0);
 HEAP32[(($14)>>2)]=$12;
 $15=$2;
 $16=(($15+32)|0);
 $17=((HEAP32[(($16)>>2)])|0);
 $18=$cfg;
 $19=(($18+124)|0);
 HEAP32[(($19)>>2)]=$17;
 $20=$cfg;
 $21=(($20+124)|0);
 $22=((HEAP32[(($21)>>2)])|0);
 $23=($22|0)!=0;
 if ($23) {
  $25=$2;
  $26=(($25+36)|0);
  HEAP32[(($26)>>2)]=0;
 }
 $28=$gfc;
 $29=(($28+85804)|0);
 $30=((HEAP32[(($29)>>2)])|0);
 $31=($30|0)!=0;
 if ($31) {
  $33=$2;
  $34=(($33+36)|0);
  HEAP32[(($34)>>2)]=0;
 }
 $36=$2;
 $37=(($36+272)|0);
 $38=(($37)|0);
 $39=((HEAP32[(($38)>>2)])|0);
 $40=$gfc;
 $41=(($40+85828)|0);
 HEAP32[(($41)>>2)]=$39;
 $42=$2;
 $43=(($42+272)|0);
 $44=(($43+4)|0);
 $45=((HEAP32[(($44)>>2)])|0);
 $46=$gfc;
 $47=(($46+85832)|0);
 HEAP32[(($47)>>2)]=$45;
 $48=$2;
 $49=(($48+272)|0);
 $50=(($49+8)|0);
 $51=((HEAP32[(($50)>>2)])|0);
 $52=$gfc;
 $53=(($52+85836)|0);
 HEAP32[(($53)>>2)]=$51;
 $54=$2;
 $55=(($54+292)|0);
 $56=(($55+4)|0);
 $57=((HEAP32[(($56)>>2)])|0);
 $58=($57|0)!=0;
 if ($58) {
  $60=((_has_3DNow())|0);
  $61=$gfc;
  $62=(($61+85756)|0);
  $63=$62;
  $64=((HEAP32[(($63)>>2)])|0);
  $65=$60&1;
  $66=$65<<1;
  $67=$64&-3;
  $68=$67|$66;
  HEAP32[(($63)>>2)]=$68;
 } else {
  $70=$gfc;
  $71=(($70+85756)|0);
  $72=$71;
  $73=((HEAP32[(($72)>>2)])|0);
  $74=$73&-3;
  HEAP32[(($72)>>2)]=$74;
 }
 $76=$2;
 $77=(($76+292)|0);
 $78=(($77)|0);
 $79=((HEAP32[(($78)>>2)])|0);
 $80=($79|0)!=0;
 if ($80) {
  $82=((_has_MMX())|0);
  $83=$gfc;
  $84=(($83+85756)|0);
  $85=$84;
  $86=((HEAP32[(($85)>>2)])|0);
  $87=$82&1;
  $88=$86&-2;
  $89=$88|$87;
  HEAP32[(($85)>>2)]=$89;
 } else {
  $91=$gfc;
  $92=(($91+85756)|0);
  $93=$92;
  $94=((HEAP32[(($93)>>2)])|0);
  $95=$94&-2;
  HEAP32[(($93)>>2)]=$95;
 }
 $97=$2;
 $98=(($97+292)|0);
 $99=(($98+8)|0);
 $100=((HEAP32[(($99)>>2)])|0);
 $101=($100|0)!=0;
 if ($101) {
  $103=((_has_SSE())|0);
  $104=$gfc;
  $105=(($104+85756)|0);
  $106=$105;
  $107=((HEAP32[(($106)>>2)])|0);
  $108=$103&1;
  $109=$108<<2;
  $110=$107&-5;
  $111=$110|$109;
  HEAP32[(($106)>>2)]=$111;
  $112=((_has_SSE2())|0);
  $113=$gfc;
  $114=(($113+85756)|0);
  $115=$114;
  $116=((HEAP32[(($115)>>2)])|0);
  $117=$112&1;
  $118=$117<<3;
  $119=$116&-9;
  $120=$119|$118;
  HEAP32[(($115)>>2)]=$120;
 } else {
  $122=$gfc;
  $123=(($122+85756)|0);
  $124=$123;
  $125=((HEAP32[(($124)>>2)])|0);
  $126=$125&-5;
  HEAP32[(($124)>>2)]=$126;
  $127=$gfc;
  $128=(($127+85756)|0);
  $129=$128;
  $130=((HEAP32[(($129)>>2)])|0);
  $131=$130&-9;
  HEAP32[(($129)>>2)]=$131;
 }
 $133=$gfc;
 $134=(($133+85796)|0);
 $135=((HEAP32[(($134)>>2)])|0);
 $136=0==($135|0);
 if ($136) {
  $138=((_calloc(1,2772))|0);
  $139=$138;
  $140=$gfc;
  $141=(($140+85796)|0);
  HEAP32[(($141)>>2)]=$139;
 }
 $143=$gfc;
 $144=(($143+85796)|0);
 $145=((HEAP32[(($144)>>2)])|0);
 $146=0==($145|0);
 if ($146) {
  $1=-2;
  $2383=$1;
  STACKTOP=sp;return (($2383)|0);
 }
 $149=$gfc;
 $150=(($149+85676)|0);
 $151=(($150)|0);
 $152=((HEAP32[(($151)>>2)])|0);
 $153=0==($152|0);
 if ($153) {
  $155=((_calloc(1,134792))|0);
  $156=$155;
  $157=$gfc;
  $158=(($157+85676)|0);
  $159=(($158)|0);
  HEAP32[(($159)>>2)]=$156;
 }
 $161=$gfc;
 $162=(($161+85676)|0);
 $163=(($162)|0);
 $164=((HEAP32[(($163)>>2)])|0);
 $165=0==($164|0);
 if ($165) {
  $167=$gfc;
  _freegfc($167);
  $168=$2;
  $169=(($168+288)|0);
  HEAP32[(($169)>>2)]=0;
  $1=-2;
  $2383=$1;
  STACKTOP=sp;return (($2383)|0);
 }
 $171=$2;
 $172=(($171+120)|0);
 $173=((HEAP32[(($172)>>2)])|0);
 $174=$cfg;
 $175=(($174+144)|0);
 HEAP32[(($175)>>2)]=$173;
 $176=$2;
 $177=(($176+104)|0);
 $178=((HEAP32[(($177)>>2)])|0);
 $179=$cfg;
 $180=(($179+148)|0);
 HEAP32[(($180)>>2)]=$178;
 $181=$2;
 $182=(($181+108)|0);
 $183=((HEAP32[(($182)>>2)])|0);
 $184=$cfg;
 $185=(($184+152)|0);
 HEAP32[(($185)>>2)]=$183;
 $186=$2;
 $187=(($186+112)|0);
 $188=((HEAP32[(($187)>>2)])|0);
 $189=$cfg;
 $190=(($189+156)|0);
 HEAP32[(($190)>>2)]=$188;
 $191=$2;
 $192=(($191+116)|0);
 $193=((HEAP32[(($192)>>2)])|0);
 $194=$cfg;
 $195=(($194+160)|0);
 HEAP32[(($195)>>2)]=$193;
 $196=$2;
 $197=(($196+8)|0);
 $198=((HEAP32[(($197)>>2)])|0);
 $199=$cfg;
 $200=(($199+52)|0);
 HEAP32[(($200)>>2)]=$198;
 $201=$cfg;
 $202=(($201+52)|0);
 $203=((HEAP32[(($202)>>2)])|0);
 $204=($203|0)==1;
 if ($204) {
  $206=$2;
  $207=(($206+48)|0);
  HEAP32[(($207)>>2)]=3;
 }
 $209=$2;
 $210=(($209+48)|0);
 $211=((HEAP32[(($210)>>2)])|0);
 $212=($211|0)==3;
 $213=($212?1:2);
 $214=$cfg;
 $215=(($214+56)|0);
 HEAP32[(($215)>>2)]=$213;
 $216=$2;
 $217=(($216+48)|0);
 $218=((HEAP32[(($217)>>2)])|0);
 $219=($218|0)==3;
 if ($219) {
  $221=$2;
  $222=(($221+52)|0);
  HEAP32[(($222)>>2)]=0;
 }
 $224=$2;
 $225=(($224+52)|0);
 $226=((HEAP32[(($225)>>2)])|0);
 $227=$cfg;
 $228=(($227+64)|0);
 HEAP32[(($228)>>2)]=$226;
 $229=$2;
 $230=(($229+156)|0);
 $231=((HEAP32[(($230)>>2)])|0);
 $232=($231|0)==0;
 do {
  if ($232) {
   $234=$2;
   $235=(($234+168)|0);
   $236=((HEAP32[(($235)>>2)])|0);
   $237=($236|0)!=128;
   if (!($237)) {
    break;
   }
   $239=$2;
   $240=(($239+96)|0);
   $241=((HEAP32[(($240)>>2)])|0);
   $242=($241|0)==0;
   if (!($242)) {
    break;
   }
   $244=$2;
   $245=(($244+168)|0);
   $246=((HEAP32[(($245)>>2)])|0);
   $247=$2;
   $248=(($247+96)|0);
   HEAP32[(($248)>>2)]=$246;
  }
 } while(0);
 $250=$2;
 $251=(($250+156)|0);
 $252=((HEAP32[(($251)>>2)])|0);
 if (((($252|0))|0)==((0)|0)|((($252|0))|0)==((4)|0)|((($252|0))|0)==((1)|0)) {
 } else {
  $255=$2;
  $256=(($255+56)|0);
  HEAP32[(($256)>>2)]=0;
 }
 $258=$2;
 $259=(($258+56)|0);
 $260=((HEAP32[(($259)>>2)])|0);
 $261=$cfg;
 $262=(($261+136)|0);
 HEAP32[(($262)>>2)]=$260;
 $263=$2;
 $264=(($263+156)|0);
 $265=((HEAP32[(($264)>>2)])|0);
 $266=($265|0)==0;
 do {
  if ($266) {
   $268=$2;
   $269=(($268+96)|0);
   $270=((HEAP32[(($269)>>2)])|0);
   $271=($270|0)==0;
   if (!($271)) {
    break;
   }
   $273=$2;
   $274=(($273+100)|0);
   $275=(+(HEAPF32[(($274)>>2)]));
   $276=$275;
   $277=(+(Math_abs((+($276)))));
   $278=(+(Math_abs(0.0)));
   $279=$277>$278;
   if ($279) {
    $281=$2;
    $282=(($281+100)|0);
    $283=(+(HEAPF32[(($282)>>2)]));
    $284=($283)-((0.0));
    $285=$284;
    $286=(+(Math_abs((+($285)))));
    $287=$2;
    $288=(($287+100)|0);
    $289=(+(HEAPF32[(($288)>>2)]));
    $290=$289;
    $291=(+(Math_abs((+($290)))));
    $292=($291)*((9.999999974752427e-7));
    $293=$286<=$292;
    if ($293) {
     label = 38;
    }
   } else {
    $295=$2;
    $296=(($295+100)|0);
    $297=(+(HEAPF32[(($296)>>2)]));
    $298=($297)-((0.0));
    $299=$298;
    $300=(+(Math_abs((+($299)))));
    $301=(+(Math_abs(0.0)));
    $302=($301)*((9.999999974752427e-7));
    $303=$300<=$302;
    if ($303) {
     label = 38;
    }
   }
   if ((label|0) == 38) {
    $305=$2;
    $306=(($305+100)|0);
    HEAPF32[(($306)>>2)]=11.024999618530273;
   }
  }
 } while(0);
 $309=$2;
 $310=(($309+156)|0);
 $311=((HEAP32[(($310)>>2)])|0);
 $312=($311|0)==0;
 do {
  if ($312) {
   $314=$2;
   $315=(($314+100)|0);
   $316=(+(HEAPF32[(($315)>>2)]));
   $317=$316>(0.0);
   if (!($317)) {
    break;
   }
   $319=$2;
   $320=(($319+16)|0);
   $321=((HEAP32[(($320)>>2)])|0);
   $322=($321|0)==0;
   if ($322) {
    $324=$2;
    $325=(($324+12)|0);
    $326=((HEAP32[(($325)>>2)])|0);
    $327=(+((($326|0))|0));
    $328=((0.97))*($327);
    $329=(~~($328));
    $330=((_map2MP3Frequency($329))|0);
    $331=$2;
    $332=(($331+16)|0);
    HEAP32[(($332)>>2)]=$330;
   }
   $334=$2;
   $335=(($334+16)|0);
   $336=((HEAP32[(($335)>>2)])|0);
   $337=($336<<4);
   $338=$cfg;
   $339=(($338+56)|0);
   $340=((HEAP32[(($339)>>2)])|0);
   $341=(Math_imul($337,$340)|0);
   $342=(+((($341|0))|0));
   $343=$2;
   $344=(($343+100)|0);
   $345=(+(HEAPF32[(($344)>>2)]));
   $346=$345;
   $347=((1000.0))*($346);
   $348=($342)/($347);
   $349=(~~($348));
   $350=$2;
   $351=(($350+96)|0);
   HEAP32[(($351)>>2)]=$349;
   $352=$2;
   $353=(($352+16)|0);
   $354=((HEAP32[(($353)>>2)])|0);
   $355=$cfg;
   $356=(($355)|0);
   $357=((_SmpFrqIndex($354,$356))|0);
   $358=$cfg;
   $359=(($358+4)|0);
   HEAP32[(($359)>>2)]=$357;
   $360=$cfg;
   $361=(($360+136)|0);
   $362=((HEAP32[(($361)>>2)])|0);
   $363=($362|0)!=0;
   if (!($363)) {
    $365=$2;
    $366=(($365+96)|0);
    $367=((HEAP32[(($366)>>2)])|0);
    $368=$cfg;
    $369=(($368)|0);
    $370=((HEAP32[(($369)>>2)])|0);
    $371=$2;
    $372=(($371+16)|0);
    $373=((HEAP32[(($372)>>2)])|0);
    $374=((_FindNearestBitrate($367,$370,$373))|0);
    $375=$2;
    $376=(($375+96)|0);
    HEAP32[(($376)>>2)]=$374;
   }
  }
 } while(0);
 $379=$2;
 $380=(($379+16)|0);
 $381=((HEAP32[(($380)>>2)])|0);
 $382=($381|0)!=0;
 if ($382) {
  $384=$2;
  $385=(($384+16)|0);
  $386=((HEAP32[(($385)>>2)])|0);
  $387=($386|0)<16000;
  if ($387) {
   $389=$2;
   $390=(($389+168)|0);
   $391=((HEAP32[(($390)>>2)])|0);
   $392=($391|0)>8;
   if ($392) {
    $394=$2;
    $395=(($394+168)|0);
    $396=((HEAP32[(($395)>>2)])|0);
    $399=$396;
   } else {
    $399=8;
   }

   $400=$2;
   $401=(($400+168)|0);
   HEAP32[(($401)>>2)]=$399;
   $402=$2;
   $403=(($402+168)|0);
   $404=((HEAP32[(($403)>>2)])|0);
   $405=($404|0)<64;
   if ($405) {
    $407=$2;
    $408=(($407+168)|0);
    $409=((HEAP32[(($408)>>2)])|0);
    $412=$409;
   } else {
    $412=64;
   }

   $413=$2;
   $414=(($413+168)|0);
   HEAP32[(($414)>>2)]=$412;
  } else {
   $416=$2;
   $417=(($416+16)|0);
   $418=((HEAP32[(($417)>>2)])|0);
   $419=($418|0)<32000;
   if ($419) {
    $421=$2;
    $422=(($421+168)|0);
    $423=((HEAP32[(($422)>>2)])|0);
    $424=($423|0)>8;
    if ($424) {
     $426=$2;
     $427=(($426+168)|0);
     $428=((HEAP32[(($427)>>2)])|0);
     $431=$428;
    } else {
     $431=8;
    }

    $432=$2;
    $433=(($432+168)|0);
    HEAP32[(($433)>>2)]=$431;
    $434=$2;
    $435=(($434+168)|0);
    $436=((HEAP32[(($435)>>2)])|0);
    $437=($436|0)<160;
    if ($437) {
     $439=$2;
     $440=(($439+168)|0);
     $441=((HEAP32[(($440)>>2)])|0);
     $444=$441;
    } else {
     $444=160;
    }

    $445=$2;
    $446=(($445+168)|0);
    HEAP32[(($446)>>2)]=$444;
   } else {
    $448=$2;
    $449=(($448+168)|0);
    $450=((HEAP32[(($449)>>2)])|0);
    $451=($450|0)>32;
    if ($451) {
     $453=$2;
     $454=(($453+168)|0);
     $455=((HEAP32[(($454)>>2)])|0);
     $458=$455;
    } else {
     $458=32;
    }

    $459=$2;
    $460=(($459+168)|0);
    HEAP32[(($460)>>2)]=$458;
    $461=$2;
    $462=(($461+168)|0);
    $463=((HEAP32[(($462)>>2)])|0);
    $464=($463|0)<320;
    if ($464) {
     $466=$2;
     $467=(($466+168)|0);
     $468=((HEAP32[(($467)>>2)])|0);
     $471=$468;
    } else {
     $471=320;
    }

    $472=$2;
    $473=(($472+168)|0);
    HEAP32[(($473)>>2)]=$471;
   }
  }
 }
 $477=$2;
 $478=(($477+16)|0);
 $479=((HEAP32[(($478)>>2)])|0);
 $480=($479|0)==0;
 do {
  if ($480) {
   $482=$2;
   $483=(($482+156)|0);
   $484=((HEAP32[(($483)>>2)])|0);
   $485=($484|0)==1;
   if (!($485)) {
    $487=$2;
    $488=(($487+156)|0);
    $489=((HEAP32[(($488)>>2)])|0);
    $490=($489|0)==4;
    if (!($490)) {
     break;
    }
   }
   $492=$2;
   $493=(($492+164)|0);
   $494=((HEAP32[(($493)>>2)])|0);
   $495=(+((($494|0))|0));
   $496=$2;
   $497=(($496+160)|0);
   $498=(+(HEAPF32[(($497)>>2)]));
   $499=($495)+($498);
   $qval=$499;
   $i=2;
   while(1) {
    $501=$i;
    $502=($501|0)<9;
    if (!($502)) {
     break;
    }
    $504=$2;
    $505=(($504+12)|0);
    $506=((HEAP32[(($505)>>2)])|0);
    $507=$i;
    $508=((11920+((($507)*(24))&-1))|0);
    $509=(($508)|0);
    $510=((HEAP32[(($509)>>2)])|0);
    $511=($506|0)==($510|0);
    if ($511) {
     $513=$qval;
     $514=$i;
     $515=((11920+((($514)*(24))&-1))|0);
     $516=(($515+4)|0);
     $517=(+(HEAPF32[(($516)>>2)]));
     $518=$513<$517;
     if ($518) {
      $520=$qval;
      $521=$i;
      $522=((11920+((($521)*(24))&-1))|0);
      $523=(($522+4)|0);
      $524=(+(HEAPF32[(($523)>>2)]));
      $525=($520)/($524);
      $526=$525;
      $d=$526;
      $527=$d;
      $528=$i;
      $529=((11920+((($528)*(24))&-1))|0);
      $530=(($529+12)|0);
      $531=(+(HEAPF32[(($530)>>2)]));
      $532=$531;
      $533=($527)*($532);
      $d=$533;
      $534=$d;
      $535=(~~($534));
      $536=$2;
      $537=(($536+164)|0);
      HEAP32[(($537)>>2)]=$535;
      $538=$d;
      $539=$2;
      $540=(($539+164)|0);
      $541=((HEAP32[(($540)>>2)])|0);
      $542=(+((($541|0))|0));
      $543=($538)-($542);
      $544=$543;
      $545=$2;
      $546=(($545+160)|0);
      HEAPF32[(($546)>>2)]=$544;
     }
    }
    $549=$2;
    $550=(($549+12)|0);
    $551=((HEAP32[(($550)>>2)])|0);
    $552=$i;
    $553=((11920+((($552)*(24))&-1))|0);
    $554=(($553)|0);
    $555=((HEAP32[(($554)>>2)])|0);
    $556=($551|0)>=($555|0);
    if ($556) {
     $558=$i;
     $559=((11920+((($558)*(24))&-1))|0);
     $560=(($559+4)|0);
     $561=(+(HEAPF32[(($560)>>2)]));
     $562=$qval;
     $563=$561<=$562;
     if ($563) {
      $565=$qval;
      $566=$i;
      $567=((11920+((($566)*(24))&-1))|0);
      $568=(($567+8)|0);
      $569=(+(HEAPF32[(($568)>>2)]));
      $570=$565<$569;
      if ($570) {
       label = 85;
       break;
      }
     }
    }
    $636=$i;
    $637=((($636)+(1))|0);
    $i=$637;
   }
   if ((label|0) == 85) {
    $572=$i;
    $573=((11920+((($572)*(24))&-1))|0);
    $574=(($573+8)|0);
    $575=(+(HEAPF32[(($574)>>2)]));
    $576=$i;
    $577=((11920+((($576)*(24))&-1))|0);
    $578=(($577+4)|0);
    $579=(+(HEAPF32[(($578)>>2)]));
    $580=($575)-($579);
    $q_=$580;
    $581=$i;
    $582=((11920+((($581)*(24))&-1))|0);
    $583=(($582+16)|0);
    $584=(+(HEAPF32[(($583)>>2)]));
    $585=$i;
    $586=((11920+((($585)*(24))&-1))|0);
    $587=(($586+12)|0);
    $588=(+(HEAPF32[(($587)>>2)]));
    $589=($584)-($588);
    $t_=$589;
    $590=$i;
    $591=((11920+((($590)*(24))&-1))|0);
    $592=(($591+12)|0);
    $593=(+(HEAPF32[(($592)>>2)]));
    $594=$t_;
    $595=$qval;
    $596=$i;
    $597=((11920+((($596)*(24))&-1))|0);
    $598=(($597+4)|0);
    $599=(+(HEAPF32[(($598)>>2)]));
    $600=($595)-($599);
    $601=($594)*($600);
    $602=$q_;
    $603=($601)/($602);
    $604=($593)+($603);
    $605=$604;
    $d1=$605;
    $606=$d1;
    $607=(~~($606));
    $608=$2;
    $609=(($608+164)|0);
    HEAP32[(($609)>>2)]=$607;
    $610=$d1;
    $611=$2;
    $612=(($611+164)|0);
    $613=((HEAP32[(($612)>>2)])|0);
    $614=(+((($613|0))|0));
    $615=($610)-($614);
    $616=$615;
    $617=$2;
    $618=(($617+160)|0);
    HEAPF32[(($618)>>2)]=$616;
    $619=$i;
    $620=((11920+((($619)*(24))&-1))|0);
    $621=(($620)|0);
    $622=((HEAP32[(($621)>>2)])|0);
    $623=$2;
    $624=(($623+16)|0);
    HEAP32[(($624)>>2)]=$622;
    $625=$2;
    $626=(($625+184)|0);
    $627=((HEAP32[(($626)>>2)])|0);
    $628=($627|0)==0;
    if ($628) {
     $630=$2;
     $631=(($630+184)|0);
     HEAP32[(($631)>>2)]=-1;
    }
   }
  }
 } while(0);
 $640=$2;
 $641=(($640+184)|0);
 $642=((HEAP32[(($641)>>2)])|0);
 $643=($642|0)==0;
 if ($643) {
  HEAPF64[(($lowpass)>>3)]=16000.0;
  $645=$2;
  $646=(($645+156)|0);
  $647=((HEAP32[(($646)>>2)])|0);
  switch (($647|0)) {
  case 0: {
   $649=$2;
   $650=(($649+96)|0);
   $651=((HEAP32[(($650)>>2)])|0);
   _optimum_bandwidth($lowpass,$highpass,$651);
   break;
  }
  case 3: {
   $653=$2;
   $654=(($653+168)|0);
   $655=((HEAP32[(($654)>>2)])|0);
   _optimum_bandwidth($lowpass,$highpass,$655);
   break;
  }
  case 2: {
   $657=$2;
   $658=(($657+164)|0);
   $659=((HEAP32[(($658)>>2)])|0);
   $660=0<=($659|0);
   do {
    if ($660) {
     $662=$2;
     $663=(($662+164)|0);
     $664=((HEAP32[(($663)>>2)])|0);
     $665=($664|0)<=9;
     if (!($665)) {
      label = 99;
      break;
     }
     $667=$2;
     $668=(($667+164)|0);
     $669=((HEAP32[(($668)>>2)])|0);
     $670=((11856+($669<<2))|0);
     $671=((HEAP32[(($670)>>2)])|0);
     $672=(+((($671|0))|0));
     $a=$672;
     $673=$2;
     $674=(($673+164)|0);
     $675=((HEAP32[(($674)>>2)])|0);
     $676=((($675)+(1))|0);
     $677=((11856+($676<<2))|0);
     $678=((HEAP32[(($677)>>2)])|0);
     $679=(+((($678|0))|0));
     $b=$679;
     $680=$2;
     $681=(($680+160)|0);
     $682=(+(HEAPF32[(($681)>>2)]));
     $683=$682;
     $m=$683;
     $684=$a;
     $685=$b;
     $686=$m;
     $687=(+(_linear_int($684,$685,$686)));
     HEAPF64[(($lowpass)>>3)]=$687;
    } else {
     label = 99;
    }
   } while(0);
   if ((label|0) == 99) {
    HEAPF64[(($lowpass)>>3)]=19500.0;
   }
   break;
  }
  case 4:case 1: {
   $691=$2;
   $692=(($691+164)|0);
   $693=((HEAP32[(($692)>>2)])|0);
   $694=0<=($693|0);
   do {
    if ($694) {
     $696=$2;
     $697=(($696+164)|0);
     $698=((HEAP32[(($697)>>2)])|0);
     $699=($698|0)<=9;
     if (!($699)) {
      label = 104;
      break;
     }
     $701=$2;
     $702=(($701+164)|0);
     $703=((HEAP32[(($702)>>2)])|0);
     $704=((11808+($703<<2))|0);
     $705=((HEAP32[(($704)>>2)])|0);
     $706=(+((($705|0))|0));
     $a2=$706;
     $707=$2;
     $708=(($707+164)|0);
     $709=((HEAP32[(($708)>>2)])|0);
     $710=((($709)+(1))|0);
     $711=((11808+($710<<2))|0);
     $712=((HEAP32[(($711)>>2)])|0);
     $713=(+((($712|0))|0));
     $b3=$713;
     $714=$2;
     $715=(($714+160)|0);
     $716=(+(HEAPF32[(($715)>>2)]));
     $717=$716;
     $m4=$717;
     $718=$a2;
     $719=$b3;
     $720=$m4;
     $721=(+(_linear_int($718,$719,$720)));
     HEAPF64[(($lowpass)>>3)]=$721;
    } else {
     label = 104;
    }
   } while(0);
   if ((label|0) == 104) {
    HEAPF64[(($lowpass)>>3)]=21500.0;
   }
   break;
  }
  default: {
   $725=$2;
   $726=(($725+164)|0);
   $727=((HEAP32[(($726)>>2)])|0);
   $728=0<=($727|0);
   do {
    if ($728) {
     $730=$2;
     $731=(($730+164)|0);
     $732=((HEAP32[(($731)>>2)])|0);
     $733=($732|0)<=9;
     if (!($733)) {
      label = 109;
      break;
     }
     $735=$2;
     $736=(($735+164)|0);
     $737=((HEAP32[(($736)>>2)])|0);
     $738=((11760+($737<<2))|0);
     $739=((HEAP32[(($738)>>2)])|0);
     $740=(+((($739|0))|0));
     $a5=$740;
     $741=$2;
     $742=(($741+164)|0);
     $743=((HEAP32[(($742)>>2)])|0);
     $744=((($743)+(1))|0);
     $745=((11760+($744<<2))|0);
     $746=((HEAP32[(($745)>>2)])|0);
     $747=(+((($746|0))|0));
     $b6=$747;
     $748=$2;
     $749=(($748+160)|0);
     $750=(+(HEAPF32[(($749)>>2)]));
     $751=$750;
     $m7=$751;
     $752=$a5;
     $753=$b6;
     $754=$m7;
     $755=(+(_linear_int($752,$753,$754)));
     HEAPF64[(($lowpass)>>3)]=$755;
    } else {
     label = 109;
    }
   } while(0);
   if ((label|0) == 109) {
    HEAPF64[(($lowpass)>>3)]=19500.0;
   }
  }
  }
  $759=$2;
  $760=(($759+48)|0);
  $761=((HEAP32[(($760)>>2)])|0);
  $762=($761|0)==3;
  do {
   if ($762) {
    $764=$2;
    $765=(($764+156)|0);
    $766=((HEAP32[(($765)>>2)])|0);
    $767=($766|0)==0;
    if (!($767)) {
     $769=$2;
     $770=(($769+156)|0);
     $771=((HEAP32[(($770)>>2)])|0);
     $772=($771|0)==3;
     if (!($772)) {
      break;
     }
    }
    $774=(+(HEAPF64[(($lowpass)>>3)]));
    $775=($774)*((1.5));
    HEAPF64[(($lowpass)>>3)]=$775;
   }
  } while(0);
  $777=(+(HEAPF64[(($lowpass)>>3)]));
  $778=(~~($777));
  $779=$2;
  $780=(($779+184)|0);
  HEAP32[(($780)>>2)]=$778;
 }
 $782=$2;
 $783=(($782+16)|0);
 $784=((HEAP32[(($783)>>2)])|0);
 $785=($784|0)==0;
 if ($785) {
  $787=$2;
  $788=(($787+184)|0);
  $789=((HEAP32[(($788)>>2)])|0);
  $790=($789<<1);
  $791=$2;
  $792=(($791+12)|0);
  $793=((HEAP32[(($792)>>2)])|0);
  $794=($790|0)>($793|0);
  if ($794) {
   $796=$2;
   $797=(($796+12)|0);
   $798=((HEAP32[(($797)>>2)])|0);
   $799=(((($798|0))/(2))&-1);
   $800=$2;
   $801=(($800+184)|0);
   HEAP32[(($801)>>2)]=$799;
  }
  $803=$2;
  $804=(($803+184)|0);
  $805=((HEAP32[(($804)>>2)])|0);
  $806=$2;
  $807=(($806+12)|0);
  $808=((HEAP32[(($807)>>2)])|0);
  $809=((_optimum_samplefreq($805,$808))|0);
  $810=$2;
  $811=(($810+16)|0);
  HEAP32[(($811)>>2)]=$809;
 }
 $813=$2;
 $814=(($813+156)|0);
 $815=((HEAP32[(($814)>>2)])|0);
 $816=($815|0)==1;
 do {
  if ($816) {
   label = 122;
  } else {
   $818=$2;
   $819=(($818+156)|0);
   $820=((HEAP32[(($819)>>2)])|0);
   $821=($820|0)==4;
   if ($821) {
    label = 122;
    break;
   }
   $837=$2;
   $838=(($837+184)|0);
   $839=((HEAP32[(($838)>>2)])|0);
   $840=20500<($839|0);
   if ($840) {
    $847=20500;
   } else {
    $843=$2;
    $844=(($843+184)|0);
    $845=((HEAP32[(($844)>>2)])|0);
    $847=$845;
   }

   $848=$2;
   $849=(($848+184)|0);
   HEAP32[(($849)>>2)]=$847;
  }
 } while(0);
 if ((label|0) == 122) {
  $823=$2;
  $824=(($823+184)|0);
  $825=((HEAP32[(($824)>>2)])|0);
  $826=24000<($825|0);
  if ($826) {
   $833=24000;
  } else {
   $829=$2;
   $830=(($829+184)|0);
   $831=((HEAP32[(($830)>>2)])|0);
   $833=$831;
  }

  $834=$2;
  $835=(($834+184)|0);
  HEAP32[(($835)>>2)]=$833;
 }
 $851=$2;
 $852=(($851+16)|0);
 $853=((HEAP32[(($852)>>2)])|0);
 $854=(((($853|0))/(2))&-1);
 $855=$2;
 $856=(($855+184)|0);
 $857=((HEAP32[(($856)>>2)])|0);
 $858=($854|0)<($857|0);
 if ($858) {
  $860=$2;
  $861=(($860+16)|0);
  $862=((HEAP32[(($861)>>2)])|0);
  $863=(((($862|0))/(2))&-1);
  $869=$863;
 } else {
  $865=$2;
  $866=(($865+184)|0);
  $867=((HEAP32[(($866)>>2)])|0);
  $869=$867;
 }

 $870=$2;
 $871=(($870+184)|0);
 HEAP32[(($871)>>2)]=$869;
 $872=$2;
 $873=(($872+156)|0);
 $874=((HEAP32[(($873)>>2)])|0);
 $875=($874|0)==0;
 if ($875) {
  $877=$2;
  $878=(($877+16)|0);
  $879=((HEAP32[(($878)>>2)])|0);
  $880=($879<<4);
  $881=$cfg;
  $882=(($881+56)|0);
  $883=((HEAP32[(($882)>>2)])|0);
  $884=(Math_imul($880,$883)|0);
  $885=(+((($884|0))|0));
  $886=$2;
  $887=(($886+96)|0);
  $888=((HEAP32[(($887)>>2)])|0);
  $889=(+((($888|0))|0));
  $890=((1000.0))*($889);
  $891=($885)/($890);
  $892=$891;
  $893=$2;
  $894=(($893+100)|0);
  HEAPF32[(($894)>>2)]=$892;
 }
 $896=$2;
 $897=(($896+156)|0);
 $898=((HEAP32[(($897)>>2)])|0);
 $899=($898|0)==3;
 if ($899) {
  $901=$2;
  $902=(($901+16)|0);
  $903=((HEAP32[(($902)>>2)])|0);
  $904=($903<<4);
  $905=$cfg;
  $906=(($905+56)|0);
  $907=((HEAP32[(($906)>>2)])|0);
  $908=(Math_imul($904,$907)|0);
  $909=(+((($908|0))|0));
  $910=$2;
  $911=(($910+168)|0);
  $912=((HEAP32[(($911)>>2)])|0);
  $913=(+((($912|0))|0));
  $914=((1000.0))*($913);
  $915=($909)/($914);
  $916=$915;
  $917=$2;
  $918=(($917+100)|0);
  HEAPF32[(($918)>>2)]=$916;
 }
 $920=$2;
 $921=(($920+36)|0);
 $922=((HEAP32[(($921)>>2)])|0);
 $923=($922|0)!=0;
 if (!($923)) {
  $925=$2;
  $926=(($925+60)|0);
  HEAP32[(($926)>>2)]=0;
  $927=$2;
  $928=(($927+64)|0);
  HEAP32[(($928)>>2)]=0;
  $929=$cfg;
  $930=(($929+116)|0);
  HEAP32[(($930)>>2)]=0;
 }
 $932=$2;
 $933=(($932+60)|0);
 $934=((HEAP32[(($933)>>2)])|0);
 $935=$cfg;
 $936=(($935+112)|0);
 HEAP32[(($936)>>2)]=$934;
 $937=$2;
 $938=(($937+64)|0);
 $939=((HEAP32[(($938)>>2)])|0);
 $940=$cfg;
 $941=(($940+120)|0);
 HEAP32[(($941)>>2)]=$939;
 $942=$cfg;
 $943=(($942+120)|0);
 $944=((HEAP32[(($943)>>2)])|0);
 $945=($944|0)!=0;
 if ($945) {
  $947=$cfg;
  $948=(($947+116)|0);
  HEAP32[(($948)>>2)]=1;
 }
 $950=$cfg;
 $951=(($950+112)|0);
 $952=((HEAP32[(($951)>>2)])|0);
 $953=($952|0)!=0;
 do {
  if ($953) {
   $955=$gfc;
   $956=(($955+85676)|0);
   $957=(($956)|0);
   $958=((HEAP32[(($957)>>2)])|0);
   $959=$2;
   $960=(($959+16)|0);
   $961=((HEAP32[(($960)>>2)])|0);
   $962=((_InitGainAnalysis($958,$961))|0);
   $963=($962|0)==0;
   if (!($963)) {
    break;
   }
   $965=$gfc;
   _freegfc($965);
   $966=$2;
   $967=(($966+288)|0);
   HEAP32[(($967)>>2)]=0;
   $1=-6;
   $2383=$1;
   STACKTOP=sp;return (($2383)|0);
  }
 } while(0);
 $970=$cfg;
 $971=(($970+120)|0);
 $972=((HEAP32[(($971)>>2)])|0);
 $973=($972|0)!=0;
 do {
  if ($973) {
   $975=$2;
   $976=(($975+40)|0);
   $977=((HEAP32[(($976)>>2)])|0);
   $978=($977|0)!=0;
   if ($978) {
    break;
   }
   $980=$gfc;
   $981=(($980+85808)|0);
   $982=((HEAP32[(($981)>>2)])|0);
   $983=($982|0)!=0;
   if ($983) {
    $985=$gfc;
    $986=(($985+85808)|0);
    $987=((HEAP32[(($986)>>2)])|0);
    $988=((_hip_decode_exit($987))|0);
   }
   $990=((_hip_decode_init())|0);
   $991=$gfc;
   $992=(($991+85808)|0);
   HEAP32[(($992)>>2)]=$990;
   $993=$gfc;
   $994=(($993+85808)|0);
   $995=((HEAP32[(($994)>>2)])|0);
   $996=$2;
   $997=(($996+272)|0);
   $998=(($997+8)|0);
   $999=((HEAP32[(($998)>>2)])|0);
   _hip_set_errorf($995,$999);
   $1000=$gfc;
   $1001=(($1000+85808)|0);
   $1002=((HEAP32[(($1001)>>2)])|0);
   $1003=$2;
   $1004=(($1003+272)|0);
   $1005=(($1004+4)|0);
   $1006=((HEAP32[(($1005)>>2)])|0);
   _hip_set_debugf($1002,$1006);
   $1007=$gfc;
   $1008=(($1007+85808)|0);
   $1009=((HEAP32[(($1008)>>2)])|0);
   $1010=$2;
   $1011=(($1010+272)|0);
   $1012=(($1011)|0);
   $1013=((HEAP32[(($1012)>>2)])|0);
   _hip_set_msgf($1009,$1013);
  }
 } while(0);
 $1015=$2;
 $1016=(($1015+128)|0);
 $1017=((HEAP32[(($1016)>>2)])|0);
 $1018=$cfg;
 $1019=(($1018+128)|0);
 HEAP32[(($1019)>>2)]=$1017;
 $1020=$2;
 $1021=(($1020+184)|0);
 $1022=((HEAP32[(($1021)>>2)])|0);
 $1023=$cfg;
 $1024=(($1023+36)|0);
 HEAP32[(($1024)>>2)]=$1022;
 $1025=$2;
 $1026=(($1025+188)|0);
 $1027=((HEAP32[(($1026)>>2)])|0);
 $1028=$cfg;
 $1029=(($1028+40)|0);
 HEAP32[(($1029)>>2)]=$1027;
 $1030=$2;
 $1031=(($1030+12)|0);
 $1032=((HEAP32[(($1031)>>2)])|0);
 $1033=$cfg;
 $1034=(($1033+44)|0);
 HEAP32[(($1034)>>2)]=$1032;
 $1035=$2;
 $1036=(($1035+16)|0);
 $1037=((HEAP32[(($1036)>>2)])|0);
 $1038=$cfg;
 $1039=(($1038+48)|0);
 HEAP32[(($1039)>>2)]=$1037;
 $1040=$cfg;
 $1041=(($1040+48)|0);
 $1042=((HEAP32[(($1041)>>2)])|0);
 $1043=($1042|0)<=24000;
 $1044=($1043?1:2);
 $1045=$cfg;
 $1046=(($1045+60)|0);
 HEAP32[(($1046)>>2)]=$1044;
 $1047=$gfc;
 $1048=(($1047+84040)|0);
 $1049=(($1048+720)|0);
 HEAP32[(($1049)>>2)]=576;
 $1050=$2;
 $1051=(($1050+156)|0);
 $1052=((HEAP32[(($1051)>>2)])|0);
 if (((($1052|0))|0)==((1)|0)|((($1052|0))|0)==((2)|0)|((($1052|0))|0)==((4)|0)) {
  $1054=$2;
  $1055=(($1054+164)|0);
  $1056=((HEAP32[(($1055)>>2)])|0);
  $1057=((12136+($1056<<2))|0);
  $1058=(+(HEAPF32[(($1057)>>2)]));
  $1059=$2;
  $1060=(($1059+100)|0);
  HEAPF32[(($1060)>>2)]=$1058;
 } else if (((($1052|0))|0)==((3)|0)) {
  $1062=$cfg;
  $1063=(($1062+48)|0);
  $1064=((HEAP32[(($1063)>>2)])|0);
  $1065=($1064<<4);
  $1066=$cfg;
  $1067=(($1066+56)|0);
  $1068=((HEAP32[(($1067)>>2)])|0);
  $1069=(Math_imul($1065,$1068)|0);
  $1070=(+((($1069|0))|0));
  $1071=$2;
  $1072=(($1071+168)|0);
  $1073=((HEAP32[(($1072)>>2)])|0);
  $1074=(+((($1073|0))|0));
  $1075=((1000.0))*($1074);
  $1076=($1070)/($1075);
  $1077=$1076;
  $1078=$2;
  $1079=(($1078+100)|0);
  HEAPF32[(($1079)>>2)]=$1077;
 } else {
  $1081=$cfg;
  $1082=(($1081+48)|0);
  $1083=((HEAP32[(($1082)>>2)])|0);
  $1084=($1083<<4);
  $1085=$cfg;
  $1086=(($1085+56)|0);
  $1087=((HEAP32[(($1086)>>2)])|0);
  $1088=(Math_imul($1084,$1087)|0);
  $1089=(+((($1088|0))|0));
  $1090=$2;
  $1091=(($1090+96)|0);
  $1092=((HEAP32[(($1091)>>2)])|0);
  $1093=(+((($1092|0))|0));
  $1094=((1000.0))*($1093);
  $1095=($1089)/($1094);
  $1096=$1095;
  $1097=$2;
  $1098=(($1097+100)|0);
  HEAPF32[(($1098)>>2)]=$1096;
 }
 $1100=$2;
 $1101=(($1100+48)|0);
 $1102=((HEAP32[(($1101)>>2)])|0);
 $1103=($1102|0)==4;
 if ($1103) {
  $1105=$2;
  $1106=(($1105+48)|0);
  HEAP32[(($1106)>>2)]=1;
 }
 $1108=$2;
 $1109=(($1108+48)|0);
 $1110=((HEAP32[(($1109)>>2)])|0);
 $1111=$cfg;
 $1112=(($1111+164)|0);
 HEAP32[(($1112)>>2)]=$1110;
 $1113=$cfg;
 $1114=(($1113+40)|0);
 $1115=((HEAP32[(($1114)>>2)])|0);
 $1116=($1115|0)>0;
 if ($1116) {
  $1118=$cfg;
  $1119=(($1118+40)|0);
  $1120=((HEAP32[(($1119)>>2)])|0);
  $1121=(+((($1120|0))|0));
  $1122=((2.0))*($1121);
  $1123=$1122;
  $1124=$cfg;
  $1125=(($1124+240)|0);
  HEAPF32[(($1125)>>2)]=$1123;
  $1126=$2;
  $1127=(($1126+196)|0);
  $1128=((HEAP32[(($1127)>>2)])|0);
  $1129=($1128|0)>=0;
  if ($1129) {
   $1131=$cfg;
   $1132=(($1131+40)|0);
   $1133=((HEAP32[(($1132)>>2)])|0);
   $1134=$2;
   $1135=(($1134+196)|0);
   $1136=((HEAP32[(($1135)>>2)])|0);
   $1137=((($1133)+($1136))|0);
   $1138=(+((($1137|0))|0));
   $1139=((2.0))*($1138);
   $1140=$1139;
   $1141=$cfg;
   $1142=(($1141+244)|0);
   HEAPF32[(($1142)>>2)]=$1140;
  } else {
   $1144=$cfg;
   $1145=(($1144+40)|0);
   $1146=((HEAP32[(($1145)>>2)])|0);
   $1147=(+((($1146|0))|0));
   $1148=((2.0))*($1147);
   $1149=$1148;
   $1150=$cfg;
   $1151=(($1150+244)|0);
   HEAPF32[(($1151)>>2)]=$1149;
  }
  $1153=$cfg;
  $1154=(($1153+48)|0);
  $1155=((HEAP32[(($1154)>>2)])|0);
  $1156=(+((($1155|0))|0));
  $1157=$cfg;
  $1158=(($1157+240)|0);
  $1159=(+(HEAPF32[(($1158)>>2)]));
  $1160=($1159)/($1156);
  HEAPF32[(($1158)>>2)]=$1160;
  $1161=$cfg;
  $1162=(($1161+48)|0);
  $1163=((HEAP32[(($1162)>>2)])|0);
  $1164=(+((($1163|0))|0));
  $1165=$cfg;
  $1166=(($1165+244)|0);
  $1167=(+(HEAPF32[(($1166)>>2)]));
  $1168=($1167)/($1164);
  HEAPF32[(($1166)>>2)]=$1168;
 } else {
  $1170=$cfg;
  $1171=(($1170+240)|0);
  HEAPF32[(($1171)>>2)]=0.0;
  $1172=$cfg;
  $1173=(($1172+244)|0);
  HEAPF32[(($1173)>>2)]=0.0;
 }
 $1175=$cfg;
 $1176=(($1175+232)|0);
 HEAPF32[(($1176)>>2)]=0.0;
 $1177=$cfg;
 $1178=(($1177+236)|0);
 HEAPF32[(($1178)>>2)]=0.0;
 $1179=$cfg;
 $1180=(($1179+36)|0);
 $1181=((HEAP32[(($1180)>>2)])|0);
 $1182=($1181|0)>0;
 do {
  if ($1182) {
   $1184=$cfg;
   $1185=(($1184+36)|0);
   $1186=((HEAP32[(($1185)>>2)])|0);
   $1187=$cfg;
   $1188=(($1187+48)|0);
   $1189=((HEAP32[(($1188)>>2)])|0);
   $1190=(((($1189|0))/(2))&-1);
   $1191=($1186|0)<($1190|0);
   if (!($1191)) {
    break;
   }
   $1193=$cfg;
   $1194=(($1193+36)|0);
   $1195=((HEAP32[(($1194)>>2)])|0);
   $1196=(+((($1195|0))|0));
   $1197=((2.0))*($1196);
   $1198=$1197;
   $1199=$cfg;
   $1200=(($1199+236)|0);
   HEAPF32[(($1200)>>2)]=$1198;
   $1201=$2;
   $1202=(($1201+192)|0);
   $1203=((HEAP32[(($1202)>>2)])|0);
   $1204=($1203|0)>=0;
   if ($1204) {
    $1206=$cfg;
    $1207=(($1206+36)|0);
    $1208=((HEAP32[(($1207)>>2)])|0);
    $1209=$2;
    $1210=(($1209+192)|0);
    $1211=((HEAP32[(($1210)>>2)])|0);
    $1212=((($1208)-($1211))|0);
    $1213=(+((($1212|0))|0));
    $1214=((2.0))*($1213);
    $1215=$1214;
    $1216=$cfg;
    $1217=(($1216+232)|0);
    HEAPF32[(($1217)>>2)]=$1215;
    $1218=$cfg;
    $1219=(($1218+232)|0);
    $1220=(+(HEAPF32[(($1219)>>2)]));
    $1221=$1220<(0.0);
    if ($1221) {
     $1223=$cfg;
     $1224=(($1223+232)|0);
     HEAPF32[(($1224)>>2)]=0.0;
    }
   } else {
    $1227=$cfg;
    $1228=(($1227+36)|0);
    $1229=((HEAP32[(($1228)>>2)])|0);
    $1230=(+((($1229|0))|0));
    $1231=((2.0))*($1230);
    $1232=$1231;
    $1233=$cfg;
    $1234=(($1233+232)|0);
    HEAPF32[(($1234)>>2)]=$1232;
   }
   $1236=$cfg;
   $1237=(($1236+48)|0);
   $1238=((HEAP32[(($1237)>>2)])|0);
   $1239=(+((($1238|0))|0));
   $1240=$cfg;
   $1241=(($1240+232)|0);
   $1242=(+(HEAPF32[(($1241)>>2)]));
   $1243=($1242)/($1239);
   HEAPF32[(($1241)>>2)]=$1243;
   $1244=$cfg;
   $1245=(($1244+48)|0);
   $1246=((HEAP32[(($1245)>>2)])|0);
   $1247=(+((($1246|0))|0));
   $1248=$cfg;
   $1249=(($1248+236)|0);
   $1250=(+(HEAPF32[(($1249)>>2)]));
   $1251=($1250)/($1247);
   HEAPF32[(($1249)>>2)]=$1251;
  }
 } while(0);
 $1253=$gfc;
 _lame_init_params_ppflt($1253);
 $1254=$cfg;
 $1255=(($1254+48)|0);
 $1256=((HEAP32[(($1255)>>2)])|0);
 $1257=$cfg;
 $1258=(($1257)|0);
 $1259=((_SmpFrqIndex($1256,$1258))|0);
 $1260=$cfg;
 $1261=(($1260+4)|0);
 HEAP32[(($1261)>>2)]=$1259;
 $1262=$cfg;
 $1263=(($1262+4)|0);
 $1264=((HEAP32[(($1263)>>2)])|0);
 $1265=($1264|0)<0;
 if ($1265) {
  $1267=$gfc;
  _freegfc($1267);
  $1268=$2;
  $1269=(($1268+288)|0);
  HEAP32[(($1269)>>2)]=0;
  $1=-1;
  $2383=$1;
  STACKTOP=sp;return (($2383)|0);
 }
 $1271=$2;
 $1272=(($1271+156)|0);
 $1273=((HEAP32[(($1272)>>2)])|0);
 $1274=($1273|0)==0;
 if ($1274) {
  $1276=$cfg;
  $1277=(($1276+136)|0);
  $1278=((HEAP32[(($1277)>>2)])|0);
  $1279=($1278|0)!=0;
  do {
   if ($1279) {
    $1281=$gfc;
    $1282=(($1281+84040)|0);
    $1283=(($1282+704)|0);
    HEAP32[(($1283)>>2)]=0;
   } else {
    $1285=$2;
    $1286=(($1285+96)|0);
    $1287=((HEAP32[(($1286)>>2)])|0);
    $1288=$cfg;
    $1289=(($1288)|0);
    $1290=((HEAP32[(($1289)>>2)])|0);
    $1291=$cfg;
    $1292=(($1291+48)|0);
    $1293=((HEAP32[(($1292)>>2)])|0);
    $1294=((_FindNearestBitrate($1287,$1290,$1293))|0);
    $1295=$2;
    $1296=(($1295+96)|0);
    HEAP32[(($1296)>>2)]=$1294;
    $1297=$2;
    $1298=(($1297+96)|0);
    $1299=((HEAP32[(($1298)>>2)])|0);
    $1300=$cfg;
    $1301=(($1300)|0);
    $1302=((HEAP32[(($1301)>>2)])|0);
    $1303=$cfg;
    $1304=(($1303+48)|0);
    $1305=((HEAP32[(($1304)>>2)])|0);
    $1306=((_BitrateIndex($1299,$1302,$1305))|0);
    $1307=$gfc;
    $1308=(($1307+84040)|0);
    $1309=(($1308+704)|0);
    HEAP32[(($1309)>>2)]=$1306;
    $1310=$gfc;
    $1311=(($1310+84040)|0);
    $1312=(($1311+704)|0);
    $1313=((HEAP32[(($1312)>>2)])|0);
    $1314=($1313|0)<=0;
    if (!($1314)) {
     break;
    }
    $1316=$gfc;
    _freegfc($1316);
    $1317=$2;
    $1318=(($1317+288)|0);
    HEAP32[(($1318)>>2)]=0;
    $1=-1;
    $2383=$1;
    STACKTOP=sp;return (($2383)|0);
   }
  } while(0);
 } else {
  $1322=$gfc;
  $1323=(($1322+84040)|0);
  $1324=(($1323+704)|0);
  HEAP32[(($1324)>>2)]=1;
 }
 $1326=$gfc;
 _init_bit_stream_w($1326);
 $1327=$cfg;
 $1328=(($1327+4)|0);
 $1329=((HEAP32[(($1328)>>2)])|0);
 $1330=$cfg;
 $1331=(($1330)|0);
 $1332=((HEAP32[(($1331)>>2)])|0);
 $1333=((($1332)*(3))&-1);
 $1334=((($1329)+($1333))|0);
 $1335=$cfg;
 $1336=(($1335+48)|0);
 $1337=((HEAP32[(($1336)>>2)])|0);
 $1338=($1337|0)<16000;
 $1339=($1338&1);
 $1340=((($1339)*(6))&-1);
 $1341=((($1334)+($1340))|0);
 $j=$1341;
 $i=0;
 while(1) {
  $1343=$i;
  $1344=($1343|0)<23;
  if (!($1344)) {
   break;
  }
  $1346=$i;
  $1347=$j;
  $1348=((7320+((($1347)*(204))&-1))|0);
  $1349=(($1348)|0);
  $1350=(($1349+($1346<<2))|0);
  $1351=((HEAP32[(($1350)>>2)])|0);
  $1352=$i;
  $1353=$gfc;
  $1354=(($1353+21360)|0);
  $1355=(($1354)|0);
  $1356=(($1355+($1352<<2))|0);
  HEAP32[(($1356)>>2)]=$1351;
  $1358=$i;
  $1359=((($1358)+(1))|0);
  $i=$1359;
 }
 $i=0;
 while(1) {
  $1362=$i;
  $1363=($1362|0)<7;
  if (!($1363)) {
   break;
  }
  $1365=$gfc;
  $1366=(($1365+21360)|0);
  $1367=(($1366)|0);
  $1368=(($1367+88)|0);
  $1369=((HEAP32[(($1368)>>2)])|0);
  $1370=$gfc;
  $1371=(($1370+21360)|0);
  $1372=(($1371)|0);
  $1373=(($1372+84)|0);
  $1374=((HEAP32[(($1373)>>2)])|0);
  $1375=((($1369)-($1374))|0);
  $1376=(((($1375|0))/(6))&-1);
  $size=$1376;
  $1377=$gfc;
  $1378=(($1377+21360)|0);
  $1379=(($1378)|0);
  $1380=(($1379+84)|0);
  $1381=((HEAP32[(($1380)>>2)])|0);
  $1382=$i;
  $1383=$size;
  $1384=(Math_imul($1382,$1383)|0);
  $1385=((($1381)+($1384))|0);
  $start=$1385;
  $1386=$start;
  $1387=$i;
  $1388=$gfc;
  $1389=(($1388+21360)|0);
  $1390=(($1389+148)|0);
  $1391=(($1390+($1387<<2))|0);
  HEAP32[(($1391)>>2)]=$1386;
  $1393=$i;
  $1394=((($1393)+(1))|0);
  $i=$1394;
 }
 $1396=$gfc;
 $1397=(($1396+21360)|0);
 $1398=(($1397+148)|0);
 $1399=(($1398+24)|0);
 HEAP32[(($1399)>>2)]=576;
 $i=0;
 while(1) {
  $1401=$i;
  $1402=($1401|0)<14;
  if (!($1402)) {
   break;
  }
  $1404=$i;
  $1405=$j;
  $1406=((7320+((($1405)*(204))&-1))|0);
  $1407=(($1406+92)|0);
  $1408=(($1407+($1404<<2))|0);
  $1409=((HEAP32[(($1408)>>2)])|0);
  $1410=$i;
  $1411=$gfc;
  $1412=(($1411+21360)|0);
  $1413=(($1412+92)|0);
  $1414=(($1413+($1410<<2))|0);
  HEAP32[(($1414)>>2)]=$1409;
  $1416=$i;
  $1417=((($1416)+(1))|0);
  $i=$1417;
 }
 $i=0;
 while(1) {
  $1420=$i;
  $1421=($1420|0)<7;
  if (!($1421)) {
   break;
  }
  $1423=$gfc;
  $1424=(($1423+21360)|0);
  $1425=(($1424+92)|0);
  $1426=(($1425+52)|0);
  $1427=((HEAP32[(($1426)>>2)])|0);
  $1428=$gfc;
  $1429=(($1428+21360)|0);
  $1430=(($1429+92)|0);
  $1431=(($1430+48)|0);
  $1432=((HEAP32[(($1431)>>2)])|0);
  $1433=((($1427)-($1432))|0);
  $1434=(((($1433|0))/(6))&-1);
  $size8=$1434;
  $1435=$gfc;
  $1436=(($1435+21360)|0);
  $1437=(($1436+92)|0);
  $1438=(($1437+48)|0);
  $1439=((HEAP32[(($1438)>>2)])|0);
  $1440=$i;
  $1441=$size8;
  $1442=(Math_imul($1440,$1441)|0);
  $1443=((($1439)+($1442))|0);
  $start9=$1443;
  $1444=$start9;
  $1445=$i;
  $1446=$gfc;
  $1447=(($1446+21360)|0);
  $1448=(($1447+176)|0);
  $1449=(($1448+($1445<<2))|0);
  HEAP32[(($1449)>>2)]=$1444;
  $1451=$i;
  $1452=((($1451)+(1))|0);
  $i=$1452;
 }
 $1454=$gfc;
 $1455=(($1454+21360)|0);
 $1456=(($1455+176)|0);
 $1457=(($1456+24)|0);
 HEAP32[(($1457)>>2)]=192;
 $1458=$cfg;
 $1459=(($1458+60)|0);
 $1460=((HEAP32[(($1459)>>2)])|0);
 $1461=($1460|0)==2;
 if ($1461) {
  $1463=$cfg;
  $1464=(($1463+56)|0);
  $1465=((HEAP32[(($1464)>>2)])|0);
  $1466=($1465|0)==1;
  $1467=($1466?21:36);
  $1468=$cfg;
  $1469=(($1468+8)|0);
  HEAP32[(($1469)>>2)]=$1467;
 } else {
  $1471=$cfg;
  $1472=(($1471+56)|0);
  $1473=((HEAP32[(($1472)>>2)])|0);
  $1474=($1473|0)==1;
  $1475=($1474?13:21);
  $1476=$cfg;
  $1477=(($1476+8)|0);
  HEAP32[(($1477)>>2)]=$1475;
 }
 $1479=$cfg;
 $1480=(($1479+144)|0);
 $1481=((HEAP32[(($1480)>>2)])|0);
 $1482=($1481|0)!=0;
 if ($1482) {
  $1484=$cfg;
  $1485=(($1484+8)|0);
  $1486=((HEAP32[(($1485)>>2)])|0);
  $1487=((($1486)+(2))|0);
  HEAP32[(($1485)>>2)]=$1487;
 }
 $1489=$gfc;
 $1490=(($1489)|0);
 HEAP32[(($1490)>>2)]=-487877;
 $k=0;
 while(1) {
  $1492=$k;
  $1493=($1492|0)<19;
  if (!($1493)) {
   break;
  }
  $1495=$cfg;
  $1496=(($1495+60)|0);
  $1497=((HEAP32[(($1496)>>2)])|0);
  $1498=((($1497)*(700))&-1);
  $1499=$cfg;
  $1500=(($1499+56)|0);
  $1501=((HEAP32[(($1500)>>2)])|0);
  $1502=(Math_imul($1498,$1501)|0);
  $1503=(+((($1502|0))|0));
  $1504=$k;
  $1505=$gfc;
  $1506=(($1505+27824)|0);
  $1507=(($1506+11932)|0);
  $1508=(($1507+($1504<<2))|0);
  HEAPF32[(($1508)>>2)]=$1503;
  $1510=$k;
  $1511=((($1510)+(1))|0);
  $k=$1511;
 }
 $1513=$2;
 $1514=(($1513+220)|0);
 $1515=((HEAP32[(($1514)>>2)])|0);
 $1516=($1515|0)==-1;
 if ($1516) {
  $1518=$2;
  $1519=(($1518+220)|0);
  HEAP32[(($1519)>>2)]=4;
 }
 $1521=$2;
 $1522=(($1521+156)|0);
 $1523=((HEAP32[(($1522)>>2)])|0);
 if (((($1523|0))|0)==((1)|0)|((($1523|0))|0)==((4)|0)) {
  $1525=$2;
  $1526=(($1525+124)|0);
  $1527=((HEAP32[(($1526)>>2)])|0);
  $1528=($1527|0)<0;
  if ($1528) {
   $1530=$2;
   $1531=(($1530+124)|0);
   HEAP32[(($1531)>>2)]=2;
  }
  $1533=$2;
  $1534=(($1533+244)|0);
  $1535=((HEAP32[(($1534)>>2)])|0);
  $1536=($1535|0)<0;
  if ($1536) {
   $1538=$2;
   $1539=(($1538+244)|0);
   HEAP32[(($1539)>>2)]=0;
  }
  $1541=$2;
  $1542=$2;
  $1543=(($1542+164)|0);
  $1544=((HEAP32[(($1543)>>2)])|0);
  $1545=((($1544)*(10))&-1);
  $1546=(((500)-($1545))|0);
  $1547=((_apply_preset($1541,$1546,0))|0);
  $1548=$2;
  $1549=(($1548+44)|0);
  $1550=((HEAP32[(($1549)>>2)])|0);
  $1551=($1550|0)<0;
  if ($1551) {
   $1553=$2;
   $1554=(($1553+44)|0);
   HEAP32[(($1554)>>2)]=3;
  }
  $1556=$2;
  $1557=(($1556+44)|0);
  $1558=((HEAP32[(($1557)>>2)])|0);
  $1559=($1558|0)<5;
  if ($1559) {
   $1561=$2;
   $1562=(($1561+44)|0);
   HEAP32[(($1562)>>2)]=0;
  }
  $1564=$2;
  $1565=(($1564+44)|0);
  $1566=((HEAP32[(($1565)>>2)])|0);
  $1567=($1566|0)>7;
  if ($1567) {
   $1569=$2;
   $1570=(($1569+44)|0);
   HEAP32[(($1570)>>2)]=7;
  }
  $1572=$2;
  $1573=(($1572+140)|0);
  $1574=((HEAP32[(($1573)>>2)])|0);
  $1575=($1574|0)!=0;
  if ($1575) {
   $1577=$gfc;
   $1578=(($1577+84768)|0);
   $1579=(($1578+324)|0);
   HEAP32[(($1579)>>2)]=0;
  } else {
   $1581=$cfg;
   $1582=(($1581+48)|0);
   $1583=((HEAP32[(($1582)>>2)])|0);
   $1584=($1583|0)>44000;
   $1585=($1584&1);
   $1586=$gfc;
   $1587=(($1586+84768)|0);
   $1588=(($1587+324)|0);
   HEAP32[(($1588)>>2)]=$1585;
  }
  $1590=$gfc;
  $1591=(($1590+85812)|0);
  HEAP32[(($1591)>>2)]=14;
 } else if (((($1523|0))|0)==((2)|0)) {
  $1593=$2;
  $1594=$2;
  $1595=(($1594+164)|0);
  $1596=((HEAP32[(($1595)>>2)])|0);
  $1597=((($1596)*(10))&-1);
  $1598=(((500)-($1597))|0);
  $1599=((_apply_preset($1593,$1598,0))|0);
  $1600=$2;
  $1601=(($1600+140)|0);
  $1602=((HEAP32[(($1601)>>2)])|0);
  $1603=($1602|0)!=0;
  if ($1603) {
   $1605=$gfc;
   $1606=(($1605+84768)|0);
   $1607=(($1606+324)|0);
   HEAP32[(($1607)>>2)]=0;
  } else {
   $1609=$cfg;
   $1610=(($1609+48)|0);
   $1611=((HEAP32[(($1610)>>2)])|0);
   $1612=($1611|0)>44000;
   $1613=($1612&1);
   $1614=$gfc;
   $1615=(($1614+84768)|0);
   $1616=(($1615+324)|0);
   HEAP32[(($1616)>>2)]=$1613;
  }
  $1618=$2;
  $1619=(($1618+44)|0);
  $1620=((HEAP32[(($1619)>>2)])|0);
  $1621=($1620|0)>6;
  if ($1621) {
   $1623=$2;
   $1624=(($1623+44)|0);
   HEAP32[(($1624)>>2)]=6;
  }
  $1626=$2;
  $1627=(($1626+44)|0);
  $1628=((HEAP32[(($1627)>>2)])|0);
  $1629=($1628|0)<0;
  if ($1629) {
   $1631=$2;
   $1632=(($1631+44)|0);
   HEAP32[(($1632)>>2)]=3;
  }
  $1634=$gfc;
  $1635=(($1634+85812)|0);
  HEAP32[(($1635)>>2)]=10;
 } else {
  $1637=$gfc;
  $1638=(($1637+84768)|0);
  $1639=(($1638+324)|0);
  HEAP32[(($1639)>>2)]=0;
  $1640=$2;
  $1641=(($1640+44)|0);
  $1642=((HEAP32[(($1641)>>2)])|0);
  $1643=($1642|0)<0;
  if ($1643) {
   $1645=$2;
   $1646=(($1645+44)|0);
   HEAP32[(($1646)>>2)]=3;
  }
  $1648=$2;
  $1649=(($1648+156)|0);
  $1650=((HEAP32[(($1649)>>2)])|0);
  $vbrmode=$1650;
  $1651=$vbrmode;
  $1652=($1651|0)==0;
  if ($1652) {
   $1654=$2;
   $1655=$2;
   $1656=(($1655+96)|0);
   $1657=((HEAP32[(($1656)>>2)])|0);
   $1658=((_lame_set_VBR_mean_bitrate_kbps($1654,$1657))|0);
  }
  $1660=$2;
  $1661=$2;
  $1662=(($1661+168)|0);
  $1663=((HEAP32[(($1662)>>2)])|0);
  $1664=((_apply_preset($1660,$1663,0))|0);
  $1665=$vbrmode;
  $1666=$2;
  $1667=(($1666+156)|0);
  HEAP32[(($1667)>>2)]=$1665;
  $1668=$vbrmode;
  $1669=($1668|0)==0;
  if ($1669) {
   $1671=$gfc;
   $1672=(($1671+85812)|0);
   HEAP32[(($1672)>>2)]=8;
  } else {
   $1674=$gfc;
   $1675=(($1674+85812)|0);
   HEAP32[(($1675)>>2)]=6;
  }
 }
 $1678=$2;
 $1679=(($1678+200)|0);
 $1680=(+(HEAPF32[(($1679)>>2)]));
 $1681=$gfc;
 $1682=(($1681+84768)|0);
 $1683=(($1682+144)|0);
 HEAPF32[(($1683)>>2)]=$1680;
 $1684=$2;
 $1685=(($1684+204)|0);
 $1686=(+(HEAPF32[(($1685)>>2)]));
 $1687=$gfc;
 $1688=(($1687+84768)|0);
 $1689=(($1688+148)|0);
 HEAPF32[(($1689)>>2)]=$1686;
 $1690=$2;
 $1691=(($1690+256)|0);
 $1692=((HEAP32[(($1691)>>2)])|0);
 $1693=($1692|0)!=0;
 if ($1693) {
  $1695=$2;
  $1696=(($1695+260)|0);
  $1697=(+(HEAPF32[(($1696)>>2)]));
  $1698=$gfc;
  $1699=(($1698+84768)|0);
  $1700=(($1699+144)|0);
  $1701=(+(HEAPF32[(($1700)>>2)]));
  $1702=($1701)+($1697);
  HEAPF32[(($1700)>>2)]=$1702;
  $1703=$2;
  $1704=(($1703+260)|0);
  $1705=(+(HEAPF32[(($1704)>>2)]));
  $1706=$gfc;
  $1707=(($1706+84768)|0);
  $1708=(($1707+148)|0);
  $1709=(+(HEAPF32[(($1708)>>2)]));
  $1710=($1709)+($1705);
  HEAPF32[(($1708)>>2)]=$1710;
 }
 $1712=$2;
 $1713=(($1712+156)|0);
 $1714=((HEAP32[(($1713)>>2)])|0);
 $1715=($1714|0)!=0;
 if ($1715) {
  $1717=$cfg;
  $1718=(($1717+96)|0);
  HEAP32[(($1718)>>2)]=1;
  $1719=$cfg;
  $1720=(($1719+100)|0);
  HEAP32[(($1720)>>2)]=14;
  $1721=$cfg;
  $1722=(($1721+48)|0);
  $1723=((HEAP32[(($1722)>>2)])|0);
  $1724=($1723|0)<16000;
  if ($1724) {
   $1726=$cfg;
   $1727=(($1726+100)|0);
   HEAP32[(($1727)>>2)]=8;
  }
  $1729=$2;
  $1730=(($1729+172)|0);
  $1731=((HEAP32[(($1730)>>2)])|0);
  $1732=($1731|0)!=0;
  do {
   if ($1732) {
    $1734=$2;
    $1735=(($1734+172)|0);
    $1736=((HEAP32[(($1735)>>2)])|0);
    $1737=$cfg;
    $1738=(($1737)|0);
    $1739=((HEAP32[(($1738)>>2)])|0);
    $1740=$cfg;
    $1741=(($1740+48)|0);
    $1742=((HEAP32[(($1741)>>2)])|0);
    $1743=((_FindNearestBitrate($1736,$1739,$1742))|0);
    $1744=$2;
    $1745=(($1744+172)|0);
    HEAP32[(($1745)>>2)]=$1743;
    $1746=$2;
    $1747=(($1746+172)|0);
    $1748=((HEAP32[(($1747)>>2)])|0);
    $1749=$cfg;
    $1750=(($1749)|0);
    $1751=((HEAP32[(($1750)>>2)])|0);
    $1752=$cfg;
    $1753=(($1752+48)|0);
    $1754=((HEAP32[(($1753)>>2)])|0);
    $1755=((_BitrateIndex($1748,$1751,$1754))|0);
    $1756=$cfg;
    $1757=(($1756+96)|0);
    HEAP32[(($1757)>>2)]=$1755;
    $1758=$cfg;
    $1759=(($1758+96)|0);
    $1760=((HEAP32[(($1759)>>2)])|0);
    $1761=($1760|0)<0;
    if (!($1761)) {
     break;
    }
    $1=-1;
    $2383=$1;
    STACKTOP=sp;return (($2383)|0);
   }
  } while(0);
  $1765=$2;
  $1766=(($1765+176)|0);
  $1767=((HEAP32[(($1766)>>2)])|0);
  $1768=($1767|0)!=0;
  do {
   if ($1768) {
    $1770=$2;
    $1771=(($1770+176)|0);
    $1772=((HEAP32[(($1771)>>2)])|0);
    $1773=$cfg;
    $1774=(($1773)|0);
    $1775=((HEAP32[(($1774)>>2)])|0);
    $1776=$cfg;
    $1777=(($1776+48)|0);
    $1778=((HEAP32[(($1777)>>2)])|0);
    $1779=((_FindNearestBitrate($1772,$1775,$1778))|0);
    $1780=$2;
    $1781=(($1780+176)|0);
    HEAP32[(($1781)>>2)]=$1779;
    $1782=$2;
    $1783=(($1782+176)|0);
    $1784=((HEAP32[(($1783)>>2)])|0);
    $1785=$cfg;
    $1786=(($1785)|0);
    $1787=((HEAP32[(($1786)>>2)])|0);
    $1788=$cfg;
    $1789=(($1788+48)|0);
    $1790=((HEAP32[(($1789)>>2)])|0);
    $1791=((_BitrateIndex($1784,$1787,$1790))|0);
    $1792=$cfg;
    $1793=(($1792+100)|0);
    HEAP32[(($1793)>>2)]=$1791;
    $1794=$cfg;
    $1795=(($1794+100)|0);
    $1796=((HEAP32[(($1795)>>2)])|0);
    $1797=($1796|0)<0;
    if (!($1797)) {
     break;
    }
    $1=-1;
    $2383=$1;
    STACKTOP=sp;return (($2383)|0);
   }
  } while(0);
  $1801=$cfg;
  $1802=(($1801+96)|0);
  $1803=((HEAP32[(($1802)>>2)])|0);
  $1804=$cfg;
  $1805=(($1804)|0);
  $1806=((HEAP32[(($1805)>>2)])|0);
  $1807=((15168+($1806<<6))|0);
  $1808=(($1807+($1803<<2))|0);
  $1809=((HEAP32[(($1808)>>2)])|0);
  $1810=$2;
  $1811=(($1810+172)|0);
  HEAP32[(($1811)>>2)]=$1809;
  $1812=$cfg;
  $1813=(($1812+100)|0);
  $1814=((HEAP32[(($1813)>>2)])|0);
  $1815=$cfg;
  $1816=(($1815)|0);
  $1817=((HEAP32[(($1816)>>2)])|0);
  $1818=((15168+($1817<<6))|0);
  $1819=(($1818+($1814<<2))|0);
  $1820=((HEAP32[(($1819)>>2)])|0);
  $1821=$2;
  $1822=(($1821+176)|0);
  HEAP32[(($1822)>>2)]=$1820;
  $1823=$cfg;
  $1824=(($1823+100)|0);
  $1825=((HEAP32[(($1824)>>2)])|0);
  $1826=$cfg;
  $1827=(($1826)|0);
  $1828=((HEAP32[(($1827)>>2)])|0);
  $1829=((15168+($1828<<6))|0);
  $1830=(($1829+($1825<<2))|0);
  $1831=((HEAP32[(($1830)>>2)])|0);
  $1832=$2;
  $1833=(($1832+168)|0);
  $1834=((HEAP32[(($1833)>>2)])|0);
  $1835=($1831|0)<($1834|0);
  if ($1835) {
   $1837=$cfg;
   $1838=(($1837+100)|0);
   $1839=((HEAP32[(($1838)>>2)])|0);
   $1840=$cfg;
   $1841=(($1840)|0);
   $1842=((HEAP32[(($1841)>>2)])|0);
   $1843=((15168+($1842<<6))|0);
   $1844=(($1843+($1839<<2))|0);
   $1845=((HEAP32[(($1844)>>2)])|0);
   $1851=$1845;
  } else {
   $1847=$2;
   $1848=(($1847+168)|0);
   $1849=((HEAP32[(($1848)>>2)])|0);
   $1851=$1849;
  }

  $1852=$2;
  $1853=(($1852+168)|0);
  HEAP32[(($1853)>>2)]=$1851;
  $1854=$cfg;
  $1855=(($1854+96)|0);
  $1856=((HEAP32[(($1855)>>2)])|0);
  $1857=$cfg;
  $1858=(($1857)|0);
  $1859=((HEAP32[(($1858)>>2)])|0);
  $1860=((15168+($1859<<6))|0);
  $1861=(($1860+($1856<<2))|0);
  $1862=((HEAP32[(($1861)>>2)])|0);
  $1863=$2;
  $1864=(($1863+168)|0);
  $1865=((HEAP32[(($1864)>>2)])|0);
  $1866=($1862|0)>($1865|0);
  if ($1866) {
   $1868=$cfg;
   $1869=(($1868+96)|0);
   $1870=((HEAP32[(($1869)>>2)])|0);
   $1871=$cfg;
   $1872=(($1871)|0);
   $1873=((HEAP32[(($1872)>>2)])|0);
   $1874=((15168+($1873<<6))|0);
   $1875=(($1874+($1870<<2))|0);
   $1876=((HEAP32[(($1875)>>2)])|0);
   $1882=$1876;
  } else {
   $1878=$2;
   $1879=(($1878+168)|0);
   $1880=((HEAP32[(($1879)>>2)])|0);
   $1882=$1880;
  }

  $1883=$2;
  $1884=(($1883+168)|0);
  HEAP32[(($1884)>>2)]=$1882;
 }
 $1886=$2;
 $1887=(($1886+152)|0);
 $1888=((HEAP32[(($1887)>>2)])|0);
 $1889=$cfg;
 $1890=(($1889+84)|0);
 HEAP32[(($1890)>>2)]=$1888;
 $1891=$2;
 $1892=(($1891+36)|0);
 $1893=((HEAP32[(($1892)>>2)])|0);
 $1894=$cfg;
 $1895=(($1894+140)|0);
 HEAP32[(($1895)>>2)]=$1893;
 $1896=$2;
 $1897=(($1896+156)|0);
 $1898=((HEAP32[(($1897)>>2)])|0);
 $1899=$cfg;
 $1900=(($1899+88)|0);
 HEAP32[(($1900)>>2)]=$1898;
 $1901=$2;
 $1902=(($1901+80)|0);
 $1903=((HEAP32[(($1902)>>2)])|0);
 $1904=$gfc;
 $1905=(($1904+84768)|0);
 $1906=(($1905+328)|0);
 HEAP32[(($1906)>>2)]=$1903;
 $1907=$2;
 $1908=(($1907+84)|0);
 $1909=((HEAP32[(($1908)>>2)])|0);
 $1910=$cfg;
 $1911=(($1910+12)|0);
 HEAP32[(($1911)>>2)]=$1909;
 $1912=$2;
 $1913=(($1912+88)|0);
 $1914=((HEAP32[(($1913)>>2)])|0);
 $1915=$cfg;
 $1916=(($1915+16)|0);
 HEAP32[(($1916)>>2)]=$1914;
 $1917=$2;
 $1918=(($1917+92)|0);
 $1919=((HEAP32[(($1918)>>2)])|0);
 $1920=$cfg;
 $1921=(($1920+20)|0);
 HEAP32[(($1921)>>2)]=$1919;
 $1922=$2;
 $1923=(($1922+96)|0);
 $1924=((HEAP32[(($1923)>>2)])|0);
 $1925=$cfg;
 $1926=(($1925+104)|0);
 HEAP32[(($1926)>>2)]=$1924;
 $1927=$2;
 $1928=(($1927+168)|0);
 $1929=((HEAP32[(($1928)>>2)])|0);
 $1930=$cfg;
 $1931=(($1930+92)|0);
 HEAP32[(($1931)>>2)]=$1929;
 $1932=$2;
 $1933=(($1932+100)|0);
 $1934=(+(HEAPF32[(($1933)>>2)]));
 $1935=$cfg;
 $1936=(($1935+228)|0);
 HEAPF32[(($1936)>>2)]=$1934;
 $1937=$2;
 _lame_init_qval($1937);
 $1938=$2;
 $1939=(($1938+232)|0);
 $1940=((HEAP32[(($1939)>>2)])|0);
 $1941=($1940|0)<0;
 if ($1941) {
  $1943=$gfc;
  $1944=(($1943+85796)|0);
  $1945=((HEAP32[(($1944)>>2)])|0);
  $1946=(($1945)|0);
  HEAP32[(($1946)>>2)]=3;
 } else {
  $1948=$2;
  $1949=(($1948+232)|0);
  $1950=((HEAP32[(($1949)>>2)])|0);
  $1951=$gfc;
  $1952=(($1951+85796)|0);
  $1953=((HEAP32[(($1952)>>2)])|0);
  $1954=(($1953)|0);
  HEAP32[(($1954)>>2)]=$1950;
 }
 $1956=$2;
 $1957=(($1956+236)|0);
 $1958=(+(HEAPF32[(($1957)>>2)]));
 $1959=$1958;
 $1960=($1959)/((-10.0));
 $1961=(+(Math_pow(10.0,(+($1960)))));
 $1962=$1961;
 $1963=$gfc;
 $1964=(($1963+85796)|0);
 $1965=((HEAP32[(($1964)>>2)])|0);
 $1966=(($1965+4)|0);
 HEAPF32[(($1966)>>2)]=$1962;
 $1967=$2;
 $1968=(($1967+240)|0);
 $1969=((HEAP32[(($1968)>>2)])|0);
 $1970=($1969|0)==-1;
 if ($1970) {
  $1972=$2;
  $1973=(($1972+240)|0);
  HEAP32[(($1973)>>2)]=0;
 }
 $1975=$2;
 $1976=(($1975+240)|0);
 $1977=((HEAP32[(($1976)>>2)])|0);
 $1978=($1977|0)==0;
 do {
  if ($1978) {
   $1980=$cfg;
   $1981=(($1980+164)|0);
   $1982=((HEAP32[(($1981)>>2)])|0);
   $1983=($1982|0)==1;
   if (!($1983)) {
    $1985=$cfg;
    $1986=(($1985+164)|0);
    $1987=((HEAP32[(($1986)>>2)])|0);
    $1988=($1987|0)==0;
    if (!($1988)) {
     break;
    }
   }
   $1990=$2;
   $1991=(($1990+240)|0);
   HEAP32[(($1991)>>2)]=1;
  }
 } while(0);
 $1993=$2;
 $1994=(($1993+240)|0);
 $1995=((HEAP32[(($1994)>>2)])|0);
 $1996=$cfg;
 $1997=(($1996+168)|0);
 HEAP32[(($1997)>>2)]=$1995;
 $1998=$2;
 $1999=((_lame_get_quant_comp($1998))|0);
 $2000=($1999|0)<0;
 if ($2000) {
  $2002=$2;
  $2003=((_lame_set_quant_comp($2002,1))|0);
 }
 $2005=$2;
 $2006=((_lame_get_quant_comp_short($2005))|0);
 $2007=($2006|0)<0;
 if ($2007) {
  $2009=$2;
  $2010=((_lame_set_quant_comp_short($2009,0))|0);
 }
 $2012=$2;
 $2013=(+(_lame_get_msfix($2012)));
 $2014=$2013<(0.0);
 if ($2014) {
  $2016=$2;
  _lame_set_msfix($2016,0.0);
 }
 $2018=$2;
 $2019=$2;
 $2020=((_lame_get_exp_nspsytune($2019))|0);
 $2021=$2020|1;
 $2022=((_lame_set_exp_nspsytune($2018,$2021))|0);
 $2023=$2;
 $2024=(($2023+220)|0);
 $2025=((HEAP32[(($2024)>>2)])|0);
 $2026=($2025|0)<0;
 if ($2026) {
  $2028=$2;
  $2029=(($2028+220)|0);
  HEAP32[(($2029)>>2)]=4;
 }
 $2031=$2;
 $2032=(($2031+224)|0);
 $2033=(+(HEAPF32[(($2032)>>2)]));
 $2034=$2033<(0.0);
 if ($2034) {
  $2036=$2;
  $2037=(($2036+224)|0);
  HEAPF32[(($2037)>>2)]=4.0;
 }
 $2039=$2;
 $2040=(($2039+248)|0);
 $2041=(+(HEAPF32[(($2040)>>2)]));
 $2042=$2041<(0.0);
 if ($2042) {
  $2044=$2;
  $2045=(($2044+248)|0);
  HEAPF32[(($2045)>>2)]=0.0;
 }
 $2047=$2;
 $2048=(($2047+244)|0);
 $2049=((HEAP32[(($2048)>>2)])|0);
 $2050=($2049|0)<0;
 if ($2050) {
  $2052=$2;
  $2053=(($2052+244)|0);
  HEAP32[(($2053)>>2)]=1;
 }
 $2055=$2;
 $2056=(($2055+248)|0);
 $2057=(+(HEAPF32[(($2056)>>2)]));
 $2058=$cfg;
 $2059=(($2058+172)|0);
 HEAPF32[(($2059)>>2)]=$2057;
 $2060=$2;
 $2061=(($2060+252)|0);
 $2062=(+(HEAPF32[(($2061)>>2)]));
 $2063=$cfg;
 $2064=(($2063+176)|0);
 HEAPF32[(($2064)>>2)]=$2062;
 $2065=$2;
 $2066=(($2065+228)|0);
 $2067=(+(HEAPF32[(($2066)>>2)]));
 $2068=((0.0))-($2067);
 $2069=$cfg;
 $2070=(($2069+180)|0);
 HEAPF32[(($2070)>>2)]=$2068;
 $2071=$cfg;
 $2072=(($2071+180)|0);
 $2073=(+(HEAPF32[(($2072)>>2)]));
 $2074=($2073)*((0.10000000149011612));
 $2075=(+(Math_pow(10.0,(+($2074)))));
 $2076=$cfg;
 $2077=(($2076+184)|0);
 HEAPF32[(($2077)>>2)]=$2075;
 $2078=$2;
 $2079=(($2078+224)|0);
 $2080=(+(HEAPF32[(($2079)>>2)]));
 $2081=$cfg;
 $2082=(($2081+188)|0);
 HEAPF32[(($2082)>>2)]=$2080;
 $2083=$2;
 $2084=(($2083+220)|0);
 $2085=((HEAP32[(($2084)>>2)])|0);
 $2086=$cfg;
 $2087=(($2086+192)|0);
 HEAP32[(($2087)>>2)]=$2085;
 $2088=$2;
 $2089=(($2088+208)|0);
 $2090=((HEAP32[(($2089)>>2)])|0);
 $2091=$cfg;
 $2092=(($2091+196)|0);
 HEAP32[(($2092)>>2)]=$2090;
 $2093=$2;
 $2094=(($2093+212)|0);
 $2095=((HEAP32[(($2094)>>2)])|0);
 $2096=$cfg;
 $2097=(($2096+200)|0);
 HEAP32[(($2097)>>2)]=$2095;
 $2098=$2;
 $2099=(($2098+216)|0);
 $2100=((HEAP32[(($2099)>>2)])|0);
 $2101=$cfg;
 $2102=(($2101+204)|0);
 HEAP32[(($2102)>>2)]=$2100;
 $2103=$2;
 $2104=(($2103+132)|0);
 $2105=((HEAP32[(($2104)>>2)])|0);
 $2106=$cfg;
 $2107=(($2106+68)|0);
 HEAP32[(($2107)>>2)]=$2105;
 $2108=$2;
 $2109=(($2108+136)|0);
 $2110=((HEAP32[(($2109)>>2)])|0);
 $2111=$cfg;
 $2112=(($2111+72)|0);
 HEAP32[(($2112)>>2)]=$2110;
 $2113=$2;
 $2114=(($2113+244)|0);
 $2115=((HEAP32[(($2114)>>2)])|0);
 $2116=$cfg;
 $2117=(($2116+76)|0);
 HEAP32[(($2117)>>2)]=$2115;
 $2118=$2;
 $2119=(($2118+148)|0);
 $2120=((HEAP32[(($2119)>>2)])|0);
 $2121=$2120&2;
 $2122=$cfg;
 $2123=(($2122+80)|0);
 HEAP32[(($2123)>>2)]=$2121;
 $2124=$2;
 $2125=(($2124+148)|0);
 $2126=((HEAP32[(($2125)>>2)])|0);
 $2127=$2126>>2;
 $2128=$2127&63;
 $2129=(+((($2128|0))|0));
 $2130=$cfg;
 $2131=(($2130+216)|0);
 HEAPF32[(($2131)>>2)]=$2129;
 $2132=$cfg;
 $2133=(($2132+216)|0);
 $2134=(+(HEAPF32[(($2133)>>2)]));
 $2135=$2134>=(32.0);
 if ($2135) {
  $2137=$cfg;
  $2138=(($2137+216)|0);
  $2139=(+(HEAPF32[(($2138)>>2)]));
  $2140=($2139)-((64.0));
  HEAPF32[(($2138)>>2)]=$2140;
 }
 $2142=$cfg;
 $2143=(($2142+216)|0);
 $2144=(+(HEAPF32[(($2143)>>2)]));
 $2145=($2144)*((0.25));
 HEAPF32[(($2143)>>2)]=$2145;
 $2146=$2;
 $2147=(($2146+148)|0);
 $2148=((HEAP32[(($2147)>>2)])|0);
 $2149=$2148>>8;
 $2150=$2149&63;
 $2151=(+((($2150|0))|0));
 $2152=$cfg;
 $2153=(($2152+212)|0);
 HEAPF32[(($2153)>>2)]=$2151;
 $2154=$cfg;
 $2155=(($2154+212)|0);
 $2156=(+(HEAPF32[(($2155)>>2)]));
 $2157=$2156>=(32.0);
 if ($2157) {
  $2159=$cfg;
  $2160=(($2159+212)|0);
  $2161=(+(HEAPF32[(($2160)>>2)]));
  $2162=($2161)-((64.0));
  HEAPF32[(($2160)>>2)]=$2162;
 }
 $2164=$cfg;
 $2165=(($2164+212)|0);
 $2166=(+(HEAPF32[(($2165)>>2)]));
 $2167=($2166)*((0.25));
 HEAPF32[(($2165)>>2)]=$2167;
 $2168=$2;
 $2169=(($2168+148)|0);
 $2170=((HEAP32[(($2169)>>2)])|0);
 $2171=$2170>>14;
 $2172=$2171&63;
 $2173=(+((($2172|0))|0));
 $2174=$cfg;
 $2175=(($2174+220)|0);
 HEAPF32[(($2175)>>2)]=$2173;
 $2176=$cfg;
 $2177=(($2176+220)|0);
 $2178=(+(HEAPF32[(($2177)>>2)]));
 $2179=$2178>=(32.0);
 if ($2179) {
  $2181=$cfg;
  $2182=(($2181+220)|0);
  $2183=(+(HEAPF32[(($2182)>>2)]));
  $2184=($2183)-((64.0));
  HEAPF32[(($2182)>>2)]=$2184;
 }
 $2186=$cfg;
 $2187=(($2186+220)|0);
 $2188=(+(HEAPF32[(($2187)>>2)]));
 $2189=($2188)*((0.25));
 HEAPF32[(($2187)>>2)]=$2189;
 $2190=$2;
 $2191=(($2190+148)|0);
 $2192=((HEAP32[(($2191)>>2)])|0);
 $2193=$2192>>20;
 $2194=$2193&63;
 $2195=(+((($2194|0))|0));
 $2196=$cfg;
 $2197=(($2196+224)|0);
 HEAPF32[(($2197)>>2)]=$2195;
 $2198=$cfg;
 $2199=(($2198+224)|0);
 $2200=(+(HEAPF32[(($2199)>>2)]));
 $2201=$2200>=(32.0);
 if ($2201) {
  $2203=$cfg;
  $2204=(($2203+224)|0);
  $2205=(+(HEAPF32[(($2204)>>2)]));
  $2206=($2205)-((64.0));
  HEAPF32[(($2204)>>2)]=$2206;
 }
 $2208=$cfg;
 $2209=(($2208+224)|0);
 $2210=(+(HEAPF32[(($2209)>>2)]));
 $2211=($2210)*((0.25));
 HEAPF32[(($2209)>>2)]=$2211;
 $2212=$cfg;
 $2213=(($2212+220)|0);
 $2214=(+(HEAPF32[(($2213)>>2)]));
 $2215=$cfg;
 $2216=(($2215+224)|0);
 $2217=(+(HEAPF32[(($2216)>>2)]));
 $2218=($2217)+($2214);
 HEAPF32[(($2216)>>2)]=$2218;
 $2219=$m10;
 HEAP32[(($2219)>>2)]=((HEAP32[((11904)>>2)])|0);HEAP32[((($2219)+(4))>>2)]=((HEAP32[((11908)>>2)])|0);HEAP32[((($2219)+(8))>>2)]=((HEAP32[((11912)>>2)])|0);HEAP32[((($2219)+(12))>>2)]=((HEAP32[((11916)>>2)])|0);
 $2220=$2;
 $2221=(($2220+20)|0);
 $2222=(+(HEAPF32[(($2221)>>2)]));
 $2223=(($m10)|0);
 $2224=(($2223)|0);
 $2225=(+(HEAPF32[(($2224)>>2)]));
 $2226=($2225)*($2222);
 HEAPF32[(($2224)>>2)]=$2226;
 $2227=$2;
 $2228=(($2227+20)|0);
 $2229=(+(HEAPF32[(($2228)>>2)]));
 $2230=(($m10)|0);
 $2231=(($2230+4)|0);
 $2232=(+(HEAPF32[(($2231)>>2)]));
 $2233=($2232)*($2229);
 HEAPF32[(($2231)>>2)]=$2233;
 $2234=$2;
 $2235=(($2234+20)|0);
 $2236=(+(HEAPF32[(($2235)>>2)]));
 $2237=(($m10+8)|0);
 $2238=(($2237)|0);
 $2239=(+(HEAPF32[(($2238)>>2)]));
 $2240=($2239)*($2236);
 HEAPF32[(($2238)>>2)]=$2240;
 $2241=$2;
 $2242=(($2241+20)|0);
 $2243=(+(HEAPF32[(($2242)>>2)]));
 $2244=(($m10+8)|0);
 $2245=(($2244+4)|0);
 $2246=(+(HEAPF32[(($2245)>>2)]));
 $2247=($2246)*($2243);
 HEAPF32[(($2245)>>2)]=$2247;
 $2248=$2;
 $2249=(($2248+24)|0);
 $2250=(+(HEAPF32[(($2249)>>2)]));
 $2251=(($m10)|0);
 $2252=(($2251)|0);
 $2253=(+(HEAPF32[(($2252)>>2)]));
 $2254=($2253)*($2250);
 HEAPF32[(($2252)>>2)]=$2254;
 $2255=$2;
 $2256=(($2255+24)|0);
 $2257=(+(HEAPF32[(($2256)>>2)]));
 $2258=(($m10)|0);
 $2259=(($2258+4)|0);
 $2260=(+(HEAPF32[(($2259)>>2)]));
 $2261=($2260)*($2257);
 HEAPF32[(($2259)>>2)]=$2261;
 $2262=$2;
 $2263=(($2262+28)|0);
 $2264=(+(HEAPF32[(($2263)>>2)]));
 $2265=(($m10+8)|0);
 $2266=(($2265)|0);
 $2267=(+(HEAPF32[(($2266)>>2)]));
 $2268=($2267)*($2264);
 HEAPF32[(($2266)>>2)]=$2268;
 $2269=$2;
 $2270=(($2269+28)|0);
 $2271=(+(HEAPF32[(($2270)>>2)]));
 $2272=(($m10+8)|0);
 $2273=(($2272+4)|0);
 $2274=(+(HEAPF32[(($2273)>>2)]));
 $2275=($2274)*($2271);
 HEAPF32[(($2273)>>2)]=$2275;
 $2276=$cfg;
 $2277=(($2276+52)|0);
 $2278=((HEAP32[(($2277)>>2)])|0);
 $2279=($2278|0)==2;
 do {
  if ($2279) {
   $2281=$cfg;
   $2282=(($2281+56)|0);
   $2283=((HEAP32[(($2282)>>2)])|0);
   $2284=($2283|0)==1;
   if (!($2284)) {
    break;
   }
   $2286=(($m10)|0);
   $2287=(($2286)|0);
   $2288=(+(HEAPF32[(($2287)>>2)]));
   $2289=(($m10+8)|0);
   $2290=(($2289)|0);
   $2291=(+(HEAPF32[(($2290)>>2)]));
   $2292=($2288)+($2291);
   $2293=((0.5))*($2292);
   $2294=(($m10)|0);
   $2295=(($2294)|0);
   HEAPF32[(($2295)>>2)]=$2293;
   $2296=(($m10)|0);
   $2297=(($2296+4)|0);
   $2298=(+(HEAPF32[(($2297)>>2)]));
   $2299=(($m10+8)|0);
   $2300=(($2299+4)|0);
   $2301=(+(HEAPF32[(($2300)>>2)]));
   $2302=($2298)+($2301);
   $2303=((0.5))*($2302);
   $2304=(($m10)|0);
   $2305=(($2304+4)|0);
   HEAPF32[(($2305)>>2)]=$2303;
   $2306=(($m10+8)|0);
   $2307=(($2306)|0);
   HEAPF32[(($2307)>>2)]=0.0;
   $2308=(($m10+8)|0);
   $2309=(($2308+4)|0);
   HEAPF32[(($2309)>>2)]=0.0;
  }
 } while(0);
 $2311=(($m10)|0);
 $2312=(($2311)|0);
 $2313=(+(HEAPF32[(($2312)>>2)]));
 $2314=$cfg;
 $2315=(($2314+248)|0);
 $2316=(($2315)|0);
 $2317=(($2316)|0);
 HEAPF32[(($2317)>>2)]=$2313;
 $2318=(($m10)|0);
 $2319=(($2318+4)|0);
 $2320=(+(HEAPF32[(($2319)>>2)]));
 $2321=$cfg;
 $2322=(($2321+248)|0);
 $2323=(($2322)|0);
 $2324=(($2323+4)|0);
 HEAPF32[(($2324)>>2)]=$2320;
 $2325=(($m10+8)|0);
 $2326=(($2325)|0);
 $2327=(+(HEAPF32[(($2326)>>2)]));
 $2328=$cfg;
 $2329=(($2328+248)|0);
 $2330=(($2329+8)|0);
 $2331=(($2330)|0);
 HEAPF32[(($2331)>>2)]=$2327;
 $2332=(($m10+8)|0);
 $2333=(($2332+4)|0);
 $2334=(+(HEAPF32[(($2333)>>2)]));
 $2335=$cfg;
 $2336=(($2335+248)|0);
 $2337=(($2336+8)|0);
 $2338=(($2337+4)|0);
 HEAPF32[(($2338)>>2)]=$2334;
 $2339=$gfc;
 $2340=(($2339+27824)|0);
 $2341=(($2340+12008)|0);
 HEAP32[(($2341)>>2)]=0;
 $2342=$gfc;
 $2343=(($2342+27824)|0);
 $2344=(($2343+12012)|0);
 HEAP32[(($2344)>>2)]=0;
 $2345=$cfg;
 $2346=(($2345+88)|0);
 $2347=((HEAP32[(($2346)>>2)])|0);
 $2348=($2347|0)==0;
 if ($2348) {
  $2350=$cfg;
  $2351=(($2350)|0);
  $2352=((HEAP32[(($2351)>>2)])|0);
  $2353=((($2352)+(1))|0);
  $2354=((($2353)*(72000))&-1);
  $2355=$cfg;
  $2356=(($2355+104)|0);
  $2357=((HEAP32[(($2356)>>2)])|0);
  $2358=(Math_imul($2354,$2357)|0);
  $2359=$cfg;
  $2360=(($2359+48)|0);
  $2361=((HEAP32[(($2360)>>2)])|0);
  $2362=(((($2358|0))%(($2361|0)))&-1);
  $2363=$gfc;
  $2364=(($2363+27824)|0);
  $2365=(($2364+12008)|0);
  HEAP32[(($2365)>>2)]=$2362;
  $2366=$gfc;
  $2367=(($2366+27824)|0);
  $2368=(($2367+12012)|0);
  HEAP32[(($2368)>>2)]=$2362;
 }
 $2370=$2;
 $2371=((_lame_init_bitstream($2370))|0);
 $2372=$gfc;
 _iteration_init($2372);
 $2373=$2;
 $2374=((_psymodel_init($2373))|0);
 $2375=$cfg;
 $2376=$2;
 $2377=(($2376+124)|0);
 $2378=((HEAP32[(($2377)>>2)])|0);
 $2379=((_get_max_frame_buffer_size_by_constraint($2375,$2378))|0);
 $2380=$cfg;
 $2381=(($2380+132)|0);
 HEAP32[(($2381)>>2)]=$2379;
 $1=0;
 $2383=$1;
 STACKTOP=sp;return (($2383)|0);
}


function _lame_init_bitstream($gfp){
 $gfp=($gfp)|0;
 var $1=0,$2=0,$gfc=0,$3=0,$4=0,$5=0,$7=0,$8=0,$9=0,$10=0,$11=0,$13=0,$14=0,$15=0,$16=0,$17=0,$18=0,$19=0,$21=0,$22=0;
 var $24=0,$25=0,$26=0,$27=0,$28=0,$29=0,$30=0,$31=0,$32=0,$33=0,$34=0,$35=0,$36=0,$37=0,$38=0,$39=0,$41=0,$42=0,$47=0,label=0;
 var sp=0;sp=STACKTOP;



 $2=$gfp;
 $3=$2;
 $4=((_is_lame_global_flags_valid($3))|0);
 $5=($4|0)!=0;
 do {
  if ($5) {
   $7=$2;
   $8=(($7+288)|0);
   $9=((HEAP32[(($8)>>2)])|0);
   $gfc=$9;
   $10=$gfc;
   $11=($10|0)!=0;
   if (!($11)) {
    break;
   }
   $13=$gfc;
   $14=(($13+84040)|0);
   $15=(($14+708)|0);
   HEAP32[(($15)>>2)]=0;
   $16=$2;
   $17=(($16+68)|0);
   $18=((HEAP32[(($17)>>2)])|0);
   $19=($18|0)!=0;
   if ($19) {
    $21=$2;
    $22=((_id3tag_write_v2($21))|0);
   }
   $24=$gfc;
   $25=(($24+84040)|0);
   $26=(($25)|0);
   $27=$26;
   _memset((((($27)|0))|0), ((((0)|0))|0), ((((320)|0))|0))|0;
   $28=$gfc;
   $29=(($28+84040)|0);
   $30=(($29+320)|0);
   $31=$30;
   _memset((((($31)|0))|0), ((((0)|0))|0), ((((384)|0))|0))|0;
   $32=$gfc;
   $33=(($32+85680)|0);
   $34=(($33+4)|0);
   HEAPF32[(($34)>>2)]=0.0;
   $35=$gfc;
   $36=(($35+16)|0);
   $37=(($36+140)|0);
   $38=((HEAP32[(($37)>>2)])|0);
   $39=($38|0)!=0;
   if ($39) {
    $41=$2;
    $42=((_InitVbrTag($41))|0);
   }
   $1=0;
   $47=$1;
   STACKTOP=sp;return (($47)|0);
  }
 } while(0);
 $1=-3;
 $47=$1;
 STACKTOP=sp;return (($47)|0);
}


function _lame_encode_buffer($gfp,$pcm_l,$pcm_r,$nsamples,$mp3buf,$mp3buf_size){
 $gfp=($gfp)|0;
 $pcm_l=($pcm_l)|0;
 $pcm_r=($pcm_r)|0;
 $nsamples=($nsamples)|0;
 $mp3buf=($mp3buf)|0;
 $mp3buf_size=($mp3buf_size)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$14=0,$15=0,label=0;
 var sp=0;sp=STACKTOP;






 $1=$gfp;
 $2=$pcm_l;
 $3=$pcm_r;
 $4=$nsamples;
 $5=$mp3buf;
 $6=$mp3buf_size;
 $7=$1;
 $8=$2;
 $9=$8;
 $10=$3;
 $11=$10;
 $12=$4;
 $13=$5;
 $14=$6;
 $15=((_lame_encode_buffer_template($7,$9,$11,$12,$13,$14,0,1,1.0))|0);
 STACKTOP=sp;return (($15)|0);
}


function _lame_encode_buffer_ieee_float($gfp,$pcm_l,$pcm_r,$nsamples,$mp3buf,$mp3buf_size){
 $gfp=($gfp)|0;
 $pcm_l=($pcm_l)|0;
 $pcm_r=($pcm_r)|0;
 $nsamples=($nsamples)|0;
 $mp3buf=($mp3buf)|0;
 $mp3buf_size=($mp3buf_size)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$14=0,$15=0,label=0;
 var sp=0;sp=STACKTOP;






 $1=$gfp;
 $2=$pcm_l;
 $3=$pcm_r;
 $4=$nsamples;
 $5=$mp3buf;
 $6=$mp3buf_size;
 $7=$1;
 $8=$2;
 $9=$8;
 $10=$3;
 $11=$10;
 $12=$4;
 $13=$5;
 $14=$6;
 $15=((_lame_encode_buffer_template($7,$9,$11,$12,$13,$14,3,1,32767.0))|0);
 STACKTOP=sp;return (($15)|0);
}


function _lame_encode_flush($gfp,$mp3buffer,$mp3buffer_size){
 $gfp=($gfp)|0;
 $mp3buffer=($mp3buffer)|0;
 $mp3buffer_size=($mp3buffer_size)|0;
 var $1=0,$2=0,$3=0,$4=0,$gfc=0,$cfg=0,$esv=0,$buffer=0,$imp3=0,$mp3count=0,$mp3buffer_size_remaining=0,$end_padding=0,$frames_left=0,$samples_to_encode=0,$pcm_samples_per_frame=0,$mf_needed=0,$is_resampling_necessary=0,$resample_ratio=.0,$frame_num=0,$bunch=0;
 var $5=0,$6=0,$7=0,$10=0,$11=0,$12=0,$13=0,$14=0,$15=0,$18=0,$19=0,$20=0,$21=0,$22=0,$23=0,$24=0,$25=0,$28=0,$29=0,$30=0;
 var $31=0,$32=0,$33=0,$34=0,$35=0,$36=0,$37=0,$38=0,$39=0,$40=0,$41=0,$42=0,$44=0,$45=0,$46=0,$47=.0,$48=0,$49=0,$50=0,$51=.0;
 var $52=.0,$53=.0,$54=.0,$55=0,$56=.0,$57=.0,$58=0,$60=0,$61=0,$62=0,$63=0,$64=0,$65=0,$66=0,$68=0,$69=0,$70=0,$72=0,$73=0,$74=0;
 var $75=0,$76=0,$77=0,$78=0,$79=0,$80=0,$82=0,$83=0,$85=0,$86=0,$88=0,$90=0,$91=0,$92=0,$93=0,$94=0,$95=0,$96=0,$97=0,$98=0;
 var $99=.0,$100=0,$101=.0,$102=.0,$103=0,$104=0,$105=0,$108=0,$109=0,$112=0,$113=0,$114=0,$115=0,$116=0,$119=0,$120=0,$121=0,$122=0,$123=0,$124=0;
 var $125=0,$126=0,$127=0,$128=0,$129=0,$130=0,$131=0,$132=0,$133=0,$134=0,$135=0,$136=0,$137=0,$138=0,$139=0,$140=0,$141=0,$142=0,$144=0,$145=0;
 var $146=0,$147=0,$149=0,$151=0,$152=0,$153=0,$154=0,$155=0,$158=0,$159=0,$160=0,$161=0,$162=0,$163=0,$164=0,$165=0,$167=0,$169=0,$170=0,$171=0;
 var $172=0,$173=0,$174=0,$175=0,$176=0,$177=0,$178=0,$179=0,$182=0,$183=0,$184=0,$185=0,$187=0,$188=0,$189=0,$190=0,$191=0,$192=0,$193=0,$194=0;
 var $196=0,$198=0,$199=0,$200=0,$202=0,$204=0,label=0;
 var sp=0;sp=STACKTOP;STACKTOP=(STACKTOP+4608)|0;







 $buffer=((sp)|0);












 $2=$gfp;
 $3=$mp3buffer;
 $4=$mp3buffer_size;
 $imp3=0;
 $resample_ratio=1.0;
 $5=$2;
 $6=((_is_lame_global_flags_valid($5))|0);
 $7=($6|0)!=0;
 if (!($7)) {
  $1=-3;
  $204=$1;
  STACKTOP=sp;return (($204)|0);
 }
 $10=$2;
 $11=(($10+288)|0);
 $12=((HEAP32[(($11)>>2)])|0);
 $gfc=$12;
 $13=$gfc;
 $14=((_is_lame_internal_flags_valid($13))|0);
 $15=($14|0)!=0;
 if (!($15)) {
  $1=-3;
  $204=$1;
  STACKTOP=sp;return (($204)|0);
 }
 $18=$gfc;
 $19=(($18+16)|0);
 $cfg=$19;
 $20=$gfc;
 $21=(($20+27824)|0);
 $esv=$21;
 $22=$esv;
 $23=(($22+56208)|0);
 $24=((HEAP32[(($23)>>2)])|0);
 $25=($24|0)<1;
 if ($25) {
  $1=0;
  $204=$1;
  STACKTOP=sp;return (($204)|0);
 }
 $28=$cfg;
 $29=(($28+60)|0);
 $30=((HEAP32[(($29)>>2)])|0);
 $31=((($30)*(576))&-1);
 $pcm_samples_per_frame=$31;
 $32=$cfg;
 $33=((_calcNeeded($32))|0);
 $mf_needed=$33;
 $34=$esv;
 $35=(($34+56208)|0);
 $36=((HEAP32[(($35)>>2)])|0);
 $37=((($36)-(1152))|0);
 $samples_to_encode=$37;
 $38=$buffer;
 _memset((((($38)|0))|0), ((((0)|0))|0), ((((4608)|0))|0))|0;
 $mp3count=0;
 $39=$cfg;
 $40=((_isResamplingNecessary($39))|0);
 $is_resampling_necessary=$40;
 $41=$is_resampling_necessary;
 $42=($41|0)!=0;
 if ($42) {
  $44=$cfg;
  $45=(($44+44)|0);
  $46=((HEAP32[(($45)>>2)])|0);
  $47=(+((($46|0))|0));
  $48=$cfg;
  $49=(($48+48)|0);
  $50=((HEAP32[(($49)>>2)])|0);
  $51=(+((($50|0))|0));
  $52=($47)/($51);
  $resample_ratio=$52;
  $53=$resample_ratio;
  $54=((16.0))/($53);
  $55=$samples_to_encode;
  $56=(+((($55|0))|0));
  $57=($56)+($54);
  $58=(~~($57));
  $samples_to_encode=$58;
 }
 $60=$pcm_samples_per_frame;
 $61=$samples_to_encode;
 $62=$pcm_samples_per_frame;
 $63=(((($61|0))%(($62|0)))&-1);
 $64=((($60)-($63))|0);
 $end_padding=$64;
 $65=$end_padding;
 $66=($65|0)<576;
 if ($66) {
  $68=$pcm_samples_per_frame;
  $69=$end_padding;
  $70=((($69)+($68))|0);
  $end_padding=$70;
 }
 $72=$end_padding;
 $73=$gfc;
 $74=(($73+84040)|0);
 $75=(($74+724)|0);
 HEAP32[(($75)>>2)]=$72;
 $76=$samples_to_encode;
 $77=$end_padding;
 $78=((($76)+($77))|0);
 $79=$pcm_samples_per_frame;
 $80=(((($78|0))/(($79|0)))&-1);
 $frames_left=$80;
 while(1) {
  $82=$frames_left;
  $83=($82|0)>0;
  if ($83) {
   $85=$imp3;
   $86=($85|0)>=0;
   $88=$86;
  } else {
   $88=0;
  }

  if (!($88)) {
   break;
  }
  $90=$gfc;
  $91=(($90+84040)|0);
  $92=(($91+708)|0);
  $93=((HEAP32[(($92)>>2)])|0);
  $frame_num=$93;
  $94=$mf_needed;
  $95=$esv;
  $96=(($95+56212)|0);
  $97=((HEAP32[(($96)>>2)])|0);
  $98=((($94)-($97))|0);
  $bunch=$98;
  $99=$resample_ratio;
  $100=$bunch;
  $101=(+((($100|0))|0));
  $102=($101)*($99);
  $103=(~~($102));
  $bunch=$103;
  $104=$bunch;
  $105=($104|0)>1152;
  if ($105) {
   $bunch=1152;
  }
  $108=$bunch;
  $109=($108|0)<1;
  if ($109) {
   $bunch=1;
  }
  $112=$4;
  $113=$mp3count;
  $114=((($112)-($113))|0);
  $mp3buffer_size_remaining=$114;
  $115=$4;
  $116=($115|0)==0;
  if ($116) {
   $mp3buffer_size_remaining=0;
  }
  $119=$2;
  $120=(($buffer)|0);
  $121=(($120)|0);
  $122=(($buffer+2304)|0);
  $123=(($122)|0);
  $124=$bunch;
  $125=$3;
  $126=$mp3buffer_size_remaining;
  $127=((_lame_encode_buffer($119,$121,$123,$124,$125,$126))|0);
  $imp3=$127;
  $128=$imp3;
  $129=$3;
  $130=(($129+$128)|0);
  $3=$130;
  $131=$imp3;
  $132=$mp3count;
  $133=((($132)+($131))|0);
  $mp3count=$133;
  $134=$frame_num;
  $135=$gfc;
  $136=(($135+84040)|0);
  $137=(($136+708)|0);
  $138=((HEAP32[(($137)>>2)])|0);
  $139=($134|0)!=($138|0);
  $140=($139?1:0);
  $141=$frames_left;
  $142=((($141)-($140))|0);
  $frames_left=$142;
 }
 $144=$esv;
 $145=(($144+56208)|0);
 HEAP32[(($145)>>2)]=0;
 $146=$imp3;
 $147=($146|0)<0;
 if ($147) {
  $149=$imp3;
  $1=$149;
  $204=$1;
  STACKTOP=sp;return (($204)|0);
 }
 $151=$4;
 $152=$mp3count;
 $153=((($151)-($152))|0);
 $mp3buffer_size_remaining=$153;
 $154=$4;
 $155=($154|0)==0;
 if ($155) {
  $mp3buffer_size_remaining=0;
 }
 $158=$gfc;
 _flush_bitstream($158);
 $159=$gfc;
 $160=$3;
 $161=$mp3buffer_size_remaining;
 $162=((_copy_buffer($159,$160,$161,1))|0);
 $imp3=$162;
 $163=$gfc;
 _save_gain_values($163);
 $164=$imp3;
 $165=($164|0)<0;
 if ($165) {
  $167=$imp3;
  $1=$167;
  $204=$1;
  STACKTOP=sp;return (($204)|0);
 }
 $169=$imp3;
 $170=$3;
 $171=(($170+$169)|0);
 $3=$171;
 $172=$imp3;
 $173=$mp3count;
 $174=((($173)+($172))|0);
 $mp3count=$174;
 $175=$4;
 $176=$mp3count;
 $177=((($175)-($176))|0);
 $mp3buffer_size_remaining=$177;
 $178=$4;
 $179=($178|0)==0;
 if ($179) {
  $mp3buffer_size_remaining=0;
 }
 $182=$2;
 $183=(($182+68)|0);
 $184=((HEAP32[(($183)>>2)])|0);
 $185=($184|0)!=0;
 do {
  if ($185) {
   $187=$2;
   $188=((_id3tag_write_v1($187))|0);
   $189=$gfc;
   $190=$3;
   $191=$mp3buffer_size_remaining;
   $192=((_copy_buffer($189,$190,$191,0))|0);
   $imp3=$192;
   $193=$imp3;
   $194=($193|0)<0;
   if (!($194)) {
    $198=$imp3;
    $199=$mp3count;
    $200=((($199)+($198))|0);
    $mp3count=$200;
    break;
   }
   $196=$imp3;
   $1=$196;
   $204=$1;
   STACKTOP=sp;return (($204)|0);
  }
 } while(0);
 $202=$mp3count;
 $1=$202;
 $204=$1;
 STACKTOP=sp;return (($204)|0);
}


function _lame_close($gfp){
 $gfp=($gfp)|0;
 var $1=0,$ret=0,$gfc=0,$2=0,$3=0,$5=0,$6=0,$7=0,$8=0,$10=0,$11=0,$12=0,$13=0,$14=0,$15=0,$16=0,$18=0,$19=0,$20=0,$21=0;
 var $24=0,$25=0,$27=0,$28=0,$29=0,$30=0,$31=0,$33=0,$34=0,$35=0,$36=0,$38=0,$39=0,$40=0,$41=0,$44=0,label=0;
 var sp=0;sp=STACKTOP;



 $1=$gfp;
 $ret=0;
 $2=$1;
 $3=($2|0)!=0;
 if (!($3)) {
  $44=$ret;
  STACKTOP=sp;return (($44)|0);
 }
 $5=$1;
 $6=(($5)|0);
 $7=((HEAP32[(($6)>>2)])|0);
 $8=($7|0)==-487877;
 if (!($8)) {
  $44=$ret;
  STACKTOP=sp;return (($44)|0);
 }
 $10=$1;
 $11=(($10+288)|0);
 $12=((HEAP32[(($11)>>2)])|0);
 $gfc=$12;
 $13=$1;
 $14=(($13)|0);
 HEAP32[(($14)>>2)]=0;
 $15=$gfc;
 $16=0==($15|0);
 if ($16) {
  label = 5;
 } else {
  $18=$gfc;
  $19=(($18)|0);
  $20=((HEAP32[(($19)>>2)])|0);
  $21=($20|0)!=-487877;
  if ($21) {
   label = 5;
  }
 }
 if ((label|0) == 5) {
  $ret=-3;
 }
 $24=$gfc;
 $25=0!=($24|0);
 if ($25) {
  $27=$gfc;
  $28=(($27)|0);
  HEAP32[(($28)>>2)]=0;
  $29=$gfc;
  _freegfc($29);
  $30=$1;
  $31=(($30+288)|0);
  HEAP32[(($31)>>2)]=0;
 }
 $33=$1;
 $34=(($33+284)|0);
 $35=((HEAP32[(($34)>>2)])|0);
 $36=($35|0)!=0;
 if ($36) {
  $38=$1;
  $39=(($38+284)|0);
  HEAP32[(($39)>>2)]=0;
  $40=$1;
  $41=$40;
  _free($41);
 }
 $44=$ret;
 STACKTOP=sp;return (($44)|0);
}


function _lame_init(){
 var $1=0,$gfp=0,$ret=0,$2=0,$3=0,$4=0,$5=0,$8=0,$9=0,$10=0,$11=0,$13=0,$14=0,$16=0,$17=0,$18=0,$20=0,label=0;
 var sp=0;sp=STACKTOP;



 _init_log_table();
 $2=((_calloc(1,304))|0);
 $3=$2;
 $gfp=$3;
 $4=$gfp;
 $5=($4|0)==0;
 do {
  if ($5) {
   $1=0;
  } else {
   $8=$gfp;
   $9=((_lame_init_old($8))|0);
   $ret=$9;
   $10=$ret;
   $11=($10|0)!=0;
   if ($11) {
    $13=$gfp;
    $14=$13;
    _free($14);
    $1=0;
    break;
   } else {
    $16=$gfp;
    $17=(($16+284)|0);
    HEAP32[(($17)>>2)]=1;
    $18=$gfp;
    $1=$18;
    break;
   }
  }
 } while(0);
 $20=$1;
 STACKTOP=sp;return (($20)|0);
}


function _optimum_bandwidth($lowerlimit,$upperlimit,$bitrate){
 $lowerlimit=($lowerlimit)|0;
 $upperlimit=($upperlimit)|0;
 $bitrate=($bitrate)|0;
 var $1=0,$2=0,$3=0,$table_index=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$14=0,$15=.0,$16=0,$17=0,label=0;
 var sp=0;sp=STACKTOP;




 $1=$lowerlimit;
 $2=$upperlimit;
 $3=$bitrate;
 $4=$3;
 $5=(($4)&65535);
 $6=((_nearestBitrateFullIndex($5))|0);
 $table_index=$6;
 $7=$table_index;
 $8=((9968+($7<<3))|0);
 $9=(($8)|0);
 $10=((HEAP32[(($9)>>2)])|0);
 $11=$table_index;
 $12=((9968+($11<<3))|0);
 $13=(($12+4)|0);
 $14=((HEAP32[(($13)>>2)])|0);
 $15=(+((($14|0))|0));
 $16=$1;
 HEAPF64[(($16)>>3)]=$15;
 $17=$2;
 STACKTOP=sp;return;
}


function _linear_int($a,$b,$m){
 $a=+($a);
 $b=+($b);
 $m=+($m);
 var $1=.0,$2=.0,$3=.0,$4=.0,$5=.0,$6=.0,$7=.0,$8=.0,$9=.0,$10=.0,label=0;
 var sp=0;sp=STACKTOP;



 $1=$a;
 $2=$b;
 $3=$m;
 $4=$1;
 $5=$3;
 $6=$2;
 $7=$1;
 $8=($6)-($7);
 $9=($5)*($8);
 $10=($4)+($9);
 STACKTOP=sp;return (+($10));
}


function _optimum_samplefreq($lowpassfreq,$input_samplefreq){
 $lowpassfreq=($lowpassfreq)|0;
 $input_samplefreq=($input_samplefreq)|0;
 var $1=0,$2=0,$3=0,$suggested_samplefreq=0,$4=0,$5=0,$8=0,$9=0,$12=0,$13=0,$16=0,$17=0,$20=0,$21=0,$24=0,$25=0,$28=0,$29=0,$32=0,$33=0;
 var $36=0,$37=0,$48=0,$49=0,$51=0,$53=0,$54=0,$57=0,$58=0,$61=0,$62=0,$65=0,$66=0,$69=0,$70=0,$73=0,$74=0,$77=0,$78=0,$81=0;
 var $82=0,$85=0,$86=0,$87=0,$89=0,$90=0,$93=0,$94=0,$97=0,$98=0,$101=0,$102=0,$105=0,$106=0,$109=0,$110=0,$113=0,$114=0,$117=0,$118=0;
 var $122=0,$124=0,label=0;
 var sp=0;sp=STACKTOP;




 $2=$lowpassfreq;
 $3=$input_samplefreq;
 $suggested_samplefreq=44100;
 $4=$3;
 $5=($4|0)>=48000;
 if ($5) {
  $suggested_samplefreq=48000;
 } else {
  $8=$3;
  $9=($8|0)>=44100;
  if ($9) {
   $suggested_samplefreq=44100;
  } else {
   $12=$3;
   $13=($12|0)>=32000;
   if ($13) {
    $suggested_samplefreq=32000;
   } else {
    $16=$3;
    $17=($16|0)>=24000;
    if ($17) {
     $suggested_samplefreq=24000;
    } else {
     $20=$3;
     $21=($20|0)>=22050;
     if ($21) {
      $suggested_samplefreq=22050;
     } else {
      $24=$3;
      $25=($24|0)>=16000;
      if ($25) {
       $suggested_samplefreq=16000;
      } else {
       $28=$3;
       $29=($28|0)>=12000;
       if ($29) {
        $suggested_samplefreq=12000;
       } else {
        $32=$3;
        $33=($32|0)>=11025;
        if ($33) {
         $suggested_samplefreq=11025;
        } else {
         $36=$3;
         $37=($36|0)>=8000;
         if ($37) {
          $suggested_samplefreq=8000;
         }
        }
       }
      }
     }
    }
   }
  }
 }
 $48=$2;
 $49=($48|0)==-1;
 do {
  if ($49) {
   $51=$suggested_samplefreq;
   $1=$51;
  } else {
   $53=$2;
   $54=($53|0)<=15960;
   if ($54) {
    $suggested_samplefreq=44100;
   }
   $57=$2;
   $58=($57|0)<=15250;
   if ($58) {
    $suggested_samplefreq=32000;
   }
   $61=$2;
   $62=($61|0)<=11220;
   if ($62) {
    $suggested_samplefreq=24000;
   }
   $65=$2;
   $66=($65|0)<=9970;
   if ($66) {
    $suggested_samplefreq=22050;
   }
   $69=$2;
   $70=($69|0)<=7230;
   if ($70) {
    $suggested_samplefreq=16000;
   }
   $73=$2;
   $74=($73|0)<=5420;
   if ($74) {
    $suggested_samplefreq=12000;
   }
   $77=$2;
   $78=($77|0)<=4510;
   if ($78) {
    $suggested_samplefreq=11025;
   }
   $81=$2;
   $82=($81|0)<=3970;
   if ($82) {
    $suggested_samplefreq=8000;
   }
   $85=$3;
   $86=$suggested_samplefreq;
   $87=($85|0)<($86|0);
   if (!($87)) {
    $122=$suggested_samplefreq;
    $1=$122;
    break;
   }
   $89=$3;
   $90=($89|0)>44100;
   if ($90) {
    $1=48000;
    break;
   }
   $93=$3;
   $94=($93|0)>32000;
   if ($94) {
    $1=44100;
    break;
   }
   $97=$3;
   $98=($97|0)>24000;
   if ($98) {
    $1=32000;
    break;
   }
   $101=$3;
   $102=($101|0)>22050;
   if ($102) {
    $1=24000;
    break;
   }
   $105=$3;
   $106=($105|0)>16000;
   if ($106) {
    $1=22050;
    break;
   }
   $109=$3;
   $110=($109|0)>12000;
   if ($110) {
    $1=16000;
    break;
   }
   $113=$3;
   $114=($113|0)>11025;
   if ($114) {
    $1=12000;
    break;
   }
   $117=$3;
   $118=($117|0)>8000;
   if ($118) {
    $1=11025;
    break;
   } else {
    $1=8000;
    break;
   }
  }
 } while(0);
 $124=$1;
 STACKTOP=sp;return (($124)|0);
}


function _lame_init_params_ppflt($gfc){
 $gfc=($gfc)|0;
 var $1=0,$cfg=0,$band=0,$maxband=0,$minband=0,$freq=.0,$lowpass_band=0,$highpass_band=0,$fc1=.0,$fc2=.0,$2=0,$3=0,$4=0,$5=0,$6=.0,$7=0,$10=0,$11=0,$13=0,$14=.0;
 var $15=.0,$16=.0,$17=.0,$18=0,$19=0,$20=.0,$21=0,$23=0,$24=0,$25=0,$27=0,$29=0,$31=0,$33=0,$34=0,$35=.0,$36=.0,$37=0,$39=.0,$40=0;
 var $41=0,$42=.0,$43=0,$45=0,$46=0,$47=0,$49=0,$51=0,$53=0,$56=0,$57=0,$59=0,$60=0,$62=0,$63=.0,$64=.0,$65=.0,$66=.0,$67=0,$68=0;
 var $70=0,$71=.0,$72=.0,$73=.0,$74=.0,$75=0,$76=0,$78=0,$79=.0,$80=.0,$81=.0,$82=0,$83=0,$85=0,$86=0,$87=.0,$88=0,$90=0,$91=0,$92=.0;
 var $93=.0,$94=0,$96=0,$97=0,$98=0,$99=0,$100=0,$103=0,$104=0,$105=.0,$106=0,$109=0,$110=0,$112=0,$113=.0,$114=.0,$115=.0,$116=.0,$117=0,$118=0;
 var $119=.0,$120=0,$122=0,$123=0,$124=0,$126=0,$128=0,$130=0,$132=0,$133=0,$134=.0,$135=.0,$136=0,$138=.0,$139=0,$140=0,$141=.0,$142=0,$144=0,$145=0;
 var $146=0,$148=0,$150=0,$152=0,$155=0,$156=0,$158=0,$159=.0,$160=.0,$161=.0,$162=0,$163=0,$164=0,$165=0,$167=0,$168=.0,$169=.0,$170=.0,$171=.0,$172=0;
 var $173=0,$175=0,$176=.0,$177=.0,$178=.0,$179=.0,$180=0,$181=0,$185=0,$186=0,$188=0,$189=.0,$190=.0,$191=0,$192=0,$193=.0,$194=0,$195=0,$196=.0,$197=0;
 var $199=0,$200=0,$201=.0,$202=.0,$203=.0,$204=.0,$205=0,$206=0,$207=.0,$208=0,$209=0,$210=.0,$211=.0,$212=.0,$213=.0,$214=.0,$215=.0,$216=.0,$219=0,$220=0;
 var $221=.0,$222=0,$223=0,$224=.0,$225=0,$227=.0,$228=0,$229=0,$230=.0,$231=.0,$232=.0,$233=0,$234=0,$235=.0,$236=0,$237=0,$238=.0,$239=.0,$240=.0,$241=.0;
 var $242=.0,$243=.0,$244=.0,$247=.0,$248=.0,$249=.0,$250=0,$251=0,$252=0,$253=0,$254=0,$256=0,$257=0,label=0;
 var tempVarArgs=0;
 var sp=0;sp=STACKTOP;










 $1=$gfc;
 $2=$1;
 $3=(($2+16)|0);
 $cfg=$3;
 $lowpass_band=32;
 $highpass_band=-1;
 $4=$cfg;
 $5=(($4+232)|0);
 $6=(+(HEAPF32[(($5)>>2)]));
 $7=$6>(0.0);
 if ($7) {
  $minband=999;
  $band=0;
  while(1) {
   $10=$band;
   $11=($10|0)<=31;
   if (!($11)) {
    break;
   }
   $13=$band;
   $14=(+((($13|0))|0));
   $15=($14)/((31.0));
   $16=$15;
   $freq=$16;
   $17=$freq;
   $18=$cfg;
   $19=(($18+236)|0);
   $20=(+(HEAPF32[(($19)>>2)]));
   $21=$17>=$20;
   if ($21) {
    $23=$lowpass_band;
    $24=$band;
    $25=($23|0)<($24|0);
    if ($25) {
     $27=$lowpass_band;
     $31=$27;
    } else {
     $29=$band;
     $31=$29;
    }

    $lowpass_band=$31;
   }
   $33=$cfg;
   $34=(($33+232)|0);
   $35=(+(HEAPF32[(($34)>>2)]));
   $36=$freq;
   $37=$35<$36;
   do {
    if ($37) {
     $39=$freq;
     $40=$cfg;
     $41=(($40+236)|0);
     $42=(+(HEAPF32[(($41)>>2)]));
     $43=$39<$42;
     if (!($43)) {
      break;
     }
     $45=$minband;
     $46=$band;
     $47=($45|0)<($46|0);
     if ($47) {
      $49=$minband;
      $53=$49;
     } else {
      $51=$band;
      $53=$51;
     }

     $minband=$53;
    }
   } while(0);
   $56=$band;
   $57=((($56)+(1))|0);
   $band=$57;
  }
  $59=$minband;
  $60=($59|0)==999;
  if ($60) {
   $62=$lowpass_band;
   $63=(+((($62|0))|0));
   $64=($63)-((0.75));
   $65=($64)/((31.0));
   $66=$65;
   $67=$cfg;
   $68=(($67+232)|0);
   HEAPF32[(($68)>>2)]=$66;
  } else {
   $70=$minband;
   $71=(+((($70|0))|0));
   $72=($71)-((0.75));
   $73=($72)/((31.0));
   $74=$73;
   $75=$cfg;
   $76=(($75+232)|0);
   HEAPF32[(($76)>>2)]=$74;
  }
  $78=$lowpass_band;
  $79=(+((($78|0))|0));
  $80=($79)/((31.0));
  $81=$80;
  $82=$cfg;
  $83=(($82+236)|0);
  HEAPF32[(($83)>>2)]=$81;
 }
 $85=$cfg;
 $86=(($85+244)|0);
 $87=(+(HEAPF32[(($86)>>2)]));
 $88=$87>(0.0);
 if ($88) {
  $90=$cfg;
  $91=(($90+244)|0);
  $92=(+(HEAPF32[(($91)>>2)]));
  $93=$92;
  $94=$93<(0.021774193548387097);
  if ($94) {
   $96=$cfg;
   $97=(($96+240)|0);
   HEAPF32[(($97)>>2)]=0.0;
   $98=$cfg;
   $99=(($98+244)|0);
   HEAPF32[(($99)>>2)]=0.0;
   $100=$1;
   _lame_msgf($100,16288,(((tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs))|0)); STACKTOP=tempVarArgs;
  }
 }
 $103=$cfg;
 $104=(($103+244)|0);
 $105=(+(HEAPF32[(($104)>>2)]));
 $106=$105>(0.0);
 if ($106) {
  $maxband=-1;
  $band=0;
  while(1) {
   $109=$band;
   $110=($109|0)<=31;
   if (!($110)) {
    break;
   }
   $112=$band;
   $113=(+((($112|0))|0));
   $114=($113)/((31.0));
   $115=$114;
   $freq=$115;
   $116=$freq;
   $117=$cfg;
   $118=(($117+240)|0);
   $119=(+(HEAPF32[(($118)>>2)]));
   $120=$116<=$119;
   if ($120) {
    $122=$highpass_band;
    $123=$band;
    $124=($122|0)>($123|0);
    if ($124) {
     $126=$highpass_band;
     $130=$126;
    } else {
     $128=$band;
     $130=$128;
    }

    $highpass_band=$130;
   }
   $132=$cfg;
   $133=(($132+240)|0);
   $134=(+(HEAPF32[(($133)>>2)]));
   $135=$freq;
   $136=$134<$135;
   do {
    if ($136) {
     $138=$freq;
     $139=$cfg;
     $140=(($139+244)|0);
     $141=(+(HEAPF32[(($140)>>2)]));
     $142=$138<$141;
     if (!($142)) {
      break;
     }
     $144=$maxband;
     $145=$band;
     $146=($144|0)>($145|0);
     if ($146) {
      $148=$maxband;
      $152=$148;
     } else {
      $150=$band;
      $152=$150;
     }

     $maxband=$152;
    }
   } while(0);
   $155=$band;
   $156=((($155)+(1))|0);
   $band=$156;
  }
  $158=$highpass_band;
  $159=(+((($158|0))|0));
  $160=($159)/((31.0));
  $161=$160;
  $162=$cfg;
  $163=(($162+240)|0);
  HEAPF32[(($163)>>2)]=$161;
  $164=$maxband;
  $165=($164|0)==-1;
  if ($165) {
   $167=$highpass_band;
   $168=(+((($167|0))|0));
   $169=($168)+((0.75));
   $170=($169)/((31.0));
   $171=$170;
   $172=$cfg;
   $173=(($172+244)|0);
   HEAPF32[(($173)>>2)]=$171;
  } else {
   $175=$maxband;
   $176=(+((($175|0))|0));
   $177=($176)+((0.75));
   $178=($177)/((31.0));
   $179=$178;
   $180=$cfg;
   $181=(($180+244)|0);
   HEAPF32[(($181)>>2)]=$179;
  }
 }
 $band=0;
 while(1) {
  $185=$band;
  $186=($185|0)<32;
  if (!($186)) {
   break;
  }
  $188=$band;
  $189=(+((($188|0))|0));
  $190=($189)/((31.0));
  $freq=$190;
  $191=$cfg;
  $192=(($191+244)|0);
  $193=(+(HEAPF32[(($192)>>2)]));
  $194=$cfg;
  $195=(($194+240)|0);
  $196=(+(HEAPF32[(($195)>>2)]));
  $197=$193>$196;
  if ($197) {
   $199=$cfg;
   $200=(($199+244)|0);
   $201=(+(HEAPF32[(($200)>>2)]));
   $202=$freq;
   $203=($201)-($202);
   $204=$203;
   $205=$cfg;
   $206=(($205+244)|0);
   $207=(+(HEAPF32[(($206)>>2)]));
   $208=$cfg;
   $209=(($208+240)|0);
   $210=(+(HEAPF32[(($209)>>2)]));
   $211=($207)-($210);
   $212=$211;
   $213=($212)+((1.0e-20));
   $214=($204)/($213);
   $215=$214;
   $216=(+(_filter_coef($215)));
   $fc1=$216;
  } else {
   $fc1=1.0;
  }
  $219=$cfg;
  $220=(($219+236)|0);
  $221=(+(HEAPF32[(($220)>>2)]));
  $222=$cfg;
  $223=(($222+232)|0);
  $224=(+(HEAPF32[(($223)>>2)]));
  $225=$221>$224;
  if ($225) {
   $227=$freq;
   $228=$cfg;
   $229=(($228+232)|0);
   $230=(+(HEAPF32[(($229)>>2)]));
   $231=($227)-($230);
   $232=$231;
   $233=$cfg;
   $234=(($233+236)|0);
   $235=(+(HEAPF32[(($234)>>2)]));
   $236=$cfg;
   $237=(($236+232)|0);
   $238=(+(HEAPF32[(($237)>>2)]));
   $239=($235)-($238);
   $240=$239;
   $241=($240)+((1.0e-20));
   $242=($232)/($241);
   $243=$242;
   $244=(+(_filter_coef($243)));
   $fc2=$244;
  } else {
   $fc2=1.0;
  }
  $247=$fc1;
  $248=$fc2;
  $249=($247)*($248);
  $250=$band;
  $251=$1;
  $252=(($251+27824)|0);
  $253=(($252+9216)|0);
  $254=(($253+($250<<2))|0);
  HEAPF32[(($254)>>2)]=$249;
  $256=$band;
  $257=((($256)+(1))|0);
  $band=$257;
 }
 STACKTOP=sp;return;
}


function _lame_init_qval($gfp){
 $gfp=($gfp)|0;
 var $1=0,$gfc=0,$cfg=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$12=0,$13=0,$14=0,$15=0,$16=0,$17=0,$18=0,$19=0,$20=0;
 var $21=0,$23=0,$24=0,$26=0,$27=0,$28=0,$29=0,$30=0,$31=0,$32=0,$33=0,$34=0,$35=0,$36=0,$37=0,$38=0,$39=0,$41=0,$42=0,$43=0;
 var $44=0,$46=0,$47=0,$50=0,$51=0,$52=0,$53=0,$55=0,$56=0,$58=0,$59=0,$60=0,$61=0,$62=0,$63=0,$64=0,$65=0,$67=0,$68=0,$70=0;
 var $71=0,$72=0,$73=0,$75=0,$76=0,$77=0,$78=0,$80=0,$81=0,$83=0,$84=0,$85=0,$86=0,$87=0,$88=0,$89=0,$90=0,$92=0,$93=0,$95=0;
 var $96=0,$97=0,$98=0,$100=0,$101=0,$102=0,$103=0,$105=0,$106=0,$108=0,$109=0,$110=0,$111=0,$112=0,$113=0,$114=0,$115=0,$117=0,$118=0,$120=0;
 var $121=0,$122=0,$123=0,$125=0,$126=0,$127=0,$128=0,$130=0,$131=0,$133=0,$134=0,$135=0,$136=0,$137=0,$138=0,$139=0,$140=0,$142=0,$143=0,$145=0;
 var $146=0,$147=0,$148=0,$150=0,$151=0,$152=0,$153=0,$155=0,$156=0,$158=0,$159=0,$160=0,$161=0,$162=0,$164=0,$165=0,$166=0,$168=0,$169=0,$170=0;
 var $171=0,$172=0,$173=0,$174=0,$175=0,$177=0,$178=0,$180=0,$181=0,$182=0,$183=0,$185=0,$186=0,$187=0,$188=0,$190=0,$191=0,$193=0,$194=0,$195=0;
 var $196=0,$197=0,$199=0,$200=0,$201=0,$203=0,$204=0,$205=0,$206=0,$207=0,$208=0,$209=0,$210=0,$212=0,$213=0,$215=0,$216=0,$217=0,$218=0,$220=0;
 var $221=0,$222=0,$223=0,$225=0,$226=0,$228=0,$229=0,$230=0,$231=0,$232=0,$234=0,$235=0,$236=0,$238=0,$239=0,$240=0,$241=0,$242=0,$243=0,$244=0;
 var $245=0,$247=0,$248=0,$250=0,$251=0,$252=0,$253=0,label=0;
 var sp=0;sp=STACKTOP;



 $1=$gfp;
 $2=$1;
 $3=(($2+288)|0);
 $4=((HEAP32[(($3)>>2)])|0);
 $gfc=$4;
 $5=$gfc;
 $6=(($5+16)|0);
 $cfg=$6;
 $7=$1;
 $8=(($7+44)|0);
 $9=((HEAP32[(($8)>>2)])|0);
 switch (($9|0)) {
 case 0: {
  $220=$cfg;
  $221=(($220+12)|0);
  $222=((HEAP32[(($221)>>2)])|0);
  $223=($222|0)==0;
  if ($223) {
   $225=$cfg;
   $226=(($225+12)|0);
   HEAP32[(($226)>>2)]=1;
  }
  $228=$gfc;
  $229=(($228+84768)|0);
  $230=(($229+328)|0);
  $231=((HEAP32[(($230)>>2)])|0);
  $232=($231|0)==0;
  if ($232) {
   $234=$gfc;
   $235=(($234+84768)|0);
   $236=(($235+328)|0);
   HEAP32[(($236)>>2)]=2;
  }
  $238=$cfg;
  $239=(($238+24)|0);
  HEAP32[(($239)>>2)]=2;
  $240=$cfg;
  $241=(($240+28)|0);
  HEAP32[(($241)>>2)]=1;
  $242=$cfg;
  $243=(($242+16)|0);
  $244=((HEAP32[(($243)>>2)])|0);
  $245=($244|0)==-1;
  if ($245) {
   $247=$cfg;
   $248=(($247+16)|0);
   HEAP32[(($248)>>2)]=1;
  }
  $250=$cfg;
  $251=(($250+20)|0);
  HEAP32[(($251)>>2)]=1;
  $252=$cfg;
  $253=(($252+32)|0);
  HEAP32[(($253)>>2)]=1;
  STACKTOP=sp;return;
  break;
 }
 case 3: {
  $125=$cfg;
  $126=(($125+12)|0);
  $127=((HEAP32[(($126)>>2)])|0);
  $128=($127|0)==0;
  if ($128) {
   $130=$cfg;
   $131=(($130+12)|0);
   HEAP32[(($131)>>2)]=1;
  }
  $133=$cfg;
  $134=(($133+24)|0);
  HEAP32[(($134)>>2)]=1;
  $135=$cfg;
  $136=(($135+28)|0);
  HEAP32[(($136)>>2)]=1;
  $137=$cfg;
  $138=(($137+16)|0);
  $139=((HEAP32[(($138)>>2)])|0);
  $140=($139|0)==-1;
  if ($140) {
   $142=$cfg;
   $143=(($142+16)|0);
   HEAP32[(($143)>>2)]=1;
  }
  $145=$cfg;
  $146=(($145+20)|0);
  HEAP32[(($146)>>2)]=1;
  $147=$cfg;
  $148=(($147+32)|0);
  HEAP32[(($148)>>2)]=0;
  STACKTOP=sp;return;
  break;
 }
 case 1: {
  $185=$cfg;
  $186=(($185+12)|0);
  $187=((HEAP32[(($186)>>2)])|0);
  $188=($187|0)==0;
  if ($188) {
   $190=$cfg;
   $191=(($190+12)|0);
   HEAP32[(($191)>>2)]=1;
  }
  $193=$gfc;
  $194=(($193+84768)|0);
  $195=(($194+328)|0);
  $196=((HEAP32[(($195)>>2)])|0);
  $197=($196|0)==0;
  if ($197) {
   $199=$gfc;
   $200=(($199+84768)|0);
   $201=(($200+328)|0);
   HEAP32[(($201)>>2)]=2;
  }
  $203=$cfg;
  $204=(($203+24)|0);
  HEAP32[(($204)>>2)]=2;
  $205=$cfg;
  $206=(($205+28)|0);
  HEAP32[(($206)>>2)]=1;
  $207=$cfg;
  $208=(($207+16)|0);
  $209=((HEAP32[(($208)>>2)])|0);
  $210=($209|0)==-1;
  if ($210) {
   $212=$cfg;
   $213=(($212+16)|0);
   HEAP32[(($213)>>2)]=1;
  }
  $215=$cfg;
  $216=(($215+20)|0);
  HEAP32[(($216)>>2)]=1;
  $217=$cfg;
  $218=(($217+32)|0);
  HEAP32[(($218)>>2)]=0;
  STACKTOP=sp;return;
  break;
 }
 case 9: {
  label = 3;
  break;
 }
 case 8: {
  $23=$1;
  $24=(($23+44)|0);
  HEAP32[(($24)>>2)]=7;
  break;
 }
 case 7: {
  break;
 }
 case 6: {
  $50=$cfg;
  $51=(($50+12)|0);
  $52=((HEAP32[(($51)>>2)])|0);
  $53=($52|0)==0;
  if ($53) {
   $55=$cfg;
   $56=(($55+12)|0);
   HEAP32[(($56)>>2)]=1;
  }
  $58=$cfg;
  $59=(($58+24)|0);
  HEAP32[(($59)>>2)]=0;
  $60=$cfg;
  $61=(($60+28)|0);
  HEAP32[(($61)>>2)]=0;
  $62=$cfg;
  $63=(($62+16)|0);
  $64=((HEAP32[(($63)>>2)])|0);
  $65=($64|0)==-1;
  if ($65) {
   $67=$cfg;
   $68=(($67+16)|0);
   HEAP32[(($68)>>2)]=1;
  }
  $70=$cfg;
  $71=(($70+20)|0);
  HEAP32[(($71)>>2)]=0;
  $72=$cfg;
  $73=(($72+32)|0);
  HEAP32[(($73)>>2)]=0;
  STACKTOP=sp;return;
  break;
 }
 case 5: {
  $75=$cfg;
  $76=(($75+12)|0);
  $77=((HEAP32[(($76)>>2)])|0);
  $78=($77|0)==0;
  if ($78) {
   $80=$cfg;
   $81=(($80+12)|0);
   HEAP32[(($81)>>2)]=1;
  }
  $83=$cfg;
  $84=(($83+24)|0);
  HEAP32[(($84)>>2)]=0;
  $85=$cfg;
  $86=(($85+28)|0);
  HEAP32[(($86)>>2)]=0;
  $87=$cfg;
  $88=(($87+16)|0);
  $89=((HEAP32[(($88)>>2)])|0);
  $90=($89|0)==-1;
  if ($90) {
   $92=$cfg;
   $93=(($92+16)|0);
   HEAP32[(($93)>>2)]=1;
  }
  $95=$cfg;
  $96=(($95+20)|0);
  HEAP32[(($96)>>2)]=0;
  $97=$cfg;
  $98=(($97+32)|0);
  HEAP32[(($98)>>2)]=0;
  STACKTOP=sp;return;
  break;
 }
 case 4: {
  $100=$cfg;
  $101=(($100+12)|0);
  $102=((HEAP32[(($101)>>2)])|0);
  $103=($102|0)==0;
  if ($103) {
   $105=$cfg;
   $106=(($105+12)|0);
   HEAP32[(($106)>>2)]=1;
  }
  $108=$cfg;
  $109=(($108+24)|0);
  HEAP32[(($109)>>2)]=0;
  $110=$cfg;
  $111=(($110+28)|0);
  HEAP32[(($111)>>2)]=0;
  $112=$cfg;
  $113=(($112+16)|0);
  $114=((HEAP32[(($113)>>2)])|0);
  $115=($114|0)==-1;
  if ($115) {
   $117=$cfg;
   $118=(($117+16)|0);
   HEAP32[(($118)>>2)]=1;
  }
  $120=$cfg;
  $121=(($120+20)|0);
  HEAP32[(($121)>>2)]=1;
  $122=$cfg;
  $123=(($122+32)|0);
  HEAP32[(($123)>>2)]=0;
  STACKTOP=sp;return;
  break;
 }
 case 2: {
  $150=$cfg;
  $151=(($150+12)|0);
  $152=((HEAP32[(($151)>>2)])|0);
  $153=($152|0)==0;
  if ($153) {
   $155=$cfg;
   $156=(($155+12)|0);
   HEAP32[(($156)>>2)]=1;
  }
  $158=$gfc;
  $159=(($158+84768)|0);
  $160=(($159+328)|0);
  $161=((HEAP32[(($160)>>2)])|0);
  $162=($161|0)==0;
  if ($162) {
   $164=$gfc;
   $165=(($164+84768)|0);
   $166=(($165+328)|0);
   HEAP32[(($166)>>2)]=2;
  }
  $168=$cfg;
  $169=(($168+24)|0);
  HEAP32[(($169)>>2)]=1;
  $170=$cfg;
  $171=(($170+28)|0);
  HEAP32[(($171)>>2)]=1;
  $172=$cfg;
  $173=(($172+16)|0);
  $174=((HEAP32[(($173)>>2)])|0);
  $175=($174|0)==-1;
  if ($175) {
   $177=$cfg;
   $178=(($177+16)|0);
   HEAP32[(($178)>>2)]=1;
  }
  $180=$cfg;
  $181=(($180+20)|0);
  HEAP32[(($181)>>2)]=1;
  $182=$cfg;
  $183=(($182+32)|0);
  HEAP32[(($183)>>2)]=0;
  STACKTOP=sp;return;
  break;
 }
 default: {
  label = 3;
 }
 }
 if ((label|0) == 3) {
  $12=$cfg;
  $13=(($12+12)|0);
  HEAP32[(($13)>>2)]=0;
  $14=$cfg;
  $15=(($14+24)|0);
  HEAP32[(($15)>>2)]=0;
  $16=$cfg;
  $17=(($16+28)|0);
  HEAP32[(($17)>>2)]=0;
  $18=$cfg;
  $19=(($18+20)|0);
  HEAP32[(($19)>>2)]=0;
  $20=$cfg;
  $21=(($20+32)|0);
  HEAP32[(($21)>>2)]=0;
  STACKTOP=sp;return;
 }
 $26=$cfg;
 $27=(($26+12)|0);
 HEAP32[(($27)>>2)]=0;
 $28=$cfg;
 $29=(($28+24)|0);
 HEAP32[(($29)>>2)]=0;
 $30=$cfg;
 $31=(($30+28)|0);
 HEAP32[(($31)>>2)]=0;
 $32=$cfg;
 $33=(($32+20)|0);
 HEAP32[(($33)>>2)]=0;
 $34=$cfg;
 $35=(($34+32)|0);
 HEAP32[(($35)>>2)]=0;
 $36=$1;
 $37=(($36+156)|0);
 $38=((HEAP32[(($37)>>2)])|0);
 $39=($38|0)==1;
 if ($39) {
  label = 7;
 } else {
  $41=$1;
  $42=(($41+156)|0);
  $43=((HEAP32[(($42)>>2)])|0);
  $44=($43|0)==4;
  if ($44) {
   label = 7;
  }
 }
 if ((label|0) == 7) {
  $46=$cfg;
  $47=(($46+32)|0);
  HEAP32[(($47)>>2)]=-1;
 }
 STACKTOP=sp;return;
}


function _lame_encode_buffer_template($gfp,$buffer_l,$buffer_r,$nsamples,$mp3buf,$mp3buf_size,$pcm_type,$aa,$norm){
 $gfp=($gfp)|0;
 $buffer_l=($buffer_l)|0;
 $buffer_r=($buffer_r)|0;
 $nsamples=($nsamples)|0;
 $mp3buf=($mp3buf)|0;
 $mp3buf_size=($mp3buf_size)|0;
 $pcm_type=($pcm_type)|0;
 $aa=($aa)|0;
 $norm=+($norm);
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=.0,$gfc=0,$cfg=0,$11=0,$12=0,$13=0,$15=0,$16=0,$17=0,$18=0,$19=0;
 var $20=0,$22=0,$23=0,$24=0,$25=0,$28=0,$29=0,$30=0,$31=0,$34=0,$35=0,$36=0,$37=0,$39=0,$40=0,$42=0,$43=0,$46=0,$47=0,$48=0;
 var $49=0,$50=0,$51=0,$52=.0,$54=0,$55=0,$58=0,$59=0,$60=0,$61=0,$62=0,$63=0,$64=.0,$66=0,$67=0,$68=0,$69=0,$70=0,$74=0,label=0;
 var sp=0;sp=STACKTOP;












 $2=$gfp;
 $3=$buffer_l;
 $4=$buffer_r;
 $5=$nsamples;
 $6=$mp3buf;
 $7=$mp3buf_size;
 $8=$pcm_type;
 $9=$aa;
 $10=$norm;
 $11=$2;
 $12=((_is_lame_global_flags_valid($11))|0);
 $13=($12|0)!=0;
 do {
  if ($13) {
   $15=$2;
   $16=(($15+288)|0);
   $17=((HEAP32[(($16)>>2)])|0);
   $gfc=$17;
   $18=$gfc;
   $19=((_is_lame_internal_flags_valid($18))|0);
   $20=($19|0)!=0;
   if (!($20)) {
    break;
   }
   $22=$gfc;
   $23=(($22+16)|0);
   $cfg=$23;
   $24=$5;
   $25=($24|0)==0;
   if ($25) {
    $1=0;
    $74=$1;
    STACKTOP=sp;return (($74)|0);
   }
   $28=$gfc;
   $29=$5;
   $30=((_update_inbuffer_size($28,$29))|0);
   $31=($30|0)!=0;
   if ($31) {
    $1=-2;
    $74=$1;
    STACKTOP=sp;return (($74)|0);
   }
   $34=$cfg;
   $35=(($34+52)|0);
   $36=((HEAP32[(($35)>>2)])|0);
   $37=($36|0)>1;
   L14: do {
    if ($37) {
     $39=$3;
     $40=($39|0)==0;
     do {
      if (!($40)) {
       $42=$4;
       $43=($42|0)==0;
       if ($43) {
        break;
       }
       $46=$gfc;
       $47=$3;
       $48=$4;
       $49=$5;
       $50=$8;
       $51=$9;
       $52=$10;
       _lame_copy_inbuffer($46,$47,$48,$49,$50,$51,$52);
       break L14;
      }
     } while(0);
     $1=0;
     $74=$1;
     STACKTOP=sp;return (($74)|0);
    } else {
     $54=$3;
     $55=($54|0)==0;
     if (!($55)) {
      $58=$gfc;
      $59=$3;
      $60=$3;
      $61=$5;
      $62=$8;
      $63=$9;
      $64=$10;
      _lame_copy_inbuffer($58,$59,$60,$61,$62,$63,$64);
      break;
     }
     $1=0;
     $74=$1;
     STACKTOP=sp;return (($74)|0);
    }
   } while(0);
   $66=$gfc;
   $67=$5;
   $68=$6;
   $69=$7;
   $70=((_lame_encode_buffer_sample_t($66,$67,$68,$69))|0);
   $1=$70;
   $74=$1;
   STACKTOP=sp;return (($74)|0);
  }
 } while(0);
 $1=-3;
 $74=$1;
 STACKTOP=sp;return (($74)|0);
}


function _save_gain_values($gfc){
 $gfc=($gfc)|0;
 var $1=0,$cfg=0,$rsv=0,$rov=0,$RadioGain=.0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$13=0,$14=0,$15=0,$16=.0,$17=.0;
 var $18=.0,$19=.0,$20=.0,$21=0,$23=.0,$24=.0,$25=.0,$26=.0,$27=.0,$28=.0,$29=.0,$30=.0,$31=0,$33=.0,$34=.0,$35=.0,$36=.0,$37=.0,$38=.0,$39=0;
 var $41=.0,$42=.0,$43=.0,$44=.0,$45=.0,$46=0,$47=0,$48=0,$50=0,$51=0,$54=0,$55=0,$56=0,$57=0,$59=0,$60=0,$61=.0,$62=.0,$63=.0,$64=.0;
 var $65=.0,$66=.0,$67=.0,$68=0,$69=0,$70=0,$71=0,$72=0,$73=0,$74=0,$76=0,$77=0,$78=.0,$79=.0,$80=.0,$81=.0,$82=.0,$83=.0,$84=.0,$85=0;
 var $86=0,$88=0,$89=0,label=0;
 var sp=0;sp=STACKTOP;





 $1=$gfc;
 $2=$1;
 $3=(($2+16)|0);
 $cfg=$3;
 $4=$1;
 $5=(($4+85676)|0);
 $rsv=$5;
 $6=$1;
 $7=(($6+85680)|0);
 $rov=$7;
 $8=$cfg;
 $9=(($8+112)|0);
 $10=((HEAP32[(($9)>>2)])|0);
 $11=($10|0)!=0;
 if ($11) {
  $13=$rsv;
  $14=(($13)|0);
  $15=((HEAP32[(($14)>>2)])|0);
  $16=(+(_GetTitleGain($15)));
  $RadioGain=$16;
  $17=$RadioGain;
  $18=$17;
  $19=(+(Math_abs((+($18)))));
  $20=(+(Math_abs(-24601.0)));
  $21=$19>$20;
  if ($21) {
   $23=$RadioGain;
   $24=($23)-((-24601.0));
   $25=$24;
   $26=(+(Math_abs((+($25)))));
   $27=$RadioGain;
   $28=$27;
   $29=(+(Math_abs((+($28)))));
   $30=($29)*((9.999999974752427e-7));
   $31=$26<=$30;
   if ($31) {
    label = 6;
   } else {
    label = 5;
   }
  } else {
   $33=$RadioGain;
   $34=($33)-((-24601.0));
   $35=$34;
   $36=(+(Math_abs((+($35)))));
   $37=(+(Math_abs(-24601.0)));
   $38=($37)*((9.999999974752427e-7));
   $39=$36<=$38;
   if ($39) {
    label = 6;
   } else {
    label = 5;
   }
  }
  if ((label|0) == 5) {
   $41=$RadioGain;
   $42=$41;
   $43=($42)*((10.0));
   $44=($43)+((0.5));
   $45=(+(Math_floor($44)));
   $46=(~~($45));
   $47=$rov;
   $48=(($47+8)|0);
   HEAP32[(($48)>>2)]=$46;
  }
  else if ((label|0) == 6) {
   $50=$rov;
   $51=(($50+8)|0);
   HEAP32[(($51)>>2)]=0;
  }
 }
 $54=$cfg;
 $55=(($54+116)|0);
 $56=((HEAP32[(($55)>>2)])|0);
 $57=($56|0)!=0;
 if (!($57)) {
  STACKTOP=sp;return;
 }
 $59=$rov;
 $60=(($59+4)|0);
 $61=(+(HEAPF32[(($60)>>2)]));
 $62=$61;
 $63=($62)/((32767.0));
 $64=(+(_log10((+($63)))));
 $65=($64)*((20.0));
 $66=($65)*((10.0));
 $67=(+(Math_ceil($66)));
 $68=(~~($67));
 $69=$rov;
 $70=(($69+12)|0);
 HEAP32[(($70)>>2)]=$68;
 $71=$rov;
 $72=(($71+12)|0);
 $73=((HEAP32[(($72)>>2)])|0);
 $74=($73|0)>0;
 if ($74) {
  $76=$rov;
  $77=(($76+4)|0);
  $78=(+(HEAPF32[(($77)>>2)]));
  $79=((32767.0))/($78);
  $80=($79)*((100.0));
  $81=$80;
  $82=(+(Math_floor($81)));
  $83=($82)/((100.0));
  $84=$83;
  $85=$rov;
  $86=(($85)|0);
  HEAPF32[(($86)>>2)]=$84;
 } else {
  $88=$rov;
  $89=(($88)|0);
  HEAPF32[(($89)>>2)]=-1.0;
 }
 STACKTOP=sp;return;
}


function _calcNeeded($cfg){
 $cfg=($cfg)|0;
 var $1=0,$mf_needed=0,$pcm_samples_per_frame=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$15=0,$17=0,$18=0,$19=0,$21=0;
 var $22=0,label=0;
 var sp=0;sp=STACKTOP;



 $1=$cfg;
 $2=$1;
 $3=(($2+60)|0);
 $4=((HEAP32[(($3)>>2)])|0);
 $5=((($4)*(576))&-1);
 $pcm_samples_per_frame=$5;
 $6=$pcm_samples_per_frame;
 $7=((($6)+(1024))|0);
 $8=((($7)-(272))|0);
 $mf_needed=$8;
 $9=$mf_needed;
 $10=$pcm_samples_per_frame;
 $11=((($10)+(512))|0);
 $12=((($11)-(32))|0);
 $13=($9|0)>($12|0);
 if ($13) {
  $15=$mf_needed;
  $21=$15;

  $mf_needed=$21;
  $22=$mf_needed;
  STACKTOP=sp;return (($22)|0);
 } else {
  $17=$pcm_samples_per_frame;
  $18=((($17)+(512))|0);
  $19=((($18)-(32))|0);
  $21=$19;

  $mf_needed=$21;
  $22=$mf_needed;
  STACKTOP=sp;return (($22)|0);
 }
  return 0;
}


function _lame_init_old($gfp){
 $gfp=($gfp)|0;
 var $1=0,$2=0,$gfc=0,$cfg=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$14=0,$15=0,$16=0,$17=0,$18=0,$19=0,$20=0;
 var $21=0,$22=0,$23=0,$24=0,$25=0,$26=0,$27=0,$28=0,$29=0,$30=0,$31=0,$32=0,$33=0,$34=0,$35=0,$36=0,$37=0,$38=0,$39=0,$40=0;
 var $41=0,$42=0,$43=0,$44=0,$45=0,$46=0,$47=0,$48=0,$49=0,$50=0,$51=0,$52=0,$53=0,$54=0,$55=0,$56=0,$57=0,$58=0,$59=0,$60=0;
 var $61=0,$62=0,$63=0,$64=0,$65=0,$66=0,$67=0,$68=0,$69=0,$70=0,$71=0,$72=0,$73=0,$74=0,$75=0,$76=0,$77=0,$78=0,$79=0,$80=0;
 var $81=0,$82=0,$83=0,$84=0,$85=0,$86=0,$87=0,$88=0,$89=0,$90=0,$91=0,$92=0,$93=0,$94=0,$95=0,$96=0,$97=0,$98=0,$99=0,$100=0;
 var $101=0,$102=0,$103=0,$104=0,$105=0,$106=0,$107=0,$108=0,$109=0,$110=0,$111=0,$112=0,$113=0,$114=0,$115=0,$116=0,$117=0,$118=0,$119=0,$120=0;
 var $121=0,$122=0,$123=0,$124=0,$125=0,$126=0,$127=0,$128=0,$129=0,$130=0,$131=0,$132=0,$133=0,$134=0,$135=0,$136=0,$137=0,$138=0,$139=0,$140=0;
 var $141=0,$142=0,$143=0,$144=0,$145=0,$146=0,$147=0,$148=0,$149=0,$150=0,$151=0,$152=0,$153=0,$154=0,$155=0,$156=0,$157=0,$158=0,$159=0,$161=0;
 var label=0;
 var sp=0;sp=STACKTOP;




 $2=$gfp;
 _disable_FPE();
 $3=$2;
 $4=$3;
 _memset((((($4)|0))|0), ((((0)|0))|0), ((((304)|0))|0))|0;
 $5=$2;
 $6=(($5)|0);
 HEAP32[(($6)>>2)]=-487877;
 $7=((_calloc(1,85840))|0);
 $8=$7;
 $9=$2;
 $10=(($9+288)|0);
 HEAP32[(($10)>>2)]=$8;
 $gfc=$8;
 $11=0==($8|0);
 if ($11) {
  $1=-1;
  $161=$1;
  STACKTOP=sp;return (($161)|0);
 } else {
  $14=$gfc;
  $15=(($14+16)|0);
  $cfg=$15;
  $16=$2;
  $17=(($16+124)|0);
  HEAP32[(($17)>>2)]=2;
  $18=$2;
  $19=(($18+48)|0);
  HEAP32[(($19)>>2)]=4;
  $20=$2;
  $21=(($20+108)|0);
  HEAP32[(($21)>>2)]=1;
  $22=$2;
  $23=(($22+12)|0);
  HEAP32[(($23)>>2)]=44100;
  $24=$2;
  $25=(($24+8)|0);
  HEAP32[(($25)>>2)]=2;
  $26=$2;
  $27=(($26+4)|0);
  HEAP32[(($27)>>2)]=-1;
  $28=$2;
  $29=(($28+36)|0);
  HEAP32[(($29)>>2)]=1;
  $30=$2;
  $31=(($30+44)|0);
  HEAP32[(($31)>>2)]=-1;
  $32=$2;
  $33=(($32+240)|0);
  HEAP32[(($33)>>2)]=-1;
  $34=$2;
  $35=(($34+88)|0);
  HEAP32[(($35)>>2)]=-1;
  $36=$2;
  $37=(($36+184)|0);
  HEAP32[(($37)>>2)]=0;
  $38=$2;
  $39=(($38+188)|0);
  HEAP32[(($39)>>2)]=0;
  $40=$2;
  $41=(($40+192)|0);
  HEAP32[(($41)>>2)]=-1;
  $42=$2;
  $43=(($42+196)|0);
  HEAP32[(($43)>>2)]=-1;
  $44=$2;
  $45=(($44+156)|0);
  HEAP32[(($45)>>2)]=0;
  $46=$2;
  $47=(($46+164)|0);
  HEAP32[(($47)>>2)]=4;
  $48=$2;
  $49=(($48+224)|0);
  HEAPF32[(($49)>>2)]=-1.0;
  $50=$2;
  $51=(($50+168)|0);
  HEAP32[(($51)>>2)]=128;
  $52=$2;
  $53=(($52+172)|0);
  HEAP32[(($53)>>2)]=0;
  $54=$2;
  $55=(($54+176)|0);
  HEAP32[(($55)>>2)]=0;
  $56=$2;
  $57=(($56+180)|0);
  HEAP32[(($57)>>2)]=0;
  $58=$cfg;
  $59=(($58+96)|0);
  HEAP32[(($59)>>2)]=1;
  $60=$cfg;
  $61=(($60+100)|0);
  HEAP32[(($61)>>2)]=13;
  $62=$2;
  $63=(($62+132)|0);
  HEAP32[(($63)>>2)]=-1;
  $64=$2;
  $65=(($64+136)|0);
  HEAP32[(($65)>>2)]=-1;
  $66=$2;
  $67=(($66+252)|0);
  HEAPF32[(($67)>>2)]=-1.0;
  $68=$gfc;
  $69=(($68+84768)|0);
  $70=(($69+152)|0);
  $71=(($70)|0);
  HEAP32[(($71)>>2)]=180;
  $72=$gfc;
  $73=(($72+84768)|0);
  $74=(($73+152)|0);
  $75=(($74+4)|0);
  HEAP32[(($75)>>2)]=180;
  $76=$gfc;
  $77=(($76+84768)|0);
  $78=(($77+160)|0);
  $79=(($78)|0);
  HEAP32[(($79)>>2)]=4;
  $80=$gfc;
  $81=(($80+84768)|0);
  $82=(($81+160)|0);
  $83=(($82+4)|0);
  HEAP32[(($83)>>2)]=4;
  $84=$gfc;
  $85=(($84+84768)|0);
  $86=(($85+140)|0);
  HEAPF32[(($86)>>2)]=1.0;
  $87=$2;
  $88=(($87+264)|0);
  HEAPF32[(($88)>>2)]=-1.0;
  $89=$2;
  $90=(($89+268)|0);
  HEAPF32[(($90)>>2)]=-1.0;
  $91=$2;
  $92=(($91+20)|0);
  HEAPF32[(($92)>>2)]=1.0;
  $93=$2;
  $94=(($93+24)|0);
  HEAPF32[(($94)>>2)]=1.0;
  $95=$2;
  $96=(($95+28)|0);
  HEAPF32[(($96)>>2)]=1.0;
  $97=$2;
  $98=(($97+232)|0);
  HEAP32[(($98)>>2)]=-1;
  $99=$2;
  $100=(($99+220)|0);
  HEAP32[(($100)>>2)]=-1;
  $101=$2;
  $102=(($101+236)|0);
  HEAPF32[(($102)>>2)]=0.0;
  $103=$2;
  $104=(($103+244)|0);
  HEAP32[(($104)>>2)]=-1;
  $105=$2;
  $106=(($105+248)|0);
  HEAPF32[(($106)>>2)]=-1.0;
  $107=$gfc;
  $108=(($107+27824)|0);
  $109=(($108+56208)|0);
  HEAP32[(($109)>>2)]=1728;
  $110=$gfc;
  $111=(($110+84040)|0);
  $112=(($111+724)|0);
  HEAP32[(($112)>>2)]=0;
  $113=$gfc;
  $114=(($113+27824)|0);
  $115=(($114+56212)|0);
  HEAP32[(($115)>>2)]=528;
  $116=$2;
  $117=(($116+60)|0);
  HEAP32[(($117)>>2)]=0;
  $118=$2;
  $119=(($118+64)|0);
  HEAP32[(($119)>>2)]=0;
  $120=$gfc;
  $121=(($120+16)|0);
  $122=(($121+120)|0);
  HEAP32[(($122)>>2)]=0;
  $123=$gfc;
  $124=(($123+16)|0);
  $125=(($124+112)|0);
  HEAP32[(($125)>>2)]=0;
  $126=$gfc;
  $127=(($126+16)|0);
  $128=(($127+116)|0);
  HEAP32[(($128)>>2)]=0;
  $129=$gfc;
  $130=(($129+85680)|0);
  $131=(($130+8)|0);
  HEAP32[(($131)>>2)]=0;
  $132=$gfc;
  $133=(($132+85680)|0);
  $134=(($133+12)|0);
  HEAP32[(($134)>>2)]=0;
  $135=$gfc;
  $136=(($135+85680)|0);
  $137=(($136)|0);
  HEAPF32[(($137)>>2)]=-1.0;
  $138=$2;
  $139=(($138+292)|0);
  $140=(($139)|0);
  HEAP32[(($140)>>2)]=1;
  $141=$2;
  $142=(($141+292)|0);
  $143=(($142+4)|0);
  HEAP32[(($143)>>2)]=1;
  $144=$2;
  $145=(($144+292)|0);
  $146=(($145+8)|0);
  HEAP32[(($146)>>2)]=1;
  $147=$2;
  $148=(($147+152)|0);
  HEAP32[(($148)>>2)]=0;
  $149=$2;
  $150=(($149+68)|0);
  HEAP32[(($150)>>2)]=1;
  $151=$2;
  $152=(($151+272)|0);
  $153=(($152+4)|0);
  HEAP32[(($153)>>2)]=4;
  $154=$2;
  $155=(($154+272)|0);
  $156=(($155+8)|0);
  HEAP32[(($156)>>2)]=4;
  $157=$2;
  $158=(($157+272)|0);
  $159=(($158)|0);
  HEAP32[(($159)>>2)]=4;
  $1=0;
  $161=$1;
  STACKTOP=sp;return (($161)|0);
 }
  return 0;
}


function _filter_coef($x){
 $x=+($x);
 var $1=.0,$2=.0,$3=.0,$4=.0,$5=0,$8=.0,$9=.0,$10=0,$13=.0,$14=.0,$15=.0,$16=.0,$17=.0,$19=.0,label=0;
 var sp=0;sp=STACKTOP;


 $2=$x;
 $3=$2;
 $4=$3;
 $5=$4>(1.0);
 do {
  if ($5) {
   $1=0.0;
  } else {
   $8=$2;
   $9=$8;
   $10=$9<=(0.0);
   if ($10) {
    $1=1.0;
    break;
   } else {
    $13=$2;
    $14=$13;
    $15=((1.5707963267948966))*($14);
    $16=(+(Math_cos($15)));
    $17=$16;
    $1=$17;
    break;
   }
  }
 } while(0);
 $19=$1;
 STACKTOP=sp;return (+($19));
}


function _update_inbuffer_size($gfc,$nsamples){
 $gfc=($gfc)|0;
 $nsamples=($nsamples)|0;
 var $1=0,$2=0,$3=0,$esv=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$11=0,$12=0,$13=0,$14=0,$15=0,$17=0,$18=0,$19=0,$20=0,$22=0;
 var $23=0,$24=0,$25=0,$27=0,$28=0,$29=0,$30=0,$32=0,$33=0,$34=0,$35=0,$37=0,$38=0,$39=0,$40=0,$41=0,$42=0,$43=0,$44=0,$45=0;
 var $46=0,$47=0,$48=0,$49=0,$51=0,$52=0,$53=0,$54=0,$56=0,$57=0,$58=0,$59=0,$61=0,$62=0,$63=0,$64=0,$66=0,$67=0,$68=0,$69=0;
 var $71=0,$72=0,$73=0,$74=0,$76=0,$77=0,$78=0,$79=0,$81=0,$82=0,$83=0,$84=0,$85=0,$86=0,$87=0,$90=0,label=0;
 var tempVarArgs=0;
 var sp=0;sp=STACKTOP;




 $2=$gfc;
 $3=$nsamples;
 $4=$2;
 $5=(($4+27824)|0);
 $esv=$5;
 $6=$esv;
 $7=(($6+24328)|0);
 $8=((HEAP32[(($7)>>2)])|0);
 $9=($8|0)==0;
 if ($9) {
  label = 3;
 } else {
  $11=$esv;
  $12=(($11+24324)|0);
  $13=((HEAP32[(($12)>>2)])|0);
  $14=$3;
  $15=($13|0)<($14|0);
  if ($15) {
   label = 3;
  }
 }
 if ((label|0) == 3) {
  $17=$esv;
  $18=(($17+24328)|0);
  $19=((HEAP32[(($18)>>2)])|0);
  $20=($19|0)!=0;
  if ($20) {
   $22=$esv;
   $23=(($22+24328)|0);
   $24=((HEAP32[(($23)>>2)])|0);
   $25=$24;
   _free($25);
  }
  $27=$esv;
  $28=(($27+24332)|0);
  $29=((HEAP32[(($28)>>2)])|0);
  $30=($29|0)!=0;
  if ($30) {
   $32=$esv;
   $33=(($32+24332)|0);
   $34=((HEAP32[(($33)>>2)])|0);
   $35=$34;
   _free($35);
  }
  $37=$3;
  $38=((_calloc($37,4))|0);
  $39=$38;
  $40=$esv;
  $41=(($40+24328)|0);
  HEAP32[(($41)>>2)]=$39;
  $42=$3;
  $43=((_calloc($42,4))|0);
  $44=$43;
  $45=$esv;
  $46=(($45+24332)|0);
  HEAP32[(($46)>>2)]=$44;
  $47=$3;
  $48=$esv;
  $49=(($48+24324)|0);
  HEAP32[(($49)>>2)]=$47;
 }
 $51=$esv;
 $52=(($51+24328)|0);
 $53=((HEAP32[(($52)>>2)])|0);
 $54=($53|0)==0;
 do {
  if (!($54)) {
   $56=$esv;
   $57=(($56+24332)|0);
   $58=((HEAP32[(($57)>>2)])|0);
   $59=($58|0)==0;
   if ($59) {
    break;
   }
   $1=0;
   $90=$1;
   STACKTOP=sp;return (($90)|0);
  }
 } while(0);
 $61=$esv;
 $62=(($61+24328)|0);
 $63=((HEAP32[(($62)>>2)])|0);
 $64=($63|0)!=0;
 if ($64) {
  $66=$esv;
  $67=(($66+24328)|0);
  $68=((HEAP32[(($67)>>2)])|0);
  $69=$68;
  _free($69);
 }
 $71=$esv;
 $72=(($71+24332)|0);
 $73=((HEAP32[(($72)>>2)])|0);
 $74=($73|0)!=0;
 if ($74) {
  $76=$esv;
  $77=(($76+24332)|0);
  $78=((HEAP32[(($77)>>2)])|0);
  $79=$78;
  _free($79);
 }
 $81=$esv;
 $82=(($81+24328)|0);
 HEAP32[(($82)>>2)]=0;
 $83=$esv;
 $84=(($83+24332)|0);
 HEAP32[(($84)>>2)]=0;
 $85=$esv;
 $86=(($85+24324)|0);
 HEAP32[(($86)>>2)]=0;
 $87=$2;
 _lame_errorf($87,16360,(((tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs))|0)); STACKTOP=tempVarArgs;
 $1=-2;
 $90=$1;
 STACKTOP=sp;return (($90)|0);
}


function _lame_copy_inbuffer($gfc,$l,$r,$nsamples,$pcm_type,$jump,$s){
 $gfc=($gfc)|0;
 $l=($l)|0;
 $r=($r)|0;
 $nsamples=($nsamples)|0;
 $pcm_type=($pcm_type)|0;
 $jump=($jump)|0;
 $s=+($s);
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=.0,$cfg=0,$esv=0,$ib0=0,$ib1=0,$m=0,$bl=0,$br=0,$i=0,$xl=.0,$xr=.0,$u=.0,$v=.0,$bl1=0;
 var $br2=0,$i3=0,$xl4=.0,$xr5=.0,$u6=.0,$v7=.0,$bl8=0,$br9=0,$i10=0,$xl11=.0,$xr12=.0,$u13=.0,$v14=.0,$bl15=0,$br16=0,$i17=0,$xl18=.0,$xr19=.0,$u20=.0,$v21=.0;
 var $bl22=0,$br23=0,$i24=0,$xl25=.0,$xr26=.0,$u27=.0,$v28=.0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$14=0,$15=0,$16=0,$17=0,$18=.0,$19=0,$20=0;
 var $21=0,$22=0,$23=.0,$24=.0,$25=0,$26=0,$27=.0,$28=0,$29=0,$30=0,$31=0,$32=.0,$33=.0,$34=0,$35=0,$36=.0,$37=0,$38=0,$39=0,$40=0;
 var $41=.0,$42=.0,$43=0,$44=0,$45=.0,$46=0,$47=0,$48=0,$49=0,$50=.0,$51=.0,$52=0,$53=0,$54=0,$56=0,$57=0,$58=0,$59=0,$61=0,$62=0;
 var $63=0,$65=0,$66=0,$67=.0,$68=0,$69=0,$70=.0,$71=.0,$72=0,$73=0,$74=.0,$75=.0,$76=.0,$77=0,$78=0,$79=.0,$80=.0,$81=.0,$82=.0,$83=0;
 var $84=0,$85=.0,$86=.0,$87=.0,$88=0,$89=0,$90=.0,$91=.0,$92=.0,$93=.0,$94=0,$95=0,$96=0,$97=.0,$98=0,$99=0,$100=0,$101=0,$102=0,$103=0;
 var $104=0,$105=0,$106=0,$108=0,$109=0,$112=0,$113=0,$114=0,$115=0,$117=0,$118=0,$119=0,$121=0,$122=0,$123=.0,$124=0,$125=0,$126=.0,$127=.0,$128=0;
 var $129=0,$130=.0,$131=.0,$132=.0,$133=0,$134=0,$135=.0,$136=.0,$137=.0,$138=.0,$139=0,$140=0,$141=.0,$142=.0,$143=.0,$144=0,$145=0,$146=.0,$147=.0,$148=.0;
 var $149=.0,$150=0,$151=0,$152=0,$153=.0,$154=0,$155=0,$156=0,$157=0,$158=0,$159=0,$160=0,$161=0,$162=0,$164=0,$165=0,$168=0,$169=0,$170=0,$171=0;
 var $173=0,$174=0,$175=0,$177=0,$178=0,$179=.0,$180=0,$181=0,$182=.0,$183=.0,$184=0,$185=0,$186=.0,$187=.0,$188=.0,$189=0,$190=0,$191=.0,$192=.0,$193=.0;
 var $194=.0,$195=0,$196=0,$197=.0,$198=.0,$199=.0,$200=0,$201=0,$202=.0,$203=.0,$204=.0,$205=.0,$206=0,$207=0,$208=0,$209=.0,$210=0,$211=0,$212=0,$213=0;
 var $214=0,$215=0,$216=0,$217=0,$218=0,$220=0,$221=0,$224=0,$225=0,$226=0,$227=0,$229=0,$230=0,$231=0,$233=0,$234=.0,$235=0,$236=.0,$237=.0,$238=0;
 var $239=0,$240=.0,$241=.0,$242=.0,$243=0,$244=0,$245=.0,$246=.0,$247=.0,$248=.0,$249=0,$250=0,$251=.0,$252=.0,$253=.0,$254=0,$255=0,$256=.0,$257=.0,$258=.0;
 var $259=.0,$260=0,$261=0,$262=0,$263=.0,$264=0,$265=0,$266=0,$267=0,$268=0,$269=0,$270=0,$271=0,$272=0,$274=0,$275=0,$278=0,$279=0,$280=0,$281=0;
 var $283=0,$284=0,$285=0,$287=0,$288=.0,$289=.0,$290=0,$291=.0,$292=.0,$293=.0,$294=0,$295=0,$296=.0,$297=.0,$298=.0,$299=0,$300=0,$301=.0,$302=.0,$303=.0;
 var $304=.0,$305=0,$306=0,$307=.0,$308=.0,$309=.0,$310=0,$311=0,$312=.0,$313=.0,$314=.0,$315=.0,$316=0,$317=0,$318=0,$319=.0,$320=0,$321=0,$322=0,$323=0;
 var $324=0,$325=0,$326=0,$327=0,$328=0,$330=0,$331=0,label=0;
 var sp=0;sp=STACKTOP;STACKTOP=(STACKTOP+16)|0;











 $m=((sp)|0);



































 $1=$gfc;
 $2=$l;
 $3=$r;
 $4=$nsamples;
 $5=$pcm_type;
 $6=$jump;
 $7=$s;
 $8=$1;
 $9=(($8+16)|0);
 $cfg=$9;
 $10=$1;
 $11=(($10+27824)|0);
 $esv=$11;
 $12=$esv;
 $13=(($12+24328)|0);
 $14=((HEAP32[(($13)>>2)])|0);
 $ib0=$14;
 $15=$esv;
 $16=(($15+24332)|0);
 $17=((HEAP32[(($16)>>2)])|0);
 $ib1=$17;
 $18=$7;
 $19=$cfg;
 $20=(($19+248)|0);
 $21=(($20)|0);
 $22=(($21)|0);
 $23=(+(HEAPF32[(($22)>>2)]));
 $24=($18)*($23);
 $25=(($m)|0);
 $26=(($25)|0);
 HEAPF32[(($26)>>2)]=$24;
 $27=$7;
 $28=$cfg;
 $29=(($28+248)|0);
 $30=(($29)|0);
 $31=(($30+4)|0);
 $32=(+(HEAPF32[(($31)>>2)]));
 $33=($27)*($32);
 $34=(($m)|0);
 $35=(($34+4)|0);
 HEAPF32[(($35)>>2)]=$33;
 $36=$7;
 $37=$cfg;
 $38=(($37+248)|0);
 $39=(($38+8)|0);
 $40=(($39)|0);
 $41=(+(HEAPF32[(($40)>>2)]));
 $42=($36)*($41);
 $43=(($m+8)|0);
 $44=(($43)|0);
 HEAPF32[(($44)>>2)]=$42;
 $45=$7;
 $46=$cfg;
 $47=(($46+248)|0);
 $48=(($47+8)|0);
 $49=(($48+4)|0);
 $50=(+(HEAPF32[(($49)>>2)]));
 $51=($45)*($50);
 $52=(($m+8)|0);
 $53=(($52+4)|0);
 HEAPF32[(($53)>>2)]=$51;
 $54=$5;
 switch (($54|0)) {
 case 2: {
  $168=$2;
  $169=$168;
  $bl8=$169;
  $170=$3;
  $171=$170;
  $br9=$171;
  $i10=0;
  while(1) {
   $173=$i10;
   $174=$4;
   $175=($173|0)<($174|0);
   if (!($175)) {
    break;
   }
   $177=$bl8;
   $178=((HEAP32[(($177)>>2)])|0);
   $179=(+((($178|0))|0));
   $xl11=$179;
   $180=$br9;
   $181=((HEAP32[(($180)>>2)])|0);
   $182=(+((($181|0))|0));
   $xr12=$182;
   $183=$xl11;
   $184=(($m)|0);
   $185=(($184)|0);
   $186=(+(HEAPF32[(($185)>>2)]));
   $187=($183)*($186);
   $188=$xr12;
   $189=(($m)|0);
   $190=(($189+4)|0);
   $191=(+(HEAPF32[(($190)>>2)]));
   $192=($188)*($191);
   $193=($187)+($192);
   $u13=$193;
   $194=$xl11;
   $195=(($m+8)|0);
   $196=(($195)|0);
   $197=(+(HEAPF32[(($196)>>2)]));
   $198=($194)*($197);
   $199=$xr12;
   $200=(($m+8)|0);
   $201=(($200+4)|0);
   $202=(+(HEAPF32[(($201)>>2)]));
   $203=($199)*($202);
   $204=($198)+($203);
   $v14=$204;
   $205=$u13;
   $206=$i10;
   $207=$ib0;
   $208=(($207+($206<<2))|0);
   HEAPF32[(($208)>>2)]=$205;
   $209=$v14;
   $210=$i10;
   $211=$ib1;
   $212=(($211+($210<<2))|0);
   HEAPF32[(($212)>>2)]=$209;
   $213=$6;
   $214=$bl8;
   $215=(($214+($213<<2))|0);
   $bl8=$215;
   $216=$6;
   $217=$br9;
   $218=(($217+($216<<2))|0);
   $br9=$218;
   $220=$i10;
   $221=((($220)+(1))|0);
   $i10=$221;
  }
  STACKTOP=sp;return;
  break;
 }
 case 0: {
  $56=$2;
  $57=$56;
  $bl=$57;
  $58=$3;
  $59=$58;
  $br=$59;
  $i=0;
  while(1) {
   $61=$i;
   $62=$4;
   $63=($61|0)<($62|0);
   if (!($63)) {
    break;
   }
   $65=$bl;
   $66=((HEAP16[(($65)>>1)])|0);
   $67=(+(((($66<<16)>>16))|0));
   $xl=$67;
   $68=$br;
   $69=((HEAP16[(($68)>>1)])|0);
   $70=(+(((($69<<16)>>16))|0));
   $xr=$70;
   $71=$xl;
   $72=(($m)|0);
   $73=(($72)|0);
   $74=(+(HEAPF32[(($73)>>2)]));
   $75=($71)*($74);
   $76=$xr;
   $77=(($m)|0);
   $78=(($77+4)|0);
   $79=(+(HEAPF32[(($78)>>2)]));
   $80=($76)*($79);
   $81=($75)+($80);
   $u=$81;
   $82=$xl;
   $83=(($m+8)|0);
   $84=(($83)|0);
   $85=(+(HEAPF32[(($84)>>2)]));
   $86=($82)*($85);
   $87=$xr;
   $88=(($m+8)|0);
   $89=(($88+4)|0);
   $90=(+(HEAPF32[(($89)>>2)]));
   $91=($87)*($90);
   $92=($86)+($91);
   $v=$92;
   $93=$u;
   $94=$i;
   $95=$ib0;
   $96=(($95+($94<<2))|0);
   HEAPF32[(($96)>>2)]=$93;
   $97=$v;
   $98=$i;
   $99=$ib1;
   $100=(($99+($98<<2))|0);
   HEAPF32[(($100)>>2)]=$97;
   $101=$6;
   $102=$bl;
   $103=(($102+($101<<1))|0);
   $bl=$103;
   $104=$6;
   $105=$br;
   $106=(($105+($104<<1))|0);
   $br=$106;
   $108=$i;
   $109=((($108)+(1))|0);
   $i=$109;
  }
  STACKTOP=sp;return;
  break;
 }
 case 1: {
  $112=$2;
  $113=$112;
  $bl1=$113;
  $114=$3;
  $115=$114;
  $br2=$115;
  $i3=0;
  while(1) {
   $117=$i3;
   $118=$4;
   $119=($117|0)<($118|0);
   if (!($119)) {
    break;
   }
   $121=$bl1;
   $122=((HEAP32[(($121)>>2)])|0);
   $123=(+((($122|0))|0));
   $xl4=$123;
   $124=$br2;
   $125=((HEAP32[(($124)>>2)])|0);
   $126=(+((($125|0))|0));
   $xr5=$126;
   $127=$xl4;
   $128=(($m)|0);
   $129=(($128)|0);
   $130=(+(HEAPF32[(($129)>>2)]));
   $131=($127)*($130);
   $132=$xr5;
   $133=(($m)|0);
   $134=(($133+4)|0);
   $135=(+(HEAPF32[(($134)>>2)]));
   $136=($132)*($135);
   $137=($131)+($136);
   $u6=$137;
   $138=$xl4;
   $139=(($m+8)|0);
   $140=(($139)|0);
   $141=(+(HEAPF32[(($140)>>2)]));
   $142=($138)*($141);
   $143=$xr5;
   $144=(($m+8)|0);
   $145=(($144+4)|0);
   $146=(+(HEAPF32[(($145)>>2)]));
   $147=($143)*($146);
   $148=($142)+($147);
   $v7=$148;
   $149=$u6;
   $150=$i3;
   $151=$ib0;
   $152=(($151+($150<<2))|0);
   HEAPF32[(($152)>>2)]=$149;
   $153=$v7;
   $154=$i3;
   $155=$ib1;
   $156=(($155+($154<<2))|0);
   HEAPF32[(($156)>>2)]=$153;
   $157=$6;
   $158=$bl1;
   $159=(($158+($157<<2))|0);
   $bl1=$159;
   $160=$6;
   $161=$br2;
   $162=(($161+($160<<2))|0);
   $br2=$162;
   $164=$i3;
   $165=((($164)+(1))|0);
   $i3=$165;
  }
  STACKTOP=sp;return;
  break;
 }
 case 3: {
  $224=$2;
  $225=$224;
  $bl15=$225;
  $226=$3;
  $227=$226;
  $br16=$227;
  $i17=0;
  while(1) {
   $229=$i17;
   $230=$4;
   $231=($229|0)<($230|0);
   if (!($231)) {
    break;
   }
   $233=$bl15;
   $234=(+(HEAPF32[(($233)>>2)]));
   $xl18=$234;
   $235=$br16;
   $236=(+(HEAPF32[(($235)>>2)]));
   $xr19=$236;
   $237=$xl18;
   $238=(($m)|0);
   $239=(($238)|0);
   $240=(+(HEAPF32[(($239)>>2)]));
   $241=($237)*($240);
   $242=$xr19;
   $243=(($m)|0);
   $244=(($243+4)|0);
   $245=(+(HEAPF32[(($244)>>2)]));
   $246=($242)*($245);
   $247=($241)+($246);
   $u20=$247;
   $248=$xl18;
   $249=(($m+8)|0);
   $250=(($249)|0);
   $251=(+(HEAPF32[(($250)>>2)]));
   $252=($248)*($251);
   $253=$xr19;
   $254=(($m+8)|0);
   $255=(($254+4)|0);
   $256=(+(HEAPF32[(($255)>>2)]));
   $257=($253)*($256);
   $258=($252)+($257);
   $v21=$258;
   $259=$u20;
   $260=$i17;
   $261=$ib0;
   $262=(($261+($260<<2))|0);
   HEAPF32[(($262)>>2)]=$259;
   $263=$v21;
   $264=$i17;
   $265=$ib1;
   $266=(($265+($264<<2))|0);
   HEAPF32[(($266)>>2)]=$263;
   $267=$6;
   $268=$bl15;
   $269=(($268+($267<<2))|0);
   $bl15=$269;
   $270=$6;
   $271=$br16;
   $272=(($271+($270<<2))|0);
   $br16=$272;
   $274=$i17;
   $275=((($274)+(1))|0);
   $i17=$275;
  }
  STACKTOP=sp;return;
  break;
 }
 case 4: {
  $278=$2;
  $279=$278;
  $bl22=$279;
  $280=$3;
  $281=$280;
  $br23=$281;
  $i24=0;
  while(1) {
   $283=$i24;
   $284=$4;
   $285=($283|0)<($284|0);
   if (!($285)) {
    break;
   }
   $287=$bl22;
   $288=(+(HEAPF64[(($287)>>3)]));
   $289=$288;
   $xl25=$289;
   $290=$br23;
   $291=(+(HEAPF64[(($290)>>3)]));
   $292=$291;
   $xr26=$292;
   $293=$xl25;
   $294=(($m)|0);
   $295=(($294)|0);
   $296=(+(HEAPF32[(($295)>>2)]));
   $297=($293)*($296);
   $298=$xr26;
   $299=(($m)|0);
   $300=(($299+4)|0);
   $301=(+(HEAPF32[(($300)>>2)]));
   $302=($298)*($301);
   $303=($297)+($302);
   $u27=$303;
   $304=$xl25;
   $305=(($m+8)|0);
   $306=(($305)|0);
   $307=(+(HEAPF32[(($306)>>2)]));
   $308=($304)*($307);
   $309=$xr26;
   $310=(($m+8)|0);
   $311=(($310+4)|0);
   $312=(+(HEAPF32[(($311)>>2)]));
   $313=($309)*($312);
   $314=($308)+($313);
   $v28=$314;
   $315=$u27;
   $316=$i24;
   $317=$ib0;
   $318=(($317+($316<<2))|0);
   HEAPF32[(($318)>>2)]=$315;
   $319=$v28;
   $320=$i24;
   $321=$ib1;
   $322=(($321+($320<<2))|0);
   HEAPF32[(($322)>>2)]=$319;
   $323=$6;
   $324=$bl22;
   $325=(($324+($323<<3))|0);
   $bl22=$325;
   $326=$6;
   $327=$br23;
   $328=(($327+($326<<3))|0);
   $br23=$328;
   $330=$i24;
   $331=((($330)+(1))|0);
   $i24=$331;
  }
  STACKTOP=sp;return;
  break;
 }
 default: {
  STACKTOP=sp;return;
 }
 }
}


function _lame_encode_buffer_sample_t($gfc,$nsamples,$mp3buf,$mp3buf_size){
 $gfc=($gfc)|0;
 $nsamples=($nsamples)|0;
 $mp3buf=($mp3buf)|0;
 $mp3buf_size=($mp3buf_size)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$cfg=0,$esv=0,$pcm_samples_per_frame=0,$mp3size=0,$ret=0,$i=0,$ch=0,$mf_needed=0,$mp3out=0,$mfbuf=0,$in_buffer=0,$in_buffer_ptr=0,$n_in=0,$n_out=0,$buf_size=0;
 var $6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$14=0,$15=0,$16=0,$17=0,$20=0,$21=0,$24=0,$25=0,$26=0,$27=0,$28=0,$29=0;
 var $31=0,$33=0,$34=0,$35=0,$36=0,$37=0,$38=0,$39=0,$40=0,$41=0,$42=0,$43=0,$44=0,$45=0,$46=0,$47=0,$48=0,$49=0,$50=0,$51=0;
 var $52=0,$53=0,$54=0,$55=0,$56=0,$57=0,$58=0,$60=0,$61=0,$63=0,$64=0,$65=0,$66=0,$67=0,$68=0,$69=0,$70=0,$71=0,$72=0,$73=0;
 var $74=0,$75=0,$76=0,$78=0,$79=0,$80=0,$81=0,$83=0,$84=0,$85=0,$86=0,$87=0,$88=0,$89=0,$90=0,$91=0,$92=0,$93=0,$94=0,$95=0;
 var $96=0,$97=0,$98=0,$99=0,$100=0,$101=0,$102=0,$103=0,$104=0,$108=0,$109=0,$110=0,$111=0,$112=0,$113=0,$114=0,$115=0,$116=0,$117=0,$118=0;
 var $120=0,$121=0,$122=0,$123=0,$125=0,$126=0,$127=0,$128=0,$129=0,$130=0,$131=0,$132=0,$133=0,$135=0,$136=0,$138=0,$139=0,$140=0,$141=0,$142=0;
 var $143=0,$144=0,$145=0,$146=0,$147=0,$149=0,$150=0,$151=0,$152=0,$153=0,$156=0,$157=0,$158=0,$159=0,$160=0,$161=0,$162=0,$163=0,$164=0,$165=0;
 var $167=0,$169=0,$170=0,$171=0,$172=0,$173=0,$174=0,$175=0,$176=0,$177=0,$178=0,$179=0,$180=0,$181=0,$182=0,$183=0,$184=0,$186=0,$187=0,$188=0;
 var $189=0,$190=0,$193=0,$194=0,$195=0,$196=0,$197=0,$199=0,$200=0,$201=0,$202=0,$203=0,$204=0,$205=0,$206=.0,$207=0,$208=0,$209=0,$210=0,$211=0;
 var $213=0,$214=0,$217=0,$218=0,$222=0,$224=0,label=0;
 var sp=0;sp=STACKTOP;STACKTOP=(STACKTOP+40)|0;














 $mfbuf=((sp)|0);
 $in_buffer=(((sp)+(8))|0);
 $in_buffer_ptr=(((sp)+(16))|0);
 $n_in=(((sp)+(24))|0);
 $n_out=(((sp)+(32))|0);

 $2=$gfc;
 $3=$nsamples;
 $4=$mp3buf;
 $5=$mp3buf_size;
 $6=$2;
 $7=(($6+16)|0);
 $cfg=$7;
 $8=$2;
 $9=(($8+27824)|0);
 $esv=$9;
 $10=$cfg;
 $11=(($10+60)|0);
 $12=((HEAP32[(($11)>>2)])|0);
 $13=((($12)*(576))&-1);
 $pcm_samples_per_frame=$13;
 $mp3size=0;
 $14=$2;
 $15=(($14)|0);
 $16=((HEAP32[(($15)>>2)])|0);
 $17=($16|0)!=-487877;
 if ($17) {
  $1=-3;
  $224=$1;
  STACKTOP=sp;return (($224)|0);
 }
 $20=$3;
 $21=($20|0)==0;
 if ($21) {
  $1=0;
  $224=$1;
  STACKTOP=sp;return (($224)|0);
 }
 $24=$2;
 $25=$4;
 $26=$5;
 $27=((_copy_buffer($24,$25,$26,0))|0);
 $mp3out=$27;
 $28=$mp3out;
 $29=($28|0)<0;
 if ($29) {
  $31=$mp3out;
  $1=$31;
  $224=$1;
  STACKTOP=sp;return (($224)|0);
 }
 $33=$mp3out;
 $34=$4;
 $35=(($34+$33)|0);
 $4=$35;
 $36=$mp3out;
 $37=$mp3size;
 $38=((($37)+($36))|0);
 $mp3size=$38;
 $39=$esv;
 $40=(($39+24328)|0);
 $41=((HEAP32[(($40)>>2)])|0);
 $42=(($in_buffer)|0);
 HEAP32[(($42)>>2)]=$41;
 $43=$esv;
 $44=(($43+24332)|0);
 $45=((HEAP32[(($44)>>2)])|0);
 $46=(($in_buffer+4)|0);
 HEAP32[(($46)>>2)]=$45;
 $47=$cfg;
 $48=((_calcNeeded($47))|0);
 $mf_needed=$48;
 $49=$esv;
 $50=(($49+24336)|0);
 $51=(($50)|0);
 $52=(($51)|0);
 $53=(($mfbuf)|0);
 HEAP32[(($53)>>2)]=$52;
 $54=$esv;
 $55=(($54+24336)|0);
 $56=(($55+15936)|0);
 $57=(($56)|0);
 $58=(($mfbuf+4)|0);
 HEAP32[(($58)>>2)]=$57;
 L13: while(1) {
  $60=$3;
  $61=($60|0)>0;
  if (!($61)) {
   label = 33;
   break;
  }
  HEAP32[(($n_in)>>2)]=0;
  HEAP32[(($n_out)>>2)]=0;
  $63=(($in_buffer)|0);
  $64=((HEAP32[(($63)>>2)])|0);
  $65=(($in_buffer_ptr)|0);
  HEAP32[(($65)>>2)]=$64;
  $66=(($in_buffer+4)|0);
  $67=((HEAP32[(($66)>>2)])|0);
  $68=(($in_buffer_ptr+4)|0);
  HEAP32[(($68)>>2)]=$67;
  $69=$2;
  $70=(($mfbuf)|0);
  $71=(($in_buffer_ptr)|0);
  $72=$3;
  _fill_buffer($69,$70,$71,$72,$n_in,$n_out);
  $73=$cfg;
  $74=(($73+112)|0);
  $75=((HEAP32[(($74)>>2)])|0);
  $76=($75|0)!=0;
  do {
   if ($76) {
    $78=$cfg;
    $79=(($78+120)|0);
    $80=((HEAP32[(($79)>>2)])|0);
    $81=($80|0)!=0;
    if ($81) {
     break;
    }
    $83=$2;
    $84=(($83+85676)|0);
    $85=(($84)|0);
    $86=((HEAP32[(($85)>>2)])|0);
    $87=$esv;
    $88=(($87+56212)|0);
    $89=((HEAP32[(($88)>>2)])|0);
    $90=(($mfbuf)|0);
    $91=((HEAP32[(($90)>>2)])|0);
    $92=(($91+($89<<2))|0);
    $93=$esv;
    $94=(($93+56212)|0);
    $95=((HEAP32[(($94)>>2)])|0);
    $96=(($mfbuf+4)|0);
    $97=((HEAP32[(($96)>>2)])|0);
    $98=(($97+($95<<2))|0);
    $99=((HEAP32[(($n_out)>>2)])|0);
    $100=$cfg;
    $101=(($100+56)|0);
    $102=((HEAP32[(($101)>>2)])|0);
    $103=((_AnalyzeSamples($86,$92,$98,$99,$102))|0);
    $104=($103|0)==0;
    if ($104) {
     label = 12;
     break L13;
    }
   }
  } while(0);
  $108=((HEAP32[(($n_in)>>2)])|0);
  $109=$3;
  $110=((($109)-($108))|0);
  $3=$110;
  $111=((HEAP32[(($n_in)>>2)])|0);
  $112=(($in_buffer)|0);
  $113=((HEAP32[(($112)>>2)])|0);
  $114=(($113+($111<<2))|0);
  HEAP32[(($112)>>2)]=$114;
  $115=$cfg;
  $116=(($115+56)|0);
  $117=((HEAP32[(($116)>>2)])|0);
  $118=($117|0)==2;
  if ($118) {
   $120=((HEAP32[(($n_in)>>2)])|0);
   $121=(($in_buffer+4)|0);
   $122=((HEAP32[(($121)>>2)])|0);
   $123=(($122+($120<<2))|0);
   HEAP32[(($121)>>2)]=$123;
  }
  $125=((HEAP32[(($n_out)>>2)])|0);
  $126=$esv;
  $127=(($126+56212)|0);
  $128=((HEAP32[(($127)>>2)])|0);
  $129=((($128)+($125))|0);
  HEAP32[(($127)>>2)]=$129;
  $130=$esv;
  $131=(($130+56208)|0);
  $132=((HEAP32[(($131)>>2)])|0);
  $133=($132|0)<1;
  if ($133) {
   $135=$esv;
   $136=(($135+56208)|0);
   HEAP32[(($136)>>2)]=1728;
  }
  $138=((HEAP32[(($n_out)>>2)])|0);
  $139=$esv;
  $140=(($139+56208)|0);
  $141=((HEAP32[(($140)>>2)])|0);
  $142=((($141)+($138))|0);
  HEAP32[(($140)>>2)]=$142;
  $143=$esv;
  $144=(($143+56212)|0);
  $145=((HEAP32[(($144)>>2)])|0);
  $146=$mf_needed;
  $147=($145|0)>=($146|0);
  if ($147) {
   $149=$5;
   $150=$mp3size;
   $151=((($149)-($150))|0);
   $buf_size=$151;
   $152=$5;
   $153=($152|0)==0;
   if ($153) {
    $buf_size=0;
   }
   $156=$2;
   $157=(($mfbuf)|0);
   $158=((HEAP32[(($157)>>2)])|0);
   $159=(($mfbuf+4)|0);
   $160=((HEAP32[(($159)>>2)])|0);
   $161=$4;
   $162=$buf_size;
   $163=((_lame_encode_mp3_frame($156,$158,$160,$161,$162))|0);
   $ret=$163;
   $164=$ret;
   $165=($164|0)<0;
   if ($165) {
    label = 22;
    break;
   }
   $169=$ret;
   $170=$4;
   $171=(($170+$169)|0);
   $4=$171;
   $172=$ret;
   $173=$mp3size;
   $174=((($173)+($172))|0);
   $mp3size=$174;
   $175=$pcm_samples_per_frame;
   $176=$esv;
   $177=(($176+56212)|0);
   $178=((HEAP32[(($177)>>2)])|0);
   $179=((($178)-($175))|0);
   HEAP32[(($177)>>2)]=$179;
   $180=$pcm_samples_per_frame;
   $181=$esv;
   $182=(($181+56208)|0);
   $183=((HEAP32[(($182)>>2)])|0);
   $184=((($183)-($180))|0);
   HEAP32[(($182)>>2)]=$184;
   $ch=0;
   while(1) {
    $186=$ch;
    $187=$cfg;
    $188=(($187+56)|0);
    $189=((HEAP32[(($188)>>2)])|0);
    $190=($186|0)<($189|0);
    if (!($190)) {
     break;
    }
    $i=0;
    while(1) {
     $193=$i;
     $194=$esv;
     $195=(($194+56212)|0);
     $196=((HEAP32[(($195)>>2)])|0);
     $197=($193|0)<($196|0);
     if (!($197)) {
      break;
     }
     $199=$i;
     $200=$pcm_samples_per_frame;
     $201=((($199)+($200))|0);
     $202=$ch;
     $203=(($mfbuf+($202<<2))|0);
     $204=((HEAP32[(($203)>>2)])|0);
     $205=(($204+($201<<2))|0);
     $206=(+(HEAPF32[(($205)>>2)]));
     $207=$i;
     $208=$ch;
     $209=(($mfbuf+($208<<2))|0);
     $210=((HEAP32[(($209)>>2)])|0);
     $211=(($210+($207<<2))|0);
     HEAPF32[(($211)>>2)]=$206;
     $213=$i;
     $214=((($213)+(1))|0);
     $i=$214;
    }
    $217=$ch;
    $218=((($217)+(1))|0);
    $ch=$218;
   }
  }
 }
 if ((label|0) == 12) {
  $1=-6;
  $224=$1;
  STACKTOP=sp;return (($224)|0);
 }
 else if ((label|0) == 22) {
  $167=$ret;
  $1=$167;
  $224=$1;
  STACKTOP=sp;return (($224)|0);
 }
 else if ((label|0) == 33) {
  $222=$mp3size;
  $1=$222;
  $224=$1;
  STACKTOP=sp;return (($224)|0);
 }
  return 0;
}


function _AddVbrFrame($gfc){
 $gfc=($gfc)|0;
 var $1=0,$kbps=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$14=0,$15=0,label=0;
 var sp=0;sp=STACKTOP;


 $1=$gfc;
 $2=$1;
 $3=(($2+84040)|0);
 $4=(($3+704)|0);
 $5=((HEAP32[(($4)>>2)])|0);
 $6=$1;
 $7=(($6+16)|0);
 $8=(($7)|0);
 $9=((HEAP32[(($8)>>2)])|0);
 $10=((15168+($9<<6))|0);
 $11=(($10+($5<<2))|0);
 $12=((HEAP32[(($11)>>2)])|0);
 $kbps=$12;
 $13=$1;
 $14=(($13+85760)|0);
 $15=$kbps;
 _addVbr($14,$15);
 STACKTOP=sp;return;
}


function _InitVbrTag($gfp){
 $gfp=($gfp)|0;
 var $1=0,$2=0,$gfc=0,$cfg=0,$kbps_header=0,$total_frame_size=0,$header_size=0,$buffer=0,$i=0,$n=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$14=0;
 var $15=0,$16=0,$17=0,$22=0,$23=0,$24=0,$25=0,$27=0,$28=0,$29=0,$31=0,$32=0,$33=0,$34=0,$35=0,$36=0,$37=0,$38=0,$39=0,$40=0;
 var $41=0,$42=0,$43=0,$44=0,$45=0,$46=0,$47=0,$48=0,$49=0,$50=0,$51=0,$52=0,$54=0,$55=0,$57=0,$58=0,$59=0,$61=0,$62=0,$63=0;
 var $64=0,$65=0,$66=0,$67=0,$68=0,$69=0,$70=0,$71=0,$72=0,$73=0,$74=0,$75=0,$76=0,$77=0,$78=0,$79=0,$80=0,$81=0,$82=0,$83=0;
 var $85=0,$86=0,$87=0,$88=0,$89=0,$90=0,$91=0,$92=0,$93=0,$94=0,$96=0,$97=0,$98=0,$100=0,$101=0,$102=0,$103=0,$104=0,$105=0,$106=0;
 var $109=0,$110=0,$111=0,$112=0,$113=0,$114=0,$115=0,$117=0,$118=0,$119=0,$121=0,$122=0,$123=0,$124=0,$126=0,$127=0,$130=0,label=0;
 var tempVarArgs=0;
 var sp=0;sp=STACKTOP;STACKTOP=(STACKTOP+2880)|0;







 $buffer=((sp)|0);


 $2=$gfp;
 $3=$2;
 $4=(($3+288)|0);
 $5=((HEAP32[(($4)>>2)])|0);
 $gfc=$5;
 $6=$gfc;
 $7=(($6+16)|0);
 $cfg=$7;
 $8=$cfg;
 $9=(($8)|0);
 $10=((HEAP32[(($9)>>2)])|0);
 $11=1==($10|0);
 if ($11) {
  $kbps_header=128;
 } else {
  $14=$cfg;
  $15=(($14+48)|0);
  $16=((HEAP32[(($15)>>2)])|0);
  $17=($16|0)<16000;
  if ($17) {
   $kbps_header=32;
  } else {
   $kbps_header=64;
  }
 }
 $22=$cfg;
 $23=(($22+88)|0);
 $24=((HEAP32[(($23)>>2)])|0);
 $25=($24|0)==0;
 if ($25) {
  $27=$cfg;
  $28=(($27+104)|0);
  $29=((HEAP32[(($28)>>2)])|0);
  $kbps_header=$29;
 }
 $31=$cfg;
 $32=(($31)|0);
 $33=((HEAP32[(($32)>>2)])|0);
 $34=((($33)+(1))|0);
 $35=((($34)*(72000))&-1);
 $36=$kbps_header;
 $37=(Math_imul($35,$36)|0);
 $38=$cfg;
 $39=(($38+48)|0);
 $40=((HEAP32[(($39)>>2)])|0);
 $41=(((($37|0))/(($40|0)))&-1);
 $total_frame_size=$41;
 $42=$cfg;
 $43=(($42+8)|0);
 $44=((HEAP32[(($43)>>2)])|0);
 $45=((($44)+(156))|0);
 $header_size=$45;
 $46=$total_frame_size;
 $47=$gfc;
 $48=(($47+85760)|0);
 $49=(($48+32)|0);
 HEAP32[(($49)>>2)]=$46;
 $50=$total_frame_size;
 $51=$header_size;
 $52=($50|0)<($51|0);
 do {
  if (!($52)) {
   $54=$total_frame_size;
   $55=($54|0)>2880;
   if ($55) {
    break;
   }
   $61=$gfc;
   $62=(($61+85760)|0);
   $63=(($62+24)|0);
   HEAP32[(($63)>>2)]=0;
   $64=$gfc;
   $65=(($64+85760)|0);
   $66=(($65+28)|0);
   HEAP32[(($66)>>2)]=0;
   $67=$gfc;
   $68=(($67+85760)|0);
   $69=(($68)|0);
   HEAP32[(($69)>>2)]=0;
   $70=$gfc;
   $71=(($70+85760)|0);
   $72=(($71+4)|0);
   HEAP32[(($72)>>2)]=0;
   $73=$gfc;
   $74=(($73+85760)|0);
   $75=(($74+8)|0);
   HEAP32[(($75)>>2)]=1;
   $76=$gfc;
   $77=(($76+85760)|0);
   $78=(($77+12)|0);
   HEAP32[(($78)>>2)]=0;
   $79=$gfc;
   $80=(($79+85760)|0);
   $81=(($80+20)|0);
   $82=((HEAP32[(($81)>>2)])|0);
   $83=($82|0)==0;
   do {
    if ($83) {
     $85=((_malloc(1600))|0);
     $86=$85;
     $87=$gfc;
     $88=(($87+85760)|0);
     $89=(($88+20)|0);
     HEAP32[(($89)>>2)]=$86;
     $90=$gfc;
     $91=(($90+85760)|0);
     $92=(($91+20)|0);
     $93=((HEAP32[(($92)>>2)])|0);
     $94=($93|0)!=0;
     if ($94) {
      $96=$gfc;
      $97=(($96+85760)|0);
      $98=(($97+16)|0);
      HEAP32[(($98)>>2)]=400;
      break;
     } else {
      $100=$gfc;
      $101=(($100+85760)|0);
      $102=(($101+16)|0);
      HEAP32[(($102)>>2)]=0;
      $103=$gfc;
      _lame_errorf($103,16248,(((tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs))|0)); STACKTOP=tempVarArgs;
      $104=$gfc;
      $105=(($104+16)|0);
      $106=(($105+140)|0);
      HEAP32[(($106)>>2)]=0;
      $1=-1;
      $130=$1;
      STACKTOP=sp;return (($130)|0);
     }
    }
   } while(0);
   $109=$buffer;
   _memset((((($109)|0))|0), ((((0)|0))|0), ((((2880)|0))|0))|0;
   $110=$gfc;
   $111=(($buffer)|0);
   _setLameTagFrameHeader($110,$111);
   $112=$gfc;
   $113=(($112+85760)|0);
   $114=(($113+32)|0);
   $115=((HEAP32[(($114)>>2)])|0);
   $n=$115;
   $i=0;
   while(1) {
    $117=$i;
    $118=$n;
    $119=($117>>>0)<($118>>>0);
    if (!($119)) {
     break;
    }
    $121=$gfc;
    $122=$i;
    $123=(($buffer+$122)|0);
    $124=((HEAP8[($123)])|0);
    _add_dummy_byte($121,$124,1);
    $126=$i;
    $127=((($126)+(1))|0);
    $i=$127;
   }
   $1=0;
   $130=$1;
   STACKTOP=sp;return (($130)|0);
  }
 } while(0);
 $57=$gfc;
 $58=(($57+16)|0);
 $59=(($58+140)|0);
 HEAP32[(($59)>>2)]=0;
 $1=0;
 $130=$1;
 STACKTOP=sp;return (($130)|0);
}


function _UpdateMusicCRC($crc,$buffer,$size){
 $crc=($crc)|0;
 $buffer=($buffer)|0;
 $size=($size)|0;
 var $1=0,$2=0,$3=0,$i=0,$5=0,$6=0,$7=0,$9=0,$10=0,$11=0,$12=0,$13=0,$14=0,$15=0,$16=0,$17=0,$19=0,$20=0,label=0;
 var sp=0;sp=STACKTOP;




 $1=$crc;
 $2=$buffer;
 $3=$size;
 $i=0;
 while(1) {
  $5=$i;
  $6=$3;
  $7=($5|0)<($6|0);
  if (!($7)) {
   break;
  }
  $9=$i;
  $10=$2;
  $11=(($10+$9)|0);
  $12=((HEAP8[($11)])|0);
  $13=($12&255);
  $14=$1;
  $15=((HEAP16[(($14)>>1)])|0);
  $16=((_CRC_update_lookup($13,$15))|0);
  $17=$1;
  HEAP16[(($17)>>1)]=$16;
  $19=$i;
  $20=((($19)+(1))|0);
  $i=$20;
 }
 STACKTOP=sp;return;
}


function _addVbr($v,$bitrate){
 $v=($v)|0;
 $bitrate=($bitrate)|0;
 var $1=0,$2=0,$i=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$14=0,$15=0,$16=0,$17=0,$18=0,$19=0;
 var $20=0,$21=0,$22=0,$25=0,$26=0,$27=0,$28=0,$29=0,$30=0,$31=0,$33=0,$34=0,$35=0,$36=0,$37=0,$38=0,$39=0,$40=0,$41=0,$42=0;
 var $43=0,$44=0,$45=0,$46=0,$47=0,$48=0,$50=0,$51=0,$52=0,$53=0,$54=0,$55=0,$56=0,$59=0,$60=0,$61=0,$62=0,$63=0,$65=0,$66=0;
 var $67=0,$68=0,$69=0,$70=0,$71=0,$72=0,$73=0,$74=0,$75=0,$76=0,$78=0,$79=0,$81=0,$82=0,$83=0,$84=0,$85=0,$86=0,$87=0,$88=0;
 var label=0;
 var sp=0;sp=STACKTOP;



 $1=$v;
 $2=$bitrate;
 $3=$1;
 $4=(($3+24)|0);
 $5=((HEAP32[(($4)>>2)])|0);
 $6=((($5)+(1))|0);
 HEAP32[(($4)>>2)]=$6;
 $7=$2;
 $8=$1;
 $9=(($8)|0);
 $10=((HEAP32[(($9)>>2)])|0);
 $11=((($10)+($7))|0);
 HEAP32[(($9)>>2)]=$11;
 $12=$1;
 $13=(($12+4)|0);
 $14=((HEAP32[(($13)>>2)])|0);
 $15=((($14)+(1))|0);
 HEAP32[(($13)>>2)]=$15;
 $16=$1;
 $17=(($16+4)|0);
 $18=((HEAP32[(($17)>>2)])|0);
 $19=$1;
 $20=(($19+8)|0);
 $21=((HEAP32[(($20)>>2)])|0);
 $22=($18|0)<($21|0);
 if ($22) {
  STACKTOP=sp;return;
 }
 $25=$1;
 $26=(($25+12)|0);
 $27=((HEAP32[(($26)>>2)])|0);
 $28=$1;
 $29=(($28+16)|0);
 $30=((HEAP32[(($29)>>2)])|0);
 $31=($27|0)<($30|0);
 if ($31) {
  $33=$1;
  $34=(($33)|0);
  $35=((HEAP32[(($34)>>2)])|0);
  $36=$1;
  $37=(($36+12)|0);
  $38=((HEAP32[(($37)>>2)])|0);
  $39=$1;
  $40=(($39+20)|0);
  $41=((HEAP32[(($40)>>2)])|0);
  $42=(($41+($38<<2))|0);
  HEAP32[(($42)>>2)]=$35;
  $43=$1;
  $44=(($43+12)|0);
  $45=((HEAP32[(($44)>>2)])|0);
  $46=((($45)+(1))|0);
  HEAP32[(($44)>>2)]=$46;
  $47=$1;
  $48=(($47+4)|0);
  HEAP32[(($48)>>2)]=0;
 }
 $50=$1;
 $51=(($50+12)|0);
 $52=((HEAP32[(($51)>>2)])|0);
 $53=$1;
 $54=(($53+16)|0);
 $55=((HEAP32[(($54)>>2)])|0);
 $56=($52|0)==($55|0);
 if (!($56)) {
  STACKTOP=sp;return;
 }
 $i=1;
 while(1) {
  $59=$i;
  $60=$1;
  $61=(($60+16)|0);
  $62=((HEAP32[(($61)>>2)])|0);
  $63=($59|0)<($62|0);
  if (!($63)) {
   break;
  }
  $65=$i;
  $66=$1;
  $67=(($66+20)|0);
  $68=((HEAP32[(($67)>>2)])|0);
  $69=(($68+($65<<2))|0);
  $70=((HEAP32[(($69)>>2)])|0);
  $71=$i;
  $72=(((($71|0))/(2))&-1);
  $73=$1;
  $74=(($73+20)|0);
  $75=((HEAP32[(($74)>>2)])|0);
  $76=(($75+($72<<2))|0);
  HEAP32[(($76)>>2)]=$70;
  $78=$i;
  $79=((($78)+(2))|0);
  $i=$79;
 }
 $81=$1;
 $82=(($81+8)|0);
 $83=((HEAP32[(($82)>>2)])|0);
 $84=($83<<1);
 HEAP32[(($82)>>2)]=$84;
 $85=$1;
 $86=(($85+12)|0);
 $87=((HEAP32[(($86)>>2)])|0);
 $88=(((($87|0))/(2))&-1);
 HEAP32[(($86)>>2)]=$88;
 STACKTOP=sp;return;
}


function _setLameTagFrameHeader($gfc,$buffer){
 $gfc=($gfc)|0;
 $buffer=($buffer)|0;
 var $1=0,$2=0,$cfg=0,$eov=0,$abyte=0,$bbyte=0,$bitrate=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$14=0,$15=0;
 var $16=0,$17=0,$18=0,$19=0,$20=0,$21=0,$22=0,$23=0,$24=0,$25=0,$26=0,$27=0,$28=0,$29=0,$30=0,$31=0,$32=0,$33=0,$34=0,$35=0;
 var $36=0,$37=0,$38=0,$39=0,$40=0,$41=0,$42=0,$43=0,$44=0,$45=0,$46=0,$47=0,$48=0,$49=0,$50=0,$51=0,$52=0,$53=0,$54=0,$55=0;
 var $56=0,$57=0,$58=0,$59=0,$60=0,$61=0,$62=0,$63=0,$64=0,$65=0,$66=0,$67=0,$68=0,$69=0,$70=0,$71=0,$72=0,$73=0,$74=0,$75=0;
 var $76=0,$77=0,$78=0,$79=0,$80=0,$81=0,$82=0,$83=0,$84=0,$85=0,$86=0,$87=0,$88=0,$89=0,$90=0,$91=0,$92=0,$93=0,$94=0,$95=0;
 var $96=0,$97=0,$98=0,$99=0,$100=0,$101=0,$102=0,$103=0,$104=0,$105=0,$106=0,$107=0,$108=0,$109=0,$110=0,$111=0,$112=0,$113=0,$114=0,$115=0;
 var $116=0,$117=0,$118=0,$119=0,$120=0,$121=0,$122=0,$123=0,$124=0,$125=0,$126=0,$127=0,$128=0,$129=0,$130=0,$131=0,$132=0,$133=0,$134=0,$135=0;
 var $136=0,$137=0,$138=0,$139=0,$140=0,$141=0,$142=0,$143=0,$144=0,$145=0,$146=0,$147=0,$148=0,$149=0,$150=0,$151=0,$152=0,$153=0,$154=0,$155=0;
 var $156=0,$157=0,$158=0,$159=0,$160=0,$161=0,$162=0,$163=0,$164=0,$165=0,$166=0,$167=0,$168=0,$169=0,$170=0,$171=0,$172=0,$173=0,$174=0,$175=0;
 var $176=0,$177=0,$178=0,$179=0,$180=0,$181=0,$182=0,$183=0,$184=0,$185=0,$186=0,$187=0,$188=0,$189=0,$190=0,$191=0,$192=0,$193=0,$194=0,$195=0;
 var $196=0,$197=0,$198=0,$199=0,$200=0,$201=0,$204=0,$205=0,$206=0,$207=0,$212=0,$213=0,$214=0,$215=0,$217=0,$218=0,$219=0,$221=0,$222=0,$223=0;
 var $224=0,$227=0,$228=0,$229=0,$230=0,$231=0,$232=0,$233=0,$234=0,$235=0,$236=0,$238=0,$239=0,$240=0,$241=0,$243=0,$244=0,$245=0,$246=0,$247=0;
 var $248=0,$249=0,$250=0,$251=0,$252=0,$253=0,$254=0,$255=0,$256=0,$257=0,$258=0,$259=0,$260=0,$261=0,$262=0,$264=0,$265=0,$266=0,$267=0,$268=0;
 var $269=0,$270=0,$271=0,$272=0,$273=0,$274=0,$275=0,$276=0,$277=0,$278=0,$279=0,$280=0,$281=0,$282=0,$283=0,label=0;
 var sp=0;sp=STACKTOP;







 $1=$gfc;
 $2=$buffer;
 $3=$1;
 $4=(($3+16)|0);
 $cfg=$4;
 $5=$1;
 $6=(($5+84040)|0);
 $eov=$6;
 $7=$2;
 $8=(($7)|0);
 $9=((HEAP8[($8)])|0);
 $10=($9&255);
 $11=$10<<8;
 $12=$11|255;
 $13=(($12)&255);
 $14=$2;
 $15=(($14)|0);
 HEAP8[($15)]=$13;
 $16=$2;
 $17=(($16+1)|0);
 $18=((HEAP8[($17)])|0);
 $19=($18&255);
 $20=$19<<3;
 $21=$20|7;
 $22=(($21)&255);
 $23=$2;
 $24=(($23+1)|0);
 HEAP8[($24)]=$22;
 $25=$2;
 $26=(($25+1)|0);
 $27=((HEAP8[($26)])|0);
 $28=($27&255);
 $29=$28<<1;
 $30=$cfg;
 $31=(($30+48)|0);
 $32=((HEAP32[(($31)>>2)])|0);
 $33=($32|0)<16000;
 $34=($33?0:1);
 $35=$34&1;
 $36=$29|$35;
 $37=(($36)&255);
 $38=$2;
 $39=(($38+1)|0);
 HEAP8[($39)]=$37;
 $40=$2;
 $41=(($40+1)|0);
 $42=((HEAP8[($41)])|0);
 $43=($42&255);
 $44=$43<<1;
 $45=$cfg;
 $46=(($45)|0);
 $47=((HEAP32[(($46)>>2)])|0);
 $48=$47&1;
 $49=$44|$48;
 $50=(($49)&255);
 $51=$2;
 $52=(($51+1)|0);
 HEAP8[($52)]=$50;
 $53=$2;
 $54=(($53+1)|0);
 $55=((HEAP8[($54)])|0);
 $56=($55&255);
 $57=$56<<2;
 $58=$57|1;
 $59=(($58)&255);
 $60=$2;
 $61=(($60+1)|0);
 HEAP8[($61)]=$59;
 $62=$2;
 $63=(($62+1)|0);
 $64=((HEAP8[($63)])|0);
 $65=($64&255);
 $66=$65<<1;
 $67=$cfg;
 $68=(($67+144)|0);
 $69=((HEAP32[(($68)>>2)])|0);
 $70=($69|0)!=0;
 $71=$70^1;
 $72=($71?1:0);
 $73=$72&1;
 $74=$66|$73;
 $75=(($74)&255);
 $76=$2;
 $77=(($76+1)|0);
 HEAP8[($77)]=$75;
 $78=$2;
 $79=(($78+2)|0);
 $80=((HEAP8[($79)])|0);
 $81=($80&255);
 $82=$81<<4;
 $83=$eov;
 $84=(($83+704)|0);
 $85=((HEAP32[(($84)>>2)])|0);
 $86=$85&15;
 $87=$82|$86;
 $88=(($87)&255);
 $89=$2;
 $90=(($89+2)|0);
 HEAP8[($90)]=$88;
 $91=$2;
 $92=(($91+2)|0);
 $93=((HEAP8[($92)])|0);
 $94=($93&255);
 $95=$94<<2;
 $96=$cfg;
 $97=(($96+4)|0);
 $98=((HEAP32[(($97)>>2)])|0);
 $99=$98&3;
 $100=$95|$99;
 $101=(($100)&255);
 $102=$2;
 $103=(($102+2)|0);
 HEAP8[($103)]=$101;
 $104=$2;
 $105=(($104+2)|0);
 $106=((HEAP8[($105)])|0);
 $107=($106&255);
 $108=$107<<1;
 $109=(($108)&255);
 $110=$2;
 $111=(($110+2)|0);
 HEAP8[($111)]=$109;
 $112=$2;
 $113=(($112+2)|0);
 $114=((HEAP8[($113)])|0);
 $115=($114&255);
 $116=$115<<1;
 $117=$cfg;
 $118=(($117+156)|0);
 $119=((HEAP32[(($118)>>2)])|0);
 $120=$119&1;
 $121=$116|$120;
 $122=(($121)&255);
 $123=$2;
 $124=(($123+2)|0);
 HEAP8[($124)]=$122;
 $125=$2;
 $126=(($125+3)|0);
 $127=((HEAP8[($126)])|0);
 $128=($127&255);
 $129=$128<<2;
 $130=$cfg;
 $131=(($130+164)|0);
 $132=((HEAP32[(($131)>>2)])|0);
 $133=$132&3;
 $134=$129|$133;
 $135=(($134)&255);
 $136=$2;
 $137=(($136+3)|0);
 HEAP8[($137)]=$135;
 $138=$2;
 $139=(($138+3)|0);
 $140=((HEAP8[($139)])|0);
 $141=($140&255);
 $142=$141<<2;
 $143=$eov;
 $144=(($143+716)|0);
 $145=((HEAP32[(($144)>>2)])|0);
 $146=$145&3;
 $147=$142|$146;
 $148=(($147)&255);
 $149=$2;
 $150=(($149+3)|0);
 HEAP8[($150)]=$148;
 $151=$2;
 $152=(($151+3)|0);
 $153=((HEAP8[($152)])|0);
 $154=($153&255);
 $155=$154<<1;
 $156=$cfg;
 $157=(($156+148)|0);
 $158=((HEAP32[(($157)>>2)])|0);
 $159=$158&1;
 $160=$155|$159;
 $161=(($160)&255);
 $162=$2;
 $163=(($162+3)|0);
 HEAP8[($163)]=$161;
 $164=$2;
 $165=(($164+3)|0);
 $166=((HEAP8[($165)])|0);
 $167=($166&255);
 $168=$167<<1;
 $169=$cfg;
 $170=(($169+152)|0);
 $171=((HEAP32[(($170)>>2)])|0);
 $172=$171&1;
 $173=$168|$172;
 $174=(($173)&255);
 $175=$2;
 $176=(($175+3)|0);
 HEAP8[($176)]=$174;
 $177=$2;
 $178=(($177+3)|0);
 $179=((HEAP8[($178)])|0);
 $180=($179&255);
 $181=$180<<2;
 $182=$cfg;
 $183=(($182+160)|0);
 $184=((HEAP32[(($183)>>2)])|0);
 $185=$184&3;
 $186=$181|$185;
 $187=(($186)&255);
 $188=$2;
 $189=(($188+3)|0);
 HEAP8[($189)]=$187;
 $190=$2;
 $191=(($190)|0);
 HEAP8[($191)]=-1;
 $192=$2;
 $193=(($192+1)|0);
 $194=((HEAP8[($193)])|0);
 $195=($194&255);
 $196=$195&241;
 $197=(($196)&255);
 $abyte=$197;
 $198=$cfg;
 $199=(($198)|0);
 $200=((HEAP32[(($199)>>2)])|0);
 $201=1==($200|0);
 if ($201) {
  $bitrate=128;
 } else {
  $204=$cfg;
  $205=(($204+48)|0);
  $206=((HEAP32[(($205)>>2)])|0);
  $207=($206|0)<16000;
  if ($207) {
   $bitrate=32;
  } else {
   $bitrate=64;
  }
 }
 $212=$cfg;
 $213=(($212+88)|0);
 $214=((HEAP32[(($213)>>2)])|0);
 $215=($214|0)==0;
 if ($215) {
  $217=$cfg;
  $218=(($217+104)|0);
  $219=((HEAP32[(($218)>>2)])|0);
  $bitrate=$219;
 }
 $221=$cfg;
 $222=(($221+136)|0);
 $223=((HEAP32[(($222)>>2)])|0);
 $224=($223|0)!=0;
 if ($224) {
  $bbyte=0;
 } else {
  $227=$bitrate;
  $228=$cfg;
  $229=(($228)|0);
  $230=((HEAP32[(($229)>>2)])|0);
  $231=$cfg;
  $232=(($231+48)|0);
  $233=((HEAP32[(($232)>>2)])|0);
  $234=((_BitrateIndex($227,$230,$233))|0);
  $235=($234<<4);
  $236=(($235)&255);
  $bbyte=$236;
 }
 $238=$cfg;
 $239=(($238)|0);
 $240=((HEAP32[(($239)>>2)])|0);
 $241=($240|0)==1;
 if ($241) {
  $243=$abyte;
  $244=(($243<<24)>>24);
  $245=$244|10;
  $246=(($245)&255);
  $247=$2;
  $248=(($247+1)|0);
  HEAP8[($248)]=$246;
  $249=$2;
  $250=(($249+2)|0);
  $251=((HEAP8[($250)])|0);
  $252=($251&255);
  $253=$252&13;
  $254=(($253)&255);
  $abyte=$254;
  $255=$bbyte;
  $256=(($255<<24)>>24);
  $257=$abyte;
  $258=(($257<<24)>>24);
  $259=$256|$258;
  $260=(($259)&255);
  $261=$2;
  $262=(($261+2)|0);
  HEAP8[($262)]=$260;
  STACKTOP=sp;return;
 } else {
  $264=$abyte;
  $265=(($264<<24)>>24);
  $266=$265|2;
  $267=(($266)&255);
  $268=$2;
  $269=(($268+1)|0);
  HEAP8[($269)]=$267;
  $270=$2;
  $271=(($270+2)|0);
  $272=((HEAP8[($271)])|0);
  $273=($272&255);
  $274=$273&13;
  $275=(($274)&255);
  $abyte=$275;
  $276=$bbyte;
  $277=(($276<<24)>>24);
  $278=$abyte;
  $279=(($278<<24)>>24);
  $280=$277|$279;
  $281=(($280)&255);
  $282=$2;
  $283=(($282+2)|0);
  HEAP8[($283)]=$281;
  STACKTOP=sp;return;
 }
}


function _CRC_update_lookup($value,$crc){
 $value=($value)|0;
 $crc=($crc)|0;
 var $1=0,$2=0,$tmp=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$14=0,$15=0,$16=0,$17=0,$18=0,$19=0;
 var label=0;
 var sp=0;sp=STACKTOP;



 $1=$value;
 $2=$crc;
 $3=$2;
 $4=($3&65535);
 $5=$1;
 $6=($5&65535);
 $7=$4^$6;
 $8=(($7)&65535);
 $tmp=$8;
 $9=$2;
 $10=($9&65535);
 $11=$10>>8;
 $12=$tmp;
 $13=($12&65535);
 $14=$13&255;
 $15=((14048+($14<<2))|0);
 $16=((HEAP32[(($15)>>2)])|0);
 $17=$11^$16;
 $18=(($17)&65535);
 $2=$18;
 $19=$2;
 STACKTOP=sp;return (($19)|0);
}


function _InitGainAnalysis($rgData,$samplefreq){
 $rgData=($rgData)|0;
 $samplefreq=($samplefreq)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$10=0,$11=0,$12=0,$13=0,$14=0,$15=0,$16=0,$17=0,$18=0,$19=0,$20=0,$21=0,$22=0;
 var $23=0,$24=0,$25=0,$26=0,$27=0,$28=0,$29=0,$30=0,$31=0,$32=0,$33=0,$34=0,$35=0,$36=0,$37=0,$38=0,$39=0,$40=0,$41=0,$42=0;
 var $43=0,$44=0,$45=0,$46=0,$47=0,$48=0,$50=0,label=0;
 var sp=0;sp=STACKTOP;



 $2=$rgData;
 $3=$samplefreq;
 $4=$2;
 $5=$3;
 $6=((_ResetSampleFrequency($4,$5))|0);
 $7=($6|0)!=1;
 if ($7) {
  $1=0;
  $50=$1;
  STACKTOP=sp;return (($50)|0);
 } else {
  $10=$2;
  $11=(($10)|0);
  $12=(($11)|0);
  $13=(($12+40)|0);
  $14=$2;
  $15=(($14+80)|0);
  HEAP32[(($15)>>2)]=$13;
  $16=$2;
  $17=(($16+19380)|0);
  $18=(($17)|0);
  $19=(($18+40)|0);
  $20=$2;
  $21=(($20+19460)|0);
  HEAP32[(($21)>>2)]=$19;
  $22=$2;
  $23=(($22+84)|0);
  $24=(($23)|0);
  $25=(($24+40)|0);
  $26=$2;
  $27=(($26+9728)|0);
  HEAP32[(($27)>>2)]=$25;
  $28=$2;
  $29=(($28+19464)|0);
  $30=(($29)|0);
  $31=(($30+40)|0);
  $32=$2;
  $33=(($32+29108)|0);
  HEAP32[(($33)>>2)]=$31;
  $34=$2;
  $35=(($34+9732)|0);
  $36=(($35)|0);
  $37=(($36+40)|0);
  $38=$2;
  $39=(($38+19376)|0);
  HEAP32[(($39)>>2)]=$37;
  $40=$2;
  $41=(($40+29112)|0);
  $42=(($41)|0);
  $43=(($42+40)|0);
  $44=$2;
  $45=(($44+38756)|0);
  HEAP32[(($45)>>2)]=$43;
  $46=$2;
  $47=(($46+86792)|0);
  $48=$47;
  _memset((((($48)|0))|0), ((((0)|0))|0), ((((48000)|0))|0))|0;
  $1=1;
  $50=$1;
  STACKTOP=sp;return (($50)|0);
 }
  return 0;
}


function _AnalyzeSamples($rgData,$left_samples,$right_samples,$num_samples,$num_channels){
 $rgData=($rgData)|0;
 $left_samples=($left_samples)|0;
 $right_samples=($right_samples)|0;
 $num_samples=($num_samples)|0;
 $num_channels=($num_channels)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$curleft=0,$curright=0,$batchsamples=0,$cursamples=0,$cursamplepos=0,$i=0,$val=.0,$ival=0,$7=0,$8=0,$11=0,$12=0,$14=0,$18=0;
 var $19=0,$21=0,$22=0,$23=0,$24=0,$25=0,$26=0,$27=0,$28=0,$29=0,$30=0,$31=0,$32=0,$33=0,$34=0,$35=0,$36=0,$37=0,$38=0,$40=0;
 var $41=0,$42=0,$43=0,$44=0,$45=0,$46=0,$47=0,$48=0,$49=0,$50=0,$51=0,$52=0,$53=0,$56=0,$57=0,$59=0,$60=0,$61=0,$62=0,$63=0;
 var $64=0,$65=0,$66=0,$67=0,$69=0,$70=0,$71=0,$72=0,$73=0,$74=0,$75=0,$77=0,$79=0,$80=0,$81=0,$83=0,$84=0,$85=0,$86=0,$87=0;
 var $88=0,$89=0,$90=0,$91=0,$92=0,$93=0,$94=0,$95=0,$96=0,$98=0,$99=0,$102=0,$103=0,$104=0,$105=0,$106=0,$107=0,$109=0,$110=0,$111=0;
 var $112=0,$113=0,$114=0,$115=0,$116=0,$117=0,$118=0,$119=0,$120=0,$121=0,$122=0,$123=0,$124=0,$125=0,$126=0,$127=0,$128=0,$129=0,$130=0,$131=0;
 var $132=0,$133=0,$134=0,$135=0,$136=0,$137=0,$138=0,$139=0,$140=0,$141=0,$142=0,$143=0,$144=0,$145=0,$146=0,$147=0,$148=0,$149=0,$150=0,$151=0;
 var $152=0,$153=0,$154=0,$155=0,$156=0,$157=0,$158=0,$159=0,$160=0,$161=0,$162=0,$163=0,$164=0,$165=0,$166=0,$167=0,$168=0,$169=0,$170=0,$171=0;
 var $172=0,$173=0,$174=0,$175=0,$176=0,$177=0,$178=0,$179=0,$180=0,$181=0,$182=0,$183=0,$184=0,$185=0,$186=0,$187=0,$188=0,$189=0,$190=0,$191=0;
 var $192=0,$194=0,$195=0,$196=0,$198=0,$199=0,$200=.0,$201=.0,$202=.0,$203=0,$204=0,$205=.0,$206=.0,$207=0,$208=0,$209=.0,$210=.0,$211=.0,$212=0,$213=0;
 var $214=.0,$215=.0,$217=0,$218=0,$220=0,$221=0,$222=0,$224=0,$225=0,$226=.0,$227=.0,$228=.0,$229=0,$230=0,$231=.0,$232=.0,$233=.0,$234=.0,$235=0,$236=0;
 var $237=.0,$238=.0,$239=.0,$240=.0,$241=0,$242=0,$243=.0,$244=.0,$245=.0,$246=.0,$247=0,$248=0,$249=.0,$250=.0,$251=.0,$252=.0,$253=0,$254=0,$255=.0,$256=.0;
 var $257=.0,$258=.0,$259=0,$260=0,$261=.0,$262=.0,$263=.0,$264=.0,$265=0,$266=0,$267=.0,$268=.0,$269=.0,$270=.0,$271=0,$272=0,$273=.0,$274=.0,$275=0,$276=0;
 var $277=0,$278=0,$279=.0,$280=.0,$281=.0,$282=0,$283=0,$284=.0,$285=.0,$286=.0,$287=.0,$288=0,$289=0,$290=.0,$291=.0,$292=.0,$293=.0,$294=0,$295=0,$296=.0;
 var $297=.0,$298=.0,$299=.0,$300=0,$301=0,$302=.0,$303=.0,$304=.0,$305=.0,$306=0,$307=0,$308=.0,$309=.0,$310=.0,$311=.0,$312=0,$313=0,$314=.0,$315=.0,$316=.0;
 var $317=.0,$318=0,$319=0,$320=.0,$321=.0,$322=.0,$323=.0,$324=0,$325=0,$326=.0,$327=.0,$328=0,$329=0,$331=0,$332=0,$333=0,$334=0,$335=0,$336=0,$337=0;
 var $338=0,$339=0,$340=0,$341=0,$342=0,$343=0,$344=0,$345=0,$346=0,$347=0,$348=0,$350=0,$351=0,$352=.0,$353=0,$354=0,$355=.0,$356=.0,$357=0,$358=0;
 var $359=0,$360=.0,$361=.0,$362=.0,$363=.0,$364=.0,$365=.0,$366=.0,$367=0,$370=.0,$371=0,$373=0,$374=0,$375=0,$378=0,$379=0,$380=0,$381=0,$382=0,$383=0;
 var $384=0,$385=0,$386=0,$387=0,$388=0,$389=0,$390=0,$391=0,$392=0,$393=0,$394=0,$395=0,$396=0,$397=0,$398=0,$399=0,$400=0,$401=0,$402=0,$403=0;
 var $404=0,$405=0,$406=0,$407=0,$408=0,$409=0,$410=0,$411=0,$412=0,$413=0,$414=0,$415=0,$416=0,$417=0,$418=0,$419=0,$420=0,$421=0,$422=0,$423=0;
 var $424=0,$425=0,$426=0,$427=0,$428=0,$429=0,$430=0,$431=0,$432=0,$433=0,$435=0,$436=0,$437=0,$438=0,$439=0,$440=0,$441=0,$445=0,$446=0,$448=0;
 var $449=0,$450=0,$451=0,$452=0,$453=0,$454=0,$455=0,$456=0,$457=0,$458=0,$459=0,$460=0,$461=0,$462=0,$463=0,$464=0,$465=0,$466=0,$467=0,$468=0;
 var $469=0,$470=0,$471=0,$472=0,$473=0,$474=0,$475=0,$476=0,$477=0,$478=0,$479=0,$480=0,$481=0,$482=0,$483=0,$484=0,$485=0,$486=0,$487=0,$488=0;
 var $489=0,$490=0,$491=0,$492=0,$493=0,$494=0,$495=0,$497=0,$498=0,$499=0,$500=0,$501=0,$502=0,$503=0,$504=0,$505=0,$506=0,$507=0,$508=0,$509=0;
 var $510=0,$511=0,$512=0,$515=0,label=0;
 var sp=0;sp=STACKTOP;














 $2=$rgData;
 $3=$left_samples;
 $4=$right_samples;
 $5=$num_samples;
 $6=$num_channels;
 $7=$5;
 $8=($7|0)==0;
 if ($8) {
  $1=1;
  $515=$1;
  STACKTOP=sp;return (($515)|0);
 }
 $cursamplepos=0;
 $11=$5;
 $batchsamples=$11;
 $12=$6;
 if (((($12|0))|0)==((1)|0)) {
  $14=$3;
  $4=$14;
 } else if (((($12|0))|0)==((2)|0)) {
 } else {
  $1=0;
  $515=$1;
  STACKTOP=sp;return (($515)|0);
 }
 $18=$5;
 $19=($18>>>0)<((10)>>>0);
 if ($19) {
  $21=$2;
  $22=(($21)|0);
  $23=(($22)|0);
  $24=(($23+40)|0);
  $25=$24;
  $26=$3;
  $27=$26;
  $28=$5;
  $29=($28<<2);
  (_memcpy((($25)|0), (($27)|0), $29)|0);
  $30=$2;
  $31=(($30+19380)|0);
  $32=(($31)|0);
  $33=(($32+40)|0);
  $34=$33;
  $35=$4;
  $36=$35;
  $37=$5;
  $38=($37<<2);
  (_memcpy((($34)|0), (($36)|0), $38)|0);
 } else {
  $40=$2;
  $41=(($40)|0);
  $42=(($41)|0);
  $43=(($42+40)|0);
  $44=$43;
  $45=$3;
  $46=$45;
  (_memcpy((($44)|0), (($46)|0), 40)|0);
  $47=$2;
  $48=(($47+19380)|0);
  $49=(($48)|0);
  $50=(($49+40)|0);
  $51=$50;
  $52=$4;
  $53=$52;
  (_memcpy((($51)|0), (($53)|0), 40)|0);
 }
 while(1) {
  $56=$batchsamples;
  $57=($56|0)>0;
  if (!($57)) {
   break;
  }
  $59=$batchsamples;
  $60=$2;
  $61=(($60+38760)|0);
  $62=((HEAP32[(($61)>>2)])|0);
  $63=$2;
  $64=(($63+38764)|0);
  $65=((HEAP32[(($64)>>2)])|0);
  $66=((($62)-($65))|0);
  $67=($59|0)>($66|0);
  if ($67) {
   $69=$2;
   $70=(($69+38760)|0);
   $71=((HEAP32[(($70)>>2)])|0);
   $72=$2;
   $73=(($72+38764)|0);
   $74=((HEAP32[(($73)>>2)])|0);
   $75=((($71)-($74))|0);
   $79=$75;
  } else {
   $77=$batchsamples;
   $79=$77;
  }

  $cursamples=$79;
  $80=$cursamplepos;
  $81=($80|0)<10;
  if ($81) {
   $83=$2;
   $84=(($83+80)|0);
   $85=((HEAP32[(($84)>>2)])|0);
   $86=$cursamplepos;
   $87=(($85+($86<<2))|0);
   $curleft=$87;
   $88=$2;
   $89=(($88+19460)|0);
   $90=((HEAP32[(($89)>>2)])|0);
   $91=$cursamplepos;
   $92=(($90+($91<<2))|0);
   $curright=$92;
   $93=$cursamples;
   $94=$cursamplepos;
   $95=(((10)-($94))|0);
   $96=($93|0)>($95|0);
   if ($96) {
    $98=$cursamplepos;
    $99=(((10)-($98))|0);
    $cursamples=$99;
   }
  } else {
   $102=$3;
   $103=$cursamplepos;
   $104=(($102+($103<<2))|0);
   $curleft=$104;
   $105=$4;
   $106=$cursamplepos;
   $107=(($105+($106<<2))|0);
   $curright=$107;
  }
  $109=$curleft;
  $110=$2;
  $111=(($110+9728)|0);
  $112=((HEAP32[(($111)>>2)])|0);
  $113=$2;
  $114=(($113+38764)|0);
  $115=((HEAP32[(($114)>>2)])|0);
  $116=(($112+($115<<2))|0);
  $117=$cursamples;
  $118=$2;
  $119=(($118+38784)|0);
  $120=((HEAP32[(($119)>>2)])|0);
  $121=((17400+((($120)*(84))&-1))|0);
  $122=(($121)|0);
  _filterYule($109,$116,$117,$122);
  $123=$curright;
  $124=$2;
  $125=(($124+29108)|0);
  $126=((HEAP32[(($125)>>2)])|0);
  $127=$2;
  $128=(($127+38764)|0);
  $129=((HEAP32[(($128)>>2)])|0);
  $130=(($126+($129<<2))|0);
  $131=$cursamples;
  $132=$2;
  $133=(($132+38784)|0);
  $134=((HEAP32[(($133)>>2)])|0);
  $135=((17400+((($134)*(84))&-1))|0);
  $136=(($135)|0);
  _filterYule($123,$130,$131,$136);
  $137=$2;
  $138=(($137+9728)|0);
  $139=((HEAP32[(($138)>>2)])|0);
  $140=$2;
  $141=(($140+38764)|0);
  $142=((HEAP32[(($141)>>2)])|0);
  $143=(($139+($142<<2))|0);
  $144=$2;
  $145=(($144+19376)|0);
  $146=((HEAP32[(($145)>>2)])|0);
  $147=$2;
  $148=(($147+38764)|0);
  $149=((HEAP32[(($148)>>2)])|0);
  $150=(($146+($149<<2))|0);
  $151=$cursamples;
  $152=$2;
  $153=(($152+38784)|0);
  $154=((HEAP32[(($153)>>2)])|0);
  $155=((18160+((($154)*(20))&-1))|0);
  $156=(($155)|0);
  _filterButter($143,$150,$151,$156);
  $157=$2;
  $158=(($157+29108)|0);
  $159=((HEAP32[(($158)>>2)])|0);
  $160=$2;
  $161=(($160+38764)|0);
  $162=((HEAP32[(($161)>>2)])|0);
  $163=(($159+($162<<2))|0);
  $164=$2;
  $165=(($164+38756)|0);
  $166=((HEAP32[(($165)>>2)])|0);
  $167=$2;
  $168=(($167+38764)|0);
  $169=((HEAP32[(($168)>>2)])|0);
  $170=(($166+($169<<2))|0);
  $171=$cursamples;
  $172=$2;
  $173=(($172+38784)|0);
  $174=((HEAP32[(($173)>>2)])|0);
  $175=((18160+((($174)*(20))&-1))|0);
  $176=(($175)|0);
  _filterButter($163,$170,$171,$176);
  $177=$2;
  $178=(($177+19376)|0);
  $179=((HEAP32[(($178)>>2)])|0);
  $180=$2;
  $181=(($180+38764)|0);
  $182=((HEAP32[(($181)>>2)])|0);
  $183=(($179+($182<<2))|0);
  $curleft=$183;
  $184=$2;
  $185=(($184+38756)|0);
  $186=((HEAP32[(($185)>>2)])|0);
  $187=$2;
  $188=(($187+38764)|0);
  $189=((HEAP32[(($188)>>2)])|0);
  $190=(($186+($189<<2))|0);
  $curright=$190;
  $191=$cursamples;
  $192=(((($191|0))%(8))&-1);
  $i=$192;
  while(1) {
   $194=$i;
   $195=((($194)-(1))|0);
   $i=$195;
   $196=($194|0)!=0;
   if (!($196)) {
    break;
   }
   $198=$curleft;
   $199=(($198+4)|0);
   $curleft=$199;
   $200=(+(HEAPF32[(($198)>>2)]));
   $201=$200;
   $202=(+(_fsqr($201)));
   $203=$2;
   $204=(($203+38768)|0);
   $205=(+(HEAPF64[(($204)>>3)]));
   $206=($205)+($202);
   HEAPF64[(($204)>>3)]=$206;
   $207=$curright;
   $208=(($207+4)|0);
   $curright=$208;
   $209=(+(HEAPF32[(($207)>>2)]));
   $210=$209;
   $211=(+(_fsqr($210)));
   $212=$2;
   $213=(($212+38776)|0);
   $214=(+(HEAPF64[(($213)>>3)]));
   $215=($214)+($211);
   HEAPF64[(($213)>>3)]=$215;
  }
  $217=$cursamples;
  $218=(((($217|0))/(8))&-1);
  $i=$218;
  while(1) {
   $220=$i;
   $221=((($220)-(1))|0);
   $i=$221;
   $222=($220|0)!=0;
   if (!($222)) {
    break;
   }
   $224=$curleft;
   $225=(($224)|0);
   $226=(+(HEAPF32[(($225)>>2)]));
   $227=$226;
   $228=(+(_fsqr($227)));
   $229=$curleft;
   $230=(($229+4)|0);
   $231=(+(HEAPF32[(($230)>>2)]));
   $232=$231;
   $233=(+(_fsqr($232)));
   $234=($228)+($233);
   $235=$curleft;
   $236=(($235+8)|0);
   $237=(+(HEAPF32[(($236)>>2)]));
   $238=$237;
   $239=(+(_fsqr($238)));
   $240=($234)+($239);
   $241=$curleft;
   $242=(($241+12)|0);
   $243=(+(HEAPF32[(($242)>>2)]));
   $244=$243;
   $245=(+(_fsqr($244)));
   $246=($240)+($245);
   $247=$curleft;
   $248=(($247+16)|0);
   $249=(+(HEAPF32[(($248)>>2)]));
   $250=$249;
   $251=(+(_fsqr($250)));
   $252=($246)+($251);
   $253=$curleft;
   $254=(($253+20)|0);
   $255=(+(HEAPF32[(($254)>>2)]));
   $256=$255;
   $257=(+(_fsqr($256)));
   $258=($252)+($257);
   $259=$curleft;
   $260=(($259+24)|0);
   $261=(+(HEAPF32[(($260)>>2)]));
   $262=$261;
   $263=(+(_fsqr($262)));
   $264=($258)+($263);
   $265=$curleft;
   $266=(($265+28)|0);
   $267=(+(HEAPF32[(($266)>>2)]));
   $268=$267;
   $269=(+(_fsqr($268)));
   $270=($264)+($269);
   $271=$2;
   $272=(($271+38768)|0);
   $273=(+(HEAPF64[(($272)>>3)]));
   $274=($273)+($270);
   HEAPF64[(($272)>>3)]=$274;
   $275=$curleft;
   $276=(($275+32)|0);
   $curleft=$276;
   $277=$curright;
   $278=(($277)|0);
   $279=(+(HEAPF32[(($278)>>2)]));
   $280=$279;
   $281=(+(_fsqr($280)));
   $282=$curright;
   $283=(($282+4)|0);
   $284=(+(HEAPF32[(($283)>>2)]));
   $285=$284;
   $286=(+(_fsqr($285)));
   $287=($281)+($286);
   $288=$curright;
   $289=(($288+8)|0);
   $290=(+(HEAPF32[(($289)>>2)]));
   $291=$290;
   $292=(+(_fsqr($291)));
   $293=($287)+($292);
   $294=$curright;
   $295=(($294+12)|0);
   $296=(+(HEAPF32[(($295)>>2)]));
   $297=$296;
   $298=(+(_fsqr($297)));
   $299=($293)+($298);
   $300=$curright;
   $301=(($300+16)|0);
   $302=(+(HEAPF32[(($301)>>2)]));
   $303=$302;
   $304=(+(_fsqr($303)));
   $305=($299)+($304);
   $306=$curright;
   $307=(($306+20)|0);
   $308=(+(HEAPF32[(($307)>>2)]));
   $309=$308;
   $310=(+(_fsqr($309)));
   $311=($305)+($310);
   $312=$curright;
   $313=(($312+24)|0);
   $314=(+(HEAPF32[(($313)>>2)]));
   $315=$314;
   $316=(+(_fsqr($315)));
   $317=($311)+($316);
   $318=$curright;
   $319=(($318+28)|0);
   $320=(+(HEAPF32[(($319)>>2)]));
   $321=$320;
   $322=(+(_fsqr($321)));
   $323=($317)+($322);
   $324=$2;
   $325=(($324+38776)|0);
   $326=(+(HEAPF64[(($325)>>3)]));
   $327=($326)+($323);
   HEAPF64[(($325)>>3)]=$327;
   $328=$curright;
   $329=(($328+32)|0);
   $curright=$329;
  }
  $331=$cursamples;
  $332=$batchsamples;
  $333=((($332)-($331))|0);
  $batchsamples=$333;
  $334=$cursamples;
  $335=$cursamplepos;
  $336=((($335)+($334))|0);
  $cursamplepos=$336;
  $337=$cursamples;
  $338=$2;
  $339=(($338+38764)|0);
  $340=((HEAP32[(($339)>>2)])|0);
  $341=((($340)+($337))|0);
  HEAP32[(($339)>>2)]=$341;
  $342=$2;
  $343=(($342+38764)|0);
  $344=((HEAP32[(($343)>>2)])|0);
  $345=$2;
  $346=(($345+38760)|0);
  $347=((HEAP32[(($346)>>2)])|0);
  $348=($344|0)==($347|0);
  if ($348) {
   $350=$2;
   $351=(($350+38768)|0);
   $352=(+(HEAPF64[(($351)>>3)]));
   $353=$2;
   $354=(($353+38776)|0);
   $355=(+(HEAPF64[(($354)>>3)]));
   $356=($352)+($355);
   $357=$2;
   $358=(($357+38764)|0);
   $359=((HEAP32[(($358)>>2)])|0);
   $360=(+((($359|0))|0));
   $361=($356)/($360);
   $362=($361)*((0.5));
   $363=($362)+((1.0e-37));
   $364=(+(_log10((+($363)))));
   $365=((1000.0))*($364);
   $val=$365;
   $366=$val;
   $367=$366<=(0.0);
   if ($367) {
    $373=0;
   } else {
    $370=$val;
    $371=(~~($370));
    $373=$371;
   }

   $ival=$373;
   $374=$ival;
   $375=($374>>>0)>=((12000)>>>0);
   if ($375) {
    $ival=11999;
   }
   $378=$ival;
   $379=$2;
   $380=(($379+38792)|0);
   $381=(($380+($378<<2))|0);
   $382=((HEAP32[(($381)>>2)])|0);
   $383=((($382)+(1))|0);
   HEAP32[(($381)>>2)]=$383;
   $384=$2;
   $385=(($384+38776)|0);
   HEAPF64[(($385)>>3)]=0.0;
   $386=$2;
   $387=(($386+38768)|0);
   HEAPF64[(($387)>>3)]=0.0;
   $388=$2;
   $389=(($388+9732)|0);
   $390=$389;
   $391=$2;
   $392=(($391+9732)|0);
   $393=(($392)|0);
   $394=$2;
   $395=(($394+38764)|0);
   $396=((HEAP32[(($395)>>2)])|0);
   $397=(($393+($396<<2))|0);
   $398=$397;
   ((_memmove((($390)|0),(($398)|0),((40)|0)))|0);
   $399=$2;
   $400=(($399+29112)|0);
   $401=$400;
   $402=$2;
   $403=(($402+29112)|0);
   $404=(($403)|0);
   $405=$2;
   $406=(($405+38764)|0);
   $407=((HEAP32[(($406)>>2)])|0);
   $408=(($404+($407<<2))|0);
   $409=$408;
   ((_memmove((($401)|0),(($409)|0),((40)|0)))|0);
   $410=$2;
   $411=(($410+84)|0);
   $412=$411;
   $413=$2;
   $414=(($413+84)|0);
   $415=(($414)|0);
   $416=$2;
   $417=(($416+38764)|0);
   $418=((HEAP32[(($417)>>2)])|0);
   $419=(($415+($418<<2))|0);
   $420=$419;
   ((_memmove((($412)|0),(($420)|0),((40)|0)))|0);
   $421=$2;
   $422=(($421+19464)|0);
   $423=$422;
   $424=$2;
   $425=(($424+19464)|0);
   $426=(($425)|0);
   $427=$2;
   $428=(($427+38764)|0);
   $429=((HEAP32[(($428)>>2)])|0);
   $430=(($426+($429<<2))|0);
   $431=$430;
   ((_memmove((($423)|0),(($431)|0),((40)|0)))|0);
   $432=$2;
   $433=(($432+38764)|0);
   HEAP32[(($433)>>2)]=0;
  }
  $435=$2;
  $436=(($435+38764)|0);
  $437=((HEAP32[(($436)>>2)])|0);
  $438=$2;
  $439=(($438+38760)|0);
  $440=((HEAP32[(($439)>>2)])|0);
  $441=($437|0)>($440|0);
  if ($441) {
   label = 34;
   break;
  }
 }
 if ((label|0) == 34) {
  $1=0;
  $515=$1;
  STACKTOP=sp;return (($515)|0);
 }
 $445=$5;
 $446=($445>>>0)<((10)>>>0);
 if ($446) {
  $448=$2;
  $449=(($448)|0);
  $450=$449;
  $451=$2;
  $452=(($451)|0);
  $453=(($452)|0);
  $454=$5;
  $455=(($453+($454<<2))|0);
  $456=$455;
  $457=$5;
  $458=(((10)-($457))|0);
  $459=($458<<2);
  ((_memmove((($450)|0),(($456)|0),(($459)|0)))|0);
  $460=$2;
  $461=(($460+19380)|0);
  $462=$461;
  $463=$2;
  $464=(($463+19380)|0);
  $465=(($464)|0);
  $466=$5;
  $467=(($465+($466<<2))|0);
  $468=$467;
  $469=$5;
  $470=(((10)-($469))|0);
  $471=($470<<2);
  ((_memmove((($462)|0),(($468)|0),(($471)|0)))|0);
  $472=$2;
  $473=(($472)|0);
  $474=(($473)|0);
  $475=(($474+40)|0);
  $476=$5;
  $477=(((-$476))|0);
  $478=(($475+($477<<2))|0);
  $479=$478;
  $480=$3;
  $481=$480;
  $482=$5;
  $483=($482<<2);
  (_memcpy((($479)|0), (($481)|0), $483)|0);
  $484=$2;
  $485=(($484+19380)|0);
  $486=(($485)|0);
  $487=(($486+40)|0);
  $488=$5;
  $489=(((-$488))|0);
  $490=(($487+($489<<2))|0);
  $491=$490;
  $492=$4;
  $493=$492;
  $494=$5;
  $495=($494<<2);
  (_memcpy((($491)|0), (($493)|0), $495)|0);
 } else {
  $497=$2;
  $498=(($497)|0);
  $499=$498;
  $500=$3;
  $501=$5;
  $502=(($500+($501<<2))|0);
  $503=((($502)-(40))|0);
  $504=$503;
  (_memcpy((($499)|0), (($504)|0), 40)|0);
  $505=$2;
  $506=(($505+19380)|0);
  $507=$506;
  $508=$4;
  $509=$5;
  $510=(($508+($509<<2))|0);
  $511=((($510)-(40))|0);
  $512=$511;
  (_memcpy((($507)|0), (($512)|0), 40)|0);
 }
 $1=1;
 $515=$1;
 STACKTOP=sp;return (($515)|0);
}


function _GetTitleGain($rgData){
 $rgData=($rgData)|0;
 var $1=0,$retval=.0,$i=0,$2=0,$3=0,$4=0,$5=.0,$7=0,$8=0,$10=0,$11=0,$12=0,$13=0,$14=0,$15=0,$16=0,$17=0,$18=0,$19=0,$20=0;
 var $21=0,$22=0,$23=0,$24=0,$26=0,$27=0,$30=0,$31=0,$33=0,$34=0,$35=0,$36=0,$37=0,$38=0,$39=0,$40=0,$41=0,$42=0,$43=0,$44=0;
 var $45=0,$46=0,$47=0,$48=0,$49=0,$50=0,$51=0,$52=0,$53=0,$54=0,$55=0,$56=0,$58=0,$59=0,$61=0,$62=0,$63=0,$64=0,$65=0,$66=0;
 var $67=.0,label=0;
 var sp=0;sp=STACKTOP;



 $1=$rgData;
 $2=$1;
 $3=(($2+38792)|0);
 $4=(($3)|0);
 $5=(+(_analyzeResult($4,12000)));
 $retval=$5;
 $i=0;
 while(1) {
  $7=$i;
  $8=($7>>>0)<((12000)>>>0);
  if (!($8)) {
   break;
  }
  $10=$i;
  $11=$1;
  $12=(($11+38792)|0);
  $13=(($12+($10<<2))|0);
  $14=((HEAP32[(($13)>>2)])|0);
  $15=$i;
  $16=$1;
  $17=(($16+86792)|0);
  $18=(($17+($15<<2))|0);
  $19=((HEAP32[(($18)>>2)])|0);
  $20=((($19)+($14))|0);
  HEAP32[(($18)>>2)]=$20;
  $21=$i;
  $22=$1;
  $23=(($22+38792)|0);
  $24=(($23+($21<<2))|0);
  HEAP32[(($24)>>2)]=0;
  $26=$i;
  $27=((($26)+(1))|0);
  $i=$27;
 }
 $i=0;
 while(1) {
  $30=$i;
  $31=($30>>>0)<((10)>>>0);
  if (!($31)) {
   break;
  }
  $33=$i;
  $34=$1;
  $35=(($34+29112)|0);
  $36=(($35+($33<<2))|0);
  HEAPF32[(($36)>>2)]=0.0;
  $37=$i;
  $38=$1;
  $39=(($38+19464)|0);
  $40=(($39+($37<<2))|0);
  HEAPF32[(($40)>>2)]=0.0;
  $41=$i;
  $42=$1;
  $43=(($42+19380)|0);
  $44=(($43+($41<<2))|0);
  HEAPF32[(($44)>>2)]=0.0;
  $45=$i;
  $46=$1;
  $47=(($46+9732)|0);
  $48=(($47+($45<<2))|0);
  HEAPF32[(($48)>>2)]=0.0;
  $49=$i;
  $50=$1;
  $51=(($50+84)|0);
  $52=(($51+($49<<2))|0);
  HEAPF32[(($52)>>2)]=0.0;
  $53=$i;
  $54=$1;
  $55=(($54)|0);
  $56=(($55+($53<<2))|0);
  HEAPF32[(($56)>>2)]=0.0;
  $58=$i;
  $59=((($58)+(1))|0);
  $i=$59;
 }
 $61=$1;
 $62=(($61+38764)|0);
 HEAP32[(($62)>>2)]=0;
 $63=$1;
 $64=(($63+38776)|0);
 HEAPF64[(($64)>>3)]=0.0;
 $65=$1;
 $66=(($65+38768)|0);
 HEAPF64[(($66)>>3)]=0.0;
 $67=$retval;
 STACKTOP=sp;return (+($67));
}


function _ResetSampleFrequency($rgData,$samplefreq){
 $rgData=($rgData)|0;
 $samplefreq=($samplefreq)|0;
 var $1=0,$2=0,$3=0,$i=0,$5=0,$6=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$14=0,$15=0,$16=0,$17=0,$18=0,$19=0,$20=0,$21=0;
 var $22=0,$23=0,$24=0,$25=0,$26=0,$27=0,$28=0,$29=0,$30=0,$31=0,$33=0,$34=0,$36=0,$38=0,$39=0,$41=0,$42=0,$44=0,$45=0,$47=0;
 var $48=0,$50=0,$51=0,$53=0,$54=0,$56=0,$57=0,$59=0,$60=0,$62=0,$63=0,$66=0,$67=0,$68=0,$69=0,$70=0,$71=0,$72=0,$73=0,$74=0;
 var $75=0,$76=0,$77=0,$78=0,$79=0,$80=0,$81=0,$83=0,label=0;
 var sp=0;sp=STACKTOP;




 $2=$rgData;
 $3=$samplefreq;
 $i=0;
 while(1) {
  $5=$i;
  $6=($5|0)<10;
  if (!($6)) {
   break;
  }
  $8=$i;
  $9=$2;
  $10=(($9+29112)|0);
  $11=(($10+($8<<2))|0);
  HEAPF32[(($11)>>2)]=0.0;
  $12=$i;
  $13=$2;
  $14=(($13+19464)|0);
  $15=(($14+($12<<2))|0);
  HEAPF32[(($15)>>2)]=0.0;
  $16=$i;
  $17=$2;
  $18=(($17+19380)|0);
  $19=(($18+($16<<2))|0);
  HEAPF32[(($19)>>2)]=0.0;
  $20=$i;
  $21=$2;
  $22=(($21+9732)|0);
  $23=(($22+($20<<2))|0);
  HEAPF32[(($23)>>2)]=0.0;
  $24=$i;
  $25=$2;
  $26=(($25+84)|0);
  $27=(($26+($24<<2))|0);
  HEAPF32[(($27)>>2)]=0.0;
  $28=$i;
  $29=$2;
  $30=(($29)|0);
  $31=(($30+($28<<2))|0);
  HEAPF32[(($31)>>2)]=0.0;
  $33=$i;
  $34=((($33)+(1))|0);
  $i=$34;
 }
 $36=$3;
 if (((($36|0))|0)==((48000)|0)) {
  $38=$2;
  $39=(($38+38784)|0);
  HEAP32[(($39)>>2)]=0;
 } else if (((($36|0))|0)==((44100)|0)) {
  $41=$2;
  $42=(($41+38784)|0);
  HEAP32[(($42)>>2)]=1;
 } else if (((($36|0))|0)==((32000)|0)) {
  $44=$2;
  $45=(($44+38784)|0);
  HEAP32[(($45)>>2)]=2;
 } else if (((($36|0))|0)==((24000)|0)) {
  $47=$2;
  $48=(($47+38784)|0);
  HEAP32[(($48)>>2)]=3;
 } else if (((($36|0))|0)==((22050)|0)) {
  $50=$2;
  $51=(($50+38784)|0);
  HEAP32[(($51)>>2)]=4;
 } else if (((($36|0))|0)==((16000)|0)) {
  $53=$2;
  $54=(($53+38784)|0);
  HEAP32[(($54)>>2)]=5;
 } else if (((($36|0))|0)==((12000)|0)) {
  $56=$2;
  $57=(($56+38784)|0);
  HEAP32[(($57)>>2)]=6;
 } else if (((($36|0))|0)==((11025)|0)) {
  $59=$2;
  $60=(($59+38784)|0);
  HEAP32[(($60)>>2)]=7;
 } else if (((($36|0))|0)==((8000)|0)) {
  $62=$2;
  $63=(($62+38784)|0);
  HEAP32[(($63)>>2)]=8;
 } else {
  $1=0;
  $83=$1;
  STACKTOP=sp;return (($83)|0);
 }
 $66=$3;
 $67=$66;
 $68=((($67)+(20))|0);
 $69=((($68)-(1))|0);
 $70=(((($69|0))/(20))&-1);
 $71=$2;
 $72=(($71+38760)|0);
 HEAP32[(($72)>>2)]=$70;
 $73=$2;
 $74=(($73+38768)|0);
 HEAPF64[(($74)>>3)]=0.0;
 $75=$2;
 $76=(($75+38776)|0);
 HEAPF64[(($76)>>3)]=0.0;
 $77=$2;
 $78=(($77+38764)|0);
 HEAP32[(($78)>>2)]=0;
 $79=$2;
 $80=(($79+38792)|0);
 $81=$80;
 _memset((((($81)|0))|0), ((((0)|0))|0), ((((48000)|0))|0))|0;
 $1=1;
 $83=$1;
 STACKTOP=sp;return (($83)|0);
}


function _filterYule($input,$output,$nSamples,$kernel){
 $input=($input)|0;
 $output=($output)|0;
 $nSamples=($nSamples)|0;
 $kernel=($kernel)|0;
 var $1=0,$2=0,$3=0,$4=0,$6=0,$7=0,$8=0,$10=0,$11=0,$12=.0,$13=0,$14=0,$15=.0,$16=.0,$17=.0,$18=.0,$19=0,$20=0,$21=.0,$22=0;
 var $23=0,$24=.0,$25=.0,$26=.0,$27=.0,$28=0,$29=0,$30=.0,$31=0,$32=0,$33=.0,$34=.0,$35=.0,$36=.0,$37=0,$38=0,$39=.0,$40=0,$41=0,$42=.0;
 var $43=.0,$44=.0,$45=.0,$46=0,$47=0,$48=.0,$49=0,$50=0,$51=.0,$52=.0,$53=.0,$54=.0,$55=0,$56=0,$57=.0,$58=0,$59=0,$60=.0,$61=.0,$62=.0;
 var $63=.0,$64=0,$65=0,$66=.0,$67=0,$68=0,$69=.0,$70=.0,$71=.0,$72=.0,$73=0,$74=0,$75=.0,$76=0,$77=0,$78=.0,$79=.0,$80=.0,$81=.0,$82=0;
 var $83=0,$84=.0,$85=0,$86=0,$87=.0,$88=.0,$89=.0,$90=.0,$91=0,$92=0,$93=.0,$94=0,$95=0,$96=.0,$97=.0,$98=.0,$99=.0,$100=0,$101=0,$102=.0;
 var $103=0,$104=0,$105=.0,$106=.0,$107=.0,$108=.0,$109=0,$110=0,$111=.0,$112=0,$113=0,$114=.0,$115=.0,$116=.0,$117=.0,$118=0,$119=0,$120=.0,$121=0,$122=0;
 var $123=.0,$124=.0,$125=.0,$126=.0,$127=0,$128=0,$129=.0,$130=0,$131=0,$132=.0,$133=.0,$134=.0,$135=.0,$136=0,$137=0,$138=.0,$139=0,$140=0,$141=.0,$142=.0;
 var $143=.0,$144=.0,$145=0,$146=0,$147=.0,$148=0,$149=0,$150=.0,$151=.0,$152=.0,$153=.0,$154=0,$155=0,$156=.0,$157=0,$158=0,$159=.0,$160=.0,$161=.0,$162=.0;
 var $163=0,$164=0,$165=.0,$166=0,$167=0,$168=.0,$169=.0,$170=.0,$171=.0,$172=0,$173=0,$174=.0,$175=0,$176=0,$177=.0,$178=.0,$179=.0,$180=.0,$181=0,$182=0;
 var $183=.0,$184=0,$185=0,$186=.0,$187=.0,$188=.0,$189=.0,$190=0,$191=0,$192=.0,$193=0,$194=0,$195=.0,$196=.0,$197=.0,$198=.0,$199=.0,$200=0,$201=0,$202=0;
 var $203=0,$204=0,label=0;
 var sp=0;sp=STACKTOP;




 $1=$input;
 $2=$output;
 $3=$nSamples;
 $4=$kernel;
 while(1) {
  $6=$3;
  $7=((($6)-(1))|0);
  $3=$7;
  $8=($6|0)!=0;
  if (!($8)) {
   break;
  }
  $10=$1;
  $11=(($10)|0);
  $12=(+(HEAPF32[(($11)>>2)]));
  $13=$4;
  $14=(($13)|0);
  $15=(+(HEAPF32[(($14)>>2)]));
  $16=($12)*($15);
  $17=$16;
  $18=((1.0e-10))+($17);
  $19=$2;
  $20=((($19)-(4))|0);
  $21=(+(HEAPF32[(($20)>>2)]));
  $22=$4;
  $23=(($22+4)|0);
  $24=(+(HEAPF32[(($23)>>2)]));
  $25=($21)*($24);
  $26=$25;
  $27=($18)-($26);
  $28=$1;
  $29=((($28)-(4))|0);
  $30=(+(HEAPF32[(($29)>>2)]));
  $31=$4;
  $32=(($31+8)|0);
  $33=(+(HEAPF32[(($32)>>2)]));
  $34=($30)*($33);
  $35=$34;
  $36=($27)+($35);
  $37=$2;
  $38=((($37)-(8))|0);
  $39=(+(HEAPF32[(($38)>>2)]));
  $40=$4;
  $41=(($40+12)|0);
  $42=(+(HEAPF32[(($41)>>2)]));
  $43=($39)*($42);
  $44=$43;
  $45=($36)-($44);
  $46=$1;
  $47=((($46)-(8))|0);
  $48=(+(HEAPF32[(($47)>>2)]));
  $49=$4;
  $50=(($49+16)|0);
  $51=(+(HEAPF32[(($50)>>2)]));
  $52=($48)*($51);
  $53=$52;
  $54=($45)+($53);
  $55=$2;
  $56=((($55)-(12))|0);
  $57=(+(HEAPF32[(($56)>>2)]));
  $58=$4;
  $59=(($58+20)|0);
  $60=(+(HEAPF32[(($59)>>2)]));
  $61=($57)*($60);
  $62=$61;
  $63=($54)-($62);
  $64=$1;
  $65=((($64)-(12))|0);
  $66=(+(HEAPF32[(($65)>>2)]));
  $67=$4;
  $68=(($67+24)|0);
  $69=(+(HEAPF32[(($68)>>2)]));
  $70=($66)*($69);
  $71=$70;
  $72=($63)+($71);
  $73=$2;
  $74=((($73)-(16))|0);
  $75=(+(HEAPF32[(($74)>>2)]));
  $76=$4;
  $77=(($76+28)|0);
  $78=(+(HEAPF32[(($77)>>2)]));
  $79=($75)*($78);
  $80=$79;
  $81=($72)-($80);
  $82=$1;
  $83=((($82)-(16))|0);
  $84=(+(HEAPF32[(($83)>>2)]));
  $85=$4;
  $86=(($85+32)|0);
  $87=(+(HEAPF32[(($86)>>2)]));
  $88=($84)*($87);
  $89=$88;
  $90=($81)+($89);
  $91=$2;
  $92=((($91)-(20))|0);
  $93=(+(HEAPF32[(($92)>>2)]));
  $94=$4;
  $95=(($94+36)|0);
  $96=(+(HEAPF32[(($95)>>2)]));
  $97=($93)*($96);
  $98=$97;
  $99=($90)-($98);
  $100=$1;
  $101=((($100)-(20))|0);
  $102=(+(HEAPF32[(($101)>>2)]));
  $103=$4;
  $104=(($103+40)|0);
  $105=(+(HEAPF32[(($104)>>2)]));
  $106=($102)*($105);
  $107=$106;
  $108=($99)+($107);
  $109=$2;
  $110=((($109)-(24))|0);
  $111=(+(HEAPF32[(($110)>>2)]));
  $112=$4;
  $113=(($112+44)|0);
  $114=(+(HEAPF32[(($113)>>2)]));
  $115=($111)*($114);
  $116=$115;
  $117=($108)-($116);
  $118=$1;
  $119=((($118)-(24))|0);
  $120=(+(HEAPF32[(($119)>>2)]));
  $121=$4;
  $122=(($121+48)|0);
  $123=(+(HEAPF32[(($122)>>2)]));
  $124=($120)*($123);
  $125=$124;
  $126=($117)+($125);
  $127=$2;
  $128=((($127)-(28))|0);
  $129=(+(HEAPF32[(($128)>>2)]));
  $130=$4;
  $131=(($130+52)|0);
  $132=(+(HEAPF32[(($131)>>2)]));
  $133=($129)*($132);
  $134=$133;
  $135=($126)-($134);
  $136=$1;
  $137=((($136)-(28))|0);
  $138=(+(HEAPF32[(($137)>>2)]));
  $139=$4;
  $140=(($139+56)|0);
  $141=(+(HEAPF32[(($140)>>2)]));
  $142=($138)*($141);
  $143=$142;
  $144=($135)+($143);
  $145=$2;
  $146=((($145)-(32))|0);
  $147=(+(HEAPF32[(($146)>>2)]));
  $148=$4;
  $149=(($148+60)|0);
  $150=(+(HEAPF32[(($149)>>2)]));
  $151=($147)*($150);
  $152=$151;
  $153=($144)-($152);
  $154=$1;
  $155=((($154)-(32))|0);
  $156=(+(HEAPF32[(($155)>>2)]));
  $157=$4;
  $158=(($157+64)|0);
  $159=(+(HEAPF32[(($158)>>2)]));
  $160=($156)*($159);
  $161=$160;
  $162=($153)+($161);
  $163=$2;
  $164=((($163)-(36))|0);
  $165=(+(HEAPF32[(($164)>>2)]));
  $166=$4;
  $167=(($166+68)|0);
  $168=(+(HEAPF32[(($167)>>2)]));
  $169=($165)*($168);
  $170=$169;
  $171=($162)-($170);
  $172=$1;
  $173=((($172)-(36))|0);
  $174=(+(HEAPF32[(($173)>>2)]));
  $175=$4;
  $176=(($175+72)|0);
  $177=(+(HEAPF32[(($176)>>2)]));
  $178=($174)*($177);
  $179=$178;
  $180=($171)+($179);
  $181=$2;
  $182=((($181)-(40))|0);
  $183=(+(HEAPF32[(($182)>>2)]));
  $184=$4;
  $185=(($184+76)|0);
  $186=(+(HEAPF32[(($185)>>2)]));
  $187=($183)*($186);
  $188=$187;
  $189=($180)-($188);
  $190=$1;
  $191=((($190)-(40))|0);
  $192=(+(HEAPF32[(($191)>>2)]));
  $193=$4;
  $194=(($193+80)|0);
  $195=(+(HEAPF32[(($194)>>2)]));
  $196=($192)*($195);
  $197=$196;
  $198=($189)+($197);
  $199=$198;
  $200=$2;
  HEAPF32[(($200)>>2)]=$199;
  $201=$2;
  $202=(($201+4)|0);
  $2=$202;
  $203=$1;
  $204=(($203+4)|0);
  $1=$204;
 }
 STACKTOP=sp;return;
}


function _filterButter($input,$output,$nSamples,$kernel){
 $input=($input)|0;
 $output=($output)|0;
 $nSamples=($nSamples)|0;
 $kernel=($kernel)|0;
 var $1=0,$2=0,$3=0,$4=0,$6=0,$7=0,$8=0,$10=0,$11=0,$12=.0,$13=0,$14=0,$15=.0,$16=.0,$17=0,$18=0,$19=.0,$20=0,$21=0,$22=.0;
 var $23=.0,$24=.0,$25=0,$26=0,$27=.0,$28=0,$29=0,$30=.0,$31=.0,$32=.0,$33=0,$34=0,$35=.0,$36=0,$37=0,$38=.0,$39=.0,$40=.0,$41=0,$42=0;
 var $43=.0,$44=0,$45=0,$46=.0,$47=.0,$48=.0,$49=0,$50=0,$51=0,$52=0,$53=0,label=0;
 var sp=0;sp=STACKTOP;




 $1=$input;
 $2=$output;
 $3=$nSamples;
 $4=$kernel;
 while(1) {
  $6=$3;
  $7=((($6)-(1))|0);
  $3=$7;
  $8=($6|0)!=0;
  if (!($8)) {
   break;
  }
  $10=$1;
  $11=(($10)|0);
  $12=(+(HEAPF32[(($11)>>2)]));
  $13=$4;
  $14=(($13)|0);
  $15=(+(HEAPF32[(($14)>>2)]));
  $16=($12)*($15);
  $17=$2;
  $18=((($17)-(4))|0);
  $19=(+(HEAPF32[(($18)>>2)]));
  $20=$4;
  $21=(($20+4)|0);
  $22=(+(HEAPF32[(($21)>>2)]));
  $23=($19)*($22);
  $24=($16)-($23);
  $25=$1;
  $26=((($25)-(4))|0);
  $27=(+(HEAPF32[(($26)>>2)]));
  $28=$4;
  $29=(($28+8)|0);
  $30=(+(HEAPF32[(($29)>>2)]));
  $31=($27)*($30);
  $32=($24)+($31);
  $33=$2;
  $34=((($33)-(8))|0);
  $35=(+(HEAPF32[(($34)>>2)]));
  $36=$4;
  $37=(($36+12)|0);
  $38=(+(HEAPF32[(($37)>>2)]));
  $39=($35)*($38);
  $40=($32)-($39);
  $41=$1;
  $42=((($41)-(8))|0);
  $43=(+(HEAPF32[(($42)>>2)]));
  $44=$4;
  $45=(($44+16)|0);
  $46=(+(HEAPF32[(($45)>>2)]));
  $47=($43)*($46);
  $48=($40)+($47);
  $49=$2;
  HEAPF32[(($49)>>2)]=$48;
  $50=$2;
  $51=(($50+4)|0);
  $2=$51;
  $52=$1;
  $53=(($52+4)|0);
  $1=$53;
 }
 STACKTOP=sp;return;
}


function _fsqr($d){
 $d=+($d);
 var $1=.0,$2=.0,$3=.0,$4=.0,label=0;
 var sp=0;sp=STACKTOP;

 $1=$d;
 $2=$1;
 $3=$1;
 $4=($2)*($3);
 STACKTOP=sp;return (+($4));
}


function _analyzeResult($Array,$len){
 $Array=($Array)|0;
 $len=($len)|0;
 var $1=.0,$2=0,$3=0,$elems=0,$upper=0,$sum=0,$i=0,$5=0,$6=0,$7=0,$9=0,$10=0,$11=0,$12=0,$13=0,$14=0,$16=0,$17=0,$19=0,$20=0;
 var $23=0,$24=.0,$25=.0,$26=.0,$27=0,$28=0,$30=0,$31=0,$32=0,$34=0,$35=0,$36=0,$37=0,$38=0,$39=0,$40=0,$41=0,$42=0,$46=0,$47=.0;
 var $48=.0,$49=.0,$51=.0,label=0;
 var sp=0;sp=STACKTOP;







 $2=$Array;
 $3=$len;
 $elems=0;
 $i=0;
 while(1) {
  $5=$i;
  $6=$3;
  $7=($5>>>0)<($6>>>0);
  if (!($7)) {
   break;
  }
  $9=$i;
  $10=$2;
  $11=(($10+($9<<2))|0);
  $12=((HEAP32[(($11)>>2)])|0);
  $13=$elems;
  $14=((($13)+($12))|0);
  $elems=$14;
  $16=$i;
  $17=((($16)+(1))|0);
  $i=$17;
 }
 $19=$elems;
 $20=($19|0)==0;
 if ($20) {
  $1=-24601.0;
  $51=$1;
  STACKTOP=sp;return (+($51));
 }
 $23=$elems;
 $24=(+((($23>>>0))>>>0));
 $25=($24)*((0.050000000000000044));
 $26=(+(Math_ceil($25)));
 $27=(~~($26));
 $upper=$27;
 $sum=0;
 $28=$3;
 $i=$28;
 while(1) {
  $30=$i;
  $31=((($30)-(1))|0);
  $i=$31;
  $32=($30>>>0)>((0)>>>0);
  if (!($32)) {
   break;
  }
  $34=$i;
  $35=$2;
  $36=(($35+($34<<2))|0);
  $37=((HEAP32[(($36)>>2)])|0);
  $38=$sum;
  $39=((($38)+($37))|0);
  $sum=$39;
  $40=$sum;
  $41=$upper;
  $42=($40>>>0)>=($41>>>0);
  if ($42) {
   label = 10;
   break;
  }
 }
 if ((label|0) == 10) {
 }
 $46=$i;
 $47=(+((($46>>>0))>>>0));
 $48=($47)/((100.0));
 $49=((64.81999969482422))-($48);
 $1=$49;
 $51=$1;
 STACKTOP=sp;return (+($51));
}


function _fft_short($gfc,$x_real,$chn,$buffer){
 $gfc=($gfc)|0;
 $x_real=($x_real)|0;
 $chn=($chn)|0;
 $buffer=($buffer)|0;
 var $1=0,$2=0,$3=0,$4=0,$i=0,$j=0,$b=0,$x=0,$k=0,$f0=.0,$f1=.0,$f2=.0,$f3=.0,$w=.0,$6=0,$7=0,$9=0,$10=0,$11=0,$12=0;
 var $13=0,$14=0,$15=0,$16=0,$18=0,$19=0,$20=0,$21=0,$22=0,$23=0,$24=0,$25=.0,$26=0,$27=0,$28=0,$29=0,$30=0,$31=0,$32=0,$33=0;
 var $34=0,$35=.0,$36=.0,$37=0,$38=0,$39=0,$40=.0,$41=0,$42=0,$43=0,$44=0,$45=0,$46=0,$47=0,$48=0,$49=0,$50=0,$51=.0,$52=.0,$53=.0;
 var $54=.0,$55=.0,$56=.0,$57=.0,$58=.0,$59=0,$60=0,$61=0,$62=.0,$63=0,$64=0,$65=0,$66=0,$67=0,$68=0,$69=0,$70=0,$71=0,$72=0,$73=.0;
 var $74=.0,$75=0,$76=0,$77=0,$78=.0,$79=0,$80=0,$81=0,$82=0,$83=0,$84=0,$85=0,$86=0,$87=0,$88=0,$89=.0,$90=.0,$91=.0,$92=.0,$93=.0;
 var $94=.0,$95=.0,$96=.0,$97=0,$98=0,$99=.0,$100=.0,$101=.0,$102=0,$103=0,$104=.0,$105=.0,$106=.0,$107=0,$108=0,$109=.0,$110=.0,$111=.0,$112=0,$113=0;
 var $114=.0,$115=.0,$116=.0,$117=0,$118=0,$119=0,$120=0,$121=0,$122=.0,$123=0,$124=0,$125=0,$126=0,$127=0,$128=0,$129=0,$130=0,$131=0,$132=0,$133=.0;
 var $134=.0,$135=0,$136=0,$137=0,$138=.0,$139=0,$140=0,$141=0,$142=0,$143=0,$144=0,$145=0,$146=0,$147=0,$148=0,$149=.0,$150=.0,$151=.0,$152=.0,$153=.0;
 var $154=.0,$155=.0,$156=.0,$157=0,$158=0,$159=0,$160=.0,$161=0,$162=0,$163=0,$164=0,$165=0,$166=0,$167=0,$168=0,$169=0,$170=0,$171=.0,$172=.0,$173=0;
 var $174=0,$175=0,$176=.0,$177=0,$178=0,$179=0,$180=0,$181=0,$182=0,$183=0,$184=0,$185=0,$186=0,$187=.0,$188=.0,$189=.0,$190=.0,$191=.0,$192=.0,$193=.0;
 var $194=.0,$195=.0,$196=.0,$197=.0,$198=0,$199=0,$200=.0,$201=.0,$202=.0,$203=0,$204=0,$205=.0,$206=.0,$207=.0,$208=0,$209=0,$210=.0,$211=.0,$212=.0,$213=0;
 var $214=0,$216=0,$217=0,$218=0,$220=0,$221=0,$222=0,$223=0,$225=0,$226=0,label=0;
 var sp=0;sp=STACKTOP;














 $1=$gfc;
 $2=$x_real;
 $3=$chn;
 $4=$buffer;
 $b=0;
 while(1) {
  $6=$b;
  $7=($6|0)<3;
  if (!($7)) {
   break;
  }
  $9=$b;
  $10=$2;
  $11=(($10+($9<<10))|0);
  $12=(($11+512)|0);
  $x=$12;
  $13=$b;
  $14=((($13)+(1))|0);
  $15=((($14)*(192))&-1);
  $16=(($15)&65535);
  $k=$16;
  $j=31;
  while(1) {
   $18=$j;
   $19=$18<<2;
   $20=((9376+$19)|0);
   $21=((HEAP8[($20)])|0);
   $22=($21&255);
   $i=$22;
   $23=$i;
   $24=((18344+($23<<2))|0);
   $25=(+(HEAPF32[(($24)>>2)]));
   $26=$i;
   $27=$k;
   $28=(($27<<16)>>16);
   $29=((($26)+($28))|0);
   $30=$3;
   $31=$4;
   $32=(($31+($30<<2))|0);
   $33=((HEAP32[(($32)>>2)])|0);
   $34=(($33+($29<<2))|0);
   $35=(+(HEAPF32[(($34)>>2)]));
   $36=($25)*($35);
   $f0=$36;
   $37=$i;
   $38=(((127)-($37))|0);
   $39=((18344+($38<<2))|0);
   $40=(+(HEAPF32[(($39)>>2)]));
   $41=$i;
   $42=$k;
   $43=(($42<<16)>>16);
   $44=((($41)+($43))|0);
   $45=((($44)+(128))|0);
   $46=$3;
   $47=$4;
   $48=(($47+($46<<2))|0);
   $49=((HEAP32[(($48)>>2)])|0);
   $50=(($49+($45<<2))|0);
   $51=(+(HEAPF32[(($50)>>2)]));
   $52=($40)*($51);
   $w=$52;
   $53=$f0;
   $54=$w;
   $55=($53)-($54);
   $f1=$55;
   $56=$f0;
   $57=$w;
   $58=($56)+($57);
   $f0=$58;
   $59=$i;
   $60=((($59)+(64))|0);
   $61=((18344+($60<<2))|0);
   $62=(+(HEAPF32[(($61)>>2)]));
   $63=$i;
   $64=$k;
   $65=(($64<<16)>>16);
   $66=((($63)+($65))|0);
   $67=((($66)+(64))|0);
   $68=$3;
   $69=$4;
   $70=(($69+($68<<2))|0);
   $71=((HEAP32[(($70)>>2)])|0);
   $72=(($71+($67<<2))|0);
   $73=(+(HEAPF32[(($72)>>2)]));
   $74=($62)*($73);
   $f2=$74;
   $75=$i;
   $76=(((63)-($75))|0);
   $77=((18344+($76<<2))|0);
   $78=(+(HEAPF32[(($77)>>2)]));
   $79=$i;
   $80=$k;
   $81=(($80<<16)>>16);
   $82=((($79)+($81))|0);
   $83=((($82)+(192))|0);
   $84=$3;
   $85=$4;
   $86=(($85+($84<<2))|0);
   $87=((HEAP32[(($86)>>2)])|0);
   $88=(($87+($83<<2))|0);
   $89=(+(HEAPF32[(($88)>>2)]));
   $90=($78)*($89);
   $w=$90;
   $91=$f2;
   $92=$w;
   $93=($91)-($92);
   $f3=$93;
   $94=$f2;
   $95=$w;
   $96=($94)+($95);
   $f2=$96;
   $97=$x;
   $98=((($97)-(16))|0);
   $x=$98;
   $99=$f0;
   $100=$f2;
   $101=($99)+($100);
   $102=$x;
   $103=(($102)|0);
   HEAPF32[(($103)>>2)]=$101;
   $104=$f0;
   $105=$f2;
   $106=($104)-($105);
   $107=$x;
   $108=(($107+8)|0);
   HEAPF32[(($108)>>2)]=$106;
   $109=$f1;
   $110=$f3;
   $111=($109)+($110);
   $112=$x;
   $113=(($112+4)|0);
   HEAPF32[(($113)>>2)]=$111;
   $114=$f1;
   $115=$f3;
   $116=($114)-($115);
   $117=$x;
   $118=(($117+12)|0);
   HEAPF32[(($118)>>2)]=$116;
   $119=$i;
   $120=((($119)+(1))|0);
   $121=((18344+($120<<2))|0);
   $122=(+(HEAPF32[(($121)>>2)]));
   $123=$i;
   $124=$k;
   $125=(($124<<16)>>16);
   $126=((($123)+($125))|0);
   $127=((($126)+(1))|0);
   $128=$3;
   $129=$4;
   $130=(($129+($128<<2))|0);
   $131=((HEAP32[(($130)>>2)])|0);
   $132=(($131+($127<<2))|0);
   $133=(+(HEAPF32[(($132)>>2)]));
   $134=($122)*($133);
   $f0=$134;
   $135=$i;
   $136=(((126)-($135))|0);
   $137=((18344+($136<<2))|0);
   $138=(+(HEAPF32[(($137)>>2)]));
   $139=$i;
   $140=$k;
   $141=(($140<<16)>>16);
   $142=((($139)+($141))|0);
   $143=((($142)+(129))|0);
   $144=$3;
   $145=$4;
   $146=(($145+($144<<2))|0);
   $147=((HEAP32[(($146)>>2)])|0);
   $148=(($147+($143<<2))|0);
   $149=(+(HEAPF32[(($148)>>2)]));
   $150=($138)*($149);
   $w=$150;
   $151=$f0;
   $152=$w;
   $153=($151)-($152);
   $f1=$153;
   $154=$f0;
   $155=$w;
   $156=($154)+($155);
   $f0=$156;
   $157=$i;
   $158=((($157)+(65))|0);
   $159=((18344+($158<<2))|0);
   $160=(+(HEAPF32[(($159)>>2)]));
   $161=$i;
   $162=$k;
   $163=(($162<<16)>>16);
   $164=((($161)+($163))|0);
   $165=((($164)+(65))|0);
   $166=$3;
   $167=$4;
   $168=(($167+($166<<2))|0);
   $169=((HEAP32[(($168)>>2)])|0);
   $170=(($169+($165<<2))|0);
   $171=(+(HEAPF32[(($170)>>2)]));
   $172=($160)*($171);
   $f2=$172;
   $173=$i;
   $174=(((62)-($173))|0);
   $175=((18344+($174<<2))|0);
   $176=(+(HEAPF32[(($175)>>2)]));
   $177=$i;
   $178=$k;
   $179=(($178<<16)>>16);
   $180=((($177)+($179))|0);
   $181=((($180)+(193))|0);
   $182=$3;
   $183=$4;
   $184=(($183+($182<<2))|0);
   $185=((HEAP32[(($184)>>2)])|0);
   $186=(($185+($181<<2))|0);
   $187=(+(HEAPF32[(($186)>>2)]));
   $188=($176)*($187);
   $w=$188;
   $189=$f2;
   $190=$w;
   $191=($189)-($190);
   $f3=$191;
   $192=$f2;
   $193=$w;
   $194=($192)+($193);
   $f2=$194;
   $195=$f0;
   $196=$f2;
   $197=($195)+($196);
   $198=$x;
   $199=(($198+512)|0);
   HEAPF32[(($199)>>2)]=$197;
   $200=$f0;
   $201=$f2;
   $202=($200)-($201);
   $203=$x;
   $204=(($203+520)|0);
   HEAPF32[(($204)>>2)]=$202;
   $205=$f1;
   $206=$f3;
   $207=($205)+($206);
   $208=$x;
   $209=(($208+516)|0);
   HEAPF32[(($209)>>2)]=$207;
   $210=$f1;
   $211=$f3;
   $212=($210)-($211);
   $213=$x;
   $214=(($213+524)|0);
   HEAPF32[(($214)>>2)]=$212;
   $216=$j;
   $217=((($216)-(1))|0);
   $j=$217;
   $218=($217|0)>=0;
   if (!($218)) {
    break;
   }
  }
  $220=$1;
  $221=(($220+85820)|0);
  $222=((HEAP32[(($221)>>2)])|0);
  $223=$x;
  FUNCTION_TABLE_vii[($222)&7]($223,128);
  $225=$b;
  $226=((($225)+(1))|0);
  $b=$226;
 }
 STACKTOP=sp;return;
}


function _fft_long($gfc,$x,$chn,$buffer){
 $gfc=($gfc)|0;
 $x=($x)|0;
 $chn=($chn)|0;
 $buffer=($buffer)|0;
 var $1=0,$2=0,$3=0,$4=0,$i=0,$jj=0,$f0=.0,$f1=.0,$f2=.0,$f3=.0,$w=.0,$5=0,$6=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$14=.0;
 var $15=0,$16=0,$17=0,$18=0,$19=0,$20=0,$21=.0,$22=.0,$23=0,$24=0,$25=0,$26=.0,$27=0,$28=0,$29=0,$30=0,$31=0,$32=0,$33=0,$34=.0;
 var $35=.0,$36=.0,$37=.0,$38=.0,$39=.0,$40=.0,$41=.0,$42=0,$43=0,$44=0,$45=.0,$46=0,$47=0,$48=0,$49=0,$50=0,$51=0,$52=0,$53=.0,$54=.0;
 var $55=0,$56=0,$57=0,$58=.0,$59=0,$60=0,$61=0,$62=0,$63=0,$64=0,$65=0,$66=.0,$67=.0,$68=.0,$69=.0,$70=.0,$71=.0,$72=.0,$73=.0,$74=0;
 var $75=0,$76=.0,$77=.0,$78=.0,$79=0,$80=0,$81=.0,$82=.0,$83=.0,$84=0,$85=0,$86=.0,$87=.0,$88=.0,$89=0,$90=0,$91=.0,$92=.0,$93=.0,$94=0;
 var $95=0,$96=0,$97=0,$98=0,$99=.0,$100=0,$101=0,$102=0,$103=0,$104=0,$105=0,$106=0,$107=.0,$108=.0,$109=0,$110=0,$111=0,$112=.0,$113=0,$114=0;
 var $115=0,$116=0,$117=0,$118=0,$119=0,$120=.0,$121=.0,$122=.0,$123=.0,$124=.0,$125=.0,$126=.0,$127=.0,$128=0,$129=0,$130=0,$131=.0,$132=0,$133=0,$134=0;
 var $135=0,$136=0,$137=0,$138=0,$139=.0,$140=.0,$141=0,$142=0,$143=0,$144=.0,$145=0,$146=0,$147=0,$148=0,$149=0,$150=0,$151=0,$152=.0,$153=.0,$154=.0;
 var $155=.0,$156=.0,$157=.0,$158=.0,$159=.0,$160=.0,$161=.0,$162=.0,$163=0,$164=0,$165=.0,$166=.0,$167=.0,$168=0,$169=0,$170=.0,$171=.0,$172=.0,$173=0,$174=0;
 var $175=.0,$176=.0,$177=.0,$178=0,$179=0,$181=0,$182=0,$183=0,$185=0,$186=0,$187=0,$188=0,label=0;
 var sp=0;sp=STACKTOP;











 $1=$gfc;
 $2=$x;
 $3=$chn;
 $4=$buffer;
 $jj=127;
 $5=$2;
 $6=(($5+2048)|0);
 $2=$6;
 while(1) {
  $8=$jj;
  $9=((9376+$8)|0);
  $10=((HEAP8[($9)])|0);
  $11=($10&255);
  $i=$11;
  $12=$i;
  $13=((18856+($12<<2))|0);
  $14=(+(HEAPF32[(($13)>>2)]));
  $15=$i;
  $16=$3;
  $17=$4;
  $18=(($17+($16<<2))|0);
  $19=((HEAP32[(($18)>>2)])|0);
  $20=(($19+($15<<2))|0);
  $21=(+(HEAPF32[(($20)>>2)]));
  $22=($14)*($21);
  $f0=$22;
  $23=$i;
  $24=((($23)+(512))|0);
  $25=((18856+($24<<2))|0);
  $26=(+(HEAPF32[(($25)>>2)]));
  $27=$i;
  $28=((($27)+(512))|0);
  $29=$3;
  $30=$4;
  $31=(($30+($29<<2))|0);
  $32=((HEAP32[(($31)>>2)])|0);
  $33=(($32+($28<<2))|0);
  $34=(+(HEAPF32[(($33)>>2)]));
  $35=($26)*($34);
  $w=$35;
  $36=$f0;
  $37=$w;
  $38=($36)-($37);
  $f1=$38;
  $39=$f0;
  $40=$w;
  $41=($39)+($40);
  $f0=$41;
  $42=$i;
  $43=((($42)+(256))|0);
  $44=((18856+($43<<2))|0);
  $45=(+(HEAPF32[(($44)>>2)]));
  $46=$i;
  $47=((($46)+(256))|0);
  $48=$3;
  $49=$4;
  $50=(($49+($48<<2))|0);
  $51=((HEAP32[(($50)>>2)])|0);
  $52=(($51+($47<<2))|0);
  $53=(+(HEAPF32[(($52)>>2)]));
  $54=($45)*($53);
  $f2=$54;
  $55=$i;
  $56=((($55)+(768))|0);
  $57=((18856+($56<<2))|0);
  $58=(+(HEAPF32[(($57)>>2)]));
  $59=$i;
  $60=((($59)+(768))|0);
  $61=$3;
  $62=$4;
  $63=(($62+($61<<2))|0);
  $64=((HEAP32[(($63)>>2)])|0);
  $65=(($64+($60<<2))|0);
  $66=(+(HEAPF32[(($65)>>2)]));
  $67=($58)*($66);
  $w=$67;
  $68=$f2;
  $69=$w;
  $70=($68)-($69);
  $f3=$70;
  $71=$f2;
  $72=$w;
  $73=($71)+($72);
  $f2=$73;
  $74=$2;
  $75=((($74)-(16))|0);
  $2=$75;
  $76=$f0;
  $77=$f2;
  $78=($76)+($77);
  $79=$2;
  $80=(($79)|0);
  HEAPF32[(($80)>>2)]=$78;
  $81=$f0;
  $82=$f2;
  $83=($81)-($82);
  $84=$2;
  $85=(($84+8)|0);
  HEAPF32[(($85)>>2)]=$83;
  $86=$f1;
  $87=$f3;
  $88=($86)+($87);
  $89=$2;
  $90=(($89+4)|0);
  HEAPF32[(($90)>>2)]=$88;
  $91=$f1;
  $92=$f3;
  $93=($91)-($92);
  $94=$2;
  $95=(($94+12)|0);
  HEAPF32[(($95)>>2)]=$93;
  $96=$i;
  $97=((($96)+(1))|0);
  $98=((18856+($97<<2))|0);
  $99=(+(HEAPF32[(($98)>>2)]));
  $100=$i;
  $101=((($100)+(1))|0);
  $102=$3;
  $103=$4;
  $104=(($103+($102<<2))|0);
  $105=((HEAP32[(($104)>>2)])|0);
  $106=(($105+($101<<2))|0);
  $107=(+(HEAPF32[(($106)>>2)]));
  $108=($99)*($107);
  $f0=$108;
  $109=$i;
  $110=((($109)+(513))|0);
  $111=((18856+($110<<2))|0);
  $112=(+(HEAPF32[(($111)>>2)]));
  $113=$i;
  $114=((($113)+(513))|0);
  $115=$3;
  $116=$4;
  $117=(($116+($115<<2))|0);
  $118=((HEAP32[(($117)>>2)])|0);
  $119=(($118+($114<<2))|0);
  $120=(+(HEAPF32[(($119)>>2)]));
  $121=($112)*($120);
  $w=$121;
  $122=$f0;
  $123=$w;
  $124=($122)-($123);
  $f1=$124;
  $125=$f0;
  $126=$w;
  $127=($125)+($126);
  $f0=$127;
  $128=$i;
  $129=((($128)+(257))|0);
  $130=((18856+($129<<2))|0);
  $131=(+(HEAPF32[(($130)>>2)]));
  $132=$i;
  $133=((($132)+(257))|0);
  $134=$3;
  $135=$4;
  $136=(($135+($134<<2))|0);
  $137=((HEAP32[(($136)>>2)])|0);
  $138=(($137+($133<<2))|0);
  $139=(+(HEAPF32[(($138)>>2)]));
  $140=($131)*($139);
  $f2=$140;
  $141=$i;
  $142=((($141)+(769))|0);
  $143=((18856+($142<<2))|0);
  $144=(+(HEAPF32[(($143)>>2)]));
  $145=$i;
  $146=((($145)+(769))|0);
  $147=$3;
  $148=$4;
  $149=(($148+($147<<2))|0);
  $150=((HEAP32[(($149)>>2)])|0);
  $151=(($150+($146<<2))|0);
  $152=(+(HEAPF32[(($151)>>2)]));
  $153=($144)*($152);
  $w=$153;
  $154=$f2;
  $155=$w;
  $156=($154)-($155);
  $f3=$156;
  $157=$f2;
  $158=$w;
  $159=($157)+($158);
  $f2=$159;
  $160=$f0;
  $161=$f2;
  $162=($160)+($161);
  $163=$2;
  $164=(($163+2048)|0);
  HEAPF32[(($164)>>2)]=$162;
  $165=$f0;
  $166=$f2;
  $167=($165)-($166);
  $168=$2;
  $169=(($168+2056)|0);
  HEAPF32[(($169)>>2)]=$167;
  $170=$f1;
  $171=$f3;
  $172=($170)+($171);
  $173=$2;
  $174=(($173+2052)|0);
  HEAPF32[(($174)>>2)]=$172;
  $175=$f1;
  $176=$f3;
  $177=($175)-($176);
  $178=$2;
  $179=(($178+2060)|0);
  HEAPF32[(($179)>>2)]=$177;
  $181=$jj;
  $182=((($181)-(1))|0);
  $jj=$182;
  $183=($182|0)>=0;
  if (!($183)) {
   break;
  }
 }
 $185=$1;
 $186=(($185+85820)|0);
 $187=((HEAP32[(($186)>>2)])|0);
 $188=$2;
 FUNCTION_TABLE_vii[($187)&7]($188,512);
 STACKTOP=sp;return;
}


function _init_fft($gfc){
 $gfc=($gfc)|0;
 var $1=0,$i=0,$3=0,$4=0,$6=0,$7=.0,$8=.0,$9=.0,$10=.0,$11=.0,$12=.0,$13=.0,$14=0,$15=.0,$16=.0,$17=.0,$18=.0,$19=.0,$20=.0,$21=.0;
 var $22=.0,$23=0,$24=0,$26=0,$27=0,$30=0,$31=0,$33=0,$34=.0,$35=.0,$36=.0,$37=.0,$38=.0,$39=.0,$40=.0,$41=.0,$42=0,$43=0,$45=0,$46=0;
 var $48=0,$49=0,label=0;
 var sp=0;sp=STACKTOP;


 $1=$gfc;
 $i=0;
 while(1) {
  $3=$i;
  $4=($3|0)<1024;
  if (!($4)) {
   break;
  }
  $6=$i;
  $7=(+((($6|0))|0));
  $8=($7)+((0.5));
  $9=((6.283185307179586))*($8);
  $10=($9)/((1024.0));
  $11=(+(Math_cos($10)));
  $12=((0.5))*($11);
  $13=((0.42))-($12);
  $14=$i;
  $15=(+((($14|0))|0));
  $16=($15)+((0.5));
  $17=((12.566370614359172))*($16);
  $18=($17)/((1024.0));
  $19=(+(Math_cos($18)));
  $20=((0.08))*($19);
  $21=($13)+($20);
  $22=$21;
  $23=$i;
  $24=((18856+($23<<2))|0);
  HEAPF32[(($24)>>2)]=$22;
  $26=$i;
  $27=((($26)+(1))|0);
  $i=$27;
 }
 $i=0;
 while(1) {
  $30=$i;
  $31=($30|0)<128;
  if (!($31)) {
   break;
  }
  $33=$i;
  $34=(+((($33|0))|0));
  $35=($34)+((0.5));
  $36=((6.283185307179586))*($35);
  $37=($36)/((256.0));
  $38=(+(Math_cos($37)));
  $39=((1.0))-($38);
  $40=((0.5))*($39);
  $41=$40;
  $42=$i;
  $43=((18344+($42<<2))|0);
  HEAPF32[(($43)>>2)]=$41;
  $45=$i;
  $46=((($45)+(1))|0);
  $i=$46;
 }
 $48=$1;
 $49=(($48+85820)|0);
 HEAP32[(($49)>>2)]=2;
 STACKTOP=sp;return;
}


function _fht($fz,$n){
 $fz=($fz)|0;
 $n=($n)|0;
 var $1=0,$2=0,$tri=0,$k4=0,$fi=0,$gi=0,$fn=0,$s1=.0,$c1=.0,$i=0,$k1=0,$k2=0,$k3=0,$kx=0,$f0=.0,$f1=.0,$f2=.0,$f3=.0,$c2=.0,$s2=.0;
 var $a=.0,$b=.0,$g0=.0,$f01=.0,$f12=.0,$g1=.0,$f23=.0,$g2=.0,$f34=.0,$g3=.0,$3=0,$4=0,$5=0,$6=0,$7=0,$9=0,$10=0,$11=0,$12=0,$13=0;
 var $14=0,$15=0,$16=0,$17=0,$18=0,$19=0,$20=0,$21=0,$22=0,$24=0,$25=0,$26=.0,$27=0,$28=0,$29=0,$30=.0,$31=.0,$32=0,$33=0,$34=.0;
 var $35=0,$36=0,$37=0,$38=.0,$39=.0,$40=0,$41=0,$42=0,$43=.0,$44=0,$45=0,$46=0,$47=.0,$48=.0,$49=0,$50=0,$51=0,$52=.0,$53=0,$54=0;
 var $55=0,$56=.0,$57=.0,$58=.0,$59=.0,$60=.0,$61=0,$62=0,$63=0,$64=.0,$65=.0,$66=.0,$67=0,$68=0,$69=.0,$70=.0,$71=.0,$72=0,$73=0,$74=0;
 var $75=.0,$76=.0,$77=.0,$78=0,$79=0,$80=0,$81=0,$82=0,$83=.0,$84=0,$85=0,$86=0,$87=.0,$88=.0,$89=0,$90=0,$91=.0,$92=0,$93=0,$94=0;
 var $95=.0,$96=.0,$97=0,$98=0,$99=0,$100=.0,$101=.0,$102=.0,$103=.0,$104=0,$105=0,$106=0,$107=.0,$108=.0,$109=.0,$110=.0,$111=.0,$112=.0,$113=.0,$114=0;
 var $115=0,$116=0,$117=.0,$118=.0,$119=.0,$120=0,$121=0,$122=.0,$123=.0,$124=.0,$125=0,$126=0,$127=0,$128=.0,$129=.0,$130=.0,$131=0,$132=0,$133=0,$134=0;
 var $135=0,$136=0,$137=0,$138=0,$139=0,$141=0,$142=0,$143=0,$145=0,$146=0,$147=.0,$148=0,$149=0,$150=.0,$152=0,$153=0,$154=0,$156=.0,$157=.0,$158=.0;
 var $159=.0,$160=.0,$161=.0,$162=.0,$163=.0,$164=.0,$165=0,$166=0,$167=0,$168=0,$169=0,$170=0,$171=0,$172=0,$173=0,$175=.0,$176=0,$177=0,$178=0,$179=.0;
 var $180=.0,$181=.0,$182=0,$183=0,$184=0,$185=.0,$186=.0,$187=.0,$188=.0,$189=0,$190=0,$191=0,$192=.0,$193=.0,$194=.0,$195=0,$196=0,$197=0,$198=.0,$199=.0;
 var $200=.0,$201=0,$202=0,$203=.0,$204=.0,$205=.0,$206=0,$207=0,$208=.0,$209=.0,$210=.0,$211=0,$212=0,$213=.0,$214=.0,$215=.0,$216=0,$217=0,$218=.0,$219=.0;
 var $220=.0,$221=.0,$222=0,$223=0,$224=0,$225=.0,$226=.0,$227=.0,$228=0,$229=0,$230=0,$231=.0,$232=.0,$233=.0,$234=.0,$235=0,$236=0,$237=0,$238=.0,$239=.0;
 var $240=.0,$241=0,$242=0,$243=0,$244=.0,$245=.0,$246=.0,$247=0,$248=0,$249=0,$250=.0,$251=.0,$252=.0,$253=0,$254=0,$255=0,$256=.0,$257=.0,$258=.0,$259=0;
 var $260=0,$261=0,$262=.0,$263=.0,$264=.0,$265=0,$266=0,$267=0,$268=.0,$269=.0,$270=.0,$271=.0,$272=.0,$273=.0,$274=.0,$275=.0,$276=.0,$277=.0,$278=.0,$279=.0;
 var $280=.0,$281=.0,$282=.0,$283=.0,$284=.0,$285=.0,$286=.0,$287=.0,$288=0,$289=0,$290=0,$291=.0,$292=.0,$293=.0,$294=0,$295=0,$296=.0,$297=.0,$298=.0,$299=0;
 var $300=0,$301=0,$302=.0,$303=.0,$304=.0,$305=0,$306=0,$307=0,$308=.0,$309=.0,$310=.0,$311=.0,$312=.0,$313=.0,$314=.0,$315=.0,$316=.0,$317=.0,$318=.0,$319=.0;
 var $320=.0,$321=.0,$322=.0,$323=.0,$324=.0,$325=0,$326=0,$327=0,$328=.0,$329=.0,$330=.0,$331=0,$332=0,$333=.0,$334=.0,$335=.0,$336=0,$337=0,$338=0,$339=.0;
 var $340=.0,$341=.0,$342=0,$343=0,$344=0,$345=0,$346=0,$347=0,$348=0,$349=0,$350=0,$352=0,$353=0,$354=0,$356=.0,$357=.0,$358=0,$359=0,$360=.0,$361=.0;
 var $362=.0,$363=0,$364=0,$365=.0,$366=.0,$367=.0,$368=.0,$369=0,$370=0,$371=.0,$372=.0,$373=.0,$374=0,$375=0,$376=.0,$377=.0,$378=.0,$380=0,$381=0,$383=0;
 var $384=0,$386=0,$387=0,$388=0,label=0;
 var sp=0;sp=STACKTOP;






























 $1=$fz;
 $2=$n;
 $tri=15136;
 $3=$2;
 $4=$3<<1;
 $2=$4;
 $5=$1;
 $6=$2;
 $7=(($5+($6<<2))|0);
 $fn=$7;
 $k4=4;
 while(1) {
  $9=$k4;
  $10=$9>>1;
  $kx=$10;
  $11=$k4;
  $k1=$11;
  $12=$k4;
  $13=$12<<1;
  $k2=$13;
  $14=$k2;
  $15=$k1;
  $16=((($14)+($15))|0);
  $k3=$16;
  $17=$k2;
  $18=$17<<1;
  $k4=$18;
  $19=$1;
  $fi=$19;
  $20=$fi;
  $21=$kx;
  $22=(($20+($21<<2))|0);
  $gi=$22;
  while(1) {
   $24=$fi;
   $25=(($24)|0);
   $26=(+(HEAPF32[(($25)>>2)]));
   $27=$k1;
   $28=$fi;
   $29=(($28+($27<<2))|0);
   $30=(+(HEAPF32[(($29)>>2)]));
   $31=($26)-($30);
   $f1=$31;
   $32=$fi;
   $33=(($32)|0);
   $34=(+(HEAPF32[(($33)>>2)]));
   $35=$k1;
   $36=$fi;
   $37=(($36+($35<<2))|0);
   $38=(+(HEAPF32[(($37)>>2)]));
   $39=($34)+($38);
   $f0=$39;
   $40=$k2;
   $41=$fi;
   $42=(($41+($40<<2))|0);
   $43=(+(HEAPF32[(($42)>>2)]));
   $44=$k3;
   $45=$fi;
   $46=(($45+($44<<2))|0);
   $47=(+(HEAPF32[(($46)>>2)]));
   $48=($43)-($47);
   $f3=$48;
   $49=$k2;
   $50=$fi;
   $51=(($50+($49<<2))|0);
   $52=(+(HEAPF32[(($51)>>2)]));
   $53=$k3;
   $54=$fi;
   $55=(($54+($53<<2))|0);
   $56=(+(HEAPF32[(($55)>>2)]));
   $57=($52)+($56);
   $f2=$57;
   $58=$f0;
   $59=$f2;
   $60=($58)-($59);
   $61=$k2;
   $62=$fi;
   $63=(($62+($61<<2))|0);
   HEAPF32[(($63)>>2)]=$60;
   $64=$f0;
   $65=$f2;
   $66=($64)+($65);
   $67=$fi;
   $68=(($67)|0);
   HEAPF32[(($68)>>2)]=$66;
   $69=$f1;
   $70=$f3;
   $71=($69)-($70);
   $72=$k3;
   $73=$fi;
   $74=(($73+($72<<2))|0);
   HEAPF32[(($74)>>2)]=$71;
   $75=$f1;
   $76=$f3;
   $77=($75)+($76);
   $78=$k1;
   $79=$fi;
   $80=(($79+($78<<2))|0);
   HEAPF32[(($80)>>2)]=$77;
   $81=$gi;
   $82=(($81)|0);
   $83=(+(HEAPF32[(($82)>>2)]));
   $84=$k1;
   $85=$gi;
   $86=(($85+($84<<2))|0);
   $87=(+(HEAPF32[(($86)>>2)]));
   $88=($83)-($87);
   $f1=$88;
   $89=$gi;
   $90=(($89)|0);
   $91=(+(HEAPF32[(($90)>>2)]));
   $92=$k1;
   $93=$gi;
   $94=(($93+($92<<2))|0);
   $95=(+(HEAPF32[(($94)>>2)]));
   $96=($91)+($95);
   $f0=$96;
   $97=$k3;
   $98=$gi;
   $99=(($98+($97<<2))|0);
   $100=(+(HEAPF32[(($99)>>2)]));
   $101=$100;
   $102=((1.4142135623730951))*($101);
   $103=$102;
   $f3=$103;
   $104=$k2;
   $105=$gi;
   $106=(($105+($104<<2))|0);
   $107=(+(HEAPF32[(($106)>>2)]));
   $108=$107;
   $109=((1.4142135623730951))*($108);
   $110=$109;
   $f2=$110;
   $111=$f0;
   $112=$f2;
   $113=($111)-($112);
   $114=$k2;
   $115=$gi;
   $116=(($115+($114<<2))|0);
   HEAPF32[(($116)>>2)]=$113;
   $117=$f0;
   $118=$f2;
   $119=($117)+($118);
   $120=$gi;
   $121=(($120)|0);
   HEAPF32[(($121)>>2)]=$119;
   $122=$f1;
   $123=$f3;
   $124=($122)-($123);
   $125=$k3;
   $126=$gi;
   $127=(($126+($125<<2))|0);
   HEAPF32[(($127)>>2)]=$124;
   $128=$f1;
   $129=$f3;
   $130=($128)+($129);
   $131=$k1;
   $132=$gi;
   $133=(($132+($131<<2))|0);
   HEAPF32[(($133)>>2)]=$130;
   $134=$k4;
   $135=$gi;
   $136=(($135+($134<<2))|0);
   $gi=$136;
   $137=$k4;
   $138=$fi;
   $139=(($138+($137<<2))|0);
   $fi=$139;
   $141=$fi;
   $142=$fn;
   $143=($141>>>0)<($142>>>0);
   if (!($143)) {
    break;
   }
  }
  $145=$tri;
  $146=(($145)|0);
  $147=(+(HEAPF32[(($146)>>2)]));
  $c1=$147;
  $148=$tri;
  $149=(($148+4)|0);
  $150=(+(HEAPF32[(($149)>>2)]));
  $s1=$150;
  $i=1;
  while(1) {
   $152=$i;
   $153=$kx;
   $154=($152|0)<($153|0);
   if (!($154)) {
    break;
   }
   $156=$s1;
   $157=((2.0))*($156);
   $158=$s1;
   $159=($157)*($158);
   $160=((1.0))-($159);
   $c2=$160;
   $161=$s1;
   $162=((2.0))*($161);
   $163=$c1;
   $164=($162)*($163);
   $s2=$164;
   $165=$1;
   $166=$i;
   $167=(($165+($166<<2))|0);
   $fi=$167;
   $168=$1;
   $169=$k1;
   $170=(($168+($169<<2))|0);
   $171=$i;
   $172=(((-$171))|0);
   $173=(($170+($172<<2))|0);
   $gi=$173;
   while(1) {
    $175=$s2;
    $176=$k1;
    $177=$fi;
    $178=(($177+($176<<2))|0);
    $179=(+(HEAPF32[(($178)>>2)]));
    $180=($175)*($179);
    $181=$c2;
    $182=$k1;
    $183=$gi;
    $184=(($183+($182<<2))|0);
    $185=(+(HEAPF32[(($184)>>2)]));
    $186=($181)*($185);
    $187=($180)-($186);
    $b=$187;
    $188=$c2;
    $189=$k1;
    $190=$fi;
    $191=(($190+($189<<2))|0);
    $192=(+(HEAPF32[(($191)>>2)]));
    $193=($188)*($192);
    $194=$s2;
    $195=$k1;
    $196=$gi;
    $197=(($196+($195<<2))|0);
    $198=(+(HEAPF32[(($197)>>2)]));
    $199=($194)*($198);
    $200=($193)+($199);
    $a=$200;
    $201=$fi;
    $202=(($201)|0);
    $203=(+(HEAPF32[(($202)>>2)]));
    $204=$a;
    $205=($203)-($204);
    $f12=$205;
    $206=$fi;
    $207=(($206)|0);
    $208=(+(HEAPF32[(($207)>>2)]));
    $209=$a;
    $210=($208)+($209);
    $f01=$210;
    $211=$gi;
    $212=(($211)|0);
    $213=(+(HEAPF32[(($212)>>2)]));
    $214=$b;
    $215=($213)-($214);
    $g1=$215;
    $216=$gi;
    $217=(($216)|0);
    $218=(+(HEAPF32[(($217)>>2)]));
    $219=$b;
    $220=($218)+($219);
    $g0=$220;
    $221=$s2;
    $222=$k3;
    $223=$fi;
    $224=(($223+($222<<2))|0);
    $225=(+(HEAPF32[(($224)>>2)]));
    $226=($221)*($225);
    $227=$c2;
    $228=$k3;
    $229=$gi;
    $230=(($229+($228<<2))|0);
    $231=(+(HEAPF32[(($230)>>2)]));
    $232=($227)*($231);
    $233=($226)-($232);
    $b=$233;
    $234=$c2;
    $235=$k3;
    $236=$fi;
    $237=(($236+($235<<2))|0);
    $238=(+(HEAPF32[(($237)>>2)]));
    $239=($234)*($238);
    $240=$s2;
    $241=$k3;
    $242=$gi;
    $243=(($242+($241<<2))|0);
    $244=(+(HEAPF32[(($243)>>2)]));
    $245=($240)*($244);
    $246=($239)+($245);
    $a=$246;
    $247=$k2;
    $248=$fi;
    $249=(($248+($247<<2))|0);
    $250=(+(HEAPF32[(($249)>>2)]));
    $251=$a;
    $252=($250)-($251);
    $f34=$252;
    $253=$k2;
    $254=$fi;
    $255=(($254+($253<<2))|0);
    $256=(+(HEAPF32[(($255)>>2)]));
    $257=$a;
    $258=($256)+($257);
    $f23=$258;
    $259=$k2;
    $260=$gi;
    $261=(($260+($259<<2))|0);
    $262=(+(HEAPF32[(($261)>>2)]));
    $263=$b;
    $264=($262)-($263);
    $g3=$264;
    $265=$k2;
    $266=$gi;
    $267=(($266+($265<<2))|0);
    $268=(+(HEAPF32[(($267)>>2)]));
    $269=$b;
    $270=($268)+($269);
    $g2=$270;
    $271=$s1;
    $272=$f23;
    $273=($271)*($272);
    $274=$c1;
    $275=$g3;
    $276=($274)*($275);
    $277=($273)-($276);
    $b=$277;
    $278=$c1;
    $279=$f23;
    $280=($278)*($279);
    $281=$s1;
    $282=$g3;
    $283=($281)*($282);
    $284=($280)+($283);
    $a=$284;
    $285=$f01;
    $286=$a;
    $287=($285)-($286);
    $288=$k2;
    $289=$fi;
    $290=(($289+($288<<2))|0);
    HEAPF32[(($290)>>2)]=$287;
    $291=$f01;
    $292=$a;
    $293=($291)+($292);
    $294=$fi;
    $295=(($294)|0);
    HEAPF32[(($295)>>2)]=$293;
    $296=$g1;
    $297=$b;
    $298=($296)-($297);
    $299=$k3;
    $300=$gi;
    $301=(($300+($299<<2))|0);
    HEAPF32[(($301)>>2)]=$298;
    $302=$g1;
    $303=$b;
    $304=($302)+($303);
    $305=$k1;
    $306=$gi;
    $307=(($306+($305<<2))|0);
    HEAPF32[(($307)>>2)]=$304;
    $308=$c1;
    $309=$g2;
    $310=($308)*($309);
    $311=$s1;
    $312=$f34;
    $313=($311)*($312);
    $314=($310)-($313);
    $b=$314;
    $315=$s1;
    $316=$g2;
    $317=($315)*($316);
    $318=$c1;
    $319=$f34;
    $320=($318)*($319);
    $321=($317)+($320);
    $a=$321;
    $322=$g0;
    $323=$a;
    $324=($322)-($323);
    $325=$k2;
    $326=$gi;
    $327=(($326+($325<<2))|0);
    HEAPF32[(($327)>>2)]=$324;
    $328=$g0;
    $329=$a;
    $330=($328)+($329);
    $331=$gi;
    $332=(($331)|0);
    HEAPF32[(($332)>>2)]=$330;
    $333=$f12;
    $334=$b;
    $335=($333)-($334);
    $336=$k3;
    $337=$fi;
    $338=(($337+($336<<2))|0);
    HEAPF32[(($338)>>2)]=$335;
    $339=$f12;
    $340=$b;
    $341=($339)+($340);
    $342=$k1;
    $343=$fi;
    $344=(($343+($342<<2))|0);
    HEAPF32[(($344)>>2)]=$341;
    $345=$k4;
    $346=$gi;
    $347=(($346+($345<<2))|0);
    $gi=$347;
    $348=$k4;
    $349=$fi;
    $350=(($349+($348<<2))|0);
    $fi=$350;
    $352=$fi;
    $353=$fn;
    $354=($352>>>0)<($353>>>0);
    if (!($354)) {
     break;
    }
   }
   $356=$c1;
   $c2=$356;
   $357=$c2;
   $358=$tri;
   $359=(($358)|0);
   $360=(+(HEAPF32[(($359)>>2)]));
   $361=($357)*($360);
   $362=$s1;
   $363=$tri;
   $364=(($363+4)|0);
   $365=(+(HEAPF32[(($364)>>2)]));
   $366=($362)*($365);
   $367=($361)-($366);
   $c1=$367;
   $368=$c2;
   $369=$tri;
   $370=(($369+4)|0);
   $371=(+(HEAPF32[(($370)>>2)]));
   $372=($368)*($371);
   $373=$s1;
   $374=$tri;
   $375=(($374)|0);
   $376=(+(HEAPF32[(($375)>>2)]));
   $377=($373)*($376);
   $378=($372)+($377);
   $s1=$378;
   $380=$i;
   $381=((($380)+(1))|0);
   $i=$381;
  }
  $383=$tri;
  $384=(($383+8)|0);
  $tri=$384;
  $386=$k4;
  $387=$2;
  $388=($386|0)<($387|0);
  if (!($388)) {
   break;
  }
 }
 STACKTOP=sp;return;
}


function _hip_decode_init(){
 var $hip=0,$1=0,$2=0,$3=0,$4=0,$5=0,label=0;
 var sp=0;sp=STACKTOP;

 $1=((_calloc(1,22000))|0);
 $2=$1;
 $hip=$2;
 $3=$hip;
 $4=((_InitMP3((($3)|0)))|0);
 $5=$hip;
 STACKTOP=sp;return (($5)|0);
}


function _hip_decode_exit($hip){
 $hip=($hip)|0;
 var $1=0,$2=0,$3=0,$5=0,$6=0,$7=0,label=0;
 var sp=0;sp=STACKTOP;

 $1=$hip;
 $2=$1;
 $3=($2|0)!=0;
 if ($3) {
  $5=$1;
  _ExitMP3((($5)|0));
  $6=$1;
  $7=$6;
  _free($7);
 }
 STACKTOP=sp;return ((0)|0);
}


function _hip_decode1_unclipped($hip,$buffer,$len,$pcm_l,$pcm_r){
 $hip=($hip)|0;
 $buffer=($buffer)|0;
 $len=($len)|0;
 $pcm_l=($pcm_l)|0;
 $pcm_r=($pcm_r)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$mp3data=0,$enc_delay=0,$enc_padding=0,$7=0,$8=0,$10=0,$11=0,$12=0,$13=0,$14=0,$15=0,$16=0,$17=0,$20=0;
 var label=0;
 var sp=0;sp=STACKTOP;STACKTOP=(STACKTOP+56)|0;






 $mp3data=((sp)|0);
 $enc_delay=(((sp)+(40))|0);
 $enc_padding=(((sp)+(48))|0);
 $2=$hip;
 $3=$buffer;
 $4=$len;
 $5=$pcm_l;
 $6=$pcm_r;
 $7=$2;
 $8=($7|0)!=0;
 if ($8) {
  $10=$2;
  $11=$3;
  $12=$4;
  $13=$5;
  $14=$13;
  $15=$6;
  $16=$15;
  $17=((_decode1_headersB_clipchoice($10,$11,$12,$14,$16,$mp3data,$enc_delay,$enc_padding,60400,9216,4,2))|0);
  $1=$17;
  $20=$1;
  STACKTOP=sp;return (($20)|0);
 } else {
  $1=0;
  $20=$1;
  STACKTOP=sp;return (($20)|0);
 }
  return 0;
}


function _hip_set_errorf($hip,$func){
 $hip=($hip)|0;
 $func=($func)|0;
 var $1=0,$2=0,$3=0,$4=0,$6=0,$7=0,$8=0,label=0;
 var sp=0;sp=STACKTOP;


 $1=$hip;
 $2=$func;
 $3=$1;
 $4=($3|0)!=0;
 if (!($4)) {
  STACKTOP=sp;return;
 }
 $6=$2;
 $7=$1;
 $8=(($7+21996)|0);
 HEAP32[(($8)>>2)]=$6;
 STACKTOP=sp;return;
}


function _hip_set_debugf($hip,$func){
 $hip=($hip)|0;
 $func=($func)|0;
 var $1=0,$2=0,$3=0,$4=0,$6=0,$7=0,$8=0,label=0;
 var sp=0;sp=STACKTOP;


 $1=$hip;
 $2=$func;
 $3=$1;
 $4=($3|0)!=0;
 if (!($4)) {
  STACKTOP=sp;return;
 }
 $6=$2;
 $7=$1;
 $8=(($7+21992)|0);
 HEAP32[(($8)>>2)]=$6;
 STACKTOP=sp;return;
}


function _hip_set_msgf($hip,$func){
 $hip=($hip)|0;
 $func=($func)|0;
 var $1=0,$2=0,$3=0,$4=0,$6=0,$7=0,$8=0,label=0;
 var sp=0;sp=STACKTOP;


 $1=$hip;
 $2=$func;
 $3=$1;
 $4=($3|0)!=0;
 if (!($4)) {
  STACKTOP=sp;return;
 }
 $6=$2;
 $7=$1;
 $8=(($7+21988)|0);
 HEAP32[(($8)>>2)]=$6;
 STACKTOP=sp;return;
}


function _decode1_headersB_clipchoice($pmp,$buffer,$len,$pcm_l_raw,$pcm_r_raw,$mp3data,$enc_delay,$enc_padding,$p,$psize,$decoded_sample_size,$decodeMP3_ptr){
 $pmp=($pmp)|0;
 $buffer=($buffer)|0;
 $len=($len)|0;
 $pcm_l_raw=($pcm_l_raw)|0;
 $pcm_r_raw=($pcm_r_raw)|0;
 $mp3data=($mp3data)|0;
 $enc_delay=($enc_delay)|0;
 $enc_padding=($enc_padding)|0;
 $p=($p)|0;
 $psize=($psize)|0;
 $decoded_sample_size=($decoded_sample_size)|0;
 $decodeMP3_ptr=($decodeMP3_ptr)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0,$processed_bytes=0,$processed_samples=0,$ret=0,$i=0,$pcm_l=0,$p_samples=0,$pcm_l1=0,$p_samples2=0;
 var $pcm_l3=0,$pcm_r=0,$p_samples4=0,$pcm_l5=0,$pcm_r6=0,$p_samples7=0,$13=0,$14=0,$15=0,$16=0,$17=0,$18=0,$19=0,$20=0,$21=0,$22=0,$23=0,$24=0,$25=0,$27=0;
 var $28=0,$29=0,$30=0,$32=0,$33=0,$34=0,$35=0,$37=0,$38=0,$39=0,$40=0,$41=0,$42=0,$43=0,$44=0,$45=0,$46=0,$47=0,$48=0,$49=0;
 var $50=0,$51=0,$52=0,$53=0,$54=0,$55=0,$56=0,$57=0,$58=0,$59=0,$60=0,$61=0,$62=0,$63=0,$64=0,$65=0,$66=0,$67=0,$68=0,$69=0;
 var $70=0,$71=0,$72=0,$73=0,$74=0,$75=0,$76=0,$77=0,$78=0,$79=0,$80=0,$81=0,$83=0,$84=0,$85=0,$86=0,$87=0,$88=0,$89=0,$90=0;
 var $91=0,$92=.0,$93=0,$94=0,$95=0,$96=.0,$97=.0,$98=.0,$99=.0,$100=0,$101=0,$102=0,$104=0,$105=0,$106=0,$107=0,$109=0,$110=0,$111=0,$112=0;
 var $113=0,$114=0,$115=0,$116=0,$117=0,$118=.0,$119=0,$120=0,$121=0,$122=.0,$123=.0,$124=.0,$125=.0,$126=0,$127=0,$128=0,$130=0,$131=0,$132=0,$133=0;
 var $134=0,$135=0,$136=0,$137=0,$138=0,$139=0,$140=0,$141=0,$142=0,$143=0,$144=0,$145=0,$146=0,$147=0,$148=0,$151=0,$152=0,$153=0,$154=0,$156=0;
 var $157=0,$158=0,$159=0,$160=0,$161=0,$162=0,$163=0,$164=0,$165=0,$166=0,$167=0,$168=0,$169=0,$170=0,$171=0,$172=0,$173=0,$174=0,$175=0,$176=0;
 var $177=0,$180=0,$182=0,$183=0,$184=0,$185=0,$187=0,$188=0,$189=0,$190=0,$191=0,$193=0,$194=0,$195=0,$196=0,$198=0,$199=0,$200=0,$202=0,$203=0;
 var $204=0,$205=0,$206=0,$208=0,$209=0,$212=0,$213=0,$214=0,$215=0,$217=0,$218=0,$219=0,$221=0,$222=0,$223=.0,$224=0,$225=0,$227=0,$228=0,$232=0;
 var $233=0,$234=0,$235=0,$236=0,$237=0,$239=0,$240=0,$241=0,$242=0,$243=0,$244=0,$246=0,$247=0,$248=0,$250=0,$251=0,$252=0,$253=0,$254=0,$255=0;
 var $256=0,$257=0,$258=0,$259=0,$261=0,$262=0,$265=0,$266=0,$267=0,$268=0,$269=0,$270=0,$272=0,$273=0,$274=0,$276=0,$277=0,$278=.0,$279=0,$280=0;
 var $281=0,$282=0,$283=.0,$284=0,$285=0,$287=0,$288=0,$297=0,label=0;
 var sp=0;sp=STACKTOP;STACKTOP=(STACKTOP+8)|0;












 $processed_bytes=((sp)|0);













 $1=$pmp;
 $2=$buffer;
 $3=$len;
 $4=$pcm_l_raw;
 $5=$pcm_r_raw;
 $6=$mp3data;
 $7=$enc_delay;
 $8=$enc_padding;
 $9=$p;
 $10=$psize;
 $11=$decoded_sample_size;
 $12=$decodeMP3_ptr;
 $13=$6;
 $14=(($13)|0);
 HEAP32[(($14)>>2)]=0;
 $15=$12;
 $16=$1;
 $17=$2;
 $18=$3;
 $19=$9;
 $20=$10;
 $21=((FUNCTION_TABLE_iiiiiii[($15)&3]($16,$17,$18,$19,$20,$processed_bytes))|0);
 $ret=$21;
 $22=$1;
 $23=(($22+24)|0);
 $24=((HEAP32[(($23)>>2)])|0);
 $25=($24|0)!=0;
 do {
  if ($25) {
   label = 4;
  } else {
   $27=$1;
   $28=(($27+60)|0);
   $29=((HEAP32[(($28)>>2)])|0);
   $30=($29|0)>0;
   if ($30) {
    label = 4;
    break;
   }
   $32=$1;
   $33=(($32+48)|0);
   $34=((HEAP32[(($33)>>2)])|0);
   $35=($34|0)>0;
   if ($35) {
    label = 4;
   }
  }
 } while(0);
 if ((label|0) == 4) {
  $37=$6;
  $38=(($37)|0);
  HEAP32[(($38)>>2)]=1;
  $39=$1;
  $40=(($39+68)|0);
  $41=(($40)|0);
  $42=((HEAP32[(($41)>>2)])|0);
  $43=$6;
  $44=(($43+4)|0);
  HEAP32[(($44)>>2)]=$42;
  $45=$1;
  $46=(($45+68)|0);
  $47=(($46+32)|0);
  $48=((HEAP32[(($47)>>2)])|0);
  $49=((_freqs+($48<<2))|0);
  $50=((HEAP32[(($49)>>2)])|0);
  $51=$6;
  $52=(($51+8)|0);
  HEAP32[(($52)>>2)]=$50;
  $53=$1;
  $54=(($53+68)|0);
  $55=(($54+44)|0);
  $56=((HEAP32[(($55)>>2)])|0);
  $57=$6;
  $58=(($57+16)|0);
  HEAP32[(($58)>>2)]=$56;
  $59=$1;
  $60=(($59+68)|0);
  $61=(($60+48)|0);
  $62=((HEAP32[(($61)>>2)])|0);
  $63=$6;
  $64=(($63+20)|0);
  HEAP32[(($64)>>2)]=$62;
  $65=$1;
  $66=(($65+68)|0);
  $67=(($66+20)|0);
  $68=((HEAP32[(($67)>>2)])|0);
  $69=$1;
  $70=(($69+68)|0);
  $71=(($70+8)|0);
  $72=((HEAP32[(($71)>>2)])|0);
  $73=((14016+($72<<4))|0);
  $74=(($73+($68<<2))|0);
  $75=((HEAP32[(($74)>>2)])|0);
  $76=$6;
  $77=(($76+24)|0);
  HEAP32[(($77)>>2)]=$75;
  $78=$1;
  $79=(($78+60)|0);
  $80=((HEAP32[(($79)>>2)])|0);
  $81=($80|0)>0;
  if ($81) {
   $83=$1;
   $84=(($83+60)|0);
   $85=((HEAP32[(($84)>>2)])|0);
   $86=((($85)+(4))|0);
   $87=($86<<3);
   $88=$6;
   $89=(($88+8)|0);
   $90=((HEAP32[(($89)>>2)])|0);
   $91=(Math_imul($87,$90)|0);
   $92=(+((($91|0))|0));
   $93=$6;
   $94=(($93+24)|0);
   $95=((HEAP32[(($94)>>2)])|0);
   $96=(+((($95|0))|0));
   $97=((1000.0))*($96);
   $98=($92)/($97);
   $99=($98)+((0.5));
   $100=(~~($99));
   $101=$6;
   $102=(($101+12)|0);
   HEAP32[(($102)>>2)]=$100;
  } else {
   $104=$1;
   $105=(($104+48)|0);
   $106=((HEAP32[(($105)>>2)])|0);
   $107=($106|0)>0;
   if ($107) {
    $109=$1;
    $110=(($109+48)|0);
    $111=((HEAP32[(($110)>>2)])|0);
    $112=((($111)+(4))|0);
    $113=($112<<3);
    $114=$6;
    $115=(($114+8)|0);
    $116=((HEAP32[(($115)>>2)])|0);
    $117=(Math_imul($113,$116)|0);
    $118=(+((($117|0))|0));
    $119=$6;
    $120=(($119+24)|0);
    $121=((HEAP32[(($120)>>2)])|0);
    $122=(+((($121|0))|0));
    $123=((1000.0))*($122);
    $124=($118)/($123);
    $125=($124)+((0.5));
    $126=(~~($125));
    $127=$6;
    $128=(($127+12)|0);
    HEAP32[(($128)>>2)]=$126;
   } else {
    $130=$1;
    $131=(($130+68)|0);
    $132=(($131+28)|0);
    $133=((HEAP32[(($132)>>2)])|0);
    $134=$1;
    $135=(($134+68)|0);
    $136=(($135+20)|0);
    $137=((HEAP32[(($136)>>2)])|0);
    $138=((($137)-(1))|0);
    $139=$1;
    $140=(($139+68)|0);
    $141=(($140+8)|0);
    $142=((HEAP32[(($141)>>2)])|0);
    $143=((_tabsel_123+((($142)*(192))&-1))|0);
    $144=(($143+($138<<6))|0);
    $145=(($144+($133<<2))|0);
    $146=((HEAP32[(($145)>>2)])|0);
    $147=$6;
    $148=(($147+12)|0);
    HEAP32[(($148)>>2)]=$146;
   }
  }
  $151=$1;
  $152=(($151+12)|0);
  $153=((HEAP32[(($152)>>2)])|0);
  $154=($153|0)>0;
  if ($154) {
   $156=$1;
   $157=(($156+12)|0);
   $158=((HEAP32[(($157)>>2)])|0);
   $159=$6;
   $160=(($159+32)|0);
   HEAP32[(($160)>>2)]=$158;
   $161=$6;
   $162=(($161+24)|0);
   $163=((HEAP32[(($162)>>2)])|0);
   $164=$1;
   $165=(($164+12)|0);
   $166=((HEAP32[(($165)>>2)])|0);
   $167=(Math_imul($163,$166)|0);
   $168=$6;
   $169=(($168+28)|0);
   HEAP32[(($169)>>2)]=$167;
   $170=$1;
   $171=(($170+16)|0);
   $172=((HEAP32[(($171)>>2)])|0);
   $173=$7;
   HEAP32[(($173)>>2)]=$172;
   $174=$1;
   $175=(($174+20)|0);
   $176=((HEAP32[(($175)>>2)])|0);
   $177=$8;
   HEAP32[(($177)>>2)]=$176;
  }
 }
 $180=$ret;
 if (((($180|0))|0)==((0)|0)) {
  $182=$1;
  $183=(($182+68)|0);
  $184=(($183)|0);
  $185=((HEAP32[(($184)>>2)])|0);
  if (((($185|0))|0)==((2)|0)) {
   $232=((HEAP32[(($processed_bytes)>>2)])|0);
   $233=$11;
   $234=(((($232|0))/(($233|0)))&-1);
   $235=$234>>1;
   $processed_samples=$235;
   $236=$11;
   $237=($236|0)==2;
   if ($237) {
    $239=$4;
    $240=$239;
    $pcm_l3=$240;
    $241=$5;
    $242=$241;
    $pcm_r=$242;
    $243=$9;
    $244=$243;
    $p_samples4=$244;
    $i=0;
    while(1) {
     $246=$i;
     $247=$processed_samples;
     $248=($246|0)<($247|0);
     if (!($248)) {
      break;
     }
     $250=$p_samples4;
     $251=(($250+2)|0);
     $p_samples4=$251;
     $252=((HEAP16[(($250)>>1)])|0);
     $253=$pcm_l3;
     $254=(($253+2)|0);
     $pcm_l3=$254;
     HEAP16[(($253)>>1)]=$252;
     $255=$p_samples4;
     $256=(($255+2)|0);
     $p_samples4=$256;
     $257=((HEAP16[(($255)>>1)])|0);
     $258=$pcm_r;
     $259=(($258+2)|0);
     $pcm_r=$259;
     HEAP16[(($258)>>1)]=$257;
     $261=$i;
     $262=((($261)+(1))|0);
     $i=$262;
    }
   } else {
    $265=$4;
    $266=$265;
    $pcm_l5=$266;
    $267=$5;
    $268=$267;
    $pcm_r6=$268;
    $269=$9;
    $270=$269;
    $p_samples7=$270;
    $i=0;
    while(1) {
     $272=$i;
     $273=$processed_samples;
     $274=($272|0)<($273|0);
     if (!($274)) {
      break;
     }
     $276=$p_samples7;
     $277=(($276+4)|0);
     $p_samples7=$277;
     $278=(+(HEAPF32[(($276)>>2)]));
     $279=$pcm_l5;
     $280=(($279+4)|0);
     $pcm_l5=$280;
     HEAPF32[(($279)>>2)]=$278;
     $281=$p_samples7;
     $282=(($281+4)|0);
     $p_samples7=$282;
     $283=(+(HEAPF32[(($281)>>2)]));
     $284=$pcm_r6;
     $285=(($284+4)|0);
     $pcm_r6=$285;
     HEAPF32[(($284)>>2)]=$283;
     $287=$i;
     $288=((($287)+(1))|0);
     $i=$288;
    }
   }
  } else if (((($185|0))|0)==((1)|0)) {
   $187=((HEAP32[(($processed_bytes)>>2)])|0);
   $188=$11;
   $189=(((($187|0))/(($188|0)))&-1);
   $processed_samples=$189;
   $190=$11;
   $191=($190|0)==2;
   if ($191) {
    $193=$4;
    $194=$193;
    $pcm_l=$194;
    $195=$9;
    $196=$195;
    $p_samples=$196;
    $i=0;
    while(1) {
     $198=$i;
     $199=$processed_samples;
     $200=($198|0)<($199|0);
     if (!($200)) {
      break;
     }
     $202=$p_samples;
     $203=(($202+2)|0);
     $p_samples=$203;
     $204=((HEAP16[(($202)>>1)])|0);
     $205=$pcm_l;
     $206=(($205+2)|0);
     $pcm_l=$206;
     HEAP16[(($205)>>1)]=$204;
     $208=$i;
     $209=((($208)+(1))|0);
     $i=$209;
    }
   } else {
    $212=$4;
    $213=$212;
    $pcm_l1=$213;
    $214=$9;
    $215=$214;
    $p_samples2=$215;
    $i=0;
    while(1) {
     $217=$i;
     $218=$processed_samples;
     $219=($217|0)<($218|0);
     if (!($219)) {
      break;
     }
     $221=$p_samples2;
     $222=(($221+4)|0);
     $p_samples2=$222;
     $223=(+(HEAPF32[(($221)>>2)]));
     $224=$pcm_l1;
     $225=(($224+4)|0);
     $pcm_l1=$225;
     HEAPF32[(($224)>>2)]=$223;
     $227=$i;
     $228=((($227)+(1))|0);
     $i=$228;
    }
   }
  } else {
   $processed_samples=-1;
  }
  $297=$processed_samples;
  STACKTOP=sp;return (($297)|0);
 } else if (((($180|0))|0)==((1)|0)) {
  $processed_samples=0;
  $297=$processed_samples;
  STACKTOP=sp;return (($297)|0);
 } else if (((($180|0))|0)==((-1)|0)) {
  $processed_samples=-1;
  $297=$processed_samples;
  STACKTOP=sp;return (($297)|0);
 } else {
  $processed_samples=-1;
  $297=$processed_samples;
  STACKTOP=sp;return (($297)|0);
 }
  return 0;
}


function _get_lame_version(){
 var $1=0,label=0;

 $1=((HEAP32[((12856)>>2)])|0);
 return (($1)|0);
}


function _get_lame_short_version(){
 var $1=0,label=0;

 $1=((HEAP32[((12864)>>2)])|0);
 return (($1)|0);
}


function _L3psycho_anal_vbr($gfc,$buffer,$gr_out,$masking_ratio,$masking_MS_ratio,$percep_entropy,$percep_MS_entropy,$energy,$blocktype_d){
 $gfc=($gfc)|0;
 $buffer=($buffer)|0;
 $gr_out=($gr_out)|0;
 $masking_ratio=($masking_ratio)|0;
 $masking_MS_ratio=($masking_MS_ratio)|0;
 $percep_entropy=($percep_entropy)|0;
 $percep_MS_entropy=($percep_MS_entropy)|0;
 $energy=($energy)|0;
 $blocktype_d=($blocktype_d)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$cfg=0,$psv=0,$gdl=0,$gds=0,$plt=0,$last_thm=0,$wsamp_l=0,$wsamp_s=0,$fftenergy=0,$fftenergy_s=0,$wsamp_L=0;
 var $wsamp_S=0,$eb=0,$thr=0,$sub_short_factor=0,$thmm=.0,$pcfact=.0,$ath_factor=.0,$const_eb=0,$const_fftenergy_s=0,$ns_attacks=0,$uselongblock=0,$chn=0,$sb=0,$sblock=0,$n_chn_psy=0,$ch01=0,$force_short_block_calc=0,$ch011=0,$ch012=0,$new_thmm=0;
 var $prev_thm=.0,$t1=.0,$t2=.0,$ppe=0,$type=0,$mr=0,$10=0,$11=0,$12=0,$13=0,$14=0,$15=0,$16=0,$17=0,$18=0,$19=0,$20=0,$21=0,$22=0,$23=0;
 var $24=0,$25=0,$27=0,$28=0,$29=0,$32=0,$33=0,$34=0,$35=.0,$36=0,$38=0,$39=0,$40=.0,$41=0,$42=0,$43=0,$44=0,$45=.0,$46=.0,$49=.0;
 var $50=0,$51=0,$52=0,$53=0,$54=0,$55=0,$56=0,$59=0,$60=0,$61=0,$63=0,$64=0,$65=0,$66=0,$67=0,$68=0,$69=0,$70=0,$71=0,$72=0;
 var $73=0,$74=0,$75=0,$76=0,$77=0,$78=0,$79=0,$80=0,$82=0,$83=0,$84=0,$86=0,$87=0,$88=0,$89=0,$90=0,$91=0,$92=0,$93=0,$94=0;
 var $95=0,$96=0,$97=0,$98=0,$99=0,$100=0,$101=0,$102=0,$103=0,$104=0,$105=0,$106=0,$107=0,$108=0,$109=0,$111=0,$112=0,$114=0,$115=0,$116=0;
 var $117=0,$119=0,$120=0,$121=0,$122=0,$123=0,$124=0,$126=0,$127=0,$128=0,$129=0,$130=0,$131=0,$132=0,$133=0,$134=0,$135=0,$136=.0,$137=0,$138=0;
 var $139=.0,$140=0,$141=0,$142=0,$146=0,$147=0,$148=0,$150=0,$151=0,$152=0,$153=0,$154=0,$155=0,$156=0,$157=0,$158=0,$159=0,$160=0,$161=0,$162=0;
 var $163=0,$164=0,$165=0,$167=0,$168=0,$170=0,$171=0,$172=0,$173=0,$174=0,$176=0,$177=0,$180=0,$181=0,$182=0,$184=0,$185=0,$186=0,$187=0,$188=0;
 var $189=0,$191=0,$192=0,$194=0,$195=0,$196=0,$198=0,$199=0,$200=0,$201=0,$202=0,$203=0,$204=0,$205=0,$206=0,$207=0,$208=0,$209=0,$210=0,$211=0;
 var $212=0,$213=0,$214=0,$215=0,$216=0,$219=0,$220=0,$222=0,$223=0,$224=0,$225=0,$227=0,$228=0,$229=0,$230=0,$231=0,$232=0,$234=0,$235=0,$236=0;
 var $237=0,$238=0,$239=0,$240=0,$241=0,$242=0,$243=0,$244=.0,$245=0,$246=0,$247=.0,$248=0,$249=0,$250=0,$254=0,$255=0,$256=0,$258=0,$259=0,$260=0;
 var $261=0,$262=0,$263=0,$265=0,$266=0,$268=0,$269=0,$270=0,$271=0,$272=0,$273=0,$274=0,$275=0,$276=0,$279=0,$280=0,$283=0,$284=0,$287=0,$288=0;
 var $289=0,$292=0,$293=0,$296=0,$297=0,$299=0,$300=0,$301=0,$302=0,$303=0,$304=0,$305=0,$306=0,$307=0,$308=.0,$309=.0,$310=.0,$311=.0,$312=.0,$313=.0;
 var $314=0,$315=0,$317=0,$318=0,$319=0,$320=.0,$322=0,$323=0,$324=0,$325=0,$326=0,$327=0,$328=.0,$330=0,$331=0,$332=0,$333=0,$334=0,$335=0,$337=0;
 var $338=0,$339=0,$340=0,$341=0,$342=0,$343=0,$345=.0,$346=.0,$347=.0,$349=.0,$350=.0,$351=0,$353=.0,$355=.0,$357=.0,$358=0,$359=0,$360=0,$361=0,$362=0;
 var $363=0,$365=.0,$366=.0,$367=.0,$369=0,$370=0,$372=0,$373=0,$374=0,$375=0,$376=0,$377=0,$379=0,$380=0,$382=0,$383=0,$384=0,$385=0,$386=0,$387=0;
 var $388=0,$390=0,$392=0,$393=0,$394=0,$395=0,$396=0,$397=0,$398=.0,$400=0,$401=0,$402=0,$403=0,$404=0,$405=0,$406=.0,$408=0,$409=.0,$411=.0,$412=.0;
 var $413=.0,$416=.0,$417=.0,$418=0,$420=.0,$422=.0,$424=.0,$425=.0,$426=.0,$427=0,$429=.0,$431=.0,$433=.0,$434=0,$435=0,$436=0,$437=0,$438=.0,$439=.0,$440=.0;
 var $441=.0,$442=0,$443=0,$445=0,$446=0,$449=0,$450=0,$452=0,$453=0,$454=.0,$455=0,$456=0,$457=0,$458=0,$459=0,$460=0,$461=0,$462=0,$463=0,$465=0;
 var $466=0,$469=0,$470=0,$473=0,$474=0,$477=0,$478=0,$479=0,$481=0,$482=0,$483=0,$484=0,$485=0,$486=0,$487=0,$488=0,$490=0,$491=0,$493=0,$494=0;
 var $495=0,$496=0,$497=0,$498=0,$500=0,$501=0,$502=0,$504=0,$505=0,$507=0,$508=0,$509=0,$510=0,$511=0,$512=0,$514=0,$515=0,$516=0,$517=0,$520=0;
 var $521=0,$522=0,$523=0,$524=0,$525=0,$527=0,$528=0,$529=0,$530=0,$531=0,$532=0,$533=0,$534=0,$535=0,$536=0,$538=0,$539=0,$541=0,$542=0,$543=0;
 var $544=0,$545=.0,$546=.0,$547=0,$548=0,$549=0,$551=0,$552=0,$553=0,$554=0,$555=.0,$556=.0,$557=0,$558=0,$559=0,$561=0,$562=0,$564=0,$565=0,$566=0;
 var $567=.0,$568=.0,$569=0,$570=0,$571=0,$572=0,$573=0,$574=0,$577=0,$578=0,label=0;
 var sp=0;sp=STACKTOP;STACKTOP=(STACKTOP+21104)|0;














 $last_thm=((sp)|0);


 $fftenergy=(((sp)+(976))|0);
 $fftenergy_s=(((sp)+(3032))|0);
 $wsamp_L=(((sp)+(4584))|0);
 $wsamp_S=(((sp)+(12776))|0);
 $eb=(((sp)+(18920))|0);
 $thr=(((sp)+(19944))|0);
 $sub_short_factor=(((sp)+(20968))|0);





 $ns_attacks=(((sp)+(21016))|0);
 $uselongblock=(((sp)+(21080))|0);








 $new_thmm=(((sp)+(21088))|0);






 $1=$gfc;
 $2=$buffer;
 $3=$gr_out;
 $4=$masking_ratio;
 $5=$masking_MS_ratio;
 $6=$percep_entropy;
 $7=$percep_MS_entropy;
 $8=$energy;
 $9=$blocktype_d;
 $10=$1;
 $11=(($10+16)|0);
 $cfg=$11;
 $12=$1;
 $13=(($12+21564)|0);
 $psv=$13;
 $14=$1;
 $15=(($14+85800)|0);
 $16=((HEAP32[(($15)>>2)])|0);
 $17=(($16)|0);
 $gdl=$17;
 $18=$1;
 $19=(($18+85800)|0);
 $20=((HEAP32[(($19)>>2)])|0);
 $21=(($20+2160)|0);
 $gds=$21;
 $22=$cfg;
 $23=(($22+124)|0);
 $24=((HEAP32[(($23)>>2)])|0);
 $25=($24|0)!=0;
 if ($25) {
  $27=$1;
  $28=(($27+85804)|0);
  $29=((HEAP32[(($28)>>2)])|0);
  $32=$29;
 } else {
  $32=0;
 }

 $plt=$32;
 $pcfact=0.6000000238418579;
 $33=$cfg;
 $34=(($33+176)|0);
 $35=(+(HEAPF32[(($34)>>2)]));
 $36=$35>(0.0);
 if ($36) {
  $38=$cfg;
  $39=(($38+184)|0);
  $40=(+(HEAPF32[(($39)>>2)]));
  $41=$1;
  $42=(($41+85796)|0);
  $43=((HEAP32[(($42)>>2)])|0);
  $44=(($43+8)|0);
  $45=(+(HEAPF32[(($44)>>2)]));
  $46=($40)*($45);
  $49=$46;
 } else {
  $49=1.0;
 }

 $ath_factor=$49;
 $50=(($eb)|0);
 $const_eb=$50;
 $51=(($fftenergy_s)|0);
 $const_fftenergy_s=$51;
 $52=$ns_attacks;
 _memset((((($52)|0))|0), ((((0)|0))|0), ((((64)|0))|0))|0;
 $53=$cfg;
 $54=(($53+164)|0);
 $55=((HEAP32[(($54)>>2)])|0);
 $56=($55|0)==1;
 if ($56) {
  $63=4;
 } else {
  $59=$cfg;
  $60=(($59+56)|0);
  $61=((HEAP32[(($60)>>2)])|0);
  $63=$61;
 }

 $n_chn_psy=$63;
 $64=(($last_thm)|0);
 $65=$64;
 $66=$psv;
 $67=(($66+4096)|0);
 $68=(($67)|0);
 $69=$68;
 (_memcpy((($65)|0), (($69)|0), 976)|0);
 $70=$1;
 $71=$2;
 $72=$3;
 $73=$4;
 $74=$5;
 $75=$8;
 $76=(($sub_short_factor)|0);
 $77=(($ns_attacks)|0);
 $78=(($uselongblock)|0);
 _vbrpsy_attack_detection($70,$71,$72,$73,$74,$75,$76,$77,$78);
 $79=$cfg;
 $80=(($uselongblock)|0);
 _vbrpsy_compute_block_type($79,$80);
 $chn=0;
 while(1) {
  $82=$chn;
  $83=$n_chn_psy;
  $84=($82|0)<($83|0);
  if (!($84)) {
   break;
  }
  $86=$chn;
  $87=$86&1;
  $ch01=$87;
  $88=(($wsamp_L)|0);
  $89=$ch01;
  $90=(($88+($89<<12))|0);
  $wsamp_l=$90;
  $91=$1;
  $92=$2;
  $93=$chn;
  $94=$3;
  $95=(($fftenergy)|0);
  $96=$wsamp_l;
  _vbrpsy_compute_fft_l($91,$92,$93,$94,$95,$96);
  $97=$1;
  $98=$3;
  $99=$chn;
  $100=(($fftenergy)|0);
  _vbrpsy_compute_loudness_approximation_l($97,$98,$99,$100);
  $101=$1;
  $102=(($fftenergy)|0);
  $103=$chn;
  $104=(($eb+($103<<8))|0);
  $105=(($104)|0);
  $106=$chn;
  $107=(($thr+($106<<8))|0);
  $108=(($107)|0);
  $109=$chn;
  _vbrpsy_compute_masking_l($101,$102,$105,$108,$109);
  $111=$chn;
  $112=((($111)+(1))|0);
  $chn=$112;
 }
 $114=$cfg;
 $115=(($114+164)|0);
 $116=((HEAP32[(($115)>>2)])|0);
 $117=($116|0)==1;
 if ($117) {
  $119=(($uselongblock)|0);
  $120=((HEAP32[(($119)>>2)])|0);
  $121=(($uselongblock+4)|0);
  $122=((HEAP32[(($121)>>2)])|0);
  $123=((($120)+($122))|0);
  $124=($123|0)==2;
  if ($124) {
   $126=$const_eb;
   $127=(($thr)|0);
   $128=$gdl;
   $129=(($128+768)|0);
   $130=(($129)|0);
   $131=$1;
   $132=(($131+85796)|0);
   $133=((HEAP32[(($132)>>2)])|0);
   $134=(($133+212)|0);
   $135=(($134)|0);
   $136=$ath_factor;
   $137=$cfg;
   $138=(($137+176)|0);
   $139=(+(HEAPF32[(($138)>>2)]));
   $140=$gdl;
   $141=(($140+2148)|0);
   $142=((HEAP32[(($141)>>2)])|0);
   _vbrpsy_compute_MS_thresholds($126,$127,$130,$135,$136,$139,$142);
  }
 }
 $chn=0;
 while(1) {
  $146=$chn;
  $147=$n_chn_psy;
  $148=($146|0)<($147|0);
  if (!($148)) {
   break;
  }
  $150=$1;
  $151=$chn;
  $152=(($eb+($151<<8))|0);
  $153=(($152)|0);
  $154=$chn;
  $155=(($thr+($154<<8))|0);
  $156=(($155)|0);
  $157=$chn;
  _convert_partition2scalefac_l($150,$153,$156,$157);
  $158=$1;
  $159=$chn;
  $160=(($eb+($159<<8))|0);
  $161=(($160)|0);
  $162=$chn;
  $163=(($thr+($162<<8))|0);
  $164=(($163)|0);
  $165=$chn;
  _convert_partition2scalefac_l_to_s($158,$161,$164,$165);
  $167=$chn;
  $168=((($167)+(1))|0);
  $chn=$168;
 }
 $170=$1;
 $171=(($170+85800)|0);
 $172=((HEAP32[(($171)>>2)])|0);
 $173=(($172+6500)|0);
 $174=((HEAP32[(($173)>>2)])|0);
 $force_short_block_calc=$174;
 $sblock=0;
 while(1) {
  $176=$sblock;
  $177=($176|0)<3;
  if (!($177)) {
   break;
  }
  $chn=0;
  while(1) {
   $180=$chn;
   $181=$n_chn_psy;
   $182=($180|0)<($181|0);
   if (!($182)) {
    break;
   }
   $184=$chn;
   $185=$184&1;
   $ch011=$185;
   $186=$ch011;
   $187=(($uselongblock+($186<<2))|0);
   $188=((HEAP32[(($187)>>2)])|0);
   $189=($188|0)!=0;
   do {
    if ($189) {
     $191=$force_short_block_calc;
     $192=($191|0)!=0;
     if ($192) {
      label = 29;
      break;
     }
     $194=$1;
     $195=$chn;
     $196=$sblock;
     _vbrpsy_skip_masking_s($194,$195,$196);
    } else {
     label = 29;
    }
   } while(0);
   if ((label|0) == 29) {
    label = 0;
    $198=(($wsamp_S)|0);
    $199=$ch011;
    $200=(($198+((($199)*(3072))&-1))|0);
    $wsamp_s=$200;
    $201=$1;
    $202=$2;
    $203=$chn;
    $204=$sblock;
    $205=(($fftenergy_s)|0);
    $206=$wsamp_s;
    _vbrpsy_compute_fft_s($201,$202,$203,$204,$205,$206);
    $207=$1;
    $208=$const_fftenergy_s;
    $209=$chn;
    $210=(($eb+($209<<8))|0);
    $211=(($210)|0);
    $212=$chn;
    $213=(($thr+($212<<8))|0);
    $214=(($213)|0);
    $215=$chn;
    $216=$sblock;
    _vbrpsy_compute_masking_s($207,$208,$211,$214,$215,$216);
   }
   $219=$chn;
   $220=((($219)+(1))|0);
   $chn=$220;
  }
  $222=$cfg;
  $223=(($222+164)|0);
  $224=((HEAP32[(($223)>>2)])|0);
  $225=($224|0)==1;
  if ($225) {
   $227=(($uselongblock)|0);
   $228=((HEAP32[(($227)>>2)])|0);
   $229=(($uselongblock+4)|0);
   $230=((HEAP32[(($229)>>2)])|0);
   $231=((($228)+($230))|0);
   $232=($231|0)==0;
   if ($232) {
    $234=$const_eb;
    $235=(($thr)|0);
    $236=$gds;
    $237=(($236+768)|0);
    $238=(($237)|0);
    $239=$1;
    $240=(($239+85796)|0);
    $241=((HEAP32[(($240)>>2)])|0);
    $242=(($241+468)|0);
    $243=(($242)|0);
    $244=$ath_factor;
    $245=$cfg;
    $246=(($245+176)|0);
    $247=(+(HEAPF32[(($246)>>2)]));
    $248=$gds;
    $249=(($248+2148)|0);
    $250=((HEAP32[(($249)>>2)])|0);
    _vbrpsy_compute_MS_thresholds($234,$235,$238,$243,$244,$247,$250);
   }
  }
  $chn=0;
  while(1) {
   $254=$chn;
   $255=$n_chn_psy;
   $256=($254|0)<($255|0);
   if (!($256)) {
    break;
   }
   $258=$chn;
   $259=$258&1;
   $ch012=$259;
   $260=$ch012;
   $261=(($uselongblock+($260<<2))|0);
   $262=((HEAP32[(($261)>>2)])|0);
   $263=($262|0)!=0;
   if ($263) {
    $265=$force_short_block_calc;
    $266=($265|0)!=0;
    if ($266) {
     label = 40;
    }
   } else {
    label = 40;
   }
   if ((label|0) == 40) {
    label = 0;
    $268=$1;
    $269=$chn;
    $270=(($eb+($269<<8))|0);
    $271=(($270)|0);
    $272=$chn;
    $273=(($thr+($272<<8))|0);
    $274=(($273)|0);
    $275=$chn;
    $276=$sblock;
    _convert_partition2scalefac_s($268,$271,$274,$275,$276);
   }
   $279=$chn;
   $280=((($279)+(1))|0);
   $chn=$280;
  }
  $283=$sblock;
  $284=((($283)+(1))|0);
  $sblock=$284;
 }
 $chn=0;
 while(1) {
  $287=$chn;
  $288=$n_chn_psy;
  $289=($287|0)<($288|0);
  if (!($289)) {
   break;
  }
  $sb=0;
  while(1) {
   $292=$sb;
   $293=($292|0)<13;
   if (!($293)) {
    break;
   }
   $sblock=0;
   while(1) {
    $296=$sblock;
    $297=($296|0)<3;
    if (!($297)) {
     break;
    }
    $299=$sblock;
    $300=$sb;
    $301=$chn;
    $302=$psv;
    $303=(($302+4096)|0);
    $304=(($303+((($301)*(244))&-1))|0);
    $305=(($304+88)|0);
    $306=(($305+((($300)*(12))&-1))|0);
    $307=(($306+($299<<2))|0);
    $308=(+(HEAPF32[(($307)>>2)]));
    $thmm=$308;
    $309=$thmm;
    $310=$309;
    $311=($310)*((0.8));
    $312=$311;
    $thmm=$312;
    $313=$thmm;
    $t2=$313;
    $t1=$313;
    $314=$sblock;
    $315=($314|0)>0;
    if ($315) {
     $317=$sblock;
     $318=((($317)-(1))|0);
     $319=(($new_thmm+($318<<2))|0);
     $320=(+(HEAPF32[(($319)>>2)]));
     $prev_thm=$320;
    } else {
     $322=$sb;
     $323=$chn;
     $324=(($last_thm+((($323)*(244))&-1))|0);
     $325=(($324+88)|0);
     $326=(($325+((($322)*(12))&-1))|0);
     $327=(($326+8)|0);
     $328=(+(HEAPF32[(($327)>>2)]));
     $prev_thm=$328;
    }
    $330=$sblock;
    $331=$chn;
    $332=(($ns_attacks+($331<<4))|0);
    $333=(($332+($330<<2))|0);
    $334=((HEAP32[(($333)>>2)])|0);
    $335=($334|0)>=2;
    if ($335) {
     label = 56;
    } else {
     $337=$sblock;
     $338=((($337)+(1))|0);
     $339=$chn;
     $340=(($ns_attacks+($339<<4))|0);
     $341=(($340+($338<<2))|0);
     $342=((HEAP32[(($341)>>2)])|0);
     $343=($342|0)==1;
     if ($343) {
      label = 56;
     }
    }
    if ((label|0) == 56) {
     label = 0;
     $345=$prev_thm;
     $346=$thmm;
     $347=(+(_NS_INTERP($345,$346,0.36000001430511475)));
     $t1=$347;
    }
    $349=$t1;
    $350=$thmm;
    $351=$349<$350;
    if ($351) {
     $353=$t1;
     $357=$353;
    } else {
     $355=$thmm;
     $357=$355;
    }

    $thmm=$357;
    $358=$sblock;
    $359=$chn;
    $360=(($ns_attacks+($359<<4))|0);
    $361=(($360+($358<<2))|0);
    $362=((HEAP32[(($361)>>2)])|0);
    $363=($362|0)==1;
    if ($363) {
     $365=$prev_thm;
     $366=$thmm;
     $367=(+(_NS_INTERP($365,$366,0.18000000715255737)));
     $t2=$367;
    } else {
     $369=$sblock;
     $370=($369|0)==0;
     if ($370) {
      $372=$chn;
      $373=$psv;
      $374=(($373+6216)|0);
      $375=(($374+($372<<2))|0);
      $376=((HEAP32[(($375)>>2)])|0);
      $377=($376|0)==3;
      if ($377) {
       label = 66;
      } else {
       label = 64;
      }
     } else {
      label = 64;
     }
     do {
      if ((label|0) == 64) {
       label = 0;
       $379=$sblock;
       $380=($379|0)>0;
       if (!($380)) {
        break;
       }
       $382=$sblock;
       $383=((($382)-(1))|0);
       $384=$chn;
       $385=(($ns_attacks+($384<<4))|0);
       $386=(($385+($383<<2))|0);
       $387=((HEAP32[(($386)>>2)])|0);
       $388=($387|0)==3;
       if ($388) {
        label = 66;
       }
      }
     } while(0);
     if ((label|0) == 66) {
      label = 0;
      $390=$sblock;
      if (((($390|0))|0)==((1)|0)) {
       $400=$sb;
       $401=$chn;
       $402=(($last_thm+((($401)*(244))&-1))|0);
       $403=(($402+88)|0);
       $404=(($403+((($400)*(12))&-1))|0);
       $405=(($404+8)|0);
       $406=(+(HEAPF32[(($405)>>2)]));
       $prev_thm=$406;
      } else if (((($390|0))|0)==((2)|0)) {
       $408=(($new_thmm)|0);
       $409=(+(HEAPF32[(($408)>>2)]));
       $prev_thm=$409;
      } else if (((($390|0))|0)==((0)|0)) {
       $392=$sb;
       $393=$chn;
       $394=(($last_thm+((($393)*(244))&-1))|0);
       $395=(($394+88)|0);
       $396=(($395+((($392)*(12))&-1))|0);
       $397=(($396+4)|0);
       $398=(+(HEAPF32[(($397)>>2)]));
       $prev_thm=$398;
      }
      $411=$prev_thm;
      $412=$thmm;
      $413=(+(_NS_INTERP($411,$412,0.18000000715255737)));
      $t2=$413;
     }
    }
    $416=$t1;
    $417=$thmm;
    $418=$416<$417;
    if ($418) {
     $420=$t1;
     $424=$420;
    } else {
     $422=$thmm;
     $424=$422;
    }

    $thmm=$424;
    $425=$t2;
    $426=$thmm;
    $427=$425<$426;
    if ($427) {
     $429=$t2;
     $433=$429;
    } else {
     $431=$thmm;
     $433=$431;
    }

    $thmm=$433;
    $434=$sblock;
    $435=$chn;
    $436=(($sub_short_factor+((($435)*(12))&-1))|0);
    $437=(($436+($434<<2))|0);
    $438=(+(HEAPF32[(($437)>>2)]));
    $439=$thmm;
    $440=($439)*($438);
    $thmm=$440;
    $441=$thmm;
    $442=$sblock;
    $443=(($new_thmm+($442<<2))|0);
    HEAPF32[(($443)>>2)]=$441;
    $445=$sblock;
    $446=((($445)+(1))|0);
    $sblock=$446;
   }
   $sblock=0;
   while(1) {
    $449=$sblock;
    $450=($449|0)<3;
    if (!($450)) {
     break;
    }
    $452=$sblock;
    $453=(($new_thmm+($452<<2))|0);
    $454=(+(HEAPF32[(($453)>>2)]));
    $455=$sblock;
    $456=$sb;
    $457=$chn;
    $458=$psv;
    $459=(($458+4096)|0);
    $460=(($459+((($457)*(244))&-1))|0);
    $461=(($460+88)|0);
    $462=(($461+((($456)*(12))&-1))|0);
    $463=(($462+($455<<2))|0);
    HEAPF32[(($463)>>2)]=$454;
    $465=$sblock;
    $466=((($465)+(1))|0);
    $sblock=$466;
   }
   $469=$sb;
   $470=((($469)+(1))|0);
   $sb=$470;
  }
  $473=$chn;
  $474=((($473)+(1))|0);
  $chn=$474;
 }
 $chn=0;
 while(1) {
  $477=$chn;
  $478=$n_chn_psy;
  $479=($477|0)<($478|0);
  if (!($479)) {
   break;
  }
  $481=$chn;
  $482=(($ns_attacks+($481<<4))|0);
  $483=(($482+8)|0);
  $484=((HEAP32[(($483)>>2)])|0);
  $485=$chn;
  $486=$psv;
  $487=(($486+6216)|0);
  $488=(($487+($485<<2))|0);
  HEAP32[(($488)>>2)]=$484;
  $490=$chn;
  $491=((($490)+(1))|0);
  $chn=$491;
 }
 $493=$psv;
 $494=$cfg;
 $495=(($494+56)|0);
 $496=((HEAP32[(($495)>>2)])|0);
 $497=(($uselongblock)|0);
 $498=$9;
 _vbrpsy_apply_block_type($493,$496,$497,$498);
 $chn=0;
 while(1) {
  $500=$chn;
  $501=$n_chn_psy;
  $502=($500|0)<($501|0);
  if (!($502)) {
   break;
  }
  $504=$chn;
  $505=($504|0)>1;
  if ($505) {
   $507=$7;
   $508=((($507)-(8))|0);
   $ppe=$508;
   $type=0;
   $509=$9;
   $510=(($509)|0);
   $511=((HEAP32[(($510)>>2)])|0);
   $512=($511|0)==2;
   if ($512) {
    label = 97;
   } else {
    $514=$9;
    $515=(($514+4)|0);
    $516=((HEAP32[(($515)>>2)])|0);
    $517=($516|0)==2;
    if ($517) {
     label = 97;
    }
   }
   if ((label|0) == 97) {
    label = 0;
    $type=2;
   }
   $520=$chn;
   $521=((($520)-(2))|0);
   $522=$3;
   $523=$5;
   $524=(($523+((($522)*(976))&-1))|0);
   $525=(($524+((($521)*(488))&-1))|0);
   $mr=$525;
  } else {
   $527=$6;
   $ppe=$527;
   $528=$chn;
   $529=$9;
   $530=(($529+($528<<2))|0);
   $531=((HEAP32[(($530)>>2)])|0);
   $type=$531;
   $532=$chn;
   $533=$3;
   $534=$4;
   $535=(($534+((($533)*(976))&-1))|0);
   $536=(($535+((($532)*(488))&-1))|0);
   $mr=$536;
  }
  $538=$type;
  $539=($538|0)==2;
  if ($539) {
   $541=$mr;
   $542=$1;
   $543=(($542+84768)|0);
   $544=(($543+140)|0);
   $545=(+(HEAPF32[(($544)>>2)]));
   $546=(+(_pecalc_s($541,$545)));
   $547=$chn;
   $548=$ppe;
   $549=(($548+($547<<2))|0);
   HEAPF32[(($549)>>2)]=$546;
  } else {
   $551=$mr;
   $552=$1;
   $553=(($552+84768)|0);
   $554=(($553+140)|0);
   $555=(+(HEAPF32[(($554)>>2)]));
   $556=(+(_pecalc_l($551,$555)));
   $557=$chn;
   $558=$ppe;
   $559=(($558+($557<<2))|0);
   HEAPF32[(($559)>>2)]=$556;
  }
  $561=$plt;
  $562=($561|0)!=0;
  if ($562) {
   $564=$chn;
   $565=$ppe;
   $566=(($565+($564<<2))|0);
   $567=(+(HEAPF32[(($566)>>2)]));
   $568=$567;
   $569=$chn;
   $570=$3;
   $571=$plt;
   $572=(($571+189240)|0);
   $573=(($572+($570<<5))|0);
   $574=(($573+($569<<3))|0);
   HEAPF64[(($574)>>3)]=$568;
  }
  $577=$chn;
  $578=((($577)+(1))|0);
  $chn=$578;
 }
 STACKTOP=sp;return ((0)|0);
}


function _psymodel_init($gfp){
 $gfp=($gfp)|0;
 var $1=0,$2=0,$gfc=0,$cfg=0,$psv=0,$gd=0,$i=0,$j=0,$b=0,$sb=0,$k=0,$bvl_a=.0,$bvl_b=.0,$snr_l_a=.0,$snr_l_b=.0,$snr_s_a=.0,$snr_s_b=.0,$bval=0,$bval_width=0,$norm=0;
 var $sfreq=.0,$xav=.0,$xbv=.0,$minval_low=.0,$snr=.0,$x=.0,$freq=.0,$level=.0,$x1=.0,$snr2=.0,$freq3=.0,$level4=.0,$msfix=.0,$freq5=.0,$freq_inc=.0,$eql_balance=.0,$x6=.0,$y=.0,$sk_s=.0,$sk_l=.0;
 var $m=.0,$m7=.0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=.0,$14=0,$15=0,$16=.0,$17=.0,$18=0,$19=0,$20=0;
 var $21=0,$24=0,$25=0,$26=0,$27=0,$28=0,$29=0,$30=0,$31=0,$32=0,$33=0,$34=0,$35=0,$36=0,$37=0,$38=0,$39=0,$40=0,$42=0,$43=0;
 var $46=0,$47=0,$49=0,$50=0,$51=0,$52=0,$53=0,$54=0,$55=0,$56=0,$57=0,$58=0,$59=0,$60=0,$61=0,$62=0,$63=0,$64=0,$65=0,$66=0;
 var $67=0,$68=0,$69=0,$70=0,$71=0,$72=0,$74=0,$75=0,$78=0,$79=0,$81=0,$82=0,$83=0,$84=0,$85=0,$86=0,$87=0,$88=0,$89=0,$90=0;
 var $91=0,$92=0,$93=0,$94=0,$96=0,$97=0,$100=0,$101=0,$104=0,$105=0,$107=0,$108=0,$109=0,$110=0,$111=0,$112=0,$113=0,$114=0,$115=0,$116=0;
 var $117=0,$118=0,$119=0,$120=0,$121=0,$122=0,$123=0,$124=0,$126=0,$127=0,$129=0,$130=0,$131=0,$132=0,$134=0,$135=0,$138=0,$139=0,$141=0,$142=0;
 var $143=0,$144=0,$145=0,$146=0,$148=0,$149=0,$152=0,$153=0,$155=0,$156=0,$157=0,$158=0,$159=0,$160=0,$161=0,$162=0,$163=.0,$164=0,$165=0,$166=0;
 var $167=0,$168=0,$169=0,$170=.0,$171=0,$172=0,$174=0,$175=0,$176=0,$177=0,$178=0,$179=0,$181=.0,$182=.0,$183=0,$184=0,$185=.0,$186=.0,$187=0,$189=.0;
 var $190=0,$191=0,$192=.0,$193=.0,$194=.0,$195=.0,$196=.0,$197=.0,$198=.0,$199=.0,$200=.0,$201=.0,$202=0,$203=0,$204=.0,$205=.0,$206=.0,$207=.0,$208=.0,$209=.0;
 var $210=.0,$211=.0,$212=.0,$214=.0,$215=.0,$216=.0,$217=.0,$218=0,$219=0,$221=0,$222=0,$224=0,$225=0,$226=0,$227=0,$228=0,$229=0,$230=0,$231=0,$232=0;
 var $233=0,$234=0,$235=0,$236=0,$237=0,$238=0,$239=0,$240=0,$242=0,$245=0,$246=0,$247=0,$248=0,$249=0,$250=0,$253=0,$254=0,$255=0,$256=0,$257=0;
 var $258=0,$259=0,$260=0,$262=.0,$263=0,$264=.0,$265=.0,$266=.0,$267=.0,$268=.0,$269=0,$270=.0,$271=.0,$272=.0,$273=.0,$274=.0,$275=.0,$276=.0,$277=.0,$278=.0;
 var $279=0,$280=0,$281=0,$282=0,$283=0,$284=0,$285=.0,$286=.0,$287=.0,$288=.0,$289=.0,$290=.0,$291=0,$293=.0,$294=.0,$297=0,$298=0,$299=0,$300=0,$302=.0;
 var $303=.0,$304=0,$305=0,$306=0,$307=0,$308=0,$309=0,$310=0,$311=0,$312=.0,$313=.0,$314=.0,$315=.0,$316=.0,$317=.0,$318=.0,$319=0,$322=.0,$323=.0,$324=.0;
 var $325=0,$327=.0,$328=.0,$330=0,$331=0,$332=0,$333=0,$336=.0,$337=.0,$338=.0,$339=.0,$340=.0,$341=0,$342=0,$343=0,$344=0,$345=0,$346=0,$347=.0,$348=.0;
 var $349=.0,$350=0,$351=0,$352=0,$353=0,$354=0,$356=0,$357=0,$359=0,$360=0,$361=.0,$362=0,$363=0,$364=0,$365=0,$366=0,$367=0,$368=.0,$369=0,$370=0;
 var $372=0,$373=0,$374=0,$375=0,$376=0,$377=0,$379=.0,$380=.0,$381=0,$382=0,$383=.0,$384=.0,$385=0,$387=.0,$388=0,$389=0,$390=.0,$391=.0,$392=.0,$393=.0;
 var $394=.0,$395=.0,$396=.0,$397=.0,$398=.0,$399=.0,$400=0,$401=0,$402=.0,$403=.0,$404=.0,$405=.0,$406=.0,$407=.0,$408=.0,$409=.0,$410=.0,$412=.0,$413=.0,$414=.0;
 var $415=.0,$416=0,$417=0,$419=0,$420=0,$421=0,$422=0,$423=0,$424=0,$425=0,$426=0,$428=.0,$429=0,$430=.0,$431=.0,$432=.0,$433=.0,$434=.0,$435=0,$436=.0;
 var $437=.0,$438=.0,$439=.0,$440=.0,$441=.0,$442=.0,$443=.0,$444=.0,$445=0,$446=0,$447=0,$448=0,$449=0,$450=0,$451=.0,$452=.0,$453=.0,$454=.0,$455=.0,$456=.0;
 var $457=0,$459=.0,$460=.0,$463=0,$464=0,$465=0,$466=0,$468=.0,$469=.0,$470=0,$471=0,$472=0,$473=0,$474=0,$475=0,$476=0,$477=0,$478=.0,$479=.0,$480=.0;
 var $481=.0,$482=.0,$483=.0,$484=0,$485=0,$486=.0,$487=.0,$488=0,$490=.0,$491=.0,$492=.0,$493=.0,$494=.0,$495=.0,$496=.0,$498=0,$499=0,$500=.0,$501=.0,$502=0;
 var $504=.0,$505=.0,$506=.0,$507=.0,$508=.0,$509=.0,$510=.0,$512=.0,$513=0,$516=.0,$517=.0,$518=.0,$519=0,$521=.0,$522=.0,$524=0,$525=0,$526=0,$527=0,$530=.0;
 var $531=.0,$532=.0,$533=.0,$534=.0,$535=0,$536=0,$537=0,$538=0,$539=0,$540=0,$541=.0,$542=.0,$543=.0,$544=0,$545=0,$546=0,$547=0,$548=0,$550=0,$551=0;
 var $553=0,$554=0,$555=0,$556=0,$557=0,$558=0,$559=0,$560=0,$561=0,$562=0,$563=0,$564=0,$565=0,$566=0,$567=0,$568=0,$569=0,$571=0,$573=0,$574=.0;
 var $575=.0,$576=.0,$577=.0,$578=.0,$579=.0,$580=.0,$581=0,$582=0,$583=0,$584=0,$585=0,$586=0,$589=0,$590=0,$591=.0,$592=.0,$593=.0,$594=0,$596=0,$597=0;
 var $598=.0,$600=.0,$601=0,$602=0,$604=0,$605=0,$606=0,$607=0,$608=0,$609=0,$611=0,$612=0,$613=0,$614=0,$615=0,$616=0,$617=0,$618=0,$619=0,$620=0;
 var $621=0,$622=0,$623=0,$625=0,$626=0,$627=0,$628=0,$629=0,$630=0,$631=0,$632=0,$633=0,$634=0,$635=0,$638=0,$639=0,$641=0,$642=0,$643=0,$644=.0;
 var $645=.0,$646=.0,$647=.0,$648=.0,$649=.0,$650=.0,$651=.0,$652=0,$653=0,$654=0,$655=0,$656=0,$657=0,$658=0,$659=0,$660=0,$661=0,$662=0,$663=0,$664=0;
 var $665=0,$666=0,$667=0,$669=0,$670=0,$671=0,$672=.0,$673=.0,$675=0,$676=0,$678=.0,$679=.0,$680=.0,$681=0,$682=.0,$683=.0,$684=.0,$685=.0,$686=.0,$687=.0;
 var $688=.0,$689=0,$690=0,$691=0,$692=0,$693=0,$694=0,$695=0,$696=0,$697=0,$698=0,$699=0,$700=0,$701=.0,$702=.0,$703=.0,$705=0,$706=0,$708=.0,$709=.0;
 var $710=.0,$711=.0,$713=0,$714=0,$715=0,$717=.0,$718=0,$719=0,$720=0,$721=0,$722=0,$723=0,$724=.0,$725=.0,$729=0,$730=0,$731=0,$732=0,$733=0,$734=0;
 var $737=0,$738=0,$739=0,$740=0,$741=0,$742=0,$743=0,$744=0,$746=0,$747=0,$749=0,$750=0,$753=0,$754=0,$757=0,$758=0,$759=0,$760=0,$761=0,$762=0;
 var $765=0,$766=0,$767=0,$768=0,$769=0,$770=0,$771=0,$772=0,$774=0,$775=0,$777=0,$778=0,$781=0,$782=0,$784=0,$785=0,$786=.0,$787=0,$788=0,$789=.0;
 var $790=.0,$791=0,$794=.0,$795=0,$798=.0,$799=0,$800=0,$801=0,$802=0,$803=0,$804=0,$805=0,$806=0,$807=0,$808=.0,$809=0,$810=0,$811=0,$812=0,$813=0;
 var $814=0,$815=0,$817=.0,$819=0,$820=0,$821=0,$822=0,$823=.0,$824=0,$825=0,$826=.0,$827=0,$828=0,$829=0,$830=0,$831=.0,$832=0,$833=0,$834=0,$835=0;
 var $836=0,$837=.0,$838=.0,$839=.0,$840=.0,$843=0,$844=0,$845=0,$846=0,$847=0,$848=0,$850=0,$851=0,$852=0,$853=0,$854=0,$855=0,$856=.0,$857=0,$858=0;
 var $859=0,$860=0,$861=.0,$862=.0,$863=.0,$864=.0,$865=.0,$866=.0,$867=.0,$868=0,$869=0,$870=0,$871=0,$872=0,$874=0,$875=0,$878=0,$879=0,$881=0,$882=0;
 var $883=0,$884=0,$885=0,$887=0,$888=0,$891=0,$892=0,$893=0,$894=0,$895=0,$896=0,$898=0,$899=0,$900=0,$901=0,$902=0,$903=0,$904=.0,$905=0,$906=0;
 var $907=0,$908=0,$909=.0,$910=.0,$911=.0,$912=.0,$913=.0,$914=.0,$915=.0,$916=0,$917=0,$918=0,$919=0,$920=0,$922=0,$923=0,$926=0,$927=0,$929=0,$930=0;
 var $931=0,$932=0,$933=0,$935=0,$936=0,$938=0,$939=0,$940=0,$941=0,$942=0,$943=0,$944=0,$945=0,$946=.0,$947=0,$948=0,$949=0,$950=0,$952=0,label=0;
 var sp=0;sp=STACKTOP;STACKTOP=(STACKTOP+768)|0;

















 $bval=((sp)|0);
 $bval_width=(((sp)+(256))|0);
 $norm=(((sp)+(512))|0);






















 $2=$gfp;
 $3=$2;
 $4=(($3+288)|0);
 $5=((HEAP32[(($4)>>2)])|0);
 $gfc=$5;
 $6=$gfc;
 $7=(($6+16)|0);
 $cfg=$7;
 $8=$gfc;
 $9=(($8+21564)|0);
 $psv=$9;
 $bvl_a=13.0;
 $bvl_b=24.0;
 $snr_l_a=0.0;
 $snr_l_b=0.0;
 $snr_s_a=-8.25;
 $snr_s_b=-4.5;
 $10=$cfg;
 $11=(($10+48)|0);
 $12=((HEAP32[(($11)>>2)])|0);
 $13=(+((($12|0))|0));
 $sfreq=$13;
 $xav=10.0;
 $xbv=12.0;
 $14=$cfg;
 $15=(($14+264)|0);
 $16=(+(HEAPF32[(($15)>>2)]));
 $17=((0.0))-($16);
 $minval_low=$17;
 $18=$gfc;
 $19=(($18+85800)|0);
 $20=((HEAP32[(($19)>>2)])|0);
 $21=($20|0)!=0;
 if ($21) {
  $1=0;
  $952=$1;
  STACKTOP=sp;return (($952)|0);
 }
 $24=$norm;
 _memset((((($24)|0))|0), ((((0)|0))|0), ((((256)|0))|0))|0;
 $25=((_calloc(1,6504))|0);
 $26=$25;
 $gd=$26;
 $27=$gd;
 $28=$gfc;
 $29=(($28+85800)|0);
 HEAP32[(($29)>>2)]=$27;
 $30=$2;
 $31=(($30+144)|0);
 $32=((HEAP32[(($31)>>2)])|0);
 $33=$gd;
 $34=(($33+6500)|0);
 HEAP32[(($34)>>2)]=$32;
 $35=$psv;
 $36=(($35+6232)|0);
 $37=(($36+4)|0);
 HEAP32[(($37)>>2)]=0;
 $38=$psv;
 $39=(($38+6232)|0);
 $40=(($39)|0);
 HEAP32[(($40)>>2)]=0;
 $i=0;
 while(1) {
  $42=$i;
  $43=($42|0)<4;
  if (!($43)) {
   break;
  }
  $j=0;
  while(1) {
   $46=$j;
   $47=($46|0)<64;
   if (!($47)) {
    break;
   }
   $49=$j;
   $50=$i;
   $51=$psv;
   $52=(($51)|0);
   $53=(($52+($50<<8))|0);
   $54=(($53+($49<<2))|0);
   HEAPF32[(($54)>>2)]=100000002004087730000.0;
   $55=$j;
   $56=$i;
   $57=$psv;
   $58=(($57+1024)|0);
   $59=(($58+($56<<8))|0);
   $60=(($59+($55<<2))|0);
   HEAPF32[(($60)>>2)]=100000002004087730000.0;
   $61=$j;
   $62=$i;
   $63=$psv;
   $64=(($63+3072)|0);
   $65=(($64+($62<<8))|0);
   $66=(($65+($61<<2))|0);
   HEAPF32[(($66)>>2)]=1.0;
   $67=$j;
   $68=$i;
   $69=$psv;
   $70=(($69+2048)|0);
   $71=(($70+($68<<8))|0);
   $72=(($71+($67<<2))|0);
   HEAPF32[(($72)>>2)]=1.0;
   $74=$j;
   $75=((($74)+(1))|0);
   $j=$75;
  }
  $sb=0;
  while(1) {
   $78=$sb;
   $79=($78|0)<22;
   if (!($79)) {
    break;
   }
   $81=$sb;
   $82=$i;
   $83=$psv;
   $84=(($83+5072)|0);
   $85=(($84+((($82)*(244))&-1))|0);
   $86=(($85)|0);
   $87=(($86+($81<<2))|0);
   HEAPF32[(($87)>>2)]=100000002004087730000.0;
   $88=$sb;
   $89=$i;
   $90=$psv;
   $91=(($90+4096)|0);
   $92=(($91+((($89)*(244))&-1))|0);
   $93=(($92)|0);
   $94=(($93+($88<<2))|0);
   HEAPF32[(($94)>>2)]=100000002004087730000.0;
   $96=$sb;
   $97=((($96)+(1))|0);
   $sb=$97;
  }
  $j=0;
  while(1) {
   $100=$j;
   $101=($100|0)<3;
   if (!($101)) {
    break;
   }
   $sb=0;
   while(1) {
    $104=$sb;
    $105=($104|0)<13;
    if (!($105)) {
     break;
    }
    $107=$j;
    $108=$sb;
    $109=$i;
    $110=$psv;
    $111=(($110+5072)|0);
    $112=(($111+((($109)*(244))&-1))|0);
    $113=(($112+88)|0);
    $114=(($113+((($108)*(12))&-1))|0);
    $115=(($114+($107<<2))|0);
    HEAPF32[(($115)>>2)]=100000002004087730000.0;
    $116=$j;
    $117=$sb;
    $118=$i;
    $119=$psv;
    $120=(($119+4096)|0);
    $121=(($120+((($118)*(244))&-1))|0);
    $122=(($121+88)|0);
    $123=(($122+((($117)*(12))&-1))|0);
    $124=(($123+($116<<2))|0);
    HEAPF32[(($124)>>2)]=100000002004087730000.0;
    $126=$sb;
    $127=((($126)+(1))|0);
    $sb=$127;
   }
   $129=$i;
   $130=$psv;
   $131=(($130+6216)|0);
   $132=(($131+($129<<2))|0);
   HEAP32[(($132)>>2)]=0;
   $134=$j;
   $135=((($134)+(1))|0);
   $j=$135;
  }
  $j=0;
  while(1) {
   $138=$j;
   $139=($138|0)<9;
   if (!($139)) {
    break;
   }
   $141=$j;
   $142=$i;
   $143=$psv;
   $144=(($143+6072)|0);
   $145=(($144+((($142)*(36))&-1))|0);
   $146=(($145+($141<<2))|0);
   HEAPF32[(($146)>>2)]=10.0;
   $148=$j;
   $149=((($148)+(1))|0);
   $j=$149;
  }
  $152=$i;
  $153=((($152)+(1))|0);
  $i=$153;
 }
 $155=$psv;
 $156=(($155+6048)|0);
 $157=(($156+4)|0);
 HEAPF32[(($157)>>2)]=0.0;
 $158=$psv;
 $159=(($158+6048)|0);
 $160=(($159)|0);
 HEAPF32[(($160)>>2)]=0.0;
 $161=$gd;
 $162=(($161)|0);
 $163=$sfreq;
 $164=$gfc;
 $165=(($164+21360)|0);
 $166=(($165)|0);
 $167=(($166)|0);
 _init_numline($162,$163,1024,576,22,$167);
 $168=$gd;
 $169=(($168)|0);
 $170=$sfreq;
 $171=(($bval)|0);
 $172=(($bval_width)|0);
 _compute_bark_values($169,$170,1024,$171,$172);
 $i=0;
 while(1) {
  $174=$i;
  $175=$gd;
  $176=(($175)|0);
  $177=(($176+2148)|0);
  $178=((HEAP32[(($177)>>2)])|0);
  $179=($174|0)<($178|0);
  if (!($179)) {
   break;
  }
  $181=$snr_l_a;
  $182=$181;
  $snr=$182;
  $183=$i;
  $184=(($bval+($183<<2))|0);
  $185=(+(HEAPF32[(($184)>>2)]));
  $186=$bvl_a;
  $187=$185>=$186;
  if ($187) {
   $189=$snr_l_b;
   $190=$i;
   $191=(($bval+($190<<2))|0);
   $192=(+(HEAPF32[(($191)>>2)]));
   $193=$bvl_a;
   $194=($192)-($193);
   $195=($189)*($194);
   $196=$bvl_b;
   $197=$bvl_a;
   $198=($196)-($197);
   $199=($195)/($198);
   $200=$snr_l_a;
   $201=$bvl_b;
   $202=$i;
   $203=(($bval+($202<<2))|0);
   $204=(+(HEAPF32[(($203)>>2)]));
   $205=($201)-($204);
   $206=($200)*($205);
   $207=$bvl_b;
   $208=$bvl_a;
   $209=($207)-($208);
   $210=($206)/($209);
   $211=($199)+($210);
   $212=$211;
   $snr=$212;
  }
  $214=$snr;
  $215=($214)/((10.0));
  $216=(+(Math_pow(10.0,(+($215)))));
  $217=$216;
  $218=$i;
  $219=(($norm+($218<<2))|0);
  HEAPF32[(($219)>>2)]=$217;
  $221=$i;
  $222=((($221)+(1))|0);
  $i=$222;
 }
 $224=$gd;
 $225=(($224)|0);
 $226=(($225+2156)|0);
 $227=$gd;
 $228=(($227)|0);
 $229=(($228+1204)|0);
 $230=(($229)|0);
 $231=$gd;
 $232=(($231)|0);
 $233=(($232+2148)|0);
 $234=((HEAP32[(($233)>>2)])|0);
 $235=(($bval)|0);
 $236=(($bval_width)|0);
 $237=(($norm)|0);
 $238=((_init_s3_values($226,$230,$234,$235,$236,$237))|0);
 $i=$238;
 $239=$i;
 $240=($239|0)!=0;
 if ($240) {
  $242=$i;
  $1=$242;
  $952=$1;
  STACKTOP=sp;return (($952)|0);
 }
 $j=0;
 $i=0;
 while(1) {
  $245=$i;
  $246=$gd;
  $247=(($246)|0);
  $248=(($247+2148)|0);
  $249=((HEAP32[(($248)>>2)])|0);
  $250=($245|0)<($249|0);
  if (!($250)) {
   break;
  }
  $x=1.0e+37;
  $k=0;
  while(1) {
   $253=$k;
   $254=$i;
   $255=$gd;
   $256=(($255)|0);
   $257=(($256+1716)|0);
   $258=(($257+($254<<2))|0);
   $259=((HEAP32[(($258)>>2)])|0);
   $260=($253|0)<($259|0);
   if (!($260)) {
    break;
   }
   $262=$sfreq;
   $263=$j;
   $264=(+((($263|0))|0));
   $265=($262)*($264);
   $266=$265;
   $267=($266)/((1024000.0));
   $268=$267;
   $freq=$268;
   $269=$cfg;
   $270=$freq;
   $271=($270)*((1000.0));
   $272=(+(_ATHformula($269,$271)));
   $273=($272)-((20.0));
   $level=$273;
   $274=$level;
   $275=$274;
   $276=((0.1))*($275);
   $277=(+(Math_pow(10.0,(+($276)))));
   $278=$277;
   $level=$278;
   $279=$i;
   $280=$gd;
   $281=(($280)|0);
   $282=(($281+1716)|0);
   $283=(($282+($279<<2))|0);
   $284=((HEAP32[(($283)>>2)])|0);
   $285=(+((($284|0))|0));
   $286=$level;
   $287=($286)*($285);
   $level=$287;
   $288=$x;
   $289=$level;
   $290=$289;
   $291=$288>$290;
   if ($291) {
    $293=$level;
    $294=$293;
    $x=$294;
   }
   $297=$k;
   $298=((($297)+(1))|0);
   $k=$298;
   $299=$j;
   $300=((($299)+(1))|0);
   $j=$300;
  }
  $302=$x;
  $303=$302;
  $304=$i;
  $305=$gfc;
  $306=(($305+85796)|0);
  $307=((HEAP32[(($306)>>2)])|0);
  $308=(($307+212)|0);
  $309=(($308+($304<<2))|0);
  HEAPF32[(($309)>>2)]=$303;
  $310=$i;
  $311=(($bval+($310<<2))|0);
  $312=(+(HEAPF32[(($311)>>2)]));
  $313=$xav;
  $314=($312)/($313);
  $315=$314;
  $316=($315)-((1.0));
  $317=((20.0))*($316);
  $x=$317;
  $318=$x;
  $319=$318>(6.0);
  if ($319) {
   $x=30.0;
  }
  $322=$x;
  $323=$minval_low;
  $324=$323;
  $325=$322<$324;
  if ($325) {
   $327=$minval_low;
   $328=$327;
   $x=$328;
  }
  $330=$cfg;
  $331=(($330+48)|0);
  $332=((HEAP32[(($331)>>2)])|0);
  $333=($332|0)<44000;
  if ($333) {
   $x=30.0;
  }
  $336=$x;
  $337=($336)-((8.0));
  $x=$337;
  $338=$x;
  $339=($338)/((10.0));
  $340=(+(Math_pow(10.0,(+($339)))));
  $341=$i;
  $342=$gd;
  $343=(($342)|0);
  $344=(($343+1716)|0);
  $345=(($344+($341<<2))|0);
  $346=((HEAP32[(($345)>>2)])|0);
  $347=(+((($346|0))|0));
  $348=($340)*($347);
  $349=$348;
  $350=$i;
  $351=$gd;
  $352=(($351)|0);
  $353=(($352+256)|0);
  $354=(($353+($350<<2))|0);
  HEAPF32[(($354)>>2)]=$349;
  $356=$i;
  $357=((($356)+(1))|0);
  $i=$357;
 }
 $359=$gd;
 $360=(($359+2160)|0);
 $361=$sfreq;
 $362=$gfc;
 $363=(($362+21360)|0);
 $364=(($363+92)|0);
 $365=(($364)|0);
 _init_numline($360,$361,256,192,13,$365);
 $366=$gd;
 $367=(($366+2160)|0);
 $368=$sfreq;
 $369=(($bval)|0);
 $370=(($bval_width)|0);
 _compute_bark_values($367,$368,256,$369,$370);
 $j=0;
 $i=0;
 while(1) {
  $372=$i;
  $373=$gd;
  $374=(($373+2160)|0);
  $375=(($374+2148)|0);
  $376=((HEAP32[(($375)>>2)])|0);
  $377=($372|0)<($376|0);
  if (!($377)) {
   break;
  }
  $379=$snr_s_a;
  $380=$379;
  $snr2=$380;
  $381=$i;
  $382=(($bval+($381<<2))|0);
  $383=(+(HEAPF32[(($382)>>2)]));
  $384=$bvl_a;
  $385=$383>=$384;
  if ($385) {
   $387=$snr_s_b;
   $388=$i;
   $389=(($bval+($388<<2))|0);
   $390=(+(HEAPF32[(($389)>>2)]));
   $391=$bvl_a;
   $392=($390)-($391);
   $393=($387)*($392);
   $394=$bvl_b;
   $395=$bvl_a;
   $396=($394)-($395);
   $397=($393)/($396);
   $398=$snr_s_a;
   $399=$bvl_b;
   $400=$i;
   $401=(($bval+($400<<2))|0);
   $402=(+(HEAPF32[(($401)>>2)]));
   $403=($399)-($402);
   $404=($398)*($403);
   $405=$bvl_b;
   $406=$bvl_a;
   $407=($405)-($406);
   $408=($404)/($407);
   $409=($397)+($408);
   $410=$409;
   $snr2=$410;
  }
  $412=$snr2;
  $413=($412)/((10.0));
  $414=(+(Math_pow(10.0,(+($413)))));
  $415=$414;
  $416=$i;
  $417=(($norm+($416<<2))|0);
  HEAPF32[(($417)>>2)]=$415;
  $x1=1.0e+37;
  $k=0;
  while(1) {
   $419=$k;
   $420=$i;
   $421=$gd;
   $422=(($421+2160)|0);
   $423=(($422+1716)|0);
   $424=(($423+($420<<2))|0);
   $425=((HEAP32[(($424)>>2)])|0);
   $426=($419|0)<($425|0);
   if (!($426)) {
    break;
   }
   $428=$sfreq;
   $429=$j;
   $430=(+((($429|0))|0));
   $431=($428)*($430);
   $432=$431;
   $433=($432)/((256000.0));
   $434=$433;
   $freq3=$434;
   $435=$cfg;
   $436=$freq3;
   $437=($436)*((1000.0));
   $438=(+(_ATHformula($435,$437)));
   $439=($438)-((20.0));
   $level4=$439;
   $440=$level4;
   $441=$440;
   $442=((0.1))*($441);
   $443=(+(Math_pow(10.0,(+($442)))));
   $444=$443;
   $level4=$444;
   $445=$i;
   $446=$gd;
   $447=(($446+2160)|0);
   $448=(($447+1716)|0);
   $449=(($448+($445<<2))|0);
   $450=((HEAP32[(($449)>>2)])|0);
   $451=(+((($450|0))|0));
   $452=$level4;
   $453=($452)*($451);
   $level4=$453;
   $454=$x1;
   $455=$level4;
   $456=$455;
   $457=$454>$456;
   if ($457) {
    $459=$level4;
    $460=$459;
    $x1=$460;
   }
   $463=$k;
   $464=((($463)+(1))|0);
   $k=$464;
   $465=$j;
   $466=((($465)+(1))|0);
   $j=$466;
  }
  $468=$x1;
  $469=$468;
  $470=$i;
  $471=$gfc;
  $472=(($471+85796)|0);
  $473=((HEAP32[(($472)>>2)])|0);
  $474=(($473+468)|0);
  $475=(($474+($470<<2))|0);
  HEAPF32[(($475)>>2)]=$469;
  $476=$i;
  $477=(($bval+($476<<2))|0);
  $478=(+(HEAPF32[(($477)>>2)]));
  $479=$xbv;
  $480=($478)/($479);
  $481=$480;
  $482=($481)-((1.0));
  $483=((7.0))*($482);
  $x1=$483;
  $484=$i;
  $485=(($bval+($484<<2))|0);
  $486=(+(HEAPF32[(($485)>>2)]));
  $487=$xbv;
  $488=$486>$487;
  if ($488) {
   $490=$x1;
   $491=((1.0))+($490);
   $492=(+(Math_log($491)));
   $493=($492)*((3.1));
   $494=((1.0))+($493);
   $495=$x1;
   $496=($495)*($494);
   $x1=$496;
  }
  $498=$i;
  $499=(($bval+($498<<2))|0);
  $500=(+(HEAPF32[(($499)>>2)]));
  $501=$xbv;
  $502=$500<$501;
  if ($502) {
   $504=$x1;
   $505=((1.0))-($504);
   $506=(+(Math_log($505)));
   $507=($506)*((2.3));
   $508=((1.0))+($507);
   $509=$x1;
   $510=($509)*($508);
   $x1=$510;
  }
  $512=$x1;
  $513=$512>(6.0);
  if ($513) {
   $x1=30.0;
  }
  $516=$x1;
  $517=$minval_low;
  $518=$517;
  $519=$516<$518;
  if ($519) {
   $521=$minval_low;
   $522=$521;
   $x1=$522;
  }
  $524=$cfg;
  $525=(($524+48)|0);
  $526=((HEAP32[(($525)>>2)])|0);
  $527=($526|0)<44000;
  if ($527) {
   $x1=30.0;
  }
  $530=$x1;
  $531=($530)-((8.0));
  $x1=$531;
  $532=$x1;
  $533=($532)/((10.0));
  $534=(+(Math_pow(10.0,(+($533)))));
  $535=$i;
  $536=$gd;
  $537=(($536+2160)|0);
  $538=(($537+1716)|0);
  $539=(($538+($535<<2))|0);
  $540=((HEAP32[(($539)>>2)])|0);
  $541=(+((($540|0))|0));
  $542=($534)*($541);
  $543=$542;
  $544=$i;
  $545=$gd;
  $546=(($545+2160)|0);
  $547=(($546+256)|0);
  $548=(($547+($544<<2))|0);
  HEAPF32[(($548)>>2)]=$543;
  $550=$i;
  $551=((($550)+(1))|0);
  $i=$551;
 }
 $553=$gd;
 $554=(($553+2160)|0);
 $555=(($554+2156)|0);
 $556=$gd;
 $557=(($556+2160)|0);
 $558=(($557+1204)|0);
 $559=(($558)|0);
 $560=$gd;
 $561=(($560+2160)|0);
 $562=(($561+2148)|0);
 $563=((HEAP32[(($562)>>2)])|0);
 $564=(($bval)|0);
 $565=(($bval_width)|0);
 $566=(($norm)|0);
 $567=((_init_s3_values($555,$559,$563,$564,$565,$566))|0);
 $i=$567;
 $568=$i;
 $569=($568|0)!=0;
 if ($569) {
  $571=$i;
  $1=$571;
  $952=$1;
  STACKTOP=sp;return (($952)|0);
 }
 _init_mask_add_max_values();
 $573=$gfc;
 _init_fft($573);
 $574=$sfreq;
 $575=$574;
 $576=((0.01))*($575);
 $577=($576)/((192.0));
 $578=((-2.302585092994046))/($577);
 $579=(+(Math_exp($578)));
 $580=$579;
 $581=$gd;
 $582=(($581+6496)|0);
 HEAPF32[(($582)>>2)]=$580;
 $msfix=3.5;
 $583=$cfg;
 $584=(($583+80)|0);
 $585=((HEAP32[(($584)>>2)])|0);
 $586=($585|0)!=0;
 if ($586) {
  $msfix=1.0;
 }
 $589=$cfg;
 $590=(($589+176)|0);
 $591=(+(HEAPF32[(($590)>>2)]));
 $592=$591;
 $593=(+(Math_abs((+($592)))));
 $594=$593>(0.0);
 if ($594) {
  $596=$cfg;
  $597=(($596+176)|0);
  $598=(+(HEAPF32[(($597)>>2)]));
  $msfix=$598;
 }
 $600=$msfix;
 $601=$cfg;
 $602=(($601+176)|0);
 HEAPF32[(($602)>>2)]=$600;
 $b=0;
 while(1) {
  $604=$b;
  $605=$gd;
  $606=(($605)|0);
  $607=(($606+2148)|0);
  $608=((HEAP32[(($607)>>2)])|0);
  $609=($604|0)<($608|0);
  if (!($609)) {
   break;
  }
  $611=$b;
  $612=$gd;
  $613=(($612)|0);
  $614=(($613+1204)|0);
  $615=(($614+($611<<3))|0);
  $616=(($615+4)|0);
  $617=((HEAP32[(($616)>>2)])|0);
  $618=$gd;
  $619=(($618)|0);
  $620=(($619+2148)|0);
  $621=((HEAP32[(($620)>>2)])|0);
  $622=((($621)-(1))|0);
  $623=($617|0)>($622|0);
  if ($623) {
   $625=$gd;
   $626=(($625)|0);
   $627=(($626+2148)|0);
   $628=((HEAP32[(($627)>>2)])|0);
   $629=((($628)-(1))|0);
   $630=$b;
   $631=$gd;
   $632=(($631)|0);
   $633=(($632+1204)|0);
   $634=(($633+($630<<3))|0);
   $635=(($634+4)|0);
   HEAP32[(($635)>>2)]=$629;
  }
  $638=$b;
  $639=((($638)+(1))|0);
  $b=$639;
 }
 $641=$cfg;
 $642=(($641+60)|0);
 $643=((HEAP32[(($642)>>2)])|0);
 $644=(+((($643|0))|0));
 $645=((576.0))*($644);
 $646=$sfreq;
 $647=$646;
 $648=($645)/($647);
 $649=((-1.2))*($648);
 $650=(+(Math_pow(10.0,(+($649)))));
 $651=$650;
 $652=$gfc;
 $653=(($652+85796)|0);
 $654=((HEAP32[(($653)>>2)])|0);
 $655=(($654+16)|0);
 HEAPF32[(($655)>>2)]=$651;
 $656=$gfc;
 $657=(($656+85796)|0);
 $658=((HEAP32[(($657)>>2)])|0);
 $659=(($658+8)|0);
 HEAPF32[(($659)>>2)]=0.009999999776482582;
 $660=$gfc;
 $661=(($660+85796)|0);
 $662=((HEAP32[(($661)>>2)])|0);
 $663=(($662+12)|0);
 HEAPF32[(($663)>>2)]=1.0;
 $664=$cfg;
 $665=(($664+192)|0);
 $666=((HEAP32[(($665)>>2)])|0);
 $667=($666|0)!=-1;
 if ($667) {
  $669=$cfg;
  $670=(($669+48)|0);
  $671=((HEAP32[(($670)>>2)])|0);
  $672=(+((($671|0))|0));
  $673=($672)/((1024.0));
  $freq_inc=$673;
  $eql_balance=0.0;
  $freq5=0.0;
  $i=0;
  while(1) {
   $675=$i;
   $676=($675|0)<512;
   if (!($676)) {
    break;
   }
   $678=$freq_inc;
   $679=$freq5;
   $680=($679)+($678);
   $freq5=$680;
   $681=$cfg;
   $682=$freq5;
   $683=(+(_ATHformula($681,$682)));
   $684=($683)/((10.0));
   $685=$684;
   $686=(+(Math_pow(10.0,(+($685)))));
   $687=((1.0))/($686);
   $688=$687;
   $689=$i;
   $690=$gfc;
   $691=(($690+85796)|0);
   $692=((HEAP32[(($691)>>2)])|0);
   $693=(($692+724)|0);
   $694=(($693+($689<<2))|0);
   HEAPF32[(($694)>>2)]=$688;
   $695=$i;
   $696=$gfc;
   $697=(($696+85796)|0);
   $698=((HEAP32[(($697)>>2)])|0);
   $699=(($698+724)|0);
   $700=(($699+($695<<2))|0);
   $701=(+(HEAPF32[(($700)>>2)]));
   $702=$eql_balance;
   $703=($702)+($701);
   $eql_balance=$703;
   $705=$i;
   $706=((($705)+(1))|0);
   $i=$706;
  }
  $708=$eql_balance;
  $709=$708;
  $710=((1.0))/($709);
  $711=$710;
  $eql_balance=$711;
  $i=512;
  while(1) {
   $713=$i;
   $714=((($713)-(1))|0);
   $i=$714;
   $715=($714|0)>=0;
   if (!($715)) {
    break;
   }
   $717=$eql_balance;
   $718=$i;
   $719=$gfc;
   $720=(($719+85796)|0);
   $721=((HEAP32[(($720)>>2)])|0);
   $722=(($721+724)|0);
   $723=(($722+($718<<2))|0);
   $724=(+(HEAPF32[(($723)>>2)]));
   $725=($724)*($717);
   HEAPF32[(($723)>>2)]=$725;
  }
 }
 $j=0;
 $b=0;
 while(1) {
  $729=$b;
  $730=$gd;
  $731=(($730+2160)|0);
  $732=(($731+2148)|0);
  $733=((HEAP32[(($732)>>2)])|0);
  $734=($729|0)<($733|0);
  if (!($734)) {
   break;
  }
  $i=0;
  while(1) {
   $737=$i;
   $738=$b;
   $739=$gd;
   $740=(($739+2160)|0);
   $741=(($740+1716)|0);
   $742=(($741+($738<<2))|0);
   $743=((HEAP32[(($742)>>2)])|0);
   $744=($737|0)<($743|0);
   if (!($744)) {
    break;
   }
   $746=$j;
   $747=((($746)+(1))|0);
   $j=$747;
   $749=$i;
   $750=((($749)+(1))|0);
   $i=$750;
  }
  $753=$b;
  $754=((($753)+(1))|0);
  $b=$754;
 }
 $j=0;
 $b=0;
 while(1) {
  $757=$b;
  $758=$gd;
  $759=(($758)|0);
  $760=(($759+2148)|0);
  $761=((HEAP32[(($760)>>2)])|0);
  $762=($757|0)<($761|0);
  if (!($762)) {
   break;
  }
  $i=0;
  while(1) {
   $765=$i;
   $766=$b;
   $767=$gd;
   $768=(($767)|0);
   $769=(($768+1716)|0);
   $770=(($769+($766<<2))|0);
   $771=((HEAP32[(($770)>>2)])|0);
   $772=($765|0)<($771|0);
   if (!($772)) {
    break;
   }
   $774=$j;
   $775=((($774)+(1))|0);
   $j=$775;
   $777=$i;
   $778=((($777)+(1))|0);
   $i=$778;
  }
  $781=$b;
  $782=((($781)+(1))|0);
  $b=$782;
 }
 $784=$2;
 $785=(($784+264)|0);
 $786=(+(HEAPF32[(($785)>>2)]));
 $x6=$786;
 $787=$2;
 $788=(($787+268)|0);
 $789=(+(HEAPF32[(($788)>>2)]));
 $y=$789;
 $790=$x6;
 $791=$790<(0.0);
 if ($791) {
  $x6=4.400000095367432;
 }
 $794=$y;
 $795=$794<(0.0);
 if ($795) {
  $y=25.0;
 }
 $798=$x6;
 $799=$gd;
 $800=(($799+6480)|0);
 $801=(($800+8)|0);
 HEAPF32[(($801)>>2)]=$798;
 $802=$gd;
 $803=(($802+6480)|0);
 $804=(($803+4)|0);
 HEAPF32[(($804)>>2)]=$798;
 $805=$gd;
 $806=(($805+6480)|0);
 $807=(($806)|0);
 HEAPF32[(($807)>>2)]=$798;
 $808=$y;
 $809=$gd;
 $810=(($809+6480)|0);
 $811=(($810+12)|0);
 HEAPF32[(($811)>>2)]=$808;
 $sk_s=-10.0;
 $sk_l=-4.699999809265137;
 $812=$2;
 $813=(($812+164)|0);
 $814=((HEAP32[(($813)>>2)])|0);
 $815=($814|0)<4;
 if ($815) {
  $817=(+(HEAPF32[((9504)>>2)]));
  $sk_s=$817;
  $sk_l=$817;
 } else {
  $819=$2;
  $820=(($819+164)|0);
  $821=((HEAP32[(($820)>>2)])|0);
  $822=((9504+($821<<2))|0);
  $823=(+(HEAPF32[(($822)>>2)]));
  $824=$2;
  $825=(($824+160)|0);
  $826=(+(HEAPF32[(($825)>>2)]));
  $827=$2;
  $828=(($827+164)|0);
  $829=((HEAP32[(($828)>>2)])|0);
  $830=((9504+($829<<2))|0);
  $831=(+(HEAPF32[(($830)>>2)]));
  $832=$2;
  $833=(($832+164)|0);
  $834=((HEAP32[(($833)>>2)])|0);
  $835=((($834)+(1))|0);
  $836=((9504+($835<<2))|0);
  $837=(+(HEAPF32[(($836)>>2)]));
  $838=($831)-($837);
  $839=($826)*($838);
  $840=($823)+($839);
  $sk_s=$840;
  $sk_l=$840;
 }
 $b=0;
 while(1) {
  $843=$b;
  $844=$gd;
  $845=(($844+2160)|0);
  $846=(($845+2148)|0);
  $847=((HEAP32[(($846)>>2)])|0);
  $848=($843|0)<($847|0);
  if (!($848)) {
   break;
  }
  $850=$gd;
  $851=(($850+2160)|0);
  $852=(($851+2148)|0);
  $853=((HEAP32[(($852)>>2)])|0);
  $854=$b;
  $855=((($853)-($854))|0);
  $856=(+((($855|0))|0));
  $857=$gd;
  $858=(($857+2160)|0);
  $859=(($858+2148)|0);
  $860=((HEAP32[(($859)>>2)])|0);
  $861=(+((($860|0))|0));
  $862=($856)/($861);
  $m=$862;
  $863=$sk_s;
  $864=$m;
  $865=($863)*($864);
  $866=($865)*((0.10000000149011612));
  $867=(+(Math_pow(10.0,(+($866)))));
  $868=$b;
  $869=$gd;
  $870=(($869+2160)|0);
  $871=(($870)|0);
  $872=(($871+($868<<2))|0);
  HEAPF32[(($872)>>2)]=$867;
  $874=$b;
  $875=((($874)+(1))|0);
  $b=$875;
 }
 while(1) {
  $878=$b;
  $879=($878|0)<64;
  if (!($879)) {
   break;
  }
  $881=$b;
  $882=$gd;
  $883=(($882+2160)|0);
  $884=(($883)|0);
  $885=(($884+($881<<2))|0);
  HEAPF32[(($885)>>2)]=1.0;
  $887=$b;
  $888=((($887)+(1))|0);
  $b=$888;
 }
 $b=0;
 while(1) {
  $891=$b;
  $892=$gd;
  $893=(($892)|0);
  $894=(($893+2148)|0);
  $895=((HEAP32[(($894)>>2)])|0);
  $896=($891|0)<($895|0);
  if (!($896)) {
   break;
  }
  $898=$gd;
  $899=(($898)|0);
  $900=(($899+2148)|0);
  $901=((HEAP32[(($900)>>2)])|0);
  $902=$b;
  $903=((($901)-($902))|0);
  $904=(+((($903|0))|0));
  $905=$gd;
  $906=(($905)|0);
  $907=(($906+2148)|0);
  $908=((HEAP32[(($907)>>2)])|0);
  $909=(+((($908|0))|0));
  $910=($904)/($909);
  $m7=$910;
  $911=$sk_l;
  $912=$m7;
  $913=($911)*($912);
  $914=($913)*((0.10000000149011612));
  $915=(+(Math_pow(10.0,(+($914)))));
  $916=$b;
  $917=$gd;
  $918=(($917)|0);
  $919=(($918)|0);
  $920=(($919+($916<<2))|0);
  HEAPF32[(($920)>>2)]=$915;
  $922=$b;
  $923=((($922)+(1))|0);
  $b=$923;
 }
 while(1) {
  $926=$b;
  $927=($926|0)<64;
  if (!($927)) {
   break;
  }
  $929=$b;
  $930=$gd;
  $931=(($930)|0);
  $932=(($931)|0);
  $933=(($932+($929<<2))|0);
  HEAPF32[(($933)>>2)]=1.0;
  $935=$b;
  $936=((($935)+(1))|0);
  $b=$936;
 }
 $938=$gd;
 $939=(($938+4320)|0);
 $940=$939;
 $941=$gd;
 $942=(($941)|0);
 $943=$942;
 (_memcpy((($940)|0), (($943)|0), 2160)|0);
 $944=$gd;
 $945=(($944+4320)|0);
 $946=$sfreq;
 $947=$gfc;
 $948=(($947+21360)|0);
 $949=(($948+92)|0);
 $950=(($949)|0);
 _init_numline($945,$946,1024,192,13,$950);
 $1=0;
 $952=$1;
 STACKTOP=sp;return (($952)|0);
}


function _vbrpsy_attack_detection($gfc,$buffer,$gr_out,$masking_ratio,$masking_MS_ratio,$energy,$sub_short_factor,$ns_attacks,$uselongblock){
 $gfc=($gfc)|0;
 $buffer=($buffer)|0;
 $gr_out=($gr_out)|0;
 $masking_ratio=($masking_ratio)|0;
 $masking_MS_ratio=($masking_MS_ratio)|0;
 $energy=($energy)|0;
 $sub_short_factor=($sub_short_factor)|0;
 $ns_attacks=($ns_attacks)|0;
 $uselongblock=($uselongblock)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$ns_hpfsmpl=0,$cfg=0,$psv=0,$plt=0,$n_chn_out=0,$n_chn_psy=0,$chn=0,$i=0,$j=0,$firbuf=0,$sum1=.0;
 var $sum2=.0,$attack_intensity=0,$en_subshort=0,$en_short=0,$pf=0,$ns_uselongblock=0,$l=.0,$r=.0,$pfe=0,$p=.0,$enn=.0,$factor=.0,$x=.0,$x1=.0,$u=.0,$v=.0,$m=.0,$10=0,$11=0,$12=0;
 var $13=0,$14=0,$15=0,$16=0,$17=0,$19=0,$20=0,$21=0,$24=0,$25=0,$26=0,$27=0,$28=0,$29=0,$30=0,$31=0,$34=0,$36=0,$37=0,$38=0;
 var $39=0,$41=0,$42=0,$43=0,$45=0,$46=0,$47=0,$48=0,$49=0,$51=0,$52=0,$54=0,$55=0,$56=0,$57=0,$58=.0,$60=0,$61=0,$63=0,$64=0;
 var $65=.0,$66=0,$67=0,$68=0,$69=0,$70=0,$71=.0,$72=0,$73=0,$74=0,$75=0,$76=0,$77=0,$78=.0,$79=.0,$80=.0,$81=.0,$82=.0,$83=0,$84=0;
 var $85=0,$86=.0,$87=0,$88=0,$89=0,$90=0,$91=0,$92=0,$93=.0,$94=0,$95=0,$96=0,$97=0,$98=0,$99=0,$100=0,$101=.0,$102=.0,$103=.0,$104=.0;
 var $105=.0,$107=0,$108=0,$110=.0,$111=.0,$112=.0,$113=0,$114=0,$115=0,$116=0,$118=0,$119=0,$121=0,$122=0,$123=0,$124=0,$125=0,$126=0,$127=0,$128=0;
 var $129=0,$130=0,$131=0,$132=0,$133=0,$134=0,$135=0,$136=0,$137=0,$138=0,$139=0,$140=0,$141=0,$142=0,$143=0,$144=0,$145=0,$146=0,$148=0,$149=0;
 var $150=0,$151=0,$152=0,$153=0,$154=0,$155=0,$156=0,$157=0,$158=0,$159=0,$160=0,$161=0,$162=0,$163=0,$164=0,$165=0,$166=0,$167=0,$168=0,$169=0;
 var $170=0,$171=0,$172=0,$173=0,$176=0,$177=0,$180=0,$181=0,$182=0,$184=0,$185=0,$186=0,$187=0,$188=0,$189=0,$190=0,$193=0,$194=0,$196=0,$197=0;
 var $198=0,$199=.0,$200=0,$201=0,$202=0,$203=.0,$204=.0,$205=.0,$206=.0,$207=0,$208=0,$209=0,$210=.0,$211=.0,$212=.0,$213=0,$214=0,$215=0,$217=0,$218=0;
 var $219=0,$220=0,$224=0,$225=0,$227=0,$228=0,$229=0,$230=0,$231=0,$232=0,$233=0,$234=.0,$235=0,$236=0,$237=0,$238=0,$239=.0,$240=0,$241=0,$242=0;
 var $243=0,$244=0,$245=0,$246=0,$247=.0,$248=.0,$249=0,$250=0,$251=0,$252=0,$253=.0,$254=0,$255=.0,$256=.0,$258=0,$259=0,$262=0,$263=0,$265=0,$266=0;
 var $268=0,$269=0,$270=0,$272=.0,$273=.0,$274=0,$275=.0,$276=.0,$277=.0,$278=0,$280=0,$281=.0,$282=.0,$283=.0,$284=.0,$287=0,$288=0,$290=.0,$291=0,$292=0;
 var $293=0,$294=0,$295=0,$296=0,$297=0,$298=0,$299=0,$300=.0,$301=0,$302=0,$303=0,$304=0,$305=.0,$306=.0,$307=.0,$308=0,$309=0,$310=0,$311=0,$312=.0;
 var $313=0,$315=.0,$316=0,$317=0,$318=0,$319=0,$320=.0,$321=.0,$323=0,$324=0,$325=0,$326=0,$327=.0,$328=.0,$329=.0,$330=0,$332=0,$333=0,$334=0,$335=0;
 var $336=.0,$337=.0,$338=.0,$339=.0,$343=.0,$344=0,$345=0,$346=0,$348=0,$349=0,$352=0,$353=0,$355=0,$356=0,$357=0,$358=0,$359=.0,$360=0,$361=0,$362=0;
 var $363=0,$364=.0,$365=.0,$366=0,$367=0,$368=0,$369=0,$370=.0,$371=.0,$372=0,$373=0,$374=0,$375=0,$376=.0,$377=.0,$378=.0,$379=0,$381=.0,$382=.0,$383=0;
 var $384=0,$385=0,$386=0,$387=.0,$388=.0,$389=.0,$390=0,$392=.0,$393=.0,$396=.0,$397=0,$398=0,$399=0,$400=0,$401=0,$403=0,$404=0,$406=0,$407=0,$409=0;
 var $410=.0,$412=0,$413=0,$415=.0,$416=0,$417=0,$418=.0,$419=0,$421=0,$422=0,$423=.0,$426=0,$427=0,$429=0,$430=0,$431=0,$432=0,$433=.0,$434=0,$435=0;
 var $436=0,$437=0,$438=0,$439=0,$440=.0,$441=.0,$442=0,$443=0,$444=0,$445=0,$447=0,$448=0,$449=0,$450=0,$451=0,$452=0,$453=.0,$455=0,$456=0,$458=0;
 var $459=0,$460=0,$461=0,$462=0,$463=0,$464=0,$465=0,$467=0,$468=0,$469=.0,$470=.0,$471=0,$473=0,$474=0,$475=0,$476=0,$477=0,$478=0,$479=0,$480=0;
 var $481=0,$485=0,$486=0,$489=0,$490=0,$492=0,$493=0,$494=0,$495=.0,$496=0,$497=0,$498=.0,$499=.0,$500=.0,$501=0,$503=.0,$505=.0,$507=.0,$508=.0,$509=0;
 var $511=.0,$512=.0,$513=.0,$514=0,$516=.0,$517=.0,$518=.0,$519=0,$521=0,$522=0,$524=0,$525=0,$526=0,$527=0,$528=0,$529=0,$530=0,$531=0,$532=0,$533=0;
 var $534=0,$535=0,$537=0,$538=0,$539=0,$540=0,$542=0,$543=0,$544=0,$545=0,$546=0,$550=0,$551=0,$553=0,$554=0,$555=0,$556=0,$557=0,$558=0,$559=0;
 var $560=0,$561=0,$562=0,$563=0,$565=0,$566=0,$567=0,$568=0,$570=0,$571=0,$572=0,$573=0,$574=0,$575=0,$577=0,$578=0,$579=0,$580=0,$581=0,$582=0;
 var $583=0,$584=0,$585=0,$586=0,$587=0,$588=0,$589=0,$590=0,$591=0,$592=0,$593=0,$594=0,$595=0,$596=0,$597=0,$598=0,$599=0,$600=0,$602=0,$603=0;
 var $604=0,$605=0,$606=0,$607=0,$609=0,$610=0,$611=0,$612=0,$613=0,$614=0,$616=0,$617=0,$618=0,$619=0,$621=0,$622=0,$623=0,$624=0,$625=0,$626=0;
 var $628=0,$629=0,$630=0,$631=0,$632=0,$633=0,$635=0,$636=0,$637=0,$638=0,$640=0,$641=0,$642=0,$643=0,$644=0,$645=0,$647=0,$648=0,$649=0,$650=0;
 var $651=0,$652=0,$654=0,$655=0,$656=0,$657=0,$660=0,$661=0,$663=0,$664=0,$665=0,$666=0,$668=0,$669=0,$671=0,$672=0,$673=0,$674=0,$677=0,$678=0;
 var $679=0,$680=0,$681=.0,$682=0,$683=0,$684=0,$686=0,$687=0,label=0;
 var sp=0;sp=STACKTOP;STACKTOP=(STACKTOP+4720)|0;









 $ns_hpfsmpl=((sp)|0);











 $attack_intensity=(((sp)+(4608))|0);
 $en_subshort=(((sp)+(4656))|0);
 $en_short=(((sp)+(4704))|0);













 $1=$gfc;
 $2=$buffer;
 $3=$gr_out;
 $4=$masking_ratio;
 $5=$masking_MS_ratio;
 $6=$energy;
 $7=$sub_short_factor;
 $8=$ns_attacks;
 $9=$uselongblock;
 $10=$1;
 $11=(($10+16)|0);
 $cfg=$11;
 $12=$1;
 $13=(($12+21564)|0);
 $psv=$13;
 $14=$cfg;
 $15=(($14+124)|0);
 $16=((HEAP32[(($15)>>2)])|0);
 $17=($16|0)!=0;
 if ($17) {
  $19=$1;
  $20=(($19+85804)|0);
  $21=((HEAP32[(($20)>>2)])|0);
  $24=$21;
 } else {
  $24=0;
 }

 $plt=$24;
 $25=$cfg;
 $26=(($25+56)|0);
 $27=((HEAP32[(($26)>>2)])|0);
 $n_chn_out=$27;
 $28=$cfg;
 $29=(($28+164)|0);
 $30=((HEAP32[(($29)>>2)])|0);
 $31=($30|0)==1;
 if ($31) {
  $36=4;
 } else {
  $34=$n_chn_out;
  $36=$34;
 }

 $n_chn_psy=$36;
 $37=(($ns_hpfsmpl)|0);
 $38=(($37)|0);
 $39=$38;
 _memset((((($39)|0))|0), ((((0)|0))|0), ((((4608)|0))|0))|0;
 $chn=0;
 while(1) {
  $41=$chn;
  $42=$n_chn_out;
  $43=($41|0)<($42|0);
  if (!($43)) {
   break;
  }
  $45=$chn;
  $46=$2;
  $47=(($46+($45<<2))|0);
  $48=((HEAP32[(($47)>>2)])|0);
  $49=(($48+1588)|0);
  $firbuf=$49;
  $i=0;
  while(1) {
   $51=$i;
   $52=($51|0)<576;
   if (!($52)) {
    break;
   }
   $54=$i;
   $55=((($54)+(10))|0);
   $56=$firbuf;
   $57=(($56+($55<<2))|0);
   $58=(+(HEAPF32[(($57)>>2)]));
   $sum1=$58;
   $sum2=0.0;
   $j=0;
   while(1) {
    $60=$j;
    $61=($60|0)<9;
    if (!($61)) {
     break;
    }
    $63=$j;
    $64=((624+($63<<2))|0);
    $65=(+(HEAPF32[(($64)>>2)]));
    $66=$i;
    $67=$j;
    $68=((($66)+($67))|0);
    $69=$firbuf;
    $70=(($69+($68<<2))|0);
    $71=(+(HEAPF32[(($70)>>2)]));
    $72=$i;
    $73=((($72)+(21))|0);
    $74=$j;
    $75=((($73)-($74))|0);
    $76=$firbuf;
    $77=(($76+($75<<2))|0);
    $78=(+(HEAPF32[(($77)>>2)]));
    $79=($71)+($78);
    $80=($65)*($79);
    $81=$sum1;
    $82=($81)+($80);
    $sum1=$82;
    $83=$j;
    $84=((($83)+(1))|0);
    $85=((624+($84<<2))|0);
    $86=(+(HEAPF32[(($85)>>2)]));
    $87=$i;
    $88=$j;
    $89=((($87)+($88))|0);
    $90=((($89)+(1))|0);
    $91=$firbuf;
    $92=(($91+($90<<2))|0);
    $93=(+(HEAPF32[(($92)>>2)]));
    $94=$i;
    $95=((($94)+(21))|0);
    $96=$j;
    $97=((($95)-($96))|0);
    $98=((($97)-(1))|0);
    $99=$firbuf;
    $100=(($99+($98<<2))|0);
    $101=(+(HEAPF32[(($100)>>2)]));
    $102=($93)+($101);
    $103=($86)*($102);
    $104=$sum2;
    $105=($104)+($103);
    $sum2=$105;
    $107=$j;
    $108=((($107)+(2))|0);
    $j=$108;
   }
   $110=$sum1;
   $111=$sum2;
   $112=($110)+($111);
   $113=$i;
   $114=$chn;
   $115=(($ns_hpfsmpl+((($114)*(2304))&-1))|0);
   $116=(($115+($113<<2))|0);
   HEAPF32[(($116)>>2)]=$112;
   $118=$i;
   $119=((($118)+(1))|0);
   $i=$119;
  }
  $121=$chn;
  $122=$3;
  $123=$4;
  $124=(($123+((($122)*(976))&-1))|0);
  $125=(($124+((($121)*(488))&-1))|0);
  $126=(($125+244)|0);
  $127=$chn;
  $128=$psv;
  $129=(($128+5072)|0);
  $130=(($129+((($127)*(244))&-1))|0);
  $131=$126;
  $132=$130;
  (_memcpy((($131)|0), (($132)|0), 244)|0);
  $133=$chn;
  $134=$3;
  $135=$4;
  $136=(($135+((($134)*(976))&-1))|0);
  $137=(($136+((($133)*(488))&-1))|0);
  $138=(($137)|0);
  $139=$chn;
  $140=$psv;
  $141=(($140+4096)|0);
  $142=(($141+((($139)*(244))&-1))|0);
  $143=$138;
  $144=$142;
  (_memcpy((($143)|0), (($144)|0), 244)|0);
  $145=$n_chn_psy;
  $146=($145|0)>2;
  if ($146) {
   $148=$chn;
   $149=$3;
   $150=$5;
   $151=(($150+((($149)*(976))&-1))|0);
   $152=(($151+((($148)*(488))&-1))|0);
   $153=(($152+244)|0);
   $154=$chn;
   $155=((($154)+(2))|0);
   $156=$psv;
   $157=(($156+5072)|0);
   $158=(($157+((($155)*(244))&-1))|0);
   $159=$153;
   $160=$158;
   (_memcpy((($159)|0), (($160)|0), 244)|0);
   $161=$chn;
   $162=$3;
   $163=$5;
   $164=(($163+((($162)*(976))&-1))|0);
   $165=(($164+((($161)*(488))&-1))|0);
   $166=(($165)|0);
   $167=$chn;
   $168=((($167)+(2))|0);
   $169=$psv;
   $170=(($169+4096)|0);
   $171=(($170+((($168)*(244))&-1))|0);
   $172=$166;
   $173=$171;
   (_memcpy((($172)|0), (($173)|0), 244)|0);
  }
  $176=$chn;
  $177=((($176)+(1))|0);
  $chn=$177;
 }
 $chn=0;
 while(1) {
  $180=$chn;
  $181=$n_chn_psy;
  $182=($180|0)<($181|0);
  if (!($182)) {
   break;
  }
  $184=$en_short;
  _memset((((($184)|0))|0), ((((0)|0))|0), ((((16)|0))|0))|0;
  $185=$chn;
  $186=$185&1;
  $187=(($ns_hpfsmpl+((($186)*(2304))&-1))|0);
  $188=(($187)|0);
  $pf=$188;
  $ns_uselongblock=1;
  $189=$chn;
  $190=($189|0)==2;
  if ($190) {
   $i=0;
   $j=576;
   while(1) {
    $193=$j;
    $194=($193|0)>0;
    if (!($194)) {
     break;
    }
    $196=$i;
    $197=(($ns_hpfsmpl)|0);
    $198=(($197+($196<<2))|0);
    $199=(+(HEAPF32[(($198)>>2)]));
    $l=$199;
    $200=$i;
    $201=(($ns_hpfsmpl+2304)|0);
    $202=(($201+($200<<2))|0);
    $203=(+(HEAPF32[(($202)>>2)]));
    $r=$203;
    $204=$l;
    $205=$r;
    $206=($204)+($205);
    $207=$i;
    $208=(($ns_hpfsmpl)|0);
    $209=(($208+($207<<2))|0);
    HEAPF32[(($209)>>2)]=$206;
    $210=$l;
    $211=$r;
    $212=($210)-($211);
    $213=$i;
    $214=(($ns_hpfsmpl+2304)|0);
    $215=(($214+($213<<2))|0);
    HEAPF32[(($215)>>2)]=$212;
    $217=$i;
    $218=((($217)+(1))|0);
    $i=$218;
    $219=$j;
    $220=((($219)-(1))|0);
    $j=$220;
   }
  }
  $i=0;
  while(1) {
   $224=$i;
   $225=($224|0)<3;
   if (!($225)) {
    break;
   }
   $227=$i;
   $228=((($227)+(6))|0);
   $229=$chn;
   $230=$psv;
   $231=(($230+6072)|0);
   $232=(($231+((($229)*(36))&-1))|0);
   $233=(($232+($228<<2))|0);
   $234=(+(HEAPF32[(($233)>>2)]));
   $235=$i;
   $236=(($en_subshort+($235<<2))|0);
   HEAPF32[(($236)>>2)]=$234;
   $237=$i;
   $238=(($en_subshort+($237<<2))|0);
   $239=(+(HEAPF32[(($238)>>2)]));
   $240=$i;
   $241=((($240)+(4))|0);
   $242=$chn;
   $243=$psv;
   $244=(($243+6072)|0);
   $245=(($244+((($242)*(36))&-1))|0);
   $246=(($245+($241<<2))|0);
   $247=(+(HEAPF32[(($246)>>2)]));
   $248=($239)/($247);
   $249=$i;
   $250=(($attack_intensity+($249<<2))|0);
   HEAPF32[(($250)>>2)]=$248;
   $251=$i;
   $252=(($en_subshort+($251<<2))|0);
   $253=(+(HEAPF32[(($252)>>2)]));
   $254=(($en_short)|0);
   $255=(+(HEAPF32[(($254)>>2)]));
   $256=($255)+($253);
   HEAPF32[(($254)>>2)]=$256;
   $258=$i;
   $259=((($258)+(1))|0);
   $i=$259;
  }
  $i=0;
  while(1) {
   $262=$i;
   $263=($262|0)<9;
   if (!($263)) {
    break;
   }
   $265=$pf;
   $266=(($265+256)|0);
   $pfe=$266;
   $p=1.0;
   while(1) {
    $268=$pf;
    $269=$pfe;
    $270=($268>>>0)<($269>>>0);
    if (!($270)) {
     break;
    }
    $272=$p;
    $273=$272;
    $274=$pf;
    $275=(+(HEAPF32[(($274)>>2)]));
    $276=$275;
    $277=(+(Math_abs((+($276)))));
    $278=$273<$277;
    if ($278) {
     $280=$pf;
     $281=(+(HEAPF32[(($280)>>2)]));
     $282=$281;
     $283=(+(Math_abs((+($282)))));
     $284=$283;
     $p=$284;
    }
    $287=$pf;
    $288=(($287+4)|0);
    $pf=$288;
   }
   $290=$p;
   $291=$i;
   $292=((($291)+(3))|0);
   $293=(($en_subshort+($292<<2))|0);
   HEAPF32[(($293)>>2)]=$290;
   $294=$i;
   $295=$chn;
   $296=$psv;
   $297=(($296+6072)|0);
   $298=(($297+((($295)*(36))&-1))|0);
   $299=(($298+($294<<2))|0);
   HEAPF32[(($299)>>2)]=$290;
   $300=$p;
   $301=$i;
   $302=(((($301|0))/(3))&-1);
   $303=((($302)+(1))|0);
   $304=(($en_short+($303<<2))|0);
   $305=(+(HEAPF32[(($304)>>2)]));
   $306=($305)+($300);
   HEAPF32[(($304)>>2)]=$306;
   $307=$p;
   $308=$i;
   $309=((($308)+(3))|0);
   $310=((($309)-(2))|0);
   $311=(($en_subshort+($310<<2))|0);
   $312=(+(HEAPF32[(($311)>>2)]));
   $313=$307>$312;
   if ($313) {
    $315=$p;
    $316=$i;
    $317=((($316)+(3))|0);
    $318=((($317)-(2))|0);
    $319=(($en_subshort+($318<<2))|0);
    $320=(+(HEAPF32[(($319)>>2)]));
    $321=($315)/($320);
    $p=$321;
   } else {
    $323=$i;
    $324=((($323)+(3))|0);
    $325=((($324)-(2))|0);
    $326=(($en_subshort+($325<<2))|0);
    $327=(+(HEAPF32[(($326)>>2)]));
    $328=$p;
    $329=($328)*((10.0));
    $330=$327>$329;
    if ($330) {
     $332=$i;
     $333=((($332)+(3))|0);
     $334=((($333)-(2))|0);
     $335=(($en_subshort+($334<<2))|0);
     $336=(+(HEAPF32[(($335)>>2)]));
     $337=$p;
     $338=($337)*((10.0));
     $339=($336)/($338);
     $p=$339;
    } else {
     $p=0.0;
    }
   }
   $343=$p;
   $344=$i;
   $345=((($344)+(3))|0);
   $346=(($attack_intensity+($345<<2))|0);
   HEAPF32[(($346)>>2)]=$343;
   $348=$i;
   $349=((($348)+(1))|0);
   $i=$349;
  }
  $i=0;
  while(1) {
   $352=$i;
   $353=($352|0)<3;
   if (!($353)) {
    break;
   }
   $355=$i;
   $356=((($355)*(3))&-1);
   $357=((($356)+(3))|0);
   $358=(($en_subshort+($357<<2))|0);
   $359=(+(HEAPF32[(($358)>>2)]));
   $360=$i;
   $361=((($360)*(3))&-1);
   $362=((($361)+(4))|0);
   $363=(($en_subshort+($362<<2))|0);
   $364=(+(HEAPF32[(($363)>>2)]));
   $365=($359)+($364);
   $366=$i;
   $367=((($366)*(3))&-1);
   $368=((($367)+(5))|0);
   $369=(($en_subshort+($368<<2))|0);
   $370=(+(HEAPF32[(($369)>>2)]));
   $371=($365)+($370);
   $enn=$371;
   $factor=1.0;
   $372=$i;
   $373=((($372)*(3))&-1);
   $374=((($373)+(5))|0);
   $375=(($en_subshort+($374<<2))|0);
   $376=(+(HEAPF32[(($375)>>2)]));
   $377=($376)*((6.0));
   $378=$enn;
   $379=$377<$378;
   if ($379) {
    $381=$factor;
    $382=($381)*((0.5));
    $factor=$382;
    $383=$i;
    $384=((($383)*(3))&-1);
    $385=((($384)+(4))|0);
    $386=(($en_subshort+($385<<2))|0);
    $387=(+(HEAPF32[(($386)>>2)]));
    $388=($387)*((6.0));
    $389=$enn;
    $390=$388<$389;
    if ($390) {
     $392=$factor;
     $393=($392)*((0.5));
     $factor=$393;
    }
   }
   $396=$factor;
   $397=$i;
   $398=$chn;
   $399=$7;
   $400=(($399+((($398)*(12))&-1))|0);
   $401=(($400+($397<<2))|0);
   HEAPF32[(($401)>>2)]=$396;
   $403=$i;
   $404=((($403)+(1))|0);
   $i=$404;
  }
  $406=$plt;
  $407=($406|0)!=0;
  if ($407) {
   $409=(($attack_intensity)|0);
   $410=(+(HEAPF32[(($409)>>2)]));
   $x=$410;
   $i=1;
   while(1) {
    $412=$i;
    $413=($412|0)<12;
    if (!($413)) {
     break;
    }
    $415=$x;
    $416=$i;
    $417=(($attack_intensity+($416<<2))|0);
    $418=(+(HEAPF32[(($417)>>2)]));
    $419=$415<$418;
    if ($419) {
     $421=$i;
     $422=(($attack_intensity+($421<<2))|0);
     $423=(+(HEAPF32[(($422)>>2)]));
     $x=$423;
    }
    $426=$i;
    $427=((($426)+(1))|0);
    $i=$427;
   }
   $429=$chn;
   $430=$plt;
   $431=(($430+197112)|0);
   $432=(($431+($429<<3))|0);
   $433=(+(HEAPF64[(($432)>>3)]));
   $434=$chn;
   $435=$3;
   $436=$plt;
   $437=(($436+197144)|0);
   $438=(($437+($435<<5))|0);
   $439=(($438+($434<<3))|0);
   HEAPF64[(($439)>>3)]=$433;
   $440=$x;
   $441=$440;
   $442=$chn;
   $443=$plt;
   $444=(($443+197112)|0);
   $445=(($444+($442<<3))|0);
   HEAPF64[(($445)>>3)]=$441;
  }
  $447=$chn;
  $448=$1;
  $449=(($448+85800)|0);
  $450=((HEAP32[(($449)>>2)])|0);
  $451=(($450+6480)|0);
  $452=(($451+($447<<2))|0);
  $453=(+(HEAPF32[(($452)>>2)]));
  $x1=$453;
  $i=0;
  while(1) {
   $455=$i;
   $456=($455|0)<12;
   if (!($456)) {
    break;
   }
   $458=$i;
   $459=(((($458|0))/(3))&-1);
   $460=$chn;
   $461=$8;
   $462=(($461+($460<<4))|0);
   $463=(($462+($459<<2))|0);
   $464=((HEAP32[(($463)>>2)])|0);
   $465=($464|0)==0;
   if ($465) {
    $467=$i;
    $468=(($attack_intensity+($467<<2))|0);
    $469=(+(HEAPF32[(($468)>>2)]));
    $470=$x1;
    $471=$469>$470;
    if ($471) {
     $473=$i;
     $474=(((($473|0))%(3))&-1);
     $475=((($474)+(1))|0);
     $476=$i;
     $477=(((($476|0))/(3))&-1);
     $478=$chn;
     $479=$8;
     $480=(($479+($478<<4))|0);
     $481=(($480+($477<<2))|0);
     HEAP32[(($481)>>2)]=$475;
    }
   }
   $485=$i;
   $486=((($485)+(1))|0);
   $i=$486;
  }
  $i=1;
  while(1) {
   $489=$i;
   $490=($489|0)<4;
   if (!($490)) {
    break;
   }
   $492=$i;
   $493=((($492)-(1))|0);
   $494=(($en_short+($493<<2))|0);
   $495=(+(HEAPF32[(($494)>>2)]));
   $u=$495;
   $496=$i;
   $497=(($en_short+($496<<2))|0);
   $498=(+(HEAPF32[(($497)>>2)]));
   $v=$498;
   $499=$u;
   $500=$v;
   $501=$499>$500;
   if ($501) {
    $503=$u;
    $507=$503;
   } else {
    $505=$v;
    $507=$505;
   }

   $m=$507;
   $508=$m;
   $509=$508<(40000.0);
   if ($509) {
    $511=$u;
    $512=$v;
    $513=((1.7000000476837158))*($512);
    $514=$511<$513;
    do {
     if ($514) {
      $516=$v;
      $517=$u;
      $518=((1.7000000476837158))*($517);
      $519=$516<$518;
      if (!($519)) {
       break;
      }
      $521=$i;
      $522=($521|0)==1;
      do {
       if ($522) {
        $524=$chn;
        $525=$8;
        $526=(($525+($524<<4))|0);
        $527=(($526)|0);
        $528=((HEAP32[(($527)>>2)])|0);
        $529=$i;
        $530=$chn;
        $531=$8;
        $532=(($531+($530<<4))|0);
        $533=(($532+($529<<2))|0);
        $534=((HEAP32[(($533)>>2)])|0);
        $535=($528|0)<=($534|0);
        if (!($535)) {
         break;
        }
        $537=$chn;
        $538=$8;
        $539=(($538+($537<<4))|0);
        $540=(($539)|0);
        HEAP32[(($540)>>2)]=0;
       }
      } while(0);
      $542=$i;
      $543=$chn;
      $544=$8;
      $545=(($544+($543<<4))|0);
      $546=(($545+($542<<2))|0);
      HEAP32[(($546)>>2)]=0;
     }
    } while(0);
   }
   $550=$i;
   $551=((($550)+(1))|0);
   $i=$551;
  }
  $553=$chn;
  $554=$8;
  $555=(($554+($553<<4))|0);
  $556=(($555)|0);
  $557=((HEAP32[(($556)>>2)])|0);
  $558=$chn;
  $559=$psv;
  $560=(($559+6216)|0);
  $561=(($560+($558<<2))|0);
  $562=((HEAP32[(($561)>>2)])|0);
  $563=($557|0)<=($562|0);
  if ($563) {
   $565=$chn;
   $566=$8;
   $567=(($566+($565<<4))|0);
   $568=(($567)|0);
   HEAP32[(($568)>>2)]=0;
  }
  $570=$chn;
  $571=$psv;
  $572=(($571+6216)|0);
  $573=(($572+($570<<2))|0);
  $574=((HEAP32[(($573)>>2)])|0);
  $575=($574|0)==3;
  if ($575) {
   label = 92;
  } else {
   $577=$chn;
   $578=$8;
   $579=(($578+($577<<4))|0);
   $580=(($579)|0);
   $581=((HEAP32[(($580)>>2)])|0);
   $582=$chn;
   $583=$8;
   $584=(($583+($582<<4))|0);
   $585=(($584+4)|0);
   $586=((HEAP32[(($585)>>2)])|0);
   $587=((($581)+($586))|0);
   $588=$chn;
   $589=$8;
   $590=(($589+($588<<4))|0);
   $591=(($590+8)|0);
   $592=((HEAP32[(($591)>>2)])|0);
   $593=((($587)+($592))|0);
   $594=$chn;
   $595=$8;
   $596=(($595+($594<<4))|0);
   $597=(($596+12)|0);
   $598=((HEAP32[(($597)>>2)])|0);
   $599=((($593)+($598))|0);
   $600=($599|0)!=0;
   if ($600) {
    label = 92;
   }
  }
  if ((label|0) == 92) {
   label = 0;
   $ns_uselongblock=0;
   $602=$chn;
   $603=$8;
   $604=(($603+($602<<4))|0);
   $605=(($604+4)|0);
   $606=((HEAP32[(($605)>>2)])|0);
   $607=($606|0)!=0;
   do {
    if ($607) {
     $609=$chn;
     $610=$8;
     $611=(($610+($609<<4))|0);
     $612=(($611)|0);
     $613=((HEAP32[(($612)>>2)])|0);
     $614=($613|0)!=0;
     if (!($614)) {
      break;
     }
     $616=$chn;
     $617=$8;
     $618=(($617+($616<<4))|0);
     $619=(($618+4)|0);
     HEAP32[(($619)>>2)]=0;
    }
   } while(0);
   $621=$chn;
   $622=$8;
   $623=(($622+($621<<4))|0);
   $624=(($623+8)|0);
   $625=((HEAP32[(($624)>>2)])|0);
   $626=($625|0)!=0;
   do {
    if ($626) {
     $628=$chn;
     $629=$8;
     $630=(($629+($628<<4))|0);
     $631=(($630+4)|0);
     $632=((HEAP32[(($631)>>2)])|0);
     $633=($632|0)!=0;
     if (!($633)) {
      break;
     }
     $635=$chn;
     $636=$8;
     $637=(($636+($635<<4))|0);
     $638=(($637+8)|0);
     HEAP32[(($638)>>2)]=0;
    }
   } while(0);
   $640=$chn;
   $641=$8;
   $642=(($641+($640<<4))|0);
   $643=(($642+12)|0);
   $644=((HEAP32[(($643)>>2)])|0);
   $645=($644|0)!=0;
   do {
    if ($645) {
     $647=$chn;
     $648=$8;
     $649=(($648+($647<<4))|0);
     $650=(($649+8)|0);
     $651=((HEAP32[(($650)>>2)])|0);
     $652=($651|0)!=0;
     if (!($652)) {
      break;
     }
     $654=$chn;
     $655=$8;
     $656=(($655+($654<<4))|0);
     $657=(($656+12)|0);
     HEAP32[(($657)>>2)]=0;
    }
   } while(0);
  }
  $660=$chn;
  $661=($660|0)<2;
  if ($661) {
   $663=$ns_uselongblock;
   $664=$chn;
   $665=$9;
   $666=(($665+($664<<2))|0);
   HEAP32[(($666)>>2)]=$663;
  } else {
   $668=$ns_uselongblock;
   $669=($668|0)==0;
   if ($669) {
    $671=$9;
    $672=(($671+4)|0);
    HEAP32[(($672)>>2)]=0;
    $673=$9;
    $674=(($673)|0);
    HEAP32[(($674)>>2)]=0;
   }
  }
  $677=$chn;
  $678=$psv;
  $679=(($678+6056)|0);
  $680=(($679+($677<<2))|0);
  $681=(+(HEAPF32[(($680)>>2)]));
  $682=$chn;
  $683=$6;
  $684=(($683+($682<<2))|0);
  HEAPF32[(($684)>>2)]=$681;
  $686=$chn;
  $687=((($686)+(1))|0);
  $chn=$687;
 }
 STACKTOP=sp;return;
}


function _vbrpsy_compute_block_type($cfg,$uselongblock){
 $cfg=($cfg)|0;
 $uselongblock=($uselongblock)|0;
 var $1=0,$2=0,$chn=0,$3=0,$4=0,$5=0,$6=0,$8=0,$9=0,$10=0,$11=0,$13=0,$14=0,$15=0,$16=0,$18=0,$19=0,$20=0,$21=0,$24=0;
 var $25=0,$26=0,$27=0,$28=0,$30=0,$31=0,$32=0,$33=0,$35=0,$36=0,$37=0,$39=0,$40=0,$41=0,$42=0,$44=0,$45=0,$46=0,$49=0,$50=0;
 var label=0;
 var sp=0;sp=STACKTOP;



 $1=$cfg;
 $2=$uselongblock;
 $3=$1;
 $4=(($3+168)|0);
 $5=((HEAP32[(($4)>>2)])|0);
 $6=($5|0)==1;
 do {
  if ($6) {
   $8=$2;
   $9=(($8)|0);
   $10=((HEAP32[(($9)>>2)])|0);
   $11=($10|0)!=0;
   if ($11) {
    $13=$2;
    $14=(($13+4)|0);
    $15=((HEAP32[(($14)>>2)])|0);
    $16=($15|0)!=0;
    if ($16) {
     break;
    }
   }
   $18=$2;
   $19=(($18+4)|0);
   HEAP32[(($19)>>2)]=0;
   $20=$2;
   $21=(($20)|0);
   HEAP32[(($21)>>2)]=0;
  }
 } while(0);
 $chn=0;
 while(1) {
  $24=$chn;
  $25=$1;
  $26=(($25+56)|0);
  $27=((HEAP32[(($26)>>2)])|0);
  $28=($24|0)<($27|0);
  if (!($28)) {
   break;
  }
  $30=$1;
  $31=(($30+168)|0);
  $32=((HEAP32[(($31)>>2)])|0);
  $33=($32|0)==2;
  if ($33) {
   $35=$chn;
   $36=$2;
   $37=(($36+($35<<2))|0);
   HEAP32[(($37)>>2)]=1;
  }
  $39=$1;
  $40=(($39+168)|0);
  $41=((HEAP32[(($40)>>2)])|0);
  $42=($41|0)==3;
  if ($42) {
   $44=$chn;
   $45=$2;
   $46=(($45+($44<<2))|0);
   HEAP32[(($46)>>2)]=0;
  }
  $49=$chn;
  $50=((($49)+(1))|0);
  $chn=$50;
 }
 STACKTOP=sp;return;
}


function _vbrpsy_compute_fft_l($gfc,$buffer,$chn,$gr_out,$fftenergy,$wsamp_l){
 $gfc=($gfc)|0;
 $buffer=($buffer)|0;
 $chn=($chn)|0;
 $gr_out=($gr_out)|0;
 $fftenergy=($fftenergy)|0;
 $wsamp_l=($wsamp_l)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$cfg=0,$psv=0,$plt=0,$j=0,$sqrt2_half=.0,$l=.0,$r=.0,$re=.0,$im=.0,$totalenergy=.0,$7=0,$8=0,$9=0,$10=0;
 var $11=0,$12=0,$13=0,$14=0,$16=0,$17=0,$18=0,$21=0,$22=0,$23=0,$25=0,$26=0,$27=0,$28=0,$29=0,$31=0,$32=0,$35=0,$36=0,$38=0;
 var $39=0,$40=0,$41=0,$42=.0,$43=0,$44=0,$45=0,$46=0,$47=.0,$48=.0,$49=.0,$50=.0,$51=.0,$52=0,$53=0,$54=0,$55=0,$56=.0,$57=.0,$58=.0;
 var $59=.0,$60=0,$61=0,$62=0,$63=0,$65=0,$66=0,$70=0,$71=0,$72=0,$73=.0,$74=0,$75=0,$76=0,$77=0,$78=.0,$79=0,$80=0,$81=.0,$82=.0;
 var $84=0,$85=0,$87=0,$88=0,$89=0,$90=0,$91=.0,$92=0,$93=0,$94=0,$95=0,$96=.0,$97=.0,$98=.0,$99=.0,$100=.0,$101=.0,$102=.0,$103=.0,$104=.0;
 var $105=0,$106=0,$107=0,$108=0,$110=0,$111=0,$114=0,$115=0,$117=0,$118=0,$119=0,$120=.0,$121=.0,$122=.0,$124=0,$125=0,$127=.0,$128=0,$129=0,$130=0;
 var $131=0,$132=0,$133=0,$136=0,$137=0,$139=0,$140=0,$141=0,$142=0,$143=0,$144=0,$145=.0,$146=0,$147=0,$148=0,$149=0,$150=0,$151=0,$152=0,$153=0;
 var $154=0,$155=0,$156=0,$157=.0,$158=.0,$159=0,$160=0,$161=0,$162=0,$163=0,$164=0,$166=0,$167=0,label=0;
 var sp=0;sp=STACKTOP;
















 $1=$gfc;
 $2=$buffer;
 $3=$chn;
 $4=$gr_out;
 $5=$fftenergy;
 $6=$wsamp_l;
 $7=$1;
 $8=(($7+16)|0);
 $cfg=$8;
 $9=$1;
 $10=(($9+21564)|0);
 $psv=$10;
 $11=$cfg;
 $12=(($11+124)|0);
 $13=((HEAP32[(($12)>>2)])|0);
 $14=($13|0)!=0;
 if ($14) {
  $16=$1;
  $17=(($16+85804)|0);
  $18=((HEAP32[(($17)>>2)])|0);
  $21=$18;
 } else {
  $21=0;
 }

 $plt=$21;
 $22=$3;
 $23=($22|0)<2;
 if ($23) {
  $25=$1;
  $26=$6;
  $27=(($26)|0);
  $28=$3;
  $29=$2;
  _fft_long($25,$27,$28,$29);
 } else {
  $31=$3;
  $32=($31|0)==2;
  if ($32) {
   $sqrt2_half=0.7071067690849304;
   $j=1023;
   while(1) {
    $35=$j;
    $36=($35|0)>=0;
    if (!($36)) {
     break;
    }
    $38=$j;
    $39=$6;
    $40=(($39)|0);
    $41=(($40+($38<<2))|0);
    $42=(+(HEAPF32[(($41)>>2)]));
    $l=$42;
    $43=$j;
    $44=$6;
    $45=(($44+4096)|0);
    $46=(($45+($43<<2))|0);
    $47=(+(HEAPF32[(($46)>>2)]));
    $r=$47;
    $48=$l;
    $49=$r;
    $50=($48)+($49);
    $51=($50)*((0.7071067690849304));
    $52=$j;
    $53=$6;
    $54=(($53)|0);
    $55=(($54+($52<<2))|0);
    HEAPF32[(($55)>>2)]=$51;
    $56=$l;
    $57=$r;
    $58=($56)-($57);
    $59=($58)*((0.7071067690849304));
    $60=$j;
    $61=$6;
    $62=(($61+4096)|0);
    $63=(($62+($60<<2))|0);
    HEAPF32[(($63)>>2)]=$59;
    $65=$j;
    $66=((($65)-(1))|0);
    $j=$66;
   }
  }
 }
 $70=$6;
 $71=(($70)|0);
 $72=(($71)|0);
 $73=(+(HEAPF32[(($72)>>2)]));
 $74=$5;
 $75=(($74)|0);
 HEAPF32[(($75)>>2)]=$73;
 $76=$5;
 $77=(($76)|0);
 $78=(+(HEAPF32[(($77)>>2)]));
 $79=$5;
 $80=(($79)|0);
 $81=(+(HEAPF32[(($80)>>2)]));
 $82=($81)*($78);
 HEAPF32[(($80)>>2)]=$82;
 $j=511;
 while(1) {
  $84=$j;
  $85=($84|0)>=0;
  if (!($85)) {
   break;
  }
  $87=$j;
  $88=(((512)-($87))|0);
  $89=$6;
  $90=(($89+($88<<2))|0);
  $91=(+(HEAPF32[(($90)>>2)]));
  $re=$91;
  $92=$j;
  $93=((($92)+(512))|0);
  $94=$6;
  $95=(($94+($93<<2))|0);
  $96=(+(HEAPF32[(($95)>>2)]));
  $im=$96;
  $97=$re;
  $98=$re;
  $99=($97)*($98);
  $100=$im;
  $101=$im;
  $102=($100)*($101);
  $103=($99)+($102);
  $104=($103)*((0.5));
  $105=$j;
  $106=(((512)-($105))|0);
  $107=$5;
  $108=(($107+($106<<2))|0);
  HEAPF32[(($108)>>2)]=$104;
  $110=$j;
  $111=((($110)-(1))|0);
  $j=$111;
 }
 $totalenergy=0.0;
 $j=11;
 while(1) {
  $114=$j;
  $115=($114|0)<513;
  if (!($115)) {
   break;
  }
  $117=$j;
  $118=$5;
  $119=(($118+($117<<2))|0);
  $120=(+(HEAPF32[(($119)>>2)]));
  $121=$totalenergy;
  $122=($121)+($120);
  $totalenergy=$122;
  $124=$j;
  $125=((($124)+(1))|0);
  $j=$125;
 }
 $127=$totalenergy;
 $128=$3;
 $129=$psv;
 $130=(($129+6056)|0);
 $131=(($130+($128<<2))|0);
 HEAPF32[(($131)>>2)]=$127;
 $132=$plt;
 $133=($132|0)!=0;
 if (!($133)) {
  STACKTOP=sp;return;
 }
 $j=0;
 while(1) {
  $136=$j;
  $137=($136|0)<513;
  if (!($137)) {
   break;
  }
  $139=$j;
  $140=$3;
  $141=$plt;
  $142=(($141+90936)|0);
  $143=(($142+($140<<13))|0);
  $144=(($143+($139<<3))|0);
  $145=(+(HEAPF64[(($144)>>3)]));
  $146=$j;
  $147=$3;
  $148=$4;
  $149=$plt;
  $150=(($149+123704)|0);
  $151=(($150+($148<<15))|0);
  $152=(($151+($147<<13))|0);
  $153=(($152+($146<<3))|0);
  HEAPF64[(($153)>>3)]=$145;
  $154=$j;
  $155=$5;
  $156=(($155+($154<<2))|0);
  $157=(+(HEAPF32[(($156)>>2)]));
  $158=$157;
  $159=$j;
  $160=$3;
  $161=$plt;
  $162=(($161+90936)|0);
  $163=(($162+($160<<13))|0);
  $164=(($163+($159<<3))|0);
  HEAPF64[(($164)>>3)]=$158;
  $166=$j;
  $167=((($166)+(1))|0);
  $j=$167;
 }
 STACKTOP=sp;return;
}


function _vbrpsy_compute_loudness_approximation_l($gfc,$gr_out,$chn,$fftenergy){
 $gfc=($gfc)|0;
 $gr_out=($gr_out)|0;
 $chn=($chn)|0;
 $fftenergy=($fftenergy)|0;
 var $1=0,$2=0,$3=0,$4=0,$psv=0,$5=0,$6=0,$7=0,$8=0,$10=0,$11=0,$12=0,$13=0,$14=.0,$15=0,$16=0,$17=0,$18=0,$19=0,$20=0;
 var $21=0,$22=0,$23=0,$24=0,$25=0,$26=0,$27=0,$28=.0,$29=0,$30=0,$31=0,$32=0,label=0;
 var sp=0;sp=STACKTOP;





 $1=$gfc;
 $2=$gr_out;
 $3=$chn;
 $4=$fftenergy;
 $5=$1;
 $6=(($5+21564)|0);
 $psv=$6;
 $7=$3;
 $8=($7|0)<2;
 if (!($8)) {
  STACKTOP=sp;return;
 }
 $10=$3;
 $11=$psv;
 $12=(($11+6048)|0);
 $13=(($12+($10<<2))|0);
 $14=(+(HEAPF32[(($13)>>2)]));
 $15=$3;
 $16=$2;
 $17=$1;
 $18=(($17+27804)|0);
 $19=(($18)|0);
 $20=(($19+($16<<3))|0);
 $21=(($20+($15<<2))|0);
 HEAPF32[(($21)>>2)]=$14;
 $22=$4;
 $23=$1;
 $24=(($23+85796)|0);
 $25=((HEAP32[(($24)>>2)])|0);
 $26=(($25+724)|0);
 $27=(($26)|0);
 $28=(+(_psycho_loudness_approx($22,$27)));
 $29=$3;
 $30=$psv;
 $31=(($30+6048)|0);
 $32=(($31+($29<<2))|0);
 HEAPF32[(($32)>>2)]=$28;
 STACKTOP=sp;return;
}


function _vbrpsy_compute_masking_l($gfc,$fftenergy,$eb_l,$thr,$chn){
 $gfc=($gfc)|0;
 $fftenergy=($fftenergy)|0;
 $eb_l=($eb_l)|0;
 $thr=($thr)|0;
 $chn=($chn)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$psv=0,$gdl=0,$max=0,$avg=0,$mask_idx_l=0,$k=0,$b=0,$x=.0,$ecb=.0,$avg_mask=.0,$t=.0,$masking_lower=.0,$kk=0,$last=0,$delta=0;
 var $dd=0,$dd_n=0,$ecb_limit=.0,$ecb_limit_2=.0,$ecb_limit_1=.0,$ecb_limit1=.0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$14=0,$15=0,$16=0,$17=0,$18=0,$19=0;
 var $20=0,$22=0,$23=0,$24=0,$25=0,$26=0,$28=0,$29=0,$30=0,$31=0,$32=.0,$33=0,$34=0,$35=0,$36=.0,$37=.0,$38=0,$39=0,$40=0,$41=0;
 var $42=0,$43=0,$44=0,$45=0,$46=0,$47=0,$48=0,$49=0,$50=0,$51=0,$52=0,$53=0,$54=0,$55=0,$56=0,$57=0,$58=0,$59=0,$60=0,$61=0;
 var $62=0,$63=0,$64=0,$65=0,$66=.0,$67=0,$68=0,$69=0,$70=.0,$71=.0,$72=0,$73=0,$74=0,$75=0,$76=0,$77=.0,$78=.0,$79=0,$80=0,$81=0;
 var $82=0,$84=0,$85=0,$86=0,$88=0,$89=0,$90=0,$91=0,$92=0,$93=0,$94=0,$95=0,$96=0,$97=0,$98=0,$99=0,$100=0,$101=.0,$102=0,$103=0;
 var $104=0,$105=.0,$106=.0,$107=0,$108=0,$109=0,$110=0,$111=0,$112=.0,$113=.0,$114=.0,$115=.0,$116=0,$117=0,$118=0,$119=0,$120=.0,$121=.0,$122=0,$123=0;
 var $124=0,$125=0,$127=0,$128=0,$129=0,$130=0,$131=0,$132=0,$133=0,$134=0,$135=.0,$136=.0,$137=.0,$138=.0,$139=.0,$140=0,$141=0,$142=0,$143=0,$144=0;
 var $145=0,$146=0,$148=0,$149=0,$150=0,$151=0,$152=0,$153=0,$154=.0,$155=.0,$156=.0,$157=0,$159=.0,$160=.0,$161=0,$163=.0,$165=.0,$167=.0,$168=0,$169=0;
 var $170=0,$172=.0,$173=.0,$174=0,$175=0,$176=0,$177=.0,$178=.0,$179=.0,$180=0,$182=.0,$183=.0,$185=0,$186=0,$187=0,$188=.0,$189=.0,$190=.0,$192=.0,$193=.0;
 var $194=0,$195=0,$196=0,$199=0,$200=0,$201=0,$202=0,$203=0,$204=0,$205=.0,$206=.0,$207=0,$208=0,$209=0,$210=0,$211=0,$212=0,$213=.0,$214=.0,$215=.0;
 var $216=0,$218=.0,$220=.0,$221=0,$223=.0,$225=0,$226=0,$227=0,$228=0,$229=0,$230=0,$231=0,$233=.0,$234=.0,$235=0,$237=.0,$239=.0,$241=.0,$243=.0,$245=.0;
 var $246=.0,$247=0,$249=.0,$251=.0,$253=.0,$254=0,$255=0,$256=0,$258=0,$259=0,$260=0,$261=0,$262=0,$263=0,$264=.0,$265=0,$266=0,$267=0,$268=0,$269=0;
 var $270=0,$271=.0,$272=0,$273=0,$274=0,$275=0,$276=0,$277=0,$278=0,$279=0,$280=.0,$281=0,$282=0,$283=0,$284=0,$285=.0,$286=.0,$287=.0,$288=.0,$289=.0;
 var $290=.0,$291=0,$292=0,$293=0,$294=.0,$295=.0,$296=0,$298=.0,$299=0,$300=0,$301=0,$303=.0,$304=0,$306=.0,$307=0,$308=0,$309=0,$310=.0,$311=.0,$313=0;
 var $314=0,$315=0,$316=.0,$317=0,$318=0,$319=0,$320=.0,$321=0,$323=0,$324=0,$325=0,$326=.0,$327=0,$328=0,$329=0,$331=.0,$332=0,$334=.0,$335=0,$336=0;
 var $337=0,$338=.0,$339=.0,$342=0,$343=0,$346=0,$347=0,$349=0,$350=0,$351=0,$352=0,$353=0,$354=0,$356=0,$357=0,label=0;
 var sp=0;sp=STACKTOP;STACKTOP=(STACKTOP+584)|0;







 $max=((sp)|0);
 $avg=(((sp)+(256))|0);
 $mask_idx_l=(((sp)+(512))|0);
















 $1=$gfc;
 $2=$fftenergy;
 $3=$eb_l;
 $4=$thr;
 $5=$chn;
 $6=$1;
 $7=(($6+21564)|0);
 $psv=$7;
 $8=$1;
 $9=(($8+85800)|0);
 $10=((HEAP32[(($9)>>2)])|0);
 $11=(($10)|0);
 $gdl=$11;
 $12=$gdl;
 $13=$2;
 $14=$3;
 $15=(($max)|0);
 $16=(($avg)|0);
 _calc_energy($12,$13,$14,$15,$16);
 $17=$1;
 $18=(($max)|0);
 $19=(($avg)|0);
 $20=(($mask_idx_l)|0);
 _calc_mask_index_l($17,$18,$19,$20);
 $k=0;
 $b=0;
 while(1) {
  $22=$b;
  $23=$gdl;
  $24=(($23+2148)|0);
  $25=((HEAP32[(($24)>>2)])|0);
  $26=($22|0)<($25|0);
  if (!($26)) {
   break;
  }
  $28=$b;
  $29=$gdl;
  $30=(($29)|0);
  $31=(($30+($28<<2))|0);
  $32=(+(HEAPF32[(($31)>>2)]));
  $33=$1;
  $34=(($33+84768)|0);
  $35=(($34+140)|0);
  $36=(+(HEAPF32[(($35)>>2)]));
  $37=($32)*($36);
  $masking_lower=$37;
  $38=$b;
  $39=$gdl;
  $40=(($39+1204)|0);
  $41=(($40+($38<<3))|0);
  $42=(($41)|0);
  $43=((HEAP32[(($42)>>2)])|0);
  $kk=$43;
  $44=$b;
  $45=$gdl;
  $46=(($45+1204)|0);
  $47=(($46+($44<<3))|0);
  $48=(($47+4)|0);
  $49=((HEAP32[(($48)>>2)])|0);
  $last=$49;
  $50=$b;
  $51=(($mask_idx_l+$50)|0);
  $52=((HEAP8[($51)])|0);
  $53=($52&255);
  $54=((_mask_add_delta($53))|0);
  $delta=$54;
  $dd=0;
  $dd_n=0;
  $55=$kk;
  $56=(($mask_idx_l+$55)|0);
  $57=((HEAP8[($56)])|0);
  $58=($57&255);
  $dd=$58;
  $59=$dd_n;
  $60=((($59)+(1))|0);
  $dd_n=$60;
  $61=$k;
  $62=$gdl;
  $63=(($62+2156)|0);
  $64=((HEAP32[(($63)>>2)])|0);
  $65=(($64+($61<<2))|0);
  $66=(+(HEAPF32[(($65)>>2)]));
  $67=$kk;
  $68=$3;
  $69=(($68+($67<<2))|0);
  $70=(+(HEAPF32[(($69)>>2)]));
  $71=($66)*($70);
  $72=$kk;
  $73=(($mask_idx_l+$72)|0);
  $74=((HEAP8[($73)])|0);
  $75=($74&255);
  $76=((2312+($75<<2))|0);
  $77=(+(HEAPF32[(($76)>>2)]));
  $78=($71)*($77);
  $ecb=$78;
  $79=$k;
  $80=((($79)+(1))|0);
  $k=$80;
  $81=$kk;
  $82=((($81)+(1))|0);
  $kk=$82;
  while(1) {
   $84=$kk;
   $85=$last;
   $86=($84|0)<=($85|0);
   if (!($86)) {
    break;
   }
   $88=$kk;
   $89=(($mask_idx_l+$88)|0);
   $90=((HEAP8[($89)])|0);
   $91=($90&255);
   $92=$dd;
   $93=((($92)+($91))|0);
   $dd=$93;
   $94=$dd_n;
   $95=((($94)+(1))|0);
   $dd_n=$95;
   $96=$k;
   $97=$gdl;
   $98=(($97+2156)|0);
   $99=((HEAP32[(($98)>>2)])|0);
   $100=(($99+($96<<2))|0);
   $101=(+(HEAPF32[(($100)>>2)]));
   $102=$kk;
   $103=$3;
   $104=(($103+($102<<2))|0);
   $105=(+(HEAPF32[(($104)>>2)]));
   $106=($101)*($105);
   $107=$kk;
   $108=(($mask_idx_l+$107)|0);
   $109=((HEAP8[($108)])|0);
   $110=($109&255);
   $111=((2312+($110<<2))|0);
   $112=(+(HEAPF32[(($111)>>2)]));
   $113=($106)*($112);
   $x=$113;
   $114=$ecb;
   $115=$x;
   $116=$kk;
   $117=$b;
   $118=((($116)-($117))|0);
   $119=$delta;
   $120=(+(_vbrpsy_mask_add($114,$115,$118,$119)));
   $t=$120;
   $121=$t;
   $ecb=$121;
   $122=$k;
   $123=((($122)+(1))|0);
   $k=$123;
   $124=$kk;
   $125=((($124)+(1))|0);
   $kk=$125;
  }
  $127=$dd;
  $128=($127<<1);
  $129=((($128)+(1))|0);
  $130=$dd_n;
  $131=($130<<1);
  $132=(((($129|0))/(($131|0)))&-1);
  $dd=$132;
  $133=$dd;
  $134=((2312+($133<<2))|0);
  $135=(+(HEAPF32[(($134)>>2)]));
  $136=($135)*((0.5));
  $avg_mask=$136;
  $137=$avg_mask;
  $138=$ecb;
  $139=($138)*($137);
  $ecb=$139;
  $140=$5;
  $141=$140&1;
  $142=$psv;
  $143=(($142+6232)|0);
  $144=(($143+($141<<2))|0);
  $145=((HEAP32[(($144)>>2)])|0);
  $146=($145|0)==2;
  if ($146) {
   $148=$b;
   $149=$5;
   $150=$psv;
   $151=(($150)|0);
   $152=(($151+($149<<8))|0);
   $153=(($152+($148<<2))|0);
   $154=(+(HEAPF32[(($153)>>2)]));
   $155=((2.0))*($154);
   $ecb_limit=$155;
   $156=$ecb_limit;
   $157=$156>(0.0);
   if ($157) {
    $159=$ecb;
    $160=$ecb_limit;
    $161=$159<$160;
    if ($161) {
     $163=$ecb;
     $167=$163;
    } else {
     $165=$ecb_limit;
     $167=$165;
    }

    $168=$b;
    $169=$4;
    $170=(($169+($168<<2))|0);
    HEAPF32[(($170)>>2)]=$167;
   } else {
    $172=$ecb;
    $173=$172;
    $174=$b;
    $175=$3;
    $176=(($175+($174<<2))|0);
    $177=(+(HEAPF32[(($176)>>2)]));
    $178=$177;
    $179=($178)*((0.3));
    $180=$173<$179;
    if ($180) {
     $182=$ecb;
     $183=$182;
     $192=$183;
    } else {
     $185=$b;
     $186=$3;
     $187=(($186+($185<<2))|0);
     $188=(+(HEAPF32[(($187)>>2)]));
     $189=$188;
     $190=($189)*((0.3));
     $192=$190;
    }

    $193=$192;
    $194=$b;
    $195=$4;
    $196=(($195+($194<<2))|0);
    HEAPF32[(($196)>>2)]=$193;
   }
  } else {
   $199=$b;
   $200=$5;
   $201=$psv;
   $202=(($201+1024)|0);
   $203=(($202+($200<<8))|0);
   $204=(($203+($199<<2))|0);
   $205=(+(HEAPF32[(($204)>>2)]));
   $206=((16.0))*($205);
   $ecb_limit_2=$206;
   $207=$b;
   $208=$5;
   $209=$psv;
   $210=(($209)|0);
   $211=(($210+($208<<8))|0);
   $212=(($211+($207<<2))|0);
   $213=(+(HEAPF32[(($212)>>2)]));
   $214=((2.0))*($213);
   $ecb_limit_1=$214;
   $215=$ecb_limit_2;
   $216=$215<=(0.0);
   if ($216) {
    $218=$ecb;
    $ecb_limit_2=$218;
   }
   $220=$ecb_limit_1;
   $221=$220<=(0.0);
   if ($221) {
    $223=$ecb;
    $ecb_limit_1=$223;
   }
   $225=$5;
   $226=$225&1;
   $227=$psv;
   $228=(($227+6232)|0);
   $229=(($228+($226<<2))|0);
   $230=((HEAP32[(($229)>>2)])|0);
   $231=($230|0)==0;
   if ($231) {
    $233=$ecb_limit_1;
    $234=$ecb_limit_2;
    $235=$233<$234;
    if ($235) {
     $237=$ecb_limit_1;
     $241=$237;
    } else {
     $239=$ecb_limit_2;
     $241=$239;
    }

    $ecb_limit1=$241;
   } else {
    $243=$ecb_limit_1;
    $ecb_limit1=$243;
   }
   $245=$ecb;
   $246=$ecb_limit1;
   $247=$245<$246;
   if ($247) {
    $249=$ecb;
    $253=$249;
   } else {
    $251=$ecb_limit1;
    $253=$251;
   }

   $254=$b;
   $255=$4;
   $256=(($255+($254<<2))|0);
   HEAPF32[(($256)>>2)]=$253;
  }
  $258=$b;
  $259=$5;
  $260=$psv;
  $261=(($260)|0);
  $262=(($261+($259<<8))|0);
  $263=(($262+($258<<2))|0);
  $264=(+(HEAPF32[(($263)>>2)]));
  $265=$b;
  $266=$5;
  $267=$psv;
  $268=(($267+1024)|0);
  $269=(($268+($266<<8))|0);
  $270=(($269+($265<<2))|0);
  HEAPF32[(($270)>>2)]=$264;
  $271=$ecb;
  $272=$b;
  $273=$5;
  $274=$psv;
  $275=(($274)|0);
  $276=(($275+($273<<8))|0);
  $277=(($276+($272<<2))|0);
  HEAPF32[(($277)>>2)]=$271;
  $278=$b;
  $279=(($max+($278<<2))|0);
  $280=(+(HEAPF32[(($279)>>2)]));
  $x=$280;
  $281=$b;
  $282=$gdl;
  $283=(($282+256)|0);
  $284=(($283+($281<<2))|0);
  $285=(+(HEAPF32[(($284)>>2)]));
  $286=$x;
  $287=($286)*($285);
  $x=$287;
  $288=$avg_mask;
  $289=$x;
  $290=($289)*($288);
  $x=$290;
  $291=$b;
  $292=$4;
  $293=(($292+($291<<2))|0);
  $294=(+(HEAPF32[(($293)>>2)]));
  $295=$x;
  $296=$294>$295;
  if ($296) {
   $298=$x;
   $299=$b;
   $300=$4;
   $301=(($300+($299<<2))|0);
   HEAPF32[(($301)>>2)]=$298;
  }
  $303=$masking_lower;
  $304=$303>(1.0);
  if ($304) {
   $306=$masking_lower;
   $307=$b;
   $308=$4;
   $309=(($308+($307<<2))|0);
   $310=(+(HEAPF32[(($309)>>2)]));
   $311=($310)*($306);
   HEAPF32[(($309)>>2)]=$311;
  }
  $313=$b;
  $314=$4;
  $315=(($314+($313<<2))|0);
  $316=(+(HEAPF32[(($315)>>2)]));
  $317=$b;
  $318=$3;
  $319=(($318+($317<<2))|0);
  $320=(+(HEAPF32[(($319)>>2)]));
  $321=$316>$320;
  if ($321) {
   $323=$b;
   $324=$3;
   $325=(($324+($323<<2))|0);
   $326=(+(HEAPF32[(($325)>>2)]));
   $327=$b;
   $328=$4;
   $329=(($328+($327<<2))|0);
   HEAPF32[(($329)>>2)]=$326;
  }
  $331=$masking_lower;
  $332=$331<(1.0);
  if ($332) {
   $334=$masking_lower;
   $335=$b;
   $336=$4;
   $337=(($336+($335<<2))|0);
   $338=(+(HEAPF32[(($337)>>2)]));
   $339=($338)*($334);
   HEAPF32[(($337)>>2)]=$339;
  }
  $342=$b;
  $343=((($342)+(1))|0);
  $b=$343;
 }
 while(1) {
  $346=$b;
  $347=($346|0)<64;
  if (!($347)) {
   break;
  }
  $349=$b;
  $350=$3;
  $351=(($350+($349<<2))|0);
  HEAPF32[(($351)>>2)]=0.0;
  $352=$b;
  $353=$4;
  $354=(($353+($352<<2))|0);
  HEAPF32[(($354)>>2)]=0.0;
  $356=$b;
  $357=((($356)+(1))|0);
  $b=$357;
 }
 STACKTOP=sp;return;
}


function _vbrpsy_compute_MS_thresholds($eb,$thr,$cb_mld,$ath_cb,$athlower,$msfix,$n){
 $eb=($eb)|0;
 $thr=($thr)|0;
 $cb_mld=($cb_mld)|0;
 $ath_cb=($ath_cb)|0;
 $athlower=+($athlower);
 $msfix=+($msfix);
 $n=($n)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=.0,$6=.0,$7=0,$msfix2=.0,$rside=.0,$rmid=.0,$b=0,$ebM=.0,$ebS=.0,$thmL=.0,$thmR=.0,$thmM=.0,$thmS=.0,$mld_m=.0,$mld_s=.0,$tmp_m=.0;
 var $tmp_s=.0,$thmLR=.0,$thmMS=.0,$ath=.0,$tmp_l=.0,$tmp_r=.0,$f=.0,$8=.0,$9=.0,$11=0,$12=0,$13=0,$15=0,$16=0,$17=0,$18=0,$19=.0,$20=0,$21=0,$22=0;
 var $23=0,$24=.0,$25=0,$26=0,$27=0,$28=0,$29=.0,$30=0,$31=0,$32=0,$33=0,$34=.0,$35=0,$36=0,$37=0,$38=0,$39=.0,$40=0,$41=0,$42=0;
 var $43=0,$44=.0,$45=.0,$46=.0,$47=.0,$48=0,$50=.0,$51=.0,$52=.0,$53=0,$55=0,$56=0,$57=0,$58=.0,$59=.0,$60=.0,$61=0,$62=0,$63=0,$64=.0;
 var $65=.0,$66=.0,$67=.0,$68=.0,$69=0,$71=.0,$73=.0,$75=.0,$76=.0,$77=.0,$78=0,$80=.0,$82=.0,$84=.0,$85=.0,$86=.0,$87=0,$89=.0,$91=.0,$93=.0;
 var $94=.0,$95=.0,$96=0,$98=.0,$100=.0,$102=.0,$104=.0,$105=.0,$107=.0,$108=0,$110=0,$111=0,$112=0,$113=.0,$114=.0,$115=.0,$116=.0,$117=.0,$118=0,$120=.0;
 var $122=.0,$124=.0,$125=.0,$126=.0,$127=0,$129=.0,$131=.0,$133=.0,$134=.0,$135=.0,$136=0,$138=.0,$140=.0,$142=.0,$143=.0,$144=.0,$145=0,$147=.0,$149=.0,$151=.0;
 var $152=.0,$153=.0,$154=0,$156=.0,$158=.0,$160=.0,$161=.0,$162=.0,$163=.0,$164=.0,$165=0,$167=.0,$168=.0,$169=.0,$170=.0,$171=0,$173=.0,$174=.0,$175=.0,$176=.0;
 var $177=.0,$178=.0,$179=.0,$180=.0,$181=.0,$182=.0,$183=.0,$185=.0,$186=.0,$187=0,$189=.0,$191=.0,$193=.0,$194=.0,$195=.0,$196=0,$198=.0,$200=.0,$202=.0,$204=.0;
 var $205=.0,$206=0,$208=.0,$210=.0,$211=.0,$212=0,$214=.0,$216=.0,$217=0,$218=0,$219=0,$220=0,$221=.0,$222=0,$223=0,$224=0,$225=0,$227=0,$228=0,label=0;
 var sp=0;sp=STACKTOP;



























 $1=$eb;
 $2=$thr;
 $3=$cb_mld;
 $4=$ath_cb;
 $5=$athlower;
 $6=$msfix;
 $7=$n;
 $8=$6;
 $9=($8)*((2.0));
 $msfix2=$9;
 $b=0;
 while(1) {
  $11=$b;
  $12=$7;
  $13=($11|0)<($12|0);
  if (!($13)) {
   break;
  }
  $15=$b;
  $16=$1;
  $17=(($16+512)|0);
  $18=(($17+($15<<2))|0);
  $19=(+(HEAPF32[(($18)>>2)]));
  $ebM=$19;
  $20=$b;
  $21=$1;
  $22=(($21+768)|0);
  $23=(($22+($20<<2))|0);
  $24=(+(HEAPF32[(($23)>>2)]));
  $ebS=$24;
  $25=$b;
  $26=$2;
  $27=(($26)|0);
  $28=(($27+($25<<2))|0);
  $29=(+(HEAPF32[(($28)>>2)]));
  $thmL=$29;
  $30=$b;
  $31=$2;
  $32=(($31+256)|0);
  $33=(($32+($30<<2))|0);
  $34=(+(HEAPF32[(($33)>>2)]));
  $thmR=$34;
  $35=$b;
  $36=$2;
  $37=(($36+512)|0);
  $38=(($37+($35<<2))|0);
  $39=(+(HEAPF32[(($38)>>2)]));
  $thmM=$39;
  $40=$b;
  $41=$2;
  $42=(($41+768)|0);
  $43=(($42+($40<<2))|0);
  $44=(+(HEAPF32[(($43)>>2)]));
  $thmS=$44;
  $45=$thmL;
  $46=$thmR;
  $47=((1.5800000429153442))*($46);
  $48=$45<=$47;
  do {
   if ($48) {
    $50=$thmR;
    $51=$thmL;
    $52=((1.5800000429153442))*($51);
    $53=$50<=$52;
    if (!($53)) {
     label = 18;
     break;
    }
    $55=$b;
    $56=$3;
    $57=(($56+($55<<2))|0);
    $58=(+(HEAPF32[(($57)>>2)]));
    $59=$ebS;
    $60=($58)*($59);
    $mld_m=$60;
    $61=$b;
    $62=$3;
    $63=(($62+($61<<2))|0);
    $64=(+(HEAPF32[(($63)>>2)]));
    $65=$ebM;
    $66=($64)*($65);
    $mld_s=$66;
    $67=$thmS;
    $68=$mld_m;
    $69=$67<$68;
    if ($69) {
     $71=$thmS;
     $75=$71;
    } else {
     $73=$mld_m;
     $75=$73;
    }

    $tmp_m=$75;
    $76=$thmM;
    $77=$mld_s;
    $78=$76<$77;
    if ($78) {
     $80=$thmM;
     $84=$80;
    } else {
     $82=$mld_s;
     $84=$82;
    }

    $tmp_s=$84;
    $85=$thmM;
    $86=$tmp_m;
    $87=$85>$86;
    if ($87) {
     $89=$thmM;
     $93=$89;
    } else {
     $91=$tmp_m;
     $93=$91;
    }

    $rmid=$93;
    $94=$thmS;
    $95=$tmp_s;
    $96=$94>$95;
    if ($96) {
     $98=$thmS;
     $102=$98;
    } else {
     $100=$tmp_s;
     $102=$100;
    }

    $rside=$102;
   } else {
    label = 18;
   }
  } while(0);
  if ((label|0) == 18) {
   label = 0;
   $104=$thmM;
   $rmid=$104;
   $105=$thmS;
   $rside=$105;
  }
  $107=$6;
  $108=$107>(0.0);
  if ($108) {
   $110=$b;
   $111=$4;
   $112=(($111+($110<<2))|0);
   $113=(+(HEAPF32[(($112)>>2)]));
   $114=$5;
   $115=($113)*($114);
   $ath=$115;
   $116=$thmL;
   $117=$ath;
   $118=$116>$117;
   if ($118) {
    $120=$thmL;
    $124=$120;
   } else {
    $122=$ath;
    $124=$122;
   }

   $tmp_l=$124;
   $125=$thmR;
   $126=$ath;
   $127=$125>$126;
   if ($127) {
    $129=$thmR;
    $133=$129;
   } else {
    $131=$ath;
    $133=$131;
   }

   $tmp_r=$133;
   $134=$tmp_l;
   $135=$tmp_r;
   $136=$134<$135;
   if ($136) {
    $138=$tmp_l;
    $142=$138;
   } else {
    $140=$tmp_r;
    $142=$140;
   }

   $thmLR=$142;
   $143=$rmid;
   $144=$ath;
   $145=$143>$144;
   if ($145) {
    $147=$rmid;
    $151=$147;
   } else {
    $149=$ath;
    $151=$149;
   }

   $thmM=$151;
   $152=$rside;
   $153=$ath;
   $154=$152>$153;
   if ($154) {
    $156=$rside;
    $160=$156;
   } else {
    $158=$ath;
    $160=$158;
   }

   $thmS=$160;
   $161=$thmM;
   $162=$thmS;
   $163=($161)+($162);
   $thmMS=$163;
   $164=$thmMS;
   $165=$164>(0.0);
   do {
    if ($165) {
     $167=$thmLR;
     $168=$msfix2;
     $169=($167)*($168);
     $170=$thmMS;
     $171=$169<$170;
     if (!($171)) {
      break;
     }
     $173=$thmLR;
     $174=$msfix2;
     $175=($173)*($174);
     $176=$thmMS;
     $177=($175)/($176);
     $f=$177;
     $178=$f;
     $179=$thmM;
     $180=($179)*($178);
     $thmM=$180;
     $181=$f;
     $182=$thmS;
     $183=($182)*($181);
     $thmS=$183;
    }
   } while(0);
   $185=$thmM;
   $186=$rmid;
   $187=$185<$186;
   if ($187) {
    $189=$thmM;
    $193=$189;
   } else {
    $191=$rmid;
    $193=$191;
   }

   $rmid=$193;
   $194=$thmS;
   $195=$rside;
   $196=$194<$195;
   if ($196) {
    $198=$thmS;
    $202=$198;
   } else {
    $200=$rside;
    $202=$200;
   }

   $rside=$202;
  }
  $204=$rmid;
  $205=$ebM;
  $206=$204>$205;
  if ($206) {
   $208=$ebM;
   $rmid=$208;
  }
  $210=$rside;
  $211=$ebS;
  $212=$210>$211;
  if ($212) {
   $214=$ebS;
   $rside=$214;
  }
  $216=$rmid;
  $217=$b;
  $218=$2;
  $219=(($218+512)|0);
  $220=(($219+($217<<2))|0);
  HEAPF32[(($220)>>2)]=$216;
  $221=$rside;
  $222=$b;
  $223=$2;
  $224=(($223+768)|0);
  $225=(($224+($222<<2))|0);
  HEAPF32[(($225)>>2)]=$221;
  $227=$b;
  $228=((($227)+(1))|0);
  $b=$228;
 }
 STACKTOP=sp;return;
}


function _convert_partition2scalefac_l($gfc,$eb,$thr,$chn){
 $gfc=($gfc)|0;
 $eb=($eb)|0;
 $thr=($thr)|0;
 $chn=($chn)|0;
 var $1=0,$2=0,$3=0,$4=0,$psv=0,$gdl=0,$enn=0,$thm=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$14=0,$15=0,$16=0;
 var $17=0,$18=0,$19=0,$20=0,$21=0,$22=0,$23=0,$24=0,$25=0,$26=0,$27=0,label=0;
 var sp=0;sp=STACKTOP;








 $1=$gfc;
 $2=$eb;
 $3=$thr;
 $4=$chn;
 $5=$1;
 $6=(($5+21564)|0);
 $psv=$6;
 $7=$1;
 $8=(($7+85800)|0);
 $9=((HEAP32[(($8)>>2)])|0);
 $10=(($9)|0);
 $gdl=$10;
 $11=$4;
 $12=$psv;
 $13=(($12+5072)|0);
 $14=(($13+((($11)*(244))&-1))|0);
 $15=(($14)|0);
 $16=(($15)|0);
 $enn=$16;
 $17=$4;
 $18=$psv;
 $19=(($18+4096)|0);
 $20=(($19+((($17)*(244))&-1))|0);
 $21=(($20)|0);
 $22=(($21)|0);
 $thm=$22;
 $23=$gdl;
 $24=$2;
 $25=$3;
 $26=$enn;
 $27=$thm;
 _convert_partition2scalefac($23,$24,$25,$26,$27);
 STACKTOP=sp;return;
}


function _convert_partition2scalefac_l_to_s($gfc,$eb,$thr,$chn){
 $gfc=($gfc)|0;
 $eb=($eb)|0;
 $thr=($thr)|0;
 $chn=($chn)|0;
 var $1=0,$2=0,$3=0,$4=0,$psv=0,$gds=0,$enn=0,$thm=0,$sb=0,$sblock=0,$scale=.0,$tmp_enn=.0,$tmp_thm=.0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0;
 var $12=0,$13=0,$14=0,$15=0,$17=0,$18=0,$20=0,$21=0,$22=.0,$23=0,$24=0,$25=.0,$26=.0,$28=0,$29=0,$31=.0,$32=0,$33=0,$34=0,$35=0;
 var $36=0,$37=0,$38=0,$39=0,$40=0,$41=.0,$42=0,$43=0,$44=0,$45=0,$46=0,$47=0,$48=0,$49=0,$50=0,$52=0,$53=0,$56=0,$57=0,label=0;
 var sp=0;sp=STACKTOP;STACKTOP=(STACKTOP+112)|0;






 $enn=((sp)|0);
 $thm=(((sp)+(56))|0);





 $1=$gfc;
 $2=$eb;
 $3=$thr;
 $4=$chn;
 $5=$1;
 $6=(($5+21564)|0);
 $psv=$6;
 $7=$1;
 $8=(($7+85800)|0);
 $9=((HEAP32[(($8)>>2)])|0);
 $10=(($9+4320)|0);
 $gds=$10;
 $11=$gds;
 $12=$2;
 $13=$3;
 $14=(($enn)|0);
 $15=(($thm)|0);
 _convert_partition2scalefac($11,$12,$13,$14,$15);
 $sb=0;
 while(1) {
  $17=$sb;
  $18=($17|0)<13;
  if (!($18)) {
   break;
  }
  $scale=0.015625;
  $20=$sb;
  $21=(($enn+($20<<2))|0);
  $22=(+(HEAPF32[(($21)>>2)]));
  $tmp_enn=$22;
  $23=$sb;
  $24=(($thm+($23<<2))|0);
  $25=(+(HEAPF32[(($24)>>2)]));
  $26=($25)*((0.015625));
  $tmp_thm=$26;
  $sblock=0;
  while(1) {
   $28=$sblock;
   $29=($28|0)<3;
   if (!($29)) {
    break;
   }
   $31=$tmp_enn;
   $32=$sblock;
   $33=$sb;
   $34=$4;
   $35=$psv;
   $36=(($35+5072)|0);
   $37=(($36+((($34)*(244))&-1))|0);
   $38=(($37+88)|0);
   $39=(($38+((($33)*(12))&-1))|0);
   $40=(($39+($32<<2))|0);
   HEAPF32[(($40)>>2)]=$31;
   $41=$tmp_thm;
   $42=$sblock;
   $43=$sb;
   $44=$4;
   $45=$psv;
   $46=(($45+4096)|0);
   $47=(($46+((($44)*(244))&-1))|0);
   $48=(($47+88)|0);
   $49=(($48+((($43)*(12))&-1))|0);
   $50=(($49+($42<<2))|0);
   HEAPF32[(($50)>>2)]=$41;
   $52=$sblock;
   $53=((($52)+(1))|0);
   $sblock=$53;
  }
  $56=$sb;
  $57=((($56)+(1))|0);
  $sb=$57;
 }
 STACKTOP=sp;return;
}


function _vbrpsy_skip_masking_s($gfc,$chn,$sblock){
 $gfc=($gfc)|0;
 $chn=($chn)|0;
 $sblock=($sblock)|0;
 var $1=0,$2=0,$3=0,$nbs2=0,$nbs1=0,$n=0,$b=0,$4=0,$5=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$14=0,$15=0,$16=0,$17=0;
 var $18=0,$19=0,$20=0,$21=0,$22=0,$23=0,$24=0,$26=0,$27=0,$28=0,$30=0,$31=0,$32=0,$33=.0,$34=0,$35=0,$36=0,$38=0,$39=0,label=0;
 var sp=0;sp=STACKTOP;







 $1=$gfc;
 $2=$chn;
 $3=$sblock;
 $4=$3;
 $5=($4|0)==0;
 if (!($5)) {
  STACKTOP=sp;return;
 }
 $7=$2;
 $8=$1;
 $9=(($8+21564)|0);
 $10=(($9+3072)|0);
 $11=(($10+($7<<8))|0);
 $12=(($11)|0);
 $nbs2=$12;
 $13=$2;
 $14=$1;
 $15=(($14+21564)|0);
 $16=(($15+2048)|0);
 $17=(($16+($13<<8))|0);
 $18=(($17)|0);
 $nbs1=$18;
 $19=$1;
 $20=(($19+85800)|0);
 $21=((HEAP32[(($20)>>2)])|0);
 $22=(($21+2160)|0);
 $23=(($22+2148)|0);
 $24=((HEAP32[(($23)>>2)])|0);
 $n=$24;
 $b=0;
 while(1) {
  $26=$b;
  $27=$n;
  $28=($26|0)<($27|0);
  if (!($28)) {
   break;
  }
  $30=$b;
  $31=$nbs1;
  $32=(($31+($30<<2))|0);
  $33=(+(HEAPF32[(($32)>>2)]));
  $34=$b;
  $35=$nbs2;
  $36=(($35+($34<<2))|0);
  HEAPF32[(($36)>>2)]=$33;
  $38=$b;
  $39=((($38)+(1))|0);
  $b=$39;
 }
 STACKTOP=sp;return;
}


function _vbrpsy_compute_fft_s($gfc,$buffer,$chn,$sblock,$fftenergy_s,$wsamp_s){
 $gfc=($gfc)|0;
 $buffer=($buffer)|0;
 $chn=($chn)|0;
 $sblock=($sblock)|0;
 $fftenergy_s=($fftenergy_s)|0;
 $wsamp_s=($wsamp_s)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$j=0,$sqrt2_half=.0,$l=.0,$r=.0,$re=.0,$im=.0,$7=0,$8=0,$10=0,$11=0,$13=0,$14=0,$15=0,$16=0;
 var $17=0,$19=0,$20=0,$23=0,$24=0,$26=0,$27=0,$28=0,$29=0,$30=0,$31=0,$32=.0,$33=0,$34=0,$35=0,$36=0,$37=0,$38=0,$39=.0,$40=.0;
 var $41=.0,$42=.0,$43=.0,$44=0,$45=0,$46=0,$47=0,$48=0,$49=0,$50=.0,$51=.0,$52=.0,$53=.0,$54=0,$55=0,$56=0,$57=0,$58=0,$59=0,$61=0;
 var $62=0,$65=0,$66=0,$67=0,$68=0,$69=.0,$70=0,$71=0,$72=0,$73=0,$74=0,$75=0,$76=0,$77=0,$78=.0,$79=0,$80=0,$81=0,$82=0,$83=.0;
 var $84=.0,$86=0,$87=0,$89=0,$90=0,$91=0,$92=0,$93=0,$94=0,$95=.0,$96=0,$97=0,$98=0,$99=0,$100=0,$101=0,$102=.0,$103=.0,$104=.0,$105=.0;
 var $106=.0,$107=.0,$108=.0,$109=.0,$110=.0,$111=0,$112=0,$113=0,$114=0,$115=0,$116=0,$118=0,$119=0,label=0;
 var sp=0;sp=STACKTOP;












 $1=$gfc;
 $2=$buffer;
 $3=$chn;
 $4=$sblock;
 $5=$fftenergy_s;
 $6=$wsamp_s;
 $7=$4;
 $8=($7|0)==0;
 do {
  if ($8) {
   $10=$3;
   $11=($10|0)<2;
   if (!($11)) {
    break;
   }
   $13=$1;
   $14=$6;
   $15=(($14)|0);
   $16=$3;
   $17=$2;
   _fft_short($13,$15,$16,$17);
  }
 } while(0);
 $19=$3;
 $20=($19|0)==2;
 if ($20) {
  $sqrt2_half=0.7071067690849304;
  $j=255;
  while(1) {
   $23=$j;
   $24=($23|0)>=0;
   if (!($24)) {
    break;
   }
   $26=$j;
   $27=$4;
   $28=$6;
   $29=(($28)|0);
   $30=(($29+($27<<10))|0);
   $31=(($30+($26<<2))|0);
   $32=(+(HEAPF32[(($31)>>2)]));
   $l=$32;
   $33=$j;
   $34=$4;
   $35=$6;
   $36=(($35+3072)|0);
   $37=(($36+($34<<10))|0);
   $38=(($37+($33<<2))|0);
   $39=(+(HEAPF32[(($38)>>2)]));
   $r=$39;
   $40=$l;
   $41=$r;
   $42=($40)+($41);
   $43=($42)*((0.7071067690849304));
   $44=$j;
   $45=$4;
   $46=$6;
   $47=(($46)|0);
   $48=(($47+($45<<10))|0);
   $49=(($48+($44<<2))|0);
   HEAPF32[(($49)>>2)]=$43;
   $50=$l;
   $51=$r;
   $52=($50)-($51);
   $53=($52)*((0.7071067690849304));
   $54=$j;
   $55=$4;
   $56=$6;
   $57=(($56+3072)|0);
   $58=(($57+($55<<10))|0);
   $59=(($58+($54<<2))|0);
   HEAPF32[(($59)>>2)]=$53;
   $61=$j;
   $62=((($61)-(1))|0);
   $j=$62;
  }
 }
 $65=$4;
 $66=$6;
 $67=(($66+($65<<10))|0);
 $68=(($67)|0);
 $69=(+(HEAPF32[(($68)>>2)]));
 $70=$4;
 $71=$5;
 $72=(($71+((($70)*(516))&-1))|0);
 $73=(($72)|0);
 HEAPF32[(($73)>>2)]=$69;
 $74=$4;
 $75=$5;
 $76=(($75+((($74)*(516))&-1))|0);
 $77=(($76)|0);
 $78=(+(HEAPF32[(($77)>>2)]));
 $79=$4;
 $80=$5;
 $81=(($80+((($79)*(516))&-1))|0);
 $82=(($81)|0);
 $83=(+(HEAPF32[(($82)>>2)]));
 $84=($83)*($78);
 HEAPF32[(($82)>>2)]=$84;
 $j=127;
 while(1) {
  $86=$j;
  $87=($86|0)>=0;
  if (!($87)) {
   break;
  }
  $89=$j;
  $90=(((128)-($89))|0);
  $91=$4;
  $92=$6;
  $93=(($92+($91<<10))|0);
  $94=(($93+($90<<2))|0);
  $95=(+(HEAPF32[(($94)>>2)]));
  $re=$95;
  $96=$j;
  $97=((($96)+(128))|0);
  $98=$4;
  $99=$6;
  $100=(($99+($98<<10))|0);
  $101=(($100+($97<<2))|0);
  $102=(+(HEAPF32[(($101)>>2)]));
  $im=$102;
  $103=$re;
  $104=$re;
  $105=($103)*($104);
  $106=$im;
  $107=$im;
  $108=($106)*($107);
  $109=($105)+($108);
  $110=($109)*((0.5));
  $111=$j;
  $112=(((128)-($111))|0);
  $113=$4;
  $114=$5;
  $115=(($114+((($113)*(516))&-1))|0);
  $116=(($115+($112<<2))|0);
  HEAPF32[(($116)>>2)]=$110;
  $118=$j;
  $119=((($118)-(1))|0);
  $j=$119;
 }
 STACKTOP=sp;return;
}


function _vbrpsy_compute_masking_s($gfc,$fftenergy_s,$eb,$thr,$chn,$sblock){
 $gfc=($gfc)|0;
 $fftenergy_s=($fftenergy_s)|0;
 $eb=($eb)|0;
 $thr=($thr)|0;
 $chn=($chn)|0;
 $sblock=($sblock)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$psv=0,$gds=0,$max=0,$avg=0,$i=0,$j=0,$b=0,$mask_idx_s=0,$ebb=.0,$m=.0,$n=0,$el=.0,$kk=0,$last=0;
 var $delta=0,$dd=0,$dd_n=0,$x=.0,$ecb=.0,$avg_mask=.0,$masking_lower=.0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$14=0,$16=0,$17=0,$18=0,$19=0,$20=0;
 var $22=0,$23=0,$24=0,$25=0,$26=0,$28=0,$29=0,$30=0,$32=0,$33=0,$34=0,$35=0,$36=0,$37=.0,$38=.0,$39=.0,$40=.0,$41=.0,$42=.0,$43=0;
 var $45=.0,$48=0,$49=0,$50=0,$51=0,$53=.0,$54=0,$55=0,$56=0,$57=.0,$58=0,$59=0,$60=.0,$61=0,$62=0,$63=0,$64=0,$65=.0,$66=.0,$67=0;
 var $68=0,$70=0,$71=0,$73=0,$74=0,$75=0,$76=0,$78=0,$79=0,$80=0,$81=0,$82=0,$84=0,$85=0,$86=0,$87=0,$88=0,$89=0,$90=0,$91=0;
 var $92=0,$93=0,$94=0,$95=0,$96=0,$97=0,$98=0,$99=0,$100=0,$101=0,$102=0,$103=0,$104=0,$105=.0,$106=0,$107=0,$108=0,$109=.0,$110=.0,$111=0;
 var $112=0,$113=0,$114=0,$115=0,$116=0,$117=0,$118=0,$119=0,$120=.0,$121=0,$122=0,$123=0,$124=.0,$125=.0,$126=0,$127=0,$128=0,$129=0,$130=0,$131=.0;
 var $132=.0,$133=0,$134=0,$135=0,$136=0,$138=0,$139=0,$140=0,$142=0,$143=0,$144=0,$145=0,$146=0,$147=0,$148=0,$149=0,$150=0,$151=0,$152=0,$153=0;
 var $154=0,$155=.0,$156=0,$157=0,$158=0,$159=.0,$160=.0,$161=0,$162=0,$163=0,$164=0,$165=0,$166=.0,$167=.0,$168=.0,$169=.0,$170=0,$171=0,$172=0,$173=0;
 var $174=.0,$175=0,$176=0,$177=0,$178=0,$180=0,$181=0,$182=0,$183=0,$184=0,$185=0,$186=0,$187=0,$188=.0,$189=.0,$190=.0,$191=.0,$192=.0,$193=.0,$194=0;
 var $195=0,$196=0,$197=0,$198=0,$199=0,$200=0,$201=0,$202=0,$203=.0,$204=0,$205=0,$206=0,$207=0,$208=0,$209=0,$210=.0,$211=0,$212=0,$213=0,$214=0;
 var $215=0,$216=0,$217=0,$218=0,$219=.0,$220=0,$221=0,$222=0,$223=0,$224=.0,$225=.0,$226=.0,$227=.0,$228=.0,$229=.0,$230=0,$231=0,$232=0,$233=.0,$234=.0;
 var $235=0,$237=.0,$238=0,$239=0,$240=0,$242=.0,$243=0,$245=.0,$246=0,$247=0,$248=0,$249=.0,$250=.0,$252=0,$253=0,$254=0,$255=.0,$256=0,$257=0,$258=0;
 var $259=.0,$260=0,$262=0,$263=0,$264=0,$265=.0,$266=0,$267=0,$268=0,$270=.0,$271=0,$273=.0,$274=0,$275=0,$276=0,$277=.0,$278=.0,$281=0,$282=0,$285=0;
 var $286=0,$288=0,$289=0,$290=0,$291=0,$292=0,$293=0,$295=0,$296=0,label=0;
 var sp=0;sp=STACKTOP;STACKTOP=(STACKTOP+576)|0;








 $max=((sp)|0);
 $avg=(((sp)+(256))|0);



 $mask_idx_s=(((sp)+(512))|0);













 $1=$gfc;
 $2=$fftenergy_s;
 $3=$eb;
 $4=$thr;
 $5=$chn;
 $6=$sblock;
 $7=$1;
 $8=(($7+21564)|0);
 $psv=$8;
 $9=$1;
 $10=(($9+85800)|0);
 $11=((HEAP32[(($10)>>2)])|0);
 $12=(($11+2160)|0);
 $gds=$12;
 $13=$max;
 _memset((((($13)|0))|0), ((((0)|0))|0), ((((256)|0))|0))|0;
 $14=$avg;
 _memset((((($14)|0))|0), ((((0)|0))|0), ((((256)|0))|0))|0;
 $j=0;
 $b=0;
 while(1) {
  $16=$b;
  $17=$gds;
  $18=(($17+2148)|0);
  $19=((HEAP32[(($18)>>2)])|0);
  $20=($16|0)<($19|0);
  if (!($20)) {
   break;
  }
  $ebb=0.0;
  $m=0.0;
  $22=$b;
  $23=$gds;
  $24=(($23+1716)|0);
  $25=(($24+($22<<2))|0);
  $26=((HEAP32[(($25)>>2)])|0);
  $n=$26;
  $i=0;
  while(1) {
   $28=$i;
   $29=$n;
   $30=($28|0)<($29|0);
   if (!($30)) {
    break;
   }
   $32=$j;
   $33=$6;
   $34=$2;
   $35=(($34+((($33)*(516))&-1))|0);
   $36=(($35+($32<<2))|0);
   $37=(+(HEAPF32[(($36)>>2)]));
   $el=$37;
   $38=$el;
   $39=$ebb;
   $40=($39)+($38);
   $ebb=$40;
   $41=$m;
   $42=$el;
   $43=$41<$42;
   if ($43) {
    $45=$el;
    $m=$45;
   }
   $48=$i;
   $49=((($48)+(1))|0);
   $i=$49;
   $50=$j;
   $51=((($50)+(1))|0);
   $j=$51;
  }
  $53=$ebb;
  $54=$b;
  $55=$3;
  $56=(($55+($54<<2))|0);
  HEAPF32[(($56)>>2)]=$53;
  $57=$m;
  $58=$b;
  $59=(($max+($58<<2))|0);
  HEAPF32[(($59)>>2)]=$57;
  $60=$ebb;
  $61=$b;
  $62=$gds;
  $63=(($62+512)|0);
  $64=(($63+($61<<2))|0);
  $65=(+(HEAPF32[(($64)>>2)]));
  $66=($60)*($65);
  $67=$b;
  $68=(($avg+($67<<2))|0);
  HEAPF32[(($68)>>2)]=$66;
  $70=$b;
  $71=((($70)+(1))|0);
  $b=$71;
 }
 $73=$1;
 $74=(($max)|0);
 $75=(($avg)|0);
 $76=(($mask_idx_s)|0);
 _vbrpsy_calc_mask_index_s($73,$74,$75,$76);
 $b=0;
 $j=0;
 while(1) {
  $78=$b;
  $79=$gds;
  $80=(($79+2148)|0);
  $81=((HEAP32[(($80)>>2)])|0);
  $82=($78|0)<($81|0);
  if (!($82)) {
   break;
  }
  $84=$b;
  $85=$gds;
  $86=(($85+1204)|0);
  $87=(($86+($84<<3))|0);
  $88=(($87)|0);
  $89=((HEAP32[(($88)>>2)])|0);
  $kk=$89;
  $90=$b;
  $91=$gds;
  $92=(($91+1204)|0);
  $93=(($92+($90<<3))|0);
  $94=(($93+4)|0);
  $95=((HEAP32[(($94)>>2)])|0);
  $last=$95;
  $96=$b;
  $97=(($mask_idx_s+$96)|0);
  $98=((HEAP8[($97)])|0);
  $99=($98&255);
  $100=((_mask_add_delta($99))|0);
  $delta=$100;
  $101=$b;
  $102=$gds;
  $103=(($102)|0);
  $104=(($103+($101<<2))|0);
  $105=(+(HEAPF32[(($104)>>2)]));
  $106=$1;
  $107=(($106+84768)|0);
  $108=(($107+140)|0);
  $109=(+(HEAPF32[(($108)>>2)]));
  $110=($105)*($109);
  $masking_lower=$110;
  $111=$kk;
  $112=(($mask_idx_s+$111)|0);
  $113=((HEAP8[($112)])|0);
  $114=($113&255);
  $dd=$114;
  $dd_n=1;
  $115=$j;
  $116=$gds;
  $117=(($116+2156)|0);
  $118=((HEAP32[(($117)>>2)])|0);
  $119=(($118+($115<<2))|0);
  $120=(+(HEAPF32[(($119)>>2)]));
  $121=$kk;
  $122=$3;
  $123=(($122+($121<<2))|0);
  $124=(+(HEAPF32[(($123)>>2)]));
  $125=($120)*($124);
  $126=$kk;
  $127=(($mask_idx_s+$126)|0);
  $128=((HEAP8[($127)])|0);
  $129=($128&255);
  $130=((2312+($129<<2))|0);
  $131=(+(HEAPF32[(($130)>>2)]));
  $132=($125)*($131);
  $ecb=$132;
  $133=$j;
  $134=((($133)+(1))|0);
  $j=$134;
  $135=$kk;
  $136=((($135)+(1))|0);
  $kk=$136;
  while(1) {
   $138=$kk;
   $139=$last;
   $140=($138|0)<=($139|0);
   if (!($140)) {
    break;
   }
   $142=$kk;
   $143=(($mask_idx_s+$142)|0);
   $144=((HEAP8[($143)])|0);
   $145=($144&255);
   $146=$dd;
   $147=((($146)+($145))|0);
   $dd=$147;
   $148=$dd_n;
   $149=((($148)+(1))|0);
   $dd_n=$149;
   $150=$j;
   $151=$gds;
   $152=(($151+2156)|0);
   $153=((HEAP32[(($152)>>2)])|0);
   $154=(($153+($150<<2))|0);
   $155=(+(HEAPF32[(($154)>>2)]));
   $156=$kk;
   $157=$3;
   $158=(($157+($156<<2))|0);
   $159=(+(HEAPF32[(($158)>>2)]));
   $160=($155)*($159);
   $161=$kk;
   $162=(($mask_idx_s+$161)|0);
   $163=((HEAP8[($162)])|0);
   $164=($163&255);
   $165=((2312+($164<<2))|0);
   $166=(+(HEAPF32[(($165)>>2)]));
   $167=($160)*($166);
   $x=$167;
   $168=$ecb;
   $169=$x;
   $170=$kk;
   $171=$b;
   $172=((($170)-($171))|0);
   $173=$delta;
   $174=(+(_vbrpsy_mask_add($168,$169,$172,$173)));
   $ecb=$174;
   $175=$j;
   $176=((($175)+(1))|0);
   $j=$176;
   $177=$kk;
   $178=((($177)+(1))|0);
   $kk=$178;
  }
  $180=$dd;
  $181=($180<<1);
  $182=((($181)+(1))|0);
  $183=$dd_n;
  $184=($183<<1);
  $185=(((($182|0))/(($184|0)))&-1);
  $dd=$185;
  $186=$dd;
  $187=((2312+($186<<2))|0);
  $188=(+(HEAPF32[(($187)>>2)]));
  $189=($188)*((0.5));
  $avg_mask=$189;
  $190=$avg_mask;
  $191=$ecb;
  $192=($191)*($190);
  $ecb=$192;
  $193=$ecb;
  $194=$b;
  $195=$4;
  $196=(($195+($194<<2))|0);
  HEAPF32[(($196)>>2)]=$193;
  $197=$b;
  $198=$5;
  $199=$psv;
  $200=(($199+2048)|0);
  $201=(($200+($198<<8))|0);
  $202=(($201+($197<<2))|0);
  $203=(+(HEAPF32[(($202)>>2)]));
  $204=$b;
  $205=$5;
  $206=$psv;
  $207=(($206+3072)|0);
  $208=(($207+($205<<8))|0);
  $209=(($208+($204<<2))|0);
  HEAPF32[(($209)>>2)]=$203;
  $210=$ecb;
  $211=$b;
  $212=$5;
  $213=$psv;
  $214=(($213+2048)|0);
  $215=(($214+($212<<8))|0);
  $216=(($215+($211<<2))|0);
  HEAPF32[(($216)>>2)]=$210;
  $217=$b;
  $218=(($max+($217<<2))|0);
  $219=(+(HEAPF32[(($218)>>2)]));
  $x=$219;
  $220=$b;
  $221=$gds;
  $222=(($221+256)|0);
  $223=(($222+($220<<2))|0);
  $224=(+(HEAPF32[(($223)>>2)]));
  $225=$x;
  $226=($225)*($224);
  $x=$226;
  $227=$avg_mask;
  $228=$x;
  $229=($228)*($227);
  $x=$229;
  $230=$b;
  $231=$4;
  $232=(($231+($230<<2))|0);
  $233=(+(HEAPF32[(($232)>>2)]));
  $234=$x;
  $235=$233>$234;
  if ($235) {
   $237=$x;
   $238=$b;
   $239=$4;
   $240=(($239+($238<<2))|0);
   HEAPF32[(($240)>>2)]=$237;
  }
  $242=$masking_lower;
  $243=$242>(1.0);
  if ($243) {
   $245=$masking_lower;
   $246=$b;
   $247=$4;
   $248=(($247+($246<<2))|0);
   $249=(+(HEAPF32[(($248)>>2)]));
   $250=($249)*($245);
   HEAPF32[(($248)>>2)]=$250;
  }
  $252=$b;
  $253=$4;
  $254=(($253+($252<<2))|0);
  $255=(+(HEAPF32[(($254)>>2)]));
  $256=$b;
  $257=$3;
  $258=(($257+($256<<2))|0);
  $259=(+(HEAPF32[(($258)>>2)]));
  $260=$255>$259;
  if ($260) {
   $262=$b;
   $263=$3;
   $264=(($263+($262<<2))|0);
   $265=(+(HEAPF32[(($264)>>2)]));
   $266=$b;
   $267=$4;
   $268=(($267+($266<<2))|0);
   HEAPF32[(($268)>>2)]=$265;
  }
  $270=$masking_lower;
  $271=$270<(1.0);
  if ($271) {
   $273=$masking_lower;
   $274=$b;
   $275=$4;
   $276=(($275+($274<<2))|0);
   $277=(+(HEAPF32[(($276)>>2)]));
   $278=($277)*($273);
   HEAPF32[(($276)>>2)]=$278;
  }
  $281=$b;
  $282=((($281)+(1))|0);
  $b=$282;
 }
 while(1) {
  $285=$b;
  $286=($285|0)<64;
  if (!($286)) {
   break;
  }
  $288=$b;
  $289=$3;
  $290=(($289+($288<<2))|0);
  HEAPF32[(($290)>>2)]=0.0;
  $291=$b;
  $292=$4;
  $293=(($292+($291<<2))|0);
  HEAPF32[(($293)>>2)]=0.0;
  $295=$b;
  $296=((($295)+(1))|0);
  $b=$296;
 }
 STACKTOP=sp;return;
}


function _convert_partition2scalefac_s($gfc,$eb,$thr,$chn,$sblock){
 $gfc=($gfc)|0;
 $eb=($eb)|0;
 $thr=($thr)|0;
 $chn=($chn)|0;
 $sblock=($sblock)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$psv=0,$gds=0,$enn=0,$thm=0,$sb=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$14=0,$15=0;
 var $16=0,$18=0,$19=0,$21=0,$22=0,$23=.0,$24=0,$25=0,$26=0,$27=0,$28=0,$29=0,$30=0,$31=0,$32=0,$33=0,$34=0,$35=.0,$36=0,$37=0;
 var $38=0,$39=0,$40=0,$41=0,$42=0,$43=0,$44=0,$46=0,$47=0,label=0;
 var sp=0;sp=STACKTOP;STACKTOP=(STACKTOP+112)|0;







 $enn=((sp)|0);
 $thm=(((sp)+(56))|0);

 $1=$gfc;
 $2=$eb;
 $3=$thr;
 $4=$chn;
 $5=$sblock;
 $6=$1;
 $7=(($6+21564)|0);
 $psv=$7;
 $8=$1;
 $9=(($8+85800)|0);
 $10=((HEAP32[(($9)>>2)])|0);
 $11=(($10+2160)|0);
 $gds=$11;
 $12=$gds;
 $13=$2;
 $14=$3;
 $15=(($enn)|0);
 $16=(($thm)|0);
 _convert_partition2scalefac($12,$13,$14,$15,$16);
 $sb=0;
 while(1) {
  $18=$sb;
  $19=($18|0)<13;
  if (!($19)) {
   break;
  }
  $21=$sb;
  $22=(($enn+($21<<2))|0);
  $23=(+(HEAPF32[(($22)>>2)]));
  $24=$5;
  $25=$sb;
  $26=$4;
  $27=$psv;
  $28=(($27+5072)|0);
  $29=(($28+((($26)*(244))&-1))|0);
  $30=(($29+88)|0);
  $31=(($30+((($25)*(12))&-1))|0);
  $32=(($31+($24<<2))|0);
  HEAPF32[(($32)>>2)]=$23;
  $33=$sb;
  $34=(($thm+($33<<2))|0);
  $35=(+(HEAPF32[(($34)>>2)]));
  $36=$5;
  $37=$sb;
  $38=$4;
  $39=$psv;
  $40=(($39+4096)|0);
  $41=(($40+((($38)*(244))&-1))|0);
  $42=(($41+88)|0);
  $43=(($42+((($37)*(12))&-1))|0);
  $44=(($43+($36<<2))|0);
  HEAPF32[(($44)>>2)]=$35;
  $46=$sb;
  $47=((($46)+(1))|0);
  $sb=$47;
 }
 STACKTOP=sp;return;
}


function _NS_INTERP($x,$y,$r){
 $x=+($x);
 $y=+($y);
 $r=+($r);
 var $1=.0,$2=.0,$3=.0,$4=.0,$5=.0,$6=0,$8=.0,$10=.0,$11=0,$13=.0,$15=.0,$16=0,$18=.0,$19=.0,$20=.0,$21=.0,$22=.0,$23=.0,$24=.0,$27=.0;
 var label=0;
 var sp=0;sp=STACKTOP;




 $2=$x;
 $3=$y;
 $4=$r;
 $5=$4;
 $6=$5>=(1.0);
 do {
  if ($6) {
   $8=$2;
   $1=$8;
  } else {
   $10=$4;
   $11=$10<=(0.0);
   if ($11) {
    $13=$3;
    $1=$13;
    break;
   }
   $15=$3;
   $16=$15>(0.0);
   if ($16) {
    $18=$2;
    $19=$3;
    $20=($18)/($19);
    $21=$4;
    $22=(+(Math_pow((+($20)),(+($21)))));
    $23=$3;
    $24=($22)*($23);
    $1=$24;
    break;
   } else {
    $1=0.0;
    break;
   }
  }
 } while(0);
 $27=$1;
 STACKTOP=sp;return (+($27));
}


function _vbrpsy_apply_block_type($psv,$nch,$uselongblock,$blocktype_d){
 $psv=($psv)|0;
 $nch=($nch)|0;
 $uselongblock=($uselongblock)|0;
 $blocktype_d=($blocktype_d)|0;
 var $1=0,$2=0,$3=0,$4=0,$chn=0,$blocktype=0,$6=0,$7=0,$8=0,$10=0,$11=0,$12=0,$13=0,$14=0,$16=0,$17=0,$18=0,$19=0,$20=0,$21=0;
 var $25=0,$26=0,$27=0,$28=0,$29=0,$30=0,$32=0,$33=0,$34=0,$35=0,$37=0,$38=0,$39=0,$40=0,$41=0,$42=0,$44=0,$45=0,$46=0,$47=0;
 var $50=0,$51=0,$52=0,$53=0,$54=0,$55=0,$56=0,$57=0,$58=0,$59=0,$60=0,$61=0,$62=0,$64=0,$65=0,label=0;
 var sp=0;sp=STACKTOP;






 $1=$psv;
 $2=$nch;
 $3=$uselongblock;
 $4=$blocktype_d;
 $chn=0;
 while(1) {
  $6=$chn;
  $7=$2;
  $8=($6|0)<($7|0);
  if (!($8)) {
   break;
  }
  $blocktype=0;
  $10=$chn;
  $11=$3;
  $12=(($11+($10<<2))|0);
  $13=((HEAP32[(($12)>>2)])|0);
  $14=($13|0)!=0;
  if ($14) {
   $16=$chn;
   $17=$1;
   $18=(($17+6232)|0);
   $19=(($18+($16<<2))|0);
   $20=((HEAP32[(($19)>>2)])|0);
   $21=($20|0)==2;
   if ($21) {
    $blocktype=3;
   }
  } else {
   $blocktype=2;
   $25=$chn;
   $26=$1;
   $27=(($26+6232)|0);
   $28=(($27+($25<<2))|0);
   $29=((HEAP32[(($28)>>2)])|0);
   $30=($29|0)==0;
   if ($30) {
    $32=$chn;
    $33=$1;
    $34=(($33+6232)|0);
    $35=(($34+($32<<2))|0);
    HEAP32[(($35)>>2)]=1;
   }
   $37=$chn;
   $38=$1;
   $39=(($38+6232)|0);
   $40=(($39+($37<<2))|0);
   $41=((HEAP32[(($40)>>2)])|0);
   $42=($41|0)==3;
   if ($42) {
    $44=$chn;
    $45=$1;
    $46=(($45+6232)|0);
    $47=(($46+($44<<2))|0);
    HEAP32[(($47)>>2)]=2;
   }
  }
  $50=$chn;
  $51=$1;
  $52=(($51+6232)|0);
  $53=(($52+($50<<2))|0);
  $54=((HEAP32[(($53)>>2)])|0);
  $55=$chn;
  $56=$4;
  $57=(($56+($55<<2))|0);
  HEAP32[(($57)>>2)]=$54;
  $58=$blocktype;
  $59=$chn;
  $60=$1;
  $61=(($60+6232)|0);
  $62=(($61+($59<<2))|0);
  HEAP32[(($62)>>2)]=$58;
  $64=$chn;
  $65=((($64)+(1))|0);
  $chn=$65;
 }
 STACKTOP=sp;return;
}


function _pecalc_s($mr,$masking_lower){
 $mr=($mr)|0;
 $masking_lower=+($masking_lower);
 var $1=0,$2=.0,$pe_s=.0,$sb=0,$sblock=0,$thm=.0,$x=.0,$en=.0,$4=0,$5=0,$8=0,$9=0,$11=0,$12=0,$13=0,$14=0,$15=0,$16=0,$17=0,$18=.0;
 var $19=.0,$20=0,$22=.0,$23=.0,$24=.0,$25=0,$26=0,$27=0,$28=0,$29=0,$30=0,$31=0,$32=.0,$33=.0,$34=.0,$35=0,$37=.0,$38=.0,$39=.0,$40=0;
 var $42=0,$43=0,$44=.0,$45=.0,$46=.0,$47=.0,$48=.0,$49=.0,$50=.0,$52=0,$53=0,$54=.0,$55=.0,$56=.0,$57=.0,$58=.0,$59=.0,$60=.0,$61=.0,$62=.0;
 var $63=.0,$64=.0,$65=.0,$66=.0,$71=0,$72=0,$75=0,$76=0,$78=.0,label=0;
 var sp=0;sp=STACKTOP;








 $1=$mr;
 $2=$masking_lower;
 $pe_s=309.07000732421875;
 $sb=0;
 while(1) {
  $4=$sb;
  $5=($4>>>0)<((12)>>>0);
  if (!($5)) {
   break;
  }
  $sblock=0;
  while(1) {
   $8=$sblock;
   $9=($8>>>0)<((3)>>>0);
   if (!($9)) {
    break;
   }
   $11=$sblock;
   $12=$sb;
   $13=$1;
   $14=(($13)|0);
   $15=(($14+88)|0);
   $16=(($15+((($12)*(12))&-1))|0);
   $17=(($16+($11<<2))|0);
   $18=(+(HEAPF32[(($17)>>2)]));
   $thm=$18;
   $19=$thm;
   $20=$19>(0.0);
   if ($20) {
    $22=$thm;
    $23=$2;
    $24=($22)*($23);
    $x=$24;
    $25=$sblock;
    $26=$sb;
    $27=$1;
    $28=(($27+244)|0);
    $29=(($28+88)|0);
    $30=(($29+((($26)*(12))&-1))|0);
    $31=(($30+($25<<2))|0);
    $32=(+(HEAPF32[(($31)>>2)]));
    $en=$32;
    $33=$en;
    $34=$x;
    $35=$33>$34;
    if ($35) {
     $37=$en;
     $38=$x;
     $39=($38)*((10000000000.0));
     $40=$37>$39;
     if ($40) {
      $42=$sb;
      $43=((9640+($42<<2))|0);
      $44=(+(HEAPF32[(($43)>>2)]));
      $45=$44;
      $46=($45)*((23.02585092994046));
      $47=$pe_s;
      $48=$47;
      $49=($48)+($46);
      $50=$49;
      $pe_s=$50;
     } else {
      $52=$sb;
      $53=((9640+($52<<2))|0);
      $54=(+(HEAPF32[(($53)>>2)]));
      $55=$54;
      $56=$en;
      $57=$x;
      $58=($56)/($57);
      $59=(+(_fast_log2($58)));
      $60=$59;
      $61=($60)*((0.30102999566398114));
      $62=($55)*($61);
      $63=$pe_s;
      $64=$63;
      $65=($64)+($62);
      $66=$65;
      $pe_s=$66;
     }
    }
   }
   $71=$sblock;
   $72=((($71)+(1))|0);
   $sblock=$72;
  }
  $75=$sb;
  $76=((($75)+(1))|0);
  $sb=$76;
 }
 $78=$pe_s;
 STACKTOP=sp;return (+($78));
}


function _pecalc_l($mr,$masking_lower){
 $mr=($mr)|0;
 $masking_lower=+($masking_lower);
 var $1=0,$2=.0,$pe_l=.0,$sb=0,$thm=.0,$x=.0,$en=.0,$4=0,$5=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=.0,$13=.0,$14=0,$16=.0,$17=.0,$18=.0;
 var $19=0,$20=0,$21=0,$22=0,$23=0,$24=.0,$25=.0,$26=.0,$27=0,$29=.0,$30=.0,$31=.0,$32=0,$34=0,$35=0,$36=.0,$37=.0,$38=.0,$39=.0,$40=.0;
 var $41=.0,$42=.0,$44=0,$45=0,$46=.0,$47=.0,$48=.0,$49=.0,$50=.0,$51=.0,$52=.0,$53=.0,$54=.0,$55=.0,$56=.0,$57=.0,$58=.0,$63=0,$64=0,$66=.0;
 var label=0;
 var sp=0;sp=STACKTOP;







 $1=$mr;
 $2=$masking_lower;
 $pe_l=281.0574951171875;
 $sb=0;
 while(1) {
  $4=$sb;
  $5=($4>>>0)<((21)>>>0);
  if (!($5)) {
   break;
  }
  $7=$sb;
  $8=$1;
  $9=(($8)|0);
  $10=(($9)|0);
  $11=(($10+($7<<2))|0);
  $12=(+(HEAPF32[(($11)>>2)]));
  $thm=$12;
  $13=$thm;
  $14=$13>(0.0);
  if ($14) {
   $16=$thm;
   $17=$2;
   $18=($16)*($17);
   $x=$18;
   $19=$sb;
   $20=$1;
   $21=(($20+244)|0);
   $22=(($21)|0);
   $23=(($22+($19<<2))|0);
   $24=(+(HEAPF32[(($23)>>2)]));
   $en=$24;
   $25=$en;
   $26=$x;
   $27=$25>$26;
   if ($27) {
    $29=$en;
    $30=$x;
    $31=($30)*((10000000000.0));
    $32=$29>$31;
    if ($32) {
     $34=$sb;
     $35=((9688+($34<<2))|0);
     $36=(+(HEAPF32[(($35)>>2)]));
     $37=$36;
     $38=($37)*((23.02585092994046));
     $39=$pe_l;
     $40=$39;
     $41=($40)+($38);
     $42=$41;
     $pe_l=$42;
    } else {
     $44=$sb;
     $45=((9688+($44<<2))|0);
     $46=(+(HEAPF32[(($45)>>2)]));
     $47=$46;
     $48=$en;
     $49=$x;
     $50=($48)/($49);
     $51=(+(_fast_log2($50)));
     $52=$51;
     $53=($52)*((0.30102999566398114));
     $54=($47)*($53);
     $55=$pe_l;
     $56=$55;
     $57=($56)+($54);
     $58=$57;
     $pe_l=$58;
    }
   }
  }
  $63=$sb;
  $64=((($63)+(1))|0);
  $sb=$64;
 }
 $66=$pe_l;
 STACKTOP=sp;return (+($66));
}


function _init_numline($gd,$sfreq,$fft_size,$mdct_size,$sbmax,$scalepos){
 $gd=($gd)|0;
 $sfreq=+($sfreq);
 $fft_size=($fft_size)|0;
 $mdct_size=($mdct_size)|0;
 $sbmax=($sbmax)|0;
 $scalepos=($scalepos)|0;
 var $1=0,$2=.0,$3=0,$4=0,$5=0,$6=0,$b_frq=0,$mdct_freq_frac=.0,$deltafreq=.0,$partition=0,$i=0,$j=0,$ni=0,$sfb=0,$bark1=.0,$j2=0,$nl=0,$nl1=0,$freq=.0,$i1=0;
 var $i2=0,$bo=0,$start=0,$end=0,$f_tmp=.0,$bo_w=.0,$7=.0,$8=0,$9=.0,$10=.0,$11=.0,$12=0,$13=.0,$14=0,$15=.0,$16=.0,$17=.0,$18=0,$19=0,$20=.0;
 var $21=.0,$22=.0,$24=0,$25=0,$27=.0,$28=0,$29=.0,$30=.0,$31=.0,$32=.0,$33=0,$34=.0,$35=.0,$36=0,$37=0,$38=0,$40=.0,$41=0,$42=.0,$43=.0;
 var $44=.0,$45=.0,$46=.0,$47=.0,$48=0,$50=0,$51=0,$52=0,$53=0,$55=0,$58=0,$59=0,$61=0,$62=0,$63=0,$64=0,$65=0,$66=0,$67=0,$68=0;
 var $69=0,$70=0,$72=0,$73=.0,$74=.0,$77=.0,$78=0,$79=0,$80=0,$81=0,$82=0,$83=0,$85=0,$86=0,$87=0,$89=0,$90=0,$91=0,$92=0,$94=0;
 var $95=0,$96=0,$97=0,$99=0,$100=0,$101=0,$102=0,$105=0,$106=0,$108=.0,$109=0,$110=.0,$111=.0,$112=0,$113=0,$114=0,$115=0,$116=0,$117=0,$118=0;
 var $119=0,$121=0,$122=0,$123=0,$124=0,$125=0,$127=0,$128=0,$129=0,$130=0,$131=0,$132=.0,$133=0,$134=0,$135=0,$136=0,$137=.0,$138=.0,$139=.0,$140=.0;
 var $141=.0,$142=0,$143=0,$144=0,$145=0,$146=0,$147=0,$148=0,$150=0,$151=0,$154=0,$155=0,$157=0,$158=0,$159=0,$160=0,$162=0,$163=0,$166=0,$167=0;
 var $168=0,$170=0,$171=0,$172=0,$173=0,$174=0,$175=0,$176=0,$177=0,$178=0,$179=.0,$180=.0,$181=0,$182=.0,$183=.0,$184=.0,$185=.0,$186=.0,$187=0,$188=0;
 var $189=0,$192=.0,$193=.0,$194=0,$195=.0,$196=.0,$197=.0,$198=.0,$199=.0,$200=0,$201=0,$202=0,$203=0,$204=0,$206=0,$207=0,$209=0,$210=0,$211=0,$212=0;
 var $213=0,$214=0,$215=0,$216=0,$217=0,$218=0,$219=0,$220=0,$221=0,$222=0,$223=0,$224=0,$225=0,$226=0,$227=0,$228=0,$229=.0,$230=0,$231=.0,$232=.0;
 var $233=.0,$234=0,$235=0,$236=.0,$237=.0,$238=0,$239=0,$240=0,$241=.0,$242=0,$243=0,$244=.0,$245=.0,$246=.0,$247=.0,$248=0,$251=.0,$252=0,$256=.0,$257=0;
 var $258=0,$259=0,$260=0,$261=.0,$262=0,$263=.0,$264=.0,$265=.0,$266=.0,$267=0,$268=0,$269=0,$270=0,$272=0,$273=0,label=0;
 var sp=0;sp=STACKTOP;STACKTOP=(STACKTOP+2320)|0;






 $b_frq=((sp)|0);


 $partition=(((sp)+(264))|0);
















 $1=$gd;
 $2=$sfreq;
 $3=$fft_size;
 $4=$mdct_size;
 $5=$sbmax;
 $6=$scalepos;
 $7=$2;
 $8=$4;
 $9=(+((($8|0))|0));
 $10=((2.0))*($9);
 $11=($7)/($10);
 $mdct_freq_frac=$11;
 $12=$3;
 $13=(+((($12|0))|0));
 $14=$4;
 $15=(+((($14|0))|0));
 $16=((2.0))*($15);
 $17=($13)/($16);
 $deltafreq=$17;
 $18=$partition;
 _memset((((($18)|0))|0), ((((0)|0))|0), ((((2052)|0))|0))|0;
 $19=$3;
 $20=(+((($19|0))|0));
 $21=$2;
 $22=($21)/($20);
 $2=$22;
 $j=0;
 $ni=0;
 $i=0;
 while(1) {
  $24=$i;
  $25=($24|0)<64;
  if (!($25)) {
   break;
  }
  $27=$2;
  $28=$j;
  $29=(+((($28|0))|0));
  $30=($27)*($29);
  $31=(+(_freq2bark($30)));
  $bark1=$31;
  $32=$2;
  $33=$j;
  $34=(+((($33|0))|0));
  $35=($32)*($34);
  $36=$i;
  $37=(($b_frq+($36<<2))|0);
  HEAPF32[(($37)>>2)]=$35;
  $38=$j;
  $j2=$38;
  while(1) {
   $40=$2;
   $41=$j2;
   $42=(+((($41|0))|0));
   $43=($40)*($42);
   $44=(+(_freq2bark($43)));
   $45=$bark1;
   $46=($44)-($45);
   $47=$46;
   $48=$47<(0.34);
   if ($48) {
    $50=$j2;
    $51=$3;
    $52=(((($51|0))/(2))&-1);
    $53=($50|0)<=($52|0);
    $55=$53;
   } else {
    $55=0;
   }

   if (!($55)) {
    break;
   }
   $58=$j2;
   $59=((($58)+(1))|0);
   $j2=$59;
  }
  $61=$j2;
  $62=$j;
  $63=((($61)-($62))|0);
  $nl=$63;
  $64=$nl;
  $65=$i;
  $66=$1;
  $67=(($66+1716)|0);
  $68=(($67+($65<<2))|0);
  HEAP32[(($68)>>2)]=$64;
  $69=$nl;
  $70=($69|0)>0;
  if ($70) {
   $72=$nl;
   $73=(+((($72|0))|0));
   $74=((1.0))/($73);
   $77=$74;
  } else {
   $77=0.0;
  }

  $78=$i;
  $79=$1;
  $80=(($79+512)|0);
  $81=(($80+($78<<2))|0);
  HEAPF32[(($81)>>2)]=$77;
  $82=$i;
  $83=((($82)+(1))|0);
  $ni=$83;
  while(1) {
   $85=$j;
   $86=$j2;
   $87=($85|0)<($86|0);
   if (!($87)) {
    break;
   }
   $89=$i;
   $90=$j;
   $91=((($90)+(1))|0);
   $j=$91;
   $92=(($partition+($90<<2))|0);
   HEAP32[(($92)>>2)]=$89;
  }
  $94=$j;
  $95=$3;
  $96=(((($95|0))/(2))&-1);
  $97=($94|0)>($96|0);
  if ($97) {
   label = 16;
   break;
  }
  $105=$i;
  $106=((($105)+(1))|0);
  $i=$106;
 }
 if ((label|0) == 16) {
  $99=$3;
  $100=(((($99|0))/(2))&-1);
  $j=$100;
  $101=$i;
  $102=((($101)+(1))|0);
  $i=$102;
 }
 $108=$2;
 $109=$j;
 $110=(+((($109|0))|0));
 $111=($108)*($110);
 $112=$i;
 $113=(($b_frq+($112<<2))|0);
 HEAPF32[(($113)>>2)]=$111;
 $114=$5;
 $115=$1;
 $116=(($115+2152)|0);
 HEAP32[(($116)>>2)]=$114;
 $117=$ni;
 $118=$1;
 $119=(($118+2148)|0);
 HEAP32[(($119)>>2)]=$117;
 $j=0;
 $i=0;
 while(1) {
  $121=$i;
  $122=$1;
  $123=(($122+2148)|0);
  $124=((HEAP32[(($123)>>2)])|0);
  $125=($121|0)<($124|0);
  if (!($125)) {
   break;
  }
  $127=$i;
  $128=$1;
  $129=(($128+1716)|0);
  $130=(($129+($127<<2))|0);
  $131=((HEAP32[(($130)>>2)])|0);
  $nl1=$131;
  $132=$2;
  $133=$j;
  $134=$nl1;
  $135=(((($134|0))/(2))&-1);
  $136=((($133)+($135))|0);
  $137=(+((($136|0))|0));
  $138=($132)*($137);
  $freq=$138;
  $139=$freq;
  $140=$139;
  $141=(+(_stereo_demask($140)));
  $142=$i;
  $143=$1;
  $144=(($143+768)|0);
  $145=(($144+($142<<2))|0);
  HEAPF32[(($145)>>2)]=$141;
  $146=$nl1;
  $147=$j;
  $148=((($147)+($146))|0);
  $j=$148;
  $150=$i;
  $151=((($150)+(1))|0);
  $i=$151;
 }
 while(1) {
  $154=$i;
  $155=($154|0)<64;
  if (!($155)) {
   break;
  }
  $157=$i;
  $158=$1;
  $159=(($158+768)|0);
  $160=(($159+($157<<2))|0);
  HEAPF32[(($160)>>2)]=1.0;
  $162=$i;
  $163=((($162)+(1))|0);
  $i=$163;
 }
 $sfb=0;
 while(1) {
  $166=$sfb;
  $167=$5;
  $168=($166|0)<($167|0);
  if (!($168)) {
   break;
  }
  $170=$sfb;
  $171=$6;
  $172=(($171+($170<<2))|0);
  $173=((HEAP32[(($172)>>2)])|0);
  $start=$173;
  $174=$sfb;
  $175=((($174)+(1))|0);
  $176=$6;
  $177=(($176+($175<<2))|0);
  $178=((HEAP32[(($177)>>2)])|0);
  $end=$178;
  $179=$deltafreq;
  $180=$179;
  $181=$start;
  $182=(+((($181|0))|0));
  $183=($182)-((0.5));
  $184=($180)*($183);
  $185=((0.5))+($184);
  $186=(+(Math_floor($185)));
  $187=(~~($186));
  $i1=$187;
  $188=$i1;
  $189=($188|0)<0;
  if ($189) {
   $i1=0;
  }
  $192=$deltafreq;
  $193=$192;
  $194=$end;
  $195=(+((($194|0))|0));
  $196=($195)-((0.5));
  $197=($193)*($196);
  $198=((0.5))+($197);
  $199=(+(Math_floor($198)));
  $200=(~~($199));
  $i2=$200;
  $201=$i2;
  $202=$3;
  $203=(((($202|0))/(2))&-1);
  $204=($201|0)>($203|0);
  if ($204) {
   $206=$3;
   $207=(((($206|0))/(2))&-1);
   $i2=$207;
  }
  $209=$i2;
  $210=(($partition+($209<<2))|0);
  $211=((HEAP32[(($210)>>2)])|0);
  $bo=$211;
  $212=$i1;
  $213=(($partition+($212<<2))|0);
  $214=((HEAP32[(($213)>>2)])|0);
  $215=$i2;
  $216=(($partition+($215<<2))|0);
  $217=((HEAP32[(($216)>>2)])|0);
  $218=((($214)+($217))|0);
  $219=(((($218|0))/(2))&-1);
  $220=$sfb;
  $221=$1;
  $222=(($221+1972)|0);
  $223=(($222+($220<<2))|0);
  HEAP32[(($223)>>2)]=$219;
  $224=$bo;
  $225=$sfb;
  $226=$1;
  $227=(($226+2060)|0);
  $228=(($227+($225<<2))|0);
  HEAP32[(($228)>>2)]=$224;
  $229=$mdct_freq_frac;
  $230=$end;
  $231=(+((($230|0))|0));
  $232=($229)*($231);
  $f_tmp=$232;
  $233=$f_tmp;
  $234=$bo;
  $235=(($b_frq+($234<<2))|0);
  $236=(+(HEAPF32[(($235)>>2)]));
  $237=($233)-($236);
  $238=$bo;
  $239=((($238)+(1))|0);
  $240=(($b_frq+($239<<2))|0);
  $241=(+(HEAPF32[(($240)>>2)]));
  $242=$bo;
  $243=(($b_frq+($242<<2))|0);
  $244=(+(HEAPF32[(($243)>>2)]));
  $245=($241)-($244);
  $246=($237)/($245);
  $bo_w=$246;
  $247=$bo_w;
  $248=$247<(0.0);
  if ($248) {
   $bo_w=0.0;
  } else {
   $251=$bo_w;
   $252=$251>(1.0);
   if ($252) {
    $bo_w=1.0;
   }
  }
  $256=$bo_w;
  $257=$sfb;
  $258=$1;
  $259=(($258+1112)|0);
  $260=(($259+($257<<2))|0);
  HEAPF32[(($260)>>2)]=$256;
  $261=$mdct_freq_frac;
  $262=$start;
  $263=(+((($262|0))|0));
  $264=($261)*($263);
  $265=$264;
  $266=(+(_stereo_demask($265)));
  $267=$sfb;
  $268=$1;
  $269=(($268+1024)|0);
  $270=(($269+($267<<2))|0);
  HEAPF32[(($270)>>2)]=$266;
  $272=$sfb;
  $273=((($272)+(1))|0);
  $sfb=$273;
 }
 STACKTOP=sp;return;
}


function _compute_bark_values($gd,$sfreq,$fft_size,$bval,$bval_width){
 $gd=($gd)|0;
 $sfreq=+($sfreq);
 $fft_size=($fft_size)|0;
 $bval=($bval)|0;
 $bval_width=($bval_width)|0;
 var $1=0,$2=.0,$3=0,$4=0,$5=0,$k=0,$j=0,$ni=0,$w=0,$bark1=.0,$bark2=.0,$6=0,$7=0,$8=0,$9=0,$10=.0,$11=.0,$12=.0,$14=0,$15=0;
 var $16=0,$18=0,$19=0,$20=0,$21=0,$22=0,$23=.0,$24=0,$25=.0,$26=.0,$27=.0,$28=.0,$29=0,$30=0,$31=0,$32=0,$33=.0,$34=.0,$35=.0,$36=.0;
 var $37=.0,$38=.0,$39=.0,$40=.0,$41=.0,$42=0,$43=0,$44=0,$45=.0,$46=.0,$47=0,$48=.0,$49=.0,$50=.0,$51=.0,$52=.0,$53=.0,$54=.0,$55=0,$56=0;
 var $57=0,$58=.0,$59=.0,$60=.0,$61=.0,$62=.0,$63=.0,$64=.0,$65=.0,$66=0,$67=0,$68=0,$69=0,$70=0,$71=0,$73=0,$74=0,label=0;
 var sp=0;sp=STACKTOP;











 $1=$gd;
 $2=$sfreq;
 $3=$fft_size;
 $4=$bval;
 $5=$bval_width;
 $j=0;
 $6=$1;
 $7=(($6+2148)|0);
 $8=((HEAP32[(($7)>>2)])|0);
 $ni=$8;
 $9=$3;
 $10=(+((($9|0))|0));
 $11=$2;
 $12=($11)/($10);
 $2=$12;
 $k=0;
 while(1) {
  $14=$k;
  $15=$ni;
  $16=($14|0)<($15|0);
  if (!($16)) {
   break;
  }
  $18=$k;
  $19=$1;
  $20=(($19+1716)|0);
  $21=(($20+($18<<2))|0);
  $22=((HEAP32[(($21)>>2)])|0);
  $w=$22;
  $23=$2;
  $24=$j;
  $25=(+((($24|0))|0));
  $26=($23)*($25);
  $27=(+(_freq2bark($26)));
  $bark1=$27;
  $28=$2;
  $29=$j;
  $30=$w;
  $31=((($29)+($30))|0);
  $32=((($31)-(1))|0);
  $33=(+((($32|0))|0));
  $34=($28)*($33);
  $35=(+(_freq2bark($34)));
  $bark2=$35;
  $36=$bark1;
  $37=$bark2;
  $38=($36)+($37);
  $39=$38;
  $40=((0.5))*($39);
  $41=$40;
  $42=$k;
  $43=$4;
  $44=(($43+($42<<2))|0);
  HEAPF32[(($44)>>2)]=$41;
  $45=$2;
  $46=$45;
  $47=$j;
  $48=(+((($47|0))|0));
  $49=($48)-((0.5));
  $50=($46)*($49);
  $51=$50;
  $52=(+(_freq2bark($51)));
  $bark1=$52;
  $53=$2;
  $54=$53;
  $55=$j;
  $56=$w;
  $57=((($55)+($56))|0);
  $58=(+((($57|0))|0));
  $59=($58)-((0.5));
  $60=($54)*($59);
  $61=$60;
  $62=(+(_freq2bark($61)));
  $bark2=$62;
  $63=$bark2;
  $64=$bark1;
  $65=($63)-($64);
  $66=$k;
  $67=$5;
  $68=(($67+($66<<2))|0);
  HEAPF32[(($68)>>2)]=$65;
  $69=$w;
  $70=$j;
  $71=((($70)+($69))|0);
  $j=$71;
  $73=$k;
  $74=((($73)+(1))|0);
  $k=$74;
 }
 STACKTOP=sp;return;
}


function _init_s3_values($p,$s3ind,$npart,$bval,$bval_width,$norm){
 $p=($p)|0;
 $s3ind=($s3ind)|0;
 $npart=($npart)|0;
 $bval=($bval)|0;
 $bval_width=($bval_width)|0;
 $norm=($norm)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$s3=0,$i=0,$j=0,$k=0,$numberOfNoneZero=0,$v=.0,$8=0,$9=0,$10=0,$12=0,$13=0,$14=0,$17=0;
 var $18=0,$19=0,$21=0,$22=0,$23=0,$24=.0,$25=0,$26=0,$27=0,$28=.0,$29=.0,$30=.0,$31=0,$32=0,$33=0,$34=.0,$35=.0,$36=.0,$37=0,$38=0;
 var $39=0,$40=.0,$41=.0,$42=0,$43=0,$44=0,$45=0,$47=0,$48=0,$51=0,$52=0,$55=0,$56=0,$57=0,$60=0,$61=0,$62=0,$64=0,$65=0,$66=0;
 var $67=0,$68=.0,$69=0,$73=0,$74=0,$76=0,$77=0,$78=0,$79=0,$80=0,$81=0,$82=0,$84=0,$85=0,$87=0,$88=0,$89=0,$90=0,$91=.0,$92=0;
 var $96=0,$97=0,$99=0,$100=0,$101=0,$102=0,$103=0,$104=0,$105=0,$106=0,$107=0,$108=0,$109=0,$110=0,$111=0,$112=0,$113=0,$114=0,$115=0,$116=0;
 var $117=0,$119=0,$120=0,$122=0,$123=0,$124=0,$125=0,$126=0,$127=0,$128=0,$129=0,$133=0,$134=0,$135=0,$137=0,$138=0,$139=0,$140=0,$141=0,$143=0;
 var $144=0,$145=0,$146=0,$147=0,$148=0,$149=0,$151=0,$152=0,$153=0,$154=0,$155=.0,$156=0,$157=0,$158=0,$159=0,$160=0,$162=0,$163=0,$166=0,$167=0;
 var $170=0,label=0;
 var sp=0;sp=STACKTOP;STACKTOP=(STACKTOP+16384)|0;







 $s3=((sp)|0);





 $2=$p;
 $3=$s3ind;
 $4=$npart;
 $5=$bval;
 $6=$bval_width;
 $7=$norm;
 $numberOfNoneZero=0;
 $8=(($s3)|0);
 $9=(($8)|0);
 $10=$9;
 _memset((((($10)|0))|0), ((((0)|0))|0), ((((16384)|0))|0))|0;
 $i=0;
 while(1) {
  $12=$i;
  $13=$4;
  $14=($12|0)<($13|0);
  if (!($14)) {
   break;
  }
  $j=0;
  while(1) {
   $17=$j;
   $18=$4;
   $19=($17|0)<($18|0);
   if (!($19)) {
    break;
   }
   $21=$i;
   $22=$5;
   $23=(($22+($21<<2))|0);
   $24=(+(HEAPF32[(($23)>>2)]));
   $25=$j;
   $26=$5;
   $27=(($26+($25<<2))|0);
   $28=(+(HEAPF32[(($27)>>2)]));
   $29=($24)-($28);
   $30=(+(_s3_func($29)));
   $31=$j;
   $32=$6;
   $33=(($32+($31<<2))|0);
   $34=(+(HEAPF32[(($33)>>2)]));
   $35=($30)*($34);
   $v=$35;
   $36=$v;
   $37=$i;
   $38=$7;
   $39=(($38+($37<<2))|0);
   $40=(+(HEAPF32[(($39)>>2)]));
   $41=($36)*($40);
   $42=$j;
   $43=$i;
   $44=(($s3+($43<<8))|0);
   $45=(($44+($42<<2))|0);
   HEAPF32[(($45)>>2)]=$41;
   $47=$j;
   $48=((($47)+(1))|0);
   $j=$48;
  }
  $51=$i;
  $52=((($51)+(1))|0);
  $i=$52;
 }
 $i=0;
 while(1) {
  $55=$i;
  $56=$4;
  $57=($55|0)<($56|0);
  if (!($57)) {
   break;
  }
  $j=0;
  while(1) {
   $60=$j;
   $61=$4;
   $62=($60|0)<($61|0);
   if (!($62)) {
    break;
   }
   $64=$j;
   $65=$i;
   $66=(($s3+($65<<8))|0);
   $67=(($66+($64<<2))|0);
   $68=(+(HEAPF32[(($67)>>2)]));
   $69=$68>(0.0);
   if ($69) {
    label = 14;
    break;
   }
   $73=$j;
   $74=((($73)+(1))|0);
   $j=$74;
  }
  if ((label|0) == 14) {
   label = 0;
  }
  $76=$j;
  $77=$i;
  $78=$3;
  $79=(($78+($77<<3))|0);
  $80=(($79)|0);
  HEAP32[(($80)>>2)]=$76;
  $81=$4;
  $82=((($81)-(1))|0);
  $j=$82;
  while(1) {
   $84=$j;
   $85=($84|0)>0;
   if (!($85)) {
    break;
   }
   $87=$j;
   $88=$i;
   $89=(($s3+($88<<8))|0);
   $90=(($89+($87<<2))|0);
   $91=(+(HEAPF32[(($90)>>2)]));
   $92=$91>(0.0);
   if ($92) {
    label = 20;
    break;
   }
   $96=$j;
   $97=((($96)-(1))|0);
   $j=$97;
  }
  if ((label|0) == 20) {
   label = 0;
  }
  $99=$j;
  $100=$i;
  $101=$3;
  $102=(($101+($100<<3))|0);
  $103=(($102+4)|0);
  HEAP32[(($103)>>2)]=$99;
  $104=$i;
  $105=$3;
  $106=(($105+($104<<3))|0);
  $107=(($106+4)|0);
  $108=((HEAP32[(($107)>>2)])|0);
  $109=$i;
  $110=$3;
  $111=(($110+($109<<3))|0);
  $112=(($111)|0);
  $113=((HEAP32[(($112)>>2)])|0);
  $114=((($108)-($113))|0);
  $115=((($114)+(1))|0);
  $116=$numberOfNoneZero;
  $117=((($116)+($115))|0);
  $numberOfNoneZero=$117;
  $119=$i;
  $120=((($119)+(1))|0);
  $i=$120;
 }
 $122=$numberOfNoneZero;
 $123=($122<<2);
 $124=((_malloc($123))|0);
 $125=$124;
 $126=$2;
 HEAP32[(($126)>>2)]=$125;
 $127=$2;
 $128=((HEAP32[(($127)>>2)])|0);
 $129=($128|0)!=0;
 if (!($129)) {
  $1=-1;
  $170=$1;
  STACKTOP=sp;return (($170)|0);
 }
 $k=0;
 $i=0;
 while(1) {
  $133=$i;
  $134=$4;
  $135=($133|0)<($134|0);
  if (!($135)) {
   break;
  }
  $137=$i;
  $138=$3;
  $139=(($138+($137<<3))|0);
  $140=(($139)|0);
  $141=((HEAP32[(($140)>>2)])|0);
  $j=$141;
  while(1) {
   $143=$j;
   $144=$i;
   $145=$3;
   $146=(($145+($144<<3))|0);
   $147=(($146+4)|0);
   $148=((HEAP32[(($147)>>2)])|0);
   $149=($143|0)<=($148|0);
   if (!($149)) {
    break;
   }
   $151=$j;
   $152=$i;
   $153=(($s3+($152<<8))|0);
   $154=(($153+($151<<2))|0);
   $155=(+(HEAPF32[(($154)>>2)]));
   $156=$k;
   $157=((($156)+(1))|0);
   $k=$157;
   $158=$2;
   $159=((HEAP32[(($158)>>2)])|0);
   $160=(($159+($156<<2))|0);
   HEAPF32[(($160)>>2)]=$155;
   $162=$j;
   $163=((($162)+(1))|0);
   $j=$163;
  }
  $166=$i;
  $167=((($166)+(1))|0);
  $i=$167;
 }
 $1=0;
 $170=$1;
 STACKTOP=sp;return (($170)|0);
}


function _init_mask_add_max_values(){
 var $1=.0,$2=.0,$3=.0,$4=.0,$5=.0,$6=.0,label=0;

 $1=(+(Math_pow(10.0,0.5625)));
 $2=$1;
 HEAPF32[((10728)>>2)]=$2;
 $3=(+(Math_pow(10.0,1.5)));
 $4=$3;
 HEAPF32[((10720)>>2)]=$4;
 $5=(+(Math_pow(10.0,1.5)));
 $6=$5;
 HEAPF32[((10712)>>2)]=$6;
 return;
}


function _psycho_loudness_approx($energy,$eql_w){
 $energy=($energy)|0;
 $eql_w=($eql_w)|0;
 var $1=0,$2=0,$i=0,$loudness_power=.0,$4=0,$5=0,$7=0,$8=0,$9=0,$10=.0,$11=0,$12=0,$13=0,$14=.0,$15=.0,$16=.0,$17=.0,$19=0,$20=0,$22=.0;
 var $23=.0,$24=.0,$25=.0,$26=.0,label=0;
 var sp=0;sp=STACKTOP;




 $1=$energy;
 $2=$eql_w;
 $loudness_power=0.0;
 $i=0;
 while(1) {
  $4=$i;
  $5=($4|0)<512;
  if (!($5)) {
   break;
  }
  $7=$i;
  $8=$1;
  $9=(($8+($7<<2))|0);
  $10=(+(HEAPF32[(($9)>>2)]));
  $11=$i;
  $12=$2;
  $13=(($12+($11<<2))|0);
  $14=(+(HEAPF32[(($13)>>2)]));
  $15=($10)*($14);
  $16=$loudness_power;
  $17=($16)+($15);
  $loudness_power=$17;
  $19=$i;
  $20=((($19)+(1))|0);
  $i=$20;
 }
 $22=$loudness_power;
 $23=$22;
 $24=($23)*((8.974871343596633e-12));
 $25=$24;
 $loudness_power=$25;
 $26=$loudness_power;
 STACKTOP=sp;return (+($26));
}


function _calc_energy($l,$fftenergy,$eb,$max,$avg){
 $l=($l)|0;
 $fftenergy=($fftenergy)|0;
 $eb=($eb)|0;
 $max=($max)|0;
 $avg=($avg)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$b=0,$j=0,$ebb=.0,$m=.0,$i=0,$el=.0,$7=0,$8=0,$9=0,$10=0,$11=0,$14=0,$15=0,$16=0,$17=0;
 var $18=0,$19=0,$20=0,$22=0,$23=0,$24=0,$25=.0,$26=.0,$27=.0,$28=.0,$29=.0,$30=.0,$31=0,$33=.0,$36=0,$37=0,$38=0,$39=0,$41=.0,$42=0;
 var $43=0,$44=0,$45=.0,$46=0,$47=0,$48=0,$49=.0,$50=0,$51=0,$52=0,$53=0,$54=.0,$55=.0,$56=0,$57=0,$58=0,$60=0,$61=0,label=0;
 var sp=0;sp=STACKTOP;











 $1=$l;
 $2=$fftenergy;
 $3=$eb;
 $4=$max;
 $5=$avg;
 $j=0;
 $b=0;
 while(1) {
  $7=$b;
  $8=$1;
  $9=(($8+2148)|0);
  $10=((HEAP32[(($9)>>2)])|0);
  $11=($7|0)<($10|0);
  if (!($11)) {
   break;
  }
  $ebb=0.0;
  $m=0.0;
  $i=0;
  while(1) {
   $14=$i;
   $15=$b;
   $16=$1;
   $17=(($16+1716)|0);
   $18=(($17+($15<<2))|0);
   $19=((HEAP32[(($18)>>2)])|0);
   $20=($14|0)<($19|0);
   if (!($20)) {
    break;
   }
   $22=$j;
   $23=$2;
   $24=(($23+($22<<2))|0);
   $25=(+(HEAPF32[(($24)>>2)]));
   $el=$25;
   $26=$el;
   $27=$ebb;
   $28=($27)+($26);
   $ebb=$28;
   $29=$m;
   $30=$el;
   $31=$29<$30;
   if ($31) {
    $33=$el;
    $m=$33;
   }
   $36=$i;
   $37=((($36)+(1))|0);
   $i=$37;
   $38=$j;
   $39=((($38)+(1))|0);
   $j=$39;
  }
  $41=$ebb;
  $42=$b;
  $43=$3;
  $44=(($43+($42<<2))|0);
  HEAPF32[(($44)>>2)]=$41;
  $45=$m;
  $46=$b;
  $47=$4;
  $48=(($47+($46<<2))|0);
  HEAPF32[(($48)>>2)]=$45;
  $49=$ebb;
  $50=$b;
  $51=$1;
  $52=(($51+512)|0);
  $53=(($52+($50<<2))|0);
  $54=(+(HEAPF32[(($53)>>2)]));
  $55=($49)*($54);
  $56=$b;
  $57=$5;
  $58=(($57+($56<<2))|0);
  HEAPF32[(($58)>>2)]=$55;
  $60=$b;
  $61=((($60)+(1))|0);
  $b=$61;
 }
 STACKTOP=sp;return;
}


function _calc_mask_index_l($gfc,$max,$avg,$mask_idx){
 $gfc=($gfc)|0;
 $max=($max)|0;
 $avg=($avg)|0;
 $mask_idx=($mask_idx)|0;
 var $1=0,$2=0,$3=0,$4=0,$gdl=0,$m=.0,$a=.0,$b=0,$k=0,$last_tab_entry=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=.0,$13=0,$14=0;
 var $15=0,$16=0,$17=.0,$18=.0,$19=.0,$20=0,$22=0,$23=0,$24=0,$25=.0,$26=.0,$27=0,$28=0,$29=0,$30=0,$31=.0,$32=0,$34=0,$35=0,$36=0;
 var $37=0,$38=.0,$40=.0,$41=.0,$42=.0,$43=.0,$44=.0,$45=.0,$46=0,$47=0,$48=0,$49=0,$50=0,$51=0,$52=0,$53=0,$54=0,$55=0,$56=0,$57=0;
 var $58=0,$59=.0,$60=.0,$61=.0,$62=.0,$63=0,$64=0,$65=0,$68=0,$69=0,$70=0,$71=0,$72=0,$74=0,$75=0,$76=0,$79=0,$80=0,$81=0,$82=0;
 var $83=0,$84=0,$86=0,$87=0,$88=0,$89=0,$90=.0,$91=0,$92=0,$93=0,$94=.0,$95=.0,$96=0,$97=0,$98=0,$99=0,$100=.0,$101=.0,$102=.0,$103=0;
 var $105=0,$106=0,$107=0,$108=0,$109=.0,$110=.0,$111=0,$112=0,$113=0,$114=.0,$115=0,$117=0,$118=0,$119=0,$120=.0,$122=.0,$123=0,$124=0,$125=0,$126=0;
 var $127=.0,$128=0,$130=0,$131=0,$132=0,$133=0,$134=.0,$136=.0,$137=.0,$138=.0,$139=.0,$140=.0,$141=.0,$142=0,$143=0,$144=0,$145=0,$146=0,$147=0,$148=0;
 var $149=0,$150=0,$151=0,$152=0,$153=0,$154=0,$155=0,$156=0,$157=0,$158=0,$159=0,$160=0,$161=0,$162=.0,$163=.0,$164=.0,$165=.0,$166=0,$167=0,$168=0;
 var $171=0,$172=0,$173=0,$174=0,$175=0,$177=0,$178=0,$179=0,$182=0,$183=0,$185=0,$186=0,$187=0,$188=0,$189=.0,$190=0,$191=0,$192=0,$193=.0,$194=.0;
 var $195=.0,$196=0,$198=0,$199=0,$200=0,$201=0,$202=.0,$203=.0,$204=0,$205=0,$206=0,$207=.0,$208=0,$210=0,$211=0,$212=0,$213=.0,$215=.0,$216=.0,$217=.0;
 var $218=.0,$219=.0,$220=.0,$221=0,$222=0,$223=0,$224=0,$225=0,$226=0,$227=0,$228=0,$229=0,$230=0,$231=0,$232=0,$233=0,$234=.0,$235=.0,$236=.0,$237=.0;
 var $238=0,$239=0,$240=0,$243=0,$244=0,$245=0,$246=0,$247=0,$249=0,$250=0,$251=0,label=0;
 var sp=0;sp=STACKTOP;










 $1=$gfc;
 $2=$max;
 $3=$avg;
 $4=$mask_idx;
 $5=$1;
 $6=(($5+85800)|0);
 $7=((HEAP32[(($6)>>2)])|0);
 $8=(($7)|0);
 $gdl=$8;
 $last_tab_entry=8;
 $b=0;
 $9=$b;
 $10=$3;
 $11=(($10+($9<<2))|0);
 $12=(+(HEAPF32[(($11)>>2)]));
 $13=$b;
 $14=((($13)+(1))|0);
 $15=$3;
 $16=(($15+($14<<2))|0);
 $17=(+(HEAPF32[(($16)>>2)]));
 $18=($12)+($17);
 $a=$18;
 $19=$a;
 $20=$19>(0.0);
 if ($20) {
  $22=$b;
  $23=$2;
  $24=(($23+($22<<2))|0);
  $25=(+(HEAPF32[(($24)>>2)]));
  $m=$25;
  $26=$m;
  $27=$b;
  $28=((($27)+(1))|0);
  $29=$2;
  $30=(($29+($28<<2))|0);
  $31=(+(HEAPF32[(($30)>>2)]));
  $32=$26<$31;
  if ($32) {
   $34=$b;
   $35=((($34)+(1))|0);
   $36=$2;
   $37=(($36+($35<<2))|0);
   $38=(+(HEAPF32[(($37)>>2)]));
   $m=$38;
  }
  $40=$m;
  $41=($40)*((2.0));
  $42=$a;
  $43=($41)-($42);
  $44=((20.0))*($43);
  $45=$a;
  $46=$b;
  $47=$gdl;
  $48=(($47+1716)|0);
  $49=(($48+($46<<2))|0);
  $50=((HEAP32[(($49)>>2)])|0);
  $51=$b;
  $52=((($51)+(1))|0);
  $53=$gdl;
  $54=(($53+1716)|0);
  $55=(($54+($52<<2))|0);
  $56=((HEAP32[(($55)>>2)])|0);
  $57=((($50)+($56))|0);
  $58=((($57)-(1))|0);
  $59=(+((($58|0))|0));
  $60=($45)*($59);
  $61=($44)/($60);
  $a=$61;
  $62=$a;
  $63=(~~($62));
  $k=$63;
  $64=$k;
  $65=($64|0)>8;
  if ($65) {
   $k=8;
  }
  $68=$k;
  $69=(($68)&255);
  $70=$b;
  $71=$4;
  $72=(($71+$70)|0);
  HEAP8[($72)]=$69;
 } else {
  $74=$b;
  $75=$4;
  $76=(($75+$74)|0);
  HEAP8[($76)]=0;
 }
 $b=1;
 while(1) {
  $79=$b;
  $80=$gdl;
  $81=(($80+2148)|0);
  $82=((HEAP32[(($81)>>2)])|0);
  $83=((($82)-(1))|0);
  $84=($79|0)<($83|0);
  if (!($84)) {
   break;
  }
  $86=$b;
  $87=((($86)-(1))|0);
  $88=$3;
  $89=(($88+($87<<2))|0);
  $90=(+(HEAPF32[(($89)>>2)]));
  $91=$b;
  $92=$3;
  $93=(($92+($91<<2))|0);
  $94=(+(HEAPF32[(($93)>>2)]));
  $95=($90)+($94);
  $96=$b;
  $97=((($96)+(1))|0);
  $98=$3;
  $99=(($98+($97<<2))|0);
  $100=(+(HEAPF32[(($99)>>2)]));
  $101=($95)+($100);
  $a=$101;
  $102=$a;
  $103=$102>(0.0);
  if ($103) {
   $105=$b;
   $106=((($105)-(1))|0);
   $107=$2;
   $108=(($107+($106<<2))|0);
   $109=(+(HEAPF32[(($108)>>2)]));
   $m=$109;
   $110=$m;
   $111=$b;
   $112=$2;
   $113=(($112+($111<<2))|0);
   $114=(+(HEAPF32[(($113)>>2)]));
   $115=$110<$114;
   if ($115) {
    $117=$b;
    $118=$2;
    $119=(($118+($117<<2))|0);
    $120=(+(HEAPF32[(($119)>>2)]));
    $m=$120;
   }
   $122=$m;
   $123=$b;
   $124=((($123)+(1))|0);
   $125=$2;
   $126=(($125+($124<<2))|0);
   $127=(+(HEAPF32[(($126)>>2)]));
   $128=$122<$127;
   if ($128) {
    $130=$b;
    $131=((($130)+(1))|0);
    $132=$2;
    $133=(($132+($131<<2))|0);
    $134=(+(HEAPF32[(($133)>>2)]));
    $m=$134;
   }
   $136=$m;
   $137=($136)*((3.0));
   $138=$a;
   $139=($137)-($138);
   $140=((20.0))*($139);
   $141=$a;
   $142=$b;
   $143=((($142)-(1))|0);
   $144=$gdl;
   $145=(($144+1716)|0);
   $146=(($145+($143<<2))|0);
   $147=((HEAP32[(($146)>>2)])|0);
   $148=$b;
   $149=$gdl;
   $150=(($149+1716)|0);
   $151=(($150+($148<<2))|0);
   $152=((HEAP32[(($151)>>2)])|0);
   $153=((($147)+($152))|0);
   $154=$b;
   $155=((($154)+(1))|0);
   $156=$gdl;
   $157=(($156+1716)|0);
   $158=(($157+($155<<2))|0);
   $159=((HEAP32[(($158)>>2)])|0);
   $160=((($153)+($159))|0);
   $161=((($160)-(1))|0);
   $162=(+((($161|0))|0));
   $163=($141)*($162);
   $164=($140)/($163);
   $a=$164;
   $165=$a;
   $166=(~~($165));
   $k=$166;
   $167=$k;
   $168=($167|0)>8;
   if ($168) {
    $k=8;
   }
   $171=$k;
   $172=(($171)&255);
   $173=$b;
   $174=$4;
   $175=(($174+$173)|0);
   HEAP8[($175)]=$172;
  } else {
   $177=$b;
   $178=$4;
   $179=(($178+$177)|0);
   HEAP8[($179)]=0;
  }
  $182=$b;
  $183=((($182)+(1))|0);
  $b=$183;
 }
 $185=$b;
 $186=((($185)-(1))|0);
 $187=$3;
 $188=(($187+($186<<2))|0);
 $189=(+(HEAPF32[(($188)>>2)]));
 $190=$b;
 $191=$3;
 $192=(($191+($190<<2))|0);
 $193=(+(HEAPF32[(($192)>>2)]));
 $194=($189)+($193);
 $a=$194;
 $195=$a;
 $196=$195>(0.0);
 if (!($196)) {
  $249=$b;
  $250=$4;
  $251=(($250+$249)|0);
  HEAP8[($251)]=0;
  STACKTOP=sp;return;
 }
 $198=$b;
 $199=((($198)-(1))|0);
 $200=$2;
 $201=(($200+($199<<2))|0);
 $202=(+(HEAPF32[(($201)>>2)]));
 $m=$202;
 $203=$m;
 $204=$b;
 $205=$2;
 $206=(($205+($204<<2))|0);
 $207=(+(HEAPF32[(($206)>>2)]));
 $208=$203<$207;
 if ($208) {
  $210=$b;
  $211=$2;
  $212=(($211+($210<<2))|0);
  $213=(+(HEAPF32[(($212)>>2)]));
  $m=$213;
 }
 $215=$m;
 $216=($215)*((2.0));
 $217=$a;
 $218=($216)-($217);
 $219=((20.0))*($218);
 $220=$a;
 $221=$b;
 $222=((($221)-(1))|0);
 $223=$gdl;
 $224=(($223+1716)|0);
 $225=(($224+($222<<2))|0);
 $226=((HEAP32[(($225)>>2)])|0);
 $227=$b;
 $228=$gdl;
 $229=(($228+1716)|0);
 $230=(($229+($227<<2))|0);
 $231=((HEAP32[(($230)>>2)])|0);
 $232=((($226)+($231))|0);
 $233=((($232)-(1))|0);
 $234=(+((($233|0))|0));
 $235=($220)*($234);
 $236=($219)/($235);
 $a=$236;
 $237=$a;
 $238=(~~($237));
 $k=$238;
 $239=$k;
 $240=($239|0)>8;
 if ($240) {
  $k=8;
 }
 $243=$k;
 $244=(($243)&255);
 $245=$b;
 $246=$4;
 $247=(($246+$245)|0);
 HEAP8[($247)]=$244;
 STACKTOP=sp;return;
}


function _mask_add_delta($i){
 $i=($i)|0;
 var $1=0,$2=0,$3=0,$4=0,label=0;
 var sp=0;sp=STACKTOP;

 $1=$i;
 $2=$1;
 $3=((2272+($2<<2))|0);
 $4=((HEAP32[(($3)>>2)])|0);
 STACKTOP=sp;return (($4)|0);
}


function _vbrpsy_mask_add($m1,$m2,$b,$delta){
 $m1=+($m1);
 $m2=+($m2);
 $b=($b)|0;
 $delta=($delta)|0;
 var $1=.0,$2=.0,$3=.0,$4=0,$5=0,$ratio=.0,$i=0,$6=.0,$7=0,$10=.0,$11=0,$14=.0,$15=0,$17=.0,$19=.0,$20=0,$22=.0,$24=.0,$25=.0,$26=0;
 var $28=.0,$29=.0,$30=.0,$32=.0,$33=.0,$34=.0,$36=0,$37=0,$38=0,$39=0,$41=.0,$42=.0,$43=0,$45=.0,$46=.0,$47=.0,$49=.0,$50=.0,$51=.0,$52=.0;
 var $53=0,$54=.0,$55=.0,$56=.0,$57=0,$58=0,$59=.0,$60=.0,$62=.0,$63=.0,$64=0,$66=.0,$67=.0,$68=.0,$70=.0,$71=.0,$72=0,$74=.0,$76=.0,$78=.0;
 var label=0;
 var sp=0;sp=STACKTOP;







 $2=$m1;
 $3=$m2;
 $4=$b;
 $5=$delta;
 $6=$2;
 $7=$6<(0.0);
 if ($7) {
  $2=0.0;
 }
 $10=$3;
 $11=$10<(0.0);
 if ($11) {
  $3=0.0;
 }
 $14=$2;
 $15=$14<=(0.0);
 do {
  if ($15) {
   $17=$3;
   $1=$17;
  } else {
   $19=$3;
   $20=$19<=(0.0);
   if ($20) {
    $22=$2;
    $1=$22;
    break;
   }
   $24=$3;
   $25=$2;
   $26=$24>$25;
   if ($26) {
    $28=$3;
    $29=$2;
    $30=($28)/($29);
    $ratio=$30;
   } else {
    $32=$2;
    $33=$3;
    $34=($32)/($33);
    $ratio=$34;
   }
   $36=$4;
   $37=((Math_abs((($36)|0)))|0);
   $38=$5;
   $39=($37|0)<=($38|0);
   if ($39) {
    $41=$ratio;
    $42=(+(HEAPF32[((10728)>>2)]));
    $43=$41>=$42;
    if ($43) {
     $45=$2;
     $46=$3;
     $47=($45)+($46);
     $1=$47;
     break;
    } else {
     $49=$ratio;
     $50=(+(_fast_log2($49)));
     $51=$50;
     $52=($51)*((4.816479930623698));
     $53=(~~($52));
     $i=$53;
     $54=$2;
     $55=$3;
     $56=($54)+($55);
     $57=$i;
     $58=((584+($57<<2))|0);
     $59=(+(HEAPF32[(($58)>>2)]));
     $60=($56)*($59);
     $1=$60;
     break;
    }
   }
   $62=$ratio;
   $63=(+(HEAPF32[((10720)>>2)]));
   $64=$62<$63;
   if ($64) {
    $66=$2;
    $67=$3;
    $68=($66)+($67);
    $1=$68;
    break;
   }
   $70=$2;
   $71=$3;
   $72=$70<$71;
   if ($72) {
    $74=$3;
    $2=$74;
   }
   $76=$2;
   $1=$76;
  }
 } while(0);
 $78=$1;
 STACKTOP=sp;return (+($78));
}


function _convert_partition2scalefac($gd,$eb,$thr,$enn_out,$thm_out){
 $gd=($gd)|0;
 $eb=($eb)|0;
 $thr=($thr)|0;
 $enn_out=($enn_out)|0;
 $thm_out=($thm_out)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$enn=.0,$thmm=.0,$sb=0,$b=0,$n=0,$bo_sb=0,$npart=0,$b_lim=0,$w_curr=.0,$w_next=.0,$6=0,$7=0,$8=0,$10=0,$11=0;
 var $12=0,$14=0,$15=0,$16=0,$17=0,$18=0,$19=0,$20=0,$21=0,$22=0,$23=0,$24=0,$26=0,$28=0,$30=0,$32=0,$33=0,$34=0,$36=0,$37=0;
 var $38=0,$39=.0,$40=.0,$41=.0,$42=0,$43=0,$44=0,$45=.0,$46=.0,$47=.0,$48=0,$49=0,$51=0,$52=0,$53=0,$55=.0,$56=0,$57=0,$58=0,$59=.0;
 var $60=0,$61=0,$62=0,$63=0,$64=0,$66=0,$67=0,$68=0,$69=0,$70=.0,$71=.0,$72=.0,$73=.0,$74=0,$75=0,$76=0,$77=.0,$78=.0,$79=.0,$80=.0;
 var $81=.0,$82=0,$83=0,$84=0,$85=.0,$86=.0,$87=.0,$88=.0,$89=.0,$90=0,$91=0,$92=0,$93=.0,$94=0,$95=0,$96=0,$97=.0,$98=0,$99=0,$100=0;
 var $101=.0,$102=.0,$103=.0,$104=0,$105=0,$106=0,$107=.0,$108=.0,$110=0,$111=0,$112=0,$113=0,$116=0,$117=0,$118=0,$120=0,$121=0,$122=0,$123=0,$124=0;
 var $125=0,$127=0,$128=0,label=0;
 var sp=0;sp=STACKTOP;















 $1=$gd;
 $2=$eb;
 $3=$thr;
 $4=$enn_out;
 $5=$thm_out;
 $6=$1;
 $7=(($6+2152)|0);
 $8=((HEAP32[(($7)>>2)])|0);
 $n=$8;
 $thmm=0.0;
 $enn=0.0;
 $b=0;
 $sb=0;
 while(1) {
  $10=$sb;
  $11=$n;
  $12=($10|0)<($11|0);
  if (!($12)) {
   break;
  }
  $14=$sb;
  $15=$1;
  $16=(($15+2060)|0);
  $17=(($16+($14<<2))|0);
  $18=((HEAP32[(($17)>>2)])|0);
  $bo_sb=$18;
  $19=$1;
  $20=(($19+2148)|0);
  $21=((HEAP32[(($20)>>2)])|0);
  $npart=$21;
  $22=$bo_sb;
  $23=$npart;
  $24=($22|0)<($23|0);
  if ($24) {
   $26=$bo_sb;
   $30=$26;
  } else {
   $28=$npart;
   $30=$28;
  }

  $b_lim=$30;
  while(1) {
   $32=$b;
   $33=$b_lim;
   $34=($32|0)<($33|0);
   if (!($34)) {
    break;
   }
   $36=$b;
   $37=$2;
   $38=(($37+($36<<2))|0);
   $39=(+(HEAPF32[(($38)>>2)]));
   $40=$enn;
   $41=($40)+($39);
   $enn=$41;
   $42=$b;
   $43=$3;
   $44=(($43+($42<<2))|0);
   $45=(+(HEAPF32[(($44)>>2)]));
   $46=$thmm;
   $47=($46)+($45);
   $thmm=$47;
   $48=$b;
   $49=((($48)+(1))|0);
   $b=$49;
  }
  $51=$b;
  $52=$npart;
  $53=($51|0)>=($52|0);
  if ($53) {
   label = 10;
   break;
  }
  $66=$sb;
  $67=$1;
  $68=(($67+1112)|0);
  $69=(($68+($66<<2))|0);
  $70=(+(HEAPF32[(($69)>>2)]));
  $w_curr=$70;
  $71=$w_curr;
  $72=((1.0))-($71);
  $w_next=$72;
  $73=$w_curr;
  $74=$b;
  $75=$2;
  $76=(($75+($74<<2))|0);
  $77=(+(HEAPF32[(($76)>>2)]));
  $78=($73)*($77);
  $79=$enn;
  $80=($79)+($78);
  $enn=$80;
  $81=$w_curr;
  $82=$b;
  $83=$3;
  $84=(($83+($82<<2))|0);
  $85=(+(HEAPF32[(($84)>>2)]));
  $86=($81)*($85);
  $87=$thmm;
  $88=($87)+($86);
  $thmm=$88;
  $89=$enn;
  $90=$sb;
  $91=$4;
  $92=(($91+($90<<2))|0);
  HEAPF32[(($92)>>2)]=$89;
  $93=$thmm;
  $94=$sb;
  $95=$5;
  $96=(($95+($94<<2))|0);
  HEAPF32[(($96)>>2)]=$93;
  $97=$w_next;
  $98=$b;
  $99=$2;
  $100=(($99+($98<<2))|0);
  $101=(+(HEAPF32[(($100)>>2)]));
  $102=($97)*($101);
  $enn=$102;
  $103=$w_next;
  $104=$b;
  $105=$3;
  $106=(($105+($104<<2))|0);
  $107=(+(HEAPF32[(($106)>>2)]));
  $108=($103)*($107);
  $thmm=$108;
  $110=$b;
  $111=((($110)+(1))|0);
  $b=$111;
  $112=$sb;
  $113=((($112)+(1))|0);
  $sb=$113;
 }
 if ((label|0) == 10) {
  $55=$enn;
  $56=$sb;
  $57=$4;
  $58=(($57+($56<<2))|0);
  HEAPF32[(($58)>>2)]=$55;
  $59=$thmm;
  $60=$sb;
  $61=$5;
  $62=(($61+($60<<2))|0);
  HEAPF32[(($62)>>2)]=$59;
  $63=$sb;
  $64=((($63)+(1))|0);
  $sb=$64;
 }
 while(1) {
  $116=$sb;
  $117=$n;
  $118=($116|0)<($117|0);
  if (!($118)) {
   break;
  }
  $120=$sb;
  $121=$4;
  $122=(($121+($120<<2))|0);
  HEAPF32[(($122)>>2)]=0.0;
  $123=$sb;
  $124=$5;
  $125=(($124+($123<<2))|0);
  HEAPF32[(($125)>>2)]=0.0;
  $127=$sb;
  $128=((($127)+(1))|0);
  $sb=$128;
 }
 STACKTOP=sp;return;
}


function _vbrpsy_calc_mask_index_s($gfc,$max,$avg,$mask_idx){
 $gfc=($gfc)|0;
 $max=($max)|0;
 $avg=($avg)|0;
 $mask_idx=($mask_idx)|0;
 var $1=0,$2=0,$3=0,$4=0,$gds=0,$m=.0,$a=.0,$b=0,$k=0,$last_tab_entry=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=.0,$13=0,$14=0;
 var $15=0,$16=0,$17=.0,$18=.0,$19=.0,$20=0,$22=0,$23=0,$24=0,$25=.0,$26=.0,$27=0,$28=0,$29=0,$30=0,$31=.0,$32=0,$34=0,$35=0,$36=0;
 var $37=0,$38=.0,$40=.0,$41=.0,$42=.0,$43=.0,$44=.0,$45=.0,$46=0,$47=0,$48=0,$49=0,$50=0,$51=0,$52=0,$53=0,$54=0,$55=0,$56=0,$57=0;
 var $58=0,$59=.0,$60=.0,$61=.0,$62=.0,$63=0,$64=0,$65=0,$68=0,$69=0,$70=0,$71=0,$72=0,$74=0,$75=0,$76=0,$79=0,$80=0,$81=0,$82=0;
 var $83=0,$84=0,$86=0,$87=0,$88=0,$89=0,$90=.0,$91=0,$92=0,$93=0,$94=.0,$95=.0,$96=0,$97=0,$98=0,$99=0,$100=.0,$101=.0,$102=.0,$103=.0;
 var $104=0,$106=0,$107=0,$108=0,$109=0,$110=.0,$111=.0,$112=0,$113=0,$114=0,$115=.0,$116=0,$118=0,$119=0,$120=0,$121=.0,$123=.0,$124=0,$125=0,$126=0;
 var $127=0,$128=.0,$129=0,$131=0,$132=0,$133=0,$134=0,$135=.0,$137=.0,$138=.0,$139=.0,$140=.0,$141=.0,$142=.0,$143=0,$144=0,$145=0,$146=0,$147=0,$148=0;
 var $149=0,$150=0,$151=0,$152=0,$153=0,$154=0,$155=0,$156=0,$157=0,$158=0,$159=0,$160=0,$161=0,$162=0,$163=.0,$164=.0,$165=.0,$166=.0,$167=0,$168=0;
 var $169=0,$172=0,$173=0,$174=0,$175=0,$176=0,$178=0,$179=0,$180=0,$183=0,$184=0,$186=0,$187=0,$188=0,$189=0,$190=.0,$191=0,$192=0,$193=0,$194=.0;
 var $195=.0,$196=.0,$197=0,$199=0,$200=0,$201=0,$202=0,$203=.0,$204=.0,$205=0,$206=0,$207=0,$208=.0,$209=0,$211=0,$212=0,$213=0,$214=.0,$216=.0,$217=.0;
 var $218=.0,$219=.0,$220=.0,$221=.0,$222=0,$223=0,$224=0,$225=0,$226=0,$227=0,$228=0,$229=0,$230=0,$231=0,$232=0,$233=0,$234=0,$235=.0,$236=.0,$237=.0;
 var $238=.0,$239=0,$240=0,$241=0,$244=0,$245=0,$246=0,$247=0,$248=0,$250=0,$251=0,$252=0,label=0;
 var sp=0;sp=STACKTOP;










 $1=$gfc;
 $2=$max;
 $3=$avg;
 $4=$mask_idx;
 $5=$1;
 $6=(($5+85800)|0);
 $7=((HEAP32[(($6)>>2)])|0);
 $8=(($7+2160)|0);
 $gds=$8;
 $last_tab_entry=8;
 $b=0;
 $9=$b;
 $10=$3;
 $11=(($10+($9<<2))|0);
 $12=(+(HEAPF32[(($11)>>2)]));
 $13=$b;
 $14=((($13)+(1))|0);
 $15=$3;
 $16=(($15+($14<<2))|0);
 $17=(+(HEAPF32[(($16)>>2)]));
 $18=($12)+($17);
 $a=$18;
 $19=$a;
 $20=$19>(0.0);
 if ($20) {
  $22=$b;
  $23=$2;
  $24=(($23+($22<<2))|0);
  $25=(+(HEAPF32[(($24)>>2)]));
  $m=$25;
  $26=$m;
  $27=$b;
  $28=((($27)+(1))|0);
  $29=$2;
  $30=(($29+($28<<2))|0);
  $31=(+(HEAPF32[(($30)>>2)]));
  $32=$26<$31;
  if ($32) {
   $34=$b;
   $35=((($34)+(1))|0);
   $36=$2;
   $37=(($36+($35<<2))|0);
   $38=(+(HEAPF32[(($37)>>2)]));
   $m=$38;
  }
  $40=$m;
  $41=($40)*((2.0));
  $42=$a;
  $43=($41)-($42);
  $44=((20.0))*($43);
  $45=$a;
  $46=$b;
  $47=$gds;
  $48=(($47+1716)|0);
  $49=(($48+($46<<2))|0);
  $50=((HEAP32[(($49)>>2)])|0);
  $51=$b;
  $52=((($51)+(1))|0);
  $53=$gds;
  $54=(($53+1716)|0);
  $55=(($54+($52<<2))|0);
  $56=((HEAP32[(($55)>>2)])|0);
  $57=((($50)+($56))|0);
  $58=((($57)-(1))|0);
  $59=(+((($58|0))|0));
  $60=($45)*($59);
  $61=($44)/($60);
  $a=$61;
  $62=$a;
  $63=(~~($62));
  $k=$63;
  $64=$k;
  $65=($64|0)>8;
  if ($65) {
   $k=8;
  }
  $68=$k;
  $69=(($68)&255);
  $70=$b;
  $71=$4;
  $72=(($71+$70)|0);
  HEAP8[($72)]=$69;
 } else {
  $74=$b;
  $75=$4;
  $76=(($75+$74)|0);
  HEAP8[($76)]=0;
 }
 $b=1;
 while(1) {
  $79=$b;
  $80=$gds;
  $81=(($80+2148)|0);
  $82=((HEAP32[(($81)>>2)])|0);
  $83=((($82)-(1))|0);
  $84=($79|0)<($83|0);
  if (!($84)) {
   break;
  }
  $86=$b;
  $87=((($86)-(1))|0);
  $88=$3;
  $89=(($88+($87<<2))|0);
  $90=(+(HEAPF32[(($89)>>2)]));
  $91=$b;
  $92=$3;
  $93=(($92+($91<<2))|0);
  $94=(+(HEAPF32[(($93)>>2)]));
  $95=($90)+($94);
  $96=$b;
  $97=((($96)+(1))|0);
  $98=$3;
  $99=(($98+($97<<2))|0);
  $100=(+(HEAPF32[(($99)>>2)]));
  $101=($95)+($100);
  $a=$101;
  $102=$a;
  $103=$102;
  $104=$103>(0.0);
  if ($104) {
   $106=$b;
   $107=((($106)-(1))|0);
   $108=$2;
   $109=(($108+($107<<2))|0);
   $110=(+(HEAPF32[(($109)>>2)]));
   $m=$110;
   $111=$m;
   $112=$b;
   $113=$2;
   $114=(($113+($112<<2))|0);
   $115=(+(HEAPF32[(($114)>>2)]));
   $116=$111<$115;
   if ($116) {
    $118=$b;
    $119=$2;
    $120=(($119+($118<<2))|0);
    $121=(+(HEAPF32[(($120)>>2)]));
    $m=$121;
   }
   $123=$m;
   $124=$b;
   $125=((($124)+(1))|0);
   $126=$2;
   $127=(($126+($125<<2))|0);
   $128=(+(HEAPF32[(($127)>>2)]));
   $129=$123<$128;
   if ($129) {
    $131=$b;
    $132=((($131)+(1))|0);
    $133=$2;
    $134=(($133+($132<<2))|0);
    $135=(+(HEAPF32[(($134)>>2)]));
    $m=$135;
   }
   $137=$m;
   $138=($137)*((3.0));
   $139=$a;
   $140=($138)-($139);
   $141=((20.0))*($140);
   $142=$a;
   $143=$b;
   $144=((($143)-(1))|0);
   $145=$gds;
   $146=(($145+1716)|0);
   $147=(($146+($144<<2))|0);
   $148=((HEAP32[(($147)>>2)])|0);
   $149=$b;
   $150=$gds;
   $151=(($150+1716)|0);
   $152=(($151+($149<<2))|0);
   $153=((HEAP32[(($152)>>2)])|0);
   $154=((($148)+($153))|0);
   $155=$b;
   $156=((($155)+(1))|0);
   $157=$gds;
   $158=(($157+1716)|0);
   $159=(($158+($156<<2))|0);
   $160=((HEAP32[(($159)>>2)])|0);
   $161=((($154)+($160))|0);
   $162=((($161)-(1))|0);
   $163=(+((($162|0))|0));
   $164=($142)*($163);
   $165=($141)/($164);
   $a=$165;
   $166=$a;
   $167=(~~($166));
   $k=$167;
   $168=$k;
   $169=($168|0)>8;
   if ($169) {
    $k=8;
   }
   $172=$k;
   $173=(($172)&255);
   $174=$b;
   $175=$4;
   $176=(($175+$174)|0);
   HEAP8[($176)]=$173;
  } else {
   $178=$b;
   $179=$4;
   $180=(($179+$178)|0);
   HEAP8[($180)]=0;
  }
  $183=$b;
  $184=((($183)+(1))|0);
  $b=$184;
 }
 $186=$b;
 $187=((($186)-(1))|0);
 $188=$3;
 $189=(($188+($187<<2))|0);
 $190=(+(HEAPF32[(($189)>>2)]));
 $191=$b;
 $192=$3;
 $193=(($192+($191<<2))|0);
 $194=(+(HEAPF32[(($193)>>2)]));
 $195=($190)+($194);
 $a=$195;
 $196=$a;
 $197=$196>(0.0);
 if (!($197)) {
  $250=$b;
  $251=$4;
  $252=(($251+$250)|0);
  HEAP8[($252)]=0;
  STACKTOP=sp;return;
 }
 $199=$b;
 $200=((($199)-(1))|0);
 $201=$2;
 $202=(($201+($200<<2))|0);
 $203=(+(HEAPF32[(($202)>>2)]));
 $m=$203;
 $204=$m;
 $205=$b;
 $206=$2;
 $207=(($206+($205<<2))|0);
 $208=(+(HEAPF32[(($207)>>2)]));
 $209=$204<$208;
 if ($209) {
  $211=$b;
  $212=$2;
  $213=(($212+($211<<2))|0);
  $214=(+(HEAPF32[(($213)>>2)]));
  $m=$214;
 }
 $216=$m;
 $217=($216)*((2.0));
 $218=$a;
 $219=($217)-($218);
 $220=((20.0))*($219);
 $221=$a;
 $222=$b;
 $223=((($222)-(1))|0);
 $224=$gds;
 $225=(($224+1716)|0);
 $226=(($225+($223<<2))|0);
 $227=((HEAP32[(($226)>>2)])|0);
 $228=$b;
 $229=$gds;
 $230=(($229+1716)|0);
 $231=(($230+($228<<2))|0);
 $232=((HEAP32[(($231)>>2)])|0);
 $233=((($227)+($232))|0);
 $234=((($233)-(1))|0);
 $235=(+((($234|0))|0));
 $236=($221)*($235);
 $237=($220)/($236);
 $a=$237;
 $238=$a;
 $239=(~~($238));
 $k=$239;
 $240=$k;
 $241=($240|0)>8;
 if ($241) {
  $k=8;
 }
 $244=$k;
 $245=(($244)&255);
 $246=$b;
 $247=$4;
 $248=(($247+$246)|0);
 HEAP8[($248)]=$245;
 STACKTOP=sp;return;
}


function _stereo_demask($f){
 $f=+($f);
 var $1=.0,$arg=.0,$2=.0,$3=.0,$4=.0,$5=.0,$6=.0,$7=0,$9=.0,$12=.0,$13=.0,$14=.0,$15=.0,$16=.0,$17=.0,$18=.0,$19=.0,$20=.0,$21=.0,label=0;
 var sp=0;sp=STACKTOP;


 $1=$f;
 $2=$1;
 $3=$2;
 $4=(+(_freq2bark($3)));
 $5=$4;
 $arg=$5;
 $6=$arg;
 $7=$6<(15.5);
 if ($7) {
  $9=$arg;
  $12=$9;
 } else {
  $12=15.5;
 }

 $13=($12)/((15.5));
 $arg=$13;
 $14=$arg;
 $15=((3.141592653589793))*($14);
 $16=(+(Math_cos($15)));
 $17=((1.0))-($16);
 $18=((1.25))*($17);
 $19=($18)-((2.5));
 $20=(+(Math_pow(10.0,(+($19)))));
 $21=$20;
 STACKTOP=sp;return (+($21));
}


function _s3_func($bark){
 $bark=+($bark);
 var $1=.0,$2=.0,$tempx=.0,$x=.0,$tempy=.0,$temp=.0,$3=.0,$4=.0,$5=0,$7=.0,$8=.0,$10=.0,$11=.0,$12=.0,$13=.0,$15=.0,$16=.0,$17=0,$19=.0,$20=.0;
 var $21=0,$23=.0,$24=.0,$25=.0,$26=.0,$27=.0,$28=.0,$29=.0,$30=.0,$31=.0,$32=.0,$33=.0,$34=.0,$35=.0,$36=.0,$39=.0,$40=.0,$41=.0,$42=.0,$43=.0;
 var $44=.0,$45=.0,$46=.0,$47=.0,$48=.0,$49=.0,$50=.0,$51=.0,$52=.0,$53=.0,$54=.0,$55=.0,$56=.0,$57=.0,$58=0,$61=.0,$62=.0,$63=.0,$64=.0,$65=.0;
 var $66=.0,$67=.0,$68=.0,$69=.0,$70=.0,$71=.0,$72=.0,$74=.0,label=0;
 var sp=0;sp=STACKTOP;






 $2=$bark;
 $3=$2;
 $tempx=$3;
 $4=$tempx;
 $5=$4>=(0.0);
 if ($5) {
  $7=$tempx;
  $8=($7)*((3.0));
  $tempx=$8;
 } else {
  $10=$tempx;
  $11=$10;
  $12=($11)*((1.5));
  $13=$12;
  $tempx=$13;
 }
 $15=$tempx;
 $16=$15;
 $17=$16>=(0.5);
 do {
  if ($17) {
   $19=$tempx;
   $20=$19;
   $21=$20<=(2.5);
   if (!($21)) {
    label = 7;
    break;
   }
   $23=$tempx;
   $24=$23;
   $25=($24)-((0.5));
   $26=$25;
   $temp=$26;
   $27=$temp;
   $28=$temp;
   $29=($27)*($28);
   $30=$29;
   $31=$temp;
   $32=$31;
   $33=((2.0))*($32);
   $34=($30)-($33);
   $35=((8.0))*($34);
   $36=$35;
   $x=$36;
  } else {
   label = 7;
  }
 } while(0);
 if ((label|0) == 7) {
  $x=0.0;
 }
 $39=$tempx;
 $40=$39;
 $41=($40)+((0.474));
 $42=$41;
 $tempx=$42;
 $43=$tempx;
 $44=$43;
 $45=((7.5))*($44);
 $46=((15.811389))+($45);
 $47=$tempx;
 $48=$tempx;
 $49=($47)*($48);
 $50=$49;
 $51=((1.0))+($50);
 $52=(+(Math_sqrt($51)));
 $53=((17.5))*($52);
 $54=($46)-($53);
 $55=$54;
 $tempy=$55;
 $56=$tempy;
 $57=$56;
 $58=$57<=(-60.0);
 if ($58) {
  $1=0.0;
  $74=$1;
  STACKTOP=sp;return (+($74));
 } else {
  $61=$x;
  $62=$tempy;
  $63=($61)+($62);
  $64=$63;
  $65=($64)*((0.23025850929940458));
  $66=(+(Math_exp($65)));
  $67=$66;
  $tempx=$67;
  $68=$tempx;
  $69=$68;
  $70=($69)/((0.6609193));
  $71=$70;
  $tempx=$71;
  $72=$tempx;
  $1=$72;
  $74=$1;
  STACKTOP=sp;return (+($74));
 }
  return .0;
}


function _init_xrpow_core_init($gfc){
 $gfc=($gfc)|0;
 var $1=0,$2=0,$3=0,label=0;
 var sp=0;sp=STACKTOP;

 $1=$gfc;
 $2=$1;
 $3=(($2+85824)|0);
 HEAP32[(($3)>>2)]=12;
 STACKTOP=sp;return;
}


function _VBR_old_iteration_loop($gfc,$pe,$ms_ener_ratio,$ratio){
 $gfc=($gfc)|0;
 $pe=($pe)|0;
 $ms_ener_ratio=($ms_ener_ratio)|0;
 $ratio=($ratio)|0;
 var $1=0,$2=0,$3=0,$4=0,$cfg=0,$eov=0,$l3_xmin=0,$xrpow=0,$bands=0,$frameBits=0,$used_bits=0,$bits=0,$min_bits=0,$max_bits=0,$mean_bits=0,$ch=0,$gr=0,$analog_silence=0,$l3_side=0,$ret=0;
 var $cod_info=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$14=0,$15=0,$16=0,$17=0,$18=0,$19=0,$20=0,$23=0,$24=0,$25=0;
 var $26=0,$27=0,$30=0,$31=0,$32=0,$33=0,$34=0,$36=0,$37=0,$38=0,$39=0,$40=0,$41=0,$42=0,$43=0,$44=0,$45=0,$46=0,$47=0,$49=0;
 var $50=0,$51=0,$52=0,$53=0,$54=0,$57=0,$58=0,$59=0,$60=0,$61=0,$62=0,$63=0,$64=0,$65=0,$66=0,$67=0,$68=0,$69=0,$70=0,$71=0;
 var $72=0,$73=0,$74=0,$75=0,$76=0,$77=0,$78=0,$79=0,$80=0,$81=0,$83=0,$84=0,$85=0,$86=0,$87=0,$88=0,$89=0,$90=0,$91=0,$92=0;
 var $93=0,$94=0,$95=0,$97=0,$98=0,$99=0,$100=0,$101=0,$102=0,$103=0,$104=0,$105=0,$106=0,$108=0,$109=0,$112=0,$113=0,$115=0,$116=0,$118=0;
 var $119=0,$120=0,$121=0,$123=0,$124=0,$126=0,$127=0,$128=0,$129=0,$130=0,$133=0,$134=0,$135=0,$136=0,$137=0,$138=0,$139=0,$141=0,$142=0,$143=0;
 var $144=0,$145=0,$146=0,$147=0,$151=0,$152=0,$153=0,$154=0,$156=0,$157=0,$158=0,$159=0,$160=0,$163=0,$164=0,$165=0,$166=0,$169=0,$170=0,$171=0;
 var $172=0,$173=0,$176=0,$177=0,$178=0,$179=0,$180=0,$182=0,$183=0,$184=0,$186=0,$187=0,$190=0,$191=0,$193=0,$194=0,label=0;
 var sp=0;sp=STACKTOP;STACKTOP=(STACKTOP+3048)|0;






 $l3_xmin=((sp)|0);
 $xrpow=(((sp)+(624))|0);
 $bands=(((sp)+(2928))|0);
 $frameBits=(((sp)+(2944))|0);


 $min_bits=(((sp)+(3008))|0);
 $max_bits=(((sp)+(3024))|0);
 $mean_bits=(((sp)+(3040))|0);






 $1=$gfc;
 $2=$pe;
 $3=$ms_ener_ratio;
 $4=$ratio;
 $5=$1;
 $6=(($5+16)|0);
 $cfg=$6;
 $7=$1;
 $8=(($7+84040)|0);
 $eov=$8;
 $9=$1;
 $10=(($9+304)|0);
 $l3_side=$10;
 $11=$1;
 $12=$2;
 $13=$3;
 $14=$4;
 $15=(($l3_xmin)|0);
 $16=(($frameBits)|0);
 $17=(($min_bits)|0);
 $18=(($max_bits)|0);
 $19=(($bands)|0);
 $20=((_VBR_old_prepare($11,$12,$13,$14,$15,$16,$17,$18,$19))|0);
 $analog_silence=$20;
 while(1) {
  $used_bits=0;
  $gr=0;
  while(1) {
   $23=$gr;
   $24=$cfg;
   $25=(($24+60)|0);
   $26=((HEAP32[(($25)>>2)])|0);
   $27=($23|0)<($26|0);
   if (!($27)) {
    break;
   }
   $ch=0;
   while(1) {
    $30=$ch;
    $31=$cfg;
    $32=(($31+56)|0);
    $33=((HEAP32[(($32)>>2)])|0);
    $34=($30|0)<($33|0);
    if (!($34)) {
     break;
    }
    $36=$ch;
    $37=$gr;
    $38=$l3_side;
    $39=(($38)|0);
    $40=(($39+((($37)*(10504))&-1))|0);
    $41=(($40+((($36)*(5252))&-1))|0);
    $cod_info=$41;
    $42=$1;
    $43=$cod_info;
    $44=(($xrpow)|0);
    $45=((_init_xrpow($42,$43,$44))|0);
    $ret=$45;
    $46=$ret;
    $47=($46|0)==0;
    do {
     if ($47) {
      label = 8;
     } else {
      $49=$ch;
      $50=$gr;
      $51=(($max_bits+($50<<3))|0);
      $52=(($51+($49<<2))|0);
      $53=((HEAP32[(($52)>>2)])|0);
      $54=($53|0)==0;
      if ($54) {
       label = 8;
       break;
      }
      $57=$1;
      $58=$cod_info;
      $59=$ch;
      $60=$gr;
      $61=(($l3_xmin+((($60)*(312))&-1))|0);
      $62=(($61+((($59)*(156))&-1))|0);
      $63=(($62)|0);
      $64=(($xrpow)|0);
      $65=$ch;
      $66=$ch;
      $67=$gr;
      $68=(($min_bits+($67<<3))|0);
      $69=(($68+($66<<2))|0);
      $70=((HEAP32[(($69)>>2)])|0);
      $71=$ch;
      $72=$gr;
      $73=(($max_bits+($72<<3))|0);
      $74=(($73+($71<<2))|0);
      $75=((HEAP32[(($74)>>2)])|0);
      _VBR_encode_granule($57,$58,$63,$64,$65,$70,$75);
      $76=$1;
      $77=(($76+84768)|0);
      $78=(($77+328)|0);
      $79=((HEAP32[(($78)>>2)])|0);
      $80=$79&1;
      $81=($80|0)!=0;
      if ($81) {
       $83=$1;
       $84=$ch;
       $85=$gr;
       $86=$l3_side;
       $87=(($86)|0);
       $88=(($87+((($85)*(10504))&-1))|0);
       $89=(($88+((($84)*(5252))&-1))|0);
       $90=$ch;
       $91=$gr;
       $92=(($l3_xmin+((($91)*(312))&-1))|0);
       $93=(($92+((($90)*(156))&-1))|0);
       $94=(($93)|0);
       $95=(($xrpow)|0);
       _trancate_smallspectrums($83,$89,$94,$95);
      }
      $97=$cod_info;
      $98=(($97+4768)|0);
      $99=((HEAP32[(($98)>>2)])|0);
      $100=$cod_info;
      $101=(($100+4844)|0);
      $102=((HEAP32[(($101)>>2)])|0);
      $103=((($99)+($102))|0);
      $ret=$103;
      $104=$ret;
      $105=$used_bits;
      $106=((($105)+($104))|0);
      $used_bits=$106;
     }
    } while(0);
    if ((label|0) == 8) {
     label = 0;
    }
    $108=$ch;
    $109=((($108)+(1))|0);
    $ch=$109;
   }
   $112=$gr;
   $113=((($112)+(1))|0);
   $gr=$113;
  }
  $115=$analog_silence;
  $116=($115|0)!=0;
  do {
   if ($116) {
    $118=$cfg;
    $119=(($118+108)|0);
    $120=((HEAP32[(($119)>>2)])|0);
    $121=($120|0)!=0;
    if ($121) {
     label = 18;
     break;
    }
    $123=$eov;
    $124=(($123+704)|0);
    HEAP32[(($124)>>2)]=1;
   } else {
    label = 18;
   }
  } while(0);
  if ((label|0) == 18) {
   label = 0;
   $126=$cfg;
   $127=(($126+96)|0);
   $128=((HEAP32[(($127)>>2)])|0);
   $129=$eov;
   $130=(($129+704)|0);
   HEAP32[(($130)>>2)]=$128;
  }
  while(1) {
   $133=$eov;
   $134=(($133+704)|0);
   $135=((HEAP32[(($134)>>2)])|0);
   $136=$cfg;
   $137=(($136+100)|0);
   $138=((HEAP32[(($137)>>2)])|0);
   $139=($135|0)<($138|0);
   if (!($139)) {
    break;
   }
   $141=$used_bits;
   $142=$eov;
   $143=(($142+704)|0);
   $144=((HEAP32[(($143)>>2)])|0);
   $145=(($frameBits+($144<<2))|0);
   $146=((HEAP32[(($145)>>2)])|0);
   $147=($141|0)<=($146|0);
   if ($147) {
    label = 22;
    break;
   }
   $151=$eov;
   $152=(($151+704)|0);
   $153=((HEAP32[(($152)>>2)])|0);
   $154=((($153)+(1))|0);
   HEAP32[(($152)>>2)]=$154;
  }
  if ((label|0) == 22) {
   label = 0;
  }
  $156=$1;
  $157=((_ResvFrameBegin($156,$mean_bits))|0);
  $bits=$157;
  $158=$used_bits;
  $159=$bits;
  $160=($158|0)<=($159|0);
  if ($160) {
   break;
  }
  $163=$1;
  $164=(($l3_xmin)|0);
  $165=(($min_bits)|0);
  $166=(($max_bits)|0);
  _bitpressure_strategy($163,$164,$165,$166);
 }
 $gr=0;
 while(1) {
  $169=$gr;
  $170=$cfg;
  $171=(($170+60)|0);
  $172=((HEAP32[(($171)>>2)])|0);
  $173=($169|0)<($172|0);
  if (!($173)) {
   break;
  }
  $ch=0;
  while(1) {
   $176=$ch;
   $177=$cfg;
   $178=(($177+56)|0);
   $179=((HEAP32[(($178)>>2)])|0);
   $180=($176|0)<($179|0);
   if (!($180)) {
    break;
   }
   $182=$1;
   $183=$gr;
   $184=$ch;
   _iteration_finish_one($182,$183,$184);
   $186=$ch;
   $187=((($186)+(1))|0);
   $ch=$187;
  }
  $190=$gr;
  $191=((($190)+(1))|0);
  $gr=$191;
 }
 $193=$1;
 $194=((HEAP32[(($mean_bits)>>2)])|0);
 _ResvFrameEnd($193,$194);
 STACKTOP=sp;return;
}


function _VBR_new_iteration_loop($gfc,$pe,$ms_ener_ratio,$ratio){
 $gfc=($gfc)|0;
 $pe=($pe)|0;
 $ms_ener_ratio=($ms_ener_ratio)|0;
 $ratio=($ratio)|0;
 var $1=0,$2=0,$3=0,$4=0,$cfg=0,$eov=0,$l3_xmin=0,$xrpow=0,$frameBits=0,$used_bits=0,$max_bits=0,$ch=0,$gr=0,$analog_silence=0,$pad=0,$l3_side=0,$const_l3_xmin=0,$const_xrpow=0,$const_max_bits=0,$cod_info=0;
 var $i=0,$j=0,$unused=0,$mean_bits=0,$fullframebits=0,$cod_info1=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$14=0,$15=0,$16=0,$17=0,$18=0;
 var $19=0,$20=0,$21=0,$22=0,$24=0,$25=0,$26=0,$27=0,$28=0,$31=0,$32=0,$33=0,$34=0,$35=0,$37=0,$38=0,$39=0,$40=0,$41=0,$42=0;
 var $43=0,$44=0,$45=0,$46=0,$47=0,$48=0,$49=0,$50=0,$51=0,$53=0,$54=0,$55=0,$56=0,$59=0,$60=0,$63=0,$64=0,$66=0,$67=0,$68=0;
 var $69=0,$70=0,$71=0,$72=0,$73=0,$74=0,$76=0,$77=0,$79=0,$80=0,$81=0,$82=0,$85=0,$86=0,$87=0,$90=0,$91=0,$92=0,$93=0,$94=0;
 var $96=0,$97=0,$98=0,$99=0,$100=0,$104=0,$105=0,$107=0,$108=0,$109=0,$110=0,$111=0,$113=0,$114=0,$115=0,$117=0,$118=0,$120=0,$121=0,$122=0;
 var $124=0,$125=0,$126=0,$128=0,$129=0,$130=0,$131=0,$132=0,$133=0,$134=0,$135=0,$139=0,$140=0,$142=0,$143=0,$144=0,$146=0,$147=0,$148=0,$151=0;
 var $152=0,$154=0,$155=0,$156=0,$157=0,$158=0,$159=0,$160=0,$162=0,$163=0,$165=0,$166=0,$167=0,$168=0,$169=0,$172=0,$173=0,$174=0,$175=0,$176=0;
 var $178=0,$179=0,$180=0,$181=0,$182=0,$183=0,$184=0,$185=0,$187=0,$188=0,$191=0,$192=0,$194=0,$195=0,$197=0,label=0;
 var tempVarArgs=0;
 var sp=0;sp=STACKTOP;STACKTOP=(STACKTOP+9936)|0;






 $l3_xmin=((sp)|0);
 $xrpow=(((sp)+(624))|0);
 $frameBits=(((sp)+(9840))|0);

 $max_bits=(((sp)+(9904))|0);



 $pad=(((sp)+(9920))|0);








 $mean_bits=(((sp)+(9928))|0);


 $1=$gfc;
 $2=$pe;
 $3=$ms_ener_ratio;
 $4=$ratio;
 $5=$1;
 $6=(($5+16)|0);
 $cfg=$6;
 $7=$1;
 $8=(($7+84040)|0);
 $eov=$8;
 $9=$1;
 $10=(($9+304)|0);
 $l3_side=$10;
 $11=(($l3_xmin)|0);
 $const_l3_xmin=$11;
 $12=(($xrpow)|0);
 $const_xrpow=$12;
 $13=(($max_bits)|0);
 $const_max_bits=$13;
 $14=$3;
 $15=$xrpow;
 _memset((((($15)|0))|0), ((((0)|0))|0), ((((9216)|0))|0))|0;
 $16=$1;
 $17=$2;
 $18=$4;
 $19=(($l3_xmin)|0);
 $20=(($frameBits)|0);
 $21=(($max_bits)|0);
 $22=((_VBR_new_prepare($16,$17,$18,$19,$20,$21,$pad))|0);
 $analog_silence=$22;
 $gr=0;
 while(1) {
  $24=$gr;
  $25=$cfg;
  $26=(($25+60)|0);
  $27=((HEAP32[(($26)>>2)])|0);
  $28=($24|0)<($27|0);
  if (!($28)) {
   break;
  }
  $ch=0;
  while(1) {
   $31=$ch;
   $32=$cfg;
   $33=(($32+56)|0);
   $34=((HEAP32[(($33)>>2)])|0);
   $35=($31|0)<($34|0);
   if (!($35)) {
    break;
   }
   $37=$ch;
   $38=$gr;
   $39=$l3_side;
   $40=(($39)|0);
   $41=(($40+((($38)*(10504))&-1))|0);
   $42=(($41+((($37)*(5252))&-1))|0);
   $cod_info=$42;
   $43=$1;
   $44=$cod_info;
   $45=$ch;
   $46=$gr;
   $47=(($xrpow+((($46)*(4608))&-1))|0);
   $48=(($47+((($45)*(2304))&-1))|0);
   $49=(($48)|0);
   $50=((_init_xrpow($43,$44,$49))|0);
   $51=0==($50|0);
   if ($51) {
    $53=$ch;
    $54=$gr;
    $55=(($max_bits+($54<<3))|0);
    $56=(($55+($53<<2))|0);
    HEAP32[(($56)>>2)]=0;
   }
   $59=$ch;
   $60=((($59)+(1))|0);
   $ch=$60;
  }
  $63=$gr;
  $64=((($63)+(1))|0);
  $gr=$64;
 }
 $66=$1;
 $67=$const_xrpow;
 $68=$const_l3_xmin;
 $69=$const_max_bits;
 $70=((_VBR_encode_frame($66,$67,$68,$69))|0);
 $used_bits=$70;
 $71=$cfg;
 $72=(($71+136)|0);
 $73=((HEAP32[(($72)>>2)])|0);
 $74=($73|0)!=0;
 if ($74) {
  $151=$eov;
  $152=(($151+704)|0);
  HEAP32[(($152)>>2)]=0;
 } else {
  $76=$analog_silence;
  $77=($76|0)!=0;
  do {
   if ($77) {
    $79=$cfg;
    $80=(($79+108)|0);
    $81=((HEAP32[(($80)>>2)])|0);
    $82=($81|0)!=0;
    if ($82) {
     label = 15;
     break;
    }
    $i=1;
   } else {
    label = 15;
   }
  } while(0);
  if ((label|0) == 15) {
   $85=$cfg;
   $86=(($85+96)|0);
   $87=((HEAP32[(($86)>>2)])|0);
   $i=$87;
  }
  while(1) {
   $90=$i;
   $91=$cfg;
   $92=(($91+100)|0);
   $93=((HEAP32[(($92)>>2)])|0);
   $94=($90|0)<($93|0);
   if (!($94)) {
    break;
   }
   $96=$used_bits;
   $97=$i;
   $98=(($frameBits+($97<<2))|0);
   $99=((HEAP32[(($98)>>2)])|0);
   $100=($96|0)<=($99|0);
   if ($100) {
    label = 19;
    break;
   }
   $104=$i;
   $105=((($104)+(1))|0);
   $i=$105;
  }
  if ((label|0) == 19) {
  }
  $107=$i;
  $108=$cfg;
  $109=(($108+100)|0);
  $110=((HEAP32[(($109)>>2)])|0);
  $111=($107|0)>($110|0);
  if ($111) {
   $113=$cfg;
   $114=(($113+100)|0);
   $115=((HEAP32[(($114)>>2)])|0);
   $i=$115;
  }
  $117=((HEAP32[(($pad)>>2)])|0);
  $118=($117|0)>0;
  if ($118) {
   $120=$cfg;
   $121=(($120+100)|0);
   $122=((HEAP32[(($121)>>2)])|0);
   $j=$122;
   while(1) {
    $124=$j;
    $125=$i;
    $126=($124|0)>($125|0);
    if (!($126)) {
     break;
    }
    $128=$j;
    $129=(($frameBits+($128<<2))|0);
    $130=((HEAP32[(($129)>>2)])|0);
    $131=$used_bits;
    $132=((($130)-($131))|0);
    $unused=$132;
    $133=$unused;
    $134=((HEAP32[(($pad)>>2)])|0);
    $135=($133|0)<=($134|0);
    if ($135) {
     label = 28;
     break;
    }
    $139=$j;
    $140=((($139)-(1))|0);
    $j=$140;
   }
   if ((label|0) == 28) {
   }
   $142=$j;
   $143=$eov;
   $144=(($143+704)|0);
   HEAP32[(($144)>>2)]=$142;
  } else {
   $146=$i;
   $147=$eov;
   $148=(($147+704)|0);
   HEAP32[(($148)>>2)]=$146;
  }
 }
 $154=$used_bits;
 $155=$eov;
 $156=(($155+704)|0);
 $157=((HEAP32[(($156)>>2)])|0);
 $158=(($frameBits+($157<<2))|0);
 $159=((HEAP32[(($158)>>2)])|0);
 $160=($154|0)<=($159|0);
 if (!($160)) {
  $197=$1;
  _lame_errorf($197,17192,(((tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs))|0)); STACKTOP=tempVarArgs;
  _exit(((-1)|0));

 }
 $162=$1;
 $163=((_ResvFrameBegin($162,$mean_bits))|0);
 $fullframebits=$163;
 $gr=0;
 while(1) {
  $165=$gr;
  $166=$cfg;
  $167=(($166+60)|0);
  $168=((HEAP32[(($167)>>2)])|0);
  $169=($165|0)<($168|0);
  if (!($169)) {
   break;
  }
  $ch=0;
  while(1) {
   $172=$ch;
   $173=$cfg;
   $174=(($173+56)|0);
   $175=((HEAP32[(($174)>>2)])|0);
   $176=($172|0)<($175|0);
   if (!($176)) {
    break;
   }
   $178=$ch;
   $179=$gr;
   $180=$l3_side;
   $181=(($180)|0);
   $182=(($181+((($179)*(10504))&-1))|0);
   $183=(($182+((($178)*(5252))&-1))|0);
   $cod_info1=$183;
   $184=$1;
   $185=$cod_info1;
   _ResvAdjust($184,$185);
   $187=$ch;
   $188=((($187)+(1))|0);
   $ch=$188;
  }
  $191=$gr;
  $192=((($191)+(1))|0);
  $gr=$192;
 }
 $194=$1;
 $195=((HEAP32[(($mean_bits)>>2)])|0);
 _ResvFrameEnd($194,$195);
 STACKTOP=sp;return;
}



function _ABR_iteration_loop($gfc,$pe,$ms_ener_ratio,$ratio){
 $gfc=($gfc)|0;
 $pe=($pe)|0;
 $ms_ener_ratio=($ms_ener_ratio)|0;
 $ratio=($ratio)|0;
 var $1=0,$2=0,$3=0,$4=0,$cfg=0,$eov=0,$l3_xmin=0,$xrpow=0,$targ_bits=0,$mean_bits=0,$max_frame_bits=0,$ch=0,$gr=0,$ath_over=0,$analog_silence_bits=0,$cod_info=0,$l3_side=0,$adjust=.0,$masking_lower_db=.0,$5=0;
 var $6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$14=0,$16=0,$17=0,$18=0,$19=0,$20=0,$22=0,$23=0,$24=0,$25=0,$26=0,$28=0;
 var $29=0,$30=0,$33=0,$34=0,$35=0,$36=0,$37=0,$39=0,$40=0,$41=0,$42=0,$43=0,$44=0,$45=0,$46=0,$47=0,$48=0,$50=0,$51=0,$52=0;
 var $53=.0,$54=.0,$55=.0,$57=0,$58=0,$59=0,$60=.0,$61=.0,$62=.0,$64=.0,$65=.0,$66=.0,$67=.0,$68=.0,$69=0,$70=0,$71=0,$72=0,$73=0,$74=0;
 var $75=0,$76=0,$77=0,$78=0,$80=0,$81=0,$82=0,$83=0,$84=0,$85=0,$86=0,$87=0,$88=0,$89=0,$90=0,$92=0,$93=0,$94=0,$95=0,$96=0;
 var $98=0,$99=0,$100=0,$101=0,$102=0,$103=0,$104=0,$105=0,$106=0,$107=0,$108=0,$110=0,$111=0,$112=0,$114=0,$115=0,$118=0,$119=0,$121=0,$122=0;
 var $123=0,$124=0,$125=0,$127=0,$128=0,$129=0,$130=0,$131=0,$132=0,$133=0,$135=0,$136=0,$137=0,$141=0,$142=0,$143=0,$144=0,$146=0,$147=0,label=0;
 var sp=0;sp=STACKTOP;STACKTOP=(STACKTOP+2504)|0;






 $l3_xmin=((sp)|0);
 $xrpow=(((sp)+(160))|0);
 $targ_bits=(((sp)+(2464))|0);
 $mean_bits=(((sp)+(2480))|0);
 $max_frame_bits=(((sp)+(2488))|0);



 $analog_silence_bits=(((sp)+(2496))|0);




 $1=$gfc;
 $2=$pe;
 $3=$ms_ener_ratio;
 $4=$ratio;
 $5=$1;
 $6=(($5+16)|0);
 $cfg=$6;
 $7=$1;
 $8=(($7+84040)|0);
 $eov=$8;
 $9=$1;
 $10=(($9+304)|0);
 $l3_side=$10;
 HEAP32[(($mean_bits)>>2)]=0;
 $11=$1;
 $12=$2;
 $13=$3;
 $14=(($targ_bits)|0);
 _calc_target_bits($11,$12,$13,$14,$analog_silence_bits,$max_frame_bits);
 $gr=0;
 while(1) {
  $16=$gr;
  $17=$cfg;
  $18=(($17+60)|0);
  $19=((HEAP32[(($18)>>2)])|0);
  $20=($16|0)<($19|0);
  if (!($20)) {
   break;
  }
  $22=$1;
  $23=(($22+84040)|0);
  $24=(($23+716)|0);
  $25=((HEAP32[(($24)>>2)])|0);
  $26=($25|0)==2;
  if ($26) {
   $28=$1;
   $29=(($28+304)|0);
   $30=$gr;
   _ms_convert($29,$30);
  }
  $ch=0;
  while(1) {
   $33=$ch;
   $34=$cfg;
   $35=(($34+56)|0);
   $36=((HEAP32[(($35)>>2)])|0);
   $37=($33|0)<($36|0);
   if (!($37)) {
    break;
   }
   $39=$ch;
   $40=$gr;
   $41=$l3_side;
   $42=(($41)|0);
   $43=(($42+((($40)*(10504))&-1))|0);
   $44=(($43+((($39)*(5252))&-1))|0);
   $cod_info=$44;
   $45=$cod_info;
   $46=(($45+4788)|0);
   $47=((HEAP32[(($46)>>2)])|0);
   $48=($47|0)!=2;
   if ($48) {
    $adjust=0.0;
    $50=$1;
    $51=(($50+84768)|0);
    $52=(($51+144)|0);
    $53=(+(HEAPF32[(($52)>>2)]));
    $54=$adjust;
    $55=($53)-($54);
    $masking_lower_db=$55;
   } else {
    $adjust=0.0;
    $57=$1;
    $58=(($57+84768)|0);
    $59=(($58+148)|0);
    $60=(+(HEAPF32[(($59)>>2)]));
    $61=$adjust;
    $62=($60)-($61);
    $masking_lower_db=$62;
   }
   $64=$masking_lower_db;
   $65=$64;
   $66=($65)*((0.1));
   $67=(+(Math_pow(10.0,(+($66)))));
   $68=$67;
   $69=$1;
   $70=(($69+84768)|0);
   $71=(($70+140)|0);
   HEAPF32[(($71)>>2)]=$68;
   $72=$1;
   $73=$cod_info;
   _init_outer_loop($72,$73);
   $74=$1;
   $75=$cod_info;
   $76=(($xrpow)|0);
   $77=((_init_xrpow($74,$75,$76))|0);
   $78=($77|0)!=0;
   if ($78) {
    $80=$1;
    $81=$ch;
    $82=$gr;
    $83=$4;
    $84=(($83+((($82)*(976))&-1))|0);
    $85=(($84+((($81)*(488))&-1))|0);
    $86=$cod_info;
    $87=(($l3_xmin)|0);
    $88=((_calc_xmin($80,$85,$86,$87))|0);
    $ath_over=$88;
    $89=$ath_over;
    $90=0==($89|0);
    if ($90) {
     $92=((HEAP32[(($analog_silence_bits)>>2)])|0);
     $93=$ch;
     $94=$gr;
     $95=(($targ_bits+($94<<3))|0);
     $96=(($95+($93<<2))|0);
     HEAP32[(($96)>>2)]=$92;
    }
    $98=$1;
    $99=$cod_info;
    $100=(($l3_xmin)|0);
    $101=(($xrpow)|0);
    $102=$ch;
    $103=$ch;
    $104=$gr;
    $105=(($targ_bits+($104<<3))|0);
    $106=(($105+($103<<2))|0);
    $107=((HEAP32[(($106)>>2)])|0);
    $108=((_outer_loop($98,$99,$100,$101,$102,$107))|0);
   }
   $110=$1;
   $111=$gr;
   $112=$ch;
   _iteration_finish_one($110,$111,$112);
   $114=$ch;
   $115=((($114)+(1))|0);
   $ch=$115;
  }
  $118=$gr;
  $119=((($118)+(1))|0);
  $gr=$119;
 }
 $121=$cfg;
 $122=(($121+96)|0);
 $123=((HEAP32[(($122)>>2)])|0);
 $124=$eov;
 $125=(($124+704)|0);
 HEAP32[(($125)>>2)]=$123;
 while(1) {
  $127=$eov;
  $128=(($127+704)|0);
  $129=((HEAP32[(($128)>>2)])|0);
  $130=$cfg;
  $131=(($130+100)|0);
  $132=((HEAP32[(($131)>>2)])|0);
  $133=($129|0)<=($132|0);
  if (!($133)) {
   label = 24;
   break;
  }
  $135=$1;
  $136=((_ResvFrameBegin($135,$mean_bits))|0);
  $137=($136|0)>=0;
  if ($137) {
   break;
  }
  $141=$eov;
  $142=(($141+704)|0);
  $143=((HEAP32[(($142)>>2)])|0);
  $144=((($143)+(1))|0);
  HEAP32[(($142)>>2)]=$144;
 }
 if ((label|0) == 24) {
  $146=$1;
  $147=((HEAP32[(($mean_bits)>>2)])|0);
  _ResvFrameEnd($146,$147);
  STACKTOP=sp;return;
 }
 $146=$1;
 $147=((HEAP32[(($mean_bits)>>2)])|0);
 _ResvFrameEnd($146,$147);
 STACKTOP=sp;return;
}


function _CBR_iteration_loop($gfc,$pe,$ms_ener_ratio,$ratio){
 $gfc=($gfc)|0;
 $pe=($pe)|0;
 $ms_ener_ratio=($ms_ener_ratio)|0;
 $ratio=($ratio)|0;
 var $1=0,$2=0,$3=0,$4=0,$cfg=0,$l3_xmin=0,$xrpow=0,$targ_bits=0,$mean_bits=0,$max_bits=0,$gr=0,$ch=0,$l3_side=0,$cod_info=0,$adjust=.0,$masking_lower_db=.0,$5=0,$6=0,$7=0,$8=0;
 var $9=0,$10=0,$12=0,$13=0,$14=0,$15=0,$16=0,$18=0,$19=0,$20=0,$21=0,$22=0,$23=0,$24=0,$25=0,$26=0,$27=0,$28=0,$29=0,$31=0;
 var $32=0,$33=0,$34=0,$35=0,$36=0,$37=0,$38=.0,$39=0,$40=0,$43=0,$44=0,$45=0,$46=0,$47=0,$49=0,$50=0,$51=0,$52=0,$53=0,$54=0;
 var $55=0,$56=0,$57=0,$58=0,$60=0,$61=0,$62=0,$63=.0,$64=.0,$65=.0,$67=0,$68=0,$69=0,$70=.0,$71=.0,$72=.0,$74=.0,$75=.0,$76=.0,$77=.0;
 var $78=.0,$79=0,$80=0,$81=0,$82=0,$83=0,$84=0,$85=0,$86=0,$87=0,$88=0,$90=0,$91=0,$92=0,$93=0,$94=0,$95=0,$96=0,$97=0,$98=0;
 var $99=0,$100=0,$101=0,$102=0,$103=0,$104=0,$105=0,$106=0,$107=0,$109=0,$110=0,$111=0,$113=0,$114=0,$117=0,$118=0,$120=0,$121=0,label=0;
 var sp=0;sp=STACKTOP;STACKTOP=(STACKTOP+2480)|0;





 $l3_xmin=((sp)|0);
 $xrpow=(((sp)+(160))|0);
 $targ_bits=(((sp)+(2464))|0);
 $mean_bits=(((sp)+(2472))|0);







 $1=$gfc;
 $2=$pe;
 $3=$ms_ener_ratio;
 $4=$ratio;
 $5=$1;
 $6=(($5+16)|0);
 $cfg=$6;
 $7=$1;
 $8=(($7+304)|0);
 $l3_side=$8;
 $9=$1;
 $10=((_ResvFrameBegin($9,$mean_bits))|0);
 $gr=0;
 while(1) {
  $12=$gr;
  $13=$cfg;
  $14=(($13+60)|0);
  $15=((HEAP32[(($14)>>2)])|0);
  $16=($12|0)<($15|0);
  if (!($16)) {
   break;
  }
  $18=$1;
  $19=$2;
  $20=(($targ_bits)|0);
  $21=((HEAP32[(($mean_bits)>>2)])|0);
  $22=$gr;
  $23=$gr;
  $24=((_on_pe($18,$19,$20,$21,$22,$23))|0);
  $max_bits=$24;
  $25=$1;
  $26=(($25+84040)|0);
  $27=(($26+716)|0);
  $28=((HEAP32[(($27)>>2)])|0);
  $29=($28|0)==2;
  if ($29) {
   $31=$1;
   $32=(($31+304)|0);
   $33=$gr;
   _ms_convert($32,$33);
   $34=(($targ_bits)|0);
   $35=$gr;
   $36=$3;
   $37=(($36+($35<<2))|0);
   $38=(+(HEAPF32[(($37)>>2)]));
   $39=((HEAP32[(($mean_bits)>>2)])|0);
   $40=$max_bits;
   _reduce_side($34,$38,$39,$40);
  }
  $ch=0;
  while(1) {
   $43=$ch;
   $44=$cfg;
   $45=(($44+56)|0);
   $46=((HEAP32[(($45)>>2)])|0);
   $47=($43|0)<($46|0);
   if (!($47)) {
    break;
   }
   $49=$ch;
   $50=$gr;
   $51=$l3_side;
   $52=(($51)|0);
   $53=(($52+((($50)*(10504))&-1))|0);
   $54=(($53+((($49)*(5252))&-1))|0);
   $cod_info=$54;
   $55=$cod_info;
   $56=(($55+4788)|0);
   $57=((HEAP32[(($56)>>2)])|0);
   $58=($57|0)!=2;
   if ($58) {
    $adjust=0.0;
    $60=$1;
    $61=(($60+84768)|0);
    $62=(($61+144)|0);
    $63=(+(HEAPF32[(($62)>>2)]));
    $64=$adjust;
    $65=($63)-($64);
    $masking_lower_db=$65;
   } else {
    $adjust=0.0;
    $67=$1;
    $68=(($67+84768)|0);
    $69=(($68+148)|0);
    $70=(+(HEAPF32[(($69)>>2)]));
    $71=$adjust;
    $72=($70)-($71);
    $masking_lower_db=$72;
   }
   $74=$masking_lower_db;
   $75=$74;
   $76=($75)*((0.1));
   $77=(+(Math_pow(10.0,(+($76)))));
   $78=$77;
   $79=$1;
   $80=(($79+84768)|0);
   $81=(($80+140)|0);
   HEAPF32[(($81)>>2)]=$78;
   $82=$1;
   $83=$cod_info;
   _init_outer_loop($82,$83);
   $84=$1;
   $85=$cod_info;
   $86=(($xrpow)|0);
   $87=((_init_xrpow($84,$85,$86))|0);
   $88=($87|0)!=0;
   if ($88) {
    $90=$1;
    $91=$ch;
    $92=$gr;
    $93=$4;
    $94=(($93+((($92)*(976))&-1))|0);
    $95=(($94+((($91)*(488))&-1))|0);
    $96=$cod_info;
    $97=(($l3_xmin)|0);
    $98=((_calc_xmin($90,$95,$96,$97))|0);
    $99=$1;
    $100=$cod_info;
    $101=(($l3_xmin)|0);
    $102=(($xrpow)|0);
    $103=$ch;
    $104=$ch;
    $105=(($targ_bits+($104<<2))|0);
    $106=((HEAP32[(($105)>>2)])|0);
    $107=((_outer_loop($99,$100,$101,$102,$103,$106))|0);
   }
   $109=$1;
   $110=$gr;
   $111=$ch;
   _iteration_finish_one($109,$110,$111);
   $113=$ch;
   $114=((($113)+(1))|0);
   $ch=$114;
  }
  $117=$gr;
  $118=((($117)+(1))|0);
  $gr=$118;
 }
 $120=$1;
 $121=((HEAP32[(($mean_bits)>>2)])|0);
 _ResvFrameEnd($120,$121);
 STACKTOP=sp;return;
}


function _init_xrpow_core_c($cod_info,$xrpow,$upper,$sum){
 $cod_info=($cod_info)|0;
 $xrpow=($xrpow)|0;
 $upper=($upper)|0;
 $sum=($sum)|0;
 var $1=0,$2=0,$3=0,$4=0,$i=0,$tmp=.0,$5=0,$7=0,$8=0,$9=0,$11=0,$12=0,$13=0,$14=0,$15=.0,$16=.0,$17=.0,$18=.0,$19=.0,$20=0;
 var $21=.0,$22=.0,$23=.0,$24=.0,$25=.0,$26=.0,$27=.0,$28=.0,$29=.0,$30=.0,$31=0,$32=0,$33=0,$34=0,$35=0,$36=0,$37=.0,$38=0,$39=0,$40=.0;
 var $41=0,$43=0,$44=0,$45=0,$46=.0,$47=0,$48=0,$51=0,$52=0,label=0;
 var sp=0;sp=STACKTOP;






 $1=$cod_info;
 $2=$xrpow;
 $3=$upper;
 $4=$sum;
 $5=$4;
 HEAPF32[(($5)>>2)]=0.0;
 $i=0;
 while(1) {
  $7=$i;
  $8=$3;
  $9=($7|0)<=($8|0);
  if (!($9)) {
   break;
  }
  $11=$i;
  $12=$1;
  $13=(($12)|0);
  $14=(($13+($11<<2))|0);
  $15=(+(HEAPF32[(($14)>>2)]));
  $16=$15;
  $17=(+(Math_abs((+($16)))));
  $18=$17;
  $tmp=$18;
  $19=$tmp;
  $20=$4;
  $21=(+(HEAPF32[(($20)>>2)]));
  $22=($21)+($19);
  HEAPF32[(($20)>>2)]=$22;
  $23=$tmp;
  $24=$23;
  $25=$tmp;
  $26=$25;
  $27=(+(Math_sqrt($26)));
  $28=($24)*($27);
  $29=(+(Math_sqrt($28)));
  $30=$29;
  $31=$i;
  $32=$2;
  $33=(($32+($31<<2))|0);
  HEAPF32[(($33)>>2)]=$30;
  $34=$i;
  $35=$2;
  $36=(($35+($34<<2))|0);
  $37=(+(HEAPF32[(($36)>>2)]));
  $38=$1;
  $39=(($38+4764)|0);
  $40=(+(HEAPF32[(($39)>>2)]));
  $41=$37>$40;
  if ($41) {
   $43=$i;
   $44=$2;
   $45=(($44+($43<<2))|0);
   $46=(+(HEAPF32[(($45)>>2)]));
   $47=$1;
   $48=(($47+4764)|0);
   HEAPF32[(($48)>>2)]=$46;
  }
  $51=$i;
  $52=((($51)+(1))|0);
  $i=$52;
 }
 STACKTOP=sp;return;
}


function _VBR_old_prepare($gfc,$pe,$ms_ener_ratio,$ratio,$l3_xmin,$frameBits,$min_bits,$max_bits,$bands){
 $gfc=($gfc)|0;
 $pe=($pe)|0;
 $ms_ener_ratio=($ms_ener_ratio)|0;
 $ratio=($ratio)|0;
 $l3_xmin=($l3_xmin)|0;
 $frameBits=($frameBits)|0;
 $min_bits=($min_bits)|0;
 $max_bits=($max_bits)|0;
 $bands=($bands)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$cfg=0,$eov=0,$masking_lower_db=.0,$adjust=.0,$gr=0,$ch=0,$analog_silence=0,$avg=0,$mxb=0,$bits=0,$cod_info=0;
 var $10=0,$11=0,$12=0,$13=0,$14=0,$15=0,$16=0,$17=0,$18=0,$19=0,$20=0,$21=0,$22=0,$23=0,$24=0,$25=0,$26=0,$28=0,$29=0,$30=0;
 var $31=0,$32=0,$34=0,$35=0,$36=0,$37=0,$38=0,$39=0,$40=0,$41=0,$42=0,$43=0,$44=0,$45=0,$46=0,$47=0,$49=0,$50=0,$51=0,$52=0;
 var $53=0,$54=0,$55=0,$56=0,$57=0,$58=0,$59=.0,$60=0,$61=0,$64=0,$65=0,$66=0,$67=0,$68=0,$70=0,$71=0,$72=0,$73=0,$74=0,$75=0;
 var $76=0,$77=0,$78=0,$79=0,$80=0,$82=0,$83=0,$84=0,$85=0,$86=0,$87=.0,$88=.0,$89=.0,$90=.0,$91=.0,$92=.0,$93=.0,$94=.0,$95=.0,$96=0;
 var $97=0,$98=0,$99=.0,$100=.0,$101=.0,$103=0,$104=0,$105=0,$106=0,$107=0,$108=.0,$109=.0,$110=.0,$111=.0,$112=.0,$113=.0,$114=.0,$115=.0,$116=.0,$117=0;
 var $118=0,$119=0,$120=.0,$121=.0,$122=.0,$124=.0,$125=.0,$126=.0,$127=.0,$128=.0,$129=0,$130=0,$131=0,$132=0,$133=0,$134=0,$135=0,$136=0,$137=0,$138=0;
 var $139=0,$140=0,$141=0,$142=0,$143=0,$144=0,$145=0,$146=0,$147=0,$148=0,$149=0,$150=0,$151=0,$152=0,$153=0,$154=0,$155=0,$156=0,$157=0,$158=0;
 var $159=0,$162=0,$163=0,$164=0,$165=0,$166=0,$167=0,$168=0,$169=0,$170=0,$171=0,$172=0,$173=0,$174=0,$176=0,$177=0,$180=0,$181=0,$184=0,$185=0;
 var $186=0,$187=0,$188=0,$191=0,$192=0,$193=0,$194=0,$195=0,$197=0,$198=0,$199=0,$200=0,$201=0,$202=0,$203=0,$204=0,$206=0,$207=0,$209=0,$210=0;
 var $211=0,$212=0,$213=0,$214=0,$215=0,$216=0,$217=0,$218=0,$219=0,$220=0,$221=0,$222=0,$223=0,$224=0,$225=0,$226=0,$227=0,$228=0,$229=0,$231=0;
 var $232=0,$233=0,$234=0,$235=0,$236=0,$237=0,$238=0,$239=0,$240=0,$241=0,$242=0,$243=0,$245=0,$246=0,$247=0,$248=0,$249=0,$250=0,$251=0,$252=0;
 var $253=0,$254=0,$255=0,$258=0,$259=0,$262=0,$263=0,$265=0,label=0;
 var sp=0;sp=STACKTOP;STACKTOP=(STACKTOP+8)|0;
















 $avg=((sp)|0);



 $1=$gfc;
 $2=$pe;
 $3=$ms_ener_ratio;
 $4=$ratio;
 $5=$l3_xmin;
 $6=$frameBits;
 $7=$min_bits;
 $8=$max_bits;
 $9=$bands;
 $10=$1;
 $11=(($10+16)|0);
 $cfg=$11;
 $12=$1;
 $13=(($12+84040)|0);
 $eov=$13;
 $adjust=0.0;
 $analog_silence=1;
 $bits=0;
 $14=$cfg;
 $15=(($14+100)|0);
 $16=((HEAP32[(($15)>>2)])|0);
 $17=$eov;
 $18=(($17+704)|0);
 HEAP32[(($18)>>2)]=$16;
 $19=$1;
 $20=((_ResvFrameBegin($19,$avg))|0);
 $21=$cfg;
 $22=(($21+60)|0);
 $23=((HEAP32[(($22)>>2)])|0);
 $24=(((($20|0))/(($23|0)))&-1);
 HEAP32[(($avg)>>2)]=$24;
 $25=$1;
 $26=$6;
 _get_framebits($25,$26);
 $gr=0;
 while(1) {
  $28=$gr;
  $29=$cfg;
  $30=(($29+60)|0);
  $31=((HEAP32[(($30)>>2)])|0);
  $32=($28|0)<($31|0);
  if (!($32)) {
   break;
  }
  $34=$1;
  $35=$2;
  $36=$gr;
  $37=$8;
  $38=(($37+($36<<3))|0);
  $39=(($38)|0);
  $40=((HEAP32[(($avg)>>2)])|0);
  $41=$gr;
  $42=((_on_pe($34,$35,$39,$40,$41,0))|0);
  $mxb=$42;
  $43=$1;
  $44=(($43+84040)|0);
  $45=(($44+716)|0);
  $46=((HEAP32[(($45)>>2)])|0);
  $47=($46|0)==2;
  if ($47) {
   $49=$1;
   $50=(($49+304)|0);
   $51=$gr;
   _ms_convert($50,$51);
   $52=$gr;
   $53=$8;
   $54=(($53+($52<<3))|0);
   $55=(($54)|0);
   $56=$gr;
   $57=$3;
   $58=(($57+($56<<2))|0);
   $59=(+(HEAPF32[(($58)>>2)]));
   $60=((HEAP32[(($avg)>>2)])|0);
   $61=$mxb;
   _reduce_side($55,$59,$60,$61);
  }
  $ch=0;
  while(1) {
   $64=$ch;
   $65=$cfg;
   $66=(($65+56)|0);
   $67=((HEAP32[(($66)>>2)])|0);
   $68=($64|0)<($67|0);
   if (!($68)) {
    break;
   }
   $70=$ch;
   $71=$gr;
   $72=$1;
   $73=(($72+304)|0);
   $74=(($73)|0);
   $75=(($74+((($71)*(10504))&-1))|0);
   $76=(($75+((($70)*(5252))&-1))|0);
   $cod_info=$76;
   $77=$cod_info;
   $78=(($77+4788)|0);
   $79=((HEAP32[(($78)>>2)])|0);
   $80=($79|0)!=2;
   if ($80) {
    $82=$ch;
    $83=$gr;
    $84=$2;
    $85=(($84+($83<<3))|0);
    $86=(($85+($82<<2))|0);
    $87=(+(HEAPF32[(($86)>>2)]));
    $88=$87;
    $89=($88)/((300.0));
    $90=((3.5))-($89);
    $91=(+(Math_exp($90)));
    $92=((1.0))+($91);
    $93=((1.28))/($92);
    $94=($93)-((0.05));
    $95=$94;
    $adjust=$95;
    $96=$1;
    $97=(($96+84768)|0);
    $98=(($97+144)|0);
    $99=(+(HEAPF32[(($98)>>2)]));
    $100=$adjust;
    $101=($99)-($100);
    $masking_lower_db=$101;
   } else {
    $103=$ch;
    $104=$gr;
    $105=$2;
    $106=(($105+($104<<3))|0);
    $107=(($106+($103<<2))|0);
    $108=(+(HEAPF32[(($107)>>2)]));
    $109=$108;
    $110=($109)/((300.0));
    $111=((3.5))-($110);
    $112=(+(Math_exp($111)));
    $113=((1.0))+($112);
    $114=((2.56))/($113);
    $115=($114)-((0.14));
    $116=$115;
    $adjust=$116;
    $117=$1;
    $118=(($117+84768)|0);
    $119=(($118+148)|0);
    $120=(+(HEAPF32[(($119)>>2)]));
    $121=$adjust;
    $122=($120)-($121);
    $masking_lower_db=$122;
   }
   $124=$masking_lower_db;
   $125=$124;
   $126=($125)*((0.1));
   $127=(+(Math_pow(10.0,(+($126)))));
   $128=$127;
   $129=$1;
   $130=(($129+84768)|0);
   $131=(($130+140)|0);
   HEAPF32[(($131)>>2)]=$128;
   $132=$1;
   $133=$cod_info;
   _init_outer_loop($132,$133);
   $134=$1;
   $135=$ch;
   $136=$gr;
   $137=$4;
   $138=(($137+((($136)*(976))&-1))|0);
   $139=(($138+((($135)*(488))&-1))|0);
   $140=$cod_info;
   $141=$ch;
   $142=$gr;
   $143=$5;
   $144=(($143+((($142)*(312))&-1))|0);
   $145=(($144+((($141)*(156))&-1))|0);
   $146=(($145)|0);
   $147=((_calc_xmin($134,$139,$140,$146))|0);
   $148=$ch;
   $149=$gr;
   $150=$9;
   $151=(($150+($149<<3))|0);
   $152=(($151+($148<<2))|0);
   HEAP32[(($152)>>2)]=$147;
   $153=$ch;
   $154=$gr;
   $155=$9;
   $156=(($155+($154<<3))|0);
   $157=(($156+($153<<2))|0);
   $158=((HEAP32[(($157)>>2)])|0);
   $159=($158|0)!=0;
   if ($159) {
    $analog_silence=0;
   }
   $162=$ch;
   $163=$gr;
   $164=$7;
   $165=(($164+($163<<3))|0);
   $166=(($165+($162<<2))|0);
   HEAP32[(($166)>>2)]=126;
   $167=$ch;
   $168=$gr;
   $169=$8;
   $170=(($169+($168<<3))|0);
   $171=(($170+($167<<2))|0);
   $172=((HEAP32[(($171)>>2)])|0);
   $173=$bits;
   $174=((($173)+($172))|0);
   $bits=$174;
   $176=$ch;
   $177=((($176)+(1))|0);
   $ch=$177;
  }
  $180=$gr;
  $181=((($180)+(1))|0);
  $gr=$181;
 }
 $gr=0;
 while(1) {
  $184=$gr;
  $185=$cfg;
  $186=(($185+60)|0);
  $187=((HEAP32[(($186)>>2)])|0);
  $188=($184|0)<($187|0);
  if (!($188)) {
   break;
  }
  $ch=0;
  while(1) {
   $191=$ch;
   $192=$cfg;
   $193=(($192+56)|0);
   $194=((HEAP32[(($193)>>2)])|0);
   $195=($191|0)<($194|0);
   if (!($195)) {
    break;
   }
   $197=$bits;
   $198=$cfg;
   $199=(($198+100)|0);
   $200=((HEAP32[(($199)>>2)])|0);
   $201=$6;
   $202=(($201+($200<<2))|0);
   $203=((HEAP32[(($202)>>2)])|0);
   $204=($197|0)>($203|0);
   do {
    if ($204) {
     $206=$bits;
     $207=($206|0)>0;
     if (!($207)) {
      break;
     }
     $209=$cfg;
     $210=(($209+100)|0);
     $211=((HEAP32[(($210)>>2)])|0);
     $212=$6;
     $213=(($212+($211<<2))|0);
     $214=((HEAP32[(($213)>>2)])|0);
     $215=$ch;
     $216=$gr;
     $217=$8;
     $218=(($217+($216<<3))|0);
     $219=(($218+($215<<2))|0);
     $220=((HEAP32[(($219)>>2)])|0);
     $221=(Math_imul($220,$214)|0);
     HEAP32[(($219)>>2)]=$221;
     $222=$bits;
     $223=$ch;
     $224=$gr;
     $225=$8;
     $226=(($225+($224<<3))|0);
     $227=(($226+($223<<2))|0);
     $228=((HEAP32[(($227)>>2)])|0);
     $229=(((($228|0))/(($222|0)))&-1);
     HEAP32[(($227)>>2)]=$229;
    }
   } while(0);
   $231=$ch;
   $232=$gr;
   $233=$7;
   $234=(($233+($232<<3))|0);
   $235=(($234+($231<<2))|0);
   $236=((HEAP32[(($235)>>2)])|0);
   $237=$ch;
   $238=$gr;
   $239=$8;
   $240=(($239+($238<<3))|0);
   $241=(($240+($237<<2))|0);
   $242=((HEAP32[(($241)>>2)])|0);
   $243=($236|0)>($242|0);
   if ($243) {
    $245=$ch;
    $246=$gr;
    $247=$8;
    $248=(($247+($246<<3))|0);
    $249=(($248+($245<<2))|0);
    $250=((HEAP32[(($249)>>2)])|0);
    $251=$ch;
    $252=$gr;
    $253=$7;
    $254=(($253+($252<<3))|0);
    $255=(($254+($251<<2))|0);
    HEAP32[(($255)>>2)]=$250;
   }
   $258=$ch;
   $259=((($258)+(1))|0);
   $ch=$259;
  }
  $262=$gr;
  $263=((($262)+(1))|0);
  $gr=$263;
 }
 $265=$analog_silence;
 STACKTOP=sp;return (($265)|0);
}


function _init_xrpow($gfc,$cod_info,$xrpow){
 $gfc=($gfc)|0;
 $cod_info=($cod_info)|0;
 $xrpow=($xrpow)|0;
 var $1=0,$2=0,$3=0,$4=0,$sum=0,$i=0,$upper=0,$j=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$14=0,$15=0,$16=0;
 var $17=0,$18=0,$19=0,$20=0,$21=0,$22=0,$23=.0,$24=0,$26=0,$27=0,$28=0,$29=0,$30=0,$31=0,$35=0,$36=0,$37=0,$38=0,$39=0,$41=0;
 var $42=0,$43=0,$44=0,$45=0,$46=0,$48=0,$49=0,$52=0,$53=0,$54=0,$55=0,$57=0,label=0;
 var sp=0;sp=STACKTOP;STACKTOP=(STACKTOP+8)|0;




 $sum=((sp)|0);



 $2=$gfc;
 $3=$cod_info;
 $4=$xrpow;
 HEAPF32[(($sum)>>2)]=0.0;
 $5=$3;
 $6=(($5+5208)|0);
 $7=((HEAP32[(($6)>>2)])|0);
 $upper=$7;
 $8=$3;
 $9=(($8+4764)|0);
 HEAPF32[(($9)>>2)]=0.0;
 $10=$upper;
 $11=$4;
 $12=(($11+($10<<2))|0);
 $13=$12;
 $14=$upper;
 $15=(((576)-($14))|0);
 $16=($15<<2);
 _memset((((($13)|0))|0), ((((0)|0))|0), (((($16)|0))|0))|0;
 $17=$2;
 $18=(($17+85824)|0);
 $19=((HEAP32[(($18)>>2)])|0);
 $20=$3;
 $21=$4;
 $22=$upper;
 FUNCTION_TABLE_viiii[($19)&15]($20,$21,$22,$sum);
 $23=(+(HEAPF32[(($sum)>>2)]));
 $24=$23>(9.999999682655225e-21);
 if (!($24)) {
  $52=$3;
  $53=(($52+2304)|0);
  $54=(($53)|0);
  $55=$54;
  _memset((((($55)|0))|0), ((((0)|0))|0), ((((2304)|0))|0))|0;
  $1=0;
  $57=$1;
  STACKTOP=sp;return (($57)|0);
 }
 $j=0;
 $26=$2;
 $27=(($26+84768)|0);
 $28=(($27+328)|0);
 $29=((HEAP32[(($28)>>2)])|0);
 $30=$29&2;
 $31=($30|0)!=0;
 if ($31) {
  $j=1;
 }
 $i=0;
 while(1) {
  $35=$i;
  $36=$3;
  $37=(($36+4864)|0);
  $38=((HEAP32[(($37)>>2)])|0);
  $39=($35|0)<($38|0);
  if (!($39)) {
   break;
  }
  $41=$j;
  $42=$i;
  $43=$2;
  $44=(($43+84768)|0);
  $45=(($44+168)|0);
  $46=(($45+($42<<2))|0);
  HEAP32[(($46)>>2)]=$41;
  $48=$i;
  $49=((($48)+(1))|0);
  $i=$49;
 }
 $1=1;
 $57=$1;
 STACKTOP=sp;return (($57)|0);
}


function _VBR_encode_granule($gfc,$cod_info,$l3_xmin,$xrpow,$ch,$min_bits,$max_bits){
 $gfc=($gfc)|0;
 $cod_info=($cod_info)|0;
 $l3_xmin=($l3_xmin)|0;
 $xrpow=($xrpow)|0;
 $ch=($ch)|0;
 $min_bits=($min_bits)|0;
 $max_bits=($max_bits)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$bst_cod_info=0,$bst_xrpow=0,$Max_bits=0,$real_bits=0,$this_bits=0,$dbits=0,$over=0,$found=0,$sfb21_extra=0,$8=0,$9=0,$10=0,$11=0;
 var $12=0,$13=0,$14=0,$15=0,$16=0,$17=0,$18=0,$19=0,$20=0,$22=0,$23=0,$24=0,$25=0,$27=0,$28=0,$29=0,$31=0,$32=0,$33=0,$34=0;
 var $36=0,$37=0,$38=0,$39=0,$40=0,$41=0,$42=0,$43=0,$44=0,$46=0,$47=0,$48=0,$49=0,$50=0,$51=0,$52=0,$53=0,$54=0,$55=0,$56=0;
 var $57=0,$58=0,$59=0,$60=0,$61=0,$62=0,$63=0,$65=0,$66=0,$67=0,$68=0,$69=0,$70=0,$71=0,$72=0,$73=0,$74=0,$75=0,$77=0,$78=0;
 var $79=0,$80=0,$81=0,$82=0,$86=0,$87=0,$89=0,$90=0,$91=0,$92=0,$93=0,$94=0,$96=0,$97=0,$98=0,$99=0,$100=0,label=0;
 var sp=0;sp=STACKTOP;STACKTOP=(STACKTOP+7560)|0;







 $bst_cod_info=((sp)|0);
 $bst_xrpow=(((sp)+(5256))|0);







 $1=$gfc;
 $2=$cod_info;
 $3=$l3_xmin;
 $4=$xrpow;
 $5=$ch;
 $6=$min_bits;
 $7=$max_bits;
 $8=$7;
 $Max_bits=$8;
 $9=$7;
 $10=((($9)+(1))|0);
 $real_bits=$10;
 $11=$7;
 $12=$6;
 $13=((($11)+($12))|0);
 $14=(((($13|0))/(2))&-1);
 $this_bits=$14;
 $found=0;
 $15=$1;
 $16=(($15+84768)|0);
 $17=(($16+324)|0);
 $18=((HEAP32[(($17)>>2)])|0);
 $sfb21_extra=$18;
 $19=(($bst_cod_info+2304)|0);
 $20=$19;
 _memset((((($20)|0))|0), ((((0)|0))|0), ((((2304)|0))|0))|0;
 while(1) {
  $22=$this_bits;
  $23=$Max_bits;
  $24=((($23)-(42))|0);
  $25=($22|0)>($24|0);
  if ($25) {
   $27=$1;
   $28=(($27+84768)|0);
   $29=(($28+324)|0);
   HEAP32[(($29)>>2)]=0;
  } else {
   $31=$sfb21_extra;
   $32=$1;
   $33=(($32+84768)|0);
   $34=(($33+324)|0);
   HEAP32[(($34)>>2)]=$31;
  }
  $36=$1;
  $37=$2;
  $38=$3;
  $39=$4;
  $40=$5;
  $41=$this_bits;
  $42=((_outer_loop($36,$37,$38,$39,$40,$41))|0);
  $over=$42;
  $43=$over;
  $44=($43|0)<=0;
  if ($44) {
   $found=1;
   $46=$2;
   $47=(($46+4768)|0);
   $48=((HEAP32[(($47)>>2)])|0);
   $real_bits=$48;
   $49=$2;
   $50=$bst_cod_info;
   $51=$49;
   (_memcpy((($50)|0), (($51)|0), 5252)|0);
   $52=$bst_xrpow;
   $53=$4;
   $54=$53;
   (_memcpy((($52)|0), (($54)|0), 2304)|0);
   $55=$real_bits;
   $56=((($55)-(32))|0);
   $7=$56;
   $57=$7;
   $58=$6;
   $59=((($57)-($58))|0);
   $dbits=$59;
   $60=$7;
   $61=$6;
   $62=((($60)+($61))|0);
   $63=(((($62|0))/(2))&-1);
   $this_bits=$63;
  } else {
   $65=$this_bits;
   $66=((($65)+(32))|0);
   $6=$66;
   $67=$7;
   $68=$6;
   $69=((($67)-($68))|0);
   $dbits=$69;
   $70=$7;
   $71=$6;
   $72=((($70)+($71))|0);
   $73=(((($72|0))/(2))&-1);
   $this_bits=$73;
   $74=$found;
   $75=($74|0)!=0;
   if ($75) {
    $found=2;
    $77=$2;
    $78=$77;
    $79=$bst_cod_info;
    (_memcpy((($78)|0), (($79)|0), 5252)|0);
    $80=$4;
    $81=$80;
    $82=$bst_xrpow;
    (_memcpy((($81)|0), (($82)|0), 2304)|0);
   }
  }
  $86=$dbits;
  $87=($86|0)>12;
  if (!($87)) {
   break;
  }
 }
 $89=$sfb21_extra;
 $90=$1;
 $91=(($90+84768)|0);
 $92=(($91+324)|0);
 HEAP32[(($92)>>2)]=$89;
 $93=$found;
 $94=($93|0)==2;
 if (!($94)) {
  STACKTOP=sp;return;
 }
 $96=$2;
 $97=(($96+2304)|0);
 $98=$97;
 $99=(($bst_cod_info+2304)|0);
 $100=$99;
 (_memcpy((($98)|0), (($100)|0), 2304)|0);
 STACKTOP=sp;return;
}


function _trancate_smallspectrums($gfc,$gi,$l3_xmin,$work){
 $gfc=($gfc)|0;
 $gi=($gi)|0;
 $l3_xmin=($l3_xmin)|0;
 $work=($work)|0;
 var $1=0,$2=0,$3=0,$4=0,$sfb=0,$j=0,$width=0,$distort=0,$dummy=0,$xr=.0,$allowedNoise=.0,$trancateThreshold=.0,$nsame=0,$start=0,$noise=.0,$5=0,$6=0,$7=0,$8=0,$9=0;
 var $10=0,$12=0,$13=0,$14=0,$15=0,$17=0,$18=0,$19=0,$20=0,$21=0,$22=0,$25=0,$26=0,$27=0,$28=0,$30=0,$31=0,$33=0,$34=0,$35=0;
 var $36=0,$37=0,$38=0,$40=0,$41=0,$42=0,$43=0,$44=.0,$45=.0,$46=.0,$47=.0,$49=.0,$50=0,$51=0,$52=0,$54=0,$55=0,$57=0,$58=0,$59=0;
 var $60=0,$64=0,$65=0,$66=0,$67=0,$68=0,$69=0,$70=0,$71=0,$72=0,$73=0,$74=.0,$75=.0,$76=0,$79=0,$80=0,$81=0,$82=0,$83=0,$84=0;
 var $85=0,$86=0,$87=0,$88=0,$89=0,$90=.0,$91=.0,$92=.0,$93=.0,$94=0,$96=0,$97=0,$98=0,$99=0,$100=.0,$101=.0,$102=.0,$103=.0,$104=0,$105=0;
 var $106=0,$107=0,$108=.0,$109=.0,$110=.0,$111=.0,$112=0,$114=0,$115=0,$116=0,$117=0,$118=.0,$119=.0,$120=.0,$121=.0,$122=.0,$123=.0,$124=0,$127=0,$128=0;
 var $129=.0,$130=.0,$131=.0,$132=0,$133=0,$134=0,$135=.0,$136=.0,$137=.0,$138=.0,$141=0,$142=0,$143=0,$144=0,$145=0,$147=0,$148=0,$149=0,$150=0,$151=0;
 var $152=0,$153=0,$154=.0,$155=.0,$156=.0,$157=0,$158=0,$159=0,$160=0,$161=0,$162=0,$163=0,$164=0,$165=0,$166=.0,$167=.0,$168=.0,$169=0,$171=0,$172=0;
 var $173=0,$174=0,$175=0,$176=0,$177=0,$178=.0,$179=0,$180=0,$181=0,$182=0,$183=0,$184=0,$185=0,$186=0,$187=0,$188=.0,$189=.0,$190=.0,$191=.0,$192=0;
 var $193=0,$194=0,$195=0,$196=0,$197=0,$198=0,$199=.0,$200=.0,$201=.0,$202=.0,$203=0,$205=0,$206=0,$207=0,$208=0,$209=0,$210=0,$211=0,$212=.0,$213=0;
 var $214=0,$215=0,$216=0,$217=0,$218=0,$219=0,$220=0,$221=0,$222=.0,$223=.0,$224=.0,$225=.0,$226=0,$227=0,$228=0,$229=0,$230=0,$231=0,$232=0,$233=0;
 var $234=0,$235=.0,$236=.0,$237=.0,$238=.0,$239=0,$243=0,$244=0,$246=0,$247=0,$248=0,$249=0,$250=0,$251=0,$252=0,$253=.0,$254=0,$255=0,$256=0,$257=0;
 var $258=0,$259=0,$260=0,$261=.0,$262=.0,$263=0,$264=.0,$265=.0,$266=.0,$267=.0,$268=0,$270=0,$271=0,$273=0,$274=0,$275=0,$276=0,$277=0,$278=0,$279=0;
 var $280=0,$281=.0,$284=.0,$285=.0,$286=.0,$287=0,$288=0,$289=0,$291=0,$292=0,$293=0,$295=.0,$296=.0,$297=.0,$298=.0,$299=0,$301=.0,$302=.0,$303=.0,$304=.0;
 var $305=.0,$306=.0,$307=.0,$308=.0,$309=0,$311=.0,$312=.0,$313=.0,$314=.0,$315=.0,$316=.0,$317=0,$321=0,$322=0,$323=0,$324=0,$325=0,$326=0,$327=.0,$328=.0;
 var $329=.0,$330=.0,$331=.0,$332=0,$334=0,$335=0,$336=0,$337=0,$338=0,$339=0,$342=0,$343=0,$344=0,$347=0,$348=0,$349=0,$350=0,$351=0,$352=0,$354=0;
 var $355=0,$356=0,$357=0,$358=0,label=0;
 var sp=0;sp=STACKTOP;STACKTOP=(STACKTOP+184)|0;







 $distort=((sp)|0);
 $dummy=(((sp)+(160))|0);






 $1=$gfc;
 $2=$gi;
 $3=$l3_xmin;
 $4=$work;
 $5=$1;
 $6=(($5+84768)|0);
 $7=(($6+328)|0);
 $8=((HEAP32[(($7)>>2)])|0);
 $9=$8&4;
 $10=($9|0)!=0;
 if ($10) {
  label = 3;
 } else {
  $12=$2;
  $13=(($12+4788)|0);
  $14=((HEAP32[(($13)>>2)])|0);
  $15=($14|0)==2;
  if (!($15)) {
   label = 3;
  }
 }
 do {
  if ((label|0) == 3) {
   $17=$1;
   $18=(($17+84768)|0);
   $19=(($18+328)|0);
   $20=((HEAP32[(($19)>>2)])|0);
   $21=$20&128;
   $22=($21|0)!=0;
   if ($22) {
    break;
   }
   $25=$2;
   $26=$3;
   $27=(($distort)|0);
   $28=((_calc_noise($25,$26,$27,$dummy,0))|0);
   $j=0;
   while(1) {
    $30=$j;
    $31=($30|0)<576;
    if (!($31)) {
     break;
    }
    $xr=0.0;
    $33=$j;
    $34=$2;
    $35=(($34+2304)|0);
    $36=(($35+($33<<2))|0);
    $37=((HEAP32[(($36)>>2)])|0);
    $38=($37|0)!=0;
    if ($38) {
     $40=$j;
     $41=$2;
     $42=(($41)|0);
     $43=(($42+($40<<2))|0);
     $44=(+(HEAPF32[(($43)>>2)]));
     $45=$44;
     $46=(+(Math_abs((+($45)))));
     $47=$46;
     $xr=$47;
    }
    $49=$xr;
    $50=$j;
    $51=$4;
    $52=(($51+($50<<2))|0);
    HEAPF32[(($52)>>2)]=$49;
    $54=$j;
    $55=((($54)+(1))|0);
    $j=$55;
   }
   $j=0;
   $sfb=8;
   $57=$2;
   $58=(($57+4788)|0);
   $59=((HEAP32[(($58)>>2)])|0);
   $60=($59|0)==2;
   if ($60) {
    $sfb=6;
   }
   while(1) {
    $64=$sfb;
    $65=$2;
    $66=(($65+4872)|0);
    $67=(($66+($64<<2))|0);
    $68=((HEAP32[(($67)>>2)])|0);
    $width=$68;
    $69=$width;
    $70=$j;
    $71=((($70)+($69))|0);
    $j=$71;
    $72=$sfb;
    $73=(($distort+($72<<2))|0);
    $74=(+(HEAPF32[(($73)>>2)]));
    $75=$74;
    $76=$75>=(1.0);
    do {
     if ($76) {
     } else {
      $79=$j;
      $80=$width;
      $81=((($79)-($80))|0);
      $82=$4;
      $83=(($82+($81<<2))|0);
      $84=$83;
      $85=$width;
      _qsort((($84)|0),(($85)|0),((4)|0),((2)|0));
      $86=$j;
      $87=((($86)-(1))|0);
      $88=$4;
      $89=(($88+($87<<2))|0);
      $90=(+(HEAPF32[(($89)>>2)]));
      $91=$90;
      $92=(+(Math_abs((+($91)))));
      $93=(+(Math_abs(0.0)));
      $94=$92>$93;
      if ($94) {
       $96=$j;
       $97=((($96)-(1))|0);
       $98=$4;
       $99=(($98+($97<<2))|0);
       $100=(+(HEAPF32[(($99)>>2)]));
       $101=$100;
       $102=($101)-((0.0));
       $103=(+(Math_abs((+($102)))));
       $104=$j;
       $105=((($104)-(1))|0);
       $106=$4;
       $107=(($106+($105<<2))|0);
       $108=(+(HEAPF32[(($107)>>2)]));
       $109=$108;
       $110=(+(Math_abs((+($109)))));
       $111=($110)*((9.999999974752427e-7));
       $112=$103<=$111;
       if ($112) {
        label = 19;
       }
      } else {
       $114=$j;
       $115=((($114)-(1))|0);
       $116=$4;
       $117=(($116+($115<<2))|0);
       $118=(+(HEAPF32[(($117)>>2)]));
       $119=$118;
       $120=($119)-((0.0));
       $121=(+(Math_abs((+($120)))));
       $122=(+(Math_abs(0.0)));
       $123=($122)*((9.999999974752427e-7));
       $124=$121<=$123;
       if ($124) {
        label = 19;
       }
      }
      if ((label|0) == 19) {
       label = 0;
       break;
      }
      $127=$sfb;
      $128=(($distort+($127<<2))|0);
      $129=(+(HEAPF32[(($128)>>2)]));
      $130=$129;
      $131=((1.0))-($130);
      $132=$sfb;
      $133=$3;
      $134=(($133+($132<<2))|0);
      $135=(+(HEAPF32[(($134)>>2)]));
      $136=$135;
      $137=($131)*($136);
      $138=$137;
      $allowedNoise=$138;
      $trancateThreshold=0.0;
      $start=0;
      while(1) {
       $nsame=1;
       while(1) {
        $141=$start;
        $142=$nsame;
        $143=((($141)+($142))|0);
        $144=$width;
        $145=($143|0)<($144|0);
        if (!($145)) {
         break;
        }
        $147=$start;
        $148=$j;
        $149=((($147)+($148))|0);
        $150=$width;
        $151=((($149)-($150))|0);
        $152=$4;
        $153=(($152+($151<<2))|0);
        $154=(+(HEAPF32[(($153)>>2)]));
        $155=$154;
        $156=(+(Math_abs((+($155)))));
        $157=$start;
        $158=$j;
        $159=((($157)+($158))|0);
        $160=$nsame;
        $161=((($159)+($160))|0);
        $162=$width;
        $163=((($161)-($162))|0);
        $164=$4;
        $165=(($164+($163<<2))|0);
        $166=(+(HEAPF32[(($165)>>2)]));
        $167=$166;
        $168=(+(Math_abs((+($167)))));
        $169=$156>$168;
        if ($169) {
         $171=$start;
         $172=$j;
         $173=((($171)+($172))|0);
         $174=$width;
         $175=((($173)-($174))|0);
         $176=$4;
         $177=(($176+($175<<2))|0);
         $178=(+(HEAPF32[(($177)>>2)]));
         $179=$start;
         $180=$j;
         $181=((($179)+($180))|0);
         $182=$nsame;
         $183=((($181)+($182))|0);
         $184=$width;
         $185=((($183)-($184))|0);
         $186=$4;
         $187=(($186+($185<<2))|0);
         $188=(+(HEAPF32[(($187)>>2)]));
         $189=($178)-($188);
         $190=$189;
         $191=(+(Math_abs((+($190)))));
         $192=$start;
         $193=$j;
         $194=((($192)+($193))|0);
         $195=$width;
         $196=((($194)-($195))|0);
         $197=$4;
         $198=(($197+($196<<2))|0);
         $199=(+(HEAPF32[(($198)>>2)]));
         $200=$199;
         $201=(+(Math_abs((+($200)))));
         $202=($201)*((9.999999974752427e-7));
         $203=$191<=$202;
         if (!($203)) {
          label = 26;
          break;
         }
        } else {
         $205=$start;
         $206=$j;
         $207=((($205)+($206))|0);
         $208=$width;
         $209=((($207)-($208))|0);
         $210=$4;
         $211=(($210+($209<<2))|0);
         $212=(+(HEAPF32[(($211)>>2)]));
         $213=$start;
         $214=$j;
         $215=((($213)+($214))|0);
         $216=$nsame;
         $217=((($215)+($216))|0);
         $218=$width;
         $219=((($217)-($218))|0);
         $220=$4;
         $221=(($220+($219<<2))|0);
         $222=(+(HEAPF32[(($221)>>2)]));
         $223=($212)-($222);
         $224=$223;
         $225=(+(Math_abs((+($224)))));
         $226=$start;
         $227=$j;
         $228=((($226)+($227))|0);
         $229=$nsame;
         $230=((($228)+($229))|0);
         $231=$width;
         $232=((($230)-($231))|0);
         $233=$4;
         $234=(($233+($232<<2))|0);
         $235=(+(HEAPF32[(($234)>>2)]));
         $236=$235;
         $237=(+(Math_abs((+($236)))));
         $238=($237)*((9.999999974752427e-7));
         $239=$225<=$238;
         if (!($239)) {
          label = 26;
          break;
         }
        }
        $243=$nsame;
        $244=((($243)+(1))|0);
        $nsame=$244;
       }
       if ((label|0) == 26) {
        label = 0;
       }
       $246=$start;
       $247=$j;
       $248=((($246)+($247))|0);
       $249=$width;
       $250=((($248)-($249))|0);
       $251=$4;
       $252=(($251+($250<<2))|0);
       $253=(+(HEAPF32[(($252)>>2)]));
       $254=$start;
       $255=$j;
       $256=((($254)+($255))|0);
       $257=$width;
       $258=((($256)-($257))|0);
       $259=$4;
       $260=(($259+($258<<2))|0);
       $261=(+(HEAPF32[(($260)>>2)]));
       $262=($253)*($261);
       $263=$nsame;
       $264=(+((($263|0))|0));
       $265=($262)*($264);
       $noise=$265;
       $266=$allowedNoise;
       $267=$noise;
       $268=$266<$267;
       if ($268) {
        label = 30;
        break;
       }
       $284=$noise;
       $285=$allowedNoise;
       $286=($285)-($284);
       $allowedNoise=$286;
       $287=$nsame;
       $288=$start;
       $289=((($288)+($287))|0);
       $start=$289;
       $291=$start;
       $292=$width;
       $293=($291|0)<($292|0);
       if (!($293)) {
        break;
       }
      }
      if ((label|0) == 30) {
       label = 0;
       $270=$start;
       $271=($270|0)!=0;
       if ($271) {
        $273=$start;
        $274=$j;
        $275=((($273)+($274))|0);
        $276=$width;
        $277=((($275)-($276))|0);
        $278=((($277)-(1))|0);
        $279=$4;
        $280=(($279+($278<<2))|0);
        $281=(+(HEAPF32[(($280)>>2)]));
        $trancateThreshold=$281;
       }
      }
      $295=$trancateThreshold;
      $296=$295;
      $297=(+(Math_abs((+($296)))));
      $298=(+(Math_abs(0.0)));
      $299=$297>$298;
      if ($299) {
       $301=$trancateThreshold;
       $302=$301;
       $303=($302)-((0.0));
       $304=(+(Math_abs((+($303)))));
       $305=$trancateThreshold;
       $306=$305;
       $307=(+(Math_abs((+($306)))));
       $308=($307)*((9.999999974752427e-7));
       $309=$304<=$308;
       if ($309) {
        label = 38;
       }
      } else {
       $311=$trancateThreshold;
       $312=$311;
       $313=($312)-((0.0));
       $314=(+(Math_abs((+($313)))));
       $315=(+(Math_abs(0.0)));
       $316=($315)*((9.999999974752427e-7));
       $317=$314<=$316;
       if ($317) {
        label = 38;
       }
      }
      if ((label|0) == 38) {
       label = 0;
       break;
      }
      while(1) {
       $321=$j;
       $322=$width;
       $323=((($321)-($322))|0);
       $324=$2;
       $325=(($324)|0);
       $326=(($325+($323<<2))|0);
       $327=(+(HEAPF32[(($326)>>2)]));
       $328=$327;
       $329=(+(Math_abs((+($328)))));
       $330=$trancateThreshold;
       $331=$330;
       $332=$329<=$331;
       if ($332) {
        $334=$j;
        $335=$width;
        $336=((($334)-($335))|0);
        $337=$2;
        $338=(($337+2304)|0);
        $339=(($338+($336<<2))|0);
        HEAP32[(($339)>>2)]=0;
       }
       $342=$width;
       $343=((($342)-(1))|0);
       $width=$343;
       $344=($343|0)>0;
       if (!($344)) {
        break;
       }
      }
     }
    } while(0);
    $347=$sfb;
    $348=((($347)+(1))|0);
    $sfb=$348;
    $349=$2;
    $350=(($349+4864)|0);
    $351=((HEAP32[(($350)>>2)])|0);
    $352=($348|0)<($351|0);
    if (!($352)) {
     break;
    }
   }
   $354=$1;
   $355=$2;
   $356=((_noquant_count_bits($354,$355,0))|0);
   $357=$2;
   $358=(($357+4768)|0);
   HEAP32[(($358)>>2)]=$356;
   STACKTOP=sp;return;
  }
 } while(0);
 STACKTOP=sp;return;
}


function _bitpressure_strategy($gfc,$l3_xmin,$min_bits,$max_bits){
 $gfc=($gfc)|0;
 $l3_xmin=($l3_xmin)|0;
 $min_bits=($min_bits)|0;
 $max_bits=($max_bits)|0;
 var $1=0,$2=0,$3=0,$4=0,$cfg=0,$gr=0,$ch=0,$sfb=0,$gi=0,$pxmin=0,$5=0,$6=0,$8=0,$9=0,$10=0,$11=0,$12=0,$15=0,$16=0,$17=0;
 var $18=0,$19=0,$21=0,$22=0,$23=0,$24=0,$25=0,$26=0,$27=0,$28=0,$29=0,$30=0,$31=0,$32=0,$33=0,$35=0,$36=0,$37=0,$38=0,$39=0;
 var $41=0,$42=.0,$43=.0,$44=0,$45=.0,$46=.0,$47=.0,$48=.0,$49=.0,$50=0,$51=0,$52=.0,$53=.0,$54=.0,$55=.0,$57=0,$58=0,$60=0,$61=0,$62=0;
 var $63=0,$65=0,$66=0,$67=0,$69=0,$70=0,$72=0,$73=.0,$74=.0,$75=0,$76=.0,$77=.0,$78=.0,$79=.0,$80=.0,$81=0,$82=0,$83=.0,$84=.0,$85=.0;
 var $86=.0,$87=0,$88=.0,$89=.0,$90=0,$91=.0,$92=.0,$93=.0,$94=.0,$95=.0,$96=0,$97=0,$98=.0,$99=.0,$100=.0,$101=.0,$102=0,$103=.0,$104=.0,$105=0;
 var $106=.0,$107=.0,$108=.0,$109=.0,$110=.0,$111=0,$112=0,$113=.0,$114=.0,$115=.0,$116=.0,$118=0,$119=0,$122=0,$123=0,$124=0,$125=0,$126=0,$127=0,$128=.0;
 var $129=0,$130=0,$131=0,$132=0,$133=0,$134=0,$135=.0,$136=.0,$137=0,$139=0,$140=0,$141=0,$142=0,$143=0,$144=0,$145=.0,$147=0,$148=0,$149=0,$150=0;
 var $151=0,$152=0,$153=.0,$154=.0,$156=.0,$157=0,$158=0,$159=0,$160=0,$161=0,$162=0,$164=0,$165=0,$168=0,$169=0,label=0;
 var sp=0;sp=STACKTOP;










 $1=$gfc;
 $2=$l3_xmin;
 $3=$min_bits;
 $4=$max_bits;
 $5=$1;
 $6=(($5+16)|0);
 $cfg=$6;
 $gr=0;
 while(1) {
  $8=$gr;
  $9=$cfg;
  $10=(($9+60)|0);
  $11=((HEAP32[(($10)>>2)])|0);
  $12=($8|0)<($11|0);
  if (!($12)) {
   break;
  }
  $ch=0;
  while(1) {
   $15=$ch;
   $16=$cfg;
   $17=(($16+56)|0);
   $18=((HEAP32[(($17)>>2)])|0);
   $19=($15|0)<($18|0);
   if (!($19)) {
    break;
   }
   $21=$ch;
   $22=$gr;
   $23=$1;
   $24=(($23+304)|0);
   $25=(($24)|0);
   $26=(($25+((($22)*(10504))&-1))|0);
   $27=(($26+((($21)*(5252))&-1))|0);
   $gi=$27;
   $28=$ch;
   $29=$gr;
   $30=$2;
   $31=(($30+((($29)*(312))&-1))|0);
   $32=(($31+((($28)*(156))&-1))|0);
   $33=(($32)|0);
   $pxmin=$33;
   $sfb=0;
   while(1) {
    $35=$sfb;
    $36=$gi;
    $37=(($36+4856)|0);
    $38=((HEAP32[(($37)>>2)])|0);
    $39=($35|0)<($38|0);
    if (!($39)) {
     break;
    }
    $41=$sfb;
    $42=(+((($41|0))|0));
    $43=((0.029))*($42);
    $44=$sfb;
    $45=(+((($44|0))|0));
    $46=($43)*($45);
    $47=($46)/((22.0));
    $48=($47)/((22.0));
    $49=((1.0))+($48);
    $50=$pxmin;
    $51=(($50+4)|0);
    $pxmin=$51;
    $52=(+(HEAPF32[(($50)>>2)]));
    $53=$52;
    $54=($53)*($49);
    $55=$54;
    HEAPF32[(($50)>>2)]=$55;
    $57=$sfb;
    $58=((($57)+(1))|0);
    $sfb=$58;
   }
   $60=$gi;
   $61=(($60+4788)|0);
   $62=((HEAP32[(($61)>>2)])|0);
   $63=($62|0)==2;
   if ($63) {
    $65=$gi;
    $66=(($65+4852)|0);
    $67=((HEAP32[(($66)>>2)])|0);
    $sfb=$67;
    while(1) {
     $69=$sfb;
     $70=($69|0)<13;
     if (!($70)) {
      break;
     }
     $72=$sfb;
     $73=(+((($72|0))|0));
     $74=((0.029))*($73);
     $75=$sfb;
     $76=(+((($75|0))|0));
     $77=($74)*($76);
     $78=($77)/((13.0));
     $79=($78)/((13.0));
     $80=((1.0))+($79);
     $81=$pxmin;
     $82=(($81+4)|0);
     $pxmin=$82;
     $83=(+(HEAPF32[(($81)>>2)]));
     $84=$83;
     $85=($84)*($80);
     $86=$85;
     HEAPF32[(($81)>>2)]=$86;
     $87=$sfb;
     $88=(+((($87|0))|0));
     $89=((0.029))*($88);
     $90=$sfb;
     $91=(+((($90|0))|0));
     $92=($89)*($91);
     $93=($92)/((13.0));
     $94=($93)/((13.0));
     $95=((1.0))+($94);
     $96=$pxmin;
     $97=(($96+4)|0);
     $pxmin=$97;
     $98=(+(HEAPF32[(($96)>>2)]));
     $99=$98;
     $100=($99)*($95);
     $101=$100;
     HEAPF32[(($96)>>2)]=$101;
     $102=$sfb;
     $103=(+((($102|0))|0));
     $104=((0.029))*($103);
     $105=$sfb;
     $106=(+((($105|0))|0));
     $107=($104)*($106);
     $108=($107)/((13.0));
     $109=($108)/((13.0));
     $110=((1.0))+($109);
     $111=$pxmin;
     $112=(($111+4)|0);
     $pxmin=$112;
     $113=(+(HEAPF32[(($111)>>2)]));
     $114=$113;
     $115=($114)*($110);
     $116=$115;
     HEAPF32[(($111)>>2)]=$116;
     $118=$sfb;
     $119=((($118)+(1))|0);
     $sfb=$119;
    }
   }
   $122=$ch;
   $123=$gr;
   $124=$3;
   $125=(($124+($123<<3))|0);
   $126=(($125+($122<<2))|0);
   $127=((HEAP32[(($126)>>2)])|0);
   $128=(+((($127|0))|0));
   $129=$ch;
   $130=$gr;
   $131=$4;
   $132=(($131+($130<<3))|0);
   $133=(($132+($129<<2))|0);
   $134=((HEAP32[(($133)>>2)])|0);
   $135=(+((($134|0))|0));
   $136=((0.9))*($135);
   $137=$128>$136;
   if ($137) {
    $139=$ch;
    $140=$gr;
    $141=$3;
    $142=(($141+($140<<3))|0);
    $143=(($142+($139<<2))|0);
    $144=((HEAP32[(($143)>>2)])|0);
    $145=(+((($144|0))|0));
    $156=$145;
   } else {
    $147=$ch;
    $148=$gr;
    $149=$4;
    $150=(($149+($148<<3))|0);
    $151=(($150+($147<<2))|0);
    $152=((HEAP32[(($151)>>2)])|0);
    $153=(+((($152|0))|0));
    $154=((0.9))*($153);
    $156=$154;
   }

   $157=(~~($156));
   $158=$ch;
   $159=$gr;
   $160=$4;
   $161=(($160+($159<<3))|0);
   $162=(($161+($158<<2))|0);
   HEAP32[(($162)>>2)]=$157;
   $164=$ch;
   $165=((($164)+(1))|0);
   $ch=$165;
  }
  $168=$gr;
  $169=((($168)+(1))|0);
  $gr=$169;
 }
 STACKTOP=sp;return;
}


function _iteration_finish_one($gfc,$gr,$ch){
 $gfc=($gfc)|0;
 $gr=($gr)|0;
 $ch=($ch)|0;
 var $1=0,$2=0,$3=0,$cfg=0,$l3_side=0,$cod_info=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$14=0,$15=0,$16=0,$17=0;
 var $18=0,$19=0,$20=0,$21=0,$23=0,$24=0,$26=0,$27=0,label=0;
 var sp=0;sp=STACKTOP;






 $1=$gfc;
 $2=$gr;
 $3=$ch;
 $4=$1;
 $5=(($4+16)|0);
 $cfg=$5;
 $6=$1;
 $7=(($6+304)|0);
 $l3_side=$7;
 $8=$3;
 $9=$2;
 $10=$l3_side;
 $11=(($10)|0);
 $12=(($11+((($9)*(10504))&-1))|0);
 $13=(($12+((($8)*(5252))&-1))|0);
 $cod_info=$13;
 $14=$1;
 $15=$2;
 $16=$3;
 $17=$l3_side;
 _best_scalefac_store($14,$15,$16,$17);
 $18=$cfg;
 $19=(($18+20)|0);
 $20=((HEAP32[(($19)>>2)])|0);
 $21=($20|0)==1;
 if (!($21)) {
  $26=$1;
  $27=$cod_info;
  _ResvAdjust($26,$27);
  STACKTOP=sp;return;
 }
 $23=$1;
 $24=$cod_info;
 _best_huffman_divide($23,$24);
 $26=$1;
 $27=$cod_info;
 _ResvAdjust($26,$27);
 STACKTOP=sp;return;
}


function _VBR_new_prepare($gfc,$pe,$ratio,$l3_xmin,$frameBits,$max_bits,$max_resv){
 $gfc=($gfc)|0;
 $pe=($pe)|0;
 $ratio=($ratio)|0;
 $l3_xmin=($l3_xmin)|0;
 $frameBits=($frameBits)|0;
 $max_bits=($max_bits)|0;
 $max_resv=($max_resv)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$cfg=0,$eov=0,$gr=0,$ch=0,$analog_silence=0,$avg=0,$bits=0,$maximum_framebits=0,$cod_info=0,$8=0,$9=0,$10=0,$11=0;
 var $12=0,$13=0,$14=0,$15=0,$17=0,$18=0,$19=0,$20=0,$21=0,$22=0,$23=0,$24=0,$25=0,$26=0,$27=0,$28=0,$29=0,$30=0,$31=0,$32=0;
 var $33=0,$34=0,$35=0,$36=0,$38=0,$39=0,$40=0,$41=0,$42=0,$43=0,$44=0,$45=0,$46=0,$47=0,$48=0,$49=0,$52=0,$53=0,$54=0,$55=0;
 var $56=0,$58=0,$59=0,$60=0,$61=0,$62=0,$63=0,$64=0,$65=0,$66=0,$67=0,$68=0,$69=0,$70=0,$71=0,$73=0,$74=0,$75=0,$78=0,$79=0;
 var $80=0,$81=0,$82=0,$84=0,$85=0,$86=0,$87=0,$88=0,$89=0,$90=0,$91=0,$92=0,$93=0,$94=.0,$95=.0,$96=.0,$97=.0,$98=.0,$99=0,$100=0;
 var $101=0,$102=0,$103=0,$104=0,$105=0,$106=0,$107=0,$108=0,$109=0,$110=0,$111=0,$112=0,$113=0,$114=0,$115=0,$116=0,$117=0,$118=0,$121=0,$122=0;
 var $123=0,$124=0,$125=0,$126=0,$127=0,$128=0,$130=0,$131=0,$134=0,$135=0,$138=0,$139=0,$140=0,$141=0,$142=0,$145=0,$146=0,$147=0,$148=0,$149=0;
 var $151=0,$152=0,$153=0,$155=0,$156=0,$158=0,$159=0,$160=0,$161=0,$162=0,$163=0,$164=0,$165=0,$166=0,$167=0,$168=0,$169=0,$170=0,$171=0,$172=0;
 var $173=0,$176=0,$177=0,$180=0,$181=0,$183=0,$184=0,$186=0,$188=0,label=0;
 var sp=0;sp=STACKTOP;STACKTOP=(STACKTOP+8)|0;












 $avg=((sp)|0);



 $1=$gfc;
 $2=$pe;
 $3=$ratio;
 $4=$l3_xmin;
 $5=$frameBits;
 $6=$max_bits;
 $7=$max_resv;
 $8=$1;
 $9=(($8+16)|0);
 $cfg=$9;
 $10=$1;
 $11=(($10+84040)|0);
 $eov=$11;
 $analog_silence=1;
 $bits=0;
 $12=$cfg;
 $13=(($12+136)|0);
 $14=((HEAP32[(($13)>>2)])|0);
 $15=($14|0)!=0;
 if ($15) {
  $38=$eov;
  $39=(($38+704)|0);
  HEAP32[(($39)>>2)]=0;
  $40=$1;
  $41=((_ResvFrameBegin($40,$avg))|0);
  $maximum_framebits=$41;
  $42=$maximum_framebits;
  $43=$5;
  $44=(($43)|0);
  HEAP32[(($44)>>2)]=$42;
  $45=$1;
  $46=(($45+27824)|0);
  $47=(($46+24320)|0);
  $48=((HEAP32[(($47)>>2)])|0);
  $49=$7;
  HEAP32[(($49)>>2)]=$48;
 } else {
  $17=$cfg;
  $18=(($17+100)|0);
  $19=((HEAP32[(($18)>>2)])|0);
  $20=$eov;
  $21=(($20+704)|0);
  HEAP32[(($21)>>2)]=$19;
  $22=$1;
  $23=((_ResvFrameBegin($22,$avg))|0);
  $24=$1;
  $25=(($24+27824)|0);
  $26=(($25+24320)|0);
  $27=((HEAP32[(($26)>>2)])|0);
  $28=$7;
  HEAP32[(($28)>>2)]=$27;
  $29=$1;
  $30=$5;
  _get_framebits($29,$30);
  $31=$cfg;
  $32=(($31+100)|0);
  $33=((HEAP32[(($32)>>2)])|0);
  $34=$5;
  $35=(($34+($33<<2))|0);
  $36=((HEAP32[(($35)>>2)])|0);
  $maximum_framebits=$36;
 }
 $gr=0;
 while(1) {
  $52=$gr;
  $53=$cfg;
  $54=(($53+60)|0);
  $55=((HEAP32[(($54)>>2)])|0);
  $56=($52|0)<($55|0);
  if (!($56)) {
   break;
  }
  $58=$1;
  $59=$2;
  $60=$gr;
  $61=$6;
  $62=(($61+($60<<3))|0);
  $63=(($62)|0);
  $64=((HEAP32[(($avg)>>2)])|0);
  $65=$gr;
  $66=((_on_pe($58,$59,$63,$64,$65,0))|0);
  $67=$1;
  $68=(($67+84040)|0);
  $69=(($68+716)|0);
  $70=((HEAP32[(($69)>>2)])|0);
  $71=($70|0)==2;
  if ($71) {
   $73=$1;
   $74=(($73+304)|0);
   $75=$gr;
   _ms_convert($74,$75);
  }
  $ch=0;
  while(1) {
   $78=$ch;
   $79=$cfg;
   $80=(($79+56)|0);
   $81=((HEAP32[(($80)>>2)])|0);
   $82=($78|0)<($81|0);
   if (!($82)) {
    break;
   }
   $84=$ch;
   $85=$gr;
   $86=$1;
   $87=(($86+304)|0);
   $88=(($87)|0);
   $89=(($88+((($85)*(10504))&-1))|0);
   $90=(($89+((($84)*(5252))&-1))|0);
   $cod_info=$90;
   $91=$1;
   $92=(($91+84768)|0);
   $93=(($92+144)|0);
   $94=(+(HEAPF32[(($93)>>2)]));
   $95=$94;
   $96=($95)*((0.1));
   $97=(+(Math_pow(10.0,(+($96)))));
   $98=$97;
   $99=$1;
   $100=(($99+84768)|0);
   $101=(($100+140)|0);
   HEAPF32[(($101)>>2)]=$98;
   $102=$1;
   $103=$cod_info;
   _init_outer_loop($102,$103);
   $104=$1;
   $105=$ch;
   $106=$gr;
   $107=$3;
   $108=(($107+((($106)*(976))&-1))|0);
   $109=(($108+((($105)*(488))&-1))|0);
   $110=$cod_info;
   $111=$ch;
   $112=$gr;
   $113=$4;
   $114=(($113+((($112)*(312))&-1))|0);
   $115=(($114+((($111)*(156))&-1))|0);
   $116=(($115)|0);
   $117=((_calc_xmin($104,$109,$110,$116))|0);
   $118=0!=($117|0);
   if ($118) {
    $analog_silence=0;
   }
   $121=$ch;
   $122=$gr;
   $123=$6;
   $124=(($123+($122<<3))|0);
   $125=(($124+($121<<2))|0);
   $126=((HEAP32[(($125)>>2)])|0);
   $127=$bits;
   $128=((($127)+($126))|0);
   $bits=$128;
   $130=$ch;
   $131=((($130)+(1))|0);
   $ch=$131;
  }
  $134=$gr;
  $135=((($134)+(1))|0);
  $gr=$135;
 }
 $gr=0;
 while(1) {
  $138=$gr;
  $139=$cfg;
  $140=(($139+60)|0);
  $141=((HEAP32[(($140)>>2)])|0);
  $142=($138|0)<($141|0);
  if (!($142)) {
   break;
  }
  $ch=0;
  while(1) {
   $145=$ch;
   $146=$cfg;
   $147=(($146+56)|0);
   $148=((HEAP32[(($147)>>2)])|0);
   $149=($145|0)<($148|0);
   if (!($149)) {
    break;
   }
   $151=$bits;
   $152=$maximum_framebits;
   $153=($151|0)>($152|0);
   do {
    if ($153) {
     $155=$bits;
     $156=($155|0)>0;
     if (!($156)) {
      break;
     }
     $158=$maximum_framebits;
     $159=$ch;
     $160=$gr;
     $161=$6;
     $162=(($161+($160<<3))|0);
     $163=(($162+($159<<2))|0);
     $164=((HEAP32[(($163)>>2)])|0);
     $165=(Math_imul($164,$158)|0);
     HEAP32[(($163)>>2)]=$165;
     $166=$bits;
     $167=$ch;
     $168=$gr;
     $169=$6;
     $170=(($169+($168<<3))|0);
     $171=(($170+($167<<2))|0);
     $172=((HEAP32[(($171)>>2)])|0);
     $173=(((($172|0))/(($166|0)))&-1);
     HEAP32[(($171)>>2)]=$173;
    }
   } while(0);
   $176=$ch;
   $177=((($176)+(1))|0);
   $ch=$177;
  }
  $180=$gr;
  $181=((($180)+(1))|0);
  $gr=$181;
 }
 $183=$analog_silence;
 $184=($183|0)!=0;
 if (!($184)) {
  $188=$analog_silence;
  STACKTOP=sp;return (($188)|0);
 }
 $186=$7;
 HEAP32[(($186)>>2)]=0;
 $188=$analog_silence;
 STACKTOP=sp;return (($188)|0);
}


function _calc_target_bits($gfc,$pe,$ms_ener_ratio,$targ_bits,$analog_silence_bits,$max_frame_bits){
 $gfc=($gfc)|0;
 $pe=($pe)|0;
 $ms_ener_ratio=($ms_ener_ratio)|0;
 $targ_bits=($targ_bits)|0;
 $analog_silence_bits=($analog_silence_bits)|0;
 $max_frame_bits=($max_frame_bits)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$cfg=0,$eov=0,$l3_side=0,$res_factor=.0,$gr=0,$ch=0,$totbits=0,$mean_bits=0,$framesize=0,$sum=0,$add_bits=0,$cod_info=0,$7=0,$8=0;
 var $9=0,$10=0,$11=0,$12=0,$13=0,$14=0,$15=0,$16=0,$17=0,$18=0,$19=0,$20=0,$21=0,$22=0,$23=0,$24=0,$25=0,$26=0,$27=0,$28=0;
 var $29=0,$30=0,$31=0,$32=0,$33=0,$34=0,$35=0,$36=0,$37=0,$38=0,$39=0,$40=0,$41=0,$42=0,$43=0,$44=0,$45=0,$46=0,$47=0,$48=0;
 var $49=0,$50=0,$51=0,$52=0,$53=0,$54=0,$55=0,$57=0,$58=.0,$59=.0,$60=0,$62=0,$63=0,$64=0,$65=0,$66=0,$67=0,$68=0,$69=0,$70=0;
 var $71=0,$72=0,$73=0,$74=0,$75=0,$76=0,$77=0,$78=0,$79=0,$80=0,$81=0,$82=0,$83=0,$84=.0,$85=.0,$86=.0,$87=.0,$88=.0,$89=.0,$90=.0;
 var $91=.0,$92=.0,$93=0,$96=.0,$97=.0,$98=0,$102=0,$103=0,$104=0,$105=0,$106=0,$109=0,$110=0,$111=0,$112=0,$113=0,$115=.0,$116=0,$117=.0,$118=.0;
 var $119=0,$120=0,$121=0,$122=0,$123=0,$124=0,$125=0,$126=0,$127=0,$128=0,$129=0,$130=.0,$131=0,$133=0,$134=0,$135=0,$136=0,$137=0,$138=.0,$139=.0;
 var $140=.0,$141=.0,$142=0,$143=0,$144=0,$145=0,$146=0,$147=0,$148=0,$149=.0,$150=0,$151=.0,$152=.0,$153=0,$154=0,$155=0,$156=0,$157=0,$158=0,$159=0;
 var $160=0,$161=0,$162=0,$164=0,$165=0,$166=0,$167=0,$169=0,$170=0,$173=0,$174=0,$175=0,$176=0,$177=0,$179=0,$180=0,$181=0,$183=0,$184=0,$188=0;
 var $189=0,$190=0,$191=0,$192=0,$193=0,$194=0,$195=0,$197=0,$198=0,$199=0,$200=0,$201=0,$202=0,$203=0,$205=0,$206=0,$207=0,$208=0,$209=0,$211=0;
 var $212=0,$213=0,$214=0,$215=0,$216=0,$217=0,$218=0,$220=0,$221=0,$223=0,$224=0,$227=0,$228=0,$229=0,$230=0,$231=0,$233=0,$234=0,$235=0,$236=0;
 var $237=0,$238=0,$239=0,$240=0,$241=0,$242=0,$243=0,$244=0,$245=0,$246=0,$247=0,$249=0,$250=0,$254=0,$255=0,$257=0,$258=0,$259=0,$260=0,$261=0;
 var $264=0,$265=0,$266=0,$267=0,$268=0,$270=0,$271=0,$272=0,$273=0,$274=0,$275=0,$276=0,$277=.0,$278=0,$279=0,$280=0,$281=0,$282=0,$284=0,$285=0;
 var $289=0,$290=0,$291=0,$292=0,$293=0,$296=0,$297=0,$298=0,$299=0,$300=0,$302=0,$303=0,$304=0,$305=0,$306=0,$307=0,$308=0,$310=0,$311=0,$312=0;
 var $313=0,$314=0,$316=0,$317=0,$318=0,$319=0,$320=0,$321=0,$322=0,$323=0,$325=0,$326=0,$329=0,$330=0,$332=0,$333=0,$334=0,$335=0,$337=0,$338=0;
 var $341=0,$342=0,$343=0,$344=0,$345=0,$348=0,$349=0,$350=0,$351=0,$352=0,$354=0,$355=0,$356=0,$357=0,$358=0,$359=0,$360=0,$361=0,$362=0,$363=0;
 var $364=0,$365=0,$366=0,$367=0,$368=0,$369=0,$370=0,$372=0,$373=0,$376=0,$377=0,label=0;
 var sp=0;sp=STACKTOP;STACKTOP=(STACKTOP+8)|0;













 $mean_bits=((sp)|0);




 $1=$gfc;
 $2=$pe;
 $3=$ms_ener_ratio;
 $4=$targ_bits;
 $5=$analog_silence_bits;
 $6=$max_frame_bits;
 $7=$1;
 $8=(($7+16)|0);
 $cfg=$8;
 $9=$1;
 $10=(($9+84040)|0);
 $eov=$10;
 $11=$1;
 $12=(($11+304)|0);
 $l3_side=$12;
 $13=$cfg;
 $14=(($13+60)|0);
 $15=((HEAP32[(($14)>>2)])|0);
 $16=((($15)*(576))&-1);
 $framesize=$16;
 $17=$cfg;
 $18=(($17+100)|0);
 $19=((HEAP32[(($18)>>2)])|0);
 $20=$eov;
 $21=(($20+704)|0);
 HEAP32[(($21)>>2)]=$19;
 $22=$1;
 $23=((_ResvFrameBegin($22,$mean_bits))|0);
 $24=$6;
 HEAP32[(($24)>>2)]=$23;
 $25=$eov;
 $26=(($25+704)|0);
 HEAP32[(($26)>>2)]=1;
 $27=$1;
 $28=((_getframebits($27))|0);
 $29=$cfg;
 $30=(($29+8)|0);
 $31=((HEAP32[(($30)>>2)])|0);
 $32=($31<<3);
 $33=((($28)-($32))|0);
 HEAP32[(($mean_bits)>>2)]=$33;
 $34=((HEAP32[(($mean_bits)>>2)])|0);
 $35=$cfg;
 $36=(($35+60)|0);
 $37=((HEAP32[(($36)>>2)])|0);
 $38=$cfg;
 $39=(($38+56)|0);
 $40=((HEAP32[(($39)>>2)])|0);
 $41=(Math_imul($37,$40)|0);
 $42=(((($34|0))/(($41|0)))&-1);
 $43=$5;
 HEAP32[(($43)>>2)]=$42;
 $44=$cfg;
 $45=(($44+92)|0);
 $46=((HEAP32[(($45)>>2)])|0);
 $47=$framesize;
 $48=(Math_imul($46,$47)|0);
 $49=((($48)*(1000))&-1);
 HEAP32[(($mean_bits)>>2)]=$49;
 $50=$1;
 $51=(($50+84768)|0);
 $52=(($51+328)|0);
 $53=((HEAP32[(($52)>>2)])|0);
 $54=$53&1;
 $55=($54|0)!=0;
 if ($55) {
  $57=((HEAP32[(($mean_bits)>>2)])|0);
  $58=(+((($57|0))|0));
  $59=($58)*((1.09));
  $60=(~~($59));
  HEAP32[(($mean_bits)>>2)]=$60;
 }
 $62=$cfg;
 $63=(($62+48)|0);
 $64=((HEAP32[(($63)>>2)])|0);
 $65=((HEAP32[(($mean_bits)>>2)])|0);
 $66=(((($65|0))/(($64|0)))&-1);
 HEAP32[(($mean_bits)>>2)]=$66;
 $67=$cfg;
 $68=(($67+8)|0);
 $69=((HEAP32[(($68)>>2)])|0);
 $70=($69<<3);
 $71=((HEAP32[(($mean_bits)>>2)])|0);
 $72=((($71)-($70))|0);
 HEAP32[(($mean_bits)>>2)]=$72;
 $73=$cfg;
 $74=(($73+60)|0);
 $75=((HEAP32[(($74)>>2)])|0);
 $76=$cfg;
 $77=(($76+56)|0);
 $78=((HEAP32[(($77)>>2)])|0);
 $79=(Math_imul($75,$78)|0);
 $80=((HEAP32[(($mean_bits)>>2)])|0);
 $81=(((($80|0))/(($79|0)))&-1);
 HEAP32[(($mean_bits)>>2)]=$81;
 $82=$cfg;
 $83=(($82+228)|0);
 $84=(+(HEAPF32[(($83)>>2)]));
 $85=$84;
 $86=((11.0))-($85);
 $87=((0.07))*($86);
 $88=($87)/((5.5));
 $89=((0.93))+($88);
 $90=$89;
 $res_factor=$90;
 $91=$res_factor;
 $92=$91;
 $93=$92<(0.9);
 if ($93) {
  $res_factor=0.8999999761581421;
 }
 $96=$res_factor;
 $97=$96;
 $98=$97>(1.0);
 if ($98) {
  $res_factor=1.0;
 }
 $gr=0;
 while(1) {
  $102=$gr;
  $103=$cfg;
  $104=(($103+60)|0);
  $105=((HEAP32[(($104)>>2)])|0);
  $106=($102|0)<($105|0);
  if (!($106)) {
   break;
  }
  $sum=0;
  $ch=0;
  while(1) {
   $109=$ch;
   $110=$cfg;
   $111=(($110+56)|0);
   $112=((HEAP32[(($111)>>2)])|0);
   $113=($109|0)<($112|0);
   if (!($113)) {
    break;
   }
   $115=$res_factor;
   $116=((HEAP32[(($mean_bits)>>2)])|0);
   $117=(+((($116|0))|0));
   $118=($115)*($117);
   $119=(~~($118));
   $120=$ch;
   $121=$gr;
   $122=$4;
   $123=(($122+($121<<3))|0);
   $124=(($123+($120<<2))|0);
   HEAP32[(($124)>>2)]=$119;
   $125=$ch;
   $126=$gr;
   $127=$2;
   $128=(($127+($126<<3))|0);
   $129=(($128+($125<<2))|0);
   $130=(+(HEAPF32[(($129)>>2)]));
   $131=$130>(700.0);
   if ($131) {
    $133=$ch;
    $134=$gr;
    $135=$2;
    $136=(($135+($134<<3))|0);
    $137=(($136+($133<<2))|0);
    $138=(+(HEAPF32[(($137)>>2)]));
    $139=($138)-((700.0));
    $140=$139;
    $141=($140)/((1.4));
    $142=(~~($141));
    $add_bits=$142;
    $143=$ch;
    $144=$gr;
    $145=$l3_side;
    $146=(($145)|0);
    $147=(($146+((($144)*(10504))&-1))|0);
    $148=(($147+((($143)*(5252))&-1))|0);
    $cod_info=$148;
    $149=$res_factor;
    $150=((HEAP32[(($mean_bits)>>2)])|0);
    $151=(+((($150|0))|0));
    $152=($149)*($151);
    $153=(~~($152));
    $154=$ch;
    $155=$gr;
    $156=$4;
    $157=(($156+($155<<3))|0);
    $158=(($157+($154<<2))|0);
    HEAP32[(($158)>>2)]=$153;
    $159=$cod_info;
    $160=(($159+4788)|0);
    $161=((HEAP32[(($160)>>2)])|0);
    $162=($161|0)==2;
    if ($162) {
     $164=$add_bits;
     $165=((HEAP32[(($mean_bits)>>2)])|0);
     $166=(((($165|0))/(2))&-1);
     $167=($164|0)<($166|0);
     if ($167) {
      $169=((HEAP32[(($mean_bits)>>2)])|0);
      $170=(((($169|0))/(2))&-1);
      $add_bits=$170;
     }
    }
    $173=$add_bits;
    $174=((HEAP32[(($mean_bits)>>2)])|0);
    $175=((($174)*(3))&-1);
    $176=(((($175|0))/(2))&-1);
    $177=($173|0)>($176|0);
    if ($177) {
     $179=((HEAP32[(($mean_bits)>>2)])|0);
     $180=((($179)*(3))&-1);
     $181=(((($180|0))/(2))&-1);
     $add_bits=$181;
    } else {
     $183=$add_bits;
     $184=($183|0)<0;
     if ($184) {
      $add_bits=0;
     }
    }
    $188=$add_bits;
    $189=$ch;
    $190=$gr;
    $191=$4;
    $192=(($191+($190<<3))|0);
    $193=(($192+($189<<2))|0);
    $194=((HEAP32[(($193)>>2)])|0);
    $195=((($194)+($188))|0);
    HEAP32[(($193)>>2)]=$195;
   }
   $197=$ch;
   $198=$gr;
   $199=$4;
   $200=(($199+($198<<3))|0);
   $201=(($200+($197<<2))|0);
   $202=((HEAP32[(($201)>>2)])|0);
   $203=($202|0)>4095;
   if ($203) {
    $205=$ch;
    $206=$gr;
    $207=$4;
    $208=(($207+($206<<3))|0);
    $209=(($208+($205<<2))|0);
    HEAP32[(($209)>>2)]=4095;
   }
   $211=$ch;
   $212=$gr;
   $213=$4;
   $214=(($213+($212<<3))|0);
   $215=(($214+($211<<2))|0);
   $216=((HEAP32[(($215)>>2)])|0);
   $217=$sum;
   $218=((($217)+($216))|0);
   $sum=$218;
   $220=$ch;
   $221=((($220)+(1))|0);
   $ch=$221;
  }
  $223=$sum;
  $224=($223|0)>7680;
  if ($224) {
   $ch=0;
   while(1) {
    $227=$ch;
    $228=$cfg;
    $229=(($228+56)|0);
    $230=((HEAP32[(($229)>>2)])|0);
    $231=($227|0)<($230|0);
    if (!($231)) {
     break;
    }
    $233=$ch;
    $234=$gr;
    $235=$4;
    $236=(($235+($234<<3))|0);
    $237=(($236+($233<<2))|0);
    $238=((HEAP32[(($237)>>2)])|0);
    $239=((($238)*(7680))&-1);
    HEAP32[(($237)>>2)]=$239;
    $240=$sum;
    $241=$ch;
    $242=$gr;
    $243=$4;
    $244=(($243+($242<<3))|0);
    $245=(($244+($241<<2))|0);
    $246=((HEAP32[(($245)>>2)])|0);
    $247=(((($246|0))/(($240|0)))&-1);
    HEAP32[(($245)>>2)]=$247;
    $249=$ch;
    $250=((($249)+(1))|0);
    $ch=$250;
   }
  }
  $254=$gr;
  $255=((($254)+(1))|0);
  $gr=$255;
 }
 $257=$1;
 $258=(($257+84040)|0);
 $259=(($258+716)|0);
 $260=((HEAP32[(($259)>>2)])|0);
 $261=($260|0)==2;
 if ($261) {
  $gr=0;
  while(1) {
   $264=$gr;
   $265=$cfg;
   $266=(($265+60)|0);
   $267=((HEAP32[(($266)>>2)])|0);
   $268=($264|0)<($267|0);
   if (!($268)) {
    break;
   }
   $270=$gr;
   $271=$4;
   $272=(($271+($270<<3))|0);
   $273=(($272)|0);
   $274=$gr;
   $275=$3;
   $276=(($275+($274<<2))|0);
   $277=(+(HEAPF32[(($276)>>2)]));
   $278=((HEAP32[(($mean_bits)>>2)])|0);
   $279=$cfg;
   $280=(($279+56)|0);
   $281=((HEAP32[(($280)>>2)])|0);
   $282=(Math_imul($278,$281)|0);
   _reduce_side($273,$277,$282,7680);
   $284=$gr;
   $285=((($284)+(1))|0);
   $gr=$285;
  }
 }
 $totbits=0;
 $gr=0;
 while(1) {
  $289=$gr;
  $290=$cfg;
  $291=(($290+60)|0);
  $292=((HEAP32[(($291)>>2)])|0);
  $293=($289|0)<($292|0);
  if (!($293)) {
   break;
  }
  $ch=0;
  while(1) {
   $296=$ch;
   $297=$cfg;
   $298=(($297+56)|0);
   $299=((HEAP32[(($298)>>2)])|0);
   $300=($296|0)<($299|0);
   if (!($300)) {
    break;
   }
   $302=$ch;
   $303=$gr;
   $304=$4;
   $305=(($304+($303<<3))|0);
   $306=(($305+($302<<2))|0);
   $307=((HEAP32[(($306)>>2)])|0);
   $308=($307|0)>4095;
   if ($308) {
    $310=$ch;
    $311=$gr;
    $312=$4;
    $313=(($312+($311<<3))|0);
    $314=(($313+($310<<2))|0);
    HEAP32[(($314)>>2)]=4095;
   }
   $316=$ch;
   $317=$gr;
   $318=$4;
   $319=(($318+($317<<3))|0);
   $320=(($319+($316<<2))|0);
   $321=((HEAP32[(($320)>>2)])|0);
   $322=$totbits;
   $323=((($322)+($321))|0);
   $totbits=$323;
   $325=$ch;
   $326=((($325)+(1))|0);
   $ch=$326;
  }
  $329=$gr;
  $330=((($329)+(1))|0);
  $gr=$330;
 }
 $332=$totbits;
 $333=$6;
 $334=((HEAP32[(($333)>>2)])|0);
 $335=($332|0)>($334|0);
 if (!($335)) {
  STACKTOP=sp;return;
 }
 $337=$totbits;
 $338=($337|0)>0;
 if (!($338)) {
  STACKTOP=sp;return;
 }
 $gr=0;
 while(1) {
  $341=$gr;
  $342=$cfg;
  $343=(($342+60)|0);
  $344=((HEAP32[(($343)>>2)])|0);
  $345=($341|0)<($344|0);
  if (!($345)) {
   break;
  }
  $ch=0;
  while(1) {
   $348=$ch;
   $349=$cfg;
   $350=(($349+56)|0);
   $351=((HEAP32[(($350)>>2)])|0);
   $352=($348|0)<($351|0);
   if (!($352)) {
    break;
   }
   $354=$6;
   $355=((HEAP32[(($354)>>2)])|0);
   $356=$ch;
   $357=$gr;
   $358=$4;
   $359=(($358+($357<<3))|0);
   $360=(($359+($356<<2))|0);
   $361=((HEAP32[(($360)>>2)])|0);
   $362=(Math_imul($361,$355)|0);
   HEAP32[(($360)>>2)]=$362;
   $363=$totbits;
   $364=$ch;
   $365=$gr;
   $366=$4;
   $367=(($366+($365<<3))|0);
   $368=(($367+($364<<2))|0);
   $369=((HEAP32[(($368)>>2)])|0);
   $370=(((($369|0))/(($363|0)))&-1);
   HEAP32[(($368)>>2)]=$370;
   $372=$ch;
   $373=((($372)+(1))|0);
   $ch=$373;
  }
  $376=$gr;
  $377=((($376)+(1))|0);
  $gr=$377;
 }
 STACKTOP=sp;return;
}


function _ms_convert($l3_side,$gr){
 $l3_side=($l3_side)|0;
 $gr=($gr)|0;
 var $1=0,$2=0,$i=0,$l=.0,$r=.0,$4=0,$5=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$14=0,$15=.0,$16=0,$17=0,$18=0,$19=0;
 var $20=0,$21=0,$22=0,$23=0,$24=.0,$25=.0,$26=.0,$27=.0,$28=.0,$29=0,$30=0,$31=0,$32=0,$33=0,$34=0,$35=0,$36=0,$37=.0,$38=.0,$39=.0;
 var $40=.0,$41=0,$42=0,$43=0,$44=0,$45=0,$46=0,$47=0,$48=0,$50=0,$51=0,label=0;
 var sp=0;sp=STACKTOP;





 $1=$l3_side;
 $2=$gr;
 $i=0;
 while(1) {
  $4=$i;
  $5=($4|0)<576;
  if (!($5)) {
   break;
  }
  $7=$i;
  $8=$2;
  $9=$1;
  $10=(($9)|0);
  $11=(($10+((($8)*(10504))&-1))|0);
  $12=(($11)|0);
  $13=(($12)|0);
  $14=(($13+($7<<2))|0);
  $15=(+(HEAPF32[(($14)>>2)]));
  $l=$15;
  $16=$i;
  $17=$2;
  $18=$1;
  $19=(($18)|0);
  $20=(($19+((($17)*(10504))&-1))|0);
  $21=(($20+5252)|0);
  $22=(($21)|0);
  $23=(($22+($16<<2))|0);
  $24=(+(HEAPF32[(($23)>>2)]));
  $r=$24;
  $25=$l;
  $26=$r;
  $27=($25)+($26);
  $28=($27)*((0.7071067690849304));
  $29=$i;
  $30=$2;
  $31=$1;
  $32=(($31)|0);
  $33=(($32+((($30)*(10504))&-1))|0);
  $34=(($33)|0);
  $35=(($34)|0);
  $36=(($35+($29<<2))|0);
  HEAPF32[(($36)>>2)]=$28;
  $37=$l;
  $38=$r;
  $39=($37)-($38);
  $40=($39)*((0.7071067690849304));
  $41=$i;
  $42=$2;
  $43=$1;
  $44=(($43)|0);
  $45=(($44+((($42)*(10504))&-1))|0);
  $46=(($45+5252)|0);
  $47=(($46)|0);
  $48=(($47+($41<<2))|0);
  HEAPF32[(($48)>>2)]=$40;
  $50=$i;
  $51=((($50)+(1))|0);
  $i=$51;
 }
 STACKTOP=sp;return;
}


function _init_outer_loop($gfc,$cod_info){
 $gfc=($gfc)|0;
 $cod_info=($cod_info)|0;
 var $1=0,$2=0,$cfg=0,$sfb=0,$j=0,$ixwork=0,$ix=0,$start=0,$end=0,$window=0,$l=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0;
 var $12=0,$13=0,$14=0,$15=0,$16=0,$17=0,$18=0,$19=0,$20=0,$21=0,$22=0,$23=0,$24=0,$25=0,$26=0,$27=0,$28=0,$29=0,$30=0,$31=0;
 var $32=0,$33=0,$34=0,$35=0,$36=0,$37=0,$38=0,$39=0,$40=0,$41=0,$42=0,$43=0,$44=0,$45=0,$46=0,$47=0,$48=0,$49=0,$50=0,$51=0;
 var $53=0,$54=0,$55=0,$56=0,$57=0,$58=0,$60=0,$61=0,$62=0,$63=0,$64=0,$65=0,$66=0,$67=0,$68=0,$69=0,$70=0,$71=0,$73=0,$74=0;
 var $75=0,$76=0,$77=0,$78=0,$79=0,$80=0,$81=0,$82=0,$83=0,$84=0,$86=0,$87=0,$89=0,$90=0,$91=0,$92=0,$93=0,$94=0,$95=0,$96=0;
 var $97=0,$98=0,$99=0,$100=0,$101=0,$102=0,$103=0,$104=0,$105=0,$106=0,$107=0,$108=0,$109=0,$110=0,$112=0,$113=0,$115=0,$116=0,$117=0,$118=0;
 var $120=0,$121=0,$122=0,$123=0,$124=0,$125=0,$126=0,$127=0,$129=0,$130=0,$131=0,$132=0,$133=0,$134=0,$135=0,$136=0,$137=0,$139=0,$140=0,$141=0;
 var $142=0,$144=0,$145=0,$146=0,$147=0,$148=0,$149=0,$150=0,$151=0,$152=0,$153=0,$154=0,$155=0,$156=0,$157=0,$158=0,$159=0,$160=0,$161=0,$162=0;
 var $163=0,$164=0,$165=0,$167=0,$168=0,$169=0,$170=0,$171=0,$172=0,$173=0,$174=0,$175=0,$176=0,$177=0,$178=0,$179=0,$180=0,$181=0,$182=0,$183=0;
 var $184=0,$185=0,$186=0,$187=0,$188=0,$189=0,$190=0,$191=0,$192=0,$193=0,$194=0,$196=0,$197=0,$198=0,$199=0,$200=0,$201=0,$202=0,$203=0,$204=0;
 var $205=0,$206=0,$207=0,$208=0,$209=0,$210=0,$211=0,$212=0,$213=0,$214=0,$215=0,$216=0,$217=0,$218=0,$219=0,$220=0,$221=0,$222=0,$223=0,$224=0;
 var $226=0,$227=0,$229=0,$230=0,$231=0,$232=0,$233=0,$234=0,$235=0,$236=0,$237=0,$238=0,$239=0,$240=0,$241=0,$243=0,$244=0,$246=0,$248=0,$249=0;
 var $250=0,$252=0,$253=0,$254=0,$255=0,$256=0,$257=.0,$258=0,$259=0,$261=0,$262=0,$265=0,$266=0,$269=0,$270=0,$272=0,$273=0,$274=0,$275=0,$276=0;
 var $277=0,$279=0,$280=0,$282=0,$283=0,$284=0,$285=0,$286=0,$287=0,$288=0,$289=0,$290=0,$291=0,$292=0,$293=0,$294=0,$295=0,$296=0,$297=0,$298=0;
 var $299=0,$300=0,$301=0,$302=0,$303=0,$304=0,$305=0,$306=0,$307=0,$308=0,$309=0,$310=0,$311=0,$312=0,$313=0,$314=0,$315=0,$316=0,$317=0,$318=0;
 var $319=0,$320=0,$321=0,$322=0,$323=0,$324=0,$325=0,$327=0,$328=0,$331=0,$332=0,$333=0,$334=0,$335=0,$336=0,$337=0,$338=0,$339=0,$340=0,$341=0;
 var $342=0,$343=0,$344=0,$345=0,$346=0,$347=0,$348=0,$349=0,$350=0,$351=0,$352=0,$353=0,$354=0,$355=0,$357=0,$358=0,$359=0,$360=0,$362=0,$363=0;
 var $364=0,$365=0,$367=0,$368=0,$369=0,$370=0,$372=0,$373=0,label=0;
 var sp=0;sp=STACKTOP;STACKTOP=(STACKTOP+2304)|0;





 $ixwork=((sp)|0);





 $1=$gfc;
 $2=$cod_info;
 $3=$1;
 $4=(($3+16)|0);
 $cfg=$4;
 $5=$2;
 $6=(($5+4768)|0);
 HEAP32[(($6)>>2)]=0;
 $7=$2;
 $8=(($7+4772)|0);
 HEAP32[(($8)>>2)]=0;
 $9=$2;
 $10=(($9+4776)|0);
 HEAP32[(($10)>>2)]=0;
 $11=$2;
 $12=(($11+4780)|0);
 HEAP32[(($12)>>2)]=210;
 $13=$2;
 $14=(($13+4784)|0);
 HEAP32[(($14)>>2)]=0;
 $15=$2;
 $16=(($15+4796)|0);
 $17=(($16)|0);
 HEAP32[(($17)>>2)]=0;
 $18=$2;
 $19=(($18+4796)|0);
 $20=(($19+4)|0);
 HEAP32[(($20)>>2)]=0;
 $21=$2;
 $22=(($21+4796)|0);
 $23=(($22+8)|0);
 HEAP32[(($23)>>2)]=0;
 $24=$2;
 $25=(($24+4808)|0);
 $26=(($25)|0);
 HEAP32[(($26)>>2)]=0;
 $27=$2;
 $28=(($27+4808)|0);
 $29=(($28+4)|0);
 HEAP32[(($29)>>2)]=0;
 $30=$2;
 $31=(($30+4808)|0);
 $32=(($31+8)|0);
 HEAP32[(($32)>>2)]=0;
 $33=$2;
 $34=(($33+4808)|0);
 $35=(($34+12)|0);
 HEAP32[(($35)>>2)]=0;
 $36=$2;
 $37=(($36+4824)|0);
 HEAP32[(($37)>>2)]=0;
 $38=$2;
 $39=(($38+4828)|0);
 HEAP32[(($39)>>2)]=0;
 $40=$2;
 $41=(($40+4832)|0);
 HEAP32[(($41)>>2)]=0;
 $42=$2;
 $43=(($42+4836)|0);
 HEAP32[(($43)>>2)]=0;
 $44=$2;
 $45=(($44+4840)|0);
 HEAP32[(($45)>>2)]=0;
 $46=$2;
 $47=(($46+4844)|0);
 HEAP32[(($47)>>2)]=0;
 $48=$cfg;
 $49=(($48+48)|0);
 $50=((HEAP32[(($49)>>2)])|0);
 $51=($50|0)<=8000;
 if ($51) {
  $53=$2;
  $54=(($53+4848)|0);
  HEAP32[(($54)>>2)]=17;
  $55=$2;
  $56=(($55+4852)|0);
  HEAP32[(($56)>>2)]=9;
  $57=$2;
  $58=(($57+4856)|0);
  HEAP32[(($58)>>2)]=17;
 } else {
  $60=$2;
  $61=(($60+4848)|0);
  HEAP32[(($61)>>2)]=21;
  $62=$2;
  $63=(($62+4852)|0);
  HEAP32[(($63)>>2)]=12;
  $64=$1;
  $65=(($64+84768)|0);
  $66=(($65+324)|0);
  $67=((HEAP32[(($66)>>2)])|0);
  $68=($67|0)!=0;
  $69=($68?22:21);
  $70=$2;
  $71=(($70+4856)|0);
  HEAP32[(($71)>>2)]=$69;
 }
 $73=$2;
 $74=(($73+4856)|0);
 $75=((HEAP32[(($74)>>2)])|0);
 $76=$2;
 $77=(($76+4864)|0);
 HEAP32[(($77)>>2)]=$75;
 $78=$2;
 $79=(($78+4848)|0);
 $80=((HEAP32[(($79)>>2)])|0);
 $81=$2;
 $82=(($81+4860)|0);
 HEAP32[(($82)>>2)]=$80;
 $83=$2;
 $84=(($83+4868)|0);
 HEAP32[(($84)>>2)]=11;
 $sfb=0;
 while(1) {
  $86=$sfb;
  $87=($86|0)<22;
  if (!($87)) {
   break;
  }
  $89=$sfb;
  $90=((($89)+(1))|0);
  $91=$1;
  $92=(($91+21360)|0);
  $93=(($92)|0);
  $94=(($93+($90<<2))|0);
  $95=((HEAP32[(($94)>>2)])|0);
  $96=$sfb;
  $97=$1;
  $98=(($97+21360)|0);
  $99=(($98)|0);
  $100=(($99+($96<<2))|0);
  $101=((HEAP32[(($100)>>2)])|0);
  $102=((($95)-($101))|0);
  $103=$sfb;
  $104=$2;
  $105=(($104+4872)|0);
  $106=(($105+($103<<2))|0);
  HEAP32[(($106)>>2)]=$102;
  $107=$sfb;
  $108=$2;
  $109=(($108+5028)|0);
  $110=(($109+($107<<2))|0);
  HEAP32[(($110)>>2)]=3;
  $112=$sfb;
  $113=((($112)+(1))|0);
  $sfb=$113;
 }
 $115=$2;
 $116=(($115+4788)|0);
 $117=((HEAP32[(($116)>>2)])|0);
 $118=($117|0)==2;
 if ($118) {
  $120=$2;
  $121=(($120+4852)|0);
  HEAP32[(($121)>>2)]=0;
  $122=$2;
  $123=(($122+4848)|0);
  HEAP32[(($123)>>2)]=0;
  $124=$2;
  $125=(($124+4792)|0);
  $126=((HEAP32[(($125)>>2)])|0);
  $127=($126|0)!=0;
  if ($127) {
   $129=$2;
   $130=(($129+4852)|0);
   HEAP32[(($130)>>2)]=3;
   $131=$cfg;
   $132=(($131+60)|0);
   $133=((HEAP32[(($132)>>2)])|0);
   $134=($133<<1);
   $135=((($134)+(4))|0);
   $136=$2;
   $137=(($136+4848)|0);
   HEAP32[(($137)>>2)]=$135;
  }
  $139=$cfg;
  $140=(($139+48)|0);
  $141=((HEAP32[(($140)>>2)])|0);
  $142=($141|0)<=8000;
  if ($142) {
   $144=$2;
   $145=(($144+4848)|0);
   $146=((HEAP32[(($145)>>2)])|0);
   $147=$2;
   $148=(($147+4852)|0);
   $149=((HEAP32[(($148)>>2)])|0);
   $150=(((9)-($149))|0);
   $151=((($150)*(3))&-1);
   $152=((($146)+($151))|0);
   $153=$2;
   $154=(($153+4864)|0);
   HEAP32[(($154)>>2)]=$152;
   $155=$2;
   $156=(($155+4848)|0);
   $157=((HEAP32[(($156)>>2)])|0);
   $158=$2;
   $159=(($158+4852)|0);
   $160=((HEAP32[(($159)>>2)])|0);
   $161=(((9)-($160))|0);
   $162=((($161)*(3))&-1);
   $163=((($157)+($162))|0);
   $164=$2;
   $165=(($164+4860)|0);
   HEAP32[(($165)>>2)]=$163;
  } else {
   $167=$2;
   $168=(($167+4848)|0);
   $169=((HEAP32[(($168)>>2)])|0);
   $170=$1;
   $171=(($170+84768)|0);
   $172=(($171+324)|0);
   $173=((HEAP32[(($172)>>2)])|0);
   $174=($173|0)!=0;
   $175=($174?13:12);
   $176=$2;
   $177=(($176+4852)|0);
   $178=((HEAP32[(($177)>>2)])|0);
   $179=((($175)-($178))|0);
   $180=((($179)*(3))&-1);
   $181=((($169)+($180))|0);
   $182=$2;
   $183=(($182+4864)|0);
   HEAP32[(($183)>>2)]=$181;
   $184=$2;
   $185=(($184+4848)|0);
   $186=((HEAP32[(($185)>>2)])|0);
   $187=$2;
   $188=(($187+4852)|0);
   $189=((HEAP32[(($188)>>2)])|0);
   $190=(((12)-($189))|0);
   $191=((($190)*(3))&-1);
   $192=((($186)+($191))|0);
   $193=$2;
   $194=(($193+4860)|0);
   HEAP32[(($194)>>2)]=$192;
  }
  $196=$2;
  $197=(($196+4860)|0);
  $198=((HEAP32[(($197)>>2)])|0);
  $199=((($198)-(18))|0);
  $200=$2;
  $201=(($200+4868)|0);
  HEAP32[(($201)>>2)]=$199;
  $202=$2;
  $203=(($202+4848)|0);
  $204=((HEAP32[(($203)>>2)])|0);
  $205=$2;
  $206=(($205+4856)|0);
  HEAP32[(($206)>>2)]=$204;
  $207=$2;
  $208=(($207+4848)|0);
  $209=((HEAP32[(($208)>>2)])|0);
  $210=$1;
  $211=(($210+21360)|0);
  $212=(($211)|0);
  $213=(($212+($209<<2))|0);
  $214=((HEAP32[(($213)>>2)])|0);
  $215=$2;
  $216=(($215)|0);
  $217=(($216+($214<<2))|0);
  $ix=$217;
  $218=$ixwork;
  $219=$2;
  $220=(($219)|0);
  $221=$220;
  (_memcpy((($218)|0), (($221)|0), 2304)|0);
  $222=$2;
  $223=(($222+4852)|0);
  $224=((HEAP32[(($223)>>2)])|0);
  $sfb=$224;
  while(1) {
   $226=$sfb;
   $227=($226|0)<13;
   if (!($227)) {
    break;
   }
   $229=$sfb;
   $230=$1;
   $231=(($230+21360)|0);
   $232=(($231+92)|0);
   $233=(($232+($229<<2))|0);
   $234=((HEAP32[(($233)>>2)])|0);
   $start=$234;
   $235=$sfb;
   $236=((($235)+(1))|0);
   $237=$1;
   $238=(($237+21360)|0);
   $239=(($238+92)|0);
   $240=(($239+($236<<2))|0);
   $241=((HEAP32[(($240)>>2)])|0);
   $end=$241;
   $window=0;
   while(1) {
    $243=$window;
    $244=($243|0)<3;
    if (!($244)) {
     break;
    }
    $246=$start;
    $l=$246;
    while(1) {
     $248=$l;
     $249=$end;
     $250=($248|0)<($249|0);
     if (!($250)) {
      break;
     }
     $252=$l;
     $253=((($252)*(3))&-1);
     $254=$window;
     $255=((($253)+($254))|0);
     $256=(($ixwork+($255<<2))|0);
     $257=(+(HEAPF32[(($256)>>2)]));
     $258=$ix;
     $259=(($258+4)|0);
     $ix=$259;
     HEAPF32[(($258)>>2)]=$257;
     $261=$l;
     $262=((($261)+(1))|0);
     $l=$262;
    }
    $265=$window;
    $266=((($265)+(1))|0);
    $window=$266;
   }
   $269=$sfb;
   $270=((($269)+(1))|0);
   $sfb=$270;
  }
  $272=$2;
  $273=(($272+4848)|0);
  $274=((HEAP32[(($273)>>2)])|0);
  $j=$274;
  $275=$2;
  $276=(($275+4852)|0);
  $277=((HEAP32[(($276)>>2)])|0);
  $sfb=$277;
  while(1) {
   $279=$sfb;
   $280=($279|0)<13;
   if (!($280)) {
    break;
   }
   $282=$sfb;
   $283=((($282)+(1))|0);
   $284=$1;
   $285=(($284+21360)|0);
   $286=(($285+92)|0);
   $287=(($286+($283<<2))|0);
   $288=((HEAP32[(($287)>>2)])|0);
   $289=$sfb;
   $290=$1;
   $291=(($290+21360)|0);
   $292=(($291+92)|0);
   $293=(($292+($289<<2))|0);
   $294=((HEAP32[(($293)>>2)])|0);
   $295=((($288)-($294))|0);
   $296=$j;
   $297=((($296)+(2))|0);
   $298=$2;
   $299=(($298+4872)|0);
   $300=(($299+($297<<2))|0);
   HEAP32[(($300)>>2)]=$295;
   $301=$j;
   $302=((($301)+(1))|0);
   $303=$2;
   $304=(($303+4872)|0);
   $305=(($304+($302<<2))|0);
   HEAP32[(($305)>>2)]=$295;
   $306=$j;
   $307=$2;
   $308=(($307+4872)|0);
   $309=(($308+($306<<2))|0);
   HEAP32[(($309)>>2)]=$295;
   $310=$j;
   $311=$2;
   $312=(($311+5028)|0);
   $313=(($312+($310<<2))|0);
   HEAP32[(($313)>>2)]=0;
   $314=$j;
   $315=((($314)+(1))|0);
   $316=$2;
   $317=(($316+5028)|0);
   $318=(($317+($315<<2))|0);
   HEAP32[(($318)>>2)]=1;
   $319=$j;
   $320=((($319)+(2))|0);
   $321=$2;
   $322=(($321+5028)|0);
   $323=(($322+($320<<2))|0);
   HEAP32[(($323)>>2)]=2;
   $324=$j;
   $325=((($324)+(3))|0);
   $j=$325;
   $327=$sfb;
   $328=((($327)+(1))|0);
   $sfb=$328;
  }
 }
 $331=$2;
 $332=(($331+5184)|0);
 HEAP32[(($332)>>2)]=0;
 $333=$2;
 $334=(($333+5188)|0);
 HEAP32[(($334)>>2)]=10104;
 $335=$2;
 $336=(($335+5192)|0);
 $337=(($336)|0);
 HEAP32[(($337)>>2)]=0;
 $338=$2;
 $339=(($338+5192)|0);
 $340=(($339+4)|0);
 HEAP32[(($340)>>2)]=0;
 $341=$2;
 $342=(($341+5192)|0);
 $343=(($342+8)|0);
 HEAP32[(($343)>>2)]=0;
 $344=$2;
 $345=(($344+5192)|0);
 $346=(($345+12)|0);
 HEAP32[(($346)>>2)]=0;
 $347=$2;
 $348=(($347+5208)|0);
 HEAP32[(($348)>>2)]=575;
 $349=$2;
 $350=(($349+4608)|0);
 $351=$350;
 _memset((((($351)|0))|0), ((((0)|0))|0), ((((156)|0))|0))|0;
 $352=$cfg;
 $353=(($352+88)|0);
 $354=((HEAP32[(($353)>>2)])|0);
 $355=($354|0)!=1;
 if (!($355)) {
  STACKTOP=sp;return;
 }
 $357=$cfg;
 $358=(($357+88)|0);
 $359=((HEAP32[(($358)>>2)])|0);
 $360=($359|0)!=4;
 if (!($360)) {
  STACKTOP=sp;return;
 }
 $362=$cfg;
 $363=(($362+88)|0);
 $364=((HEAP32[(($363)>>2)])|0);
 $365=($364|0)!=3;
 if (!($365)) {
  STACKTOP=sp;return;
 }
 $367=$cfg;
 $368=(($367+88)|0);
 $369=((HEAP32[(($368)>>2)])|0);
 $370=($369|0)!=0;
 if (!($370)) {
  STACKTOP=sp;return;
 }
 $372=$1;
 $373=$2;
 _psfb21_analogsilence($372,$373);
 STACKTOP=sp;return;
}


function _outer_loop($gfc,$cod_info,$l3_xmin,$xrpow,$ch,$targ_bits){
 $gfc=($gfc)|0;
 $cod_info=($cod_info)|0;
 $l3_xmin=($l3_xmin)|0;
 $xrpow=($xrpow)|0;
 $ch=($ch)|0;
 $targ_bits=($targ_bits)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$cfg=0,$cod_info_w=0,$save_xrpow=0,$distort=0,$best_noise_info=0,$huff_bits=0,$better=0,$age=0,$prev_noise=0,$best_part2_3_length=0,$bEndOfSearch=0,$bRefine=0,$best_ggain_pass1=0;
 var $noise_info=0,$search_limit=0,$maxggain=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$14=0,$15=0,$16=0,$17=0,$18=0,$19=0,$22=0,$23=0,$24=0,$25=0,$26=0;
 var $27=0,$28=0,$29=0,$30=0,$31=0,$32=0,$33=0,$34=0,$35=0,$36=0,$38=0,$39=0,$40=0,$43=0,$44=0,$45=0,$46=0,$47=0,$48=0,$52=0;
 var $53=0,$54=0,$55=0,$56=0,$58=0,$59=0,$60=0,$61=.0,$62=.0,$63=0,$66=0,$67=0,$68=0,$70=0,$71=0,$72=0,$73=0,$74=.0,$75=.0,$76=0;
 var $78=0,$79=0,$80=0,$81=0,$82=.0,$83=.0,$84=0,$88=0,$89=0,$90=0,$91=0,$92=0,$93=0,$96=0,$97=0,$98=0,$101=0,$102=0,$103=0,$104=0;
 var $105=0,$106=0,$110=0,$111=0,$112=0,$113=0,$114=0,$115=0,$117=0,$118=0,$119=0,$120=0,$122=0,$124=0,$125=0,$126=0,$128=0,$129=0,$130=0,$131=0;
 var $134=0,$135=0,$136=0,$139=0,$140=0,$141=0,$142=0,$143=0,$144=0,$146=0,$147=0,$148=0,$149=0,$151=0,$153=0,$154=0,$155=0,$157=0,$158=0,$159=0;
 var $160=0,$164=0,$165=0,$166=0,$167=0,$168=0,$169=0,$170=0,$171=0,$172=0,$173=0,$175=0,$176=0,$177=0,$179=0,$180=0,$181=0,$183=0,$184=0,$185=0;
 var $186=0,$187=0,$189=0,$190=0,$191=0,$192=0,$193=0,$194=0,$195=0,$196=0,$197=0,$198=0,$199=0,$201=0,$202=0,$203=0,$204=0,$206=0,$207=0,$208=0;
 var $209=0,$211=0,$212=0,$213=0,$216=0,$217=0,$218=0,$219=0,$221=0,$222=0,$224=0,$225=0,$228=0,$229=0,$230=0,$231=0,$233=0,$234=0,$236=0,$237=0;
 var $238=0,$239=0,$240=0,$246=0,$247=0,$248=0,$249=0,$250=0,$251=0,$253=0,$254=0,$255=0,$256=0,$258=0,$259=0,$261=0,$262=0,$263=0,$264=0,$265=0;
 var $266=0,$267=0,$268=0,$274=0,$275=0,$276=0,$277=0,$279=0,$280=0,$281=0,$282=0,$284=0,$285=0,$286=0,$287=0,$289=0,$290=0,$291=0,$293=0,$294=0;
 var $295=0,$296=0,$297=0,$298=0,$300=0,$301=0,$302=0,$303=0,$306=0,$307=0,$309=0,label=0;
 var sp=0;sp=STACKTOP;STACKTOP=(STACKTOP+8248)|0;








 $cod_info_w=((sp)|0);
 $save_xrpow=(((sp)+(5256))|0);
 $distort=(((sp)+(7560))|0);
 $best_noise_info=(((sp)+(7720))|0);



 $prev_noise=(((sp)+(7744))|0);




 $noise_info=(((sp)+(8224))|0);


 $2=$gfc;
 $3=$cod_info;
 $4=$l3_xmin;
 $5=$xrpow;
 $6=$ch;
 $7=$targ_bits;
 $8=$2;
 $9=(($8+16)|0);
 $cfg=$9;
 $best_part2_3_length=9999999;
 $bEndOfSearch=0;
 $bRefine=0;
 $best_ggain_pass1=0;
 $10=$2;
 $11=$3;
 $12=$7;
 $13=$6;
 $14=$5;
 $15=((_bin_search_StepSize($10,$11,$12,$13,$14))|0);
 $16=$cfg;
 $17=(($16+12)|0);
 $18=((HEAP32[(($17)>>2)])|0);
 $19=($18|0)!=0;
 if (!($19)) {
  $1=100;
  $309=$1;
  STACKTOP=sp;return (($309)|0);
 }
 $22=$prev_noise;
 _memset((((($22)|0))|0), ((((0)|0))|0), ((((476)|0))|0))|0;
 $23=$3;
 $24=$4;
 $25=(($distort)|0);
 $26=((_calc_noise($23,$24,$25,$best_noise_info,$prev_noise))|0);
 $27=$3;
 $28=(($27+4768)|0);
 $29=((HEAP32[(($28)>>2)])|0);
 $30=(($best_noise_info+20)|0);
 HEAP32[(($30)>>2)]=$29;
 $31=$3;
 $32=$cod_info_w;
 $33=$31;
 (_memcpy((($32)|0), (($33)|0), 5252)|0);
 $age=0;
 $34=$save_xrpow;
 $35=$5;
 $36=$35;
 (_memcpy((($34)|0), (($36)|0), 2304)|0);
 while(1) {
  $38=$bEndOfSearch;
  $39=($38|0)!=0;
  $40=$39^1;
  if (!($40)) {
   break;
  }
  L8: while(1) {
   $maxggain=255;
   $43=$2;
   $44=(($43+84768)|0);
   $45=(($44+328)|0);
   $46=((HEAP32[(($45)>>2)])|0);
   $47=$46&2;
   $48=($47|0)!=0;
   if ($48) {
    $search_limit=20;
   } else {
    $search_limit=3;
   }
   $52=$2;
   $53=(($52+84768)|0);
   $54=(($53+324)|0);
   $55=((HEAP32[(($54)>>2)])|0);
   $56=($55|0)!=0;
   if ($56) {
    $58=(($cod_info_w+4860)|0);
    $59=((HEAP32[(($58)>>2)])|0);
    $60=(($distort+($59<<2))|0);
    $61=(+(HEAPF32[(($60)>>2)]));
    $62=$61;
    $63=$62>(1.0);
    if ($63) {
     label = 11;
     break;
    }
    $66=(($cod_info_w+4788)|0);
    $67=((HEAP32[(($66)>>2)])|0);
    $68=($67|0)==2;
    if ($68) {
     $70=(($cod_info_w+4860)|0);
     $71=((HEAP32[(($70)>>2)])|0);
     $72=((($71)+(1))|0);
     $73=(($distort+($72<<2))|0);
     $74=(+(HEAPF32[(($73)>>2)]));
     $75=$74;
     $76=$75>(1.0);
     if ($76) {
      label = 15;
      break;
     }
     $78=(($cod_info_w+4860)|0);
     $79=((HEAP32[(($78)>>2)])|0);
     $80=((($79)+(2))|0);
     $81=(($distort+($80<<2))|0);
     $82=(+(HEAPF32[(($81)>>2)]));
     $83=$82;
     $84=$83>(1.0);
     if ($84) {
      label = 15;
      break;
     }
    }
   }
   $88=$2;
   $89=(($distort)|0);
   $90=$5;
   $91=$bRefine;
   $92=((_balance_noise($88,$cod_info_w,$89,$90,$91))|0);
   $93=($92|0)==0;
   if ($93) {
    label = 18;
    break;
   }
   $96=(($cod_info_w+4836)|0);
   $97=((HEAP32[(($96)>>2)])|0);
   $98=($97|0)!=0;
   if ($98) {
    $maxggain=254;
   }
   $101=$7;
   $102=(($cod_info_w+4844)|0);
   $103=((HEAP32[(($102)>>2)])|0);
   $104=((($101)-($103))|0);
   $huff_bits=$104;
   $105=$huff_bits;
   $106=($105|0)<=0;
   if ($106) {
    label = 22;
    break;
   }
   while(1) {
    $110=$2;
    $111=$5;
    $112=((_count_bits($110,$111,$cod_info_w,$prev_noise))|0);
    $113=(($cod_info_w+4768)|0);
    HEAP32[(($113)>>2)]=$112;
    $114=$huff_bits;
    $115=($112|0)>($114|0);
    if ($115) {
     $117=(($cod_info_w+4780)|0);
     $118=((HEAP32[(($117)>>2)])|0);
     $119=$maxggain;
     $120=($118|0)<=($119|0);
     $122=$120;
    } else {
     $122=0;
    }

    if (!($122)) {
     break;
    }
    $124=(($cod_info_w+4780)|0);
    $125=((HEAP32[(($124)>>2)])|0);
    $126=((($125)+(1))|0);
    HEAP32[(($124)>>2)]=$126;
   }
   $128=(($cod_info_w+4780)|0);
   $129=((HEAP32[(($128)>>2)])|0);
   $130=$maxggain;
   $131=($129|0)>($130|0);
   if ($131) {
    label = 29;
    break;
   }
   $134=(($best_noise_info+12)|0);
   $135=((HEAP32[(($134)>>2)])|0);
   $136=($135|0)==0;
   if ($136) {
    while(1) {
     $139=$2;
     $140=$5;
     $141=((_count_bits($139,$140,$cod_info_w,$prev_noise))|0);
     $142=(($cod_info_w+4768)|0);
     HEAP32[(($142)>>2)]=$141;
     $143=$best_part2_3_length;
     $144=($141|0)>($143|0);
     if ($144) {
      $146=(($cod_info_w+4780)|0);
      $147=((HEAP32[(($146)>>2)])|0);
      $148=$maxggain;
      $149=($147|0)<=($148|0);
      $151=$149;
     } else {
      $151=0;
     }

     if (!($151)) {
      break;
     }
     $153=(($cod_info_w+4780)|0);
     $154=((HEAP32[(($153)>>2)])|0);
     $155=((($154)+(1))|0);
     HEAP32[(($153)>>2)]=$155;
    }
    $157=(($cod_info_w+4780)|0);
    $158=((HEAP32[(($157)>>2)])|0);
    $159=$maxggain;
    $160=($158|0)>($159|0);
    if ($160) {
     label = 37;
     break;
    }
   }
   $164=$4;
   $165=(($distort)|0);
   $166=((_calc_noise($cod_info_w,$164,$165,$noise_info,$prev_noise))|0);
   $167=(($cod_info_w+4768)|0);
   $168=((HEAP32[(($167)>>2)])|0);
   $169=(($noise_info+20)|0);
   HEAP32[(($169)>>2)]=$168;
   $170=$3;
   $171=(($170+4788)|0);
   $172=((HEAP32[(($171)>>2)])|0);
   $173=($172|0)!=2;
   if ($173) {
    $175=$cfg;
    $176=(($175+68)|0);
    $177=((HEAP32[(($176)>>2)])|0);
    $better=$177;
   } else {
    $179=$cfg;
    $180=(($179+72)|0);
    $181=((HEAP32[(($180)>>2)])|0);
    $better=$181;
   }
   $183=$better;
   $184=(($distort)|0);
   $185=((_quant_compare($183,$best_noise_info,$noise_info,$cod_info_w,$184))|0);
   $better=$185;
   $186=$better;
   $187=($186|0)!=0;
   if ($187) {
    $189=$3;
    $190=(($189+4768)|0);
    $191=((HEAP32[(($190)>>2)])|0);
    $best_part2_3_length=$191;
    $192=$best_noise_info;
    $193=$noise_info;
    HEAP32[(($192)>>2)]=((HEAP32[(($193)>>2)])|0);HEAP32[((($192)+(4))>>2)]=((HEAP32[((($193)+(4))>>2)])|0);HEAP32[((($192)+(8))>>2)]=((HEAP32[((($193)+(8))>>2)])|0);HEAP32[((($192)+(12))>>2)]=((HEAP32[((($193)+(12))>>2)])|0);HEAP32[((($192)+(16))>>2)]=((HEAP32[((($193)+(16))>>2)])|0);HEAP32[((($192)+(20))>>2)]=((HEAP32[((($193)+(20))>>2)])|0);
    $194=$3;
    $195=$194;
    $196=$cod_info_w;
    (_memcpy((($195)|0), (($196)|0), 5252)|0);
    $age=0;
    $197=$save_xrpow;
    $198=$5;
    $199=$198;
    (_memcpy((($197)|0), (($199)|0), 2304)|0);
   } else {
    $201=$cfg;
    $202=(($201+32)|0);
    $203=((HEAP32[(($202)>>2)])|0);
    $204=($203|0)==0;
    if ($204) {
     $206=$age;
     $207=((($206)+(1))|0);
     $age=$207;
     $208=$search_limit;
     $209=($207|0)>($208|0);
     if ($209) {
      $211=(($best_noise_info+12)|0);
      $212=((HEAP32[(($211)>>2)])|0);
      $213=($212|0)==0;
      if ($213) {
       label = 47;
       break;
      }
     }
     $216=$cfg;
     $217=(($216+24)|0);
     $218=((HEAP32[(($217)>>2)])|0);
     $219=($218|0)==3;
     do {
      if ($219) {
       $221=$bRefine;
       $222=($221|0)!=0;
       if (!($222)) {
        break;
       }
       $224=$age;
       $225=($224|0)>30;
       if ($225) {
        label = 51;
        break L8;
       }
      }
     } while(0);
     $228=$cfg;
     $229=(($228+24)|0);
     $230=((HEAP32[(($229)>>2)])|0);
     $231=($230|0)==3;
     do {
      if ($231) {
       $233=$bRefine;
       $234=($233|0)!=0;
       if (!($234)) {
        break;
       }
       $236=(($cod_info_w+4780)|0);
       $237=((HEAP32[(($236)>>2)])|0);
       $238=$best_ggain_pass1;
       $239=((($237)-($238))|0);
       $240=($239|0)>15;
       if ($240) {
        label = 55;
        break L8;
       }
      }
     } while(0);
    }
   }
   $246=(($cod_info_w+4780)|0);
   $247=((HEAP32[(($246)>>2)])|0);
   $248=(($cod_info_w+4836)|0);
   $249=((HEAP32[(($248)>>2)])|0);
   $250=((($247)+($249))|0);
   $251=($250|0)<255;
   if (!($251)) {
    break;
   }
  }
  if ((label|0) == 11) {
   label = 0;
  }
  else if ((label|0) == 15) {
   label = 0;
  }
  else if ((label|0) == 18) {
   label = 0;
  }
  else if ((label|0) == 22) {
   label = 0;
  }
  else if ((label|0) == 29) {
   label = 0;
  }
  else if ((label|0) == 37) {
   label = 0;
  }
  else if ((label|0) == 47) {
   label = 0;
  }
  else if ((label|0) == 51) {
   label = 0;
  }
  else if ((label|0) == 55) {
   label = 0;
  }
  $253=$cfg;
  $254=(($253+24)|0);
  $255=((HEAP32[(($254)>>2)])|0);
  $256=($255|0)==3;
  if ($256) {
   $258=$bRefine;
   $259=($258|0)!=0;
   if ($259) {
    $bEndOfSearch=1;
   } else {
    $261=$3;
    $262=$cod_info_w;
    $263=$261;
    (_memcpy((($262)|0), (($263)|0), 5252)|0);
    $264=$5;
    $265=$264;
    $266=$save_xrpow;
    (_memcpy((($265)|0), (($266)|0), 2304)|0);
    $age=0;
    $267=(($cod_info_w+4780)|0);
    $268=((HEAP32[(($267)>>2)])|0);
    $best_ggain_pass1=$268;
    $bRefine=1;
   }
  } else {
   $bEndOfSearch=1;
  }
 }
 $274=$cfg;
 $275=(($274+88)|0);
 $276=((HEAP32[(($275)>>2)])|0);
 $277=($276|0)==2;
 do {
  if ($277) {
   label = 70;
  } else {
   $279=$cfg;
   $280=(($279+88)|0);
   $281=((HEAP32[(($280)>>2)])|0);
   $282=($281|0)==4;
   if ($282) {
    label = 70;
    break;
   }
   $284=$cfg;
   $285=(($284+88)|0);
   $286=((HEAP32[(($285)>>2)])|0);
   $287=($286|0)==1;
   if ($287) {
    label = 70;
    break;
   }
   $293=$2;
   $294=(($293+84768)|0);
   $295=(($294+328)|0);
   $296=((HEAP32[(($295)>>2)])|0);
   $297=$296&1;
   $298=($297|0)!=0;
   if ($298) {
    $300=$2;
    $301=$3;
    $302=$4;
    $303=$5;
    _trancate_smallspectrums($300,$301,$302,$303);
   }
  }
 } while(0);
 if ((label|0) == 70) {
  $289=$5;
  $290=$289;
  $291=$save_xrpow;
  (_memcpy((($290)|0), (($291)|0), 2304)|0);
 }
 $306=(($best_noise_info+12)|0);
 $307=((HEAP32[(($306)>>2)])|0);
 $1=$307;
 $309=$1;
 STACKTOP=sp;return (($309)|0);
}


function _get_framebits($gfc,$frameBits){
 $gfc=($gfc)|0;
 $frameBits=($frameBits)|0;
 var $1=0,$2=0,$cfg=0,$eov=0,$bitsPerFrame=0,$i=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$14=0,$15=0,$16=0;
 var $17=0,$19=0,$20=0,$21=0,$22=0,$23=0,$25=0,$26=0,$27=0,$28=0,$29=0,$30=0,$31=0,$32=0,$34=0,$35=0,label=0;
 var sp=0;sp=STACKTOP;STACKTOP=(STACKTOP+8)|0;




 $bitsPerFrame=((sp)|0);

 $1=$gfc;
 $2=$frameBits;
 $3=$1;
 $4=(($3+16)|0);
 $cfg=$4;
 $5=$1;
 $6=(($5+84040)|0);
 $eov=$6;
 $7=$cfg;
 $8=(($7+96)|0);
 $9=((HEAP32[(($8)>>2)])|0);
 $10=$eov;
 $11=(($10+704)|0);
 HEAP32[(($11)>>2)]=$9;
 $12=$1;
 $13=((_getframebits($12))|0);
 HEAP32[(($bitsPerFrame)>>2)]=$13;
 $14=$eov;
 $15=(($14+704)|0);
 HEAP32[(($15)>>2)]=1;
 $16=$1;
 $17=((_getframebits($16))|0);
 HEAP32[(($bitsPerFrame)>>2)]=$17;
 $i=1;
 while(1) {
  $19=$i;
  $20=$cfg;
  $21=(($20+100)|0);
  $22=((HEAP32[(($21)>>2)])|0);
  $23=($19|0)<=($22|0);
  if (!($23)) {
   break;
  }
  $25=$i;
  $26=$eov;
  $27=(($26+704)|0);
  HEAP32[(($27)>>2)]=$25;
  $28=$1;
  $29=((_ResvFrameBegin($28,$bitsPerFrame))|0);
  $30=$i;
  $31=$2;
  $32=(($31+($30<<2))|0);
  HEAP32[(($32)>>2)]=$29;
  $34=$i;
  $35=((($34)+(1))|0);
  $i=$35;
 }
 STACKTOP=sp;return;
}


function _floatcompare($v1,$v2){
 $v1=($v1)|0;
 $v2=($v2)|0;
 var $1=0,$2=0,$3=0,$a=0,$b=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=.0,$10=0,$11=.0,$12=0,$15=0,$16=.0,$17=0,$18=.0,$19=0,$23=0;
 var label=0;
 var sp=0;sp=STACKTOP;





 $2=$v1;
 $3=$v2;
 $4=$2;
 $5=$4;
 $a=$5;
 $6=$3;
 $7=$6;
 $b=$7;
 $8=$a;
 $9=(+(HEAPF32[(($8)>>2)]));
 $10=$b;
 $11=(+(HEAPF32[(($10)>>2)]));
 $12=$9>$11;
 do {
  if ($12) {
   $1=1;
  } else {
   $15=$a;
   $16=(+(HEAPF32[(($15)>>2)]));
   $17=$b;
   $18=(+(HEAPF32[(($17)>>2)]));
   $19=$16<$18;
   if ($19) {
    $1=-1;
    break;
   } else {
    $1=0;
    break;
   }
  }
 } while(0);
 $23=$1;
 STACKTOP=sp;return (($23)|0);
}


function _psfb21_analogsilence($gfc,$cod_info){
 $gfc=($gfc)|0;
 $cod_info=($cod_info)|0;
 var $1=0,$2=0,$ATH=0,$xr=0,$gsfb=0,$stop=0,$start=0,$end=0,$j=0,$ath21=.0,$block=0,$gsfb1=0,$stop2=0,$start3=0,$end4=0,$j5=0,$ath12=.0,$3=0,$4=0,$5=0;
 var $6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0,$15=0,$16=0,$18=0,$19=0,$20=0,$22=0,$24=0,$25=0,$26=0,$27=0,$28=0,$29=0,$30=0;
 var $31=0,$32=0,$33=0,$34=0,$35=0,$36=0,$37=0,$38=0,$39=.0,$40=0,$41=0,$42=0,$43=0,$44=.0,$45=0,$46=0,$47=.0,$48=.0,$49=0,$50=0;
 var $51=0,$52=0,$53=.0,$54=0,$56=0,$57=0,$58=0,$59=0,$60=.0,$61=.0,$62=.0,$64=0,$65=0,$67=0,$68=0,$69=0,$71=0,$72=0,$73=0,$74=.0;
 var $75=.0,$76=.0,$77=.0,$78=.0,$79=0,$81=0,$82=0,$83=0,$87=0,$88=0,$91=0,$92=0,$96=0,$97=0,$100=0,$101=0,$103=0,$104=0,$105=0,$107=0;
 var $109=0,$110=0,$111=0,$112=0,$113=0,$114=0,$115=0,$116=0,$117=0,$118=0,$119=0,$120=0,$121=0,$122=0,$123=0,$124=0,$125=0,$126=0,$127=0,$128=0;
 var $129=0,$130=0,$131=0,$132=0,$133=0,$134=0,$135=0,$136=0,$137=0,$138=0,$139=0,$140=0,$141=0,$142=0,$143=0,$144=0,$145=0,$146=0,$147=0,$148=0;
 var $149=0,$150=0,$151=0,$152=0,$153=0,$154=0,$155=0,$156=0,$157=0,$158=0,$159=0,$160=.0,$161=0,$162=0,$163=0,$164=0,$165=.0,$166=0,$167=0,$168=.0;
 var $169=.0,$170=0,$171=0,$172=0,$173=0,$174=.0,$175=0,$177=0,$178=0,$179=0,$180=0,$181=.0,$182=.0,$183=.0,$185=0,$186=0,$188=0,$189=0,$190=0,$192=0;
 var $193=0,$194=0,$195=.0,$196=.0,$197=.0,$198=.0,$199=.0,$200=0,$202=0,$203=0,$204=0,$208=0,$209=0,$212=0,$213=0,$216=0,$217=0,label=0;
 var sp=0;sp=STACKTOP;

















 $1=$gfc;
 $2=$cod_info;
 $3=$1;
 $4=(($3+85796)|0);
 $5=((HEAP32[(($4)>>2)])|0);
 $ATH=$5;
 $6=$2;
 $7=(($6)|0);
 $8=(($7)|0);
 $xr=$8;
 $9=$2;
 $10=(($9+4788)|0);
 $11=((HEAP32[(($10)>>2)])|0);
 $12=($11|0)!=2;
 if ($12) {
  $stop=0;
  $gsfb=5;
  while(1) {
   $15=$gsfb;
   $16=($15|0)>=0;
   if ($16) {
    $18=$stop;
    $19=($18|0)!=0;
    $20=$19^1;
    $22=$20;
   } else {
    $22=0;
   }

   if (!($22)) {
    break;
   }
   $24=$gsfb;
   $25=$1;
   $26=(($25+21360)|0);
   $27=(($26+148)|0);
   $28=(($27+($24<<2))|0);
   $29=((HEAP32[(($28)>>2)])|0);
   $start=$29;
   $30=$gsfb;
   $31=((($30)+(1))|0);
   $32=$1;
   $33=(($32+21360)|0);
   $34=(($33+148)|0);
   $35=(($34+($31<<2))|0);
   $36=((HEAP32[(($35)>>2)])|0);
   $end=$36;
   $37=$ATH;
   $38=(($37+8)|0);
   $39=(+(HEAPF32[(($38)>>2)]));
   $40=$gsfb;
   $41=$ATH;
   $42=(($41+164)|0);
   $43=(($42+($40<<2))|0);
   $44=(+(HEAPF32[(($43)>>2)]));
   $45=$ATH;
   $46=(($45+20)|0);
   $47=(+(HEAPF32[(($46)>>2)]));
   $48=(+(_athAdjust($39,$44,$47,0.0)));
   $ath21=$48;
   $49=$1;
   $50=(($49+84768)|0);
   $51=(($50)|0);
   $52=(($51+84)|0);
   $53=(+(HEAPF32[(($52)>>2)]));
   $54=$53>(9.999999960041972e-13);
   if ($54) {
    $56=$1;
    $57=(($56+84768)|0);
    $58=(($57)|0);
    $59=(($58+84)|0);
    $60=(+(HEAPF32[(($59)>>2)]));
    $61=$ath21;
    $62=($61)*($60);
    $ath21=$62;
   }
   $64=$end;
   $65=((($64)-(1))|0);
   $j=$65;
   while(1) {
    $67=$j;
    $68=$start;
    $69=($67|0)>=($68|0);
    if (!($69)) {
     break;
    }
    $71=$j;
    $72=$xr;
    $73=(($72+($71<<2))|0);
    $74=(+(HEAPF32[(($73)>>2)]));
    $75=$74;
    $76=(+(Math_abs((+($75)))));
    $77=$ath21;
    $78=$77;
    $79=$76<$78;
    if (!($79)) {
     label = 12;
     break;
    }
    $81=$j;
    $82=$xr;
    $83=(($82+($81<<2))|0);
    HEAPF32[(($83)>>2)]=0.0;
    $87=$j;
    $88=((($87)-(1))|0);
    $j=$88;
   }
   if ((label|0) == 12) {
    label = 0;
    $stop=1;
   }
   $91=$gsfb;
   $92=((($91)-(1))|0);
   $gsfb=$92;
  }
  STACKTOP=sp;return;
 }
 $block=0;
 while(1) {
  $96=$block;
  $97=($96|0)<3;
  if (!($97)) {
   break;
  }
  $stop2=0;
  $gsfb1=5;
  while(1) {
   $100=$gsfb1;
   $101=($100|0)>=0;
   if ($101) {
    $103=$stop2;
    $104=($103|0)!=0;
    $105=$104^1;
    $107=$105;
   } else {
    $107=0;
   }

   if (!($107)) {
    break;
   }
   $109=$1;
   $110=(($109+21360)|0);
   $111=(($110+92)|0);
   $112=(($111+48)|0);
   $113=((HEAP32[(($112)>>2)])|0);
   $114=((($113)*(3))&-1);
   $115=$1;
   $116=(($115+21360)|0);
   $117=(($116+92)|0);
   $118=(($117+52)|0);
   $119=((HEAP32[(($118)>>2)])|0);
   $120=$1;
   $121=(($120+21360)|0);
   $122=(($121+92)|0);
   $123=(($122+48)|0);
   $124=((HEAP32[(($123)>>2)])|0);
   $125=((($119)-($124))|0);
   $126=$block;
   $127=(Math_imul($125,$126)|0);
   $128=((($114)+($127))|0);
   $129=$gsfb1;
   $130=$1;
   $131=(($130+21360)|0);
   $132=(($131+176)|0);
   $133=(($132+($129<<2))|0);
   $134=((HEAP32[(($133)>>2)])|0);
   $135=$1;
   $136=(($135+21360)|0);
   $137=(($136+176)|0);
   $138=(($137)|0);
   $139=((HEAP32[(($138)>>2)])|0);
   $140=((($134)-($139))|0);
   $141=((($128)+($140))|0);
   $start3=$141;
   $142=$start3;
   $143=$gsfb1;
   $144=((($143)+(1))|0);
   $145=$1;
   $146=(($145+21360)|0);
   $147=(($146+176)|0);
   $148=(($147+($144<<2))|0);
   $149=((HEAP32[(($148)>>2)])|0);
   $150=$gsfb1;
   $151=$1;
   $152=(($151+21360)|0);
   $153=(($152+176)|0);
   $154=(($153+($150<<2))|0);
   $155=((HEAP32[(($154)>>2)])|0);
   $156=((($149)-($155))|0);
   $157=((($142)+($156))|0);
   $end4=$157;
   $158=$ATH;
   $159=(($158+8)|0);
   $160=(+(HEAPF32[(($159)>>2)]));
   $161=$gsfb1;
   $162=$ATH;
   $163=(($162+188)|0);
   $164=(($163+($161<<2))|0);
   $165=(+(HEAPF32[(($164)>>2)]));
   $166=$ATH;
   $167=(($166+20)|0);
   $168=(+(HEAPF32[(($167)>>2)]));
   $169=(+(_athAdjust($160,$165,$168,0.0)));
   $ath12=$169;
   $170=$1;
   $171=(($170+84768)|0);
   $172=(($171+88)|0);
   $173=(($172+48)|0);
   $174=(+(HEAPF32[(($173)>>2)]));
   $175=$174>(9.999999960041972e-13);
   if ($175) {
    $177=$1;
    $178=(($177+84768)|0);
    $179=(($178+88)|0);
    $180=(($179+48)|0);
    $181=(+(HEAPF32[(($180)>>2)]));
    $182=$ath12;
    $183=($182)*($181);
    $ath12=$183;
   }
   $185=$end4;
   $186=((($185)-(1))|0);
   $j5=$186;
   while(1) {
    $188=$j5;
    $189=$start3;
    $190=($188|0)>=($189|0);
    if (!($190)) {
     break;
    }
    $192=$j5;
    $193=$xr;
    $194=(($193+($192<<2))|0);
    $195=(+(HEAPF32[(($194)>>2)]));
    $196=$195;
    $197=(+(Math_abs((+($196)))));
    $198=$ath12;
    $199=$198;
    $200=$197<$199;
    if (!($200)) {
     label = 30;
     break;
    }
    $202=$j5;
    $203=$xr;
    $204=(($203+($202<<2))|0);
    HEAPF32[(($204)>>2)]=0.0;
    $208=$j5;
    $209=((($208)-(1))|0);
    $j5=$209;
   }
   if ((label|0) == 30) {
    label = 0;
    $stop2=1;
   }
   $212=$gsfb1;
   $213=((($212)-(1))|0);
   $gsfb1=$213;
  }
  $216=$block;
  $217=((($216)+(1))|0);
  $block=$217;
 }
 STACKTOP=sp;return;
}


function _bin_search_StepSize($gfc,$cod_info,$desired_rate,$ch,$xrpow){
 $gfc=($gfc)|0;
 $cod_info=($cod_info)|0;
 $desired_rate=($desired_rate)|0;
 $ch=($ch)|0;
 $xrpow=($xrpow)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$nBits=0,$CurrentStep=0,$flag_GoneOver=0,$start=0,$Direction=0,$step=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$14=0;
 var $15=0,$16=0,$17=0,$18=0,$19=0,$20=0,$21=0,$22=0,$23=0,$24=0,$25=0,$27=0,$28=0,$29=0,$30=0,$31=0,$32=0,$34=0,$35=0,$36=0;
 var $39=0,$40=0,$41=0,$43=0,$44=0,$47=0,$48=0,$50=0,$51=0,$53=0,$55=0,$56=0,$59=0,$60=0,$62=0,$63=0,$65=0,$66=0,$68=0,$69=0;
 var $70=0,$71=0,$72=0,$73=0,$74=0,$75=0,$76=0,$78=0,$79=0,$81=0,$82=0,$83=0,$84=0,$86=0,$87=0,$91=0,$92=0,$93=0,$95=0,$96=0;
 var $97=0,$98=0,$100=0,$102=0,$103=0,$104=0,$105=0,$106=0,$107=0,$108=0,$109=0,$111=0,$112=0,$113=0,$114=0,$115=0,$116=0,$117=0,$118=0,$119=0;
 var $120=0,$121=0,$122=0,$123=0,$124=0,$125=0,$126=0,$127=0,$128=0,$129=0,$130=0,$131=0,$132=0,$133=0,$134=0,label=0;
 var sp=0;sp=STACKTOP;











 $1=$gfc;
 $2=$cod_info;
 $3=$desired_rate;
 $4=$ch;
 $5=$xrpow;
 $6=$4;
 $7=$1;
 $8=(($7+84768)|0);
 $9=(($8+160)|0);
 $10=(($9+($6<<2))|0);
 $11=((HEAP32[(($10)>>2)])|0);
 $CurrentStep=$11;
 $flag_GoneOver=0;
 $12=$4;
 $13=$1;
 $14=(($13+84768)|0);
 $15=(($14+152)|0);
 $16=(($15+($12<<2))|0);
 $17=((HEAP32[(($16)>>2)])|0);
 $start=$17;
 $Direction=0;
 $18=$start;
 $19=$2;
 $20=(($19+4780)|0);
 HEAP32[(($20)>>2)]=$18;
 $21=$2;
 $22=(($21+4844)|0);
 $23=((HEAP32[(($22)>>2)])|0);
 $24=$3;
 $25=((($24)-($23))|0);
 $3=$25;
 while(1) {
  $27=$1;
  $28=$5;
  $29=$2;
  $30=((_count_bits($27,$28,$29,0))|0);
  $nBits=$30;
  $31=$CurrentStep;
  $32=($31|0)==1;
  if ($32) {
   break;
  }
  $34=$nBits;
  $35=$3;
  $36=($34|0)==($35|0);
  if ($36) {
   break;
  }
  $39=$nBits;
  $40=$3;
  $41=($39|0)>($40|0);
  if ($41) {
   $43=$Direction;
   $44=($43|0)==2;
   if ($44) {
    $flag_GoneOver=1;
   }
   $47=$flag_GoneOver;
   $48=($47|0)!=0;
   if ($48) {
    $50=$CurrentStep;
    $51=(((($50|0))/(2))&-1);
    $CurrentStep=$51;
   }
   $Direction=1;
   $53=$CurrentStep;
   $step=$53;
  } else {
   $55=$Direction;
   $56=($55|0)==1;
   if ($56) {
    $flag_GoneOver=1;
   }
   $59=$flag_GoneOver;
   $60=($59|0)!=0;
   if ($60) {
    $62=$CurrentStep;
    $63=(((($62|0))/(2))&-1);
    $CurrentStep=$63;
   }
   $Direction=2;
   $65=$CurrentStep;
   $66=(((-$65))|0);
   $step=$66;
  }
  $68=$step;
  $69=$2;
  $70=(($69+4780)|0);
  $71=((HEAP32[(($70)>>2)])|0);
  $72=((($71)+($68))|0);
  HEAP32[(($70)>>2)]=$72;
  $73=$2;
  $74=(($73+4780)|0);
  $75=((HEAP32[(($74)>>2)])|0);
  $76=($75|0)<0;
  if ($76) {
   $78=$2;
   $79=(($78+4780)|0);
   HEAP32[(($79)>>2)]=0;
   $flag_GoneOver=1;
  }
  $81=$2;
  $82=(($81+4780)|0);
  $83=((HEAP32[(($82)>>2)])|0);
  $84=($83|0)>255;
  if ($84) {
   $86=$2;
   $87=(($86+4780)|0);
   HEAP32[(($87)>>2)]=255;
   $flag_GoneOver=1;
  }
 }
 while(1) {
  $91=$nBits;
  $92=$3;
  $93=($91|0)>($92|0);
  if ($93) {
   $95=$2;
   $96=(($95+4780)|0);
   $97=((HEAP32[(($96)>>2)])|0);
   $98=($97|0)<255;
   $100=$98;
  } else {
   $100=0;
  }

  if (!($100)) {
   break;
  }
  $102=$2;
  $103=(($102+4780)|0);
  $104=((HEAP32[(($103)>>2)])|0);
  $105=((($104)+(1))|0);
  HEAP32[(($103)>>2)]=$105;
  $106=$1;
  $107=$5;
  $108=$2;
  $109=((_count_bits($106,$107,$108,0))|0);
  $nBits=$109;
 }
 $111=$start;
 $112=$2;
 $113=(($112+4780)|0);
 $114=((HEAP32[(($113)>>2)])|0);
 $115=((($111)-($114))|0);
 $116=($115|0)>=4;
 $117=($116?4:2);
 $118=$4;
 $119=$1;
 $120=(($119+84768)|0);
 $121=(($120+160)|0);
 $122=(($121+($118<<2))|0);
 HEAP32[(($122)>>2)]=$117;
 $123=$2;
 $124=(($123+4780)|0);
 $125=((HEAP32[(($124)>>2)])|0);
 $126=$4;
 $127=$1;
 $128=(($127+84768)|0);
 $129=(($128+152)|0);
 $130=(($129+($126<<2))|0);
 HEAP32[(($130)>>2)]=$125;
 $131=$nBits;
 $132=$2;
 $133=(($132+4768)|0);
 HEAP32[(($133)>>2)]=$131;
 $134=$nBits;
 STACKTOP=sp;return (($134)|0);
}


function _balance_noise($gfc,$cod_info,$distort,$xrpow,$bRefine){
 $gfc=($gfc)|0;
 $cod_info=($cod_info)|0;
 $distort=($distort)|0;
 $xrpow=($xrpow)|0;
 $bRefine=($bRefine)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$cfg=0,$status=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$14=0,$15=0,$16=0,$17=0,$20=0;
 var $21=0,$22=0,$23=0,$24=0,$27=0,$28=0,$29=0,$30=0,$32=0,$33=0,$34=0,$35=0,$36=0,$37=0,$38=0,$39=0,$40=0,$42=0,$43=0,$45=0;
 var $46=0,$47=0,$48=0,$50=0,$51=0,$52=0,$53=0,$55=0,$56=0,$57=0,$58=0,$59=0,$61=0,$62=0,$63=0,$65=0,$66=0,$70=0,$71=0,$73=0;
 var $74=0,$75=0,$77=0,$78=0,$79=0,$80=0,$82=0,label=0;
 var sp=0;sp=STACKTOP;








 $2=$gfc;
 $3=$cod_info;
 $4=$distort;
 $5=$xrpow;
 $6=$bRefine;
 $7=$2;
 $8=(($7+16)|0);
 $cfg=$8;
 $9=$2;
 $10=$3;
 $11=$4;
 $12=$5;
 $13=$6;
 _amp_scalefac_bands($9,$10,$11,$12,$13);
 $14=$3;
 $15=((_loop_break($14))|0);
 $status=$15;
 $16=$status;
 $17=($16|0)!=0;
 if ($17) {
  $1=0;
  $82=$1;
  STACKTOP=sp;return (($82)|0);
 }
 $20=$2;
 $21=$3;
 $22=((_scale_bitcount($20,$21))|0);
 $status=$22;
 $23=$status;
 $24=($23|0)!=0;
 if (!($24)) {
  $1=1;
  $82=$1;
  STACKTOP=sp;return (($82)|0);
 }
 $27=$cfg;
 $28=(($27+12)|0);
 $29=((HEAP32[(($28)>>2)])|0);
 $30=($29|0)>1;
 if ($30) {
  $32=$2;
  $33=(($32+84768)|0);
  $34=(($33+168)|0);
  $35=(($34)|0);
  $36=$35;
  _memset((((($36)|0))|0), ((((0)|0))|0), ((((156)|0))|0))|0;
  $37=$3;
  $38=(($37+4836)|0);
  $39=((HEAP32[(($38)>>2)])|0);
  $40=($39|0)!=0;
  if ($40) {
   $45=$3;
   $46=(($45+4788)|0);
   $47=((HEAP32[(($46)>>2)])|0);
   $48=($47|0)==2;
   do {
    if ($48) {
     $50=$cfg;
     $51=(($50+16)|0);
     $52=((HEAP32[(($51)>>2)])|0);
     $53=($52|0)>0;
     if (!($53)) {
      break;
     }
     $55=$2;
     $56=$3;
     $57=$5;
     $58=((_inc_subblock_gain($55,$56,$57))|0);
     $59=($58|0)!=0;
     if ($59) {
      $65=1;
     } else {
      $61=$3;
      $62=((_loop_break($61))|0);
      $63=($62|0)!=0;
      $65=$63;
     }

     $66=($65&1);
     $status=$66;
    }
   } while(0);
  } else {
   $42=$3;
   $43=$5;
   _inc_scalefac_scale($42,$43);
   $status=0;
  }
 }
 $70=$status;
 $71=($70|0)!=0;
 if (!($71)) {
  $73=$2;
  $74=$3;
  $75=((_scale_bitcount($73,$74))|0);
  $status=$75;
 }
 $77=$status;
 $78=($77|0)!=0;
 $79=$78^1;
 $80=($79&1);
 $1=$80;
 $82=$1;
 STACKTOP=sp;return (($82)|0);
}


function _quant_compare($quant_comp,$best,$calc,$gi,$distort){
 $quant_comp=($quant_comp)|0;
 $best=($best)|0;
 $calc=($calc)|0;
 $gi=($gi)|0;
 $distort=($distort)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$better=0,$6=0,$9=0,$10=0,$11=0,$12=0,$14=0,$15=0,$16=0,$17=0,$18=0,$19=0,$20=0,$21=0,$22=0;
 var $23=0,$24=0,$25=0,$26=0,$27=0,$28=0,$30=0,$31=0,$32=0,$33=0,$34=0,$35=0,$36=0,$37=0,$40=0,$41=0,$42=.0,$43=0,$45=0,$46=0;
 var $47=.0,$48=.0,$49=0,$50=0,$51=0,$52=.0,$53=.0,$54=0,$55=0,$56=.0,$57=.0,$58=0,$59=0,$60=0,$61=.0,$62=.0,$63=0,$65=0,$66=0,$69=0;
 var $70=0,$71=0,$72=0,$73=0,$74=0,$75=0,$77=0,$78=0,$79=0,$80=0,$81=0,$82=0,$83=0,$85=0,$86=0,$87=.0,$88=0,$89=0,$90=.0,$91=0;
 var $93=0,$94=0,$95=0,$96=0,$97=0,$98=0,$99=0,$101=0,$102=0,$103=.0,$104=.0,$105=.0,$106=0,$107=0,$108=.0,$109=.0,$110=.0,$111=0,$113=0,$114=0;
 var $115=.0,$116=0,$117=0,$118=.0,$119=.0,$120=.0,$121=.0,$122=0,$123=0,$124=.0,$125=.0,$126=.0,$127=.0,$128=0,$130=0,$131=0,$132=.0,$133=0,$134=0,$135=.0;
 var $136=.0,$137=.0,$138=.0,$139=0,$140=0,$141=.0,$142=.0,$143=.0,$144=.0,$145=0,$147=0,$148=0,$149=.0,$150=0,$151=0,$152=.0,$153=0,$155=0,$157=0,$158=0;
 var $160=0,$161=0,$162=.0,$163=.0,$164=0,$165=0,$167=0,$168=0,$169=.0,$170=0,$171=0,$172=.0,$173=0,$174=0,$176=0,$177=0,$178=.0,$179=0,$180=0,$181=.0;
 var $182=0,$183=0,$185=0,$186=0,$187=.0,$188=0,$189=0,$190=.0,$191=0,$193=0,$194=0,$195=.0,$196=0,$197=0,$198=.0,$199=0,$201=0,$202=0,$204=0,$205=0;
 var $206=.0,$207=.0,$208=0,$210=0,$211=0,$212=.0,$213=.0,$214=0,$216=0,$217=0,$218=.0,$219=.0,$220=0,$222=0,$223=0,$224=.0,$225=.0,$226=0,$228=0,$229=0;
 var $230=.0,$231=.0,$232=0,$233=0,$234=.0,$235=.0,$236=.0,$237=0,$239=0,$240=0,$241=.0,$242=0,$243=0,$244=.0,$245=0,$247=0,$248=0,$249=.0,$250=.0,$251=0;
 var $253=0,$254=0,$255=.0,$256=.0,$257=0,$259=0,$260=0,$261=.0,$262=.0,$263=0,$264=0,$265=.0,$266=.0,$267=.0,$268=0,$270=0,$271=0,$272=.0,$273=0,$274=0;
 var $275=.0,$276=0,$277=0,$278=.0,$279=.0,$280=0,$282=0,$283=0,$284=.0,$285=.0,$286=0,$288=0,$289=0,$290=.0,$291=.0,$292=0,$294=0,$295=0,$296=.0,$297=.0;
 var $298=0,$299=0,$300=.0,$301=.0,$302=.0,$303=0,$305=0,$306=0,$307=.0,$308=0,$309=0,$310=.0,$311=.0,$312=0,$313=0,$314=.0,$315=0,$316=0,$317=.0,$318=.0;
 var $319=0,$321=0,$322=0,$323=.0,$324=.0,$325=0,$327=0,$328=0,$329=.0,$330=.0,$331=0,$333=0,$334=0,$335=.0,$336=.0,$337=0,$338=0,$339=.0,$340=.0,$341=.0;
 var $342=0,$344=0,$345=0,$346=.0,$347=0,$348=0,$349=.0,$350=.0,$351=0,$352=0,$353=.0,$354=.0,$355=0,$356=0,$357=.0,$358=0,$359=0,$360=.0,$361=.0,$362=0;
 var $363=0,$364=.0,$365=.0,$366=0,$368=0,$370=0,$371=0,$373=0,$374=0,$375=.0,$376=0,$377=0,$378=.0,$379=0,$381=0,$382=0,$383=.0,$384=.0,$385=.0,$386=0;
 var $387=0,$388=.0,$389=.0,$390=.0,$391=0,$393=0,$394=0,$395=.0,$396=0,$397=0,$398=.0,$399=.0,$400=.0,$401=.0,$402=0,$403=0,$404=.0,$405=.0,$406=.0,$407=.0;
 var $408=0,$410=0,$411=0,$412=.0,$413=0,$414=0,$415=.0,$416=.0,$417=.0,$418=.0,$419=0,$420=0,$421=.0,$422=.0,$423=.0,$424=.0,$425=0,$427=0,$428=0,$429=.0;
 var $430=0,$431=0,$432=.0,$433=0,$435=0,$437=0,$438=0,$440=0,$441=0,$442=.0,$443=0,$444=0,$445=.0,$446=0,$448=0,$449=0,$450=.0,$451=.0,$452=.0,$453=0;
 var $454=0,$455=.0,$456=.0,$457=.0,$458=0,$460=0,$461=0,$462=.0,$463=0,$464=0,$465=.0,$466=.0,$467=.0,$468=.0,$469=0,$470=0,$471=.0,$472=.0,$473=.0,$474=.0;
 var $475=0,$477=0,$478=0,$479=.0,$480=0,$481=0,$482=.0,$483=.0,$484=.0,$485=.0,$486=0,$487=0,$488=.0,$489=.0,$490=.0,$491=.0,$492=0,$494=0,$495=0,$496=.0;
 var $497=0,$498=0,$499=.0,$500=0,$502=0,$503=0,$504=.0,$505=.0,$506=.0,$507=0,$508=0,$509=.0,$510=.0,$511=.0,$512=0,$514=0,$515=0,$516=.0,$517=0,$518=0;
 var $519=.0,$520=.0,$521=.0,$522=.0,$523=0,$524=0,$525=.0,$526=.0,$527=.0,$528=.0,$529=0,$531=0,$532=0,$533=.0,$534=0,$535=0,$536=.0,$537=.0,$538=.0,$539=.0;
 var $540=0,$541=0,$542=.0,$543=.0,$544=.0,$545=.0,$546=0,$548=0,$549=0,$550=.0,$551=0,$552=0,$553=.0,$554=0,$556=0,$558=0,$560=0,$562=0,$563=0,$565=0;
 var $566=0,$567=0,$568=0,$569=0,$570=0,$571=0,$573=0,$574=0,$575=.0,$576=0,$577=0,$578=.0,$579=0,$581=0,$582=0,$584=0,$585=0,$586=0,$587=0,$589=0;
 var $590=0,$592=0,$593=0,$594=0,$595=0,$596=0,$597=0,$598=0,$600=0,$601=0,$603=0,label=0;
 var sp=0;sp=STACKTOP;






 $1=$quant_comp;
 $2=$best;
 $3=$calc;
 $4=$gi;
 $5=$distort;
 $6=$1;
 switch (($6|0)) {
 case 8: {
  $160=$5;
  $161=$4;
  $162=(+(_get_klemm_noise($160,$161)));
  $163=$162;
  $164=$3;
  $165=(($164+8)|0);
  HEAPF32[(($165)>>2)]=$163;
  label = 22;
  break;
 }
 case 1: {
  label = 22;
  break;
 }
 case 2: {
  $176=$3;
  $177=(($176+4)|0);
  $178=(+(HEAPF32[(($177)>>2)]));
  $179=$2;
  $180=(($179+4)|0);
  $181=(+(HEAPF32[(($180)>>2)]));
  $182=$178<$181;
  $183=($182&1);
  $better=$183;
  break;
 }
 case 3: {
  $185=$3;
  $186=(($185+4)|0);
  $187=(+(HEAPF32[(($186)>>2)]));
  $188=$2;
  $189=(($188+4)|0);
  $190=(+(HEAPF32[(($189)>>2)]));
  $191=$187<$190;
  if ($191) {
   $193=$3;
   $194=(($193+8)|0);
   $195=(+(HEAPF32[(($194)>>2)]));
   $196=$2;
   $197=(($196+8)|0);
   $198=(+(HEAPF32[(($197)>>2)]));
   $199=$195<$198;
   $201=$199;
  } else {
   $201=0;
  }

  $202=($201&1);
  $better=$202;
  break;
 }
 case 9: {
  label = 3;
  break;
 }
 case 5: {
  $373=$3;
  $374=(($373)|0);
  $375=(+(HEAPF32[(($374)>>2)]));
  $376=$2;
  $377=(($376)|0);
  $378=(+(HEAPF32[(($377)>>2)]));
  $379=$375<$378;
  if ($379) {
   $437=1;
  } else {
   $381=$3;
   $382=(($381)|0);
   $383=(+(HEAPF32[(($382)>>2)]));
   $384=$383;
   $385=(+(Math_abs((+($384)))));
   $386=$2;
   $387=(($386)|0);
   $388=(+(HEAPF32[(($387)>>2)]));
   $389=$388;
   $390=(+(Math_abs((+($389)))));
   $391=$385>$390;
   if ($391) {
    $393=$3;
    $394=(($393)|0);
    $395=(+(HEAPF32[(($394)>>2)]));
    $396=$2;
    $397=(($396)|0);
    $398=(+(HEAPF32[(($397)>>2)]));
    $399=($395)-($398);
    $400=$399;
    $401=(+(Math_abs((+($400)))));
    $402=$3;
    $403=(($402)|0);
    $404=(+(HEAPF32[(($403)>>2)]));
    $405=$404;
    $406=(+(Math_abs((+($405)))));
    $407=($406)*((9.999999974752427e-7));
    $408=$401<=$407;
    if ($408) {
     label = 51;
    } else {
     $435=0;
    }
   } else {
    $410=$3;
    $411=(($410)|0);
    $412=(+(HEAPF32[(($411)>>2)]));
    $413=$2;
    $414=(($413)|0);
    $415=(+(HEAPF32[(($414)>>2)]));
    $416=($412)-($415);
    $417=$416;
    $418=(+(Math_abs((+($417)))));
    $419=$2;
    $420=(($419)|0);
    $421=(+(HEAPF32[(($420)>>2)]));
    $422=$421;
    $423=(+(Math_abs((+($422)))));
    $424=($423)*((9.999999974752427e-7));
    $425=$418<=$424;
    if ($425) {
     label = 51;
    } else {
     $435=0;
    }
   }
   if ((label|0) == 51) {
    $427=$3;
    $428=(($427+4)|0);
    $429=(+(HEAPF32[(($428)>>2)]));
    $430=$2;
    $431=(($430+4)|0);
    $432=(+(HEAPF32[(($431)>>2)]));
    $433=$429<$432;
    $435=$433;
   }

   $437=$435;
  }

  $438=($437&1);
  $better=$438;
  break;
 }
 case 6: {
  $440=$3;
  $441=(($440)|0);
  $442=(+(HEAPF32[(($441)>>2)]));
  $443=$2;
  $444=(($443)|0);
  $445=(+(HEAPF32[(($444)>>2)]));
  $446=$442<$445;
  if ($446) {
   $562=1;
  } else {
   $448=$3;
   $449=(($448)|0);
   $450=(+(HEAPF32[(($449)>>2)]));
   $451=$450;
   $452=(+(Math_abs((+($451)))));
   $453=$2;
   $454=(($453)|0);
   $455=(+(HEAPF32[(($454)>>2)]));
   $456=$455;
   $457=(+(Math_abs((+($456)))));
   $458=$452>$457;
   if ($458) {
    $460=$3;
    $461=(($460)|0);
    $462=(+(HEAPF32[(($461)>>2)]));
    $463=$2;
    $464=(($463)|0);
    $465=(+(HEAPF32[(($464)>>2)]));
    $466=($462)-($465);
    $467=$466;
    $468=(+(Math_abs((+($467)))));
    $469=$3;
    $470=(($469)|0);
    $471=(+(HEAPF32[(($470)>>2)]));
    $472=$471;
    $473=(+(Math_abs((+($472)))));
    $474=($473)*((9.999999974752427e-7));
    $475=$468<=$474;
    if ($475) {
     label = 58;
    } else {
     $560=0;
    }
   } else {
    $477=$3;
    $478=(($477)|0);
    $479=(+(HEAPF32[(($478)>>2)]));
    $480=$2;
    $481=(($480)|0);
    $482=(+(HEAPF32[(($481)>>2)]));
    $483=($479)-($482);
    $484=$483;
    $485=(+(Math_abs((+($484)))));
    $486=$2;
    $487=(($486)|0);
    $488=(+(HEAPF32[(($487)>>2)]));
    $489=$488;
    $490=(+(Math_abs((+($489)))));
    $491=($490)*((9.999999974752427e-7));
    $492=$485<=$491;
    if ($492) {
     label = 58;
    } else {
     $560=0;
    }
   }
   if ((label|0) == 58) {
    $494=$3;
    $495=(($494+8)|0);
    $496=(+(HEAPF32[(($495)>>2)]));
    $497=$2;
    $498=(($497+8)|0);
    $499=(+(HEAPF32[(($498)>>2)]));
    $500=$496<$499;
    if ($500) {
     $558=1;
    } else {
     $502=$3;
     $503=(($502+8)|0);
     $504=(+(HEAPF32[(($503)>>2)]));
     $505=$504;
     $506=(+(Math_abs((+($505)))));
     $507=$2;
     $508=(($507+8)|0);
     $509=(+(HEAPF32[(($508)>>2)]));
     $510=$509;
     $511=(+(Math_abs((+($510)))));
     $512=$506>$511;
     if ($512) {
      $514=$3;
      $515=(($514+8)|0);
      $516=(+(HEAPF32[(($515)>>2)]));
      $517=$2;
      $518=(($517+8)|0);
      $519=(+(HEAPF32[(($518)>>2)]));
      $520=($516)-($519);
      $521=$520;
      $522=(+(Math_abs((+($521)))));
      $523=$3;
      $524=(($523+8)|0);
      $525=(+(HEAPF32[(($524)>>2)]));
      $526=$525;
      $527=(+(Math_abs((+($526)))));
      $528=($527)*((9.999999974752427e-7));
      $529=$522<=$528;
      if ($529) {
       label = 62;
      } else {
       $556=0;
      }
     } else {
      $531=$3;
      $532=(($531+8)|0);
      $533=(+(HEAPF32[(($532)>>2)]));
      $534=$2;
      $535=(($534+8)|0);
      $536=(+(HEAPF32[(($535)>>2)]));
      $537=($533)-($536);
      $538=$537;
      $539=(+(Math_abs((+($538)))));
      $540=$2;
      $541=(($540+8)|0);
      $542=(+(HEAPF32[(($541)>>2)]));
      $543=$542;
      $544=(+(Math_abs((+($543)))));
      $545=($544)*((9.999999974752427e-7));
      $546=$539<=$545;
      if ($546) {
       label = 62;
      } else {
       $556=0;
      }
     }
     if ((label|0) == 62) {
      $548=$3;
      $549=(($548+4)|0);
      $550=(+(HEAPF32[(($549)>>2)]));
      $551=$2;
      $552=(($551+4)|0);
      $553=(+(HEAPF32[(($552)>>2)]));
      $554=$550<=$553;
      $556=$554;
     }

     $558=$556;
    }

    $560=$558;
   }

   $562=$560;
  }

  $563=($562&1);
  $better=$563;
  break;
 }
 case 7: {
  $565=$3;
  $566=(($565+12)|0);
  $567=((HEAP32[(($566)>>2)])|0);
  $568=$2;
  $569=(($568+12)|0);
  $570=((HEAP32[(($569)>>2)])|0);
  $571=($567|0)<($570|0);
  if ($571) {
   $581=1;
  } else {
   $573=$3;
   $574=(($573)|0);
   $575=(+(HEAPF32[(($574)>>2)]));
   $576=$2;
   $577=(($576)|0);
   $578=(+(HEAPF32[(($577)>>2)]));
   $579=$575<$578;
   $581=$579;
  }

  $582=($581&1);
  $better=$582;
  break;
 }
 case 4: {
  $204=$3;
  $205=(($204+8)|0);
  $206=(+(HEAPF32[(($205)>>2)]));
  $207=$206;
  $208=$207<=(0.0);
  if ($208) {
   $210=$2;
   $211=(($210+8)|0);
   $212=(+(HEAPF32[(($211)>>2)]));
   $213=$212;
   $214=$213>(0.2);
   if ($214) {
    $370=1;
   } else {
    label = 29;
   }
  } else {
   label = 29;
  }
  L45: do {
   if ((label|0) == 29) {
    $216=$3;
    $217=(($216+8)|0);
    $218=(+(HEAPF32[(($217)>>2)]));
    $219=$218;
    $220=$219<=(0.0);
    do {
     if ($220) {
      $222=$2;
      $223=(($222+8)|0);
      $224=(+(HEAPF32[(($223)>>2)]));
      $225=$224;
      $226=$225<(0.0);
      if (!($226)) {
       break;
      }
      $228=$2;
      $229=(($228+8)|0);
      $230=(+(HEAPF32[(($229)>>2)]));
      $231=$230;
      $232=$3;
      $233=(($232+8)|0);
      $234=(+(HEAPF32[(($233)>>2)]));
      $235=$234;
      $236=($235)-((0.2));
      $237=$231>$236;
      if (!($237)) {
       break;
      }
      $239=$3;
      $240=(($239+4)|0);
      $241=(+(HEAPF32[(($240)>>2)]));
      $242=$2;
      $243=(($242+4)|0);
      $244=(+(HEAPF32[(($243)>>2)]));
      $245=$241<$244;
      if ($245) {
       $370=1;
       break L45;
      }
     }
    } while(0);
    $247=$3;
    $248=(($247+8)|0);
    $249=(+(HEAPF32[(($248)>>2)]));
    $250=$249;
    $251=$250<=(0.0);
    do {
     if ($251) {
      $253=$2;
      $254=(($253+8)|0);
      $255=(+(HEAPF32[(($254)>>2)]));
      $256=$255;
      $257=$256>(0.0);
      if (!($257)) {
       break;
      }
      $259=$2;
      $260=(($259+8)|0);
      $261=(+(HEAPF32[(($260)>>2)]));
      $262=$261;
      $263=$3;
      $264=(($263+8)|0);
      $265=(+(HEAPF32[(($264)>>2)]));
      $266=$265;
      $267=($266)-((0.2));
      $268=$262>$267;
      if (!($268)) {
       break;
      }
      $270=$3;
      $271=(($270+4)|0);
      $272=(+(HEAPF32[(($271)>>2)]));
      $273=$2;
      $274=(($273+4)|0);
      $275=(+(HEAPF32[(($274)>>2)]));
      $276=$2;
      $277=(($276)|0);
      $278=(+(HEAPF32[(($277)>>2)]));
      $279=($275)+($278);
      $280=$272<$279;
      if ($280) {
       $370=1;
       break L45;
      }
     }
    } while(0);
    $282=$3;
    $283=(($282+8)|0);
    $284=(+(HEAPF32[(($283)>>2)]));
    $285=$284;
    $286=$285>(0.0);
    do {
     if ($286) {
      $288=$2;
      $289=(($288+8)|0);
      $290=(+(HEAPF32[(($289)>>2)]));
      $291=$290;
      $292=$291>(-0.05);
      if (!($292)) {
       break;
      }
      $294=$2;
      $295=(($294+8)|0);
      $296=(+(HEAPF32[(($295)>>2)]));
      $297=$296;
      $298=$3;
      $299=(($298+8)|0);
      $300=(+(HEAPF32[(($299)>>2)]));
      $301=$300;
      $302=($301)-((0.1));
      $303=$297>$302;
      if (!($303)) {
       break;
      }
      $305=$3;
      $306=(($305+4)|0);
      $307=(+(HEAPF32[(($306)>>2)]));
      $308=$3;
      $309=(($308)|0);
      $310=(+(HEAPF32[(($309)>>2)]));
      $311=($307)+($310);
      $312=$2;
      $313=(($312+4)|0);
      $314=(+(HEAPF32[(($313)>>2)]));
      $315=$2;
      $316=(($315)|0);
      $317=(+(HEAPF32[(($316)>>2)]));
      $318=($314)+($317);
      $319=$311<$318;
      if ($319) {
       $370=1;
       break L45;
      }
     }
    } while(0);
    $321=$3;
    $322=(($321+8)|0);
    $323=(+(HEAPF32[(($322)>>2)]));
    $324=$323;
    $325=$324>(0.0);
    do {
     if ($325) {
      $327=$2;
      $328=(($327+8)|0);
      $329=(+(HEAPF32[(($328)>>2)]));
      $330=$329;
      $331=$330>(-0.1);
      if (!($331)) {
       $368=0;
       break;
      }
      $333=$2;
      $334=(($333+8)|0);
      $335=(+(HEAPF32[(($334)>>2)]));
      $336=$335;
      $337=$3;
      $338=(($337+8)|0);
      $339=(+(HEAPF32[(($338)>>2)]));
      $340=$339;
      $341=($340)-((0.15));
      $342=$336>$341;
      if (!($342)) {
       $368=0;
       break;
      }
      $344=$3;
      $345=(($344+4)|0);
      $346=(+(HEAPF32[(($345)>>2)]));
      $347=$3;
      $348=(($347)|0);
      $349=(+(HEAPF32[(($348)>>2)]));
      $350=($346)+($349);
      $351=$3;
      $352=(($351)|0);
      $353=(+(HEAPF32[(($352)>>2)]));
      $354=($350)+($353);
      $355=$2;
      $356=(($355+4)|0);
      $357=(+(HEAPF32[(($356)>>2)]));
      $358=$2;
      $359=(($358)|0);
      $360=(+(HEAPF32[(($359)>>2)]));
      $361=($357)+($360);
      $362=$2;
      $363=(($362)|0);
      $364=(+(HEAPF32[(($363)>>2)]));
      $365=($361)+($364);
      $366=$354<$365;
      $368=$366;
     } else {
      $368=0;
     }
    } while(0);

    $370=$368;
   }
  } while(0);

  $371=($370&1);
  $better=$371;
  break;
 }
 case 0: {
  $69=$3;
  $70=(($69+12)|0);
  $71=((HEAP32[(($70)>>2)])|0);
  $72=$2;
  $73=(($72+12)|0);
  $74=((HEAP32[(($73)>>2)])|0);
  $75=($71|0)<($74|0);
  do {
   if ($75) {
    $157=1;
   } else {
    $77=$3;
    $78=(($77+12)|0);
    $79=((HEAP32[(($78)>>2)])|0);
    $80=$2;
    $81=(($80+12)|0);
    $82=((HEAP32[(($81)>>2)])|0);
    $83=($79|0)==($82|0);
    if ($83) {
     $85=$3;
     $86=(($85)|0);
     $87=(+(HEAPF32[(($86)>>2)]));
     $88=$2;
     $89=(($88)|0);
     $90=(+(HEAPF32[(($89)>>2)]));
     $91=$87<$90;
     if ($91) {
      $157=1;
      break;
     }
    }
    $93=$3;
    $94=(($93+12)|0);
    $95=((HEAP32[(($94)>>2)])|0);
    $96=$2;
    $97=(($96+12)|0);
    $98=((HEAP32[(($97)>>2)])|0);
    $99=($95|0)==($98|0);
    do {
     if ($99) {
      $101=$3;
      $102=(($101)|0);
      $103=(+(HEAPF32[(($102)>>2)]));
      $104=$103;
      $105=(+(Math_abs((+($104)))));
      $106=$2;
      $107=(($106)|0);
      $108=(+(HEAPF32[(($107)>>2)]));
      $109=$108;
      $110=(+(Math_abs((+($109)))));
      $111=$105>$110;
      if ($111) {
       $113=$3;
       $114=(($113)|0);
       $115=(+(HEAPF32[(($114)>>2)]));
       $116=$2;
       $117=(($116)|0);
       $118=(+(HEAPF32[(($117)>>2)]));
       $119=($115)-($118);
       $120=$119;
       $121=(+(Math_abs((+($120)))));
       $122=$3;
       $123=(($122)|0);
       $124=(+(HEAPF32[(($123)>>2)]));
       $125=$124;
       $126=(+(Math_abs((+($125)))));
       $127=($126)*((9.999999974752427e-7));
       $128=$121<=$127;
       if (!($128)) {
        $155=0;
        break;
       }
      } else {
       $130=$3;
       $131=(($130)|0);
       $132=(+(HEAPF32[(($131)>>2)]));
       $133=$2;
       $134=(($133)|0);
       $135=(+(HEAPF32[(($134)>>2)]));
       $136=($132)-($135);
       $137=$136;
       $138=(+(Math_abs((+($137)))));
       $139=$2;
       $140=(($139)|0);
       $141=(+(HEAPF32[(($140)>>2)]));
       $142=$141;
       $143=(+(Math_abs((+($142)))));
       $144=($143)*((9.999999974752427e-7));
       $145=$138<=$144;
       if (!($145)) {
        $155=0;
        break;
       }
      }
      $147=$3;
      $148=(($147+4)|0);
      $149=(+(HEAPF32[(($148)>>2)]));
      $150=$2;
      $151=(($150+4)|0);
      $152=(+(HEAPF32[(($151)>>2)]));
      $153=$149<$152;
      $155=$153;
     } else {
      $155=0;
     }
    } while(0);

    $157=$155;
   }
  } while(0);

  $158=($157&1);
  $better=$158;
  break;
 }
 default: {
  label = 3;
 }
 }
 if ((label|0) == 3) {
  $9=$2;
  $10=(($9+12)|0);
  $11=((HEAP32[(($10)>>2)])|0);
  $12=($11|0)>0;
  if ($12) {
   $14=$3;
   $15=(($14+16)|0);
   $16=((HEAP32[(($15)>>2)])|0);
   $17=$2;
   $18=(($17+16)|0);
   $19=((HEAP32[(($18)>>2)])|0);
   $20=($16|0)<=($19|0);
   $21=($20&1);
   $better=$21;
   $22=$3;
   $23=(($22+16)|0);
   $24=((HEAP32[(($23)>>2)])|0);
   $25=$2;
   $26=(($25+16)|0);
   $27=((HEAP32[(($26)>>2)])|0);
   $28=($24|0)==($27|0);
   if ($28) {
    $30=$3;
    $31=(($30+20)|0);
    $32=((HEAP32[(($31)>>2)])|0);
    $33=$2;
    $34=(($33+20)|0);
    $35=((HEAP32[(($34)>>2)])|0);
    $36=($32|0)<($35|0);
    $37=($36&1);
    $better=$37;
   }
  } else {
   $40=$3;
   $41=(($40+8)|0);
   $42=(+(HEAPF32[(($41)>>2)]));
   $43=$42<(0.0);
   if ($43) {
    $45=$3;
    $46=(($45+8)|0);
    $47=(+(HEAPF32[(($46)>>2)]));
    $48=($47)*((10.0));
    $49=$3;
    $50=(($49+20)|0);
    $51=((HEAP32[(($50)>>2)])|0);
    $52=(+((($51|0))|0));
    $53=($48)+($52);
    $54=$2;
    $55=(($54+8)|0);
    $56=(+(HEAPF32[(($55)>>2)]));
    $57=($56)*((10.0));
    $58=$2;
    $59=(($58+20)|0);
    $60=((HEAP32[(($59)>>2)])|0);
    $61=(+((($60|0))|0));
    $62=($57)+($61);
    $63=$53<=$62;
    $65=$63;
   } else {
    $65=0;
   }

   $66=($65&1);
   $better=$66;
  }
 }
 else if ((label|0) == 22) {
  $167=$3;
  $168=(($167+8)|0);
  $169=(+(HEAPF32[(($168)>>2)]));
  $170=$2;
  $171=(($170+8)|0);
  $172=(+(HEAPF32[(($171)>>2)]));
  $173=$169<$172;
  $174=($173&1);
  $better=$174;
 }
 $584=$2;
 $585=(($584+12)|0);
 $586=((HEAP32[(($585)>>2)])|0);
 $587=($586|0)==0;
 if (!($587)) {
  $603=$better;
  STACKTOP=sp;return (($603)|0);
 }
 $589=$better;
 $590=($589|0)!=0;
 if ($590) {
  $592=$3;
  $593=(($592+20)|0);
  $594=((HEAP32[(($593)>>2)])|0);
  $595=$2;
  $596=(($595+20)|0);
  $597=((HEAP32[(($596)>>2)])|0);
  $598=($594|0)<($597|0);
  $600=$598;
 } else {
  $600=0;
 }

 $601=($600&1);
 $better=$601;
 $603=$better;
 STACKTOP=sp;return (($603)|0);
}


function _amp_scalefac_bands($gfc,$cod_info,$distort,$xrpow,$bRefine){
 $gfc=($gfc)|0;
 $cod_info=($cod_info)|0;
 $distort=($distort)|0;
 $xrpow=($xrpow)|0;
 $bRefine=($bRefine)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$cfg=0,$j=0,$sfb=0,$ifqstep34=.0,$trigger=.0,$noise_shaping_amp=0,$width=0,$l=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$16=0;
 var $17=0,$18=0,$19=0,$20=0,$22=.0,$23=0,$24=0,$25=0,$26=.0,$27=0,$29=0,$30=0,$31=0,$32=.0,$35=0,$36=0,$38=0,$39=0,$40=0,$41=0;
 var $42=0,$44=0,$45=0,$50=0,$53=.0,$54=.0,$55=0,$57=.0,$58=.0,$59=.0,$60=.0,$62=.0,$63=.0,$64=.0,$65=.0,$69=.0,$70=.0,$71=0,$74=.0,$75=.0;
 var $76=.0,$77=.0,$81=0,$82=0,$83=0,$84=0,$85=0,$87=0,$88=0,$89=0,$90=0,$91=0,$92=0,$93=0,$94=0,$95=0,$96=0,$97=0,$98=.0,$99=.0;
 var $100=0,$103=0,$104=0,$105=0,$106=0,$107=0,$108=0,$110=0,$111=0,$112=0,$113=0,$114=0,$115=0,$116=0,$117=0,$118=0,$119=0,$120=0,$121=0,$122=0;
 var $123=0,$124=0,$125=0,$126=0,$127=0,$128=0,$129=0,$130=0,$132=0,$133=0,$134=0,$135=0,$139=0,$140=0,$141=0,$142=0,$143=0,$144=0,$145=0,$146=0;
 var $148=0,$149=0,$151=.0,$152=0,$153=0,$154=0,$155=0,$156=0,$157=.0,$158=.0,$159=0,$160=0,$161=0,$162=0,$163=0,$164=.0,$165=0,$166=0,$167=.0,$168=0;
 var $170=0,$171=0,$172=0,$173=0,$174=0,$175=.0,$176=0,$177=0,$180=0,$181=0,$183=0,$184=0,$185=0,$186=0,$190=0,$191=0,label=0;
 var sp=0;sp=STACKTOP;













 $1=$gfc;
 $2=$cod_info;
 $3=$distort;
 $4=$xrpow;
 $5=$bRefine;
 $6=$1;
 $7=(($6+16)|0);
 $cfg=$7;
 $8=$2;
 $9=(($8+4836)|0);
 $10=((HEAP32[(($9)>>2)])|0);
 $11=($10|0)==0;
 if ($11) {
  $ifqstep34=1.2968395948410034;
 } else {
  $ifqstep34=1.6817928552627563;
 }
 $trigger=0.0;
 $sfb=0;
 while(1) {
  $16=$sfb;
  $17=$2;
  $18=(($17+4860)|0);
  $19=((HEAP32[(($18)>>2)])|0);
  $20=($16|0)<($19|0);
  if (!($20)) {
   break;
  }
  $22=$trigger;
  $23=$sfb;
  $24=$3;
  $25=(($24+($23<<2))|0);
  $26=(+(HEAPF32[(($25)>>2)]));
  $27=$22<$26;
  if ($27) {
   $29=$sfb;
   $30=$3;
   $31=(($30+($29<<2))|0);
   $32=(+(HEAPF32[(($31)>>2)]));
   $trigger=$32;
  }
  $35=$sfb;
  $36=((($35)+(1))|0);
  $sfb=$36;
 }
 $38=$cfg;
 $39=(($38+24)|0);
 $40=((HEAP32[(($39)>>2)])|0);
 $noise_shaping_amp=$40;
 $41=$noise_shaping_amp;
 $42=($41|0)==3;
 if ($42) {
  $44=$5;
  $45=($44|0)==1;
  if ($45) {
   $noise_shaping_amp=2;
  } else {
   $noise_shaping_amp=1;
  }
 }
 $50=$noise_shaping_amp;
 if (((($50|0))|0)==((0)|0)) {
  label = 22;
 } else if (((($50|0))|0)==((2)|0)) {
 } else if (((($50|0))|0)==((1)|0)) {
  $53=$trigger;
  $54=$53;
  $55=$54>(1.0);
  if ($55) {
   $57=$trigger;
   $58=$57;
   $59=(+(Math_pow((+($58)),0.5)));
   $60=$59;
   $trigger=$60;
  } else {
   $62=$trigger;
   $63=$62;
   $64=($63)*((0.95));
   $65=$64;
   $trigger=$65;
  }
 } else {
  label = 22;
 }
 if ((label|0) == 22) {
  $69=$trigger;
  $70=$69;
  $71=$70>(1.0);
  if ($71) {
   $trigger=1.0;
  } else {
   $74=$trigger;
   $75=$74;
   $76=($75)*((0.95));
   $77=$76;
   $trigger=$77;
  }
 }
 $j=0;
 $sfb=0;
 while(1) {
  $81=$sfb;
  $82=$2;
  $83=(($82+4860)|0);
  $84=((HEAP32[(($83)>>2)])|0);
  $85=($81|0)<($84|0);
  if (!($85)) {
   label = 45;
   break;
  }
  $87=$sfb;
  $88=$2;
  $89=(($88+4872)|0);
  $90=(($89+($87<<2))|0);
  $91=((HEAP32[(($90)>>2)])|0);
  $width=$91;
  $92=$width;
  $93=$j;
  $94=((($93)+($92))|0);
  $j=$94;
  $95=$sfb;
  $96=$3;
  $97=(($96+($95<<2))|0);
  $98=(+(HEAPF32[(($97)>>2)]));
  $99=$trigger;
  $100=$98<$99;
  if ($100) {
  } else {
   $103=$1;
   $104=(($103+84768)|0);
   $105=(($104+328)|0);
   $106=((HEAP32[(($105)>>2)])|0);
   $107=$106&2;
   $108=($107|0)!=0;
   if ($108) {
    $110=$sfb;
    $111=$1;
    $112=(($111+84768)|0);
    $113=(($112+168)|0);
    $114=(($113+($110<<2))|0);
    $115=((HEAP32[(($114)>>2)])|0);
    $116=($115|0)!=0;
    $117=$116^1;
    $118=($117&1);
    $119=$sfb;
    $120=$1;
    $121=(($120+84768)|0);
    $122=(($121+168)|0);
    $123=(($122+($119<<2))|0);
    HEAP32[(($123)>>2)]=$118;
    $124=$sfb;
    $125=$1;
    $126=(($125+84768)|0);
    $127=(($126+168)|0);
    $128=(($127+($124<<2))|0);
    $129=((HEAP32[(($128)>>2)])|0);
    $130=($129|0)!=0;
    if (!($130)) {
     $132=$cfg;
     $133=(($132+24)|0);
     $134=((HEAP32[(($133)>>2)])|0);
     $135=($134|0)==2;
     if ($135) {
      label = 33;
      break;
     }
    }
   }
   $139=$sfb;
   $140=$2;
   $141=(($140+4608)|0);
   $142=(($141+($139<<2))|0);
   $143=((HEAP32[(($142)>>2)])|0);
   $144=((($143)+(1))|0);
   HEAP32[(($142)>>2)]=$144;
   $145=$width;
   $146=(((-$145))|0);
   $l=$146;
   while(1) {
    $148=$l;
    $149=($148|0)<0;
    if (!($149)) {
     break;
    }
    $151=$ifqstep34;
    $152=$j;
    $153=$l;
    $154=((($152)+($153))|0);
    $155=$4;
    $156=(($155+($154<<2))|0);
    $157=(+(HEAPF32[(($156)>>2)]));
    $158=($157)*($151);
    HEAPF32[(($156)>>2)]=$158;
    $159=$j;
    $160=$l;
    $161=((($159)+($160))|0);
    $162=$4;
    $163=(($162+($161<<2))|0);
    $164=(+(HEAPF32[(($163)>>2)]));
    $165=$2;
    $166=(($165+4764)|0);
    $167=(+(HEAPF32[(($166)>>2)]));
    $168=$164>$167;
    if ($168) {
     $170=$j;
     $171=$l;
     $172=((($170)+($171))|0);
     $173=$4;
     $174=(($173+($172<<2))|0);
     $175=(+(HEAPF32[(($174)>>2)]));
     $176=$2;
     $177=(($176+4764)|0);
     HEAPF32[(($177)>>2)]=$175;
    }
    $180=$l;
    $181=((($180)+(1))|0);
    $l=$181;
   }
   $183=$cfg;
   $184=(($183+24)|0);
   $185=((HEAP32[(($184)>>2)])|0);
   $186=($185|0)==2;
   if ($186) {
    label = 42;
    break;
   }
  }
  $190=$sfb;
  $191=((($190)+(1))|0);
  $sfb=$191;
 }
 if ((label|0) == 33) {
  STACKTOP=sp;return;
 }
 else if ((label|0) == 42) {
  STACKTOP=sp;return;
 }
 else if ((label|0) == 45) {
  STACKTOP=sp;return;
 }
}


function _loop_break($cod_info){
 $cod_info=($cod_info)|0;
 var $1=0,$2=0,$sfb=0,$4=0,$5=0,$6=0,$7=0,$8=0,$10=0,$11=0,$12=0,$13=0,$14=0,$15=0,$16=0,$17=0,$18=0,$19=0,$20=0,$21=0;
 var $22=0,$23=0,$24=0,$25=0,$29=0,$30=0,$33=0,label=0;
 var sp=0;sp=STACKTOP;



 $2=$cod_info;
 $sfb=0;
 while(1) {
  $4=$sfb;
  $5=$2;
  $6=(($5+4860)|0);
  $7=((HEAP32[(($6)>>2)])|0);
  $8=($4|0)<($7|0);
  if (!($8)) {
   label = 7;
   break;
  }
  $10=$sfb;
  $11=$2;
  $12=(($11+4608)|0);
  $13=(($12+($10<<2))|0);
  $14=((HEAP32[(($13)>>2)])|0);
  $15=$sfb;
  $16=$2;
  $17=(($16+5028)|0);
  $18=(($17+($15<<2))|0);
  $19=((HEAP32[(($18)>>2)])|0);
  $20=$2;
  $21=(($20+4808)|0);
  $22=(($21+($19<<2))|0);
  $23=((HEAP32[(($22)>>2)])|0);
  $24=((($14)+($23))|0);
  $25=($24|0)==0;
  if ($25) {
   label = 4;
   break;
  }
  $29=$sfb;
  $30=((($29)+(1))|0);
  $sfb=$30;
 }
 if ((label|0) == 4) {
  $1=0;
  $33=$1;
  STACKTOP=sp;return (($33)|0);
 }
 else if ((label|0) == 7) {
  $1=1;
  $33=$1;
  STACKTOP=sp;return (($33)|0);
 }
  return 0;
}


function _inc_scalefac_scale($cod_info,$xrpow){
 $cod_info=($cod_info)|0;
 $xrpow=($xrpow)|0;
 var $1=0,$2=0,$l=0,$j=0,$sfb=0,$ifqstep34=.0,$width=0,$s=0,$4=0,$5=0,$6=0,$7=0,$8=0,$10=0,$11=0,$12=0,$13=0,$14=0,$15=0,$16=0;
 var $17=0,$18=0,$19=0,$20=0,$21=0,$22=0,$23=0,$25=0,$26=0,$27=0,$28=0,$29=0,$31=0,$32=0,$33=0,$34=0,$35=0,$36=0,$38=0,$39=0;
 var $40=0,$41=0,$43=0,$44=0,$46=0,$47=0,$48=0,$49=0,$50=0,$51=.0,$52=.0,$53=0,$54=0,$55=0,$56=0,$57=0,$58=.0,$59=0,$60=0,$61=.0;
 var $62=0,$64=0,$65=0,$66=0,$67=0,$68=0,$69=.0,$70=0,$71=0,$74=0,$75=0,$78=0,$79=0,$80=0,$81=0,$82=0,$83=0,$85=0,$86=0,$88=0;
 var $89=0,$90=0,$91=0,label=0;
 var sp=0;sp=STACKTOP;








 $1=$cod_info;
 $2=$xrpow;
 $ifqstep34=1.2968395948410034;
 $j=0;
 $sfb=0;
 while(1) {
  $4=$sfb;
  $5=$1;
  $6=(($5+4860)|0);
  $7=((HEAP32[(($6)>>2)])|0);
  $8=($4|0)<($7|0);
  if (!($8)) {
   break;
  }
  $10=$sfb;
  $11=$1;
  $12=(($11+4872)|0);
  $13=(($12+($10<<2))|0);
  $14=((HEAP32[(($13)>>2)])|0);
  $width=$14;
  $15=$sfb;
  $16=$1;
  $17=(($16+4608)|0);
  $18=(($17+($15<<2))|0);
  $19=((HEAP32[(($18)>>2)])|0);
  $s=$19;
  $20=$1;
  $21=(($20+4832)|0);
  $22=((HEAP32[(($21)>>2)])|0);
  $23=($22|0)!=0;
  if ($23) {
   $25=$sfb;
   $26=((9552+($25<<2))|0);
   $27=((HEAP32[(($26)>>2)])|0);
   $28=$s;
   $29=((($28)+($27))|0);
   $s=$29;
  }
  $31=$width;
  $32=$j;
  $33=((($32)+($31))|0);
  $j=$33;
  $34=$s;
  $35=$34&1;
  $36=($35|0)!=0;
  if ($36) {
   $38=$s;
   $39=((($38)+(1))|0);
   $s=$39;
   $40=$width;
   $41=(((-$40))|0);
   $l=$41;
   while(1) {
    $43=$l;
    $44=($43|0)<0;
    if (!($44)) {
     break;
    }
    $46=$j;
    $47=$l;
    $48=((($46)+($47))|0);
    $49=$2;
    $50=(($49+($48<<2))|0);
    $51=(+(HEAPF32[(($50)>>2)]));
    $52=($51)*((1.2968395948410034));
    HEAPF32[(($50)>>2)]=$52;
    $53=$j;
    $54=$l;
    $55=((($53)+($54))|0);
    $56=$2;
    $57=(($56+($55<<2))|0);
    $58=(+(HEAPF32[(($57)>>2)]));
    $59=$1;
    $60=(($59+4764)|0);
    $61=(+(HEAPF32[(($60)>>2)]));
    $62=$58>$61;
    if ($62) {
     $64=$j;
     $65=$l;
     $66=((($64)+($65))|0);
     $67=$2;
     $68=(($67+($66<<2))|0);
     $69=(+(HEAPF32[(($68)>>2)]));
     $70=$1;
     $71=(($70+4764)|0);
     HEAPF32[(($71)>>2)]=$69;
    }
    $74=$l;
    $75=((($74)+(1))|0);
    $l=$75;
   }
  }
  $78=$s;
  $79=$78>>1;
  $80=$sfb;
  $81=$1;
  $82=(($81+4608)|0);
  $83=(($82+($80<<2))|0);
  HEAP32[(($83)>>2)]=$79;
  $85=$sfb;
  $86=((($85)+(1))|0);
  $sfb=$86;
 }
 $88=$1;
 $89=(($88+4832)|0);
 HEAP32[(($89)>>2)]=0;
 $90=$1;
 $91=(($90+4836)|0);
 HEAP32[(($91)>>2)]=1;
 STACKTOP=sp;return;
}


function _inc_subblock_gain($gfc,$cod_info,$xrpow){
 $gfc=($gfc)|0;
 $cod_info=($cod_info)|0;
 $xrpow=($xrpow)|0;
 var $1=0,$2=0,$3=0,$4=0,$sfb=0,$window=0,$scalefac=0,$s1=0,$s2=0,$l=0,$j=0,$amp=.0,$width=0,$s=0,$gain=0,$amp1=.0,$5=0,$6=0,$7=0,$9=0;
 var $10=0,$11=0,$12=0,$13=0,$15=0,$16=0,$17=0,$18=0,$19=0,$23=0,$24=0,$27=0,$28=0,$30=0,$31=0,$32=0,$33=0,$34=0,$36=0,$37=0;
 var $38=0,$39=0,$40=0,$42=0,$43=0,$44=0,$45=0,$46=0,$47=0,$49=0,$50=0,$51=0,$52=0,$55=0,$56=0,$59=0,$60=0,$61=0,$62=0,$63=0;
 var $65=0,$66=0,$67=0,$68=0,$69=0,$70=0,$72=0,$73=0,$74=0,$75=0,$78=0,$79=0,$81=0,$82=0,$84=0,$85=0,$88=0,$89=0,$90=0,$91=0;
 var $92=0,$93=0,$96=0,$97=0,$98=0,$99=0,$100=0,$101=0,$102=0,$103=0,$104=0,$105=0,$106=0,$107=0,$108=0,$109=0,$110=0,$111=0,$112=0,$113=0;
 var $114=0,$116=0,$117=0,$118=0,$119=0,$120=0,$122=0,$123=0,$124=0,$125=0,$126=0,$127=0,$128=0,$129=0,$130=0,$131=0,$132=0,$133=0,$134=0,$135=0;
 var $136=0,$137=0,$138=0,$140=0,$141=0,$142=0,$143=0,$144=0,$145=0,$146=0,$147=0,$149=0,$150=0,$151=0,$152=0,$153=0,$154=0,$155=0,$156=0,$157=0;
 var $158=0,$159=0,$160=0,$161=.0,$162=0,$163=0,$164=0,$165=0,$166=0,$167=0,$168=0,$169=0,$171=0,$172=0,$174=.0,$175=0,$176=0,$177=0,$178=0,$179=0;
 var $180=.0,$181=.0,$182=0,$183=0,$184=0,$185=0,$186=0,$187=.0,$188=0,$189=0,$190=.0,$191=0,$193=0,$194=0,$195=0,$196=0,$197=0,$198=.0,$199=0,$200=0;
 var $203=0,$204=0,$206=0,$207=0,$208=0,$209=0,$210=0,$211=0,$212=0,$214=0,$215=0,$217=.0,$218=0,$219=0,$220=0,$221=0,$222=0,$223=0,$224=0,$225=0;
 var $226=0,$227=0,$228=0,$229=0,$230=0,$231=0,$232=0,$233=0,$235=0,$236=0,$238=.0,$239=0,$240=0,$241=0,$242=0,$243=0,$244=.0,$245=.0,$246=0,$247=0;
 var $248=0,$249=0,$250=0,$251=.0,$252=0,$253=0,$254=.0,$255=0,$257=0,$258=0,$259=0,$260=0,$261=0,$262=.0,$263=0,$264=0,$267=0,$268=0,$271=0,$272=0;
 var $275=0,label=0;
 var sp=0;sp=STACKTOP;
















 $2=$gfc;
 $3=$cod_info;
 $4=$xrpow;
 $5=$3;
 $6=(($5+4608)|0);
 $7=(($6)|0);
 $scalefac=$7;
 $sfb=0;
 while(1) {
  $9=$sfb;
  $10=$3;
  $11=(($10+4848)|0);
  $12=((HEAP32[(($11)>>2)])|0);
  $13=($9|0)<($12|0);
  if (!($13)) {
   break;
  }
  $15=$sfb;
  $16=$scalefac;
  $17=(($16+($15<<2))|0);
  $18=((HEAP32[(($17)>>2)])|0);
  $19=($18|0)>=16;
  if ($19) {
   label = 4;
   break;
  }
  $23=$sfb;
  $24=((($23)+(1))|0);
  $sfb=$24;
 }
 if ((label|0) == 4) {
  $1=1;
  $275=$1;
  STACKTOP=sp;return (($275)|0);
 }
 $window=0;
 while(1) {
  $27=$window;
  $28=($27|0)<3;
  if (!($28)) {
   label = 46;
   break;
  }
  $s2=0;
  $s1=0;
  $30=$3;
  $31=(($30+4848)|0);
  $32=((HEAP32[(($31)>>2)])|0);
  $33=$window;
  $34=((($32)+($33))|0);
  $sfb=$34;
  while(1) {
   $36=$sfb;
   $37=$3;
   $38=(($37+4868)|0);
   $39=((HEAP32[(($38)>>2)])|0);
   $40=($36|0)<($39|0);
   if (!($40)) {
    break;
   }
   $42=$s1;
   $43=$sfb;
   $44=$scalefac;
   $45=(($44+($43<<2))|0);
   $46=((HEAP32[(($45)>>2)])|0);
   $47=($42|0)<($46|0);
   if ($47) {
    $49=$sfb;
    $50=$scalefac;
    $51=(($50+($49<<2))|0);
    $52=((HEAP32[(($51)>>2)])|0);
    $s1=$52;
   }
   $55=$sfb;
   $56=((($55)+(3))|0);
   $sfb=$56;
  }
  while(1) {
   $59=$sfb;
   $60=$3;
   $61=(($60+4860)|0);
   $62=((HEAP32[(($61)>>2)])|0);
   $63=($59|0)<($62|0);
   if (!($63)) {
    break;
   }
   $65=$s2;
   $66=$sfb;
   $67=$scalefac;
   $68=(($67+($66<<2))|0);
   $69=((HEAP32[(($68)>>2)])|0);
   $70=($65|0)<($69|0);
   if ($70) {
    $72=$sfb;
    $73=$scalefac;
    $74=(($73+($72<<2))|0);
    $75=((HEAP32[(($74)>>2)])|0);
    $s2=$75;
   }
   $78=$sfb;
   $79=((($78)+(3))|0);
   $sfb=$79;
  }
  $81=$s1;
  $82=($81|0)<16;
  do {
   if ($82) {
    $84=$s2;
    $85=($84|0)<8;
    if (!($85)) {
     label = 24;
     break;
    }
   } else {
    label = 24;
   }
  } while(0);
  if ((label|0) == 24) {
   label = 0;
   $88=$window;
   $89=$3;
   $90=(($89+4808)|0);
   $91=(($90+($88<<2))|0);
   $92=((HEAP32[(($91)>>2)])|0);
   $93=($92|0)>=7;
   if ($93) {
    label = 25;
    break;
   }
   $96=$window;
   $97=$3;
   $98=(($97+4808)|0);
   $99=(($98+($96<<2))|0);
   $100=((HEAP32[(($99)>>2)])|0);
   $101=((($100)+(1))|0);
   HEAP32[(($99)>>2)]=$101;
   $102=$3;
   $103=(($102+4848)|0);
   $104=((HEAP32[(($103)>>2)])|0);
   $105=$2;
   $106=(($105+21360)|0);
   $107=(($106)|0);
   $108=(($107+($104<<2))|0);
   $109=((HEAP32[(($108)>>2)])|0);
   $j=$109;
   $110=$3;
   $111=(($110+4848)|0);
   $112=((HEAP32[(($111)>>2)])|0);
   $113=$window;
   $114=((($112)+($113))|0);
   $sfb=$114;
   while(1) {
    $116=$sfb;
    $117=$3;
    $118=(($117+4860)|0);
    $119=((HEAP32[(($118)>>2)])|0);
    $120=($116|0)<($119|0);
    if (!($120)) {
     break;
    }
    $122=$sfb;
    $123=$3;
    $124=(($123+4872)|0);
    $125=(($124+($122<<2))|0);
    $126=((HEAP32[(($125)>>2)])|0);
    $width=$126;
    $127=$sfb;
    $128=$scalefac;
    $129=(($128+($127<<2))|0);
    $130=((HEAP32[(($129)>>2)])|0);
    $s=$130;
    $131=$s;
    $132=$3;
    $133=(($132+4836)|0);
    $134=((HEAP32[(($133)>>2)])|0);
    $135=4>>($134|0);
    $136=((($131)-($135))|0);
    $s=$136;
    $137=$s;
    $138=($137|0)>=0;
    if ($138) {
     $140=$s;
     $141=$sfb;
     $142=$scalefac;
     $143=(($142+($141<<2))|0);
     HEAP32[(($143)>>2)]=$140;
     $144=$width;
     $145=((($144)*(3))&-1);
     $146=$j;
     $147=((($146)+($145))|0);
     $j=$147;
    } else {
     $149=$sfb;
     $150=$scalefac;
     $151=(($150+($149<<2))|0);
     HEAP32[(($151)>>2)]=0;
     $152=$s;
     $153=$3;
     $154=(($153+4836)|0);
     $155=((HEAP32[(($154)>>2)])|0);
     $156=((($155)+(1))|0);
     $157=$152<<$156;
     $158=((($157)+(210))|0);
     $gain=$158;
     $159=$gain;
     $160=((59360+($159<<2))|0);
     $161=(+(HEAPF32[(($160)>>2)]));
     $amp=$161;
     $162=$width;
     $163=$window;
     $164=((($163)+(1))|0);
     $165=(Math_imul($162,$164)|0);
     $166=$j;
     $167=((($166)+($165))|0);
     $j=$167;
     $168=$width;
     $169=(((-$168))|0);
     $l=$169;
     while(1) {
      $171=$l;
      $172=($171|0)<0;
      if (!($172)) {
       break;
      }
      $174=$amp;
      $175=$j;
      $176=$l;
      $177=((($175)+($176))|0);
      $178=$4;
      $179=(($178+($177<<2))|0);
      $180=(+(HEAPF32[(($179)>>2)]));
      $181=($180)*($174);
      HEAPF32[(($179)>>2)]=$181;
      $182=$j;
      $183=$l;
      $184=((($182)+($183))|0);
      $185=$4;
      $186=(($185+($184<<2))|0);
      $187=(+(HEAPF32[(($186)>>2)]));
      $188=$3;
      $189=(($188+4764)|0);
      $190=(+(HEAPF32[(($189)>>2)]));
      $191=$187>$190;
      if ($191) {
       $193=$j;
       $194=$l;
       $195=((($193)+($194))|0);
       $196=$4;
       $197=(($196+($195<<2))|0);
       $198=(+(HEAPF32[(($197)>>2)]));
       $199=$3;
       $200=(($199+4764)|0);
       HEAPF32[(($200)>>2)]=$198;
      }
      $203=$l;
      $204=((($203)+(1))|0);
      $l=$204;
     }
     $206=$width;
     $207=$window;
     $208=(((3)-($207))|0);
     $209=((($208)-(1))|0);
     $210=(Math_imul($206,$209)|0);
     $211=$j;
     $212=((($211)+($210))|0);
     $j=$212;
    }
    $214=$sfb;
    $215=((($214)+(3))|0);
    $sfb=$215;
   }
   $217=(+(HEAPF32[((60168)>>2)]));
   $amp1=$217;
   $218=$sfb;
   $219=$3;
   $220=(($219+4872)|0);
   $221=(($220+($218<<2))|0);
   $222=((HEAP32[(($221)>>2)])|0);
   $223=$window;
   $224=((($223)+(1))|0);
   $225=(Math_imul($222,$224)|0);
   $226=$j;
   $227=((($226)+($225))|0);
   $j=$227;
   $228=$sfb;
   $229=$3;
   $230=(($229+4872)|0);
   $231=(($230+($228<<2))|0);
   $232=((HEAP32[(($231)>>2)])|0);
   $233=(((-$232))|0);
   $l=$233;
   while(1) {
    $235=$l;
    $236=($235|0)<0;
    if (!($236)) {
     break;
    }
    $238=$amp1;
    $239=$j;
    $240=$l;
    $241=((($239)+($240))|0);
    $242=$4;
    $243=(($242+($241<<2))|0);
    $244=(+(HEAPF32[(($243)>>2)]));
    $245=($244)*($238);
    HEAPF32[(($243)>>2)]=$245;
    $246=$j;
    $247=$l;
    $248=((($246)+($247))|0);
    $249=$4;
    $250=(($249+($248<<2))|0);
    $251=(+(HEAPF32[(($250)>>2)]));
    $252=$3;
    $253=(($252+4764)|0);
    $254=(+(HEAPF32[(($253)>>2)]));
    $255=$251>$254;
    if ($255) {
     $257=$j;
     $258=$l;
     $259=((($257)+($258))|0);
     $260=$4;
     $261=(($260+($259<<2))|0);
     $262=(+(HEAPF32[(($261)>>2)]));
     $263=$3;
     $264=(($263+4764)|0);
     HEAPF32[(($264)>>2)]=$262;
    }
    $267=$l;
    $268=((($267)+(1))|0);
    $l=$268;
   }
  }
  $271=$window;
  $272=((($271)+(1))|0);
  $window=$272;
 }
 if ((label|0) == 25) {
  $1=1;
  $275=$1;
  STACKTOP=sp;return (($275)|0);
 }
 else if ((label|0) == 46) {
  $1=0;
  $275=$1;
  STACKTOP=sp;return (($275)|0);
 }
  return 0;
}


function _get_klemm_noise($distort,$gi){
 $distort=($distort)|0;
 $gi=($gi)|0;
 var $1=0,$2=0,$sfb=0,$klemm_noise=.0,$4=0,$5=0,$6=0,$7=0,$8=0,$10=0,$11=0,$12=0,$13=.0,$14=.0,$15=.0,$16=.0,$17=.0,$19=0,$20=0,$22=.0;
 var $23=0,$26=.0,$28=.0,label=0;
 var sp=0;sp=STACKTOP;




 $1=$distort;
 $2=$gi;
 $klemm_noise=1.0e-37;
 $sfb=0;
 while(1) {
  $4=$sfb;
  $5=$2;
  $6=(($5+4864)|0);
  $7=((HEAP32[(($6)>>2)])|0);
  $8=($4|0)<($7|0);
  if (!($8)) {
   break;
  }
  $10=$sfb;
  $11=$1;
  $12=(($11+($10<<2))|0);
  $13=(+(HEAPF32[(($12)>>2)]));
  $14=$13;
  $15=(+(_penalties($14)));
  $16=$klemm_noise;
  $17=($16)+($15);
  $klemm_noise=$17;
  $19=$sfb;
  $20=((($19)+(1))|0);
  $sfb=$20;
 }
 $22=$klemm_noise;
 $23=(1.0e-20)>$22;
 if ($23) {
  $28=1.0e-20;

  STACKTOP=sp;return (+($28));
 } else {
  $26=$klemm_noise;
  $28=$26;

  STACKTOP=sp;return (+($28));
 }
  return .0;
}


function _penalties($noise){
 $noise=+($noise);
 var $1=.0,$2=.0,$3=.0,$4=.0,$5=.0,$6=.0,$7=.0,$8=.0,$9=.0,$10=.0,$11=.0,$12=.0,label=0;
 var sp=0;sp=STACKTOP;

 $1=$noise;
 $2=$1;
 $3=((0.632))*($2);
 $4=$1;
 $5=($3)*($4);
 $6=$1;
 $7=($5)*($6);
 $8=((0.368))+($7);
 $9=$8;
 $10=(+(_fast_log2($9)));
 $11=$10;
 $12=($11)*((0.30102999566398114));
 STACKTOP=sp;return (+($12));
}


function _ResvFrameBegin($gfc,$mean_bits){
 $gfc=($gfc)|0;
 $mean_bits=($mean_bits)|0;
 var $1=0,$2=0,$cfg=0,$esv=0,$fullFrameBits=0,$resvLimit=0,$maxmp3buf=0,$l3_side=0,$frameLength=0,$meanBits=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0;
 var $13=0,$14=0,$15=0,$16=0,$17=0,$18=0,$19=0,$20=0,$21=0,$22=0,$23=0,$24=0,$25=0,$26=0,$27=0,$28=0,$29=0,$30=0,$31=0,$32=0;
 var $33=0,$34=0,$35=0,$36=0,$37=0,$38=0,$40=0,$41=0,$42=0,$44=0,$45=0,$46=0,$47=0,$49=0,$50=0,$51=0,$52=0,$54=0,$55=0,$57=0;
 var $58=0,$59=0,$60=0,$61=0,$62=0,$63=0,$64=0,$65=0,$66=0,$67=0,$68=0,$70=0,$71=0,$72=0,$74=0,$75=0,$76=0,$78=0,$79=0,$80=0;
 var $81=0,$82=0,$84=0,$86=0,$87=0,$88=0,$89=0,$90=0,$91=0,$93=0,$94=0,$95=0,$96=0,$97=0,$98=0,$99=0,$100=0,$101=0,$102=0,$103=0;
 var $104=0,$105=0,$107=0,$108=0,$109=0,label=0;
 var sp=0;sp=STACKTOP;










 $1=$gfc;
 $2=$mean_bits;
 $3=$1;
 $4=(($3+16)|0);
 $cfg=$4;
 $5=$1;
 $6=(($5+27824)|0);
 $esv=$6;
 $7=$1;
 $8=(($7+304)|0);
 $l3_side=$8;
 $9=$1;
 $10=((_getframebits($9))|0);
 $frameLength=$10;
 $11=$frameLength;
 $12=$cfg;
 $13=(($12+8)|0);
 $14=((HEAP32[(($13)>>2)])|0);
 $15=($14<<3);
 $16=((($11)-($15))|0);
 $17=$cfg;
 $18=(($17+60)|0);
 $19=((HEAP32[(($18)>>2)])|0);
 $20=(((($16|0))/(($19|0)))&-1);
 $meanBits=$20;
 $21=$cfg;
 $22=(($21+60)|0);
 $23=((HEAP32[(($22)>>2)])|0);
 $24=($23<<11);
 $25=((($24)-(8))|0);
 $resvLimit=$25;
 $26=$cfg;
 $27=(($26+132)|0);
 $28=((HEAP32[(($27)>>2)])|0);
 $maxmp3buf=$28;
 $29=$maxmp3buf;
 $30=$frameLength;
 $31=((($29)-($30))|0);
 $32=$esv;
 $33=(($32+24320)|0);
 HEAP32[(($33)>>2)]=$31;
 $34=$esv;
 $35=(($34+24320)|0);
 $36=((HEAP32[(($35)>>2)])|0);
 $37=$resvLimit;
 $38=($36|0)>($37|0);
 if ($38) {
  $40=$resvLimit;
  $41=$esv;
  $42=(($41+24320)|0);
  HEAP32[(($42)>>2)]=$40;
 }
 $44=$esv;
 $45=(($44+24320)|0);
 $46=((HEAP32[(($45)>>2)])|0);
 $47=($46|0)<0;
 if ($47) {
  label = 5;
 } else {
  $49=$cfg;
  $50=(($49+128)|0);
  $51=((HEAP32[(($50)>>2)])|0);
  $52=($51|0)!=0;
  if ($52) {
   label = 5;
  }
 }
 if ((label|0) == 5) {
  $54=$esv;
  $55=(($54+24320)|0);
  HEAP32[(($55)>>2)]=0;
 }
 $57=$meanBits;
 $58=$cfg;
 $59=(($58+60)|0);
 $60=((HEAP32[(($59)>>2)])|0);
 $61=(Math_imul($57,$60)|0);
 $62=$esv;
 $63=(($62+24316)|0);
 $64=((HEAP32[(($63)>>2)])|0);
 $65=$esv;
 $66=(($65+24320)|0);
 $67=((HEAP32[(($66)>>2)])|0);
 $68=($64|0)<($67|0);
 if ($68) {
  $70=$esv;
  $71=(($70+24316)|0);
  $72=((HEAP32[(($71)>>2)])|0);
  $78=$72;
 } else {
  $74=$esv;
  $75=(($74+24320)|0);
  $76=((HEAP32[(($75)>>2)])|0);
  $78=$76;
 }

 $79=((($61)+($78))|0);
 $fullFrameBits=$79;
 $80=$fullFrameBits;
 $81=$maxmp3buf;
 $82=($80|0)>($81|0);
 if ($82) {
  $84=$maxmp3buf;
  $fullFrameBits=$84;
 }
 $86=$l3_side;
 $87=(($86+21016)|0);
 HEAP32[(($87)>>2)]=0;
 $88=$1;
 $89=(($88+85804)|0);
 $90=((HEAP32[(($89)>>2)])|0);
 $91=($90|0)!=0;
 if (!($91)) {
  $107=$meanBits;
  $108=$2;
  HEAP32[(($108)>>2)]=$107;
  $109=$fullFrameBits;
  STACKTOP=sp;return (($109)|0);
 }
 $93=$meanBits;
 $94=(((($93|0))/(2))&-1);
 $95=$1;
 $96=(($95+85804)|0);
 $97=((HEAP32[(($96)>>2)])|0);
 $98=(($97+203484)|0);
 HEAP32[(($98)>>2)]=$94;
 $99=$esv;
 $100=(($99+24316)|0);
 $101=((HEAP32[(($100)>>2)])|0);
 $102=$1;
 $103=(($102+85804)|0);
 $104=((HEAP32[(($103)>>2)])|0);
 $105=(($104+203488)|0);
 HEAP32[(($105)>>2)]=$101;
 $107=$meanBits;
 $108=$2;
 HEAP32[(($108)>>2)]=$107;
 $109=$fullFrameBits;
 STACKTOP=sp;return (($109)|0);
}


function _ResvMaxBits($gfc,$mean_bits,$targ_bits,$extra_bits,$cbr){
 $gfc=($gfc)|0;
 $mean_bits=($mean_bits)|0;
 $targ_bits=($targ_bits)|0;
 $extra_bits=($extra_bits)|0;
 $cbr=($cbr)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$cfg=0,$esv=0,$add_bits=0,$targBits=0,$extraBits=0,$ResvSize=0,$ResvMax=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0;
 var $14=0,$15=0,$16=0,$17=0,$19=0,$20=0,$21=0,$23=0,$24=0,$25=0,$26=0,$27=0,$28=0,$30=0,$31=.0,$32=.0,$33=0,$35=0,$36=0,$37=0;
 var $38=0,$39=0,$40=0,$42=0,$43=0,$44=0,$45=0,$46=0,$47=0,$48=0,$49=0,$50=0,$51=0,$52=0,$53=0,$54=0,$56=0,$57=0,$58=0,$59=0;
 var $60=0,$61=0,$62=0,$63=0,$64=0,$66=0,$67=0,$68=0,$69=0,$70=0,$71=0,$73=0,$74=.0,$75=.0,$76=0,$77=.0,$78=.0,$79=0,$82=0,$83=0;
 var $84=0,$85=0,$86=0,$87=0,$88=0,$90=0,$92=0,$93=0,$94=0,$95=0,$96=0,$98=0,$99=0,$100=0,$101=0,$102=0,$103=0,$106=0,$107=0,$108=0;
 var $109=0,label=0;
 var sp=0;sp=STACKTOP;












 $1=$gfc;
 $2=$mean_bits;
 $3=$targ_bits;
 $4=$extra_bits;
 $5=$cbr;
 $6=$1;
 $7=(($6+16)|0);
 $cfg=$7;
 $8=$1;
 $9=(($8+27824)|0);
 $esv=$9;
 $10=$esv;
 $11=(($10+24316)|0);
 $12=((HEAP32[(($11)>>2)])|0);
 $ResvSize=$12;
 $13=$esv;
 $14=(($13+24320)|0);
 $15=((HEAP32[(($14)>>2)])|0);
 $ResvMax=$15;
 $16=$5;
 $17=($16|0)!=0;
 if ($17) {
  $19=$2;
  $20=$ResvSize;
  $21=((($20)+($19))|0);
  $ResvSize=$21;
 }
 $23=$1;
 $24=(($23+84768)|0);
 $25=(($24+328)|0);
 $26=((HEAP32[(($25)>>2)])|0);
 $27=$26&1;
 $28=($27|0)!=0;
 if ($28) {
  $30=$ResvMax;
  $31=(+((($30|0))|0));
  $32=($31)*((0.9));
  $33=(~~($32));
  $ResvMax=$33;
 }
 $35=$2;
 $targBits=$35;
 $36=$ResvSize;
 $37=((($36)*(10))&-1);
 $38=$ResvMax;
 $39=((($38)*(9))&-1);
 $40=($37|0)>($39|0);
 if ($40) {
  $42=$ResvSize;
  $43=$ResvMax;
  $44=((($43)*(9))&-1);
  $45=(((($44|0))/(10))&-1);
  $46=((($42)-($45))|0);
  $add_bits=$46;
  $47=$add_bits;
  $48=$targBits;
  $49=((($48)+($47))|0);
  $targBits=$49;
  $50=$1;
  $51=(($50+84768)|0);
  $52=(($51+328)|0);
  $53=((HEAP32[(($52)>>2)])|0);
  $54=$53|128;
  HEAP32[(($52)>>2)]=$54;
 } else {
  $add_bits=0;
  $56=$1;
  $57=(($56+84768)|0);
  $58=(($57+328)|0);
  $59=((HEAP32[(($58)>>2)])|0);
  $60=$59&127;
  HEAP32[(($58)>>2)]=$60;
  $61=$cfg;
  $62=(($61+128)|0);
  $63=((HEAP32[(($62)>>2)])|0);
  $64=($63|0)!=0;
  do {
   if (!($64)) {
    $66=$1;
    $67=(($66+84768)|0);
    $68=(($67+328)|0);
    $69=((HEAP32[(($68)>>2)])|0);
    $70=$69&1;
    $71=($70|0)!=0;
    if ($71) {
     break;
    }
    $73=$2;
    $74=(+((($73|0))|0));
    $75=((0.1))*($74);
    $76=$targBits;
    $77=(+((($76|0))|0));
    $78=($77)-($75);
    $79=(~~($78));
    $targBits=$79;
   }
  } while(0);
 }
 $82=$ResvSize;
 $83=$esv;
 $84=(($83+24320)|0);
 $85=((HEAP32[(($84)>>2)])|0);
 $86=((($85)*(6))&-1);
 $87=(((($86|0))/(10))&-1);
 $88=($82|0)<($87|0);
 if ($88) {
  $90=$ResvSize;
  $98=$90;
 } else {
  $92=$esv;
  $93=(($92+24320)|0);
  $94=((HEAP32[(($93)>>2)])|0);
  $95=((($94)*(6))&-1);
  $96=(((($95|0))/(10))&-1);
  $98=$96;
 }

 $extraBits=$98;
 $99=$add_bits;
 $100=$extraBits;
 $101=((($100)-($99))|0);
 $extraBits=$101;
 $102=$extraBits;
 $103=($102|0)<0;
 if (!($103)) {
  $106=$targBits;
  $107=$3;
  HEAP32[(($107)>>2)]=$106;
  $108=$extraBits;
  $109=$4;
  HEAP32[(($109)>>2)]=$108;
  STACKTOP=sp;return;
 }
 $extraBits=0;
 $106=$targBits;
 $107=$3;
 HEAP32[(($107)>>2)]=$106;
 $108=$extraBits;
 $109=$4;
 HEAP32[(($109)>>2)]=$108;
 STACKTOP=sp;return;
}


function _ResvAdjust($gfc,$gi){
 $gfc=($gfc)|0;
 $gi=($gi)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$14=0,label=0;
 var sp=0;sp=STACKTOP;


 $1=$gfc;
 $2=$gi;
 $3=$2;
 $4=(($3+4768)|0);
 $5=((HEAP32[(($4)>>2)])|0);
 $6=$2;
 $7=(($6+4844)|0);
 $8=((HEAP32[(($7)>>2)])|0);
 $9=((($5)+($8))|0);
 $10=$1;
 $11=(($10+27824)|0);
 $12=(($11+24316)|0);
 $13=((HEAP32[(($12)>>2)])|0);
 $14=((($13)-($9))|0);
 HEAP32[(($12)>>2)]=$14;
 STACKTOP=sp;return;
}


function _ResvFrameEnd($gfc,$mean_bits){
 $gfc=($gfc)|0;
 $mean_bits=($mean_bits)|0;
 var $1=0,$2=0,$cfg=0,$esv=0,$l3_side=0,$stuffingBits=0,$over_bits=0,$mdb_bytes=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$14=0;
 var $15=0,$16=0,$17=0,$18=0,$19=0,$20=0,$21=0,$22=0,$23=0,$24=0,$25=0,$26=0,$28=0,$29=0,$30=0,$32=0,$33=0,$34=0,$35=0,$36=0;
 var $37=0,$38=0,$39=0,$40=0,$41=0,$42=0,$44=0,$45=0,$46=0,$48=0,$49=0,$50=0,$51=0,$52=0,$53=0,$55=0,$56=0,$57=0,$58=0,$60=0;
 var $62=0,$63=0,$64=0,$65=0,$66=0,$67=0,$68=0,$69=0,$70=0,$71=0,$72=0,$73=0,$74=0,$75=0,$76=0,$77=0,$78=0,$79=0,$80=0,$81=0;
 var $82=0,$83=0,$84=0,$85=0,$86=0,$87=0,$88=0,$89=0,$90=0,$91=0,$92=0,$93=0,$94=0,label=0;
 var sp=0;sp=STACKTOP;








 $1=$gfc;
 $2=$mean_bits;
 $3=$1;
 $4=(($3+16)|0);
 $cfg=$4;
 $5=$1;
 $6=(($5+27824)|0);
 $esv=$6;
 $7=$1;
 $8=(($7+304)|0);
 $l3_side=$8;
 $9=$2;
 $10=$cfg;
 $11=(($10+60)|0);
 $12=((HEAP32[(($11)>>2)])|0);
 $13=(Math_imul($9,$12)|0);
 $14=$esv;
 $15=(($14+24316)|0);
 $16=((HEAP32[(($15)>>2)])|0);
 $17=((($16)+($13))|0);
 HEAP32[(($15)>>2)]=$17;
 $stuffingBits=0;
 $18=$l3_side;
 $19=(($18+21020)|0);
 HEAP32[(($19)>>2)]=0;
 $20=$l3_side;
 $21=(($20+21016)|0);
 HEAP32[(($21)>>2)]=0;
 $22=$esv;
 $23=(($22+24316)|0);
 $24=((HEAP32[(($23)>>2)])|0);
 $25=(((($24|0))%(8))&-1);
 $over_bits=$25;
 $26=($25|0)!=0;
 if ($26) {
  $28=$over_bits;
  $29=$stuffingBits;
  $30=((($29)+($28))|0);
  $stuffingBits=$30;
 }
 $32=$esv;
 $33=(($32+24316)|0);
 $34=((HEAP32[(($33)>>2)])|0);
 $35=$stuffingBits;
 $36=((($34)-($35))|0);
 $37=$esv;
 $38=(($37+24320)|0);
 $39=((HEAP32[(($38)>>2)])|0);
 $40=((($36)-($39))|0);
 $over_bits=$40;
 $41=$over_bits;
 $42=($41|0)>0;
 if ($42) {
  $44=$over_bits;
  $45=$stuffingBits;
  $46=((($45)+($44))|0);
  $stuffingBits=$46;
 }
 $48=$l3_side;
 $49=(($48+21008)|0);
 $50=((HEAP32[(($49)>>2)])|0);
 $51=($50<<3);
 $52=$stuffingBits;
 $53=($51|0)<($52|0);
 if ($53) {
  $55=$l3_side;
  $56=(($55+21008)|0);
  $57=((HEAP32[(($56)>>2)])|0);
  $58=($57<<3);
  $62=$58;
 } else {
  $60=$stuffingBits;
  $62=$60;
 }

 $63=(((($62|0))/(8))&-1);
 $mdb_bytes=$63;
 $64=$mdb_bytes;
 $65=($64<<3);
 $66=$l3_side;
 $67=(($66+21016)|0);
 $68=((HEAP32[(($67)>>2)])|0);
 $69=((($68)+($65))|0);
 HEAP32[(($67)>>2)]=$69;
 $70=$mdb_bytes;
 $71=($70<<3);
 $72=$stuffingBits;
 $73=((($72)-($71))|0);
 $stuffingBits=$73;
 $74=$mdb_bytes;
 $75=($74<<3);
 $76=$esv;
 $77=(($76+24316)|0);
 $78=((HEAP32[(($77)>>2)])|0);
 $79=((($78)-($75))|0);
 HEAP32[(($77)>>2)]=$79;
 $80=$mdb_bytes;
 $81=$l3_side;
 $82=(($81+21008)|0);
 $83=((HEAP32[(($82)>>2)])|0);
 $84=((($83)-($80))|0);
 HEAP32[(($82)>>2)]=$84;
 $85=$stuffingBits;
 $86=$l3_side;
 $87=(($86+21020)|0);
 $88=((HEAP32[(($87)>>2)])|0);
 $89=((($88)+($85))|0);
 HEAP32[(($87)>>2)]=$89;
 $90=$stuffingBits;
 $91=$esv;
 $92=(($91+24316)|0);
 $93=((HEAP32[(($92)>>2)])|0);
 $94=((($93)-($90))|0);
 HEAP32[(($92)>>2)]=$94;
 STACKTOP=sp;return;
}


function _noquant_count_bits($gfc,$gi,$prev_noise){
 $gfc=($gfc)|0;
 $gi=($gi)|0;
 $prev_noise=($prev_noise)|0;
 var $1=0,$2=0,$3=0,$4=0,$cfg=0,$bits=0,$i=0,$a1=0,$a2=0,$ix=0,$x4=0,$x3=0,$x2=0,$x1=0,$p=0,$sfb=0,$5=0,$6=0,$7=0,$8=0;
 var $9=0,$10=0,$11=0,$12=0,$13=0,$14=0,$15=0,$16=0,$19=0,$20=0,$21=0,$22=0,$23=0,$24=0,$26=0,$27=0,$28=0,$30=0,$31=0,$34=0;
 var $35=0,$37=0,$38=0,$39=0,$40=0,$41=0,$42=0,$43=0,$44=0,$45=0,$46=0,$47=0,$48=0,$52=0,$53=0,$55=0,$56=0,$57=0,$59=0,$60=0;
 var $62=0,$63=0,$64=0,$65=0,$66=0,$67=0,$68=0,$69=0,$70=0,$71=0,$72=0,$73=0,$74=0,$75=0,$76=0,$77=0,$78=0,$79=0,$80=0,$81=0;
 var $82=0,$83=0,$84=0,$85=0,$86=0,$87=0,$88=0,$89=0,$92=0,$93=0,$94=0,$95=0,$96=0,$97=0,$98=0,$99=0,$100=0,$101=0,$102=0,$103=0;
 var $104=0,$105=0,$106=0,$107=0,$108=0,$109=0,$110=0,$111=0,$112=0,$113=0,$115=0,$116=0,$118=0,$119=0,$120=0,$121=0,$122=0,$123=0,$125=0,$126=0;
 var $127=0,$129=0,$130=0,$131=0,$132=0,$133=0,$134=0,$135=0,$136=0,$138=0,$140=0,$141=0,$142=0,$143=0,$145=0,$146=0,$147=0,$148=0,$149=0,$150=0;
 var $151=0,$152=0,$153=0,$154=0,$155=0,$157=0,$158=0,$159=0,$161=0,$162=0,$163=0,$165=0,$166=0,$167=0,$168=0,$170=0,$171=0,$172=0,$173=0,$174=0;
 var $175=0,$176=0,$177=0,$178=0,$179=0,$180=0,$181=0,$182=0,$183=0,$184=0,$185=0,$186=0,$187=0,$188=0,$189=0,$190=0,$191=0,$192=0,$193=0,$194=0;
 var $195=0,$196=0,$197=0,$198=0,$199=0,$200=0,$201=0,$202=0,$203=0,$204=0,$205=0,$206=0,$207=0,$208=0,$210=0,$211=0,$212=0,$213=0,$214=0,$215=0;
 var $216=0,$217=0,$218=0,$219=0,$220=0,$221=0,$222=0,$225=0,$226=0,$227=0,$228=0,$229=0,$230=0,$231=0,$232=0,$233=0,$234=0,$235=0,$236=0,$237=0;
 var $239=0,$243=0,$244=0,$245=0,$247=0,$249=0,$251=0,$252=0,$253=0,$254=0,$256=0,$258=0,$260=0,$261=0,$262=0,$264=0,$265=0,$266=0,$267=0,$268=0;
 var $269=0,$270=0,$271=0,$272=0,$273=0,$274=0,$276=0,$277=0,$278=0,$280=0,$281=0,$282=0,$283=0,$284=0,$285=0,$286=0,$287=0,$288=0,$289=0,$290=0;
 var $291=0,$292=0,$294=0,$295=0,$296=0,$297=0,$299=0,$300=0,$301=0,$302=0,$303=0,$304=0,$305=0,$306=0,$308=0,$309=0,$311=0,$312=0,$313=0,$314=0;
 var $317=0,$318=0,$319=0,$320=0,$321=0,$322=0,$323=0,$324=0,$325=0,$326=0,$328=0,$329=0,$331=0,$332=0,$333=0,$336=0,$338=0,label=0;
 var sp=0;sp=STACKTOP;STACKTOP=(STACKTOP+8)|0;





 $bits=((sp)|0);










 $2=$gfc;
 $3=$gi;
 $4=$prev_noise;
 $5=$2;
 $6=(($5+16)|0);
 $cfg=$6;
 HEAP32[(($bits)>>2)]=0;
 $7=$3;
 $8=(($7+2304)|0);
 $9=(($8)|0);
 $ix=$9;
 $10=$3;
 $11=(($10+5208)|0);
 $12=((HEAP32[(($11)>>2)])|0);
 $13=((($12)+(2))|0);
 $14=$13>>1;
 $15=$14<<1;
 $16=576<($15|0);
 if ($16) {
  $26=576;
 } else {
  $19=$3;
  $20=(($19+5208)|0);
  $21=((HEAP32[(($20)>>2)])|0);
  $22=((($21)+(2))|0);
  $23=$22>>1;
  $24=$23<<1;
  $26=$24;
 }

 $i=$26;
 $27=$4;
 $28=($27|0)!=0;
 if ($28) {
  $30=$4;
  $31=(($30+4)|0);
  HEAP32[(($31)>>2)]=0;
 }
 while(1) {
  $34=$i;
  $35=($34|0)>1;
  if (!($35)) {
   break;
  }
  $37=$i;
  $38=((($37)-(1))|0);
  $39=$ix;
  $40=(($39+($38<<2))|0);
  $41=((HEAP32[(($40)>>2)])|0);
  $42=$i;
  $43=((($42)-(2))|0);
  $44=$ix;
  $45=(($44+($43<<2))|0);
  $46=((HEAP32[(($45)>>2)])|0);
  $47=$41|$46;
  $48=($47|0)!=0;
  if ($48) {
   label = 9;
   break;
  }
  $52=$i;
  $53=((($52)-(2))|0);
  $i=$53;
 }
 if ((label|0) == 9) {
 }
 $55=$i;
 $56=$3;
 $57=(($56+4776)|0);
 HEAP32[(($57)>>2)]=$55;
 $a2=0;
 $a1=0;
 while(1) {
  $59=$i;
  $60=($59|0)>3;
  if (!($60)) {
   break;
  }
  $62=$i;
  $63=((($62)-(4))|0);
  $64=$ix;
  $65=(($64+($63<<2))|0);
  $66=((HEAP32[(($65)>>2)])|0);
  $x4=$66;
  $67=$i;
  $68=((($67)-(3))|0);
  $69=$ix;
  $70=(($69+($68<<2))|0);
  $71=((HEAP32[(($70)>>2)])|0);
  $x3=$71;
  $72=$i;
  $73=((($72)-(2))|0);
  $74=$ix;
  $75=(($74+($73<<2))|0);
  $76=((HEAP32[(($75)>>2)])|0);
  $x2=$76;
  $77=$i;
  $78=((($77)-(1))|0);
  $79=$ix;
  $80=(($79+($78<<2))|0);
  $81=((HEAP32[(($80)>>2)])|0);
  $x1=$81;
  $82=$x4;
  $83=$x3;
  $84=$82|$83;
  $85=$x2;
  $86=$84|$85;
  $87=$x1;
  $88=$86|$87;
  $89=($88>>>0)>((1)>>>0);
  if ($89) {
   label = 15;
   break;
  }
  $92=$x4;
  $93=($92<<1);
  $94=$x3;
  $95=((($93)+($94))|0);
  $96=($95<<1);
  $97=$x2;
  $98=((($96)+($97))|0);
  $99=($98<<1);
  $100=$x1;
  $101=((($99)+($100))|0);
  $p=$101;
  $102=$p;
  $103=((2872+$102)|0);
  $104=((HEAP8[($103)])|0);
  $105=($104&255);
  $106=$a1;
  $107=((($106)+($105))|0);
  $a1=$107;
  $108=$p;
  $109=((2824+$108)|0);
  $110=((HEAP8[($109)])|0);
  $111=($110&255);
  $112=$a2;
  $113=((($112)+($111))|0);
  $a2=$113;
  $115=$i;
  $116=((($115)-(4))|0);
  $i=$116;
 }
 if ((label|0) == 15) {
 }
 $118=$a1;
 HEAP32[(($bits)>>2)]=$118;
 $119=$3;
 $120=(($119+4840)|0);
 HEAP32[(($120)>>2)]=0;
 $121=$a1;
 $122=$a2;
 $123=($121|0)>($122|0);
 if ($123) {
  $125=$a2;
  HEAP32[(($bits)>>2)]=$125;
  $126=$3;
  $127=(($126+4840)|0);
  HEAP32[(($127)>>2)]=1;
 }
 $129=((HEAP32[(($bits)>>2)])|0);
 $130=$3;
 $131=(($130+5184)|0);
 HEAP32[(($131)>>2)]=$129;
 $132=$i;
 $133=$3;
 $134=(($133+4772)|0);
 HEAP32[(($134)>>2)]=$132;
 $135=$i;
 $136=($135|0)==0;
 if ($136) {
  $138=((HEAP32[(($bits)>>2)])|0);
  $1=$138;
  $338=$1;
  STACKTOP=sp;return (($338)|0);
 }
 $140=$3;
 $141=(($140+4788)|0);
 $142=((HEAP32[(($141)>>2)])|0);
 $143=($142|0)==2;
 if ($143) {
  $145=$2;
  $146=(($145+21360)|0);
  $147=(($146+92)|0);
  $148=(($147+12)|0);
  $149=((HEAP32[(($148)>>2)])|0);
  $150=((($149)*(3))&-1);
  $a1=$150;
  $151=$a1;
  $152=$3;
  $153=(($152+4772)|0);
  $154=((HEAP32[(($153)>>2)])|0);
  $155=($151|0)>($154|0);
  if ($155) {
   $157=$3;
   $158=(($157+4772)|0);
   $159=((HEAP32[(($158)>>2)])|0);
   $a1=$159;
  }
  $161=$3;
  $162=(($161+4772)|0);
  $163=((HEAP32[(($162)>>2)])|0);
  $a2=$163;
 } else {
  $165=$3;
  $166=(($165+4788)|0);
  $167=((HEAP32[(($166)>>2)])|0);
  $168=($167|0)==0;
  if ($168) {
   $170=$i;
   $171=((($170)-(2))|0);
   $172=$2;
   $173=(($172+84768)|0);
   $174=(($173+332)|0);
   $175=(($174+$171)|0);
   $176=((HEAP8[($175)])|0);
   $177=(($176<<24)>>24);
   $178=$3;
   $179=(($178+4824)|0);
   HEAP32[(($179)>>2)]=$177;
   $a1=$177;
   $180=$i;
   $181=((($180)-(1))|0);
   $182=$2;
   $183=(($182+84768)|0);
   $184=(($183+332)|0);
   $185=(($184+$181)|0);
   $186=((HEAP8[($185)])|0);
   $187=(($186<<24)>>24);
   $188=$3;
   $189=(($188+4828)|0);
   HEAP32[(($189)>>2)]=$187;
   $a2=$187;
   $190=$a1;
   $191=$a2;
   $192=((($190)+($191))|0);
   $193=((($192)+(2))|0);
   $194=$2;
   $195=(($194+21360)|0);
   $196=(($195)|0);
   $197=(($196+($193<<2))|0);
   $198=((HEAP32[(($197)>>2)])|0);
   $a2=$198;
   $199=$a1;
   $200=((($199)+(1))|0);
   $201=$2;
   $202=(($201+21360)|0);
   $203=(($202)|0);
   $204=(($203+($200<<2))|0);
   $205=((HEAP32[(($204)>>2)])|0);
   $a1=$205;
   $206=$a2;
   $207=$i;
   $208=($206|0)<($207|0);
   if ($208) {
    $210=$2;
    $211=(($210+85816)|0);
    $212=((HEAP32[(($211)>>2)])|0);
    $213=$ix;
    $214=$a2;
    $215=(($213+($214<<2))|0);
    $216=$ix;
    $217=$i;
    $218=(($216+($217<<2))|0);
    $219=((FUNCTION_TABLE_iiii[($212)&3]($215,$218,$bits))|0);
    $220=$3;
    $221=(($220+4796)|0);
    $222=(($221+8)|0);
    HEAP32[(($222)>>2)]=$219;
   }
  } else {
   $225=$3;
   $226=(($225+4824)|0);
   HEAP32[(($226)>>2)]=7;
   $227=$3;
   $228=(($227+4828)|0);
   HEAP32[(($228)>>2)]=13;
   $229=$2;
   $230=(($229+21360)|0);
   $231=(($230)|0);
   $232=(($231+32)|0);
   $233=((HEAP32[(($232)>>2)])|0);
   $a1=$233;
   $234=$i;
   $a2=$234;
   $235=$a1;
   $236=$a2;
   $237=($235|0)>($236|0);
   if ($237) {
    $239=$a2;
    $a1=$239;
   }
  }
 }
 $243=$a1;
 $244=$i;
 $245=($243|0)<($244|0);
 if ($245) {
  $247=$a1;
  $251=$247;
 } else {
  $249=$i;
  $251=$249;
 }

 $a1=$251;
 $252=$a2;
 $253=$i;
 $254=($252|0)<($253|0);
 if ($254) {
  $256=$a2;
  $260=$256;
 } else {
  $258=$i;
  $260=$258;
 }

 $a2=$260;
 $261=$a1;
 $262=0<($261|0);
 if ($262) {
  $264=$2;
  $265=(($264+85816)|0);
  $266=((HEAP32[(($265)>>2)])|0);
  $267=$ix;
  $268=$ix;
  $269=$a1;
  $270=(($268+($269<<2))|0);
  $271=((FUNCTION_TABLE_iiii[($266)&3]($267,$270,$bits))|0);
  $272=$3;
  $273=(($272+4796)|0);
  $274=(($273)|0);
  HEAP32[(($274)>>2)]=$271;
 }
 $276=$a1;
 $277=$a2;
 $278=($276|0)<($277|0);
 if ($278) {
  $280=$2;
  $281=(($280+85816)|0);
  $282=((HEAP32[(($281)>>2)])|0);
  $283=$ix;
  $284=$a1;
  $285=(($283+($284<<2))|0);
  $286=$ix;
  $287=$a2;
  $288=(($286+($287<<2))|0);
  $289=((FUNCTION_TABLE_iiii[($282)&3]($285,$288,$bits))|0);
  $290=$3;
  $291=(($290+4796)|0);
  $292=(($291+4)|0);
  HEAP32[(($292)>>2)]=$289;
 }
 $294=$cfg;
 $295=(($294+20)|0);
 $296=((HEAP32[(($295)>>2)])|0);
 $297=($296|0)==2;
 if ($297) {
  $299=((HEAP32[(($bits)>>2)])|0);
  $300=$3;
  $301=(($300+4768)|0);
  HEAP32[(($301)>>2)]=$299;
  $302=$2;
  $303=$3;
  _best_huffman_divide($302,$303);
  $304=$3;
  $305=(($304+4768)|0);
  $306=((HEAP32[(($305)>>2)])|0);
  HEAP32[(($bits)>>2)]=$306;
 }
 $308=$4;
 $309=($308|0)!=0;
 if ($309) {
  $311=$3;
  $312=(($311+4788)|0);
  $313=((HEAP32[(($312)>>2)])|0);
  $314=($313|0)==0;
  if ($314) {
   $sfb=0;
   while(1) {
    $317=$sfb;
    $318=$2;
    $319=(($318+21360)|0);
    $320=(($319)|0);
    $321=(($320+($317<<2))|0);
    $322=((HEAP32[(($321)>>2)])|0);
    $323=$3;
    $324=(($323+4772)|0);
    $325=((HEAP32[(($324)>>2)])|0);
    $326=($322|0)<($325|0);
    if (!($326)) {
     break;
    }
    $328=$sfb;
    $329=((($328)+(1))|0);
    $sfb=$329;
   }
   $331=$sfb;
   $332=$4;
   $333=(($332+4)|0);
   HEAP32[(($333)>>2)]=$331;
  }
 }
 $336=((HEAP32[(($bits)>>2)])|0);
 $1=$336;
 $338=$1;
 STACKTOP=sp;return (($338)|0);
}


function _best_huffman_divide($gfc,$gi){
 $gfc=($gfc)|0;
 $gi=($gi)|0;
 var $1=0,$2=0,$cfg=0,$i=0,$a1=0,$a2=0,$cod_info2=0,$ix=0,$r01_bits=0,$r01_div=0,$r0_tbl=0,$r1_tbl=0,$p=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0;
 var $10=0,$11=0,$13=0,$14=0,$15=0,$16=0,$19=0,$20=0,$21=0,$22=0,$23=0,$24=0,$25=0,$27=0,$28=0,$29=0,$30=0,$31=0,$32=0,$33=0;
 var $34=0,$35=0,$36=0,$37=0,$38=0,$39=0,$40=0,$42=0,$43=0,$44=0,$45=0,$47=0,$48=0,$49=0,$50=0,$51=0,$52=0,$53=0,$54=0,$55=0;
 var $56=0,$57=0,$58=0,$61=0,$62=0,$63=0,$64=0,$65=0,$66=0,$69=0,$70=0,$71=0,$72=0,$73=0,$75=0,$76=0,$77=0,$78=0,$80=0,$81=0;
 var $82=0,$83=0,$84=0,$85=0,$86=0,$87=0,$88=0,$89=0,$90=0,$91=0,$92=0,$93=0,$94=0,$95=0,$96=0,$97=0,$98=0,$99=0,$100=0,$101=0;
 var $102=0,$103=0,$104=0,$105=0,$106=0,$107=0,$108=0,$109=0,$110=0,$111=0,$112=0,$113=0,$114=0,$115=0,$116=0,$117=0,$119=0,$120=0,$122=0,$123=0;
 var $124=0,$125=0,$126=0,$127=0,$129=0,$130=0,$132=0,$133=0,$134=0,$135=0,$136=0,$138=0,$139=0,$140=0,$141=0,$142=0,$143=0,$144=0,$146=0,$147=0;
 var $148=0,$149=0,$150=0,$151=0,$152=0,$153=0,$154=0,$155=0,$157=0,$159=0,$160=0,$162=0,$163=0,$164=0,$165=0,$166=0,$167=0,$168=0,$169=0,$170=0;
 var $171=0,$172=0,$174=0,$175=0,$176=0,$178=0,$179=0,$180=0,$181=0,$182=0,$183=0,$184=0,$185=0,$186=0,$187=0,$188=0,$189=0,$190=0,$192=0,$193=0;
 var $194=0,$195=0,$196=0,$197=0,$199=0,$200=0,$201=0,label=0;
 var sp=0;sp=STACKTOP;STACKTOP=(STACKTOP+5640)|0;






 $cod_info2=((sp)|0);

 $r01_bits=(((sp)+(5256))|0);
 $r01_div=(((sp)+(5352))|0);
 $r0_tbl=(((sp)+(5448))|0);
 $r1_tbl=(((sp)+(5544))|0);

 $1=$gfc;
 $2=$gi;
 $3=$1;
 $4=(($3+16)|0);
 $cfg=$4;
 $5=$2;
 $6=(($5+2304)|0);
 $7=(($6)|0);
 $ix=$7;
 $8=$2;
 $9=(($8+4788)|0);
 $10=((HEAP32[(($9)>>2)])|0);
 $11=($10|0)==2;
 do {
  if ($11) {
   $13=$cfg;
   $14=(($13+60)|0);
   $15=((HEAP32[(($14)>>2)])|0);
   $16=($15|0)==1;
   if (!($16)) {
    break;
   }
   STACKTOP=sp;return;
  }
 } while(0);
 $19=$cod_info2;
 $20=$2;
 $21=$20;
 (_memcpy((($19)|0), (($21)|0), 5252)|0);
 $22=$2;
 $23=(($22+4788)|0);
 $24=((HEAP32[(($23)>>2)])|0);
 $25=($24|0)==0;
 if ($25) {
  $27=$1;
  $28=$2;
  $29=$ix;
  $30=(($r01_bits)|0);
  $31=(($r01_div)|0);
  $32=(($r0_tbl)|0);
  $33=(($r1_tbl)|0);
  _recalc_divide_init($27,$28,$29,$30,$31,$32,$33);
  $34=$1;
  $35=$2;
  $36=$ix;
  $37=(($r01_bits)|0);
  $38=(($r01_div)|0);
  $39=(($r0_tbl)|0);
  $40=(($r1_tbl)|0);
  _recalc_divide_sub($34,$cod_info2,$35,$36,$37,$38,$39,$40);
 }
 $42=(($cod_info2+4772)|0);
 $43=((HEAP32[(($42)>>2)])|0);
 $i=$43;
 $44=$i;
 $45=($44|0)==0;
 do {
  if (!($45)) {
   $47=$i;
   $48=((($47)-(2))|0);
   $49=$ix;
   $50=(($49+($48<<2))|0);
   $51=((HEAP32[(($50)>>2)])|0);
   $52=$i;
   $53=((($52)-(1))|0);
   $54=$ix;
   $55=(($54+($53<<2))|0);
   $56=((HEAP32[(($55)>>2)])|0);
   $57=$51|$56;
   $58=($57>>>0)>((1)>>>0);
   if ($58) {
    break;
   }
   $61=$2;
   $62=(($61+4776)|0);
   $63=((HEAP32[(($62)>>2)])|0);
   $64=((($63)+(2))|0);
   $i=$64;
   $65=$i;
   $66=($65|0)>576;
   if ($66) {
    STACKTOP=sp;return;
   }
   $69=$cod_info2;
   $70=$2;
   $71=$70;
   (_memcpy((($69)|0), (($71)|0), 5252)|0);
   $72=$i;
   $73=(($cod_info2+4776)|0);
   HEAP32[(($73)>>2)]=$72;
   $a2=0;
   $a1=0;
   while(1) {
    $75=$i;
    $76=(($cod_info2+4772)|0);
    $77=((HEAP32[(($76)>>2)])|0);
    $78=($75|0)>($77|0);
    if (!($78)) {
     break;
    }
    $80=$i;
    $81=((($80)-(4))|0);
    $82=$ix;
    $83=(($82+($81<<2))|0);
    $84=((HEAP32[(($83)>>2)])|0);
    $85=($84<<1);
    $86=$i;
    $87=((($86)-(3))|0);
    $88=$ix;
    $89=(($88+($87<<2))|0);
    $90=((HEAP32[(($89)>>2)])|0);
    $91=((($85)+($90))|0);
    $92=($91<<1);
    $93=$i;
    $94=((($93)-(2))|0);
    $95=$ix;
    $96=(($95+($94<<2))|0);
    $97=((HEAP32[(($96)>>2)])|0);
    $98=((($92)+($97))|0);
    $99=($98<<1);
    $100=$i;
    $101=((($100)-(1))|0);
    $102=$ix;
    $103=(($102+($101<<2))|0);
    $104=((HEAP32[(($103)>>2)])|0);
    $105=((($99)+($104))|0);
    $p=$105;
    $106=$p;
    $107=((2872+$106)|0);
    $108=((HEAP8[($107)])|0);
    $109=($108&255);
    $110=$a1;
    $111=((($110)+($109))|0);
    $a1=$111;
    $112=$p;
    $113=((2824+$112)|0);
    $114=((HEAP8[($113)])|0);
    $115=($114&255);
    $116=$a2;
    $117=((($116)+($115))|0);
    $a2=$117;
    $119=$i;
    $120=((($119)-(4))|0);
    $i=$120;
   }
   $122=$i;
   $123=(($cod_info2+4772)|0);
   HEAP32[(($123)>>2)]=$122;
   $124=(($cod_info2+4840)|0);
   HEAP32[(($124)>>2)]=0;
   $125=$a1;
   $126=$a2;
   $127=($125|0)>($126|0);
   if ($127) {
    $129=$a2;
    $a1=$129;
    $130=(($cod_info2+4840)|0);
    HEAP32[(($130)>>2)]=1;
   }
   $132=$a1;
   $133=(($cod_info2+5184)|0);
   HEAP32[(($133)>>2)]=$132;
   $134=(($cod_info2+4788)|0);
   $135=((HEAP32[(($134)>>2)])|0);
   $136=($135|0)==0;
   if ($136) {
    $138=$1;
    $139=$2;
    $140=$ix;
    $141=(($r01_bits)|0);
    $142=(($r01_div)|0);
    $143=(($r0_tbl)|0);
    $144=(($r1_tbl)|0);
    _recalc_divide_sub($138,$cod_info2,$139,$140,$141,$142,$143,$144);
    STACKTOP=sp;return;
   }
   $146=$a1;
   $147=(($cod_info2+4768)|0);
   HEAP32[(($147)>>2)]=$146;
   $148=$1;
   $149=(($148+21360)|0);
   $150=(($149)|0);
   $151=(($150+32)|0);
   $152=((HEAP32[(($151)>>2)])|0);
   $a1=$152;
   $153=$a1;
   $154=$i;
   $155=($153|0)>($154|0);
   if ($155) {
    $157=$i;
    $a1=$157;
   }
   $159=$a1;
   $160=($159|0)>0;
   if ($160) {
    $162=$1;
    $163=(($162+85816)|0);
    $164=((HEAP32[(($163)>>2)])|0);
    $165=$ix;
    $166=$ix;
    $167=$a1;
    $168=(($166+($167<<2))|0);
    $169=(($cod_info2+4768)|0);
    $170=((FUNCTION_TABLE_iiii[($164)&3]($165,$168,$169))|0);
    $171=(($cod_info2+4796)|0);
    $172=(($171)|0);
    HEAP32[(($172)>>2)]=$170;
   }
   $174=$i;
   $175=$a1;
   $176=($174|0)>($175|0);
   if ($176) {
    $178=$1;
    $179=(($178+85816)|0);
    $180=((HEAP32[(($179)>>2)])|0);
    $181=$ix;
    $182=$a1;
    $183=(($181+($182<<2))|0);
    $184=$ix;
    $185=$i;
    $186=(($184+($185<<2))|0);
    $187=(($cod_info2+4768)|0);
    $188=((FUNCTION_TABLE_iiii[($180)&3]($183,$186,$187))|0);
    $189=(($cod_info2+4796)|0);
    $190=(($189+4)|0);
    HEAP32[(($190)>>2)]=$188;
   }
   $192=$2;
   $193=(($192+4768)|0);
   $194=((HEAP32[(($193)>>2)])|0);
   $195=(($cod_info2+4768)|0);
   $196=((HEAP32[(($195)>>2)])|0);
   $197=($194|0)>($196|0);
   if ($197) {
    $199=$2;
    $200=$199;
    $201=$cod_info2;
    (_memcpy((($200)|0), (($201)|0), 5252)|0);
   }
   STACKTOP=sp;return;
  }
 } while(0);
 STACKTOP=sp;return;
}


function _count_bits($gfc,$xr,$gi,$prev_noise){
 $gfc=($gfc)|0;
 $xr=($xr)|0;
 $gi=($gi)|0;
 $prev_noise=($prev_noise)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$ix=0,$w=.0,$sfb=0,$j=0,$gain=0,$roundfac=.0,$width=0,$k=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0;
 var $13=.0,$14=.0,$15=0,$16=0,$17=.0,$18=.0,$19=0,$22=0,$23=0,$24=0,$25=0,$26=0,$27=0,$28=.0,$29=0,$30=0,$31=0,$32=0,$33=0,$34=0;
 var $35=0,$36=0,$38=0,$39=0,$40=0,$41=0,$42=0,$43=0,$44=0,$45=0,$46=0,$47=.0,$48=.0,$49=.0,$50=.0,$52=0,$53=0,$54=0,$55=0,$56=0;
 var $58=0,$59=0,$60=0,$61=0,$62=0,$63=0,$64=0,$65=0,$66=0,$67=0,$68=0,$69=0,$71=0,$72=0,$73=0,$75=0,$76=0,$77=0,$78=0,$80=0;
 var $81=0,$82=0,$84=0,$85=0,$86=0,$87=.0,$88=.0,$89=0,$91=0,$92=0,$93=0,$94=0,$97=0,$98=0,$99=0,$100=0,$102=0,$103=0,$107=0,$108=0;
 var $111=0,$112=0,$113=0,$114=0,$116=0,label=0;
 var sp=0;sp=STACKTOP;













 $2=$gfc;
 $3=$xr;
 $4=$gi;
 $5=$prev_noise;
 $6=$4;
 $7=(($6+2304)|0);
 $8=(($7)|0);
 $ix=$8;
 $9=$4;
 $10=(($9+4780)|0);
 $11=((HEAP32[(($10)>>2)])|0);
 $12=((59360+($11<<2))|0);
 $13=(+(HEAPF32[(($12)>>2)]));
 $14=((8206.0))/($13);
 $w=$14;
 $15=$4;
 $16=(($15+4764)|0);
 $17=(+(HEAPF32[(($16)>>2)]));
 $18=$w;
 $19=$17>$18;
 if ($19) {
  $1=100000;
  $116=$1;
  STACKTOP=sp;return (($116)|0);
 }
 $22=$3;
 $23=$ix;
 $24=$4;
 $25=(($24+4780)|0);
 $26=((HEAP32[(($25)>>2)])|0);
 $27=((59360+($26<<2))|0);
 $28=(+(HEAPF32[(($27)>>2)]));
 $29=$4;
 $30=$5;
 _quantize_xrpow($22,$23,$28,$29,$30);
 $31=$2;
 $32=(($31+84768)|0);
 $33=(($32+328)|0);
 $34=((HEAP32[(($33)>>2)])|0);
 $35=$34&2;
 $36=($35|0)!=0;
 if ($36) {
  $j=0;
  $38=$4;
  $39=(($38+4780)|0);
  $40=((HEAP32[(($39)>>2)])|0);
  $41=$4;
  $42=(($41+4836)|0);
  $43=((HEAP32[(($42)>>2)])|0);
  $44=((($40)+($43))|0);
  $gain=$44;
  $45=$gain;
  $46=((59360+($45<<2))|0);
  $47=(+(HEAPF32[(($46)>>2)]));
  $48=$47;
  $49=((0.634521682242439))/($48);
  $50=$49;
  $roundfac=$50;
  $sfb=0;
  while(1) {
   $52=$sfb;
   $53=$4;
   $54=(($53+4860)|0);
   $55=((HEAP32[(($54)>>2)])|0);
   $56=($52|0)<($55|0);
   if (!($56)) {
    break;
   }
   $58=$sfb;
   $59=$4;
   $60=(($59+4872)|0);
   $61=(($60+($58<<2))|0);
   $62=((HEAP32[(($61)>>2)])|0);
   $width=$62;
   $63=$sfb;
   $64=$2;
   $65=(($64+84768)|0);
   $66=(($65+168)|0);
   $67=(($66+($63<<2))|0);
   $68=((HEAP32[(($67)>>2)])|0);
   $69=($68|0)!=0;
   if ($69) {
    $75=$j;
    $k=$75;
    $76=$width;
    $77=$j;
    $78=((($77)+($76))|0);
    $j=$78;
    while(1) {
     $80=$k;
     $81=$j;
     $82=($80|0)<($81|0);
     if (!($82)) {
      break;
     }
     $84=$k;
     $85=$3;
     $86=(($85+($84<<2))|0);
     $87=(+(HEAPF32[(($86)>>2)]));
     $88=$roundfac;
     $89=$87>=$88;
     if ($89) {
      $91=$k;
      $92=$ix;
      $93=(($92+($91<<2))|0);
      $94=((HEAP32[(($93)>>2)])|0);
      $97=$94;
     } else {
      $97=0;
     }

     $98=$k;
     $99=$ix;
     $100=(($99+($98<<2))|0);
     HEAP32[(($100)>>2)]=$97;
     $102=$k;
     $103=((($102)+(1))|0);
     $k=$103;
    }
   } else {
    $71=$width;
    $72=$j;
    $73=((($72)+($71))|0);
    $j=$73;
   }
   $107=$sfb;
   $108=((($107)+(1))|0);
   $sfb=$108;
  }
 }
 $111=$2;
 $112=$4;
 $113=$5;
 $114=((_noquant_count_bits($111,$112,$113))|0);
 $1=$114;
 $116=$1;
 STACKTOP=sp;return (($116)|0);
}


function _best_scalefac_store($gfc,$gr,$ch,$l3_side){
 $gfc=($gfc)|0;
 $gr=($gr)|0;
 $ch=($ch)|0;
 $l3_side=($l3_side)|0;
 var $1=0,$2=0,$3=0,$4=0,$cfg=0,$gi=0,$sfb=0,$i=0,$j=0,$l=0,$recalc=0,$width=0,$s=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0;
 var $12=0,$14=0,$15=0,$16=0,$17=0,$18=0,$20=0,$21=0,$22=0,$23=0,$24=0,$25=0,$26=0,$27=0,$28=0,$30=0,$31=0,$32=0,$34=0,$35=0;
 var $36=0,$37=0,$38=0,$39=0,$43=0,$44=0,$46=0,$47=0,$48=0,$50=0,$51=0,$52=0,$53=0,$56=0,$57=0,$59=0,$60=0,$61=0,$62=0,$64=0;
 var $65=0,$66=0,$67=0,$70=0,$71=0,$72=0,$73=0,$74=0,$76=0,$77=0,$78=0,$79=0,$80=0,$81=0,$83=0,$84=0,$85=0,$86=0,$87=0,$88=0;
 var $89=0,$92=0,$93=0,$95=0,$96=0,$97=0,$99=0,$100=0,$103=0,$104=0,$105=0,$106=0,$107=0,$109=0,$110=0,$111=0,$112=0,$113=0,$114=0,$116=0;
 var $117=0,$118=0,$119=0,$120=0,$121=0,$124=0,$125=0,$127=0,$128=0,$131=0,$132=0,$133=0,$134=0,$136=0,$137=0,$138=0,$139=0,$141=0,$142=0,$143=0;
 var $144=0,$147=0,$148=0,$150=0,$151=0,$152=0,$153=0,$154=0,$155=0,$156=0,$157=0,$158=0,$160=0,$161=0,$162=0,$163=0,$164=0,$165=0,$169=0,$170=0;
 var $172=0,$173=0,$176=0,$177=0,$179=0,$180=0,$181=0,$182=0,$183=0,$184=0,$186=0,$187=0,$188=0,$189=0,$190=0,$191=0,$192=0,$193=0,$194=0,$197=0;
 var $198=0,$200=0,$201=0,$205=0,$206=0,$208=0,$209=0,$210=0,$211=0,$212=0,$213=0,$215=0,$216=0,$218=0,$219=0,$220=0,$221=0,$223=0,$224=0,$226=0;
 var $227=0,$228=0,$229=0,$230=0,$231=0,$232=0,$233=0,$235=0,$236=0,$237=0,$238=0,$239=0,$240=0,$241=0,$242=0,$244=0,$245=0,$248=0,$249=0,$250=0;
 var $251=0,$252=0,$254=0,$255=0,$256=0,$257=0,$258=0,$259=0,$261=0,$262=0,$263=0,$264=0,$267=0,$268=0,$270=0,$271=0,$273=0,$274=0,$275=0,label=0;
 var sp=0;sp=STACKTOP;













 $1=$gfc;
 $2=$gr;
 $3=$ch;
 $4=$l3_side;
 $5=$1;
 $6=(($5+16)|0);
 $cfg=$6;
 $7=$3;
 $8=$2;
 $9=$4;
 $10=(($9)|0);
 $11=(($10+((($8)*(10504))&-1))|0);
 $12=(($11+((($7)*(5252))&-1))|0);
 $gi=$12;
 $recalc=0;
 $j=0;
 $sfb=0;
 while(1) {
  $14=$sfb;
  $15=$gi;
  $16=(($15+4860)|0);
  $17=((HEAP32[(($16)>>2)])|0);
  $18=($14|0)<($17|0);
  if (!($18)) {
   break;
  }
  $20=$sfb;
  $21=$gi;
  $22=(($21+4872)|0);
  $23=(($22+($20<<2))|0);
  $24=((HEAP32[(($23)>>2)])|0);
  $width=$24;
  $25=$j;
  $l=$25;
  $26=$width;
  $27=$j;
  $28=((($27)+($26))|0);
  $j=$28;
  while(1) {
   $30=$l;
   $31=$j;
   $32=($30|0)<($31|0);
   if (!($32)) {
    break;
   }
   $34=$l;
   $35=$gi;
   $36=(($35+2304)|0);
   $37=(($36+($34<<2))|0);
   $38=((HEAP32[(($37)>>2)])|0);
   $39=($38|0)!=0;
   if ($39) {
    label = 6;
    break;
   }
   $43=$l;
   $44=((($43)+(1))|0);
   $l=$44;
  }
  if ((label|0) == 6) {
   label = 0;
  }
  $46=$l;
  $47=$j;
  $48=($46|0)==($47|0);
  if ($48) {
   $recalc=-2;
   $50=$sfb;
   $51=$gi;
   $52=(($51+4608)|0);
   $53=(($52+($50<<2))|0);
   HEAP32[(($53)>>2)]=-2;
  }
  $56=$sfb;
  $57=((($56)+(1))|0);
  $sfb=$57;
 }
 $59=$gi;
 $60=(($59+4836)|0);
 $61=((HEAP32[(($60)>>2)])|0);
 $62=($61|0)!=0;
 do {
  if (!($62)) {
   $64=$gi;
   $65=(($64+4832)|0);
   $66=((HEAP32[(($65)>>2)])|0);
   $67=($66|0)!=0;
   if ($67) {
    break;
   }
   $s=0;
   $sfb=0;
   while(1) {
    $70=$sfb;
    $71=$gi;
    $72=(($71+4860)|0);
    $73=((HEAP32[(($72)>>2)])|0);
    $74=($70|0)<($73|0);
    if (!($74)) {
     break;
    }
    $76=$sfb;
    $77=$gi;
    $78=(($77+4608)|0);
    $79=(($78+($76<<2))|0);
    $80=((HEAP32[(($79)>>2)])|0);
    $81=($80|0)>0;
    if ($81) {
     $83=$sfb;
     $84=$gi;
     $85=(($84+4608)|0);
     $86=(($85+($83<<2))|0);
     $87=((HEAP32[(($86)>>2)])|0);
     $88=$s;
     $89=$88|$87;
     $s=$89;
    }
    $92=$sfb;
    $93=((($92)+(1))|0);
    $sfb=$93;
   }
   $95=$s;
   $96=$95&1;
   $97=($96|0)!=0;
   do {
    if (!($97)) {
     $99=$s;
     $100=($99|0)!=0;
     if (!($100)) {
      break;
     }
     $sfb=0;
     while(1) {
      $103=$sfb;
      $104=$gi;
      $105=(($104+4860)|0);
      $106=((HEAP32[(($105)>>2)])|0);
      $107=($103|0)<($106|0);
      if (!($107)) {
       break;
      }
      $109=$sfb;
      $110=$gi;
      $111=(($110+4608)|0);
      $112=(($111+($109<<2))|0);
      $113=((HEAP32[(($112)>>2)])|0);
      $114=($113|0)>0;
      if ($114) {
       $116=$sfb;
       $117=$gi;
       $118=(($117+4608)|0);
       $119=(($118+($116<<2))|0);
       $120=((HEAP32[(($119)>>2)])|0);
       $121=$120>>1;
       HEAP32[(($119)>>2)]=$121;
      }
      $124=$sfb;
      $125=((($124)+(1))|0);
      $sfb=$125;
     }
     $recalc=1;
     $127=$gi;
     $128=(($127+4836)|0);
     HEAP32[(($128)>>2)]=1;
    }
   } while(0);
  }
 } while(0);
 $131=$gi;
 $132=(($131+4832)|0);
 $133=((HEAP32[(($132)>>2)])|0);
 $134=($133|0)!=0;
 do {
  if (!($134)) {
   $136=$gi;
   $137=(($136+4788)|0);
   $138=((HEAP32[(($137)>>2)])|0);
   $139=($138|0)!=2;
   if (!($139)) {
    break;
   }
   $141=$cfg;
   $142=(($141+60)|0);
   $143=((HEAP32[(($142)>>2)])|0);
   $144=($143|0)==2;
   if (!($144)) {
    break;
   }
   $sfb=11;
   while(1) {
    $147=$sfb;
    $148=($147|0)<21;
    if (!($148)) {
     break;
    }
    $150=$sfb;
    $151=$gi;
    $152=(($151+4608)|0);
    $153=(($152+($150<<2))|0);
    $154=((HEAP32[(($153)>>2)])|0);
    $155=$sfb;
    $156=((9552+($155<<2))|0);
    $157=((HEAP32[(($156)>>2)])|0);
    $158=($154|0)<($157|0);
    if ($158) {
     $160=$sfb;
     $161=$gi;
     $162=(($161+4608)|0);
     $163=(($162+($160<<2))|0);
     $164=((HEAP32[(($163)>>2)])|0);
     $165=($164|0)!=-2;
     if ($165) {
      label = 38;
      break;
     }
    }
    $169=$sfb;
    $170=((($169)+(1))|0);
    $sfb=$170;
   }
   if ((label|0) == 38) {
   }
   $172=$sfb;
   $173=($172|0)==21;
   if ($173) {
    $sfb=11;
    while(1) {
     $176=$sfb;
     $177=($176|0)<21;
     if (!($177)) {
      break;
     }
     $179=$sfb;
     $180=$gi;
     $181=(($180+4608)|0);
     $182=(($181+($179<<2))|0);
     $183=((HEAP32[(($182)>>2)])|0);
     $184=($183|0)>0;
     if ($184) {
      $186=$sfb;
      $187=((9552+($186<<2))|0);
      $188=((HEAP32[(($187)>>2)])|0);
      $189=$sfb;
      $190=$gi;
      $191=(($190+4608)|0);
      $192=(($191+($189<<2))|0);
      $193=((HEAP32[(($192)>>2)])|0);
      $194=((($193)-($188))|0);
      HEAP32[(($192)>>2)]=$194;
     }
     $197=$sfb;
     $198=((($197)+(1))|0);
     $sfb=$198;
    }
    $recalc=1;
    $200=$gi;
    $201=(($200+4832)|0);
    HEAP32[(($201)>>2)]=1;
   }
  }
 } while(0);
 $i=0;
 while(1) {
  $205=$i;
  $206=($205|0)<4;
  if (!($206)) {
   break;
  }
  $208=$i;
  $209=$3;
  $210=$4;
  $211=(($210+21024)|0);
  $212=(($211+($209<<4))|0);
  $213=(($212+($208<<2))|0);
  HEAP32[(($213)>>2)]=0;
  $215=$i;
  $216=((($215)+(1))|0);
  $i=$216;
 }
 $218=$cfg;
 $219=(($218+60)|0);
 $220=((HEAP32[(($219)>>2)])|0);
 $221=($220|0)==2;
 do {
  if ($221) {
   $223=$2;
   $224=($223|0)==1;
   if (!($224)) {
    break;
   }
   $226=$3;
   $227=$4;
   $228=(($227)|0);
   $229=(($228)|0);
   $230=(($229+((($226)*(5252))&-1))|0);
   $231=(($230+4788)|0);
   $232=((HEAP32[(($231)>>2)])|0);
   $233=($232|0)!=2;
   if (!($233)) {
    break;
   }
   $235=$3;
   $236=$4;
   $237=(($236)|0);
   $238=(($237+10504)|0);
   $239=(($238+((($235)*(5252))&-1))|0);
   $240=(($239+4788)|0);
   $241=((HEAP32[(($240)>>2)])|0);
   $242=($241|0)!=2;
   if (!($242)) {
    break;
   }
   $244=$3;
   $245=$4;
   _scfsi_calc($244,$245);
   $recalc=0;
  }
 } while(0);
 $sfb=0;
 while(1) {
  $248=$sfb;
  $249=$gi;
  $250=(($249+4860)|0);
  $251=((HEAP32[(($250)>>2)])|0);
  $252=($248|0)<($251|0);
  if (!($252)) {
   break;
  }
  $254=$sfb;
  $255=$gi;
  $256=(($255+4608)|0);
  $257=(($256+($254<<2))|0);
  $258=((HEAP32[(($257)>>2)])|0);
  $259=($258|0)==-2;
  if ($259) {
   $261=$sfb;
   $262=$gi;
   $263=(($262+4608)|0);
   $264=(($263+($261<<2))|0);
   HEAP32[(($264)>>2)]=0;
  }
  $267=$sfb;
  $268=((($267)+(1))|0);
  $sfb=$268;
 }
 $270=$recalc;
 $271=($270|0)!=0;
 if (!($271)) {
  STACKTOP=sp;return;
 }
 $273=$1;
 $274=$gi;
 $275=((_scale_bitcount($273,$274))|0);
 STACKTOP=sp;return;
}


function _scale_bitcount($gfc,$cod_info){
 $gfc=($gfc)|0;
 $cod_info=($cod_info)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$10=0,$11=0,$12=0,$14=0,$15=0,$16=0,$18=0,label=0;
 var sp=0;sp=STACKTOP;



 $2=$gfc;
 $3=$cod_info;
 $4=$2;
 $5=(($4+16)|0);
 $6=(($5+60)|0);
 $7=((HEAP32[(($6)>>2)])|0);
 $8=($7|0)==2;
 if ($8) {
  $10=$2;
  $11=$3;
  $12=((_mpeg1_scale_bitcount($10,$11))|0);
  $1=$12;
  $18=$1;
  STACKTOP=sp;return (($18)|0);
 } else {
  $14=$2;
  $15=$3;
  $16=((_mpeg2_scale_bitcount($14,$15))|0);
  $1=$16;
  $18=$1;
  STACKTOP=sp;return (($18)|0);
 }
  return 0;
}


function _huffman_init($gfc){
 $gfc=($gfc)|0;
 var $1=0,$i=0,$scfb_anz=0,$bv_index=0,$2=0,$3=0,$5=0,$6=0,$9=0,$10=0,$11=0,$12=0,$13=0,$14=0,$15=0,$16=0,$17=0,$20=0,$21=0,$22=0;
 var $23=0,$25=0,$26=0,$27=0,$28=0,$29=0,$30=0,$31=0,$32=0,$33=0,$35=0,$36=0,$38=0,$39=0,$41=0,$42=0,$43=0,$44=0,$46=0,$47=0;
 var $48=0,$49=0,$50=0,$51=0,$52=0,$53=0,$54=0,$55=0,$56=0,$57=0,$59=0,$60=0,$61=0,$62=0,$63=0,$64=0,$65=0,$66=0,$67=0,$68=0;
 var $69=0,$70=0,$71=0,$72=0,$73=0,$74=0,$75=0,$76=0,$78=0,$79=0,$81=0,$82=0,$84=0,$85=0,$86=0,$87=0,$89=0,$90=0,$91=0,$92=0;
 var $93=0,$94=0,$95=0,$96=0,$98=0,$99=0,label=0;
 var sp=0;sp=STACKTOP;




 $1=$gfc;
 $2=$1;
 $3=(($2+85816)|0);
 HEAP32[(($3)>>2)]=2;
 $i=2;
 while(1) {
  $5=$i;
  $6=($5|0)<=576;
  if (!($6)) {
   break;
  }
  $scfb_anz=0;
  while(1) {
   $9=$scfb_anz;
   $10=((($9)+(1))|0);
   $scfb_anz=$10;
   $11=$1;
   $12=(($11+21360)|0);
   $13=(($12)|0);
   $14=(($13+($10<<2))|0);
   $15=((HEAP32[(($14)>>2)])|0);
   $16=$i;
   $17=($15|0)<($16|0);
   if (!($17)) {
    break;
   }
  }
  $20=$scfb_anz;
  $21=((6880+($20<<3))|0);
  $22=(($21)|0);
  $23=((HEAP32[(($22)>>2)])|0);
  $bv_index=$23;
  while(1) {
   $25=$bv_index;
   $26=((($25)+(1))|0);
   $27=$1;
   $28=(($27+21360)|0);
   $29=(($28)|0);
   $30=(($29+($26<<2))|0);
   $31=((HEAP32[(($30)>>2)])|0);
   $32=$i;
   $33=($31|0)>($32|0);
   if (!($33)) {
    break;
   }
   $35=$bv_index;
   $36=((($35)-(1))|0);
   $bv_index=$36;
  }
  $38=$bv_index;
  $39=($38|0)<0;
  if ($39) {
   $41=$scfb_anz;
   $42=((6880+($41<<3))|0);
   $43=(($42)|0);
   $44=((HEAP32[(($43)>>2)])|0);
   $bv_index=$44;
  }
  $46=$bv_index;
  $47=(($46)&255);
  $48=$i;
  $49=((($48)-(2))|0);
  $50=$1;
  $51=(($50+84768)|0);
  $52=(($51+332)|0);
  $53=(($52+$49)|0);
  HEAP8[($53)]=$47;
  $54=$scfb_anz;
  $55=((6880+($54<<3))|0);
  $56=(($55+4)|0);
  $57=((HEAP32[(($56)>>2)])|0);
  $bv_index=$57;
  while(1) {
   $59=$bv_index;
   $60=$i;
   $61=((($60)-(2))|0);
   $62=$1;
   $63=(($62+84768)|0);
   $64=(($63+332)|0);
   $65=(($64+$61)|0);
   $66=((HEAP8[($65)])|0);
   $67=(($66<<24)>>24);
   $68=((($59)+($67))|0);
   $69=((($68)+(2))|0);
   $70=$1;
   $71=(($70+21360)|0);
   $72=(($71)|0);
   $73=(($72+($69<<2))|0);
   $74=((HEAP32[(($73)>>2)])|0);
   $75=$i;
   $76=($74|0)>($75|0);
   if (!($76)) {
    break;
   }
   $78=$bv_index;
   $79=((($78)-(1))|0);
   $bv_index=$79;
  }
  $81=$bv_index;
  $82=($81|0)<0;
  if ($82) {
   $84=$scfb_anz;
   $85=((6880+($84<<3))|0);
   $86=(($85+4)|0);
   $87=((HEAP32[(($86)>>2)])|0);
   $bv_index=$87;
  }
  $89=$bv_index;
  $90=(($89)&255);
  $91=$i;
  $92=((($91)-(1))|0);
  $93=$1;
  $94=(($93+84768)|0);
  $95=(($94+332)|0);
  $96=(($95+$92)|0);
  HEAP8[($96)]=$90;
  $98=$i;
  $99=((($98)+(2))|0);
  $i=$99;
 }
 STACKTOP=sp;return;
}


function _recalc_divide_init($gfc,$cod_info,$ix,$r01_bits,$r01_div,$r0_tbl,$r1_tbl){
 $gfc=($gfc)|0;
 $cod_info=($cod_info)|0;
 $ix=($ix)|0;
 $r01_bits=($r01_bits)|0;
 $r01_div=($r01_div)|0;
 $r0_tbl=($r0_tbl)|0;
 $r1_tbl=($r1_tbl)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$r0=0,$r1=0,$bigv=0,$r0t=0,$r1t=0,$bits=0,$a1=0,$r0bits=0,$a2=0,$8=0,$9=0,$10=0,$12=0;
 var $13=0,$15=0,$16=0,$17=0,$19=0,$20=0,$23=0,$24=0,$26=0,$27=0,$28=0,$29=0,$30=0,$31=0,$32=0,$33=0,$34=0,$35=0,$38=0,$39=0;
 var $40=0,$41=0,$42=0,$43=0,$44=0,$45=0,$47=0,$48=0,$50=0,$51=0,$52=0,$53=0,$54=0,$55=0,$56=0,$57=0,$58=0,$59=0,$60=0,$61=0;
 var $64=0,$65=0,$66=0,$67=0,$68=0,$69=0,$70=0,$71=0,$72=0,$73=0,$74=0,$75=0,$76=0,$77=0,$78=0,$79=0,$80=0,$81=0,$82=0,$84=0;
 var $85=0,$86=0,$87=0,$88=0,$89=0,$90=0,$91=0,$92=0,$93=0,$94=0,$95=0,$96=0,$97=0,$98=0,$99=0,$100=0,$101=0,$102=0,$103=0,$104=0;
 var $105=0,$106=0,$107=0,$110=0,$111=0,$114=0,$115=0,label=0;
 var sp=0;sp=STACKTOP;STACKTOP=(STACKTOP+16)|0;












 $bits=((sp)|0);

 $r0bits=(((sp)+(8))|0);

 $1=$gfc;
 $2=$cod_info;
 $3=$ix;
 $4=$r01_bits;
 $5=$r01_div;
 $6=$r0_tbl;
 $7=$r1_tbl;
 $8=$2;
 $9=(($8+4772)|0);
 $10=((HEAP32[(($9)>>2)])|0);
 $bigv=$10;
 $r0=0;
 while(1) {
  $12=$r0;
  $13=($12|0)<=22;
  if (!($13)) {
   break;
  }
  $15=$r0;
  $16=$4;
  $17=(($16+($15<<2))|0);
  HEAP32[(($17)>>2)]=100000;
  $19=$r0;
  $20=((($19)+(1))|0);
  $r0=$20;
 }
 $r0=0;
 while(1) {
  $23=$r0;
  $24=($23|0)<16;
  if (!($24)) {
   label = 19;
   break;
  }
  $26=$r0;
  $27=((($26)+(1))|0);
  $28=$1;
  $29=(($28+21360)|0);
  $30=(($29)|0);
  $31=(($30+($27<<2))|0);
  $32=((HEAP32[(($31)>>2)])|0);
  $a1=$32;
  $33=$a1;
  $34=$bigv;
  $35=($33|0)>=($34|0);
  if ($35) {
   break;
  }
  HEAP32[(($r0bits)>>2)]=0;
  $38=$1;
  $39=(($38+85816)|0);
  $40=((HEAP32[(($39)>>2)])|0);
  $41=$3;
  $42=$3;
  $43=$a1;
  $44=(($42+($43<<2))|0);
  $45=((FUNCTION_TABLE_iiii[($40)&3]($41,$44,$r0bits))|0);
  $r0t=$45;
  $r1=0;
  while(1) {
   $47=$r1;
   $48=($47|0)<8;
   if (!($48)) {
    break;
   }
   $50=$r0;
   $51=$r1;
   $52=((($50)+($51))|0);
   $53=((($52)+(2))|0);
   $54=$1;
   $55=(($54+21360)|0);
   $56=(($55)|0);
   $57=(($56+($53<<2))|0);
   $58=((HEAP32[(($57)>>2)])|0);
   $a2=$58;
   $59=$a2;
   $60=$bigv;
   $61=($59|0)>=($60|0);
   if ($61) {
    label = 12;
    break;
   }
   $64=((HEAP32[(($r0bits)>>2)])|0);
   HEAP32[(($bits)>>2)]=$64;
   $65=$1;
   $66=(($65+85816)|0);
   $67=((HEAP32[(($66)>>2)])|0);
   $68=$3;
   $69=$a1;
   $70=(($68+($69<<2))|0);
   $71=$3;
   $72=$a2;
   $73=(($71+($72<<2))|0);
   $74=((FUNCTION_TABLE_iiii[($67)&3]($70,$73,$bits))|0);
   $r1t=$74;
   $75=$r0;
   $76=$r1;
   $77=((($75)+($76))|0);
   $78=$4;
   $79=(($78+($77<<2))|0);
   $80=((HEAP32[(($79)>>2)])|0);
   $81=((HEAP32[(($bits)>>2)])|0);
   $82=($80|0)>($81|0);
   if ($82) {
    $84=((HEAP32[(($bits)>>2)])|0);
    $85=$r0;
    $86=$r1;
    $87=((($85)+($86))|0);
    $88=$4;
    $89=(($88+($87<<2))|0);
    HEAP32[(($89)>>2)]=$84;
    $90=$r0;
    $91=$r0;
    $92=$r1;
    $93=((($91)+($92))|0);
    $94=$5;
    $95=(($94+($93<<2))|0);
    HEAP32[(($95)>>2)]=$90;
    $96=$r0t;
    $97=$r0;
    $98=$r1;
    $99=((($97)+($98))|0);
    $100=$6;
    $101=(($100+($99<<2))|0);
    HEAP32[(($101)>>2)]=$96;
    $102=$r1t;
    $103=$r0;
    $104=$r1;
    $105=((($103)+($104))|0);
    $106=$7;
    $107=(($106+($105<<2))|0);
    HEAP32[(($107)>>2)]=$102;
   }
   $110=$r1;
   $111=((($110)+(1))|0);
   $r1=$111;
  }
  if ((label|0) == 12) {
   label = 0;
  }
  $114=$r0;
  $115=((($114)+(1))|0);
  $r0=$115;
 }
 if ((label|0) == 19) {
  STACKTOP=sp;return;
 }
 STACKTOP=sp;return;
}


function _recalc_divide_sub($gfc,$cod_info2,$gi,$ix,$r01_bits,$r01_div,$r0_tbl,$r1_tbl){
 $gfc=($gfc)|0;
 $cod_info2=($cod_info2)|0;
 $gi=($gi)|0;
 $ix=($ix)|0;
 $r01_bits=($r01_bits)|0;
 $r01_div=($r01_div)|0;
 $r0_tbl=($r0_tbl)|0;
 $r1_tbl=($r1_tbl)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$bits=0,$r2=0,$a2=0,$bigv=0,$r2t=0,$9=0,$10=0,$11=0,$13=0,$14=0,$16=0,$17=0;
 var $18=0,$19=0,$20=0,$21=0,$22=0,$23=0,$24=0,$27=0,$28=0,$29=0,$30=0,$31=0,$32=0,$33=0,$34=0,$35=0,$36=0,$37=0,$38=0,$39=0;
 var $40=0,$43=0,$44=0,$45=0,$46=0,$47=0,$48=0,$49=0,$50=0,$51=0,$52=0,$53=0,$54=0,$55=0,$56=0,$57=0,$60=0,$61=0,$62=0,$63=0;
 var $64=0,$65=0,$66=0,$67=0,$68=0,$69=0,$70=0,$71=0,$72=0,$73=0,$74=0,$75=0,$76=0,$77=0,$78=0,$79=0,$80=0,$81=0,$82=0,$83=0;
 var $84=0,$85=0,$86=0,$87=0,$88=0,$89=0,$90=0,$91=0,$92=0,$93=0,$94=0,$95=0,$96=0,$97=0,$98=0,$99=0,$100=0,$101=0,$102=0,$103=0;
 var $105=0,$106=0,label=0;
 var sp=0;sp=STACKTOP;STACKTOP=(STACKTOP+8)|0;








 $bits=((sp)|0);




 $1=$gfc;
 $2=$cod_info2;
 $3=$gi;
 $4=$ix;
 $5=$r01_bits;
 $6=$r01_div;
 $7=$r0_tbl;
 $8=$r1_tbl;
 $9=$2;
 $10=(($9+4772)|0);
 $11=((HEAP32[(($10)>>2)])|0);
 $bigv=$11;
 $r2=2;
 while(1) {
  $13=$r2;
  $14=($13|0)<23;
  if (!($14)) {
   label = 11;
   break;
  }
  $16=$r2;
  $17=$1;
  $18=(($17+21360)|0);
  $19=(($18)|0);
  $20=(($19+($16<<2))|0);
  $21=((HEAP32[(($20)>>2)])|0);
  $a2=$21;
  $22=$a2;
  $23=$bigv;
  $24=($22|0)>=($23|0);
  if ($24) {
   label = 4;
   break;
  }
  $27=$r2;
  $28=((($27)-(2))|0);
  $29=$5;
  $30=(($29+($28<<2))|0);
  $31=((HEAP32[(($30)>>2)])|0);
  $32=$2;
  $33=(($32+5184)|0);
  $34=((HEAP32[(($33)>>2)])|0);
  $35=((($31)+($34))|0);
  HEAP32[(($bits)>>2)]=$35;
  $36=$3;
  $37=(($36+4768)|0);
  $38=((HEAP32[(($37)>>2)])|0);
  $39=((HEAP32[(($bits)>>2)])|0);
  $40=($38|0)<=($39|0);
  if ($40) {
   label = 6;
   break;
  }
  $43=$1;
  $44=(($43+85816)|0);
  $45=((HEAP32[(($44)>>2)])|0);
  $46=$4;
  $47=$a2;
  $48=(($46+($47<<2))|0);
  $49=$4;
  $50=$bigv;
  $51=(($49+($50<<2))|0);
  $52=((FUNCTION_TABLE_iiii[($45)&3]($48,$51,$bits))|0);
  $r2t=$52;
  $53=$3;
  $54=(($53+4768)|0);
  $55=((HEAP32[(($54)>>2)])|0);
  $56=((HEAP32[(($bits)>>2)])|0);
  $57=($55|0)<=($56|0);
  if ($57) {
  } else {
   $60=$3;
   $61=$60;
   $62=$2;
   $63=$62;
   (_memcpy((($61)|0), (($63)|0), 5252)|0);
   $64=((HEAP32[(($bits)>>2)])|0);
   $65=$3;
   $66=(($65+4768)|0);
   HEAP32[(($66)>>2)]=$64;
   $67=$r2;
   $68=((($67)-(2))|0);
   $69=$6;
   $70=(($69+($68<<2))|0);
   $71=((HEAP32[(($70)>>2)])|0);
   $72=$3;
   $73=(($72+4824)|0);
   HEAP32[(($73)>>2)]=$71;
   $74=$r2;
   $75=((($74)-(2))|0);
   $76=$r2;
   $77=((($76)-(2))|0);
   $78=$6;
   $79=(($78+($77<<2))|0);
   $80=((HEAP32[(($79)>>2)])|0);
   $81=((($75)-($80))|0);
   $82=$3;
   $83=(($82+4828)|0);
   HEAP32[(($83)>>2)]=$81;
   $84=$r2;
   $85=((($84)-(2))|0);
   $86=$7;
   $87=(($86+($85<<2))|0);
   $88=((HEAP32[(($87)>>2)])|0);
   $89=$3;
   $90=(($89+4796)|0);
   $91=(($90)|0);
   HEAP32[(($91)>>2)]=$88;
   $92=$r2;
   $93=((($92)-(2))|0);
   $94=$8;
   $95=(($94+($93<<2))|0);
   $96=((HEAP32[(($95)>>2)])|0);
   $97=$3;
   $98=(($97+4796)|0);
   $99=(($98+4)|0);
   HEAP32[(($99)>>2)]=$96;
   $100=$r2t;
   $101=$3;
   $102=(($101+4796)|0);
   $103=(($102+8)|0);
   HEAP32[(($103)>>2)]=$100;
  }
  $105=$r2;
  $106=((($105)+(1))|0);
  $r2=$106;
 }
 if ((label|0) == 4) {
  STACKTOP=sp;return;
 }
 else if ((label|0) == 6) {
  STACKTOP=sp;return;
 }
 else if ((label|0) == 11) {
  STACKTOP=sp;return;
 }
}


function _quantize_xrpow($xp,$pi,$istep,$cod_info,$prev_noise){
 $xp=($xp)|0;
 $pi=($pi)|0;
 $istep=+($istep);
 $cod_info=($cod_info)|0;
 $prev_noise=($prev_noise)|0;
 var $1=0,$2=0,$3=.0,$4=0,$5=0,$sfb=0,$sfbmax=0,$j=0,$prev_data_use=0,$iData=0,$accumulate=0,$accumulate01=0,$acc_iData=0,$acc_xp=0,$step=0,$l=0,$usefullsize=0,$6=0,$7=0,$8=0;
 var $9=0,$10=0,$12=0,$13=0,$14=0,$15=0,$16=0,$17=0,$18=0,$20=0,$21=0,$22=0,$23=0,$24=0,$25=0,$30=0,$31=0,$32=0,$34=0,$35=0;
 var $37=0,$38=0,$39=0,$40=0,$42=0,$43=0,$44=0,$45=0,$46=0,$47=0,$48=0,$49=0,$50=0,$51=0,$52=0,$53=0,$55=0,$56=0,$57=0,$60=0;
 var $61=0,$62=0,$63=0,$64=0,$65=0,$66=0,$67=0,$68=0,$69=0,$70=0,$71=0,$72=0,$73=0,$74=0,$75=0,$76=0,$77=0,$78=0,$80=0,$81=0;
 var $83=0,$84=0,$85=0,$86=0,$87=0,$88=0,$89=0,$91=0,$92=0,$94=0,$95=.0,$96=0,$97=0,$99=0,$100=0,$102=0,$103=.0,$104=0,$105=0,$108=0;
 var $109=0,$110=0,$111=0,$112=0,$113=0,$114=0,$115=0,$116=0,$117=0,$118=0,$119=0,$120=0,$121=0,$122=0,$123=0,$125=0,$126=0,$127=0,$128=0,$129=0;
 var $130=0,$131=0,$132=0,$133=0,$134=0,$135=0,$136=0,$137=0,$138=0,$139=0,$140=0,$141=0,$142=0,$143=0,$144=0,$147=0,$148=0,$150=0,$151=0,$153=0;
 var $154=0,$156=0,$157=0,$159=0,$160=0,$162=0,$163=0,$164=0,$165=0,$167=0,$168=0,$169=0,$170=0,$171=0,$173=0,$174=0,$175=0,$176=0,$177=0,$178=0;
 var $180=0,$181=0,$182=0,$183=0,$184=0,$185=0,$186=0,$188=0,$189=0,$191=0,$192=.0,$193=0,$194=0,$195=0,$196=0,$198=0,$199=0,$200=0,$202=0,$203=0;
 var $205=0,$206=.0,$207=0,$208=0,$209=0,$210=0,$212=0,$213=0,$214=0,$216=0,$217=0,$219=0,$220=0,$222=0,$223=.0,$224=0,$225=0,$227=0,$228=0,$230=0;
 var $231=.0,$232=0,$233=0,$237=0,$238=0,$239=0,$241=0,$242=0,$243=0,$244=0,$245=0,$246=0,$247=0,$248=0,$249=0,$250=0,$251=0,$252=0,$253=0,$254=0;
 var $255=0,$256=0,$257=0,$258=0,$259=0,$260=0,$261=0,$264=0,$265=0,$267=0,$268=0,$270=0,$271=.0,$272=0,$273=0,$275=0,$276=0,$278=0,$279=.0,$280=0;
 var $281=0,label=0;
 var sp=0;sp=STACKTOP;

















 $1=$xp;
 $2=$pi;
 $3=$istep;
 $4=$cod_info;
 $5=$prev_noise;
 $j=0;
 $accumulate=0;
 $accumulate01=0;
 $6=$2;
 $iData=$6;
 $7=$1;
 $acc_xp=$7;
 $8=$iData;
 $acc_iData=$8;
 $9=$5;
 $10=($9|0)!=0;
 if ($10) {
  $12=$4;
  $13=(($12+4780)|0);
  $14=((HEAP32[(($13)>>2)])|0);
  $15=$5;
  $16=(($15)|0);
  $17=((HEAP32[(($16)>>2)])|0);
  $18=($14|0)==($17|0);
  $20=$18;
 } else {
  $20=0;
 }

 $21=($20&1);
 $prev_data_use=$21;
 $22=$4;
 $23=(($22+4788)|0);
 $24=((HEAP32[(($23)>>2)])|0);
 $25=($24|0)==2;
 if ($25) {
  $sfbmax=38;
 } else {
  $sfbmax=21;
 }
 $sfb=0;
 while(1) {
  $30=$sfb;
  $31=$sfbmax;
  $32=($30|0)<=($31|0);
  if (!($32)) {
   break;
  }
  $step=-1;
  $34=$prev_data_use;
  $35=($34|0)!=0;
  if ($35) {
   label = 10;
  } else {
   $37=$4;
   $38=(($37+4788)|0);
   $39=((HEAP32[(($38)>>2)])|0);
   $40=($39|0)==0;
   if ($40) {
    label = 10;
   }
  }
  if ((label|0) == 10) {
   label = 0;
   $42=$4;
   $43=(($42+4780)|0);
   $44=((HEAP32[(($43)>>2)])|0);
   $45=$sfb;
   $46=$4;
   $47=(($46+4608)|0);
   $48=(($47+($45<<2))|0);
   $49=((HEAP32[(($48)>>2)])|0);
   $50=$4;
   $51=(($50+4832)|0);
   $52=((HEAP32[(($51)>>2)])|0);
   $53=($52|0)!=0;
   if ($53) {
    $55=$sfb;
    $56=((9552+($55<<2))|0);
    $57=((HEAP32[(($56)>>2)])|0);
    $60=$57;
   } else {
    $60=0;
   }

   $61=((($49)+($60))|0);
   $62=$4;
   $63=(($62+4836)|0);
   $64=((HEAP32[(($63)>>2)])|0);
   $65=((($64)+(1))|0);
   $66=$61<<$65;
   $67=((($44)-($66))|0);
   $68=$sfb;
   $69=$4;
   $70=(($69+5028)|0);
   $71=(($70+($68<<2))|0);
   $72=((HEAP32[(($71)>>2)])|0);
   $73=$4;
   $74=(($73+4808)|0);
   $75=(($74+($72<<2))|0);
   $76=((HEAP32[(($75)>>2)])|0);
   $77=($76<<3);
   $78=((($67)-($77))|0);
   $step=$78;
  }
  $80=$prev_data_use;
  $81=($80|0)!=0;
  do {
   if ($81) {
    $83=$sfb;
    $84=$5;
    $85=(($84+8)|0);
    $86=(($85+($83<<2))|0);
    $87=((HEAP32[(($86)>>2)])|0);
    $88=$step;
    $89=($87|0)==($88|0);
    if (!($89)) {
     label = 21;
     break;
    }
    $91=$accumulate;
    $92=($91|0)!=0;
    if ($92) {
     $94=$accumulate;
     $95=$3;
     $96=$acc_xp;
     $97=$acc_iData;
     _quantize_lines_xrpow($94,$95,$96,$97);
     $accumulate=0;
    }
    $99=$accumulate01;
    $100=($99|0)!=0;
    if ($100) {
     $102=$accumulate01;
     $103=$3;
     $104=$acc_xp;
     $105=$acc_iData;
     _quantize_lines_xrpow_01($102,$103,$104,$105);
     $accumulate01=0;
    }
   } else {
    label = 21;
   }
  } while(0);
  if ((label|0) == 21) {
   label = 0;
   $108=$sfb;
   $109=$4;
   $110=(($109+4872)|0);
   $111=(($110+($108<<2))|0);
   $112=((HEAP32[(($111)>>2)])|0);
   $l=$112;
   $113=$j;
   $114=$sfb;
   $115=$4;
   $116=(($115+4872)|0);
   $117=(($116+($114<<2))|0);
   $118=((HEAP32[(($117)>>2)])|0);
   $119=((($113)+($118))|0);
   $120=$4;
   $121=(($120+5208)|0);
   $122=((HEAP32[(($121)>>2)])|0);
   $123=($119|0)>($122|0);
   if ($123) {
    $125=$4;
    $126=(($125+5208)|0);
    $127=((HEAP32[(($126)>>2)])|0);
    $128=$j;
    $129=((($127)-($128))|0);
    $130=((($129)+(1))|0);
    $usefullsize=$130;
    $131=$4;
    $132=(($131+5208)|0);
    $133=((HEAP32[(($132)>>2)])|0);
    $134=$2;
    $135=(($134+($133<<2))|0);
    $136=$135;
    $137=$4;
    $138=(($137+5208)|0);
    $139=((HEAP32[(($138)>>2)])|0);
    $140=(((576)-($139))|0);
    $141=($140<<2);
    _memset((((($136)|0))|0), ((((0)|0))|0), (((($141)|0))|0))|0;
    $142=$usefullsize;
    $l=$142;
    $143=$l;
    $144=($143|0)<0;
    if ($144) {
     $l=0;
    }
    $147=$sfbmax;
    $148=((($147)+(1))|0);
    $sfb=$148;
   }
   $150=$accumulate;
   $151=($150|0)!=0;
   do {
    if (!($151)) {
     $153=$accumulate01;
     $154=($153|0)!=0;
     if ($154) {
      break;
     }
     $156=$iData;
     $acc_iData=$156;
     $157=$1;
     $acc_xp=$157;
    }
   } while(0);
   $159=$5;
   $160=($159|0)!=0;
   do {
    if ($160) {
     $162=$5;
     $163=(($162+4)|0);
     $164=((HEAP32[(($163)>>2)])|0);
     $165=($164|0)>0;
     if (!($165)) {
      label = 36;
      break;
     }
     $167=$sfb;
     $168=$5;
     $169=(($168+4)|0);
     $170=((HEAP32[(($169)>>2)])|0);
     $171=($167|0)>=($170|0);
     if (!($171)) {
      label = 36;
      break;
     }
     $173=$sfb;
     $174=$5;
     $175=(($174+8)|0);
     $176=(($175+($173<<2))|0);
     $177=((HEAP32[(($176)>>2)])|0);
     $178=($177|0)>0;
     if (!($178)) {
      label = 36;
      break;
     }
     $180=$step;
     $181=$sfb;
     $182=$5;
     $183=(($182+8)|0);
     $184=(($183+($181<<2))|0);
     $185=((HEAP32[(($184)>>2)])|0);
     $186=($180|0)>=($185|0);
     if (!($186)) {
      label = 36;
      break;
     }
     $188=$accumulate;
     $189=($188|0)!=0;
     if ($189) {
      $191=$accumulate;
      $192=$3;
      $193=$acc_xp;
      $194=$acc_iData;
      _quantize_lines_xrpow($191,$192,$193,$194);
      $accumulate=0;
      $195=$iData;
      $acc_iData=$195;
      $196=$1;
      $acc_xp=$196;
     }
     $198=$l;
     $199=$accumulate01;
     $200=((($199)+($198))|0);
     $accumulate01=$200;
    } else {
     label = 36;
    }
   } while(0);
   if ((label|0) == 36) {
    label = 0;
    $202=$accumulate01;
    $203=($202|0)!=0;
    if ($203) {
     $205=$accumulate01;
     $206=$3;
     $207=$acc_xp;
     $208=$acc_iData;
     _quantize_lines_xrpow_01($205,$206,$207,$208);
     $accumulate01=0;
     $209=$iData;
     $acc_iData=$209;
     $210=$1;
     $acc_xp=$210;
    }
    $212=$l;
    $213=$accumulate;
    $214=((($213)+($212))|0);
    $accumulate=$214;
   }
   $216=$l;
   $217=($216|0)<=0;
   if ($217) {
    label = 40;
    break;
   }
  }
  $237=$sfb;
  $238=$sfbmax;
  $239=($237|0)<=($238|0);
  if ($239) {
   $241=$sfb;
   $242=$4;
   $243=(($242+4872)|0);
   $244=(($243+($241<<2))|0);
   $245=((HEAP32[(($244)>>2)])|0);
   $246=$iData;
   $247=(($246+($245<<2))|0);
   $iData=$247;
   $248=$sfb;
   $249=$4;
   $250=(($249+4872)|0);
   $251=(($250+($248<<2))|0);
   $252=((HEAP32[(($251)>>2)])|0);
   $253=$1;
   $254=(($253+($252<<2))|0);
   $1=$254;
   $255=$sfb;
   $256=$4;
   $257=(($256+4872)|0);
   $258=(($257+($255<<2))|0);
   $259=((HEAP32[(($258)>>2)])|0);
   $260=$j;
   $261=((($260)+($259))|0);
   $j=$261;
  }
  $264=$sfb;
  $265=((($264)+(1))|0);
  $sfb=$265;
 }
 if ((label|0) == 40) {
  $219=$accumulate01;
  $220=($219|0)!=0;
  if ($220) {
   $222=$accumulate01;
   $223=$3;
   $224=$acc_xp;
   $225=$acc_iData;
   _quantize_lines_xrpow_01($222,$223,$224,$225);
   $accumulate01=0;
  }
  $227=$accumulate;
  $228=($227|0)!=0;
  if ($228) {
   $230=$accumulate;
   $231=$3;
   $232=$acc_xp;
   $233=$acc_iData;
   _quantize_lines_xrpow($230,$231,$232,$233);
   $accumulate=0;
  }
 }
 $267=$accumulate;
 $268=($267|0)!=0;
 if ($268) {
  $270=$accumulate;
  $271=$3;
  $272=$acc_xp;
  $273=$acc_iData;
  _quantize_lines_xrpow($270,$271,$272,$273);
  $accumulate=0;
 }
 $275=$accumulate01;
 $276=($275|0)!=0;
 if (!($276)) {
  STACKTOP=sp;return;
 }
 $278=$accumulate01;
 $279=$3;
 $280=$acc_xp;
 $281=$acc_iData;
 _quantize_lines_xrpow_01($278,$279,$280,$281);
 $accumulate01=0;
 STACKTOP=sp;return;
}


function _scfsi_calc($ch,$l3_side){
 $ch=($ch)|0;
 $l3_side=($l3_side)|0;
 var $1=0,$2=0,$i=0,$s1=0,$s2=0,$c1=0,$c2=0,$sfb=0,$gi=0,$g0=0,$c=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0;
 var $12=0,$14=0,$15=0,$17=0,$18=0,$19=0,$21=0,$22=0,$23=0,$24=0,$25=0,$26=0,$28=0,$29=0,$30=0,$31=0,$32=0,$33=0,$34=0,$35=0;
 var $36=0,$37=0,$38=0,$40=0,$41=0,$42=0,$43=0,$44=0,$45=0,$49=0,$50=0,$52=0,$53=0,$54=0,$55=0,$56=0,$57=0,$59=0,$60=0,$61=0;
 var $63=0,$64=0,$65=0,$66=0,$67=0,$68=0,$70=0,$71=0,$72=0,$73=0,$75=0,$76=0,$78=0,$79=0,$80=0,$81=0,$82=0,$83=0,$86=0,$87=0;
 var $90=0,$91=0,$93=0,$94=0,$95=0,$96=0,$97=0,$98=0,$101=0,$102=0,$103=0,$104=0,$105=0,$106=0,$107=0,$108=0,$109=0,$111=0,$112=0,$113=0;
 var $114=0,$115=0,$118=0,$119=0,$122=0,$123=0,$125=0,$126=0,$127=0,$128=0,$129=0,$130=0,$133=0,$134=0,$135=0,$136=0,$137=0,$138=0,$139=0,$140=0;
 var $141=0,$143=0,$144=0,$145=0,$146=0,$147=0,$150=0,$151=0,$154=0,$155=0,$157=0,$158=0,$159=0,$160=0,$161=0,$163=0,$164=0,$165=0,$166=0,$167=0;
 var $169=0,$170=0,$171=0,$172=0,$173=0,$174=0,$175=0,$176=0,$177=0,$178=0,$179=0,$180=0,$181=0,$182=0,$183=0,$184=0,$186=0,$187=0,$188=0,$189=0;
 var $190=0,$191=0,$195=0,$196=0,label=0;
 var sp=0;sp=STACKTOP;











 $1=$ch;
 $2=$l3_side;
 $3=$1;
 $4=$2;
 $5=(($4)|0);
 $6=(($5+10504)|0);
 $7=(($6+((($3)*(5252))&-1))|0);
 $gi=$7;
 $8=$1;
 $9=$2;
 $10=(($9)|0);
 $11=(($10)|0);
 $12=(($11+((($8)*(5252))&-1))|0);
 $g0=$12;
 $i=0;
 while(1) {
  $14=$i;
  $15=($14>>>0)<((4)>>>0);
  if (!($15)) {
   break;
  }
  $17=$i;
  $18=((9160+($17<<2))|0);
  $19=((HEAP32[(($18)>>2)])|0);
  $sfb=$19;
  while(1) {
   $21=$sfb;
   $22=$i;
   $23=((($22)+(1))|0);
   $24=((9160+($23<<2))|0);
   $25=((HEAP32[(($24)>>2)])|0);
   $26=($21|0)<($25|0);
   if (!($26)) {
    break;
   }
   $28=$sfb;
   $29=$g0;
   $30=(($29+4608)|0);
   $31=(($30+($28<<2))|0);
   $32=((HEAP32[(($31)>>2)])|0);
   $33=$sfb;
   $34=$gi;
   $35=(($34+4608)|0);
   $36=(($35+($33<<2))|0);
   $37=((HEAP32[(($36)>>2)])|0);
   $38=($32|0)!=($37|0);
   if ($38) {
    $40=$sfb;
    $41=$gi;
    $42=(($41+4608)|0);
    $43=(($42+($40<<2))|0);
    $44=((HEAP32[(($43)>>2)])|0);
    $45=($44|0)>=0;
    if ($45) {
     label = 7;
     break;
    }
   }
   $49=$sfb;
   $50=((($49)+(1))|0);
   $sfb=$50;
  }
  if ((label|0) == 7) {
   label = 0;
  }
  $52=$sfb;
  $53=$i;
  $54=((($53)+(1))|0);
  $55=((9160+($54<<2))|0);
  $56=((HEAP32[(($55)>>2)])|0);
  $57=($52|0)==($56|0);
  if ($57) {
   $59=$i;
   $60=((9160+($59<<2))|0);
   $61=((HEAP32[(($60)>>2)])|0);
   $sfb=$61;
   while(1) {
    $63=$sfb;
    $64=$i;
    $65=((($64)+(1))|0);
    $66=((9160+($65<<2))|0);
    $67=((HEAP32[(($66)>>2)])|0);
    $68=($63|0)<($67|0);
    if (!($68)) {
     break;
    }
    $70=$sfb;
    $71=$gi;
    $72=(($71+4608)|0);
    $73=(($72+($70<<2))|0);
    HEAP32[(($73)>>2)]=-1;
    $75=$sfb;
    $76=((($75)+(1))|0);
    $sfb=$76;
   }
   $78=$i;
   $79=$1;
   $80=$2;
   $81=(($80+21024)|0);
   $82=(($81+($79<<4))|0);
   $83=(($82+($78<<2))|0);
   HEAP32[(($83)>>2)]=1;
  }
  $86=$i;
  $87=((($86)+(1))|0);
  $i=$87;
 }
 $c1=0;
 $s1=0;
 $sfb=0;
 while(1) {
  $90=$sfb;
  $91=($90|0)<11;
  if (!($91)) {
   break;
  }
  $93=$sfb;
  $94=$gi;
  $95=(($94+4608)|0);
  $96=(($95+($93<<2))|0);
  $97=((HEAP32[(($96)>>2)])|0);
  $98=($97|0)==-1;
  if ($98) {
  } else {
   $101=$c1;
   $102=((($101)+(1))|0);
   $c1=$102;
   $103=$s1;
   $104=$sfb;
   $105=$gi;
   $106=(($105+4608)|0);
   $107=(($106+($104<<2))|0);
   $108=((HEAP32[(($107)>>2)])|0);
   $109=($103|0)<($108|0);
   if ($109) {
    $111=$sfb;
    $112=$gi;
    $113=(($112+4608)|0);
    $114=(($113+($111<<2))|0);
    $115=((HEAP32[(($114)>>2)])|0);
    $s1=$115;
   }
  }
  $118=$sfb;
  $119=((($118)+(1))|0);
  $sfb=$119;
 }
 $c2=0;
 $s2=0;
 while(1) {
  $122=$sfb;
  $123=($122|0)<21;
  if (!($123)) {
   break;
  }
  $125=$sfb;
  $126=$gi;
  $127=(($126+4608)|0);
  $128=(($127+($125<<2))|0);
  $129=((HEAP32[(($128)>>2)])|0);
  $130=($129|0)==-1;
  if ($130) {
  } else {
   $133=$c2;
   $134=((($133)+(1))|0);
   $c2=$134;
   $135=$s2;
   $136=$sfb;
   $137=$gi;
   $138=(($137+4608)|0);
   $139=(($138+($136<<2))|0);
   $140=((HEAP32[(($139)>>2)])|0);
   $141=($135|0)<($140|0);
   if ($141) {
    $143=$sfb;
    $144=$gi;
    $145=(($144+4608)|0);
    $146=(($145+($143<<2))|0);
    $147=((HEAP32[(($146)>>2)])|0);
    $s2=$147;
   }
  }
  $150=$sfb;
  $151=((($150)+(1))|0);
  $sfb=$151;
 }
 $i=0;
 while(1) {
  $154=$i;
  $155=($154>>>0)<((16)>>>0);
  if (!($155)) {
   break;
  }
  $157=$s1;
  $158=$i;
  $159=((7256+($158<<2))|0);
  $160=((HEAP32[(($159)>>2)])|0);
  $161=($157|0)<($160|0);
  do {
   if ($161) {
    $163=$s2;
    $164=$i;
    $165=((7128+($164<<2))|0);
    $166=((HEAP32[(($165)>>2)])|0);
    $167=($163|0)<($166|0);
    if (!($167)) {
     break;
    }
    $169=$i;
    $170=((7192+($169<<2))|0);
    $171=((HEAP32[(($170)>>2)])|0);
    $172=$c1;
    $173=(Math_imul($171,$172)|0);
    $174=$i;
    $175=((7064+($174<<2))|0);
    $176=((HEAP32[(($175)>>2)])|0);
    $177=$c2;
    $178=(Math_imul($176,$177)|0);
    $179=((($173)+($178))|0);
    $c=$179;
    $180=$gi;
    $181=(($180+4844)|0);
    $182=((HEAP32[(($181)>>2)])|0);
    $183=$c;
    $184=($182|0)>($183|0);
    if ($184) {
     $186=$c;
     $187=$gi;
     $188=(($187+4844)|0);
     HEAP32[(($188)>>2)]=$186;
     $189=$i;
     $190=$gi;
     $191=(($190+4784)|0);
     HEAP32[(($191)>>2)]=$189;
    }
   }
  } while(0);
  $195=$i;
  $196=((($195)+(1))|0);
  $i=$196;
 }
 STACKTOP=sp;return;
}


function _mpeg1_scale_bitcount($gfc,$cod_info){
 $gfc=($gfc)|0;
 $cod_info=($cod_info)|0;
 var $1=0,$2=0,$k=0,$sfb=0,$max_slen1=0,$max_slen2=0,$tab=0,$scalefac=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$12=0,$13=0,$14=0,$15=0;
 var $19=0,$20=0,$21=0,$22=0,$25=0,$26=0,$28=0,$29=0,$30=0,$31=0,$32=0,$33=0,$34=0,$35=0,$39=0,$40=0,$42=0,$43=0,$45=0,$46=0;
 var $48=0,$49=0,$51=0,$52=0,$53=0,$54=0,$55=0,$56=0,$57=0,$58=0,$60=0,$61=0,$67=0,$68=0,$69=0,$70=0,$71=0,$73=0,$74=0,$75=0;
 var $76=0,$77=0,$78=0,$80=0,$81=0,$82=0,$83=0,$86=0,$87=0,$90=0,$91=0,$92=0,$93=0,$94=0,$96=0,$97=0,$98=0,$99=0,$100=0,$101=0;
 var $103=0,$104=0,$105=0,$106=0,$109=0,$110=0,$112=0,$113=0,$115=0,$116=0,$118=0,$119=0,$120=0,$121=0,$122=0,$124=0,$125=0,$126=0,$127=0,$128=0;
 var $130=0,$131=0,$132=0,$133=0,$134=0,$135=0,$136=0,$137=0,$139=0,$140=0,$141=0,$142=0,$143=0,$144=0,$145=0,$146=0,$147=0,$150=0,$151=0,$153=0;
 var $154=0,$155=0,$156=0,$157=0,label=0;
 var sp=0;sp=STACKTOP;








 $1=$gfc;
 $2=$cod_info;
 $max_slen1=0;
 $max_slen2=0;
 $3=$2;
 $4=(($3+4608)|0);
 $5=(($4)|0);
 $scalefac=$5;
 $6=$1;
 $7=$2;
 $8=(($7+4788)|0);
 $9=((HEAP32[(($8)>>2)])|0);
 $10=($9|0)==2;
 if ($10) {
  $tab=9184;
  $12=$2;
  $13=(($12+4792)|0);
  $14=((HEAP32[(($13)>>2)])|0);
  $15=($14|0)!=0;
  if ($15) {
   $tab=9248;
  }
 } else {
  $tab=9312;
  $19=$2;
  $20=(($19+4832)|0);
  $21=((HEAP32[(($20)>>2)])|0);
  $22=($21|0)!=0;
  if (!($22)) {
   $sfb=11;
   while(1) {
    $25=$sfb;
    $26=($25|0)<21;
    if (!($26)) {
     break;
    }
    $28=$sfb;
    $29=$scalefac;
    $30=(($29+($28<<2))|0);
    $31=((HEAP32[(($30)>>2)])|0);
    $32=$sfb;
    $33=((9552+($32<<2))|0);
    $34=((HEAP32[(($33)>>2)])|0);
    $35=($31|0)<($34|0);
    if ($35) {
     label = 9;
     break;
    }
    $39=$sfb;
    $40=((($39)+(1))|0);
    $sfb=$40;
   }
   if ((label|0) == 9) {
   }
   $42=$sfb;
   $43=($42|0)==21;
   if ($43) {
    $45=$2;
    $46=(($45+4832)|0);
    HEAP32[(($46)>>2)]=1;
    $sfb=11;
    while(1) {
     $48=$sfb;
     $49=($48|0)<21;
     if (!($49)) {
      break;
     }
     $51=$sfb;
     $52=((9552+($51<<2))|0);
     $53=((HEAP32[(($52)>>2)])|0);
     $54=$sfb;
     $55=$scalefac;
     $56=(($55+($54<<2))|0);
     $57=((HEAP32[(($56)>>2)])|0);
     $58=((($57)-($53))|0);
     HEAP32[(($56)>>2)]=$58;
     $60=$sfb;
     $61=((($60)+(1))|0);
     $sfb=$61;
    }
   }
  }
 }
 $sfb=0;
 while(1) {
  $67=$sfb;
  $68=$2;
  $69=(($68+4868)|0);
  $70=((HEAP32[(($69)>>2)])|0);
  $71=($67|0)<($70|0);
  if (!($71)) {
   break;
  }
  $73=$max_slen1;
  $74=$sfb;
  $75=$scalefac;
  $76=(($75+($74<<2))|0);
  $77=((HEAP32[(($76)>>2)])|0);
  $78=($73|0)<($77|0);
  if ($78) {
   $80=$sfb;
   $81=$scalefac;
   $82=(($81+($80<<2))|0);
   $83=((HEAP32[(($82)>>2)])|0);
   $max_slen1=$83;
  }
  $86=$sfb;
  $87=((($86)+(1))|0);
  $sfb=$87;
 }
 while(1) {
  $90=$sfb;
  $91=$2;
  $92=(($91+4860)|0);
  $93=((HEAP32[(($92)>>2)])|0);
  $94=($90|0)<($93|0);
  if (!($94)) {
   break;
  }
  $96=$max_slen2;
  $97=$sfb;
  $98=$scalefac;
  $99=(($98+($97<<2))|0);
  $100=((HEAP32[(($99)>>2)])|0);
  $101=($96|0)<($100|0);
  if ($101) {
   $103=$sfb;
   $104=$scalefac;
   $105=(($104+($103<<2))|0);
   $106=((HEAP32[(($105)>>2)])|0);
   $max_slen2=$106;
  }
  $109=$sfb;
  $110=((($109)+(1))|0);
  $sfb=$110;
 }
 $112=$2;
 $113=(($112+4844)|0);
 HEAP32[(($113)>>2)]=100000;
 $k=0;
 while(1) {
  $115=$k;
  $116=($115|0)<16;
  if (!($116)) {
   break;
  }
  $118=$max_slen1;
  $119=$k;
  $120=((7256+($119<<2))|0);
  $121=((HEAP32[(($120)>>2)])|0);
  $122=($118|0)<($121|0);
  do {
   if ($122) {
    $124=$max_slen2;
    $125=$k;
    $126=((7128+($125<<2))|0);
    $127=((HEAP32[(($126)>>2)])|0);
    $128=($124|0)<($127|0);
    if (!($128)) {
     break;
    }
    $130=$2;
    $131=(($130+4844)|0);
    $132=((HEAP32[(($131)>>2)])|0);
    $133=$k;
    $134=$tab;
    $135=(($134+($133<<2))|0);
    $136=((HEAP32[(($135)>>2)])|0);
    $137=($132|0)>($136|0);
    if (!($137)) {
     break;
    }
    $139=$k;
    $140=$tab;
    $141=(($140+($139<<2))|0);
    $142=((HEAP32[(($141)>>2)])|0);
    $143=$2;
    $144=(($143+4844)|0);
    HEAP32[(($144)>>2)]=$142;
    $145=$k;
    $146=$2;
    $147=(($146+4784)|0);
    HEAP32[(($147)>>2)]=$145;
   }
  } while(0);
  $150=$k;
  $151=((($150)+(1))|0);
  $k=$151;
 }
 $153=$2;
 $154=(($153+4844)|0);
 $155=((HEAP32[(($154)>>2)])|0);
 $156=($155|0)==100000;
 $157=($156&1);
 STACKTOP=sp;return (($157)|0);
}


function _mpeg2_scale_bitcount($gfc,$cod_info){
 $gfc=($gfc)|0;
 $cod_info=($cod_info)|0;
 var $1=0,$2=0,$table_number=0,$row_in_table=0,$partition=0,$nr_sfb=0,$window=0,$over=0,$i=0,$sfb=0,$max_sfac=0,$partition_table=0,$scalefac=0,$slen1=0,$slen2=0,$slen3=0,$slen4=0,$3=0,$4=0,$5=0;
 var $6=0,$7=0,$8=0,$9=0,$14=0,$15=0,$17=0,$18=0,$20=0,$21=0,$23=0,$24=0,$25=0,$26=0,$28=0,$29=0,$30=0,$31=0,$32=0,$34=0;
 var $35=0,$37=0,$38=0,$39=0,$40=0,$41=0,$43=0,$44=0,$45=0,$48=0,$49=0,$51=0,$52=0,$53=0,$54=0,$55=0,$56=0,$57=0,$58=0,$59=0;
 var $60=0,$61=0,$63=0,$64=0,$65=0,$66=0,$67=0,$68=0,$69=0,$70=0,$71=0,$74=0,$75=0,$78=0,$79=0,$80=0,$81=0,$84=0,$85=0,$88=0;
 var $89=0,$90=0,$91=0,$92=0,$94=0,$95=0,$97=0,$98=0,$99=0,$100=0,$102=0,$103=0,$104=0,$106=0,$107=0,$108=0,$109=0,$110=0,$111=0,$112=0;
 var $113=0,$115=0,$116=0,$117=0,$118=0,$119=0,$120=0,$123=0,$124=0,$125=0,$126=0,$129=0,$130=0,$134=0,$135=0,$137=0,$138=0,$139=0,$140=0,$141=0;
 var $142=0,$143=0,$144=0,$145=0,$147=0,$148=0,$151=0,$152=0,$154=0,$155=0,$157=0,$158=0,$159=0,$160=0,$161=0,$162=0,$163=0,$165=0,$166=0,$168=0;
 var $169=0,$170=0,$171=0,$172=0,$173=0,$174=0,$175=0,$176=0,$178=0,$179=0,$181=0,$182=0,$183=0,$184=0,$185=0,$186=0,$187=0,$188=0,$189=0,$190=0;
 var $191=0,$192=0,$193=0,$194=0,$195=0,$196=0,$197=0,$199=0,$200=0,$201=0,$202=0,$203=0,$204=0,$205=0,$206=0,$207=0,$208=0,$209=0,$210=0,$212=0;
 var $213=0,$214=0,$215=0,$216=0,$217=0,$218=0,$219=0,$220=0,$221=0,$223=0,$224=0,$225=0,$226=0,$227=0,$228=0,$229=0,$231=0,$234=0,$235=0,$237=0;
 var $238=0,$240=0,$241=0,$243=0,$244=0,$245=0,$246=0,$247=0,$248=0,$249=0,$250=0,$251=0,$252=0,$253=0,$254=0,$255=0,$256=0,$257=0,$258=0,$260=0;
 var $261=0,$264=0,label=0;
 var tempVarArgs=0;
 var sp=0;sp=STACKTOP;STACKTOP=(STACKTOP+16)|0;










 $max_sfac=((sp)|0);






 $1=$gfc;
 $2=$cod_info;
 $3=$2;
 $4=(($3+4608)|0);
 $5=(($4)|0);
 $scalefac=$5;
 $6=$2;
 $7=(($6+4832)|0);
 $8=((HEAP32[(($7)>>2)])|0);
 $9=($8|0)!=0;
 if ($9) {
  $table_number=2;
 } else {
  $table_number=0;
 }
 $i=0;
 while(1) {
  $14=$i;
  $15=($14|0)<4;
  if (!($15)) {
   break;
  }
  $17=$i;
  $18=(($max_sfac+($17<<2))|0);
  HEAP32[(($18)>>2)]=0;
  $20=$i;
  $21=((($20)+(1))|0);
  $i=$21;
 }
 $23=$2;
 $24=(($23+4788)|0);
 $25=((HEAP32[(($24)>>2)])|0);
 $26=($25|0)==2;
 if ($26) {
  $row_in_table=1;
  $28=$row_in_table;
  $29=$table_number;
  $30=((10104+((($29)*(48))&-1))|0);
  $31=(($30+($28<<4))|0);
  $32=(($31)|0);
  $partition_table=$32;
  $sfb=0;
  $partition=0;
  while(1) {
   $34=$partition;
   $35=($34|0)<4;
   if (!($35)) {
    break;
   }
   $37=$partition;
   $38=$partition_table;
   $39=(($38+($37<<2))|0);
   $40=((HEAP32[(($39)>>2)])|0);
   $41=(((($40|0))/(3))&-1);
   $nr_sfb=$41;
   $i=0;
   while(1) {
    $43=$i;
    $44=$nr_sfb;
    $45=($43|0)<($44|0);
    if (!($45)) {
     break;
    }
    $window=0;
    while(1) {
     $48=$window;
     $49=($48|0)<3;
     if (!($49)) {
      break;
     }
     $51=$sfb;
     $52=((($51)*(3))&-1);
     $53=$window;
     $54=((($52)+($53))|0);
     $55=$scalefac;
     $56=(($55+($54<<2))|0);
     $57=((HEAP32[(($56)>>2)])|0);
     $58=$partition;
     $59=(($max_sfac+($58<<2))|0);
     $60=((HEAP32[(($59)>>2)])|0);
     $61=($57|0)>($60|0);
     if ($61) {
      $63=$sfb;
      $64=((($63)*(3))&-1);
      $65=$window;
      $66=((($64)+($65))|0);
      $67=$scalefac;
      $68=(($67+($66<<2))|0);
      $69=((HEAP32[(($68)>>2)])|0);
      $70=$partition;
      $71=(($max_sfac+($70<<2))|0);
      HEAP32[(($71)>>2)]=$69;
     }
     $74=$window;
     $75=((($74)+(1))|0);
     $window=$75;
    }
    $78=$i;
    $79=((($78)+(1))|0);
    $i=$79;
    $80=$sfb;
    $81=((($80)+(1))|0);
    $sfb=$81;
   }
   $84=$partition;
   $85=((($84)+(1))|0);
   $partition=$85;
  }
 } else {
  $row_in_table=0;
  $88=$row_in_table;
  $89=$table_number;
  $90=((10104+((($89)*(48))&-1))|0);
  $91=(($90+($88<<4))|0);
  $92=(($91)|0);
  $partition_table=$92;
  $sfb=0;
  $partition=0;
  while(1) {
   $94=$partition;
   $95=($94|0)<4;
   if (!($95)) {
    break;
   }
   $97=$partition;
   $98=$partition_table;
   $99=(($98+($97<<2))|0);
   $100=((HEAP32[(($99)>>2)])|0);
   $nr_sfb=$100;
   $i=0;
   while(1) {
    $102=$i;
    $103=$nr_sfb;
    $104=($102|0)<($103|0);
    if (!($104)) {
     break;
    }
    $106=$sfb;
    $107=$scalefac;
    $108=(($107+($106<<2))|0);
    $109=((HEAP32[(($108)>>2)])|0);
    $110=$partition;
    $111=(($max_sfac+($110<<2))|0);
    $112=((HEAP32[(($111)>>2)])|0);
    $113=($109|0)>($112|0);
    if ($113) {
     $115=$sfb;
     $116=$scalefac;
     $117=(($116+($115<<2))|0);
     $118=((HEAP32[(($117)>>2)])|0);
     $119=$partition;
     $120=(($max_sfac+($119<<2))|0);
     HEAP32[(($120)>>2)]=$118;
    }
    $123=$i;
    $124=((($123)+(1))|0);
    $i=$124;
    $125=$sfb;
    $126=((($125)+(1))|0);
    $sfb=$126;
   }
   $129=$partition;
   $130=((($129)+(1))|0);
   $partition=$130;
  }
 }
 $over=0;
 $partition=0;
 while(1) {
  $134=$partition;
  $135=($134|0)<4;
  if (!($135)) {
   break;
  }
  $137=$partition;
  $138=(($max_sfac+($137<<2))|0);
  $139=((HEAP32[(($138)>>2)])|0);
  $140=$partition;
  $141=$table_number;
  $142=((10568+($141<<4))|0);
  $143=(($142+($140<<2))|0);
  $144=((HEAP32[(($143)>>2)])|0);
  $145=($139|0)>($144|0);
  if ($145) {
   $147=$over;
   $148=((($147)+(1))|0);
   $over=$148;
  }
  $151=$partition;
  $152=((($151)+(1))|0);
  $partition=$152;
 }
 $154=$over;
 $155=($154|0)!=0;
 if (!($155)) {
  $157=$row_in_table;
  $158=$table_number;
  $159=((10104+((($158)*(48))&-1))|0);
  $160=(($159+($157<<4))|0);
  $161=(($160)|0);
  $162=$2;
  $163=(($162+5188)|0);
  HEAP32[(($163)>>2)]=$161;
  $partition=0;
  while(1) {
   $165=$partition;
   $166=($165|0)<4;
   if (!($166)) {
    break;
   }
   $168=$partition;
   $169=(($max_sfac+($168<<2))|0);
   $170=((HEAP32[(($169)>>2)])|0);
   $171=((10464+($170<<2))|0);
   $172=((HEAP32[(($171)>>2)])|0);
   $173=$partition;
   $174=$2;
   $175=(($174+5192)|0);
   $176=(($175+($173<<2))|0);
   HEAP32[(($176)>>2)]=$172;
   $178=$partition;
   $179=((($178)+(1))|0);
   $partition=$179;
  }
  $181=$2;
  $182=(($181+5192)|0);
  $183=(($182)|0);
  $184=((HEAP32[(($183)>>2)])|0);
  $slen1=$184;
  $185=$2;
  $186=(($185+5192)|0);
  $187=(($186+4)|0);
  $188=((HEAP32[(($187)>>2)])|0);
  $slen2=$188;
  $189=$2;
  $190=(($189+5192)|0);
  $191=(($190+8)|0);
  $192=((HEAP32[(($191)>>2)])|0);
  $slen3=$192;
  $193=$2;
  $194=(($193+5192)|0);
  $195=(($194+12)|0);
  $196=((HEAP32[(($195)>>2)])|0);
  $slen4=$196;
  $197=$table_number;
  if (((($197|0))|0)==((0)|0)) {
   $199=$slen1;
   $200=((($199)*(5))&-1);
   $201=$slen2;
   $202=((($200)+($201))|0);
   $203=$202<<4;
   $204=$slen3;
   $205=$204<<2;
   $206=((($203)+($205))|0);
   $207=$slen4;
   $208=((($206)+($207))|0);
   $209=$2;
   $210=(($209+4784)|0);
   HEAP32[(($210)>>2)]=$208;
  } else if (((($197|0))|0)==((1)|0)) {
   $212=$slen1;
   $213=((($212)*(5))&-1);
   $214=$slen2;
   $215=((($213)+($214))|0);
   $216=$215<<2;
   $217=((($216)+(400))|0);
   $218=$slen3;
   $219=((($217)+($218))|0);
   $220=$2;
   $221=(($220+4784)|0);
   HEAP32[(($221)>>2)]=$219;
  } else if (((($197|0))|0)==((2)|0)) {
   $223=$slen1;
   $224=((($223)*(3))&-1);
   $225=((($224)+(500))|0);
   $226=$slen2;
   $227=((($225)+($226))|0);
   $228=$2;
   $229=(($228+4784)|0);
   HEAP32[(($229)>>2)]=$227;
  } else {
   $231=$1;
   _lame_errorf($231,17152,(((tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs))|0)); STACKTOP=tempVarArgs;
  }
 }
 $234=$over;
 $235=($234|0)!=0;
 if ($235) {
  $264=$over;
  STACKTOP=sp;return (($264)|0);
 }
 $237=$2;
 $238=(($237+4844)|0);
 HEAP32[(($238)>>2)]=0;
 $partition=0;
 while(1) {
  $240=$partition;
  $241=($240|0)<4;
  if (!($241)) {
   break;
  }
  $243=$partition;
  $244=$2;
  $245=(($244+5192)|0);
  $246=(($245+($243<<2))|0);
  $247=((HEAP32[(($246)>>2)])|0);
  $248=$partition;
  $249=$2;
  $250=(($249+5188)|0);
  $251=((HEAP32[(($250)>>2)])|0);
  $252=(($251+($248<<2))|0);
  $253=((HEAP32[(($252)>>2)])|0);
  $254=(Math_imul($247,$253)|0);
  $255=$2;
  $256=(($255+4844)|0);
  $257=((HEAP32[(($256)>>2)])|0);
  $258=((($257)+($254))|0);
  HEAP32[(($256)>>2)]=$258;
  $260=$partition;
  $261=((($260)+(1))|0);
  $partition=$261;
 }
 $264=$over;
 STACKTOP=sp;return (($264)|0);
}


function _choose_table_nonMMX($ix,$end,$_s){
 $ix=($ix)|0;
 $end=($end)|0;
 $_s=($_s)|0;
 var $1=0,$2=0,$3=0,$4=0,$s=0,$max=0,$choice=0,$choice2=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$12=0,$13=0,$14=0,$15=0,$16=0,$17=0;
 var $18=0,$19=0,$21=0,$22=0,$24=0,$26=0,$27=0,$29=0,$30=0,$32=0,$33=0,$34=0,$35=0,$36=0,$37=0,$41=0,$42=0,$44=0,$45=0,$47=0;
 var $48=0,$50=0,$51=0,$52=0,$53=0,$54=0,$55=0,$59=0,$60=0,$62=0,$63=0,$64=0,$65=0,$66=0,$67=0,$69=0,label=0;
 var sp=0;sp=STACKTOP;








 $2=$ix;
 $3=$end;
 $4=$_s;
 $5=$4;
 $s=$5;
 $6=$2;
 $7=$3;
 $8=((_ix_max($6,$7))|0);
 $max=$8;
 $9=$max;
 $10=($9>>>0)<=((15)>>>0);
 if ($10) {
  $12=$max;
  $13=((15072+($12<<2))|0);
  $14=((HEAP32[(($13)>>2)])|0);
  $15=$2;
  $16=$3;
  $17=$max;
  $18=$s;
  $19=((FUNCTION_TABLE_iiiii[($14)&15]($15,$16,$17,$18))|0);
  $1=$19;
  $69=$1;
  STACKTOP=sp;return (($69)|0);
 }
 $21=$max;
 $22=($21>>>0)>((8206)>>>0);
 if ($22) {
  $24=$s;
  HEAP32[(($24)>>2)]=100000;
  $1=-1;
  $69=$1;
  STACKTOP=sp;return (($69)|0);
 }
 $26=$max;
 $27=((($26)-(15))|0);
 $max=$27;
 $choice2=24;
 while(1) {
  $29=$choice2;
  $30=($29|0)<32;
  if (!($30)) {
   break;
  }
  $32=$choice2;
  $33=((12312+($32<<4))|0);
  $34=(($33+4)|0);
  $35=((HEAP32[(($34)>>2)])|0);
  $36=$max;
  $37=($35>>>0)>=($36>>>0);
  if ($37) {
   label = 8;
   break;
  }
  $41=$choice2;
  $42=((($41)+(1))|0);
  $choice2=$42;
 }
 if ((label|0) == 8) {
 }
 $44=$choice2;
 $45=((($44)-(8))|0);
 $choice=$45;
 while(1) {
  $47=$choice;
  $48=($47|0)<24;
  if (!($48)) {
   break;
  }
  $50=$choice;
  $51=((12312+($50<<4))|0);
  $52=(($51+4)|0);
  $53=((HEAP32[(($52)>>2)])|0);
  $54=$max;
  $55=($53>>>0)>=($54>>>0);
  if ($55) {
   label = 14;
   break;
  }
  $59=$choice;
  $60=((($59)+(1))|0);
  $choice=$60;
 }
 if ((label|0) == 14) {
 }
 $62=$2;
 $63=$3;
 $64=$choice;
 $65=$choice2;
 $66=$s;
 $67=((_count_bit_ESC($62,$63,$64,$65,$66))|0);
 $1=$67;
 $69=$1;
 STACKTOP=sp;return (($69)|0);
}


function _count_bit_null($ix,$end,$max,$s){
 $ix=($ix)|0;
 $end=($end)|0;
 $max=($max)|0;
 $s=($s)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,label=0;
 var sp=0;sp=STACKTOP;




 $1=$ix;
 $2=$end;
 $3=$max;
 $4=$s;
 $5=$1;
 $6=$2;
 $7=$3;
 $8=$4;
 STACKTOP=sp;return ((0)|0);
}


function _count_bit_noESC($ix,$end,$mx,$s){
 $ix=($ix)|0;
 $end=($end)|0;
 $mx=($mx)|0;
 $s=($s)|0;
 var $1=0,$2=0,$3=0,$4=0,$sum1=0,$hlen1=0,$x0=0,$x1=0,$5=0,$6=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$14=0,$15=0,$16=0,$17=0;
 var $18=0,$19=0,$20=0,$21=0,$22=0,$23=0,$24=0,$26=0,$27=0,$28=0,$30=0,$31=0,$32=0,$33=0,label=0;
 var sp=0;sp=STACKTOP;








 $1=$ix;
 $2=$end;
 $3=$mx;
 $4=$s;
 $sum1=0;
 $5=((HEAP32[((12340)>>2)])|0);
 $hlen1=$5;
 $6=$3;
 while(1) {
  $8=$1;
  $9=(($8+4)|0);
  $1=$9;
  $10=((HEAP32[(($8)>>2)])|0);
  $x0=$10;
  $11=$1;
  $12=(($11+4)|0);
  $1=$12;
  $13=((HEAP32[(($11)>>2)])|0);
  $x1=$13;
  $14=$x0;
  $15=$x0;
  $16=((($14)+($15))|0);
  $17=$x1;
  $18=((($16)+($17))|0);
  $19=$hlen1;
  $20=(($19+$18)|0);
  $21=((HEAP8[($20)])|0);
  $22=($21&255);
  $23=$sum1;
  $24=((($23)+($22))|0);
  $sum1=$24;
  $26=$1;
  $27=$2;
  $28=($26>>>0)<($27>>>0);
  if (!($28)) {
   break;
  }
 }
 $30=$sum1;
 $31=$4;
 $32=((HEAP32[(($31)>>2)])|0);
 $33=((($32)+($30))|0);
 HEAP32[(($31)>>2)]=$33;
 STACKTOP=sp;return ((1)|0);
}


function _count_bit_noESC_from2($ix,$end,$max,$s){
 $ix=($ix)|0;
 $end=($end)|0;
 $max=($max)|0;
 $s=($s)|0;
 var $1=0,$2=0,$3=0,$4=0,$t1=0,$xlen=0,$table=0,$sum=0,$sum2=0,$x0=0,$x1=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0;
 var $14=0,$15=0,$17=0,$18=0,$19=0,$20=0,$21=0,$22=0,$23=0,$24=0,$25=0,$26=0,$27=0,$28=0,$29=0,$30=0,$31=0,$32=0,$34=0,$35=0;
 var $36=0,$38=0,$39=0,$40=0,$41=0,$42=0,$43=0,$44=0,$46=0,$47=0,$48=0,$50=0,$51=0,$52=0,$53=0,$54=0,label=0;
 var sp=0;sp=STACKTOP;











 $1=$ix;
 $2=$end;
 $3=$max;
 $4=$s;
 $5=$3;
 $6=((($5)-(1))|0);
 $7=((12248+($6<<2))|0);
 $8=((HEAP32[(($7)>>2)])|0);
 $t1=$8;
 $9=$t1;
 $10=((12312+($9<<4))|0);
 $11=(($10)|0);
 $12=((HEAP32[(($11)>>2)])|0);
 $xlen=$12;
 $13=$t1;
 $14=($13|0)==2;
 $15=($14?2232:2168);
 $table=$15;
 $sum=0;
 while(1) {
  $17=$1;
  $18=(($17+4)|0);
  $1=$18;
  $19=((HEAP32[(($17)>>2)])|0);
  $x0=$19;
  $20=$1;
  $21=(($20+4)|0);
  $1=$21;
  $22=((HEAP32[(($20)>>2)])|0);
  $x1=$22;
  $23=$x0;
  $24=$xlen;
  $25=(Math_imul($23,$24)|0);
  $26=$x1;
  $27=((($25)+($26))|0);
  $28=$table;
  $29=(($28+($27<<2))|0);
  $30=((HEAP32[(($29)>>2)])|0);
  $31=$sum;
  $32=((($31)+($30))|0);
  $sum=$32;
  $34=$1;
  $35=$2;
  $36=($34>>>0)<($35>>>0);
  if (!($36)) {
   break;
  }
 }
 $38=$sum;
 $39=$38&65535;
 $sum2=$39;
 $40=$sum;
 $41=$40>>>16;
 $sum=$41;
 $42=$sum;
 $43=$sum2;
 $44=($42>>>0)>($43>>>0);
 if (!($44)) {
  $50=$sum;
  $51=$4;
  $52=((HEAP32[(($51)>>2)])|0);
  $53=((($52)+($50))|0);
  HEAP32[(($51)>>2)]=$53;
  $54=$t1;
  STACKTOP=sp;return (($54)|0);
 }
 $46=$sum2;
 $sum=$46;
 $47=$t1;
 $48=((($47)+(1))|0);
 $t1=$48;
 $50=$sum;
 $51=$4;
 $52=((HEAP32[(($51)>>2)])|0);
 $53=((($52)+($50))|0);
 HEAP32[(($51)>>2)]=$53;
 $54=$t1;
 STACKTOP=sp;return (($54)|0);
}


function _count_bit_noESC_from3($ix,$end,$max,$s){
 $ix=($ix)|0;
 $end=($end)|0;
 $max=($max)|0;
 $s=($s)|0;
 var $1=0,$2=0,$3=0,$4=0,$t1=0,$sum1=0,$sum2=0,$sum3=0,$xlen=0,$hlen1=0,$hlen2=0,$hlen3=0,$t=0,$x0=0,$x1=0,$x=0,$5=0,$6=0,$7=0,$8=0;
 var $9=0,$10=0,$11=0,$12=0,$13=0,$14=0,$15=0,$16=0,$17=0,$18=0,$19=0,$20=0,$21=0,$22=0,$23=0,$24=0,$25=0,$26=0,$28=0,$29=0;
 var $30=0,$31=0,$32=0,$33=0,$34=0,$35=0,$36=0,$37=0,$38=0,$39=0,$40=0,$41=0,$42=0,$43=0,$44=0,$45=0,$46=0,$47=0,$48=0,$49=0;
 var $50=0,$51=0,$52=0,$53=0,$54=0,$55=0,$56=0,$57=0,$58=0,$59=0,$61=0,$62=0,$63=0,$65=0,$66=0,$67=0,$68=0,$70=0,$71=0,$72=0;
 var $74=0,$75=0,$76=0,$78=0,$79=0,$80=0,$82=0,$83=0,$84=0,$85=0,$86=0,label=0;
 var sp=0;sp=STACKTOP;
















 $1=$ix;
 $2=$end;
 $3=$max;
 $4=$s;
 $5=$3;
 $6=((($5)-(1))|0);
 $7=((12248+($6<<2))|0);
 $8=((HEAP32[(($7)>>2)])|0);
 $t1=$8;
 $sum1=0;
 $sum2=0;
 $sum3=0;
 $9=$t1;
 $10=((12312+($9<<4))|0);
 $11=(($10)|0);
 $12=((HEAP32[(($11)>>2)])|0);
 $xlen=$12;
 $13=$t1;
 $14=((12312+($13<<4))|0);
 $15=(($14+12)|0);
 $16=((HEAP32[(($15)>>2)])|0);
 $hlen1=$16;
 $17=$t1;
 $18=((($17)+(1))|0);
 $19=((12312+($18<<4))|0);
 $20=(($19+12)|0);
 $21=((HEAP32[(($20)>>2)])|0);
 $hlen2=$21;
 $22=$t1;
 $23=((($22)+(2))|0);
 $24=((12312+($23<<4))|0);
 $25=(($24+12)|0);
 $26=((HEAP32[(($25)>>2)])|0);
 $hlen3=$26;
 while(1) {
  $28=$1;
  $29=(($28+4)|0);
  $1=$29;
  $30=((HEAP32[(($28)>>2)])|0);
  $x0=$30;
  $31=$1;
  $32=(($31+4)|0);
  $1=$32;
  $33=((HEAP32[(($31)>>2)])|0);
  $x1=$33;
  $34=$x0;
  $35=$xlen;
  $36=(Math_imul($34,$35)|0);
  $37=$x1;
  $38=((($36)+($37))|0);
  $x=$38;
  $39=$x;
  $40=$hlen1;
  $41=(($40+$39)|0);
  $42=((HEAP8[($41)])|0);
  $43=($42&255);
  $44=$sum1;
  $45=((($44)+($43))|0);
  $sum1=$45;
  $46=$x;
  $47=$hlen2;
  $48=(($47+$46)|0);
  $49=((HEAP8[($48)])|0);
  $50=($49&255);
  $51=$sum2;
  $52=((($51)+($50))|0);
  $sum2=$52;
  $53=$x;
  $54=$hlen3;
  $55=(($54+$53)|0);
  $56=((HEAP8[($55)])|0);
  $57=($56&255);
  $58=$sum3;
  $59=((($58)+($57))|0);
  $sum3=$59;
  $61=$1;
  $62=$2;
  $63=($61>>>0)<($62>>>0);
  if (!($63)) {
   break;
  }
 }
 $65=$t1;
 $t=$65;
 $66=$sum1;
 $67=$sum2;
 $68=($66>>>0)>($67>>>0);
 if ($68) {
  $70=$sum2;
  $sum1=$70;
  $71=$t;
  $72=((($71)+(1))|0);
  $t=$72;
 }
 $74=$sum1;
 $75=$sum3;
 $76=($74>>>0)>($75>>>0);
 if (!($76)) {
  $82=$sum1;
  $83=$4;
  $84=((HEAP32[(($83)>>2)])|0);
  $85=((($84)+($82))|0);
  HEAP32[(($83)>>2)]=$85;
  $86=$t;
  STACKTOP=sp;return (($86)|0);
 }
 $78=$sum3;
 $sum1=$78;
 $79=$t1;
 $80=((($79)+(2))|0);
 $t=$80;
 $82=$sum1;
 $83=$4;
 $84=((HEAP32[(($83)>>2)])|0);
 $85=((($84)+($82))|0);
 HEAP32[(($83)>>2)]=$85;
 $86=$t;
 STACKTOP=sp;return (($86)|0);
}


function _quantize_lines_xrpow($l,$istep,$xp,$pi){
 $l=($l)|0;
 $istep=+($istep);
 $xp=($xp)|0;
 $pi=($pi)|0;
 var $1=0,$2=.0,$3=0,$4=0,$fi=0,$remaining=0,$x0=.0,$x1=.0,$x2=.0,$x3=.0,$x01=.0,$x12=.0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0;
 var $14=0,$15=0,$16=0,$18=.0,$19=0,$20=0,$21=.0,$22=.0,$23=.0,$24=.0,$25=0,$26=0,$27=.0,$28=.0,$29=.0,$30=.0,$31=0,$32=0,$33=.0,$34=.0;
 var $35=.0,$36=.0,$37=0,$38=0,$39=.0,$40=.0,$41=.0,$42=.0,$43=.0,$44=.0,$45=.0,$46=0,$47=0,$48=0,$49=.0,$50=.0,$51=.0,$52=.0,$53=0,$54=0;
 var $55=0,$56=.0,$57=.0,$58=.0,$59=.0,$60=0,$61=0,$62=0,$63=.0,$64=.0,$65=.0,$66=.0,$67=0,$68=0,$69=0,$70=.0,$71=0,$72=0,$73=0,$74=0;
 var $75=0,$76=0,$77=.0,$78=.0,$79=.0,$80=.0,$81=0,$82=0,$83=0,$84=.0,$85=0,$86=0,$87=0,$88=0,$89=0,$90=0,$91=.0,$92=.0,$93=.0,$94=.0;
 var $95=0,$96=0,$97=0,$98=.0,$99=0,$100=0,$101=0,$102=0,$103=0,$104=0,$105=.0,$106=.0,$107=.0,$108=.0,$109=0,$110=0,$111=0,$112=.0,$113=0,$114=0;
 var $115=0,$116=0,$117=0,$118=0,$119=.0,$120=.0,$121=.0,$122=.0,$123=0,$124=0,$125=0,$126=0,$127=0,$128=0,$129=0,$130=0,$131=0,$132=0,$133=0,$134=0;
 var $135=0,$136=0,$137=0,$138=0,$139=0,$140=0,$141=0,$142=0,$143=0,$144=0,$145=0,$146=0,$147=0,$148=0,$149=0,$151=0,$152=0,$154=.0,$155=0,$156=0;
 var $157=.0,$158=.0,$159=.0,$160=.0,$161=0,$162=0,$163=.0,$164=.0,$165=.0,$166=.0,$167=.0,$168=.0,$169=.0,$170=0,$171=0,$172=0,$173=.0,$174=.0,$175=.0,$176=.0;
 var $177=0,$178=0,$179=0,$180=.0,$181=0,$182=0,$183=0,$184=0,$185=0,$186=0,$187=.0,$188=.0,$189=.0,$190=.0,$191=0,$192=0,$193=0,$194=.0,$195=0,$196=0;
 var $197=0,$198=0,$199=0,$200=0,$201=.0,$202=.0,$203=.0,$204=.0,$205=0,$206=0,$207=0,$208=0,$209=0,$210=0,$211=0,$212=0,$213=0,$214=0,$215=0,$216=0;
 var $217=0,label=0;
 var sp=0;sp=STACKTOP;












 $1=$l;
 $2=$istep;
 $3=$xp;
 $4=$pi;
 $5=$4;
 $6=$5;
 $fi=$6;
 $7=$1;
 $8=$7>>>1;
 $1=$8;
 $9=$1;
 $10=(((($9>>>0))%(2))&-1);
 $remaining=$10;
 $11=$1;
 $12=$11>>>1;
 $1=$12;
 while(1) {
  $14=$1;
  $15=((($14)-(1))|0);
  $1=$15;
  $16=($14|0)!=0;
  if (!($16)) {
   break;
  }
  $18=$2;
  $19=$3;
  $20=(($19)|0);
  $21=(+(HEAPF32[(($20)>>2)]));
  $22=($18)*($21);
  $23=$22;
  $x0=$23;
  $24=$2;
  $25=$3;
  $26=(($25+4)|0);
  $27=(+(HEAPF32[(($26)>>2)]));
  $28=($24)*($27);
  $29=$28;
  $x1=$29;
  $30=$2;
  $31=$3;
  $32=(($31+8)|0);
  $33=(+(HEAPF32[(($32)>>2)]));
  $34=($30)*($33);
  $35=$34;
  $x2=$35;
  $36=$2;
  $37=$3;
  $38=(($37+12)|0);
  $39=(+(HEAPF32[(($38)>>2)]));
  $40=($36)*($39);
  $41=$40;
  $x3=$41;
  $42=$x0;
  $43=($42)+((8388608.0));
  $x0=$43;
  $44=$x0;
  $45=$44;
  $46=$fi;
  $47=(($46)|0);
  $48=$47;
  HEAPF32[(($48)>>2)]=$45;
  $49=$x1;
  $50=($49)+((8388608.0));
  $x1=$50;
  $51=$x1;
  $52=$51;
  $53=$fi;
  $54=(($53+4)|0);
  $55=$54;
  HEAPF32[(($55)>>2)]=$52;
  $56=$x2;
  $57=($56)+((8388608.0));
  $x2=$57;
  $58=$x2;
  $59=$58;
  $60=$fi;
  $61=(($60+8)|0);
  $62=$61;
  HEAPF32[(($62)>>2)]=$59;
  $63=$x3;
  $64=($63)+((8388608.0));
  $x3=$64;
  $65=$x3;
  $66=$65;
  $67=$fi;
  $68=(($67+12)|0);
  $69=$68;
  HEAPF32[(($69)>>2)]=$66;
  $70=$x0;
  $71=$fi;
  $72=(($71)|0);
  $73=$72;
  $74=((HEAP32[(($73)>>2)])|0);
  $75=((($74)-(1258291200))|0);
  $76=((69616+($75<<2))|0);
  $77=(+(HEAPF32[(($76)>>2)]));
  $78=$77;
  $79=($70)+($78);
  $80=$79;
  $81=$fi;
  $82=(($81)|0);
  $83=$82;
  HEAPF32[(($83)>>2)]=$80;
  $84=$x1;
  $85=$fi;
  $86=(($85+4)|0);
  $87=$86;
  $88=((HEAP32[(($87)>>2)])|0);
  $89=((($88)-(1258291200))|0);
  $90=((69616+($89<<2))|0);
  $91=(+(HEAPF32[(($90)>>2)]));
  $92=$91;
  $93=($84)+($92);
  $94=$93;
  $95=$fi;
  $96=(($95+4)|0);
  $97=$96;
  HEAPF32[(($97)>>2)]=$94;
  $98=$x2;
  $99=$fi;
  $100=(($99+8)|0);
  $101=$100;
  $102=((HEAP32[(($101)>>2)])|0);
  $103=((($102)-(1258291200))|0);
  $104=((69616+($103<<2))|0);
  $105=(+(HEAPF32[(($104)>>2)]));
  $106=$105;
  $107=($98)+($106);
  $108=$107;
  $109=$fi;
  $110=(($109+8)|0);
  $111=$110;
  HEAPF32[(($111)>>2)]=$108;
  $112=$x3;
  $113=$fi;
  $114=(($113+12)|0);
  $115=$114;
  $116=((HEAP32[(($115)>>2)])|0);
  $117=((($116)-(1258291200))|0);
  $118=((69616+($117<<2))|0);
  $119=(+(HEAPF32[(($118)>>2)]));
  $120=$119;
  $121=($112)+($120);
  $122=$121;
  $123=$fi;
  $124=(($123+12)|0);
  $125=$124;
  HEAPF32[(($125)>>2)]=$122;
  $126=$fi;
  $127=(($126)|0);
  $128=$127;
  $129=((HEAP32[(($128)>>2)])|0);
  $130=((($129)-(1258291200))|0);
  HEAP32[(($128)>>2)]=$130;
  $131=$fi;
  $132=(($131+4)|0);
  $133=$132;
  $134=((HEAP32[(($133)>>2)])|0);
  $135=((($134)-(1258291200))|0);
  HEAP32[(($133)>>2)]=$135;
  $136=$fi;
  $137=(($136+8)|0);
  $138=$137;
  $139=((HEAP32[(($138)>>2)])|0);
  $140=((($139)-(1258291200))|0);
  HEAP32[(($138)>>2)]=$140;
  $141=$fi;
  $142=(($141+12)|0);
  $143=$142;
  $144=((HEAP32[(($143)>>2)])|0);
  $145=((($144)-(1258291200))|0);
  HEAP32[(($143)>>2)]=$145;
  $146=$fi;
  $147=(($146+16)|0);
  $fi=$147;
  $148=$3;
  $149=(($148+16)|0);
  $3=$149;
 }
 $151=$remaining;
 $152=($151|0)!=0;
 if (!($152)) {
  STACKTOP=sp;return;
 }
 $154=$2;
 $155=$3;
 $156=(($155)|0);
 $157=(+(HEAPF32[(($156)>>2)]));
 $158=($154)*($157);
 $159=$158;
 $x01=$159;
 $160=$2;
 $161=$3;
 $162=(($161+4)|0);
 $163=(+(HEAPF32[(($162)>>2)]));
 $164=($160)*($163);
 $165=$164;
 $x12=$165;
 $166=$x01;
 $167=($166)+((8388608.0));
 $x01=$167;
 $168=$x01;
 $169=$168;
 $170=$fi;
 $171=(($170)|0);
 $172=$171;
 HEAPF32[(($172)>>2)]=$169;
 $173=$x12;
 $174=($173)+((8388608.0));
 $x12=$174;
 $175=$x12;
 $176=$175;
 $177=$fi;
 $178=(($177+4)|0);
 $179=$178;
 HEAPF32[(($179)>>2)]=$176;
 $180=$x01;
 $181=$fi;
 $182=(($181)|0);
 $183=$182;
 $184=((HEAP32[(($183)>>2)])|0);
 $185=((($184)-(1258291200))|0);
 $186=((69616+($185<<2))|0);
 $187=(+(HEAPF32[(($186)>>2)]));
 $188=$187;
 $189=($180)+($188);
 $190=$189;
 $191=$fi;
 $192=(($191)|0);
 $193=$192;
 HEAPF32[(($193)>>2)]=$190;
 $194=$x12;
 $195=$fi;
 $196=(($195+4)|0);
 $197=$196;
 $198=((HEAP32[(($197)>>2)])|0);
 $199=((($198)-(1258291200))|0);
 $200=((69616+($199<<2))|0);
 $201=(+(HEAPF32[(($200)>>2)]));
 $202=$201;
 $203=($194)+($202);
 $204=$203;
 $205=$fi;
 $206=(($205+4)|0);
 $207=$206;
 HEAPF32[(($207)>>2)]=$204;
 $208=$fi;
 $209=(($208)|0);
 $210=$209;
 $211=((HEAP32[(($210)>>2)])|0);
 $212=((($211)-(1258291200))|0);
 HEAP32[(($210)>>2)]=$212;
 $213=$fi;
 $214=(($213+4)|0);
 $215=$214;
 $216=((HEAP32[(($215)>>2)])|0);
 $217=((($216)-(1258291200))|0);
 HEAP32[(($215)>>2)]=$217;
 STACKTOP=sp;return;
}


function _quantize_lines_xrpow_01($l,$istep,$xr,$ix){
 $l=($l)|0;
 $istep=+($istep);
 $xr=($xr)|0;
 $ix=($ix)|0;
 var $1=0,$2=.0,$3=0,$4=0,$compareval0=.0,$i=0,$xr_0=.0,$xr_1=.0,$ix_0=0,$ix_1=0,$5=.0,$6=.0,$8=0,$9=0,$10=0,$12=0,$13=0,$14=0,$15=0,$16=.0;
 var $17=0,$18=0,$19=0,$20=0,$21=.0,$22=.0,$23=.0,$24=0,$25=0,$26=.0,$27=.0,$28=0,$29=0,$30=0,$31=0,$32=0,$33=0,$34=0,$35=0,$36=0;
 var $37=0,$38=0,$39=0,$41=0,$42=0,label=0;
 var sp=0;sp=STACKTOP;










 $1=$l;
 $2=$istep;
 $3=$xr;
 $4=$ix;
 $5=$2;
 $6=((0.5945999622344971))/($5);
 $compareval0=$6;
 $i=0;
 while(1) {
  $8=$i;
  $9=$1;
  $10=($8>>>0)<($9>>>0);
  if (!($10)) {
   break;
  }
  $12=$i;
  $13=(($12)|0);
  $14=$3;
  $15=(($14+($13<<2))|0);
  $16=(+(HEAPF32[(($15)>>2)]));
  $xr_0=$16;
  $17=$i;
  $18=((($17)+(1))|0);
  $19=$3;
  $20=(($19+($18<<2))|0);
  $21=(+(HEAPF32[(($20)>>2)]));
  $xr_1=$21;
  $22=$compareval0;
  $23=$xr_0;
  $24=$22>$23;
  $25=($24?0:1);
  $ix_0=$25;
  $26=$compareval0;
  $27=$xr_1;
  $28=$26>$27;
  $29=($28?0:1);
  $ix_1=$29;
  $30=$ix_0;
  $31=$i;
  $32=(($31)|0);
  $33=$4;
  $34=(($33+($32<<2))|0);
  HEAP32[(($34)>>2)]=$30;
  $35=$ix_1;
  $36=$i;
  $37=((($36)+(1))|0);
  $38=$4;
  $39=(($38+($37<<2))|0);
  HEAP32[(($39)>>2)]=$35;
  $41=$i;
  $42=((($41)+(2))|0);
  $i=$42;
 }
 STACKTOP=sp;return;
}


function _ix_max($ix,$end){
 $ix=($ix)|0;
 $end=($end)|0;
 var $1=0,$2=0,$max1=0,$max2=0,$x1=0,$x2=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0,$14=0,$16=0,$17=0,$18=0,$20=0;
 var $23=0,$24=0,$25=0,$27=0,$28=0,$29=0,$31=0,$33=0,label=0;
 var sp=0;sp=STACKTOP;






 $1=$ix;
 $2=$end;
 $max1=0;
 $max2=0;
 while(1) {
  $4=$1;
  $5=(($4+4)|0);
  $1=$5;
  $6=((HEAP32[(($4)>>2)])|0);
  $x1=$6;
  $7=$1;
  $8=(($7+4)|0);
  $1=$8;
  $9=((HEAP32[(($7)>>2)])|0);
  $x2=$9;
  $10=$max1;
  $11=$x1;
  $12=($10|0)<($11|0);
  if ($12) {
   $14=$x1;
   $max1=$14;
  }
  $16=$max2;
  $17=$x2;
  $18=($16|0)<($17|0);
  if ($18) {
   $20=$x2;
   $max2=$20;
  }
  $23=$1;
  $24=$2;
  $25=($23>>>0)<($24>>>0);
  if (!($25)) {
   break;
  }
 }
 $27=$max1;
 $28=$max2;
 $29=($27|0)<($28|0);
 if (!($29)) {
  $33=$max1;
  STACKTOP=sp;return (($33)|0);
 }
 $31=$max2;
 $max1=$31;
 $33=$max1;
 STACKTOP=sp;return (($33)|0);
}


function _count_bit_ESC($ix,$end,$t1,$t2,$s){
 $ix=($ix)|0;
 $end=($end)|0;
 $t1=($t1)|0;
 $t2=($t2)|0;
 $s=($s)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$linbits=0,$sum=0,$sum2=0,$x=0,$y=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$14=0,$15=0;
 var $17=0,$18=0,$19=0,$20=0,$21=0,$22=0,$23=0,$24=0,$26=0,$27=0,$28=0,$30=0,$31=0,$33=0,$34=0,$35=0,$37=0,$38=0,$39=0,$40=0;
 var $41=0,$42=0,$43=0,$44=0,$45=0,$46=0,$48=0,$49=0,$50=0,$52=0,$53=0,$54=0,$55=0,$56=0,$57=0,$58=0,$60=0,$61=0,$63=0,$64=0;
 var $65=0,$66=0,$67=0,label=0;
 var sp=0;sp=STACKTOP;










 $1=$ix;
 $2=$end;
 $3=$t1;
 $4=$t2;
 $5=$s;
 $6=$3;
 $7=((12312+($6<<4))|0);
 $8=(($7)|0);
 $9=((HEAP32[(($8)>>2)])|0);
 $10=($9<<16);
 $11=$4;
 $12=((12312+($11<<4))|0);
 $13=(($12)|0);
 $14=((HEAP32[(($13)>>2)])|0);
 $15=((($10)+($14))|0);
 $linbits=$15;
 $sum=0;
 while(1) {
  $17=$1;
  $18=(($17+4)|0);
  $1=$18;
  $19=((HEAP32[(($17)>>2)])|0);
  $x=$19;
  $20=$1;
  $21=(($20+4)|0);
  $1=$21;
  $22=((HEAP32[(($20)>>2)])|0);
  $y=$22;
  $23=$x;
  $24=($23>>>0)>=((15)>>>0);
  if ($24) {
   $x=15;
   $26=$linbits;
   $27=$sum;
   $28=((($27)+($26))|0);
   $sum=$28;
  }
  $30=$y;
  $31=($30>>>0)>=((15)>>>0);
  if ($31) {
   $y=15;
   $33=$linbits;
   $34=$sum;
   $35=((($34)+($33))|0);
   $sum=$35;
  }
  $37=$x;
  $38=$37<<4;
  $x=$38;
  $39=$y;
  $40=$x;
  $41=((($40)+($39))|0);
  $x=$41;
  $42=$x;
  $43=((10736+($42<<2))|0);
  $44=((HEAP32[(($43)>>2)])|0);
  $45=$sum;
  $46=((($45)+($44))|0);
  $sum=$46;
  $48=$1;
  $49=$2;
  $50=($48>>>0)<($49>>>0);
  if (!($50)) {
   break;
  }
 }
 $52=$sum;
 $53=$52&65535;
 $sum2=$53;
 $54=$sum;
 $55=$54>>>16;
 $sum=$55;
 $56=$sum;
 $57=$sum2;
 $58=($56>>>0)>($57>>>0);
 if (!($58)) {
  $63=$sum;
  $64=$5;
  $65=((HEAP32[(($64)>>2)])|0);
  $66=((($65)+($63))|0);
  HEAP32[(($64)>>2)]=$66;
  $67=$3;
  STACKTOP=sp;return (($67)|0);
 }
 $60=$sum2;
 $sum=$60;
 $61=$4;
 $3=$61;
 $63=$sum;
 $64=$5;
 $65=((HEAP32[(($64)>>2)])|0);
 $66=((($65)+($63))|0);
 HEAP32[(($64)>>2)]=$66;
 $67=$3;
 STACKTOP=sp;return (($67)|0);
}


function _VBR_encode_frame($gfc,$xr34orig,$l3_xmin,$max_bits){
 $gfc=($gfc)|0;
 $xr34orig=($xr34orig)|0;
 $l3_xmin=($l3_xmin)|0;
 $max_bits=($max_bits)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$cfg=0,$sfwork_=0,$vbrsfmin_=0,$that_=0,$ngr=0,$nch=0,$max_nbits_ch=0,$max_nbits_gr=0,$max_nbits_fr=0,$use_nbits_ch=0,$use_nbits_gr=0,$use_nbits_fr=0,$gr=0,$ch=0,$ok=0;
 var $sum_fr=0,$that=0,$sfwork=0,$vbrsfmin=0,$vbrmax=0,$that1=0,$f=0,$s=.0,$f2=0,$s3=.0,$f4=0,$s5=.0,$sum_gr=0,$that6=0,$sfwork7=0,$vbrsfmin8=0,$6=0,$7=0,$8=0,$9=0;
 var $10=0,$11=0,$12=0,$13=0,$14=0,$15=0,$16=0,$17=0,$19=0,$20=0,$21=0,$23=0,$24=0,$26=0,$27=0,$28=0,$30=0,$31=0,$32=0,$33=0;
 var $34=0,$35=0,$36=0,$37=0,$38=0,$39=0,$40=0,$41=0,$42=0,$43=0,$44=0,$45=0,$46=0,$47=0,$48=0,$49=0,$50=0,$51=0,$52=0,$53=0;
 var $54=0,$55=0,$56=0,$57=0,$58=0,$59=0,$60=0,$61=0,$62=0,$63=0,$64=0,$65=0,$66=0,$67=0,$68=0,$69=0,$70=0,$71=0,$72=0,$73=0;
 var $74=0,$75=0,$76=0,$77=0,$78=0,$79=0,$80=0,$81=0,$82=0,$83=0,$84=0,$85=0,$86=0,$87=0,$88=0,$89=0,$90=0,$91=0,$92=0,$93=0;
 var $94=0,$95=0,$96=0,$97=0,$98=0,$99=0,$100=0,$101=0,$102=0,$103=0,$104=0,$105=0,$106=0,$107=0,$108=0,$109=0,$111=0,$112=0,$113=0,$114=0;
 var $115=0,$117=0,$118=0,$119=0,$120=0,$121=0,$124=0,$125=0,$128=0,$129=0,$132=0,$133=0,$134=0,$137=0,$138=0,$139=0,$141=0,$142=0,$143=0,$144=0;
 var $145=0,$146=0,$147=0,$149=0,$150=0,$151=0,$152=0,$153=0,$154=0,$155=0,$156=0,$157=0,$158=0,$159=0,$160=0,$161=0,$162=0,$163=0,$164=0,$165=0;
 var $166=0,$167=0,$168=0,$169=0,$170=0,$171=0,$172=0,$173=0,$174=0,$175=0,$176=0,$177=0,$178=0,$179=0,$180=0,$184=0,$185=0,$188=0,$189=0,$192=0;
 var $193=0,$194=0,$196=0,$197=0,$199=0,$200=0,$201=0,$203=0,$204=0,$205=0,$206=0,$207=0,$208=0,$209=0,$210=0,$211=0,$212=0,$213=0,$215=0,$216=0;
 var $217=0,$218=0,$219=0,$220=0,$221=0,$222=0,$225=0,$226=0,$227=0,$228=0,$229=0,$230=0,$231=0,$232=0,$233=0,$234=0,$235=0,$236=0,$237=0,$238=0;
 var $239=0,$240=0,$241=0,$243=0,$244=0,$246=0,$247=0,$248=0,$249=0,$250=0,$252=0,$253=0,$255=0,$256=0,$257=0,$260=0,$261=0,$262=0,$264=0,$265=0;
 var $266=0,$267=0,$271=0,$272=0,$273=0,$275=0,$276=0,$277=0,$278=0,$279=0,$280=0,$284=0,$285=0,$288=0,$289=0,$291=0,$292=0,$294=0,$298=0,$299=0;
 var $300=0,$302=0,$303=0,$305=0,$306=0,$307=0,$309=0,$310=0,$311=0,$312=0,$313=0,$314=0,$316=0,$317=0,$318=0,$319=0,$321=0,$322=0,$323=0,$324=0;
 var $325=0,$326=0,$327=0,$328=0,$329=0,$331=0,$332=0,$333=0,$334=0,$335=0,$336=0,$337=0,$338=0,$339=0,$341=0,$342=0,$344=0,$345=0,$346=0,$347=0;
 var $349=0,$351=0,$352=0,$353=0,$355=0,$356=0,$357=0,$358=0,$359=0,$360=0,$362=0,$363=0,$364=0,$365=0,$366=0,$367=.0,$368=.0,$369=.0,$370=.0,$371=0;
 var $372=0,$373=0,$374=0,$375=.0,$376=.0,$377=.0,$379=0,$380=0,$383=0,$384=0,$387=0,$388=0,$389=0,$391=.0,$392=0,$394=0,$395=0,$396=.0,$397=.0,$398=.0;
 var $399=.0,$400=0,$401=0,$402=0,$403=0,$404=0,$406=0,$407=0,$408=0,$409=0,$412=0,$413=0,$415=0,$416=0,$418=0,$419=0,$420=0,$421=0,$422=0,$423=0;
 var $424=0,$425=0,$426=0,$427=0,$429=0,$430=0,$431=0,$432=0,$433=0,$434=0,$435=0,$436=0,$437=0,$438=0,$439=0,$440=0,$441=0,$442=0,$443=0,$444=0;
 var $445=0,$446=0,$447=0,$448=0,$449=0,$450=0,$451=0,$452=0,$453=0,$454=0,$455=0,$457=0,$458=0,$459=0,$460=0,$461=0,$462=0,$463=0,$464=0,$465=0;
 var $466=0,$468=0,$469=0,$470=0,$471=0,$472=0,$473=0,$474=0,$475=0,$476=0,$477=0,$478=0,$479=0,$480=0,$481=0,$482=0,$483=0,$484=0,$485=0,$486=0;
 var $487=0,$488=0,$489=0,$490=0,$491=0,$492=0,$493=0,$494=0,$496=0,$497=0,$498=0,$499=0,$500=0,$502=0,$503=0,$504=0,$506=0,$507=0,$508=0,$509=0;
 var $510=0,$512=0,$513=0,$514=0,$517=0,$518=0,$520=0,$521=0,$522=0,$524=0,$525=0,$526=0,$527=0,$528=0,$529=0,$530=0,$531=0,$532=0,$534=0,$535=0;
 var $538=0,$539=0,$540=0,$541=0,$542=0,$544=0,$545=0,$547=0,$548=0,$549=0,$551=0,$553=0,$554=0,$555=0,$557=0,$558=0,$559=0,$560=0,$562=0,$563=0;
 var $564=0,$565=.0,$566=.0,$567=.0,$568=0,$569=0,$570=0,$571=0,$572=.0,$573=.0,$574=.0,$576=0,$577=0,$580=0,$581=0,$584=0,$585=0,$586=0,$588=.0,$589=0;
 var $591=0,$592=.0,$593=0,$594=0,$595=.0,$596=.0,$597=.0,$598=.0,$599=0,$600=0,$601=0,$603=0,$604=0,$607=0,$608=0,$610=0,$611=0,$613=0,$614=0,$615=0;
 var $616=0,$617=0,$618=0,$620=0,$621=0,$622=0,$623=0,$624=0,$625=0,$626=0,$627=0,$628=0,$629=0,$630=0,$631=0,$632=0,$633=0,$634=0,$636=0,$637=0;
 var $638=0,$639=0,$640=0,$641=0,$643=0,$644=0,$645=0,$646=0,$647=0,$648=0,$649=0,$650=0,$651=0,$652=0,$653=0,$654=0,$655=0,$656=0,$657=0,$660=0;
 var $661=0,$662=0,$664=0,$665=0,$666=0,$667=0,$669=0,$670=0,$673=0,$674=0,$678=0,$679=0,$680=0,$682=0,$684=0,$685=0,$686=0,$688=0,$689=0,$690=0;
 var $691=0,$692=0,$693=0,$695=0,$696=0,$697=0,$698=0,$699=0,$700=.0,$701=.0,$702=.0,$703=0,$704=0,$705=0,$706=0,$707=.0,$708=.0,$709=.0,$711=0,$712=0;
 var $715=0,$716=0,$719=0,$720=0,$721=0,$723=.0,$724=0,$726=0,$727=0,$728=0,$729=.0,$730=0,$731=0,$732=.0,$733=.0,$734=.0,$735=.0,$736=0,$737=0,$738=0;
 var $739=0,$740=0,$742=0,$743=0,$744=0,$745=0,$748=0,$749=0,$751=0,$752=0,$754=0,$755=0,$756=0,$757=0,$758=0,$759=0,$760=0,$761=0,$762=0,$763=0;
 var $765=0,$766=0,$767=0,$768=0,$769=0,$770=0,$771=0,$772=0,$773=0,$774=0,$775=0,$776=0,$777=0,$778=0,$779=0,$780=0,$781=0,$782=0,$783=0,$784=0;
 var $785=0,$786=0,$787=0,$788=0,$789=0,$790=0,$791=0,$793=0,$794=0,$795=0,$796=0,$797=0,$798=0,$799=0,$800=0,$801=0,$802=0,$804=0,$805=0,$806=0;
 var $807=0,$808=0,$809=0,$810=0,$811=0,$812=0,$813=0,$814=0,$815=0,$816=0,$817=0,$818=0,$819=0,$820=0,$821=0,$822=0,$823=0,$824=0,$825=0,$826=0;
 var $827=0,$828=0,$829=0,$830=0,$833=0,$834=0,$835=0,$837=0,$838=0,$839=0,$840=0,$841=0,$842=0,$844=0,$845=0,$846=0,$847=0,$850=0,$851=0,$855=0;
 var $856=0,$860=0,$861=0,$862=0,$865=0,$866=0,$867=0,$869=0,$870=0,$871=0,$872=0,$873=0,$874=0,$875=0,$876=0,$877=0,$878=0,$879=0,$880=0,$881=0;
 var $885=0,$886=0,$888=0,$889=0,$890=0,$891=0,$892=0,$896=0,$897=0,$899=0,$900=0,$901=0,$904=0,$905=0,$908=0,$909=0,$910=0,$913=0,$914=0,$915=0;
 var $917=0,$918=0,$919=0,$920=0,$921=0,$922=0,$923=0,$924=0,$925=0,$926=0,$928=0,$929=0,$932=0,$933=0,$937=0,$938=0,$939=0,$941=0,$942=0,$943=0;
 var $944=0,$945=0,$946=0,$947=0,$948=0,$949=0,$950=0,$951=0,$952=0,$953=0,$954=0,$955=0,$956=0,$957=0,$958=0,$959=0,$960=0,$961=0,$962=0,$963=0;
 var $964=0,$966=0,$967=0,$970=0,$971=0,$972=0,$975=0,$976=0,$977=0,$979=0,$980=0,$981=0,$982=0,$983=0,$984=0,$985=0,$986=0,$988=0,$989=0,$992=0;
 var $993=0,$996=0,$997=0,$998=0,$1000=0,$1001=0,$1003=0,$1004=0,$1005=0,$1007=0,$1008=0,$1009=0,$1010=0,$1011=0,$1012=0,$1013=0,$1014=0,$1015=0,$1016=0,$1017=0;
 var $1018=0,$1019=0,$1020=0,$1021=0,$1023=0,$1024=0,$1025=0,$1026=0,$1027=0,$1028=0,$1029=0,$1030=0,$1031=0,$1032=0,$1033=0,$1034=0,$1035=0,$1036=0,$1037=0,$1038=0;
 var $1039=0,$1040=0,$1041=0,$1042=0,$1043=0,$1044=0,$1045=0,$1046=0,$1047=0,$1049=0,$1050=0,$1051=0,$1052=0,$1053=0,$1054=0,$1055=0,$1056=0,$1057=0,$1058=0,$1059=0;
 var $1060=0,$1061=0,$1062=0,$1063=0,$1064=0,$1065=0,$1067=0,$1068=0,$1070=0,$1071=0,$1072=0,$1073=0,$1074=0,$1076=0,$1077=0,$1079=0,$1080=0,$1081=0,$1083=0,$1085=0;
 var $1086=0,$1087=0,$1089=0,label=0;
 var tempVarArgs=0;
 var sp=0;sp=STACKTOP;STACKTOP=(STACKTOP+1464)|0;






 $sfwork_=((sp)|0);
 $vbrsfmin_=(((sp)+(624))|0);
 $that_=(((sp)+(1248))|0);


 $max_nbits_ch=(((sp)+(1392))|0);
 $max_nbits_gr=(((sp)+(1408))|0);

 $use_nbits_ch=(((sp)+(1416))|0);
 $use_nbits_gr=(((sp)+(1432))|0);










 $f=(((sp)+(1440))|0);

 $f2=(((sp)+(1448))|0);

 $f4=(((sp)+(1456))|0);





 $2=$gfc;
 $3=$xr34orig;
 $4=$l3_xmin;
 $5=$max_bits;
 $6=$2;
 $7=(($6+16)|0);
 $cfg=$7;
 $8=$cfg;
 $9=(($8+60)|0);
 $10=((HEAP32[(($9)>>2)])|0);
 $ngr=$10;
 $11=$cfg;
 $12=(($11+56)|0);
 $13=((HEAP32[(($12)>>2)])|0);
 $nch=$13;
 $14=$max_nbits_ch;
 _memset((((($14)|0))|0), ((((0)|0))|0), ((((16)|0))|0))|0;
 $15=$max_nbits_gr;
 _memset((((($15)|0))|0), ((((0)|0))|0), ((((8)|0))|0))|0;
 $max_nbits_fr=0;
 $16=$use_nbits_ch;
 HEAP32[(($16)>>2)]=((HEAP32[((17384)>>2)])|0);HEAP32[((($16)+(4))>>2)]=((HEAP32[((17388)>>2)])|0);HEAP32[((($16)+(8))>>2)]=((HEAP32[((17392)>>2)])|0);HEAP32[((($16)+(12))>>2)]=((HEAP32[((17396)>>2)])|0);
 $17=$use_nbits_gr;
 HEAP32[(($17)>>2)]=((HEAP32[((17376)>>2)])|0);HEAP32[((($17)+(4))>>2)]=((HEAP32[((17380)>>2)])|0);
 $use_nbits_fr=15360;
 $gr=0;
 while(1) {
  $19=$gr;
  $20=$ngr;
  $21=($19|0)<($20|0);
  if (!($21)) {
   break;
  }
  $23=$gr;
  $24=(($max_nbits_gr+($23<<2))|0);
  HEAP32[(($24)>>2)]=0;
  $ch=0;
  while(1) {
   $26=$ch;
   $27=$nch;
   $28=($26|0)<($27|0);
   if (!($28)) {
    break;
   }
   $30=$ch;
   $31=$gr;
   $32=$5;
   $33=(($32+($31<<3))|0);
   $34=(($33+($30<<2))|0);
   $35=((HEAP32[(($34)>>2)])|0);
   $36=$ch;
   $37=$gr;
   $38=(($max_nbits_ch+($37<<3))|0);
   $39=(($38+($36<<2))|0);
   HEAP32[(($39)>>2)]=$35;
   $40=$ch;
   $41=$gr;
   $42=(($use_nbits_ch+($41<<3))|0);
   $43=(($42+($40<<2))|0);
   HEAP32[(($43)>>2)]=0;
   $44=$ch;
   $45=$gr;
   $46=$5;
   $47=(($46+($45<<3))|0);
   $48=(($47+($44<<2))|0);
   $49=((HEAP32[(($48)>>2)])|0);
   $50=$gr;
   $51=(($max_nbits_gr+($50<<2))|0);
   $52=((HEAP32[(($51)>>2)])|0);
   $53=((($52)+($49))|0);
   HEAP32[(($51)>>2)]=$53;
   $54=$ch;
   $55=$gr;
   $56=$5;
   $57=(($56+($55<<3))|0);
   $58=(($57+($54<<2))|0);
   $59=((HEAP32[(($58)>>2)])|0);
   $60=$max_nbits_fr;
   $61=((($60)+($59))|0);
   $max_nbits_fr=$61;
   $62=$cfg;
   $63=(($62+32)|0);
   $64=((HEAP32[(($63)>>2)])|0);
   $65=($64|0)<0;
   $66=($65?(2):(4));
   $67=$ch;
   $68=$gr;
   $69=(($that_+((($68)*(72))&-1))|0);
   $70=(($69+((($67)*(36))&-1))|0);
   $71=(($70+4)|0);
   HEAP32[(($71)>>2)]=$66;
   $72=$2;
   $73=$ch;
   $74=$gr;
   $75=(($that_+((($74)*(72))&-1))|0);
   $76=(($75+((($73)*(36))&-1))|0);
   $77=(($76+12)|0);
   HEAP32[(($77)>>2)]=$72;
   $78=$ch;
   $79=$gr;
   $80=$2;
   $81=(($80+304)|0);
   $82=(($81)|0);
   $83=(($82+((($79)*(10504))&-1))|0);
   $84=(($83+((($78)*(5252))&-1))|0);
   $85=$ch;
   $86=$gr;
   $87=(($that_+((($86)*(72))&-1))|0);
   $88=(($87+((($85)*(36))&-1))|0);
   $89=(($88+16)|0);
   HEAP32[(($89)>>2)]=$84;
   $90=$ch;
   $91=$gr;
   $92=$3;
   $93=(($92+((($91)*(4608))&-1))|0);
   $94=(($93+((($90)*(2304))&-1))|0);
   $95=(($94)|0);
   $96=$ch;
   $97=$gr;
   $98=(($that_+((($97)*(72))&-1))|0);
   $99=(($98+((($96)*(36))&-1))|0);
   $100=(($99+8)|0);
   HEAP32[(($100)>>2)]=$95;
   $101=$ch;
   $102=$gr;
   $103=(($that_+((($102)*(72))&-1))|0);
   $104=(($103+((($101)*(36))&-1))|0);
   $105=(($104+16)|0);
   $106=((HEAP32[(($105)>>2)])|0);
   $107=(($106+4788)|0);
   $108=((HEAP32[(($107)>>2)])|0);
   $109=($108|0)==2;
   if ($109) {
    $111=$ch;
    $112=$gr;
    $113=(($that_+((($112)*(72))&-1))|0);
    $114=(($113+((($111)*(36))&-1))|0);
    $115=(($114)|0);
    HEAP32[(($115)>>2)]=2;
   } else {
    $117=$ch;
    $118=$gr;
    $119=(($that_+((($118)*(72))&-1))|0);
    $120=(($119+((($117)*(36))&-1))|0);
    $121=(($120)|0);
    HEAP32[(($121)>>2)]=4;
   }
   $124=$ch;
   $125=((($124)+(1))|0);
   $ch=$125;
  }
  $128=$gr;
  $129=((($128)+(1))|0);
  $gr=$129;
 }
 $gr=0;
 while(1) {
  $132=$gr;
  $133=$ngr;
  $134=($132|0)<($133|0);
  if (!($134)) {
   break;
  }
  $ch=0;
  while(1) {
   $137=$ch;
   $138=$nch;
   $139=($137|0)<($138|0);
   if (!($139)) {
    break;
   }
   $141=$ch;
   $142=$gr;
   $143=$5;
   $144=(($143+($142<<3))|0);
   $145=(($144+($141<<2))|0);
   $146=((HEAP32[(($145)>>2)])|0);
   $147=($146|0)>0;
   if ($147) {
    $149=$ch;
    $150=$gr;
    $151=(($that_+((($150)*(72))&-1))|0);
    $152=(($151+((($149)*(36))&-1))|0);
    $that=$152;
    $153=$ch;
    $154=$gr;
    $155=(($sfwork_+((($154)*(312))&-1))|0);
    $156=(($155+((($153)*(156))&-1))|0);
    $157=(($156)|0);
    $sfwork=$157;
    $158=$ch;
    $159=$gr;
    $160=(($vbrsfmin_+((($159)*(312))&-1))|0);
    $161=(($160+((($158)*(156))&-1))|0);
    $162=(($161)|0);
    $vbrsfmin=$162;
    $163=$that;
    $164=$ch;
    $165=$gr;
    $166=$4;
    $167=(($166+((($165)*(312))&-1))|0);
    $168=(($167+((($164)*(156))&-1))|0);
    $169=(($168)|0);
    $170=$sfwork;
    $171=$vbrsfmin;
    $172=((_block_sf($163,$169,$170,$171))|0);
    $vbrmax=$172;
    $173=$that;
    $174=(($173)|0);
    $175=((HEAP32[(($174)>>2)])|0);
    $176=$that;
    $177=$sfwork;
    $178=$vbrsfmin;
    $179=$vbrmax;
    FUNCTION_TABLE_viiii[($175)&15]($176,$177,$178,$179);
    $180=$that;
    _bitcount($180);
   } else {
   }
   $184=$ch;
   $185=((($184)+(1))|0);
   $ch=$185;
  }
  $188=$gr;
  $189=((($188)+(1))|0);
  $gr=$189;
 }
 $use_nbits_fr=0;
 $gr=0;
 while(1) {
  $192=$gr;
  $193=$ngr;
  $194=($192|0)<($193|0);
  if (!($194)) {
   break;
  }
  $196=$gr;
  $197=(($use_nbits_gr+($196<<2))|0);
  HEAP32[(($197)>>2)]=0;
  $ch=0;
  while(1) {
   $199=$ch;
   $200=$nch;
   $201=($199|0)<($200|0);
   if (!($201)) {
    break;
   }
   $203=$ch;
   $204=$gr;
   $205=(($that_+((($204)*(72))&-1))|0);
   $206=(($205+((($203)*(36))&-1))|0);
   $that1=$206;
   $207=$ch;
   $208=$gr;
   $209=$5;
   $210=(($209+($208<<3))|0);
   $211=(($210+($207<<2))|0);
   $212=((HEAP32[(($211)>>2)])|0);
   $213=($212|0)>0;
   if ($213) {
    $215=$that1;
    $216=(($215+16)|0);
    $217=((HEAP32[(($216)>>2)])|0);
    $218=(($217+2304)|0);
    $219=(($218)|0);
    $220=$219;
    _memset((((($220)|0))|0), ((((0)|0))|0), ((((2304)|0))|0))|0;
    $221=$that1;
    $222=((_quantizeAndCountBits($221))|0);
   } else {
   }
   $225=$2;
   $226=$gr;
   $227=$ch;
   $228=((_reduce_bit_usage($225,$226,$227))|0);
   $229=$ch;
   $230=$gr;
   $231=(($use_nbits_ch+($230<<3))|0);
   $232=(($231+($229<<2))|0);
   HEAP32[(($232)>>2)]=$228;
   $233=$ch;
   $234=$gr;
   $235=(($use_nbits_ch+($234<<3))|0);
   $236=(($235+($233<<2))|0);
   $237=((HEAP32[(($236)>>2)])|0);
   $238=$gr;
   $239=(($use_nbits_gr+($238<<2))|0);
   $240=((HEAP32[(($239)>>2)])|0);
   $241=((($240)+($237))|0);
   HEAP32[(($239)>>2)]=$241;
   $243=$ch;
   $244=((($243)+(1))|0);
   $ch=$244;
  }
  $246=$gr;
  $247=(($use_nbits_gr+($246<<2))|0);
  $248=((HEAP32[(($247)>>2)])|0);
  $249=$use_nbits_fr;
  $250=((($249)+($248))|0);
  $use_nbits_fr=$250;
  $252=$gr;
  $253=((($252)+(1))|0);
  $gr=$253;
 }
 $255=$use_nbits_fr;
 $256=$max_nbits_fr;
 $257=($255|0)<=($256|0);
 do {
  if ($257) {
   $ok=1;
   $gr=0;
   while(1) {
    $260=$gr;
    $261=$ngr;
    $262=($260|0)<($261|0);
    if (!($262)) {
     break;
    }
    $264=$gr;
    $265=(($use_nbits_gr+($264<<2))|0);
    $266=((HEAP32[(($265)>>2)])|0);
    $267=($266|0)>7680;
    if ($267) {
     $ok=0;
    }
    $ch=0;
    while(1) {
     $271=$ch;
     $272=$nch;
     $273=($271|0)<($272|0);
     if (!($273)) {
      break;
     }
     $275=$ch;
     $276=$gr;
     $277=(($use_nbits_ch+($276<<3))|0);
     $278=(($277+($275<<2))|0);
     $279=((HEAP32[(($278)>>2)])|0);
     $280=($279|0)>4095;
     if ($280) {
      $ok=0;
     }
     $284=$ch;
     $285=((($284)+(1))|0);
     $ch=$285;
    }
    $288=$gr;
    $289=((($288)+(1))|0);
    $gr=$289;
   }
   $291=$ok;
   $292=($291|0)!=0;
   if (!($292)) {
    break;
   }
   $294=$use_nbits_fr;
   $1=$294;
   $1089=$1;
   STACKTOP=sp;return (($1089)|0);
  }
 } while(0);
 $ok=1;
 $sum_fr=0;
 $gr=0;
 while(1) {
  $298=$gr;
  $299=$ngr;
  $300=($298|0)<($299|0);
  if (!($300)) {
   break;
  }
  $302=$gr;
  $303=(($max_nbits_gr+($302<<2))|0);
  HEAP32[(($303)>>2)]=0;
  $ch=0;
  while(1) {
   $305=$ch;
   $306=$nch;
   $307=($305|0)<($306|0);
   if (!($307)) {
    break;
   }
   $309=$ch;
   $310=$gr;
   $311=(($use_nbits_ch+($310<<3))|0);
   $312=(($311+($309<<2))|0);
   $313=((HEAP32[(($312)>>2)])|0);
   $314=($313|0)>4095;
   if ($314) {
    $316=$ch;
    $317=$gr;
    $318=(($max_nbits_ch+($317<<3))|0);
    $319=(($318+($316<<2))|0);
    HEAP32[(($319)>>2)]=4095;
   } else {
    $321=$ch;
    $322=$gr;
    $323=(($use_nbits_ch+($322<<3))|0);
    $324=(($323+($321<<2))|0);
    $325=((HEAP32[(($324)>>2)])|0);
    $326=$ch;
    $327=$gr;
    $328=(($max_nbits_ch+($327<<3))|0);
    $329=(($328+($326<<2))|0);
    HEAP32[(($329)>>2)]=$325;
   }
   $331=$ch;
   $332=$gr;
   $333=(($max_nbits_ch+($332<<3))|0);
   $334=(($333+($331<<2))|0);
   $335=((HEAP32[(($334)>>2)])|0);
   $336=$gr;
   $337=(($max_nbits_gr+($336<<2))|0);
   $338=((HEAP32[(($337)>>2)])|0);
   $339=((($338)+($335))|0);
   HEAP32[(($337)>>2)]=$339;
   $341=$ch;
   $342=((($341)+(1))|0);
   $ch=$342;
  }
  $344=$gr;
  $345=(($max_nbits_gr+($344<<2))|0);
  $346=((HEAP32[(($345)>>2)])|0);
  $347=($346|0)>7680;
  if ($347) {
   $349=$f;
   _memset((((($349)|0))|0), ((((0)|0))|0), ((((8)|0))|0))|0;
   $s=0.0;
   $ch=0;
   while(1) {
    $351=$ch;
    $352=$nch;
    $353=($351|0)<($352|0);
    if (!($353)) {
     break;
    }
    $355=$ch;
    $356=$gr;
    $357=(($max_nbits_ch+($356<<3))|0);
    $358=(($357+($355<<2))|0);
    $359=((HEAP32[(($358)>>2)])|0);
    $360=($359|0)>0;
    if ($360) {
     $362=$ch;
     $363=$gr;
     $364=(($max_nbits_ch+($363<<3))|0);
     $365=(($364+($362<<2))|0);
     $366=((HEAP32[(($365)>>2)])|0);
     $367=(+((($366|0))|0));
     $368=(+(Math_sqrt($367)));
     $369=(+(Math_sqrt($368)));
     $370=$369;
     $371=$ch;
     $372=(($f+($371<<2))|0);
     HEAPF32[(($372)>>2)]=$370;
     $373=$ch;
     $374=(($f+($373<<2))|0);
     $375=(+(HEAPF32[(($374)>>2)]));
     $376=$s;
     $377=($376)+($375);
     $s=$377;
    } else {
     $379=$ch;
     $380=(($f+($379<<2))|0);
     HEAPF32[(($380)>>2)]=0.0;
    }
    $383=$ch;
    $384=((($383)+(1))|0);
    $ch=$384;
   }
   $ch=0;
   while(1) {
    $387=$ch;
    $388=$nch;
    $389=($387|0)<($388|0);
    if (!($389)) {
     break;
    }
    $391=$s;
    $392=$391>(0.0);
    if ($392) {
     $394=$ch;
     $395=(($f+($394<<2))|0);
     $396=(+(HEAPF32[(($395)>>2)]));
     $397=((7680.0))*($396);
     $398=$s;
     $399=($397)/($398);
     $400=(~~($399));
     $401=$ch;
     $402=$gr;
     $403=(($max_nbits_ch+($402<<3))|0);
     $404=(($403+($401<<2))|0);
     HEAP32[(($404)>>2)]=$400;
    } else {
     $406=$ch;
     $407=$gr;
     $408=(($max_nbits_ch+($407<<3))|0);
     $409=(($408+($406<<2))|0);
     HEAP32[(($409)>>2)]=0;
    }
    $412=$ch;
    $413=((($412)+(1))|0);
    $ch=$413;
   }
   $415=$nch;
   $416=($415|0)>1;
   if ($416) {
    $418=$gr;
    $419=(($max_nbits_ch+($418<<3))|0);
    $420=(($419)|0);
    $421=((HEAP32[(($420)>>2)])|0);
    $422=$gr;
    $423=(($use_nbits_ch+($422<<3))|0);
    $424=(($423)|0);
    $425=((HEAP32[(($424)>>2)])|0);
    $426=((($425)+(32))|0);
    $427=($421|0)>($426|0);
    if ($427) {
     $429=$gr;
     $430=(($max_nbits_ch+($429<<3))|0);
     $431=(($430)|0);
     $432=((HEAP32[(($431)>>2)])|0);
     $433=$gr;
     $434=(($max_nbits_ch+($433<<3))|0);
     $435=(($434+4)|0);
     $436=((HEAP32[(($435)>>2)])|0);
     $437=((($436)+($432))|0);
     HEAP32[(($435)>>2)]=$437;
     $438=$gr;
     $439=(($use_nbits_ch+($438<<3))|0);
     $440=(($439)|0);
     $441=((HEAP32[(($440)>>2)])|0);
     $442=((($441)+(32))|0);
     $443=$gr;
     $444=(($max_nbits_ch+($443<<3))|0);
     $445=(($444+4)|0);
     $446=((HEAP32[(($445)>>2)])|0);
     $447=((($446)-($442))|0);
     HEAP32[(($445)>>2)]=$447;
     $448=$gr;
     $449=(($use_nbits_ch+($448<<3))|0);
     $450=(($449)|0);
     $451=((HEAP32[(($450)>>2)])|0);
     $452=((($451)+(32))|0);
     $453=$gr;
     $454=(($max_nbits_ch+($453<<3))|0);
     $455=(($454)|0);
     HEAP32[(($455)>>2)]=$452;
    }
    $457=$gr;
    $458=(($max_nbits_ch+($457<<3))|0);
    $459=(($458+4)|0);
    $460=((HEAP32[(($459)>>2)])|0);
    $461=$gr;
    $462=(($use_nbits_ch+($461<<3))|0);
    $463=(($462+4)|0);
    $464=((HEAP32[(($463)>>2)])|0);
    $465=((($464)+(32))|0);
    $466=($460|0)>($465|0);
    if ($466) {
     $468=$gr;
     $469=(($max_nbits_ch+($468<<3))|0);
     $470=(($469+4)|0);
     $471=((HEAP32[(($470)>>2)])|0);
     $472=$gr;
     $473=(($max_nbits_ch+($472<<3))|0);
     $474=(($473)|0);
     $475=((HEAP32[(($474)>>2)])|0);
     $476=((($475)+($471))|0);
     HEAP32[(($474)>>2)]=$476;
     $477=$gr;
     $478=(($use_nbits_ch+($477<<3))|0);
     $479=(($478+4)|0);
     $480=((HEAP32[(($479)>>2)])|0);
     $481=((($480)+(32))|0);
     $482=$gr;
     $483=(($max_nbits_ch+($482<<3))|0);
     $484=(($483)|0);
     $485=((HEAP32[(($484)>>2)])|0);
     $486=((($485)-($481))|0);
     HEAP32[(($484)>>2)]=$486;
     $487=$gr;
     $488=(($use_nbits_ch+($487<<3))|0);
     $489=(($488+4)|0);
     $490=((HEAP32[(($489)>>2)])|0);
     $491=((($490)+(32))|0);
     $492=$gr;
     $493=(($max_nbits_ch+($492<<3))|0);
     $494=(($493+4)|0);
     HEAP32[(($494)>>2)]=$491;
    }
    $496=$gr;
    $497=(($max_nbits_ch+($496<<3))|0);
    $498=(($497)|0);
    $499=((HEAP32[(($498)>>2)])|0);
    $500=($499|0)>4095;
    if ($500) {
     $502=$gr;
     $503=(($max_nbits_ch+($502<<3))|0);
     $504=(($503)|0);
     HEAP32[(($504)>>2)]=4095;
    }
    $506=$gr;
    $507=(($max_nbits_ch+($506<<3))|0);
    $508=(($507+4)|0);
    $509=((HEAP32[(($508)>>2)])|0);
    $510=($509|0)>4095;
    if ($510) {
     $512=$gr;
     $513=(($max_nbits_ch+($512<<3))|0);
     $514=(($513+4)|0);
     HEAP32[(($514)>>2)]=4095;
    }
   }
   $517=$gr;
   $518=(($max_nbits_gr+($517<<2))|0);
   HEAP32[(($518)>>2)]=0;
   $ch=0;
   while(1) {
    $520=$ch;
    $521=$nch;
    $522=($520|0)<($521|0);
    if (!($522)) {
     break;
    }
    $524=$ch;
    $525=$gr;
    $526=(($max_nbits_ch+($525<<3))|0);
    $527=(($526+($524<<2))|0);
    $528=((HEAP32[(($527)>>2)])|0);
    $529=$gr;
    $530=(($max_nbits_gr+($529<<2))|0);
    $531=((HEAP32[(($530)>>2)])|0);
    $532=((($531)+($528))|0);
    HEAP32[(($530)>>2)]=$532;
    $534=$ch;
    $535=((($534)+(1))|0);
    $ch=$535;
   }
  }
  $538=$gr;
  $539=(($max_nbits_gr+($538<<2))|0);
  $540=((HEAP32[(($539)>>2)])|0);
  $541=$sum_fr;
  $542=((($541)+($540))|0);
  $sum_fr=$542;
  $544=$gr;
  $545=((($544)+(1))|0);
  $gr=$545;
 }
 $547=$sum_fr;
 $548=$max_nbits_fr;
 $549=($547|0)>($548|0);
 if ($549) {
  $551=$f2;
  _memset((((($551)|0))|0), ((((0)|0))|0), ((((8)|0))|0))|0;
  $s3=0.0;
  $gr=0;
  while(1) {
   $553=$gr;
   $554=$ngr;
   $555=($553|0)<($554|0);
   if (!($555)) {
    break;
   }
   $557=$gr;
   $558=(($max_nbits_gr+($557<<2))|0);
   $559=((HEAP32[(($558)>>2)])|0);
   $560=($559|0)>0;
   if ($560) {
    $562=$gr;
    $563=(($max_nbits_gr+($562<<2))|0);
    $564=((HEAP32[(($563)>>2)])|0);
    $565=(+((($564|0))|0));
    $566=(+(Math_sqrt($565)));
    $567=$566;
    $568=$gr;
    $569=(($f2+($568<<2))|0);
    HEAPF32[(($569)>>2)]=$567;
    $570=$gr;
    $571=(($f2+($570<<2))|0);
    $572=(+(HEAPF32[(($571)>>2)]));
    $573=$s3;
    $574=($573)+($572);
    $s3=$574;
   } else {
    $576=$gr;
    $577=(($f2+($576<<2))|0);
    HEAPF32[(($577)>>2)]=0.0;
   }
   $580=$gr;
   $581=((($580)+(1))|0);
   $gr=$581;
  }
  $gr=0;
  while(1) {
   $584=$gr;
   $585=$ngr;
   $586=($584|0)<($585|0);
   if (!($586)) {
    break;
   }
   $588=$s3;
   $589=$588>(0.0);
   if ($589) {
    $591=$max_nbits_fr;
    $592=(+((($591|0))|0));
    $593=$gr;
    $594=(($f2+($593<<2))|0);
    $595=(+(HEAPF32[(($594)>>2)]));
    $596=($592)*($595);
    $597=$s3;
    $598=($596)/($597);
    $599=(~~($598));
    $600=$gr;
    $601=(($max_nbits_gr+($600<<2))|0);
    HEAP32[(($601)>>2)]=$599;
   } else {
    $603=$gr;
    $604=(($max_nbits_gr+($603<<2))|0);
    HEAP32[(($604)>>2)]=0;
   }
   $607=$gr;
   $608=((($607)+(1))|0);
   $gr=$608;
  }
  $610=$ngr;
  $611=($610|0)>1;
  if ($611) {
   $613=(($max_nbits_gr)|0);
   $614=((HEAP32[(($613)>>2)])|0);
   $615=(($use_nbits_gr)|0);
   $616=((HEAP32[(($615)>>2)])|0);
   $617=((($616)+(125))|0);
   $618=($614|0)>($617|0);
   if ($618) {
    $620=(($max_nbits_gr)|0);
    $621=((HEAP32[(($620)>>2)])|0);
    $622=(($max_nbits_gr+4)|0);
    $623=((HEAP32[(($622)>>2)])|0);
    $624=((($623)+($621))|0);
    HEAP32[(($622)>>2)]=$624;
    $625=(($use_nbits_gr)|0);
    $626=((HEAP32[(($625)>>2)])|0);
    $627=((($626)+(125))|0);
    $628=(($max_nbits_gr+4)|0);
    $629=((HEAP32[(($628)>>2)])|0);
    $630=((($629)-($627))|0);
    HEAP32[(($628)>>2)]=$630;
    $631=(($use_nbits_gr)|0);
    $632=((HEAP32[(($631)>>2)])|0);
    $633=((($632)+(125))|0);
    $634=(($max_nbits_gr)|0);
    HEAP32[(($634)>>2)]=$633;
   }
   $636=(($max_nbits_gr+4)|0);
   $637=((HEAP32[(($636)>>2)])|0);
   $638=(($use_nbits_gr+4)|0);
   $639=((HEAP32[(($638)>>2)])|0);
   $640=((($639)+(125))|0);
   $641=($637|0)>($640|0);
   if ($641) {
    $643=(($max_nbits_gr+4)|0);
    $644=((HEAP32[(($643)>>2)])|0);
    $645=(($max_nbits_gr)|0);
    $646=((HEAP32[(($645)>>2)])|0);
    $647=((($646)+($644))|0);
    HEAP32[(($645)>>2)]=$647;
    $648=(($use_nbits_gr+4)|0);
    $649=((HEAP32[(($648)>>2)])|0);
    $650=((($649)+(125))|0);
    $651=(($max_nbits_gr)|0);
    $652=((HEAP32[(($651)>>2)])|0);
    $653=((($652)-($650))|0);
    HEAP32[(($651)>>2)]=$653;
    $654=(($use_nbits_gr+4)|0);
    $655=((HEAP32[(($654)>>2)])|0);
    $656=((($655)+(125))|0);
    $657=(($max_nbits_gr+4)|0);
    HEAP32[(($657)>>2)]=$656;
   }
   $gr=0;
   while(1) {
    $660=$gr;
    $661=$ngr;
    $662=($660|0)<($661|0);
    if (!($662)) {
     break;
    }
    $664=$gr;
    $665=(($max_nbits_gr+($664<<2))|0);
    $666=((HEAP32[(($665)>>2)])|0);
    $667=($666|0)>7680;
    if ($667) {
     $669=$gr;
     $670=(($max_nbits_gr+($669<<2))|0);
     HEAP32[(($670)>>2)]=7680;
    }
    $673=$gr;
    $674=((($673)+(1))|0);
    $gr=$674;
   }
  }
  $gr=0;
  while(1) {
   $678=$gr;
   $679=$ngr;
   $680=($678|0)<($679|0);
   if (!($680)) {
    break;
   }
   $682=$f4;
   _memset((((($682)|0))|0), ((((0)|0))|0), ((((8)|0))|0))|0;
   $s5=0.0;
   $ch=0;
   while(1) {
    $684=$ch;
    $685=$nch;
    $686=($684|0)<($685|0);
    if (!($686)) {
     break;
    }
    $688=$ch;
    $689=$gr;
    $690=(($max_nbits_ch+($689<<3))|0);
    $691=(($690+($688<<2))|0);
    $692=((HEAP32[(($691)>>2)])|0);
    $693=($692|0)>0;
    if ($693) {
     $695=$ch;
     $696=$gr;
     $697=(($max_nbits_ch+($696<<3))|0);
     $698=(($697+($695<<2))|0);
     $699=((HEAP32[(($698)>>2)])|0);
     $700=(+((($699|0))|0));
     $701=(+(Math_sqrt($700)));
     $702=$701;
     $703=$ch;
     $704=(($f4+($703<<2))|0);
     HEAPF32[(($704)>>2)]=$702;
     $705=$ch;
     $706=(($f4+($705<<2))|0);
     $707=(+(HEAPF32[(($706)>>2)]));
     $708=$s5;
     $709=($708)+($707);
     $s5=$709;
    } else {
     $711=$ch;
     $712=(($f4+($711<<2))|0);
     HEAPF32[(($712)>>2)]=0.0;
    }
    $715=$ch;
    $716=((($715)+(1))|0);
    $ch=$716;
   }
   $ch=0;
   while(1) {
    $719=$ch;
    $720=$nch;
    $721=($719|0)<($720|0);
    if (!($721)) {
     break;
    }
    $723=$s5;
    $724=$723>(0.0);
    if ($724) {
     $726=$gr;
     $727=(($max_nbits_gr+($726<<2))|0);
     $728=((HEAP32[(($727)>>2)])|0);
     $729=(+((($728|0))|0));
     $730=$ch;
     $731=(($f4+($730<<2))|0);
     $732=(+(HEAPF32[(($731)>>2)]));
     $733=($729)*($732);
     $734=$s5;
     $735=($733)/($734);
     $736=(~~($735));
     $737=$ch;
     $738=$gr;
     $739=(($max_nbits_ch+($738<<3))|0);
     $740=(($739+($737<<2))|0);
     HEAP32[(($740)>>2)]=$736;
    } else {
     $742=$ch;
     $743=$gr;
     $744=(($max_nbits_ch+($743<<3))|0);
     $745=(($744+($742<<2))|0);
     HEAP32[(($745)>>2)]=0;
    }
    $748=$ch;
    $749=((($748)+(1))|0);
    $ch=$749;
   }
   $751=$nch;
   $752=($751|0)>1;
   if ($752) {
    $754=$gr;
    $755=(($max_nbits_ch+($754<<3))|0);
    $756=(($755)|0);
    $757=((HEAP32[(($756)>>2)])|0);
    $758=$gr;
    $759=(($use_nbits_ch+($758<<3))|0);
    $760=(($759)|0);
    $761=((HEAP32[(($760)>>2)])|0);
    $762=((($761)+(32))|0);
    $763=($757|0)>($762|0);
    if ($763) {
     $765=$gr;
     $766=(($max_nbits_ch+($765<<3))|0);
     $767=(($766)|0);
     $768=((HEAP32[(($767)>>2)])|0);
     $769=$gr;
     $770=(($max_nbits_ch+($769<<3))|0);
     $771=(($770+4)|0);
     $772=((HEAP32[(($771)>>2)])|0);
     $773=((($772)+($768))|0);
     HEAP32[(($771)>>2)]=$773;
     $774=$gr;
     $775=(($use_nbits_ch+($774<<3))|0);
     $776=(($775)|0);
     $777=((HEAP32[(($776)>>2)])|0);
     $778=((($777)+(32))|0);
     $779=$gr;
     $780=(($max_nbits_ch+($779<<3))|0);
     $781=(($780+4)|0);
     $782=((HEAP32[(($781)>>2)])|0);
     $783=((($782)-($778))|0);
     HEAP32[(($781)>>2)]=$783;
     $784=$gr;
     $785=(($use_nbits_ch+($784<<3))|0);
     $786=(($785)|0);
     $787=((HEAP32[(($786)>>2)])|0);
     $788=((($787)+(32))|0);
     $789=$gr;
     $790=(($max_nbits_ch+($789<<3))|0);
     $791=(($790)|0);
     HEAP32[(($791)>>2)]=$788;
    }
    $793=$gr;
    $794=(($max_nbits_ch+($793<<3))|0);
    $795=(($794+4)|0);
    $796=((HEAP32[(($795)>>2)])|0);
    $797=$gr;
    $798=(($use_nbits_ch+($797<<3))|0);
    $799=(($798+4)|0);
    $800=((HEAP32[(($799)>>2)])|0);
    $801=((($800)+(32))|0);
    $802=($796|0)>($801|0);
    if ($802) {
     $804=$gr;
     $805=(($max_nbits_ch+($804<<3))|0);
     $806=(($805+4)|0);
     $807=((HEAP32[(($806)>>2)])|0);
     $808=$gr;
     $809=(($max_nbits_ch+($808<<3))|0);
     $810=(($809)|0);
     $811=((HEAP32[(($810)>>2)])|0);
     $812=((($811)+($807))|0);
     HEAP32[(($810)>>2)]=$812;
     $813=$gr;
     $814=(($use_nbits_ch+($813<<3))|0);
     $815=(($814+4)|0);
     $816=((HEAP32[(($815)>>2)])|0);
     $817=((($816)+(32))|0);
     $818=$gr;
     $819=(($max_nbits_ch+($818<<3))|0);
     $820=(($819)|0);
     $821=((HEAP32[(($820)>>2)])|0);
     $822=((($821)-($817))|0);
     HEAP32[(($820)>>2)]=$822;
     $823=$gr;
     $824=(($use_nbits_ch+($823<<3))|0);
     $825=(($824+4)|0);
     $826=((HEAP32[(($825)>>2)])|0);
     $827=((($826)+(32))|0);
     $828=$gr;
     $829=(($max_nbits_ch+($828<<3))|0);
     $830=(($829+4)|0);
     HEAP32[(($830)>>2)]=$827;
    }
    $ch=0;
    while(1) {
     $833=$ch;
     $834=$nch;
     $835=($833|0)<($834|0);
     if (!($835)) {
      break;
     }
     $837=$ch;
     $838=$gr;
     $839=(($max_nbits_ch+($838<<3))|0);
     $840=(($839+($837<<2))|0);
     $841=((HEAP32[(($840)>>2)])|0);
     $842=($841|0)>4095;
     if ($842) {
      $844=$ch;
      $845=$gr;
      $846=(($max_nbits_ch+($845<<3))|0);
      $847=(($846+($844<<2))|0);
      HEAP32[(($847)>>2)]=4095;
     }
     $850=$ch;
     $851=((($850)+(1))|0);
     $ch=$851;
    }
   }
   $855=$gr;
   $856=((($855)+(1))|0);
   $gr=$856;
  }
 }
 $sum_fr=0;
 $gr=0;
 while(1) {
  $860=$gr;
  $861=$ngr;
  $862=($860|0)<($861|0);
  if (!($862)) {
   break;
  }
  $sum_gr=0;
  $ch=0;
  while(1) {
   $865=$ch;
   $866=$nch;
   $867=($865|0)<($866|0);
   if (!($867)) {
    break;
   }
   $869=$ch;
   $870=$gr;
   $871=(($max_nbits_ch+($870<<3))|0);
   $872=(($871+($869<<2))|0);
   $873=((HEAP32[(($872)>>2)])|0);
   $874=$sum_gr;
   $875=((($874)+($873))|0);
   $sum_gr=$875;
   $876=$ch;
   $877=$gr;
   $878=(($max_nbits_ch+($877<<3))|0);
   $879=(($878+($876<<2))|0);
   $880=((HEAP32[(($879)>>2)])|0);
   $881=($880|0)>4095;
   if ($881) {
    $ok=0;
   }
   $885=$ch;
   $886=((($885)+(1))|0);
   $ch=$886;
  }
  $888=$sum_gr;
  $889=$sum_fr;
  $890=((($889)+($888))|0);
  $sum_fr=$890;
  $891=$sum_gr;
  $892=($891|0)>7680;
  if ($892) {
   $ok=0;
  }
  $896=$gr;
  $897=((($896)+(1))|0);
  $gr=$897;
 }
 $899=$sum_fr;
 $900=$max_nbits_fr;
 $901=($899|0)>($900|0);
 if ($901) {
  $ok=0;
 }
 $904=$ok;
 $905=($904|0)!=0;
 if (!($905)) {
  $gr=0;
  while(1) {
   $908=$gr;
   $909=$ngr;
   $910=($908|0)<($909|0);
   if (!($910)) {
    break;
   }
   $ch=0;
   while(1) {
    $913=$ch;
    $914=$nch;
    $915=($913|0)<($914|0);
    if (!($915)) {
     break;
    }
    $917=$ch;
    $918=$gr;
    $919=$5;
    $920=(($919+($918<<3))|0);
    $921=(($920+($917<<2))|0);
    $922=((HEAP32[(($921)>>2)])|0);
    $923=$ch;
    $924=$gr;
    $925=(($max_nbits_ch+($924<<3))|0);
    $926=(($925+($923<<2))|0);
    HEAP32[(($926)>>2)]=$922;
    $928=$ch;
    $929=((($928)+(1))|0);
    $ch=$929;
   }
   $932=$gr;
   $933=((($932)+(1))|0);
   $gr=$933;
  }
 }
 $ch=0;
 while(1) {
  $937=$ch;
  $938=$nch;
  $939=($937|0)<($938|0);
  if (!($939)) {
   break;
  }
  $941=$ch;
  $942=$2;
  $943=(($942+304)|0);
  $944=(($943+21024)|0);
  $945=(($944+($941<<4))|0);
  $946=(($945)|0);
  HEAP32[(($946)>>2)]=0;
  $947=$ch;
  $948=$2;
  $949=(($948+304)|0);
  $950=(($949+21024)|0);
  $951=(($950+($947<<4))|0);
  $952=(($951+4)|0);
  HEAP32[(($952)>>2)]=0;
  $953=$ch;
  $954=$2;
  $955=(($954+304)|0);
  $956=(($955+21024)|0);
  $957=(($956+($953<<4))|0);
  $958=(($957+8)|0);
  HEAP32[(($958)>>2)]=0;
  $959=$ch;
  $960=$2;
  $961=(($960+304)|0);
  $962=(($961+21024)|0);
  $963=(($962+($959<<4))|0);
  $964=(($963+12)|0);
  HEAP32[(($964)>>2)]=0;
  $966=$ch;
  $967=((($966)+(1))|0);
  $ch=$967;
 }
 $gr=0;
 while(1) {
  $970=$gr;
  $971=$ngr;
  $972=($970|0)<($971|0);
  if (!($972)) {
   break;
  }
  $ch=0;
  while(1) {
   $975=$ch;
   $976=$nch;
   $977=($975|0)<($976|0);
   if (!($977)) {
    break;
   }
   $979=$ch;
   $980=$gr;
   $981=$2;
   $982=(($981+304)|0);
   $983=(($982)|0);
   $984=(($983+((($980)*(10504))&-1))|0);
   $985=(($984+((($979)*(5252))&-1))|0);
   $986=(($985+4784)|0);
   HEAP32[(($986)>>2)]=0;
   $988=$ch;
   $989=((($988)+(1))|0);
   $ch=$989;
  }
  $992=$gr;
  $993=((($992)+(1))|0);
  $gr=$993;
 }
 $use_nbits_fr=0;
 $gr=0;
 while(1) {
  $996=$gr;
  $997=$ngr;
  $998=($996|0)<($997|0);
  if (!($998)) {
   break;
  }
  $1000=$gr;
  $1001=(($use_nbits_gr+($1000<<2))|0);
  HEAP32[(($1001)>>2)]=0;
  $ch=0;
  while(1) {
   $1003=$ch;
   $1004=$nch;
   $1005=($1003|0)<($1004|0);
   if (!($1005)) {
    break;
   }
   $1007=$ch;
   $1008=$gr;
   $1009=(($that_+((($1008)*(72))&-1))|0);
   $1010=(($1009+((($1007)*(36))&-1))|0);
   $that6=$1010;
   $1011=$ch;
   $1012=$gr;
   $1013=(($use_nbits_ch+($1012<<3))|0);
   $1014=(($1013+($1011<<2))|0);
   HEAP32[(($1014)>>2)]=0;
   $1015=$ch;
   $1016=$gr;
   $1017=$5;
   $1018=(($1017+($1016<<3))|0);
   $1019=(($1018+($1015<<2))|0);
   $1020=((HEAP32[(($1019)>>2)])|0);
   $1021=($1020|0)>0;
   if ($1021) {
    $1023=$ch;
    $1024=$gr;
    $1025=(($sfwork_+((($1024)*(312))&-1))|0);
    $1026=(($1025+((($1023)*(156))&-1))|0);
    $1027=(($1026)|0);
    $sfwork7=$1027;
    $1028=$ch;
    $1029=$gr;
    $1030=(($vbrsfmin_+((($1029)*(312))&-1))|0);
    $1031=(($1030+((($1028)*(156))&-1))|0);
    $1032=(($1031)|0);
    $vbrsfmin8=$1032;
    $1033=$sfwork7;
    $1034=$sfwork7;
    $1035=$that6;
    $1036=(($1035+16)|0);
    $1037=((HEAP32[(($1036)>>2)])|0);
    $1038=(($1037+4780)|0);
    $1039=((HEAP32[(($1038)>>2)])|0);
    _cutDistribution($1033,$1034,$1039);
    $1040=$that6;
    $1041=$sfwork7;
    $1042=$vbrsfmin8;
    $1043=$ch;
    $1044=$gr;
    $1045=(($max_nbits_ch+($1044<<3))|0);
    $1046=(($1045+($1043<<2))|0);
    $1047=((HEAP32[(($1046)>>2)])|0);
    _outOfBitsStrategy($1040,$1041,$1042,$1047);
   }
   $1049=$2;
   $1050=$gr;
   $1051=$ch;
   $1052=((_reduce_bit_usage($1049,$1050,$1051))|0);
   $1053=$ch;
   $1054=$gr;
   $1055=(($use_nbits_ch+($1054<<3))|0);
   $1056=(($1055+($1053<<2))|0);
   HEAP32[(($1056)>>2)]=$1052;
   $1057=$ch;
   $1058=$gr;
   $1059=(($use_nbits_ch+($1058<<3))|0);
   $1060=(($1059+($1057<<2))|0);
   $1061=((HEAP32[(($1060)>>2)])|0);
   $1062=$gr;
   $1063=(($use_nbits_gr+($1062<<2))|0);
   $1064=((HEAP32[(($1063)>>2)])|0);
   $1065=((($1064)+($1061))|0);
   HEAP32[(($1063)>>2)]=$1065;
   $1067=$ch;
   $1068=((($1067)+(1))|0);
   $ch=$1068;
  }
  $1070=$gr;
  $1071=(($use_nbits_gr+($1070<<2))|0);
  $1072=((HEAP32[(($1071)>>2)])|0);
  $1073=$use_nbits_fr;
  $1074=((($1073)+($1072))|0);
  $use_nbits_fr=$1074;
  $1076=$gr;
  $1077=((($1076)+(1))|0);
  $gr=$1077;
 }
 $1079=$use_nbits_fr;
 $1080=$max_nbits_fr;
 $1081=($1079|0)<=($1080|0);
 if (!($1081)) {
  $1085=$2;
  $1086=$max_nbits_fr;
  $1087=$use_nbits_fr;
  _lame_errorf($1085,17064,(((tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,HEAP32[((tempVarArgs)>>2)]=$1086,HEAP32[(((tempVarArgs)+(8))>>2)]=$1087,tempVarArgs))|0)); STACKTOP=tempVarArgs;
  _exit(((-1)|0));
  return ((0)|0);
 }
 $1083=$use_nbits_fr;
 $1=$1083;
 $1089=$1;
 STACKTOP=sp;return (($1089)|0);
}


function _guess_scalefac_x34($xr,$xr34,$l3_xmin,$bw,$sf_min){
 $xr=($xr)|0;
 $xr34=($xr34)|0;
 $l3_xmin=+($l3_xmin);
 $bw=($bw)|0;
 $sf_min=($sf_min)|0;
 var $1=0,$2=0,$3=0,$4=.0,$5=0,$6=0,$guess=0,$7=.0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$15=0,$17=0,$18=0,$21=0,$22=0,$23=0;
 var $24=0,$26=0,label=0;
 var sp=0;sp=STACKTOP;







 $2=$xr;
 $3=$xr34;
 $4=$l3_xmin;
 $5=$bw;
 $6=$sf_min;
 $7=$4;
 $8=$5;
 $9=((_calc_scalefac($7,$8))|0);
 $guess=$9;
 $10=$guess;
 $11=$6;
 $12=($11&255);
 $13=($10|0)<($12|0);
 do {
  if ($13) {
   $15=$6;
   $1=$15;
  } else {
   $17=$guess;
   $18=($17|0)>=255;
   if ($18) {
    $1=-1;
    break;
   } else {
    $21=$2;
    $22=$3;
    $23=$guess;
    $24=(($23)&255);
    $1=$24;
    break;
   }
  }
 } while(0);
 $26=$1;
 STACKTOP=sp;return (($26)|0);
}


function _find_scalefac_x34($xr,$xr34,$l3_xmin,$bw,$sf_min){
 $xr=($xr)|0;
 $xr34=($xr34)|0;
 $l3_xmin=+($l3_xmin);
 $bw=($bw)|0;
 $sf_min=($sf_min)|0;
 var $1=0,$2=0,$3=.0,$4=0,$5=0,$did_it=0,$sf=0,$sf_ok=0,$delsf=0,$seen_good_one=0,$i=0,$bad=0,$6=0,$8=0,$9=0,$10=0,$12=0,$13=0,$14=0,$15=0;
 var $16=0,$17=0,$18=0,$19=0,$20=0,$22=0,$23=0,$24=0,$25=0,$26=0,$27=0,$29=0,$30=0,$31=.0,$32=0,$33=0,$34=0,$35=0,$36=0,$37=0;
 var $39=0,$40=0,$41=0,$42=0,$43=0,$44=0,$46=0,$47=0,$48=0,$49=0,$50=0,$51=0,$52=0,$56=0,$57=0,$59=0,$60=0,$61=0,$63=0,$65=0;
 var $66=0,$67=0,$68=0,$69=0,$71=0,$73=0,label=0;
 var sp=0;sp=STACKTOP;STACKTOP=(STACKTOP+2048)|0;





 $did_it=((sp)|0);






 $1=$xr;
 $2=$xr34;
 $3=$l3_xmin;
 $4=$bw;
 $5=$sf_min;
 $sf=-128;
 $sf_ok=-1;
 $delsf=-128;
 $seen_good_one=0;
 $6=$did_it;
 _memset((((($6)|0))|0), ((((0)|0))|0), ((((2048)|0))|0))|0;
 $i=0;
 while(1) {
  $8=$i;
  $9=($8&255);
  $10=($9|0)<8;
  if (!($10)) {
   break;
  }
  $12=$delsf;
  $13=($12&255);
  $14=$13>>1;
  $15=(($14)&255);
  $delsf=$15;
  $16=$sf;
  $17=($16&255);
  $18=$5;
  $19=($18&255);
  $20=($17|0)<=($19|0);
  if ($20) {
   $22=$delsf;
   $23=($22&255);
   $24=$sf;
   $25=($24&255);
   $26=((($25)+($23))|0);
   $27=(($26)&255);
   $sf=$27;
  } else {
   $29=$1;
   $30=$2;
   $31=$3;
   $32=$4;
   $33=$sf;
   $34=(($did_it)|0);
   $35=((_tri_calc_sfb_noise_x34($29,$30,$31,$32,$33,$34))|0);
   $bad=$35;
   $36=$bad;
   $37=(($36<<24)>>24)!=0;
   if ($37) {
    $39=$delsf;
    $40=($39&255);
    $41=$sf;
    $42=($41&255);
    $43=((($42)-($40))|0);
    $44=(($43)&255);
    $sf=$44;
   } else {
    $46=$sf;
    $sf_ok=$46;
    $47=$delsf;
    $48=($47&255);
    $49=$sf;
    $50=($49&255);
    $51=((($50)+($48))|0);
    $52=(($51)&255);
    $sf=$52;
    $seen_good_one=1;
   }
  }
  $56=$i;
  $57=((($56)+(1))&255);
  $i=$57;
 }
 $59=$seen_good_one;
 $60=($59&255);
 $61=($60|0)>0;
 if ($61) {
  $63=$sf_ok;
  $sf=$63;
 }
 $65=$sf;
 $66=($65&255);
 $67=$5;
 $68=($67&255);
 $69=($66|0)<=($68|0);
 if (!($69)) {
  $73=$sf;
  STACKTOP=sp;return (($73)|0);
 }
 $71=$5;
 $sf=$71;
 $73=$sf;
 STACKTOP=sp;return (($73)|0);
}


function _short_block_constrain($that,$vbrsf,$vbrsfmin,$vbrmax){
 $that=($that)|0;
 $vbrsf=($vbrsf)|0;
 $vbrsfmin=($vbrsfmin)|0;
 $vbrmax=($vbrmax)|0;
 var $1=0,$2=0,$3=0,$4=0,$cod_info=0,$gfc=0,$cfg=0,$maxminsfb=0,$mover=0,$maxover0=0,$maxover1=0,$delta=0,$v=0,$v0=0,$v1=0,$sfb=0,$psymax=0,$sf_temp=0,$5=0,$6=0;
 var $7=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$14=0,$15=0,$16=0,$17=0,$18=0,$20=0,$21=0,$22=0,$24=0,$25=0,$26=0,$27=0,$28=0;
 var $29=0,$30=0,$31=0,$32=0,$34=0,$36=0,$37=0,$38=0,$39=0,$40=0,$41=0,$42=0,$43=0,$44=0,$45=0,$46=0,$47=0,$48=0,$49=0,$50=0;
 var $51=0,$52=0,$53=0,$54=0,$56=0,$58=0,$59=0,$60=0,$62=0,$65=0,$66=0,$68=0,$69=0,$70=0,$71=0,$73=0,$74=0,$75=0,$77=0,$79=0;
 var $81=0,$83=0,$85=0,$86=0,$87=0,$89=0,$91=0,$92=0,$93=0,$94=0,$95=0,$96=0,$97=0,$98=0,$99=0,$100=0,$101=0,$103=0,$104=0,$106=0;
 var $107=0,$109=0,$110=0,$113=0,$114=0,$115=0,$117=0,$119=0,$120=0,$121=0,$122=0,$123=0,$124=0,$125=0,$127=0,$128=0,$130=0,$131=0,$132=0,$133=0;
 var $135=0,$136=0,$140=0,$141=0,$143=0,$144=0,$145=0,$146=0,$147=0,$148=0,$149=0,$150=0,$152=0,$153=0,$155=0,$156=0,$157=0,$158=0,$159=0,$160=0;
 var $161=0,$162=0,label=0;
 var sp=0;sp=STACKTOP;STACKTOP=(STACKTOP+160)|0;

















 $sf_temp=((sp)|0);
 $1=$that;
 $2=$vbrsf;
 $3=$vbrsfmin;
 $4=$vbrmax;
 $5=$1;
 $6=(($5+16)|0);
 $7=((HEAP32[(($6)>>2)])|0);
 $cod_info=$7;
 $8=$1;
 $9=(($8+12)|0);
 $10=((HEAP32[(($9)>>2)])|0);
 $gfc=$10;
 $11=$gfc;
 $12=(($11+16)|0);
 $cfg=$12;
 $13=$1;
 $14=(($13+20)|0);
 $15=((HEAP32[(($14)>>2)])|0);
 $maxminsfb=$15;
 $maxover0=0;
 $maxover1=0;
 $delta=0;
 $16=$cod_info;
 $17=(($16+4864)|0);
 $18=((HEAP32[(($17)>>2)])|0);
 $psymax=$18;
 $sfb=0;
 while(1) {
  $20=$sfb;
  $21=$psymax;
  $22=($20|0)<($21|0);
  if (!($22)) {
   break;
  }
  $24=$4;
  $25=$sfb;
  $26=$2;
  $27=(($26+($25<<2))|0);
  $28=((HEAP32[(($27)>>2)])|0);
  $29=((($24)-($28))|0);
  $v=$29;
  $30=$delta;
  $31=$v;
  $32=($30|0)<($31|0);
  if ($32) {
   $34=$v;
   $delta=$34;
  }
  $36=$v;
  $37=$sfb;
  $38=((10528+$37)|0);
  $39=((HEAP8[($38)])|0);
  $40=($39&255);
  $41=($40<<1);
  $42=((($41)+(56))|0);
  $43=((($36)-($42))|0);
  $v0=$43;
  $44=$v;
  $45=$sfb;
  $46=((10528+$45)|0);
  $47=((HEAP8[($46)])|0);
  $48=($47&255);
  $49=($48<<2);
  $50=((($49)+(56))|0);
  $51=((($44)-($50))|0);
  $v1=$51;
  $52=$maxover0;
  $53=$v0;
  $54=($52|0)<($53|0);
  if ($54) {
   $56=$v0;
   $maxover0=$56;
  }
  $58=$maxover1;
  $59=$v1;
  $60=($58|0)<($59|0);
  if ($60) {
   $62=$v1;
   $maxover1=$62;
  }
  $65=$sfb;
  $66=((($65)+(1))|0);
  $sfb=$66;
 }
 $68=$cfg;
 $69=(($68+12)|0);
 $70=((HEAP32[(($69)>>2)])|0);
 $71=($70|0)==2;
 if ($71) {
  $73=$maxover0;
  $74=$maxover1;
  $75=($73|0)<($74|0);
  if ($75) {
   $77=$maxover0;
   $81=$77;
  } else {
   $79=$maxover1;
   $81=$79;
  }

  $mover=$81;
 } else {
  $83=$maxover0;
  $mover=$83;
 }
 $85=$delta;
 $86=$mover;
 $87=($85|0)>($86|0);
 if ($87) {
  $89=$mover;
  $delta=$89;
 }
 $91=$delta;
 $92=$4;
 $93=((($92)-($91))|0);
 $4=$93;
 $94=$mover;
 $95=$maxover0;
 $96=((($95)-($94))|0);
 $maxover0=$96;
 $97=$mover;
 $98=$maxover1;
 $99=((($98)-($97))|0);
 $maxover1=$99;
 $100=$maxover0;
 $101=($100|0)==0;
 if ($101) {
  $103=$cod_info;
  $104=(($103+4836)|0);
  HEAP32[(($104)>>2)]=0;
 } else {
  $106=$maxover1;
  $107=($106|0)==0;
  if ($107) {
   $109=$cod_info;
   $110=(($109+4836)|0);
   HEAP32[(($110)>>2)]=1;
  }
 }
 $113=$4;
 $114=$maxminsfb;
 $115=($113|0)<($114|0);
 if ($115) {
  $117=$maxminsfb;
  $4=$117;
 }
 $119=$4;
 $120=$cod_info;
 $121=(($120+4780)|0);
 HEAP32[(($121)>>2)]=$119;
 $122=$cod_info;
 $123=(($122+4780)|0);
 $124=((HEAP32[(($123)>>2)])|0);
 $125=($124|0)<0;
 if ($125) {
  $127=$cod_info;
  $128=(($127+4780)|0);
  HEAP32[(($128)>>2)]=0;
 } else {
  $130=$cod_info;
  $131=(($130+4780)|0);
  $132=((HEAP32[(($131)>>2)])|0);
  $133=($132|0)>255;
  if ($133) {
   $135=$cod_info;
   $136=(($135+4780)|0);
   HEAP32[(($136)>>2)]=255;
  }
 }
 $sfb=0;
 while(1) {
  $140=$sfb;
  $141=($140|0)<39;
  if (!($141)) {
   break;
  }
  $143=$sfb;
  $144=$2;
  $145=(($144+($143<<2))|0);
  $146=((HEAP32[(($145)>>2)])|0);
  $147=$4;
  $148=((($146)-($147))|0);
  $149=$sfb;
  $150=(($sf_temp+($149<<2))|0);
  HEAP32[(($150)>>2)]=$148;
  $152=$sfb;
  $153=((($152)+(1))|0);
  $sfb=$153;
 }
 $155=$cod_info;
 $156=$1;
 $157=(($156+24)|0);
 $158=(($157)|0);
 $159=(($sf_temp)|0);
 _set_subblock_gain($155,$158,$159);
 $160=$cod_info;
 $161=$3;
 $162=(($sf_temp)|0);
 _set_scalefacs($160,$161,$162,10528);
 STACKTOP=sp;return;
}


function _long_block_constrain($that,$vbrsf,$vbrsfmin,$vbrmax){
 $that=($that)|0;
 $vbrsf=($vbrsf)|0;
 $vbrsfmin=($vbrsfmin)|0;
 $vbrmax=($vbrmax)|0;
 var $1=0,$2=0,$3=0,$4=0,$cod_info=0,$gfc=0,$cfg=0,$max_rangep=0,$maxminsfb=0,$sfb=0,$maxover0=0,$maxover1=0,$maxover0p=0,$maxover1p=0,$mover=0,$delta=0,$v=0,$v0=0,$v1=0,$v0p=0;
 var $v1p=0,$vm0p=0,$vm1p=0,$psymax=0,$gain=0,$a=0,$gain1=0,$b=0,$sf_temp=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$14=0,$15=0;
 var $16=0,$17=0,$18=0,$19=0,$20=0,$21=0,$22=0,$23=0,$25=0,$26=0,$27=0,$29=0,$30=0,$31=0,$32=0,$33=0,$34=0,$35=0,$36=0,$37=0;
 var $39=0,$41=0,$42=0,$43=0,$44=0,$45=0,$46=0,$47=0,$48=0,$49=0,$50=0,$51=0,$52=0,$53=0,$54=0,$55=0,$56=0,$57=0,$58=0,$59=0;
 var $60=0,$61=0,$62=0,$63=0,$64=0,$65=0,$66=0,$67=0,$68=0,$69=0,$70=0,$71=0,$72=0,$73=0,$74=0,$75=0,$76=0,$77=0,$78=0,$79=0;
 var $80=0,$81=0,$83=0,$85=0,$86=0,$87=0,$89=0,$91=0,$92=0,$93=0,$95=0,$97=0,$98=0,$99=0,$101=0,$104=0,$105=0,$107=0,$108=0,$110=0;
 var $111=0,$112=0,$113=0,$114=0,$115=0,$117=0,$120=0,$121=0,$122=0,$124=0,$125=0,$126=0,$127=0,$128=0,$129=0,$130=0,$131=0,$132=0,$133=0,$134=0;
 var $135=0,$136=0,$140=0,$141=0,$144=0,$145=0,$147=0,$148=0,$149=0,$150=0,$151=0,$152=0,$154=0,$157=0,$158=0,$159=0,$161=0,$162=0,$163=0,$164=0;
 var $165=0,$166=0,$167=0,$168=0,$169=0,$170=0,$171=0,$172=0,$173=0,$177=0,$178=0,$181=0,$182=0,$184=0,$186=0,$187=0,$189=0,$191=0,$192=0,$193=0;
 var $194=0,$196=0,$197=0,$199=0,$200=0,$201=0,$203=0,$205=0,$207=0,$208=0,$209=0,$210=0,$212=0,$214=0,$216=0,$217=0,$218=0,$219=0,$221=0,$223=0;
 var $225=0,$226=0,$227=0,$228=0,$230=0,$232=0,$233=0,$234=0,$235=0,$236=0,$237=0,$239=0,$241=0,$242=0,$243=0,$244=0,$245=0,$246=0,$247=0,$248=0;
 var $249=0,$250=0,$251=0,$252=0,$253=0,$254=0,$256=0,$257=0,$258=0,$259=0,$261=0,$262=0,$264=0,$265=0,$266=0,$267=0,$269=0,$270=0,$272=0,$273=0;
 var $274=0,$275=0,$277=0,$278=0,$280=0,$281=0,$282=0,$283=0,$289=0,$290=0,$291=0,$292=0,$293=0,$294=0,$295=0,$297=0,$298=0,$300=0,$301=0,$302=0;
 var $303=0,$305=0,$306=0,$310=0,$311=0,$313=0,$314=0,$315=0,$316=0,$317=0,$318=0,$319=0,$320=0,$322=0,$323=0,$325=0,$326=0,$327=0,$328=0,label=0;
 var sp=0;sp=STACKTOP;STACKTOP=(STACKTOP+160)|0;




























 $sf_temp=((sp)|0);
 $1=$that;
 $2=$vbrsf;
 $3=$vbrsfmin;
 $4=$vbrmax;
 $5=$1;
 $6=(($5+16)|0);
 $7=((HEAP32[(($6)>>2)])|0);
 $cod_info=$7;
 $8=$1;
 $9=(($8+12)|0);
 $10=((HEAP32[(($9)>>2)])|0);
 $gfc=$10;
 $11=$gfc;
 $12=(($11+16)|0);
 $cfg=$12;
 $13=$1;
 $14=(($13+20)|0);
 $15=((HEAP32[(($14)>>2)])|0);
 $maxminsfb=$15;
 $delta=0;
 $vm0p=1;
 $vm1p=1;
 $16=$cod_info;
 $17=(($16+4864)|0);
 $18=((HEAP32[(($17)>>2)])|0);
 $psymax=$18;
 $19=$cfg;
 $20=(($19+60)|0);
 $21=((HEAP32[(($20)>>2)])|0);
 $22=($21|0)==2;
 $23=($22?10688:10664);
 $max_rangep=$23;
 $maxover0=0;
 $maxover1=0;
 $maxover0p=0;
 $maxover1p=0;
 $sfb=0;
 while(1) {
  $25=$sfb;
  $26=$psymax;
  $27=($25|0)<($26|0);
  if (!($27)) {
   break;
  }
  $29=$4;
  $30=$sfb;
  $31=$2;
  $32=(($31+($30<<2))|0);
  $33=((HEAP32[(($32)>>2)])|0);
  $34=((($29)-($33))|0);
  $v=$34;
  $35=$delta;
  $36=$v;
  $37=($35|0)<($36|0);
  if ($37) {
   $39=$v;
   $delta=$39;
  }
  $41=$v;
  $42=$sfb;
  $43=((10688+$42)|0);
  $44=((HEAP8[($43)])|0);
  $45=($44&255);
  $46=($45<<1);
  $47=((($41)-($46))|0);
  $v0=$47;
  $48=$v;
  $49=$sfb;
  $50=((10688+$49)|0);
  $51=((HEAP8[($50)])|0);
  $52=($51&255);
  $53=($52<<2);
  $54=((($48)-($53))|0);
  $v1=$54;
  $55=$v;
  $56=$sfb;
  $57=$max_rangep;
  $58=(($57+$56)|0);
  $59=((HEAP8[($58)])|0);
  $60=($59&255);
  $61=$sfb;
  $62=((9552+($61<<2))|0);
  $63=((HEAP32[(($62)>>2)])|0);
  $64=((($60)+($63))|0);
  $65=($64<<1);
  $66=((($55)-($65))|0);
  $v0p=$66;
  $67=$v;
  $68=$sfb;
  $69=$max_rangep;
  $70=(($69+$68)|0);
  $71=((HEAP8[($70)])|0);
  $72=($71&255);
  $73=$sfb;
  $74=((9552+($73<<2))|0);
  $75=((HEAP32[(($74)>>2)])|0);
  $76=((($72)+($75))|0);
  $77=($76<<2);
  $78=((($67)-($77))|0);
  $v1p=$78;
  $79=$maxover0;
  $80=$v0;
  $81=($79|0)<($80|0);
  if ($81) {
   $83=$v0;
   $maxover0=$83;
  }
  $85=$maxover1;
  $86=$v1;
  $87=($85|0)<($86|0);
  if ($87) {
   $89=$v1;
   $maxover1=$89;
  }
  $91=$maxover0p;
  $92=$v0p;
  $93=($91|0)<($92|0);
  if ($93) {
   $95=$v0p;
   $maxover0p=$95;
  }
  $97=$maxover1p;
  $98=$v1p;
  $99=($97|0)<($98|0);
  if ($99) {
   $101=$v1p;
   $maxover1p=$101;
  }
  $104=$sfb;
  $105=((($104)+(1))|0);
  $sfb=$105;
 }
 $107=$vm0p;
 $108=($107|0)==1;
 if ($108) {
  $110=$4;
  $111=$maxover0p;
  $112=((($110)-($111))|0);
  $gain=$112;
  $113=$gain;
  $114=$maxminsfb;
  $115=($113|0)<($114|0);
  if ($115) {
   $117=$maxminsfb;
   $gain=$117;
  }
  $sfb=0;
  while(1) {
   $120=$sfb;
   $121=$psymax;
   $122=($120|0)<($121|0);
   if (!($122)) {
    break;
   }
   $124=$gain;
   $125=$sfb;
   $126=$3;
   $127=(($126+($125<<2))|0);
   $128=((HEAP32[(($127)>>2)])|0);
   $129=((($124)-($128))|0);
   $130=$sfb;
   $131=((9552+($130<<2))|0);
   $132=((HEAP32[(($131)>>2)])|0);
   $133=($132<<1);
   $134=((($129)-($133))|0);
   $a=$134;
   $135=$a;
   $136=($135|0)<=0;
   if ($136) {
    label = 21;
    break;
   }
   $140=$sfb;
   $141=((($140)+(1))|0);
   $sfb=$141;
  }
  if ((label|0) == 21) {
   $vm0p=0;
   $vm1p=0;
  }
 }
 $144=$vm1p;
 $145=($144|0)==1;
 if ($145) {
  $147=$4;
  $148=$maxover1p;
  $149=((($147)-($148))|0);
  $gain1=$149;
  $150=$gain1;
  $151=$maxminsfb;
  $152=($150|0)<($151|0);
  if ($152) {
   $154=$maxminsfb;
   $gain1=$154;
  }
  $sfb=0;
  while(1) {
   $157=$sfb;
   $158=$psymax;
   $159=($157|0)<($158|0);
   if (!($159)) {
    break;
   }
   $161=$gain1;
   $162=$sfb;
   $163=$3;
   $164=(($163+($162<<2))|0);
   $165=((HEAP32[(($164)>>2)])|0);
   $166=((($161)-($165))|0);
   $167=$sfb;
   $168=((9552+($167<<2))|0);
   $169=((HEAP32[(($168)>>2)])|0);
   $170=($169<<2);
   $171=((($166)-($170))|0);
   $b=$171;
   $172=$b;
   $173=($172|0)<=0;
   if ($173) {
    label = 31;
    break;
   }
   $177=$sfb;
   $178=((($177)+(1))|0);
   $sfb=$178;
  }
  if ((label|0) == 31) {
   $vm1p=0;
  }
 }
 $181=$vm0p;
 $182=($181|0)==0;
 if ($182) {
  $184=$maxover0;
  $maxover0p=$184;
 }
 $186=$vm1p;
 $187=($186|0)==0;
 if ($187) {
  $189=$maxover1;
  $maxover1p=$189;
 }
 $191=$cfg;
 $192=(($191+12)|0);
 $193=((HEAP32[(($192)>>2)])|0);
 $194=($193|0)!=2;
 if ($194) {
  $196=$maxover0;
  $maxover1=$196;
  $197=$maxover0p;
  $maxover1p=$197;
 }
 $199=$maxover0;
 $200=$maxover0p;
 $201=($199|0)<($200|0);
 if ($201) {
  $203=$maxover0;
  $207=$203;
 } else {
  $205=$maxover0p;
  $207=$205;
 }

 $mover=$207;
 $208=$mover;
 $209=$maxover1;
 $210=($208|0)<($209|0);
 if ($210) {
  $212=$mover;
  $216=$212;
 } else {
  $214=$maxover1;
  $216=$214;
 }

 $mover=$216;
 $217=$mover;
 $218=$maxover1p;
 $219=($217|0)<($218|0);
 if ($219) {
  $221=$mover;
  $225=$221;
 } else {
  $223=$maxover1p;
  $225=$223;
 }

 $mover=$225;
 $226=$delta;
 $227=$mover;
 $228=($226|0)>($227|0);
 if ($228) {
  $230=$mover;
  $delta=$230;
 }
 $232=$delta;
 $233=$4;
 $234=((($233)-($232))|0);
 $4=$234;
 $235=$4;
 $236=$maxminsfb;
 $237=($235|0)<($236|0);
 if ($237) {
  $239=$maxminsfb;
  $4=$239;
 }
 $241=$mover;
 $242=$maxover0;
 $243=((($242)-($241))|0);
 $maxover0=$243;
 $244=$mover;
 $245=$maxover0p;
 $246=((($245)-($244))|0);
 $maxover0p=$246;
 $247=$mover;
 $248=$maxover1;
 $249=((($248)-($247))|0);
 $maxover1=$249;
 $250=$mover;
 $251=$maxover1p;
 $252=((($251)-($250))|0);
 $maxover1p=$252;
 $253=$maxover0;
 $254=($253|0)==0;
 if ($254) {
  $256=$cod_info;
  $257=(($256+4836)|0);
  HEAP32[(($257)>>2)]=0;
  $258=$cod_info;
  $259=(($258+4832)|0);
  HEAP32[(($259)>>2)]=0;
  $max_rangep=10688;
 } else {
  $261=$maxover0p;
  $262=($261|0)==0;
  if ($262) {
   $264=$cod_info;
   $265=(($264+4836)|0);
   HEAP32[(($265)>>2)]=0;
   $266=$cod_info;
   $267=(($266+4832)|0);
   HEAP32[(($267)>>2)]=1;
  } else {
   $269=$maxover1;
   $270=($269|0)==0;
   if ($270) {
    $272=$cod_info;
    $273=(($272+4836)|0);
    HEAP32[(($273)>>2)]=1;
    $274=$cod_info;
    $275=(($274+4832)|0);
    HEAP32[(($275)>>2)]=0;
    $max_rangep=10688;
   } else {
    $277=$maxover1p;
    $278=($277|0)==0;
    if ($278) {
     $280=$cod_info;
     $281=(($280+4836)|0);
     HEAP32[(($281)>>2)]=1;
     $282=$cod_info;
     $283=(($282+4832)|0);
     HEAP32[(($283)>>2)]=1;
    } else {
    }
   }
  }
 }
 $289=$4;
 $290=$cod_info;
 $291=(($290+4780)|0);
 HEAP32[(($291)>>2)]=$289;
 $292=$cod_info;
 $293=(($292+4780)|0);
 $294=((HEAP32[(($293)>>2)])|0);
 $295=($294|0)<0;
 if ($295) {
  $297=$cod_info;
  $298=(($297+4780)|0);
  HEAP32[(($298)>>2)]=0;
 } else {
  $300=$cod_info;
  $301=(($300+4780)|0);
  $302=((HEAP32[(($301)>>2)])|0);
  $303=($302|0)>255;
  if ($303) {
   $305=$cod_info;
   $306=(($305+4780)|0);
   HEAP32[(($306)>>2)]=255;
  }
 }
 $sfb=0;
 while(1) {
  $310=$sfb;
  $311=($310|0)<39;
  if (!($311)) {
   break;
  }
  $313=$sfb;
  $314=$2;
  $315=(($314+($313<<2))|0);
  $316=((HEAP32[(($315)>>2)])|0);
  $317=$4;
  $318=((($316)-($317))|0);
  $319=$sfb;
  $320=(($sf_temp+($319<<2))|0);
  HEAP32[(($320)>>2)]=$318;
  $322=$sfb;
  $323=((($322)+(1))|0);
  $sfb=$323;
 }
 $325=$cod_info;
 $326=$3;
 $327=(($sf_temp)|0);
 $328=$max_rangep;
 _set_scalefacs($325,$326,$327,$328);
 STACKTOP=sp;return;
}


function _block_sf($that,$l3_xmin,$vbrsf,$vbrsfmin){
 $that=($that)|0;
 $l3_xmin=($l3_xmin)|0;
 $vbrsf=($vbrsf)|0;
 $vbrsfmin=($vbrsfmin)|0;
 var $1=0,$2=0,$3=0,$4=0,$max_xr34=.0,$xr=0,$xr34_orig=0,$width=0,$energy_above_cutoff=0,$max_nonzero_coeff=0,$maxsf=0,$sfb=0,$m_o=0,$j=0,$i=0,$psymax=0,$w=0,$m=0,$l=0,$m1=0;
 var $m2=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$14=0,$15=0,$16=0,$17=0,$18=0,$19=0,$20=0,$21=0,$22=0,$23=0;
 var $24=0,$25=0,$26=0,$27=0,$28=0,$29=0,$30=0,$31=0,$32=0,$33=0,$34=0,$35=0,$36=0,$37=0,$38=0,$39=0,$40=0,$41=0,$42=0,$43=0;
 var $44=0,$46=0,$47=0,$48=0,$50=0,$51=0,$52=0,$53=0,$54=0,$55=0,$56=0,$57=0,$58=0,$59=0,$60=0,$61=0,$63=0,$65=0,$66=0,$67=0;
 var $68=0,$69=.0,$70=.0,$71=0,$72=0,$73=0,$74=0,$75=0,$76=0,$77=0,$78=0,$79=0,$80=0,$81=0,$82=0,$84=0,$85=0,$86=0,$87=0,$89=0;
 var $90=0,$91=0,$92=0,$93=0,$94=0,$95=0,$96=0,$98=0,$99=0,$100=0,$101=0,$102=0,$103=0,$105=0,$106=0,$107=0,$110=0,$111=0,$112=0,$114=0;
 var $115=0,$117=0,$118=0,$119=0,$120=0,$121=0,$123=0,$124=0,$125=0,$126=0,$127=0,$128=0,$129=0,$130=0,$131=0,$132=0,$133=0,$134=0,$135=.0,$136=0;
 var $137=0,$138=0,$139=0,$140=0,$141=0,$142=0,$143=0,$145=0,$147=0,$148=0,$149=0,$150=0,$152=0,$153=0,$154=0,$156=0,$157=0,$162=0,$163=0,$164=0;
 var $165=0,$166=0,$168=0,$170=0,$172=0,$173=0,$174=0,$175=0,$176=0,$177=0,$178=0,$179=0,$180=0,$181=0,$184=0,$185=0,$187=0,$188=0,$189=0,$190=0;
 var $191=0,$192=0,$193=0,$194=0,$196=0,$197=0,$199=0,$200=0,$202=0,$203=0,$205=0,$206=0,$208=0,$209=0,$210=0,$211=0,$212=0,$214=0,$215=0,$216=0;
 var $217=0,$220=0,$221=0,$224=0,$225=0,label=0;
 var sp=0;sp=STACKTOP;





















 $1=$that;
 $2=$l3_xmin;
 $3=$vbrsf;
 $4=$vbrsfmin;
 $5=$1;
 $6=(($5+16)|0);
 $7=((HEAP32[(($6)>>2)])|0);
 $8=(($7)|0);
 $9=(($8)|0);
 $xr=$9;
 $10=$1;
 $11=(($10+8)|0);
 $12=((HEAP32[(($11)>>2)])|0);
 $13=(($12)|0);
 $xr34_orig=$13;
 $14=$1;
 $15=(($14+16)|0);
 $16=((HEAP32[(($15)>>2)])|0);
 $17=(($16+4872)|0);
 $18=(($17)|0);
 $width=$18;
 $19=$1;
 $20=(($19+16)|0);
 $21=((HEAP32[(($20)>>2)])|0);
 $22=(($21+5212)|0);
 $23=(($22)|0);
 $energy_above_cutoff=$23;
 $24=$1;
 $25=(($24+16)|0);
 $26=((HEAP32[(($25)>>2)])|0);
 $27=(($26+5208)|0);
 $28=((HEAP32[(($27)>>2)])|0);
 $max_nonzero_coeff=$28;
 $maxsf=0;
 $sfb=0;
 $m_o=-1;
 $j=0;
 $i=0;
 $29=$1;
 $30=(($29+16)|0);
 $31=((HEAP32[(($30)>>2)])|0);
 $32=(($31+4864)|0);
 $33=((HEAP32[(($32)>>2)])|0);
 $psymax=$33;
 $34=$1;
 $35=(($34+20)|0);
 HEAP32[(($35)>>2)]=0;
 $36=$1;
 $37=(($36+24)|0);
 $38=(($37)|0);
 HEAP32[(($38)>>2)]=0;
 $39=$1;
 $40=(($39+24)|0);
 $41=(($40+4)|0);
 HEAP32[(($41)>>2)]=0;
 $42=$1;
 $43=(($42+24)|0);
 $44=(($43+8)|0);
 HEAP32[(($44)>>2)]=0;
 while(1) {
  $46=$j;
  $47=$max_nonzero_coeff;
  $48=($46>>>0)<=($47>>>0);
  if (!($48)) {
   break;
  }
  $50=$sfb;
  $51=$width;
  $52=(($51+($50<<2))|0);
  $53=((HEAP32[(($52)>>2)])|0);
  $w=$53;
  $54=$max_nonzero_coeff;
  $55=$j;
  $56=((($54)-($55))|0);
  $57=((($56)+(1))|0);
  $m=$57;
  $58=$w;
  $l=$58;
  $59=$l;
  $60=$m;
  $61=($59>>>0)>($60>>>0);
  if ($61) {
   $63=$m;
   $l=$63;
  }
  $65=$j;
  $66=$xr34_orig;
  $67=(($66+($65<<2))|0);
  $68=$l;
  $69=(+(_vec_max_c($67,$68)));
  $max_xr34=$69;
  $70=$max_xr34;
  $71=((_find_lowest_scalefac($70))|0);
  $m1=$71;
  $72=$m1;
  $73=($72&255);
  $74=$sfb;
  $75=$4;
  $76=(($75+($74<<2))|0);
  HEAP32[(($76)>>2)]=$73;
  $77=$1;
  $78=(($77+20)|0);
  $79=((HEAP32[(($78)>>2)])|0);
  $80=$m1;
  $81=($80&255);
  $82=($79|0)<($81|0);
  if ($82) {
   $84=$m1;
   $85=($84&255);
   $86=$1;
   $87=(($86+20)|0);
   HEAP32[(($87)>>2)]=$85;
  }
  $89=$i;
  $90=$1;
  $91=(($90+24)|0);
  $92=(($91+($89<<2))|0);
  $93=((HEAP32[(($92)>>2)])|0);
  $94=$m1;
  $95=($94&255);
  $96=($93|0)<($95|0);
  if ($96) {
   $98=$m1;
   $99=($98&255);
   $100=$i;
   $101=$1;
   $102=(($101+24)|0);
   $103=(($102+($100<<2))|0);
   HEAP32[(($103)>>2)]=$99;
  }
  $105=$i;
  $106=((($105)+(1))|0);
  $i=$106;
  $107=($106>>>0)>((2)>>>0);
  if ($107) {
   $i=0;
  }
  $110=$sfb;
  $111=$psymax;
  $112=($110|0)<($111|0);
  do {
   if ($112) {
    $114=$w;
    $115=($114>>>0)>((2)>>>0);
    if (!($115)) {
     label = 22;
     break;
    }
    $117=$sfb;
    $118=$energy_above_cutoff;
    $119=(($118+$117)|0);
    $120=((HEAP8[($119)])|0);
    $121=(($120<<24)>>24)!=0;
    if ($121) {
     $123=$1;
     $124=(($123+4)|0);
     $125=((HEAP32[(($124)>>2)])|0);
     $126=$j;
     $127=$xr;
     $128=(($127+($126<<2))|0);
     $129=$j;
     $130=$xr34_orig;
     $131=(($130+($129<<2))|0);
     $132=$sfb;
     $133=$2;
     $134=(($133+($132<<2))|0);
     $135=(+(HEAPF32[(($134)>>2)]));
     $136=$l;
     $137=$m1;
     $138=((FUNCTION_TABLE_iiifii[($125)&7]($128,$131,$135,$136,$137))|0);
     $m2=$138;
     $139=$maxsf;
     $140=($139&255);
     $141=$m2;
     $142=($141&255);
     $143=($140|0)<($142|0);
     if ($143) {
      $145=$m2;
      $maxsf=$145;
     }
     $147=$m_o;
     $148=$m2;
     $149=($148&255);
     $150=($147|0)<($149|0);
     do {
      if ($150) {
       $152=$m2;
       $153=($152&255);
       $154=($153|0)<255;
       if (!($154)) {
        break;
       }
       $156=$m2;
       $157=($156&255);
       $m_o=$157;
      }
     } while(0);
    } else {
     $m2=-1;
     $maxsf=-1;
    }
   } else {
    label = 22;
   }
  } while(0);
  if ((label|0) == 22) {
   label = 0;
   $162=$maxsf;
   $163=($162&255);
   $164=$m1;
   $165=($164&255);
   $166=($163|0)<($165|0);
   if ($166) {
    $168=$m1;
    $maxsf=$168;
   }
   $170=$maxsf;
   $m2=$170;
  }
  $172=$m2;
  $173=($172&255);
  $174=$sfb;
  $175=$3;
  $176=(($175+($174<<2))|0);
  HEAP32[(($176)>>2)]=$173;
  $177=$sfb;
  $178=((($177)+(1))|0);
  $sfb=$178;
  $179=$w;
  $180=$j;
  $181=((($180)+($179))|0);
  $j=$181;
 }
 while(1) {
  $184=$sfb;
  $185=($184|0)<39;
  if (!($185)) {
   break;
  }
  $187=$maxsf;
  $188=($187&255);
  $189=$sfb;
  $190=$3;
  $191=(($190+($189<<2))|0);
  HEAP32[(($191)>>2)]=$188;
  $192=$sfb;
  $193=$4;
  $194=(($193+($192<<2))|0);
  HEAP32[(($194)>>2)]=0;
  $196=$sfb;
  $197=((($196)+(1))|0);
  $sfb=$197;
 }
 $199=$m_o;
 $200=($199|0)>-1;
 if (!($200)) {
  $224=$maxsf;
  $225=($224&255);
  STACKTOP=sp;return (($225)|0);
 }
 $202=$m_o;
 $203=(($202)&255);
 $maxsf=$203;
 $sfb=0;
 while(1) {
  $205=$sfb;
  $206=($205|0)<39;
  if (!($206)) {
   break;
  }
  $208=$sfb;
  $209=$3;
  $210=(($209+($208<<2))|0);
  $211=((HEAP32[(($210)>>2)])|0);
  $212=($211|0)==255;
  if ($212) {
   $214=$m_o;
   $215=$sfb;
   $216=$3;
   $217=(($216+($215<<2))|0);
   HEAP32[(($217)>>2)]=$214;
  }
  $220=$sfb;
  $221=((($220)+(1))|0);
  $sfb=$221;
 }
 $224=$maxsf;
 $225=($224&255);
 STACKTOP=sp;return (($225)|0);
}


function _bitcount($that){
 $that=($that)|0;
 var $1=0,$rc=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$13=0,$14=0,$15=0,label=0;
 var tempVarArgs=0;
 var sp=0;sp=STACKTOP;


 $1=$that;
 $2=$1;
 $3=(($2+12)|0);
 $4=((HEAP32[(($3)>>2)])|0);
 $5=$1;
 $6=(($5+16)|0);
 $7=((HEAP32[(($6)>>2)])|0);
 $8=((_scale_bitcount($4,$7))|0);
 $rc=$8;
 $9=$rc;
 $10=($9|0)==0;
 if ($10) {
  STACKTOP=sp;return;
 } else {
  $13=$1;
  $14=(($13+12)|0);
  $15=((HEAP32[(($14)>>2)])|0);
  _lame_errorf($15,17304,(((tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs))|0)); STACKTOP=tempVarArgs;
  _exit(((-1)|0));

 }
}


function _quantizeAndCountBits($that){
 $that=($that)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$14=0,$15=0,$16=0,$17=0,$18=0,label=0;
 var sp=0;sp=STACKTOP;

 $1=$that;
 $2=$1;
 _quantize_x34($2);
 $3=$1;
 $4=(($3+12)|0);
 $5=((HEAP32[(($4)>>2)])|0);
 $6=$1;
 $7=(($6+16)|0);
 $8=((HEAP32[(($7)>>2)])|0);
 $9=((_noquant_count_bits($5,$8,0))|0);
 $10=$1;
 $11=(($10+16)|0);
 $12=((HEAP32[(($11)>>2)])|0);
 $13=(($12+4768)|0);
 HEAP32[(($13)>>2)]=$9;
 $14=$1;
 $15=(($14+16)|0);
 $16=((HEAP32[(($15)>>2)])|0);
 $17=(($16+4768)|0);
 $18=((HEAP32[(($17)>>2)])|0);
 STACKTOP=sp;return (($18)|0);
}


function _reduce_bit_usage($gfc,$gr,$ch){
 $gfc=($gfc)|0;
 $gr=($gr)|0;
 $ch=($ch)|0;
 var $1=0,$2=0,$3=0,$cfg=0,$cod_info=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$14=0,$15=0,$16=0,$17=0,$18=0;
 var $19=0,$20=0,$21=0,$23=0,$24=0,$26=0,$27=0,$28=0,$29=0,$30=0,$31=0,$32=0,label=0;
 var sp=0;sp=STACKTOP;





 $1=$gfc;
 $2=$gr;
 $3=$ch;
 $4=$1;
 $5=(($4+16)|0);
 $cfg=$5;
 $6=$3;
 $7=$2;
 $8=$1;
 $9=(($8+304)|0);
 $10=(($9)|0);
 $11=(($10+((($7)*(10504))&-1))|0);
 $12=(($11+((($6)*(5252))&-1))|0);
 $cod_info=$12;
 $13=$1;
 $14=$2;
 $15=$3;
 $16=$1;
 $17=(($16+304)|0);
 _best_scalefac_store($13,$14,$15,$17);
 $18=$cfg;
 $19=(($18+20)|0);
 $20=((HEAP32[(($19)>>2)])|0);
 $21=($20|0)==1;
 if ($21) {
  $23=$1;
  $24=$cod_info;
  _best_huffman_divide($23,$24);
 }
 $26=$cod_info;
 $27=(($26+4768)|0);
 $28=((HEAP32[(($27)>>2)])|0);
 $29=$cod_info;
 $30=(($29+4844)|0);
 $31=((HEAP32[(($30)>>2)])|0);
 $32=((($28)+($31))|0);
 STACKTOP=sp;return (($32)|0);
}


function _cutDistribution($sfwork,$sf_out,$cut){
 $sfwork=($sfwork)|0;
 $sf_out=($sf_out)|0;
 $cut=($cut)|0;
 var $1=0,$2=0,$3=0,$i=0,$j=0,$x=0,$5=0,$6=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$14=0,$16=0,$18=0,$20=0,$21=0,$22=0;
 var $23=0,$25=0,$26=0,$27=0,$28=0,label=0;
 var sp=0;sp=STACKTOP;






 $1=$sfwork;
 $2=$sf_out;
 $3=$cut;
 $j=39;
 $i=0;
 while(1) {
  $5=$j;
  $6=($5>>>0)>((0)>>>0);
  if (!($6)) {
   break;
  }
  $8=$i;
  $9=$1;
  $10=(($9+($8<<2))|0);
  $11=((HEAP32[(($10)>>2)])|0);
  $x=$11;
  $12=$x;
  $13=$3;
  $14=($12|0)<($13|0);
  if ($14) {
   $16=$x;
   $20=$16;
  } else {
   $18=$3;
   $20=$18;
  }

  $21=$i;
  $22=$2;
  $23=(($22+($21<<2))|0);
  HEAP32[(($23)>>2)]=$20;
  $25=$j;
  $26=((($25)-(1))|0);
  $j=$26;
  $27=$i;
  $28=((($27)+(1))|0);
  $i=$28;
 }
 STACKTOP=sp;return;
}


function _outOfBitsStrategy($that,$sfwork,$vbrsfmin,$target){
 $that=($that)|0;
 $sfwork=($sfwork)|0;
 $vbrsfmin=($vbrsfmin)|0;
 $target=($target)|0;
 var $1=0,$2=0,$3=0,$4=0,$wrk=0,$dm=0,$p=0,$nbits=0,$bi=0,$bi_ok=0,$bu=0,$bo=0,$sfmax=0,$sfmax1=0,$bi2=0,$bi_ok3=0,$bu4=0,$bo5=0,$sfmax6=0,$sfmax7=0;
 var $5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$14=0,$16=0,$17=0,$18=0,$19=0,$20=0,$21=0,$22=0,$23=0,$24=0,$25=0;
 var $26=0,$27=0,$28=0,$29=0,$31=0,$32=0,$33=0,$35=0,$36=0,$38=0,$39=0,$40=0,$42=0,$43=0,$44=0,$45=0,$49=0,$50=0,$52=0,$53=0;
 var $54=0,$56=0,$57=0,$58=0,$59=0,$60=0,$61=0,$62=0,$63=0,$64=0,$65=0,$66=0,$69=0,$70=0,$71=0,$72=0,$74=0,$75=0,$76=0,$77=0;
 var $78=0,$79=0,$80=0,$81=0,$82=0,$83=0,$84=0,$85=0,$86=0,$87=0,$89=0,$90=0,$91=0,$93=0,$94=0,$96=0,$97=0,$98=0,$100=0,$101=0;
 var $102=0,$103=0,$107=0,$108=0,$110=0,$111=0,$112=0,$114=0,$115=0,$116=0,$117=0,$118=0,$119=0,$120=0,$121=0,$122=0,$123=0,$124=0,$127=0,$128=0;
 var $129=0,$130=0,label=0;
 var sp=0;sp=STACKTOP;STACKTOP=(STACKTOP+160)|0;




 $wrk=((sp)|0);















 $1=$that;
 $2=$sfwork;
 $3=$vbrsfmin;
 $4=$target;
 $5=$2;
 $6=((_sfDepth($5))|0);
 $dm=$6;
 $7=$1;
 $8=(($7+16)|0);
 $9=((HEAP32[(($8)>>2)])|0);
 $10=(($9+4780)|0);
 $11=((HEAP32[(($10)>>2)])|0);
 $p=$11;
 $12=$dm;
 $13=(((($12|0))/(2))&-1);
 $bi=$13;
 $bi_ok=-1;
 $bu=0;
 $14=$dm;
 $bo=$14;
 while(1) {
  $16=$2;
  $17=(($wrk)|0);
  $18=$dm;
  $19=$bi;
  $20=$p;
  $21=((_flattenDistribution($16,$17,$18,$19,$20))|0);
  $sfmax=$21;
  $22=$1;
  $23=(($wrk)|0);
  $24=$3;
  $25=$sfmax;
  $26=((_tryThatOne($22,$23,$24,$25))|0);
  $nbits=$26;
  $27=$nbits;
  $28=$4;
  $29=($27|0)<=($28|0);
  if ($29) {
   $31=$bi;
   $bi_ok=$31;
   $32=$bi;
   $33=((($32)-(1))|0);
   $bo=$33;
  } else {
   $35=$bi;
   $36=((($35)+(1))|0);
   $bu=$36;
  }
  $38=$bu;
  $39=$bo;
  $40=($38|0)<=($39|0);
  if (!($40)) {
   break;
  }
  $42=$bu;
  $43=$bo;
  $44=((($42)+($43))|0);
  $45=(((($44|0))/(2))&-1);
  $bi=$45;
 }
 $49=$bi_ok;
 $50=($49|0)>=0;
 if ($50) {
  $52=$bi;
  $53=$bi_ok;
  $54=($52|0)!=($53|0);
  if ($54) {
   $56=$2;
   $57=(($wrk)|0);
   $58=$dm;
   $59=$bi_ok;
   $60=$p;
   $61=((_flattenDistribution($56,$57,$58,$59,$60))|0);
   $sfmax1=$61;
   $62=$1;
   $63=(($wrk)|0);
   $64=$3;
   $65=$sfmax1;
   $66=((_tryThatOne($62,$63,$64,$65))|0);
   $nbits=$66;
  }
  STACKTOP=sp;return;
 }
 $69=$p;
 $70=((($69)+(255))|0);
 $71=(((($70|0))/(2))&-1);
 $bi2=$71;
 $bi_ok3=-1;
 $72=$p;
 $bu4=$72;
 $bo5=255;
 while(1) {
  $74=$2;
  $75=(($wrk)|0);
  $76=$dm;
  $77=$dm;
  $78=$bi2;
  $79=((_flattenDistribution($74,$75,$76,$77,$78))|0);
  $sfmax6=$79;
  $80=$1;
  $81=(($wrk)|0);
  $82=$3;
  $83=$sfmax6;
  $84=((_tryThatOne($80,$81,$82,$83))|0);
  $nbits=$84;
  $85=$nbits;
  $86=$4;
  $87=($85|0)<=($86|0);
  if ($87) {
   $89=$bi2;
   $bi_ok3=$89;
   $90=$bi2;
   $91=((($90)-(1))|0);
   $bo5=$91;
  } else {
   $93=$bi2;
   $94=((($93)+(1))|0);
   $bu4=$94;
  }
  $96=$bu4;
  $97=$bo5;
  $98=($96|0)<=($97|0);
  if (!($98)) {
   break;
  }
  $100=$bu4;
  $101=$bo5;
  $102=((($100)+($101))|0);
  $103=(((($102|0))/(2))&-1);
  $bi2=$103;
 }
 $107=$bi_ok3;
 $108=($107|0)>=0;
 if (!($108)) {
  $127=$1;
  $128=(($wrk)|0);
  $129=$3;
  $130=$4;
  _searchGlobalStepsizeMax($127,$128,$129,$130);
  STACKTOP=sp;return;
 }
 $110=$bi2;
 $111=$bi_ok3;
 $112=($110|0)!=($111|0);
 if ($112) {
  $114=$2;
  $115=(($wrk)|0);
  $116=$dm;
  $117=$dm;
  $118=$bi_ok3;
  $119=((_flattenDistribution($114,$115,$116,$117,$118))|0);
  $sfmax7=$119;
  $120=$1;
  $121=(($wrk)|0);
  $122=$3;
  $123=$sfmax7;
  $124=((_tryThatOne($120,$121,$122,$123))|0);
  $nbits=$124;
 }
 STACKTOP=sp;return;
}


function _calc_scalefac($l3_xmin,$bw){
 $l3_xmin=+($l3_xmin);
 $bw=($bw)|0;
 var $1=.0,$2=0,$c=.0,$3=.0,$4=0,$5=.0,$6=.0,$7=.0,$8=.0,$9=.0,$10=0,$11=0,label=0;
 var sp=0;sp=STACKTOP;



 $1=$l3_xmin;
 $2=$bw;
 $c=5.799142360687256;
 $3=$1;
 $4=$2;
 $5=(+((($4|0))|0));
 $6=($3)/($5);
 $7=(+(_log10((+($6)))));
 $8=((5.799142360687256))*($7);
 $9=($8)-((0.5));
 $10=(~~($9));
 $11=((($10)+(210))|0);
 STACKTOP=sp;return (($11)|0);
}


function _tri_calc_sfb_noise_x34($xr,$xr34,$l3_xmin,$bw,$sf,$did_it){
 $xr=($xr)|0;
 $xr34=($xr34)|0;
 $l3_xmin=+($l3_xmin);
 $bw=($bw)|0;
 $sf=($sf)|0;
 $did_it=($did_it)|0;
 var $1=0,$2=0,$3=0,$4=.0,$5=0,$6=0,$7=0,$sf_x=0,$sf_x1=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$14=0,$16=0,$17=0,$18=0,$19=0;
 var $20=0,$21=0,$22=0,$23=0,$24=0,$25=.0,$26=0,$27=0,$28=0,$29=0,$30=0,$32=.0,$33=0,$34=0,$35=0,$36=0,$37=0,$38=.0,$39=0,$42=0;
 var $43=0,$44=0,$46=0,$47=0,$48=0,$49=0,$50=0,$51=0,$52=0,$53=0,$54=0,$55=0,$56=0,$58=0,$59=0,$60=0,$61=0,$62=0,$63=0,$64=0;
 var $65=0,$66=0,$67=.0,$68=0,$69=0,$70=0,$71=0,$72=0,$74=.0,$75=0,$76=0,$77=0,$78=0,$79=0,$80=.0,$81=0,$85=0,$86=0,$87=0,$89=0;
 var $90=0,$91=0,$92=0,$93=0,$94=0,$95=0,$96=0,$97=0,$98=0,$99=0,$101=0,$102=0,$103=0,$104=0,$105=0,$106=0,$107=0,$108=0,$109=0,$110=.0;
 var $111=0,$112=0,$113=0,$114=0,$115=0,$117=.0,$118=0,$119=0,$120=0,$121=0,$122=0,$123=.0,$124=0,$129=0,label=0;
 var sp=0;sp=STACKTOP;









 $2=$xr;
 $3=$xr34;
 $4=$l3_xmin;
 $5=$bw;
 $6=$sf;
 $7=$did_it;
 $8=$6;
 $9=($8&255);
 $10=$7;
 $11=(($10+($9<<3))|0);
 $12=(($11)|0);
 $13=((HEAP32[(($12)>>2)])|0);
 $14=($13|0)==0;
 if ($14) {
  $16=$6;
  $17=($16&255);
  $18=$7;
  $19=(($18+($17<<3))|0);
  $20=(($19)|0);
  HEAP32[(($20)>>2)]=1;
  $21=$2;
  $22=$3;
  $23=$5;
  $24=$6;
  $25=(+(_calc_sfb_noise_x34($21,$22,$23,$24)));
  $26=$6;
  $27=($26&255);
  $28=$7;
  $29=(($28+($27<<3))|0);
  $30=(($29+4)|0);
  HEAPF32[(($30)>>2)]=$25;
 }
 $32=$4;
 $33=$6;
 $34=($33&255);
 $35=$7;
 $36=(($35+($34<<3))|0);
 $37=(($36+4)|0);
 $38=(+(HEAPF32[(($37)>>2)]));
 $39=$32<$38;
 if ($39) {
  $1=1;
  $129=$1;
  STACKTOP=sp;return (($129)|0);
 }
 $42=$6;
 $43=($42&255);
 $44=($43|0)<255;
 do {
  if ($44) {
   $46=$6;
   $47=($46&255);
   $48=((($47)+(1))|0);
   $49=(($48)&255);
   $sf_x=$49;
   $50=$sf_x;
   $51=($50&255);
   $52=$7;
   $53=(($52+($51<<3))|0);
   $54=(($53)|0);
   $55=((HEAP32[(($54)>>2)])|0);
   $56=($55|0)==0;
   if ($56) {
    $58=$sf_x;
    $59=($58&255);
    $60=$7;
    $61=(($60+($59<<3))|0);
    $62=(($61)|0);
    HEAP32[(($62)>>2)]=1;
    $63=$2;
    $64=$3;
    $65=$5;
    $66=$sf_x;
    $67=(+(_calc_sfb_noise_x34($63,$64,$65,$66)));
    $68=$sf_x;
    $69=($68&255);
    $70=$7;
    $71=(($70+($69<<3))|0);
    $72=(($71+4)|0);
    HEAPF32[(($72)>>2)]=$67;
   }
   $74=$4;
   $75=$sf_x;
   $76=($75&255);
   $77=$7;
   $78=(($77+($76<<3))|0);
   $79=(($78+4)|0);
   $80=(+(HEAPF32[(($79)>>2)]));
   $81=$74<$80;
   if (!($81)) {
    break;
   }
   $1=1;
   $129=$1;
   STACKTOP=sp;return (($129)|0);
  }
 } while(0);
 $85=$6;
 $86=($85&255);
 $87=($86|0)>0;
 do {
  if ($87) {
   $89=$6;
   $90=($89&255);
   $91=((($90)-(1))|0);
   $92=(($91)&255);
   $sf_x1=$92;
   $93=$sf_x1;
   $94=($93&255);
   $95=$7;
   $96=(($95+($94<<3))|0);
   $97=(($96)|0);
   $98=((HEAP32[(($97)>>2)])|0);
   $99=($98|0)==0;
   if ($99) {
    $101=$sf_x1;
    $102=($101&255);
    $103=$7;
    $104=(($103+($102<<3))|0);
    $105=(($104)|0);
    HEAP32[(($105)>>2)]=1;
    $106=$2;
    $107=$3;
    $108=$5;
    $109=$sf_x1;
    $110=(+(_calc_sfb_noise_x34($106,$107,$108,$109)));
    $111=$sf_x1;
    $112=($111&255);
    $113=$7;
    $114=(($113+($112<<3))|0);
    $115=(($114+4)|0);
    HEAPF32[(($115)>>2)]=$110;
   }
   $117=$4;
   $118=$sf_x1;
   $119=($118&255);
   $120=$7;
   $121=(($120+($119<<3))|0);
   $122=(($121+4)|0);
   $123=(+(HEAPF32[(($122)>>2)]));
   $124=$117<$123;
   if (!($124)) {
    break;
   }
   $1=1;
   $129=$1;
   STACKTOP=sp;return (($129)|0);
  }
 } while(0);
 $1=0;
 $129=$1;
 STACKTOP=sp;return (($129)|0);
}


function _set_subblock_gain($cod_info,$mingain_s,$sf){
 $cod_info=($cod_info)|0;
 $mingain_s=($mingain_s)|0;
 $sf=($sf)|0;
 var $1=0,$2=0,$3=0,$maxrange1=0,$maxrange2=0,$ifqstepShift=0,$sbg=0,$psymax=0,$psydiv=0,$sbg0=0,$sbg1=0,$sbg2=0,$sfb=0,$i=0,$min_sbg=0,$maxsf1=0,$maxsf2=0,$minsf=0,$v=0,$v1=0;
 var $m1=0,$m2=0,$m12=0,$m23=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$14=0,$15=0,$16=0,$17=0,$19=0,$22=0;
 var $23=0,$25=0,$27=0,$28=0,$29=0,$31=0,$32=0,$33=0,$34=0,$35=0,$36=0,$37=0,$38=0,$40=0,$42=0,$43=0,$44=0,$46=0,$49=0,$50=0;
 var $53=0,$54=0,$56=0,$57=0,$58=0,$59=0,$60=0,$61=0,$62=0,$63=0,$65=0,$67=0,$68=0,$69=0,$71=0,$74=0,$75=0,$77=0,$78=0,$79=0;
 var $80=0,$81=0,$82=0,$83=0,$84=0,$85=0,$86=0,$87=0,$89=0,$91=0,$93=0,$94=0,$95=0,$97=0,$98=0,$99=0,$100=0,$101=0,$103=0,$104=0;
 var $105=0,$107=0,$108=0,$110=0,$111=0,$112=0,$113=0,$114=0,$115=0,$116=0,$117=0,$118=0,$119=0,$121=0,$123=0,$125=0,$126=0,$127=0,$128=0,$130=0;
 var $131=0,$132=0,$133=0,$134=0,$136=0,$137=0,$138=0,$139=0,$140=0,$141=0,$142=0,$143=0,$144=0,$145=0,$146=0,$147=0,$148=0,$149=0,$151=0,$152=0;
 var $153=0,$154=0,$155=0,$156=0,$157=0,$158=0,$159=0,$160=0,$161=0,$162=0,$164=0,$165=0,$166=0,$167=0,$168=0,$170=0,$171=0,$172=0,$174=0,$175=0;
 var $176=0,$177=0,$178=0,$179=0,$181=0,$182=0,$183=0,$184=0,$187=0,$188=0,$190=0,$191=0,$192=0,$193=0,$194=0,$195=0,$196=0,$197=0,$198=0,$199=0;
 var $200=0,$201=0,$203=0,$204=0,$206=0,$207=0,$208=0,$209=0,$210=0,$211=0,$212=0,$213=0,$214=0,$215=0,$216=0,$217=0,$218=0,$219=0,$220=0,$221=0;
 var $222=0,$223=0,$224=0,$225=0,$226=0,$228=0,$229=0,$231=0,$232=0,$235=0,$236=0,$238=0,$239=0,$240=0,$241=0,$242=0,$243=0,$245=0,$246=0,$248=0;
 var $249=0,$250=0,$251=0,$252=0,$253=0,label=0;
 var sp=0;sp=STACKTOP;
























 $1=$cod_info;
 $2=$mingain_s;
 $3=$sf;
 $maxrange1=15;
 $maxrange2=7;
 $4=$1;
 $5=(($4+4836)|0);
 $6=((HEAP32[(($5)>>2)])|0);
 $7=($6|0)==0;
 $8=($7?1:2);
 $ifqstepShift=$8;
 $9=$1;
 $10=(($9+4808)|0);
 $11=(($10)|0);
 $sbg=$11;
 $12=$1;
 $13=(($12+4864)|0);
 $14=((HEAP32[(($13)>>2)])|0);
 $psymax=$14;
 $psydiv=18;
 $min_sbg=7;
 $15=$psydiv;
 $16=$psymax;
 $17=($15>>>0)>($16>>>0);
 if ($17) {
  $19=$psymax;
  $psydiv=$19;
 }
 $i=0;
 while(1) {
  $22=$i;
  $23=($22>>>0)<((3)>>>0);
  if (!($23)) {
   break;
  }
  $maxsf1=0;
  $maxsf2=0;
  $minsf=1000;
  $25=$i;
  $sfb=$25;
  while(1) {
   $27=$sfb;
   $28=$psydiv;
   $29=($27>>>0)<($28>>>0);
   if (!($29)) {
    break;
   }
   $31=$sfb;
   $32=$3;
   $33=(($32+($31<<2))|0);
   $34=((HEAP32[(($33)>>2)])|0);
   $35=(((-$34))|0);
   $v=$35;
   $36=$maxsf1;
   $37=$v;
   $38=($36|0)<($37|0);
   if ($38) {
    $40=$v;
    $maxsf1=$40;
   }
   $42=$minsf;
   $43=$v;
   $44=($42|0)>($43|0);
   if ($44) {
    $46=$v;
    $minsf=$46;
   }
   $49=$sfb;
   $50=((($49)+(3))|0);
   $sfb=$50;
  }
  while(1) {
   $53=$sfb;
   $54=($53>>>0)<((39)>>>0);
   if (!($54)) {
    break;
   }
   $56=$sfb;
   $57=$3;
   $58=(($57+($56<<2))|0);
   $59=((HEAP32[(($58)>>2)])|0);
   $60=(((-$59))|0);
   $v1=$60;
   $61=$maxsf2;
   $62=$v1;
   $63=($61|0)<($62|0);
   if ($63) {
    $65=$v1;
    $maxsf2=$65;
   }
   $67=$minsf;
   $68=$v1;
   $69=($67|0)>($68|0);
   if ($69) {
    $71=$v1;
    $minsf=$71;
   }
   $74=$sfb;
   $75=((($74)+(3))|0);
   $sfb=$75;
  }
  $77=$maxsf1;
  $78=$ifqstepShift;
  $79=15<<$78;
  $80=((($77)-($79))|0);
  $m1=$80;
  $81=$maxsf2;
  $82=$ifqstepShift;
  $83=7<<$82;
  $84=((($81)-($83))|0);
  $m2=$84;
  $85=$m1;
  $86=$m2;
  $87=($85|0)>($86|0);
  if ($87) {
   $89=$m1;
   $93=$89;
  } else {
   $91=$m2;
   $93=$91;
  }

  $maxsf1=$93;
  $94=$minsf;
  $95=($94|0)>0;
  if ($95) {
   $97=$minsf;
   $98=$97>>3;
   $99=$i;
   $100=$sbg;
   $101=(($100+($99<<2))|0);
   HEAP32[(($101)>>2)]=$98;
  } else {
   $103=$i;
   $104=$sbg;
   $105=(($104+($103<<2))|0);
   HEAP32[(($105)>>2)]=0;
  }
  $107=$maxsf1;
  $108=($107|0)>0;
  if ($108) {
   $110=$i;
   $111=$sbg;
   $112=(($111+($110<<2))|0);
   $113=((HEAP32[(($112)>>2)])|0);
   $m12=$113;
   $114=$maxsf1;
   $115=((($114)+(7))|0);
   $116=$115>>3;
   $m23=$116;
   $117=$m12;
   $118=$m23;
   $119=($117|0)>($118|0);
   if ($119) {
    $121=$m12;
    $125=$121;
   } else {
    $123=$m23;
    $125=$123;
   }

   $126=$i;
   $127=$sbg;
   $128=(($127+($126<<2))|0);
   HEAP32[(($128)>>2)]=$125;
  }
  $130=$i;
  $131=$sbg;
  $132=(($131+($130<<2))|0);
  $133=((HEAP32[(($132)>>2)])|0);
  $134=($133|0)>0;
  do {
   if ($134) {
    $136=$i;
    $137=$2;
    $138=(($137+($136<<2))|0);
    $139=((HEAP32[(($138)>>2)])|0);
    $140=$1;
    $141=(($140+4780)|0);
    $142=((HEAP32[(($141)>>2)])|0);
    $143=$i;
    $144=$sbg;
    $145=(($144+($143<<2))|0);
    $146=((HEAP32[(($145)>>2)])|0);
    $147=($146<<3);
    $148=((($142)-($147))|0);
    $149=($139|0)>($148|0);
    if (!($149)) {
     break;
    }
    $151=$1;
    $152=(($151+4780)|0);
    $153=((HEAP32[(($152)>>2)])|0);
    $154=$i;
    $155=$2;
    $156=(($155+($154<<2))|0);
    $157=((HEAP32[(($156)>>2)])|0);
    $158=((($153)-($157))|0);
    $159=$158>>3;
    $160=$i;
    $161=$sbg;
    $162=(($161+($160<<2))|0);
    HEAP32[(($162)>>2)]=$159;
   }
  } while(0);
  $164=$i;
  $165=$sbg;
  $166=(($165+($164<<2))|0);
  $167=((HEAP32[(($166)>>2)])|0);
  $168=($167|0)>7;
  if ($168) {
   $170=$i;
   $171=$sbg;
   $172=(($171+($170<<2))|0);
   HEAP32[(($172)>>2)]=7;
  }
  $174=$min_sbg;
  $175=$i;
  $176=$sbg;
  $177=(($176+($175<<2))|0);
  $178=((HEAP32[(($177)>>2)])|0);
  $179=($174|0)>($178|0);
  if ($179) {
   $181=$i;
   $182=$sbg;
   $183=(($182+($181<<2))|0);
   $184=((HEAP32[(($183)>>2)])|0);
   $min_sbg=$184;
  }
  $187=$i;
  $188=((($187)+(1))|0);
  $i=$188;
 }
 $190=$sbg;
 $191=(($190)|0);
 $192=((HEAP32[(($191)>>2)])|0);
 $193=($192<<3);
 $sbg0=$193;
 $194=$sbg;
 $195=(($194+4)|0);
 $196=((HEAP32[(($195)>>2)])|0);
 $197=($196<<3);
 $sbg1=$197;
 $198=$sbg;
 $199=(($198+8)|0);
 $200=((HEAP32[(($199)>>2)])|0);
 $201=($200<<3);
 $sbg2=$201;
 $sfb=0;
 while(1) {
  $203=$sfb;
  $204=($203>>>0)<((39)>>>0);
  if (!($204)) {
   break;
  }
  $206=$sbg0;
  $207=$sfb;
  $208=(($207)|0);
  $209=$3;
  $210=(($209+($208<<2))|0);
  $211=((HEAP32[(($210)>>2)])|0);
  $212=((($211)+($206))|0);
  HEAP32[(($210)>>2)]=$212;
  $213=$sbg1;
  $214=$sfb;
  $215=((($214)+(1))|0);
  $216=$3;
  $217=(($216+($215<<2))|0);
  $218=((HEAP32[(($217)>>2)])|0);
  $219=((($218)+($213))|0);
  HEAP32[(($217)>>2)]=$219;
  $220=$sbg2;
  $221=$sfb;
  $222=((($221)+(2))|0);
  $223=$3;
  $224=(($223+($222<<2))|0);
  $225=((HEAP32[(($224)>>2)])|0);
  $226=((($225)+($220))|0);
  HEAP32[(($224)>>2)]=$226;
  $228=$sfb;
  $229=((($228)+(3))|0);
  $sfb=$229;
 }
 $231=$min_sbg;
 $232=($231|0)>0;
 if (!($232)) {
  STACKTOP=sp;return;
 }
 $i=0;
 while(1) {
  $235=$i;
  $236=($235>>>0)<((3)>>>0);
  if (!($236)) {
   break;
  }
  $238=$min_sbg;
  $239=$i;
  $240=$sbg;
  $241=(($240+($239<<2))|0);
  $242=((HEAP32[(($241)>>2)])|0);
  $243=((($242)-($238))|0);
  HEAP32[(($241)>>2)]=$243;
  $245=$i;
  $246=((($245)+(1))|0);
  $i=$246;
 }
 $248=$min_sbg;
 $249=($248<<3);
 $250=$1;
 $251=(($250+4780)|0);
 $252=((HEAP32[(($251)>>2)])|0);
 $253=((($252)-($249))|0);
 HEAP32[(($251)>>2)]=$253;
 STACKTOP=sp;return;
}


function _set_scalefacs($cod_info,$vbrsfmin,$sf,$max_range){
 $cod_info=($cod_info)|0;
 $vbrsfmin=($vbrsfmin)|0;
 $sf=($sf)|0;
 $max_range=($max_range)|0;
 var $1=0,$2=0,$3=0,$4=0,$ifqstep=0,$ifqstepShift=0,$scalefac=0,$sfbmax=0,$sfb=0,$sbg=0,$window=0,$preflag=0,$gain=0,$m=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0;
 var $11=0,$12=0,$13=0,$14=0,$15=0,$16=0,$17=0,$18=0,$19=0,$20=0,$21=0,$22=0,$23=0,$24=0,$25=0,$26=0,$27=0,$28=0,$29=0,$30=0;
 var $31=0,$34=0,$35=0,$36=0,$38=0,$39=0,$40=0,$41=0,$42=0,$43=0,$44=0,$45=0,$46=0,$47=0,$49=0,$50=0,$54=0,$55=0,$56=0,$58=0;
 var $59=0,$60=0,$61=0,$62=0,$63=0,$64=0,$65=0,$66=0,$67=0,$68=0,$69=0,$70=0,$71=0,$73=0,$74=0,$75=0,$78=0,$79=0,$80=0,$81=0;
 var $82=0,$83=0,$84=0,$85=0,$86=0,$88=0,$89=0,$90=0,$91=0,$92=0,$93=0,$94=0,$95=0,$96=0,$97=0,$98=0,$99=0,$100=0,$101=0,$102=0;
 var $103=0,$104=0,$105=0,$106=0,$107=0,$108=0,$109=0,$110=0,$111=0,$112=0,$113=0,$114=0,$115=0,$117=0,$118=0,$119=0,$120=0,$121=0,$122=0,$123=0;
 var $124=0,$126=0,$127=0,$128=0,$129=0,$130=0,$132=0,$133=0,$134=0,$135=0,$136=0,$137=0,$138=0,$139=0,$141=0,$142=0,$143=0,$144=0,$145=0,$146=0;
 var $149=0,$150=0,$151=0,$154=0,$155=0,$158=0,$159=0,$161=0,$162=0,$163=0,$165=0,$166=0,label=0;
 var sp=0;sp=STACKTOP;














 $1=$cod_info;
 $2=$vbrsfmin;
 $3=$sf;
 $4=$max_range;
 $5=$1;
 $6=(($5+4836)|0);
 $7=((HEAP32[(($6)>>2)])|0);
 $8=($7|0)==0;
 $9=($8?2:4);
 $ifqstep=$9;
 $10=$1;
 $11=(($10+4836)|0);
 $12=((HEAP32[(($11)>>2)])|0);
 $13=($12|0)==0;
 $14=($13?1:2);
 $ifqstepShift=$14;
 $15=$1;
 $16=(($15+4608)|0);
 $17=(($16)|0);
 $scalefac=$17;
 $18=$1;
 $19=(($18+4860)|0);
 $20=((HEAP32[(($19)>>2)])|0);
 $sfbmax=$20;
 $21=$1;
 $22=(($21+4808)|0);
 $23=(($22)|0);
 $sbg=$23;
 $24=$1;
 $25=(($24+5028)|0);
 $26=(($25)|0);
 $window=$26;
 $27=$1;
 $28=(($27+4832)|0);
 $29=((HEAP32[(($28)>>2)])|0);
 $preflag=$29;
 $30=$preflag;
 $31=($30|0)!=0;
 if ($31) {
  $sfb=11;
  while(1) {
   $34=$sfb;
   $35=$sfbmax;
   $36=($34|0)<($35|0);
   if (!($36)) {
    break;
   }
   $38=$sfb;
   $39=((9552+($38<<2))|0);
   $40=((HEAP32[(($39)>>2)])|0);
   $41=$ifqstep;
   $42=(Math_imul($40,$41)|0);
   $43=$sfb;
   $44=$3;
   $45=(($44+($43<<2))|0);
   $46=((HEAP32[(($45)>>2)])|0);
   $47=((($46)+($42))|0);
   HEAP32[(($45)>>2)]=$47;
   $49=$sfb;
   $50=((($49)+(1))|0);
   $sfb=$50;
  }
 }
 $sfb=0;
 while(1) {
  $54=$sfb;
  $55=$sfbmax;
  $56=($54|0)<($55|0);
  if (!($56)) {
   break;
  }
  $58=$1;
  $59=(($58+4780)|0);
  $60=((HEAP32[(($59)>>2)])|0);
  $61=$sfb;
  $62=$window;
  $63=(($62+($61<<2))|0);
  $64=((HEAP32[(($63)>>2)])|0);
  $65=$sbg;
  $66=(($65+($64<<2))|0);
  $67=((HEAP32[(($66)>>2)])|0);
  $68=($67<<3);
  $69=((($60)-($68))|0);
  $70=$preflag;
  $71=($70|0)!=0;
  if ($71) {
   $73=$sfb;
   $74=((9552+($73<<2))|0);
   $75=((HEAP32[(($74)>>2)])|0);
   $78=$75;
  } else {
   $78=0;
  }

  $79=$ifqstep;
  $80=(Math_imul($78,$79)|0);
  $81=((($69)-($80))|0);
  $gain=$81;
  $82=$sfb;
  $83=$3;
  $84=(($83+($82<<2))|0);
  $85=((HEAP32[(($84)>>2)])|0);
  $86=($85|0)<0;
  if ($86) {
   $88=$gain;
   $89=$sfb;
   $90=$2;
   $91=(($90+($89<<2))|0);
   $92=((HEAP32[(($91)>>2)])|0);
   $93=((($88)-($92))|0);
   $m=$93;
   $94=$ifqstep;
   $95=((($94)-(1))|0);
   $96=$sfb;
   $97=$3;
   $98=(($97+($96<<2))|0);
   $99=((HEAP32[(($98)>>2)])|0);
   $100=((($95)-($99))|0);
   $101=$ifqstepShift;
   $102=$100>>($101|0);
   $103=$sfb;
   $104=$scalefac;
   $105=(($104+($103<<2))|0);
   HEAP32[(($105)>>2)]=$102;
   $106=$sfb;
   $107=$scalefac;
   $108=(($107+($106<<2))|0);
   $109=((HEAP32[(($108)>>2)])|0);
   $110=$sfb;
   $111=$4;
   $112=(($111+$110)|0);
   $113=((HEAP8[($112)])|0);
   $114=($113&255);
   $115=($109|0)>($114|0);
   if ($115) {
    $117=$sfb;
    $118=$4;
    $119=(($118+$117)|0);
    $120=((HEAP8[($119)])|0);
    $121=($120&255);
    $122=$sfb;
    $123=$scalefac;
    $124=(($123+($122<<2))|0);
    HEAP32[(($124)>>2)]=$121;
   }
   $126=$sfb;
   $127=$scalefac;
   $128=(($127+($126<<2))|0);
   $129=((HEAP32[(($128)>>2)])|0);
   $130=($129|0)>0;
   do {
    if ($130) {
     $132=$sfb;
     $133=$scalefac;
     $134=(($133+($132<<2))|0);
     $135=((HEAP32[(($134)>>2)])|0);
     $136=$ifqstepShift;
     $137=$135<<$136;
     $138=$m;
     $139=($137|0)>($138|0);
     if (!($139)) {
      break;
     }
     $141=$m;
     $142=$ifqstepShift;
     $143=$141>>($142|0);
     $144=$sfb;
     $145=$scalefac;
     $146=(($145+($144<<2))|0);
     HEAP32[(($146)>>2)]=$143;
    }
   } while(0);
  } else {
   $149=$sfb;
   $150=$scalefac;
   $151=(($150+($149<<2))|0);
   HEAP32[(($151)>>2)]=0;
  }
  $154=$sfb;
  $155=((($154)+(1))|0);
  $sfb=$155;
 }
 while(1) {
  $158=$sfb;
  $159=($158|0)<39;
  if (!($159)) {
   break;
  }
  $161=$sfb;
  $162=$scalefac;
  $163=(($162+($161<<2))|0);
  HEAP32[(($163)>>2)]=0;
  $165=$sfb;
  $166=((($165)+(1))|0);
  $sfb=$166;
 }
 STACKTOP=sp;return;
}


function _vec_max_c($xr34,$bw){
 $xr34=($xr34)|0;
 $bw=($bw)|0;
 var $1=0,$2=0,$xfsf=.0,$i=0,$remaining=0,$3=0,$4=0,$5=0,$6=0,$8=0,$9=0,$10=0,$12=.0,$13=0,$14=0,$15=.0,$16=0,$18=0,$19=0,$20=.0;
 var $22=.0,$23=0,$24=0,$25=.0,$26=0,$28=0,$29=0,$30=.0,$32=.0,$33=0,$34=0,$35=.0,$36=0,$38=0,$39=0,$40=.0,$42=.0,$43=0,$44=0,$45=.0;
 var $46=0,$48=0,$49=0,$50=.0,$52=0,$53=0,$55=0,$57=.0,$58=0,$59=0,$60=.0,$61=0,$63=0,$64=0,$65=.0,$68=.0,$69=0,$70=0,$71=.0,$72=0;
 var $74=0,$75=0,$76=.0,$79=.0,$80=0,$81=0,$82=.0,$83=0,$85=0,$86=0,$87=.0,$91=.0,label=0;
 var sp=0;sp=STACKTOP;





 $1=$xr34;
 $2=$bw;
 $xfsf=0.0;
 $3=$2;
 $4=$3>>>2;
 $i=$4;
 $5=$2;
 $6=$5&3;
 $remaining=$6;
 while(1) {
  $8=$i;
  $9=((($8)-(1))|0);
  $i=$9;
  $10=($8>>>0)>((0)>>>0);
  if (!($10)) {
   break;
  }
  $12=$xfsf;
  $13=$1;
  $14=(($13)|0);
  $15=(+(HEAPF32[(($14)>>2)]));
  $16=$12<$15;
  if ($16) {
   $18=$1;
   $19=(($18)|0);
   $20=(+(HEAPF32[(($19)>>2)]));
   $xfsf=$20;
  }
  $22=$xfsf;
  $23=$1;
  $24=(($23+4)|0);
  $25=(+(HEAPF32[(($24)>>2)]));
  $26=$22<$25;
  if ($26) {
   $28=$1;
   $29=(($28+4)|0);
   $30=(+(HEAPF32[(($29)>>2)]));
   $xfsf=$30;
  }
  $32=$xfsf;
  $33=$1;
  $34=(($33+8)|0);
  $35=(+(HEAPF32[(($34)>>2)]));
  $36=$32<$35;
  if ($36) {
   $38=$1;
   $39=(($38+8)|0);
   $40=(+(HEAPF32[(($39)>>2)]));
   $xfsf=$40;
  }
  $42=$xfsf;
  $43=$1;
  $44=(($43+12)|0);
  $45=(+(HEAPF32[(($44)>>2)]));
  $46=$42<$45;
  if ($46) {
   $48=$1;
   $49=(($48+12)|0);
   $50=(+(HEAPF32[(($49)>>2)]));
   $xfsf=$50;
  }
  $52=$1;
  $53=(($52+16)|0);
  $1=$53;
 }
 $55=$remaining;
 if (((($55|0))|0)==((2)|0)) {
  label = 16;
 } else if (((($55|0))|0)==((1)|0)) {
  label = 19;
 } else if (((($55|0))|0)==((3)|0)) {
  $57=$xfsf;
  $58=$1;
  $59=(($58+8)|0);
  $60=(+(HEAPF32[(($59)>>2)]));
  $61=$57<$60;
  if ($61) {
   $63=$1;
   $64=(($63+8)|0);
   $65=(+(HEAPF32[(($64)>>2)]));
   $xfsf=$65;
  }
  label = 16;
 }
 if ((label|0) == 16) {
  $68=$xfsf;
  $69=$1;
  $70=(($69+4)|0);
  $71=(+(HEAPF32[(($70)>>2)]));
  $72=$68<$71;
  if ($72) {
   $74=$1;
   $75=(($74+4)|0);
   $76=(+(HEAPF32[(($75)>>2)]));
   $xfsf=$76;
  }
  label = 19;
 }
 if ((label|0) == 19) {
  $79=$xfsf;
  $80=$1;
  $81=(($80)|0);
  $82=(+(HEAPF32[(($81)>>2)]));
  $83=$79<$82;
  if ($83) {
   $85=$1;
   $86=(($85)|0);
   $87=(+(HEAPF32[(($86)>>2)]));
   $xfsf=$87;
  }
 }
 $91=$xfsf;
 STACKTOP=sp;return (+($91));
}


function _find_lowest_scalefac($xr34){
 $xr34=+($xr34);
 var $1=.0,$sf_ok=0,$sf=0,$delsf=0,$i=0,$ixmax_val=.0,$xfsf=.0,$3=0,$4=0,$5=0,$7=0,$8=0,$9=0,$10=.0,$11=.0,$12=.0,$13=.0,$14=0,$16=0,$17=0;
 var $18=0,$19=0,$20=0,$21=0,$22=0,$24=0,$25=0,$26=0,$27=0,$28=0,$29=0,$31=0,$32=0,$33=0,$34=0,$36=0,$37=0,$39=0,label=0;
 var sp=0;sp=STACKTOP;







 $1=$xr34;
 $sf_ok=-1;
 $sf=-128;
 $delsf=64;
 $ixmax_val=8206.0;
 $i=0;
 while(1) {
  $3=$i;
  $4=($3&255);
  $5=($4|0)<8;
  if (!($5)) {
   break;
  }
  $7=$sf;
  $8=($7&255);
  $9=((59360+($8<<2))|0);
  $10=(+(HEAPF32[(($9)>>2)]));
  $11=$1;
  $12=($10)*($11);
  $xfsf=$12;
  $13=$xfsf;
  $14=$13<=(8206.0);
  if ($14) {
   $16=$sf;
   $sf_ok=$16;
   $17=$delsf;
   $18=($17&255);
   $19=$sf;
   $20=($19&255);
   $21=((($20)-($18))|0);
   $22=(($21)&255);
   $sf=$22;
  } else {
   $24=$delsf;
   $25=($24&255);
   $26=$sf;
   $27=($26&255);
   $28=((($27)+($25))|0);
   $29=(($28)&255);
   $sf=$29;
  }
  $31=$delsf;
  $32=($31&255);
  $33=$32>>1;
  $34=(($33)&255);
  $delsf=$34;
  $36=$i;
  $37=((($36)+(1))&255);
  $i=$37;
 }
 $39=$sf_ok;
 STACKTOP=sp;return (($39)|0);
}


function _quantize_x34($that){
 $that=($that)|0;
 var $1=0,$x=0,$xr34_orig=0,$cod_info=0,$ifqstep=0,$l3=0,$j=0,$sfb=0,$max_nonzero_coeff=0,$s=0,$sfac=0,$sfpow34=.0,$w=0,$m=0,$i=0,$remaining=0,$tmp_l3=0,$2=0,$3=0,$4=0;
 var $5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$14=0,$15=0,$16=0,$17=0,$18=0,$20=0,$21=0,$22=0,$24=0,$25=0,$26=0;
 var $27=0,$28=0,$29=0,$30=0,$31=0,$32=0,$34=0,$35=0,$36=0,$39=0,$40=0,$41=0,$42=0,$43=0,$44=0,$45=0,$46=0,$47=0,$48=0,$49=0;
 var $50=0,$51=0,$52=0,$53=0,$54=0,$55=0,$56=0,$57=0,$58=0,$59=0,$60=0,$61=0,$62=0,$63=.0,$64=0,$65=0,$66=0,$67=0,$68=0,$69=0;
 var $70=0,$71=0,$72=0,$73=0,$74=0,$75=0,$76=0,$77=0,$78=0,$79=0,$80=0,$82=0,$84=0,$86=0,$87=0,$88=0,$89=0,$90=0,$92=0,$93=0;
 var $94=0,$96=.0,$97=0,$98=0,$99=.0,$100=.0,$101=.0,$102=0,$103=.0,$104=0,$105=0,$106=.0,$107=.0,$108=.0,$109=0,$110=.0,$111=0,$112=0,$113=.0,$114=.0;
 var $115=.0,$116=0,$117=.0,$118=0,$119=0,$120=.0,$121=.0,$122=.0,$123=0,$124=0,$125=0,$126=0,$127=0,$128=0,$129=0,$131=0,$132=0,$134=0,$135=0,$136=0;
 var $137=0,$138=0,$140=.0,$141=0,$142=0,$143=.0,$144=.0,$145=.0,$146=0,$148=.0,$149=0,$150=0,$151=.0,$152=.0,$153=.0,$154=0,$156=.0,$157=0,$158=0,$159=.0;
 var $160=.0,$161=.0,$162=0,$164=0,$165=0,$166=0,$168=0,$169=0,$170=0,$171=0,$173=0,$174=0,$175=0,$176=0,$178=0,$179=0,$180=0,$181=0,$183=0,$184=0;
 var $185=0,$186=0,$187=0,$188=0,label=0;
 var sp=0;sp=STACKTOP;STACKTOP=(STACKTOP+48)|0;

 $x=((sp)|0);














 $tmp_l3=(((sp)+(32))|0);
 $1=$that;
 $2=$1;
 $3=(($2+8)|0);
 $4=((HEAP32[(($3)>>2)])|0);
 $xr34_orig=$4;
 $5=$1;
 $6=(($5+16)|0);
 $7=((HEAP32[(($6)>>2)])|0);
 $cod_info=$7;
 $8=$cod_info;
 $9=(($8+4836)|0);
 $10=((HEAP32[(($9)>>2)])|0);
 $11=($10|0)==0;
 $12=($11?2:4);
 $ifqstep=$12;
 $13=$cod_info;
 $14=(($13+2304)|0);
 $15=(($14)|0);
 $l3=$15;
 $j=0;
 $sfb=0;
 $16=$cod_info;
 $17=(($16+5208)|0);
 $18=((HEAP32[(($17)>>2)])|0);
 $max_nonzero_coeff=$18;
 while(1) {
  $20=$j;
  $21=$max_nonzero_coeff;
  $22=($20>>>0)<=($21>>>0);
  if (!($22)) {
   break;
  }
  $24=$sfb;
  $25=$cod_info;
  $26=(($25+4608)|0);
  $27=(($26+($24<<2))|0);
  $28=((HEAP32[(($27)>>2)])|0);
  $29=$cod_info;
  $30=(($29+4832)|0);
  $31=((HEAP32[(($30)>>2)])|0);
  $32=($31|0)!=0;
  if ($32) {
   $34=$sfb;
   $35=((9552+($34<<2))|0);
   $36=((HEAP32[(($35)>>2)])|0);
   $39=$36;
  } else {
   $39=0;
  }

  $40=((($28)+($39))|0);
  $41=$ifqstep;
  $42=(Math_imul($40,$41)|0);
  $43=$sfb;
  $44=$cod_info;
  $45=(($44+5028)|0);
  $46=(($45+($43<<2))|0);
  $47=((HEAP32[(($46)>>2)])|0);
  $48=$cod_info;
  $49=(($48+4808)|0);
  $50=(($49+($47<<2))|0);
  $51=((HEAP32[(($50)>>2)])|0);
  $52=($51<<3);
  $53=((($42)+($52))|0);
  $s=$53;
  $54=$cod_info;
  $55=(($54+4780)|0);
  $56=((HEAP32[(($55)>>2)])|0);
  $57=$s;
  $58=((($56)-($57))|0);
  $59=(($58)&255);
  $sfac=$59;
  $60=$sfac;
  $61=($60&255);
  $62=((59360+($61<<2))|0);
  $63=(+(HEAPF32[(($62)>>2)]));
  $sfpow34=$63;
  $64=$sfb;
  $65=$cod_info;
  $66=(($65+4872)|0);
  $67=(($66+($64<<2))|0);
  $68=((HEAP32[(($67)>>2)])|0);
  $w=$68;
  $69=$max_nonzero_coeff;
  $70=$j;
  $71=((($69)-($70))|0);
  $72=((($71)+(1))|0);
  $m=$72;
  $73=$w;
  $74=$j;
  $75=((($74)+($73))|0);
  $j=$75;
  $76=$sfb;
  $77=((($76)+(1))|0);
  $sfb=$77;
  $78=$w;
  $79=$m;
  $80=($78>>>0)<=($79>>>0);
  if ($80) {
   $82=$w;
   $86=$82;
  } else {
   $84=$m;
   $86=$84;
  }

  $i=$86;
  $87=$i;
  $88=$87&3;
  $remaining=$88;
  $89=$i;
  $90=$89>>>2;
  $i=$90;
  while(1) {
   $92=$i;
   $93=((($92)-(1))|0);
   $i=$93;
   $94=($92>>>0)>((0)>>>0);
   if (!($94)) {
    break;
   }
   $96=$sfpow34;
   $97=$xr34_orig;
   $98=(($97)|0);
   $99=(+(HEAPF32[(($98)>>2)]));
   $100=($96)*($99);
   $101=$100;
   $102=(($x)|0);
   HEAPF64[(($102)>>3)]=$101;
   $103=$sfpow34;
   $104=$xr34_orig;
   $105=(($104+4)|0);
   $106=(+(HEAPF32[(($105)>>2)]));
   $107=($103)*($106);
   $108=$107;
   $109=(($x+8)|0);
   HEAPF64[(($109)>>3)]=$108;
   $110=$sfpow34;
   $111=$xr34_orig;
   $112=(($111+8)|0);
   $113=(+(HEAPF32[(($112)>>2)]));
   $114=($110)*($113);
   $115=$114;
   $116=(($x+16)|0);
   HEAPF64[(($116)>>3)]=$115;
   $117=$sfpow34;
   $118=$xr34_orig;
   $119=(($118+12)|0);
   $120=(+(HEAPF32[(($119)>>2)]));
   $121=($117)*($120);
   $122=$121;
   $123=(($x+24)|0);
   HEAPF64[(($123)>>3)]=$122;
   $124=(($x)|0);
   $125=$l3;
   _k_34_4($124,$125);
   $126=$l3;
   $127=(($126+16)|0);
   $l3=$127;
   $128=$xr34_orig;
   $129=(($128+16)|0);
   $xr34_orig=$129;
  }
  $131=$remaining;
  $132=($131|0)!=0;
  if ($132) {
   $134=(($x+24)|0);
   HEAPF64[(($134)>>3)]=0.0;
   $135=(($x+16)|0);
   HEAPF64[(($135)>>3)]=0.0;
   $136=(($x+8)|0);
   HEAPF64[(($136)>>3)]=0.0;
   $137=(($x)|0);
   HEAPF64[(($137)>>3)]=0.0;
   $138=$remaining;
   if (((($138|0))|0)==((2)|0)) {
    label = 15;
   } else if (((($138|0))|0)==((1)|0)) {
    label = 16;
   } else if (((($138|0))|0)==((3)|0)) {
    $140=$sfpow34;
    $141=$xr34_orig;
    $142=(($141+8)|0);
    $143=(+(HEAPF32[(($142)>>2)]));
    $144=($140)*($143);
    $145=$144;
    $146=(($x+16)|0);
    HEAPF64[(($146)>>3)]=$145;
    label = 15;
   }
   if ((label|0) == 15) {
    label = 0;
    $148=$sfpow34;
    $149=$xr34_orig;
    $150=(($149+4)|0);
    $151=(+(HEAPF32[(($150)>>2)]));
    $152=($148)*($151);
    $153=$152;
    $154=(($x+8)|0);
    HEAPF64[(($154)>>3)]=$153;
    label = 16;
   }
   if ((label|0) == 16) {
    label = 0;
    $156=$sfpow34;
    $157=$xr34_orig;
    $158=(($157)|0);
    $159=(+(HEAPF32[(($158)>>2)]));
    $160=($156)*($159);
    $161=$160;
    $162=(($x)|0);
    HEAPF64[(($162)>>3)]=$161;
   }
   $164=(($x)|0);
   $165=(($tmp_l3)|0);
   _k_34_4($164,$165);
   $166=$remaining;
   if (((($166|0))|0)==((3)|0)) {
    $168=(($tmp_l3+8)|0);
    $169=((HEAP32[(($168)>>2)])|0);
    $170=$l3;
    $171=(($170+8)|0);
    HEAP32[(($171)>>2)]=$169;
    label = 19;
   } else if (((($166|0))|0)==((2)|0)) {
    label = 19;
   } else if (((($166|0))|0)==((1)|0)) {
    label = 20;
   }
   if ((label|0) == 19) {
    label = 0;
    $173=(($tmp_l3+4)|0);
    $174=((HEAP32[(($173)>>2)])|0);
    $175=$l3;
    $176=(($175+4)|0);
    HEAP32[(($176)>>2)]=$174;
    label = 20;
   }
   if ((label|0) == 20) {
    label = 0;
    $178=(($tmp_l3)|0);
    $179=((HEAP32[(($178)>>2)])|0);
    $180=$l3;
    $181=(($180)|0);
    HEAP32[(($181)>>2)]=$179;
   }
   $183=$remaining;
   $184=$l3;
   $185=(($184+($183<<2))|0);
   $l3=$185;
   $186=$remaining;
   $187=$xr34_orig;
   $188=(($187+($186<<2))|0);
   $xr34_orig=$188;
  }
 }
 STACKTOP=sp;return;
}


function _sfDepth($sfwork){
 $sfwork=($sfwork)|0;
 var $1=0,$m=0,$i=0,$j=0,$di=0,$3=0,$4=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$15=0,$18=0,$19=0,$20=0,$21=0;
 var $23=0,label=0;
 var sp=0;sp=STACKTOP;





 $1=$sfwork;
 $m=0;
 $j=39;
 $i=0;
 while(1) {
  $3=$j;
  $4=($3>>>0)>((0)>>>0);
  if (!($4)) {
   break;
  }
  $6=$i;
  $7=$1;
  $8=(($7+($6<<2))|0);
  $9=((HEAP32[(($8)>>2)])|0);
  $10=(((255)-($9))|0);
  $di=$10;
  $11=$m;
  $12=$di;
  $13=($11|0)<($12|0);
  if ($13) {
   $15=$di;
   $m=$15;
  }
  $18=$j;
  $19=((($18)-(1))|0);
  $j=$19;
  $20=$i;
  $21=((($20)+(1))|0);
  $i=$21;
 }
 $23=$m;
 STACKTOP=sp;return (($23)|0);
}


function _flattenDistribution($sfwork,$sf_out,$dm,$k,$p){
 $sfwork=($sfwork)|0;
 $sf_out=($sf_out)|0;
 $dm=($dm)|0;
 $k=($k)|0;
 $p=($p)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$i=0,$j=0,$x=0,$sfmax=0,$di=0,$6=0,$7=0,$10=0,$11=0,$13=0,$14=0,$15=0,$16=0,$17=0,$18=0;
 var $19=0,$20=0,$21=0,$22=0,$23=0,$24=0,$25=0,$26=0,$27=0,$28=0,$29=0,$30=0,$33=0,$34=0,$38=0,$39=0,$40=0,$41=0,$42=0,$43=0;
 var $44=0,$46=0,$49=0,$50=0,$51=0,$52=0,$56=0,$57=0,$59=0,$60=0,$61=0,$62=0,$63=0,$64=0,$65=0,$66=0,$67=0,$68=0,$69=0,$71=0;
 var $74=0,$75=0,$76=0,$77=0,$80=0,label=0;
 var sp=0;sp=STACKTOP;










 $1=$sfwork;
 $2=$sf_out;
 $3=$dm;
 $4=$k;
 $5=$p;
 $sfmax=0;
 $6=$3;
 $7=($6|0)>0;
 if (!($7)) {
  $j=39;
  $i=0;
  while(1) {
   $56=$j;
   $57=($56>>>0)>((0)>>>0);
   if (!($57)) {
    break;
   }
   $59=$i;
   $60=$1;
   $61=(($60+($59<<2))|0);
   $62=((HEAP32[(($61)>>2)])|0);
   $x=$62;
   $63=$x;
   $64=$i;
   $65=$2;
   $66=(($65+($64<<2))|0);
   HEAP32[(($66)>>2)]=$63;
   $67=$sfmax;
   $68=$x;
   $69=($67|0)<($68|0);
   if ($69) {
    $71=$x;
    $sfmax=$71;
   }
   $74=$j;
   $75=((($74)-(1))|0);
   $j=$75;
   $76=$i;
   $77=((($76)+(1))|0);
   $i=$77;
  }
  $80=$sfmax;
  STACKTOP=sp;return (($80)|0);
 }
 $j=39;
 $i=0;
 while(1) {
  $10=$j;
  $11=($10>>>0)>((0)>>>0);
  if (!($11)) {
   break;
  }
  $13=$5;
  $14=$i;
  $15=$1;
  $16=(($15+($14<<2))|0);
  $17=((HEAP32[(($16)>>2)])|0);
  $18=((($13)-($17))|0);
  $di=$18;
  $19=$i;
  $20=$1;
  $21=(($20+($19<<2))|0);
  $22=((HEAP32[(($21)>>2)])|0);
  $23=$4;
  $24=$di;
  $25=(Math_imul($23,$24)|0);
  $26=$3;
  $27=(((($25|0))/(($26|0)))&-1);
  $28=((($22)+($27))|0);
  $x=$28;
  $29=$x;
  $30=($29|0)<0;
  if ($30) {
   $x=0;
  } else {
   $33=$x;
   $34=($33|0)>255;
   if ($34) {
    $x=255;
   }
  }
  $38=$x;
  $39=$i;
  $40=$2;
  $41=(($40+($39<<2))|0);
  HEAP32[(($41)>>2)]=$38;
  $42=$sfmax;
  $43=$x;
  $44=($42|0)<($43|0);
  if ($44) {
   $46=$x;
   $sfmax=$46;
  }
  $49=$j;
  $50=((($49)-(1))|0);
  $j=$50;
  $51=$i;
  $52=((($51)+(1))|0);
  $i=$52;
 }
 $80=$sfmax;
 STACKTOP=sp;return (($80)|0);
}


function _tryThatOne($that,$sftemp,$vbrsfmin,$vbrmax){
 $that=($that)|0;
 $sftemp=($sftemp)|0;
 $vbrsfmin=($vbrsfmin)|0;
 $vbrmax=($vbrmax)|0;
 var $1=0,$2=0,$3=0,$4=0,$xrpow_max=.0,$nbits=0,$5=0,$6=0,$7=0,$8=0,$9=.0,$10=0,$11=0,$12=0,$13=0,$14=0,$15=0,$16=0,$17=0,$18=0;
 var $19=0,$20=0,$21=0,$22=0,$23=0,$24=0,$25=0,$26=0,$27=.0,$28=0,$29=0,$30=0,$31=0,$32=0,label=0;
 var sp=0;sp=STACKTOP;






 $1=$that;
 $2=$sftemp;
 $3=$vbrsfmin;
 $4=$vbrmax;
 $5=$1;
 $6=(($5+16)|0);
 $7=((HEAP32[(($6)>>2)])|0);
 $8=(($7+4764)|0);
 $9=(+(HEAPF32[(($8)>>2)]));
 $xrpow_max=$9;
 $nbits=100000;
 $10=$1;
 $11=(($10)|0);
 $12=((HEAP32[(($11)>>2)])|0);
 $13=$1;
 $14=$2;
 $15=$3;
 $16=$4;
 FUNCTION_TABLE_viiii[($12)&15]($13,$14,$15,$16);
 $17=$1;
 _bitcount($17);
 $18=$1;
 $19=((_quantizeAndCountBits($18))|0);
 $nbits=$19;
 $20=$1;
 $21=(($20+16)|0);
 $22=((HEAP32[(($21)>>2)])|0);
 $23=(($22+4844)|0);
 $24=((HEAP32[(($23)>>2)])|0);
 $25=$nbits;
 $26=((($25)+($24))|0);
 $nbits=$26;
 $27=$xrpow_max;
 $28=$1;
 $29=(($28+16)|0);
 $30=((HEAP32[(($29)>>2)])|0);
 $31=(($30+4764)|0);
 HEAPF32[(($31)>>2)]=$27;
 $32=$nbits;
 STACKTOP=sp;return (($32)|0);
}


function _searchGlobalStepsizeMax($that,$sfwork,$vbrsfmin,$target){
 $that=($that)|0;
 $sfwork=($sfwork)|0;
 $vbrsfmin=($vbrsfmin)|0;
 $target=($target)|0;
 var $1=0,$2=0,$3=0,$4=0,$cod_info=0,$gain=0,$curr=0,$gain_ok=0,$nbits=0,$l=0,$r=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0,$14=0;
 var $15=0,$16=0,$18=0,$19=0,$20=0,$21=0,$22=0,$23=0,$24=0,$25=0,$26=0,$27=0,$28=0,$29=0,$30=0,$32=0,$33=0,$34=0,$35=0,$36=0;
 var $37=0,$38=0,$40=0,$41=0,$42=0,$44=0,$45=0,$46=0,$47=0,$49=0,$53=0,$54=0,$55=0,$57=0,$58=0,$59=0,$60=0,$61=0,$62=0,$63=0;
 var $64=0,label=0;
 var sp=0;sp=STACKTOP;











 $1=$that;
 $2=$sfwork;
 $3=$vbrsfmin;
 $4=$target;
 $5=$1;
 $6=(($5+16)|0);
 $7=((HEAP32[(($6)>>2)])|0);
 $cod_info=$7;
 $8=$cod_info;
 $9=(($8+4780)|0);
 $10=((HEAP32[(($9)>>2)])|0);
 $gain=$10;
 $11=$gain;
 $curr=$11;
 $gain_ok=1024;
 $nbits=100000;
 $12=$gain;
 $l=$12;
 $r=512;
 while(1) {
  $14=$l;
  $15=$r;
  $16=($14|0)<=($15|0);
  if (!($16)) {
   break;
  }
  $18=$l;
  $19=$r;
  $20=((($18)+($19))|0);
  $21=$20>>1;
  $curr=$21;
  $22=$1;
  $23=$2;
  $24=$3;
  $25=$curr;
  $26=$gain;
  $27=((($25)-($26))|0);
  $28=((_tryGlobalStepsize($22,$23,$24,$27))|0);
  $nbits=$28;
  $29=$nbits;
  $30=($29|0)==0;
  do {
   if ($30) {
    label = 5;
   } else {
    $32=$nbits;
    $33=$cod_info;
    $34=(($33+4844)|0);
    $35=((HEAP32[(($34)>>2)])|0);
    $36=((($32)+($35))|0);
    $37=$4;
    $38=($36|0)<($37|0);
    if ($38) {
     label = 5;
     break;
    }
    $44=$curr;
    $45=((($44)+(1))|0);
    $l=$45;
    $46=$gain_ok;
    $47=($46|0)==1024;
    if ($47) {
     $49=$curr;
     $gain_ok=$49;
    }
   }
  } while(0);
  if ((label|0) == 5) {
   label = 0;
   $40=$curr;
   $41=((($40)-(1))|0);
   $r=$41;
   $42=$curr;
   $gain_ok=$42;
  }
 }
 $53=$gain_ok;
 $54=$curr;
 $55=($53|0)!=($54|0);
 if (!($55)) {
  STACKTOP=sp;return;
 }
 $57=$gain_ok;
 $curr=$57;
 $58=$1;
 $59=$2;
 $60=$3;
 $61=$curr;
 $62=$gain;
 $63=((($61)-($62))|0);
 $64=((_tryGlobalStepsize($58,$59,$60,$63))|0);
 $nbits=$64;
 STACKTOP=sp;return;
}


function _calc_sfb_noise_x34($xr,$xr34,$bw,$sf){
 $xr=($xr)|0;
 $xr34=($xr34)|0;
 $bw=($bw)|0;
 $sf=($sf)|0;
 var $1=0,$2=0,$3=0,$4=0,$x=0,$l3=0,$sfpow=.0,$sfpow34=.0,$xfsf=.0,$i=0,$remaining=0,$5=0,$6=0,$7=0,$8=0,$9=.0,$10=0,$11=0,$12=0,$13=.0;
 var $14=0,$15=0,$16=0,$17=0,$19=0,$20=0,$21=0,$23=.0,$24=0,$25=0,$26=.0,$27=.0,$28=.0,$29=0,$30=.0,$31=0,$32=0,$33=.0,$34=.0,$35=.0;
 var $36=0,$37=.0,$38=0,$39=0,$40=.0,$41=.0,$42=.0,$43=0,$44=.0,$45=0,$46=0,$47=.0,$48=.0,$49=.0,$50=0,$51=0,$52=0,$53=0,$54=0,$55=.0;
 var $56=.0,$57=.0,$58=0,$59=0,$60=0,$61=.0,$62=.0,$63=.0,$64=.0,$65=0,$66=0,$67=0,$68=.0,$69=.0,$70=.0,$71=0,$72=0,$73=0,$74=.0,$75=.0;
 var $76=.0,$77=.0,$78=0,$79=0,$80=0,$81=.0,$82=.0,$83=.0,$84=0,$85=0,$86=0,$87=.0,$88=.0,$89=.0,$90=.0,$91=0,$92=0,$93=0,$94=.0,$95=.0;
 var $96=.0,$97=0,$98=0,$99=0,$100=.0,$101=.0,$102=.0,$103=.0,$104=0,$105=0,$106=.0,$107=0,$108=.0,$109=.0,$110=0,$111=.0,$112=0,$113=.0,$114=.0,$115=.0;
 var $116=0,$117=.0,$118=0,$119=.0,$120=.0,$121=0,$122=.0,$123=0,$124=.0,$125=.0,$126=.0,$127=.0,$128=.0,$129=.0,$130=.0,$131=.0,$132=0,$133=0,$134=0,$135=0;
 var $137=0,$138=0,$140=0,$141=0,$142=0,$143=0,$144=0,$146=.0,$147=0,$148=0,$149=.0,$150=.0,$151=.0,$152=0,$154=.0,$155=0,$156=0,$157=.0,$158=.0,$159=.0;
 var $160=0,$162=.0,$163=0,$164=0,$165=.0,$166=.0,$167=.0,$168=0,$170=0,$171=0,$172=0,$173=0,$174=0,$175=0,$176=0,$178=0,$179=0,$180=.0,$181=.0,$182=.0;
 var $183=0,$184=0,$185=0,$186=.0,$187=.0,$188=.0,$189=.0,$190=0,$192=0,$193=0,$194=.0,$195=.0,$196=.0,$197=0,$198=0,$199=0,$200=.0,$201=.0,$202=.0,$203=.0;
 var $204=0,$206=0,$207=0,$208=.0,$209=.0,$210=.0,$211=0,$212=0,$213=0,$214=.0,$215=.0,$216=.0,$217=.0,$218=0,$220=0,$221=.0,$222=0,$223=.0,$224=.0,$225=0;
 var $226=.0,$227=0,$228=.0,$229=.0,$230=.0,$231=0,$232=.0,$233=0,$234=.0,$235=.0,$236=0,$237=.0,$238=0,$239=.0,$240=.0,$241=.0,$242=.0,$243=.0,$244=.0,$245=.0;
 var $246=.0,$248=.0,label=0;
 var sp=0;sp=STACKTOP;STACKTOP=(STACKTOP+48)|0;




 $x=((sp)|0);
 $l3=(((sp)+(32))|0);





 $1=$xr;
 $2=$xr34;
 $3=$bw;
 $4=$sf;
 $5=$4;
 $6=($5&255);
 $7=((($6)+(116))|0);
 $8=((55784+($7<<2))|0);
 $9=(+(HEAPF32[(($8)>>2)]));
 $sfpow=$9;
 $10=$4;
 $11=($10&255);
 $12=((59360+($11<<2))|0);
 $13=(+(HEAPF32[(($12)>>2)]));
 $sfpow34=$13;
 $xfsf=0.0;
 $14=$3;
 $15=$14>>>2;
 $i=$15;
 $16=$3;
 $17=$16&3;
 $remaining=$17;
 while(1) {
  $19=$i;
  $20=((($19)-(1))|0);
  $i=$20;
  $21=($19>>>0)>((0)>>>0);
  if (!($21)) {
   break;
  }
  $23=$sfpow34;
  $24=$2;
  $25=(($24)|0);
  $26=(+(HEAPF32[(($25)>>2)]));
  $27=($23)*($26);
  $28=$27;
  $29=(($x)|0);
  HEAPF64[(($29)>>3)]=$28;
  $30=$sfpow34;
  $31=$2;
  $32=(($31+4)|0);
  $33=(+(HEAPF32[(($32)>>2)]));
  $34=($30)*($33);
  $35=$34;
  $36=(($x+8)|0);
  HEAPF64[(($36)>>3)]=$35;
  $37=$sfpow34;
  $38=$2;
  $39=(($38+8)|0);
  $40=(+(HEAPF32[(($39)>>2)]));
  $41=($37)*($40);
  $42=$41;
  $43=(($x+16)|0);
  HEAPF64[(($43)>>3)]=$42;
  $44=$sfpow34;
  $45=$2;
  $46=(($45+12)|0);
  $47=(+(HEAPF32[(($46)>>2)]));
  $48=($44)*($47);
  $49=$48;
  $50=(($x+24)|0);
  HEAPF64[(($50)>>3)]=$49;
  $51=(($x)|0);
  $52=(($l3)|0);
  _k_34_4($51,$52);
  $53=$1;
  $54=(($53)|0);
  $55=(+(HEAPF32[(($54)>>2)]));
  $56=(+(Math_abs((+($55)))));
  $57=$sfpow;
  $58=(($l3)|0);
  $59=((HEAP32[(($58)>>2)])|0);
  $60=((22952+($59<<2))|0);
  $61=(+(HEAPF32[(($60)>>2)]));
  $62=($57)*($61);
  $63=($56)-($62);
  $64=$63;
  $65=(($x)|0);
  HEAPF64[(($65)>>3)]=$64;
  $66=$1;
  $67=(($66+4)|0);
  $68=(+(HEAPF32[(($67)>>2)]));
  $69=(+(Math_abs((+($68)))));
  $70=$sfpow;
  $71=(($l3+4)|0);
  $72=((HEAP32[(($71)>>2)])|0);
  $73=((22952+($72<<2))|0);
  $74=(+(HEAPF32[(($73)>>2)]));
  $75=($70)*($74);
  $76=($69)-($75);
  $77=$76;
  $78=(($x+8)|0);
  HEAPF64[(($78)>>3)]=$77;
  $79=$1;
  $80=(($79+8)|0);
  $81=(+(HEAPF32[(($80)>>2)]));
  $82=(+(Math_abs((+($81)))));
  $83=$sfpow;
  $84=(($l3+8)|0);
  $85=((HEAP32[(($84)>>2)])|0);
  $86=((22952+($85<<2))|0);
  $87=(+(HEAPF32[(($86)>>2)]));
  $88=($83)*($87);
  $89=($82)-($88);
  $90=$89;
  $91=(($x+16)|0);
  HEAPF64[(($91)>>3)]=$90;
  $92=$1;
  $93=(($92+12)|0);
  $94=(+(HEAPF32[(($93)>>2)]));
  $95=(+(Math_abs((+($94)))));
  $96=$sfpow;
  $97=(($l3+12)|0);
  $98=((HEAP32[(($97)>>2)])|0);
  $99=((22952+($98<<2))|0);
  $100=(+(HEAPF32[(($99)>>2)]));
  $101=($96)*($100);
  $102=($95)-($101);
  $103=$102;
  $104=(($x+24)|0);
  HEAPF64[(($104)>>3)]=$103;
  $105=(($x)|0);
  $106=(+(HEAPF64[(($105)>>3)]));
  $107=(($x)|0);
  $108=(+(HEAPF64[(($107)>>3)]));
  $109=($106)*($108);
  $110=(($x+8)|0);
  $111=(+(HEAPF64[(($110)>>3)]));
  $112=(($x+8)|0);
  $113=(+(HEAPF64[(($112)>>3)]));
  $114=($111)*($113);
  $115=($109)+($114);
  $116=(($x+16)|0);
  $117=(+(HEAPF64[(($116)>>3)]));
  $118=(($x+16)|0);
  $119=(+(HEAPF64[(($118)>>3)]));
  $120=($117)*($119);
  $121=(($x+24)|0);
  $122=(+(HEAPF64[(($121)>>3)]));
  $123=(($x+24)|0);
  $124=(+(HEAPF64[(($123)>>3)]));
  $125=($122)*($124);
  $126=($120)+($125);
  $127=($115)+($126);
  $128=$xfsf;
  $129=$128;
  $130=($129)+($127);
  $131=$130;
  $xfsf=$131;
  $132=$1;
  $133=(($132+16)|0);
  $1=$133;
  $134=$2;
  $135=(($134+16)|0);
  $2=$135;
 }
 $137=$remaining;
 $138=($137|0)!=0;
 if (!($138)) {
  $248=$xfsf;
  STACKTOP=sp;return (+($248));
 }
 $140=(($x+24)|0);
 HEAPF64[(($140)>>3)]=0.0;
 $141=(($x+16)|0);
 HEAPF64[(($141)>>3)]=0.0;
 $142=(($x+8)|0);
 HEAPF64[(($142)>>3)]=0.0;
 $143=(($x)|0);
 HEAPF64[(($143)>>3)]=0.0;
 $144=$remaining;
 if (((($144|0))|0)==((3)|0)) {
  $146=$sfpow34;
  $147=$2;
  $148=(($147+8)|0);
  $149=(+(HEAPF32[(($148)>>2)]));
  $150=($146)*($149);
  $151=$150;
  $152=(($x+16)|0);
  HEAPF64[(($152)>>3)]=$151;
  label = 7;
 } else if (((($144|0))|0)==((2)|0)) {
  label = 7;
 } else if (((($144|0))|0)==((1)|0)) {
  label = 8;
 }
 if ((label|0) == 7) {
  $154=$sfpow34;
  $155=$2;
  $156=(($155+4)|0);
  $157=(+(HEAPF32[(($156)>>2)]));
  $158=($154)*($157);
  $159=$158;
  $160=(($x+8)|0);
  HEAPF64[(($160)>>3)]=$159;
  label = 8;
 }
 if ((label|0) == 8) {
  $162=$sfpow34;
  $163=$2;
  $164=(($163)|0);
  $165=(+(HEAPF32[(($164)>>2)]));
  $166=($162)*($165);
  $167=$166;
  $168=(($x)|0);
  HEAPF64[(($168)>>3)]=$167;
 }
 $170=(($x)|0);
 $171=(($l3)|0);
 _k_34_4($170,$171);
 $172=(($x+24)|0);
 HEAPF64[(($172)>>3)]=0.0;
 $173=(($x+16)|0);
 HEAPF64[(($173)>>3)]=0.0;
 $174=(($x+8)|0);
 HEAPF64[(($174)>>3)]=0.0;
 $175=(($x)|0);
 HEAPF64[(($175)>>3)]=0.0;
 $176=$remaining;
 if (((($176|0))|0)==((1)|0)) {
  label = 12;
 } else if (((($176|0))|0)==((3)|0)) {
  $178=$1;
  $179=(($178+8)|0);
  $180=(+(HEAPF32[(($179)>>2)]));
  $181=(+(Math_abs((+($180)))));
  $182=$sfpow;
  $183=(($l3+8)|0);
  $184=((HEAP32[(($183)>>2)])|0);
  $185=((22952+($184<<2))|0);
  $186=(+(HEAPF32[(($185)>>2)]));
  $187=($182)*($186);
  $188=($181)-($187);
  $189=$188;
  $190=(($x+16)|0);
  HEAPF64[(($190)>>3)]=$189;
  label = 11;
 } else if (((($176|0))|0)==((2)|0)) {
  label = 11;
 }
 if ((label|0) == 11) {
  $192=$1;
  $193=(($192+4)|0);
  $194=(+(HEAPF32[(($193)>>2)]));
  $195=(+(Math_abs((+($194)))));
  $196=$sfpow;
  $197=(($l3+4)|0);
  $198=((HEAP32[(($197)>>2)])|0);
  $199=((22952+($198<<2))|0);
  $200=(+(HEAPF32[(($199)>>2)]));
  $201=($196)*($200);
  $202=($195)-($201);
  $203=$202;
  $204=(($x+8)|0);
  HEAPF64[(($204)>>3)]=$203;
  label = 12;
 }
 if ((label|0) == 12) {
  $206=$1;
  $207=(($206)|0);
  $208=(+(HEAPF32[(($207)>>2)]));
  $209=(+(Math_abs((+($208)))));
  $210=$sfpow;
  $211=(($l3)|0);
  $212=((HEAP32[(($211)>>2)])|0);
  $213=((22952+($212<<2))|0);
  $214=(+(HEAPF32[(($213)>>2)]));
  $215=($210)*($214);
  $216=($209)-($215);
  $217=$216;
  $218=(($x)|0);
  HEAPF64[(($218)>>3)]=$217;
 }
 $220=(($x)|0);
 $221=(+(HEAPF64[(($220)>>3)]));
 $222=(($x)|0);
 $223=(+(HEAPF64[(($222)>>3)]));
 $224=($221)*($223);
 $225=(($x+8)|0);
 $226=(+(HEAPF64[(($225)>>3)]));
 $227=(($x+8)|0);
 $228=(+(HEAPF64[(($227)>>3)]));
 $229=($226)*($228);
 $230=($224)+($229);
 $231=(($x+16)|0);
 $232=(+(HEAPF64[(($231)>>3)]));
 $233=(($x+16)|0);
 $234=(+(HEAPF64[(($233)>>3)]));
 $235=($232)*($234);
 $236=(($x+24)|0);
 $237=(+(HEAPF64[(($236)>>3)]));
 $238=(($x+24)|0);
 $239=(+(HEAPF64[(($238)>>3)]));
 $240=($237)*($239);
 $241=($235)+($240);
 $242=($230)+($241);
 $243=$xfsf;
 $244=$243;
 $245=($244)+($242);
 $246=$245;
 $xfsf=$246;
 $248=$xfsf;
 STACKTOP=sp;return (+($248));
}


function _k_34_4($x,$l3){
 $x=($x)|0;
 $l3=($l3)|0;
 var $1=0,$2=0,$fi=0,$3=0,$4=0,$5=.0,$6=.0,$7=0,$8=0,$9=.0,$10=.0,$11=0,$12=0,$13=0,$14=0,$15=.0,$16=.0,$17=0,$18=0,$19=.0;
 var $20=.0,$21=0,$22=0,$23=0,$24=0,$25=.0,$26=.0,$27=0,$28=0,$29=.0,$30=.0,$31=0,$32=0,$33=0,$34=0,$35=.0,$36=.0,$37=0,$38=0,$39=.0;
 var $40=.0,$41=0,$42=0,$43=0,$44=0,$45=.0,$46=0,$47=0,$48=0,$49=0,$50=0,$51=.0,$52=.0,$53=.0,$54=.0,$55=0,$56=0,$57=0,$58=0,$59=.0;
 var $60=0,$61=0,$62=0,$63=0,$64=0,$65=.0,$66=.0,$67=.0,$68=.0,$69=0,$70=0,$71=0,$72=0,$73=.0,$74=0,$75=0,$76=0,$77=0,$78=0,$79=.0;
 var $80=.0,$81=.0,$82=.0,$83=0,$84=0,$85=0,$86=0,$87=.0,$88=0,$89=0,$90=0,$91=0,$92=0,$93=.0,$94=.0,$95=.0,$96=.0,$97=0,$98=0,$99=0;
 var $100=0,$101=0,$102=0,$103=0,$104=0,$105=0,$106=0,$107=0,$108=0,$109=0,$110=0,$111=0,$112=0,$113=0,$114=0,$115=0,$116=0,$117=0,$118=0,$119=0;
 var $120=0,$121=0,$122=0,label=0;
 var sp=0;sp=STACKTOP;STACKTOP=(STACKTOP+16)|0;


 $fi=((sp)|0);
 $1=$x;
 $2=$l3;
 $3=$1;
 $4=(($3)|0);
 $5=(+(HEAPF64[(($4)>>3)]));
 $6=($5)+((8388608.0));
 HEAPF64[(($4)>>3)]=$6;
 $7=$1;
 $8=(($7)|0);
 $9=(+(HEAPF64[(($8)>>3)]));
 $10=$9;
 $11=(($fi)|0);
 $12=$11;
 HEAPF32[(($12)>>2)]=$10;
 $13=$1;
 $14=(($13+8)|0);
 $15=(+(HEAPF64[(($14)>>3)]));
 $16=($15)+((8388608.0));
 HEAPF64[(($14)>>3)]=$16;
 $17=$1;
 $18=(($17+8)|0);
 $19=(+(HEAPF64[(($18)>>3)]));
 $20=$19;
 $21=(($fi+4)|0);
 $22=$21;
 HEAPF32[(($22)>>2)]=$20;
 $23=$1;
 $24=(($23+16)|0);
 $25=(+(HEAPF64[(($24)>>3)]));
 $26=($25)+((8388608.0));
 HEAPF64[(($24)>>3)]=$26;
 $27=$1;
 $28=(($27+16)|0);
 $29=(+(HEAPF64[(($28)>>3)]));
 $30=$29;
 $31=(($fi+8)|0);
 $32=$31;
 HEAPF32[(($32)>>2)]=$30;
 $33=$1;
 $34=(($33+24)|0);
 $35=(+(HEAPF64[(($34)>>3)]));
 $36=($35)+((8388608.0));
 HEAPF64[(($34)>>3)]=$36;
 $37=$1;
 $38=(($37+24)|0);
 $39=(+(HEAPF64[(($38)>>3)]));
 $40=$39;
 $41=(($fi+12)|0);
 $42=$41;
 HEAPF32[(($42)>>2)]=$40;
 $43=$1;
 $44=(($43)|0);
 $45=(+(HEAPF64[(($44)>>3)]));
 $46=(($fi)|0);
 $47=$46;
 $48=((HEAP32[(($47)>>2)])|0);
 $49=((($48)-(1258291200))|0);
 $50=((69616+($49<<2))|0);
 $51=(+(HEAPF32[(($50)>>2)]));
 $52=$51;
 $53=($45)+($52);
 $54=$53;
 $55=(($fi)|0);
 $56=$55;
 HEAPF32[(($56)>>2)]=$54;
 $57=$1;
 $58=(($57+8)|0);
 $59=(+(HEAPF64[(($58)>>3)]));
 $60=(($fi+4)|0);
 $61=$60;
 $62=((HEAP32[(($61)>>2)])|0);
 $63=((($62)-(1258291200))|0);
 $64=((69616+($63<<2))|0);
 $65=(+(HEAPF32[(($64)>>2)]));
 $66=$65;
 $67=($59)+($66);
 $68=$67;
 $69=(($fi+4)|0);
 $70=$69;
 HEAPF32[(($70)>>2)]=$68;
 $71=$1;
 $72=(($71+16)|0);
 $73=(+(HEAPF64[(($72)>>3)]));
 $74=(($fi+8)|0);
 $75=$74;
 $76=((HEAP32[(($75)>>2)])|0);
 $77=((($76)-(1258291200))|0);
 $78=((69616+($77<<2))|0);
 $79=(+(HEAPF32[(($78)>>2)]));
 $80=$79;
 $81=($73)+($80);
 $82=$81;
 $83=(($fi+8)|0);
 $84=$83;
 HEAPF32[(($84)>>2)]=$82;
 $85=$1;
 $86=(($85+24)|0);
 $87=(+(HEAPF64[(($86)>>3)]));
 $88=(($fi+12)|0);
 $89=$88;
 $90=((HEAP32[(($89)>>2)])|0);
 $91=((($90)-(1258291200))|0);
 $92=((69616+($91<<2))|0);
 $93=(+(HEAPF32[(($92)>>2)]));
 $94=$93;
 $95=($87)+($94);
 $96=$95;
 $97=(($fi+12)|0);
 $98=$97;
 HEAPF32[(($98)>>2)]=$96;
 $99=(($fi)|0);
 $100=$99;
 $101=((HEAP32[(($100)>>2)])|0);
 $102=((($101)-(1258291200))|0);
 $103=$2;
 $104=(($103)|0);
 HEAP32[(($104)>>2)]=$102;
 $105=(($fi+4)|0);
 $106=$105;
 $107=((HEAP32[(($106)>>2)])|0);
 $108=((($107)-(1258291200))|0);
 $109=$2;
 $110=(($109+4)|0);
 HEAP32[(($110)>>2)]=$108;
 $111=(($fi+8)|0);
 $112=$111;
 $113=((HEAP32[(($112)>>2)])|0);
 $114=((($113)-(1258291200))|0);
 $115=$2;
 $116=(($115+8)|0);
 HEAP32[(($116)>>2)]=$114;
 $117=(($fi+12)|0);
 $118=$117;
 $119=((HEAP32[(($118)>>2)])|0);
 $120=((($119)-(1258291200))|0);
 $121=$2;
 $122=(($121+12)|0);
 HEAP32[(($122)>>2)]=$120;
 STACKTOP=sp;return;
}


function _tryGlobalStepsize($that,$sfwork,$vbrsfmin,$delta){
 $that=($that)|0;
 $sfwork=($sfwork)|0;
 $vbrsfmin=($vbrsfmin)|0;
 $delta=($delta)|0;
 var $1=0,$2=0,$3=0,$4=0,$xrpow_max=.0,$sftemp=0,$i=0,$nbits=0,$gain=0,$vbrmax=0,$5=0,$6=0,$7=0,$8=0,$9=.0,$11=0,$12=0,$14=0,$15=0,$16=0;
 var $17=0,$18=0,$19=0,$20=0,$21=0,$22=0,$23=0,$24=0,$25=0,$27=0,$28=0,$29=0,$30=0,$32=0,$33=0,$36=0,$37=0,$38=0,$40=0,$42=0;
 var $43=0,$44=0,$46=0,$47=0,$49=0,$50=0,$51=0,$52=0,$53=0,$54=0,$55=0,$56=0,$57=0,$58=0,$59=.0,$60=0,$61=0,$62=0,$63=0,$64=0;
 var label=0;
 var sp=0;sp=STACKTOP;STACKTOP=(STACKTOP+160)|0;





 $sftemp=((sp)|0);




 $1=$that;
 $2=$sfwork;
 $3=$vbrsfmin;
 $4=$delta;
 $5=$1;
 $6=(($5+16)|0);
 $7=((HEAP32[(($6)>>2)])|0);
 $8=(($7+4764)|0);
 $9=(+(HEAPF32[(($8)>>2)]));
 $xrpow_max=$9;
 $vbrmax=0;
 $i=0;
 while(1) {
  $11=$i;
  $12=($11|0)<39;
  if (!($12)) {
   break;
  }
  $14=$i;
  $15=$2;
  $16=(($15+($14<<2))|0);
  $17=((HEAP32[(($16)>>2)])|0);
  $18=$4;
  $19=((($17)+($18))|0);
  $gain=$19;
  $20=$gain;
  $21=$i;
  $22=$3;
  $23=(($22+($21<<2))|0);
  $24=((HEAP32[(($23)>>2)])|0);
  $25=($20|0)<($24|0);
  if ($25) {
   $27=$i;
   $28=$3;
   $29=(($28+($27<<2))|0);
   $30=((HEAP32[(($29)>>2)])|0);
   $gain=$30;
  }
  $32=$gain;
  $33=($32|0)>255;
  if ($33) {
   $gain=255;
  }
  $36=$vbrmax;
  $37=$gain;
  $38=($36|0)<($37|0);
  if ($38) {
   $40=$gain;
   $vbrmax=$40;
  }
  $42=$gain;
  $43=$i;
  $44=(($sftemp+($43<<2))|0);
  HEAP32[(($44)>>2)]=$42;
  $46=$i;
  $47=((($46)+(1))|0);
  $i=$47;
 }
 $49=$1;
 $50=(($49)|0);
 $51=((HEAP32[(($50)>>2)])|0);
 $52=$1;
 $53=(($sftemp)|0);
 $54=$3;
 $55=$vbrmax;
 FUNCTION_TABLE_viiii[($51)&15]($52,$53,$54,$55);
 $56=$1;
 _bitcount($56);
 $57=$1;
 $58=((_quantizeAndCountBits($57))|0);
 $nbits=$58;
 $59=$xrpow_max;
 $60=$1;
 $61=(($60+16)|0);
 $62=((HEAP32[(($61)>>2)])|0);
 $63=(($62+4764)|0);
 HEAPF32[(($63)>>2)]=$59;
 $64=$nbits;
 STACKTOP=sp;return (($64)|0);
}


function _lame_get_id3v2_tag($gfp,$buffer,$size){
 $gfp=($gfp)|0;
 $buffer=($buffer)|0;
 $size=($size)|0;
 var $1=0,$2=0,$3=0,$4=0,$gfc=0,$usev2=0,$title_length=0,$artist_length=0,$album_length=0,$comment_length=0,$tag_size=0,$p=0,$adjusted_tag_size=0,$albumart_mime=0,$tag=0,$node=0,$tag1=0,$node2=0,$5=0,$6=0;
 var $9=0,$10=0,$11=0,$12=0,$13=0,$16=0,$17=0,$18=0,$21=0,$22=0,$23=0,$24=0,$25=0,$26=0,$27=0,$29=0,$30=0,$31=0,$32=0,$33=0;
 var $36=0,$37=0,$38=0,$39=0,$40=0,$41=0,$43=0,$44=0,$45=0,$46=0,$47=0,$50=0,$51=0,$52=0,$53=0,$54=0,$55=0,$57=0,$58=0,$59=0;
 var $60=0,$61=0,$64=0,$65=0,$66=0,$67=0,$68=0,$69=0,$71=0,$72=0,$73=0,$74=0,$75=0,$78=0,$79=0,$80=0,$82=0,$83=0,$85=0,$86=0;
 var $88=0,$89=0,$91=0,$92=0,$93=0,$94=0,$95=0,$97=0,$98=0,$101=0,$102=0,$104=0,$105=0,$106=0,$107=0,$109=0,$110=0,$111=0,$112=0,$113=.0;
 var $115=0,$116=0,$117=0,$118=0,$119=0,$121=0,$122=0,$123=0,$124=0,$125=0,$127=0,$128=0,$129=0,$130=0,$132=0,$134=0,$136=0,$138=0,$139=0,$141=0;
 var $142=0,$143=0,$144=0,$145=0,$146=0,$147=0,$148=0,$149=0,$150=0,$153=0,$154=0,$155=0,$156=0,$157=0,$158=0,$160=0,$161=0,$162=0,$164=0,$165=0;
 var $167=0,$168=0,$169=0,$170=0,$172=0,$173=0,$174=0,$175=0,$177=0,$178=0,$179=0,$180=0,$182=0,$183=0,$184=0,$185=0,$186=0,$188=0,$189=0,$190=0;
 var $191=0,$193=0,$194=0,$195=0,$196=0,$200=0,$201=0,$202=0,$205=0,$206=0,$207=0,$209=0,$210=0,$211=0,$212=0,$213=0,$214=0,$216=0,$217=0,$218=0;
 var $220=0,$222=0,$223=0,$226=0,$227=0,$228=0,$229=0,$230=0,$231=0,$232=0,$233=0,$234=0,$235=0,$236=0,$237=0,$238=0,$239=0,$240=0,$241=0,$242=0;
 var $243=0,$244=0,$245=0,$246=0,$247=0,$248=0,$249=0,$250=0,$251=0,$252=0,$253=0,$254=0,$255=0,$256=0,$257=0,$258=0,$259=0,$260=0,$261=0,$262=0;
 var $263=0,$264=0,$265=0,$266=0,$267=0,$268=0,$269=0,$271=0,$272=0,$273=0,$275=0,$276=0,$278=0,$279=0,$280=0,$281=0,$283=0,$284=0,$285=0,$286=0;
 var $288=0,$289=0,$290=0,$292=0,$293=0,$294=0,$295=0,$296=0,$298=0,$299=0,$300=0,$302=0,$303=0,$304=0,$308=0,$309=0,$310=0,$313=0,$314=0,$316=0;
 var $317=0,$318=0,$319=0,$320=0,$321=0,$322=0,$323=0,$324=0,$325=0,$326=0,$328=0,$329=0,$330=0,$331=0,$332=0,$333=0,$334=0,$335=0,$336=0,$339=0;
 var label=0;
 var sp=0;sp=STACKTOP;


















 $2=$gfp;
 $3=$buffer;
 $4=$size;
 $5=$2;
 $6=($5|0)==0;
 if ($6) {
  $1=0;
  $339=$1;
  STACKTOP=sp;return (($339)|0);
 }
 $9=$2;
 $10=(($9+288)|0);
 $11=((HEAP32[(($10)>>2)])|0);
 $gfc=$11;
 $12=$gfc;
 $13=($12|0)==0;
 if ($13) {
  $1=0;
  $339=$1;
  STACKTOP=sp;return (($339)|0);
 }
 $16=$gfc;
 $17=((_test_tag_spec_flags($16,4))|0);
 $18=($17|0)!=0;
 if ($18) {
  $1=0;
  $339=$1;
  STACKTOP=sp;return (($339)|0);
 }
 $21=$gfc;
 $22=((_test_tag_spec_flags($21,10))|0);
 $usev2=$22;
 $23=$gfc;
 $24=(($23+85696)|0);
 $25=(($24+8)|0);
 $26=((HEAP32[(($25)>>2)])|0);
 $27=($26|0)!=0;
 if ($27) {
  $29=$gfc;
  $30=(($29+85696)|0);
  $31=(($30+8)|0);
  $32=((HEAP32[(($31)>>2)])|0);
  $33=((_strlen((($32)|0)))|0);
  $36=$33;
 } else {
  $36=0;
 }

 $title_length=$36;
 $37=$gfc;
 $38=(($37+85696)|0);
 $39=(($38+12)|0);
 $40=((HEAP32[(($39)>>2)])|0);
 $41=($40|0)!=0;
 if ($41) {
  $43=$gfc;
  $44=(($43+85696)|0);
  $45=(($44+12)|0);
  $46=((HEAP32[(($45)>>2)])|0);
  $47=((_strlen((($46)|0)))|0);
  $50=$47;
 } else {
  $50=0;
 }

 $artist_length=$50;
 $51=$gfc;
 $52=(($51+85696)|0);
 $53=(($52+16)|0);
 $54=((HEAP32[(($53)>>2)])|0);
 $55=($54|0)!=0;
 if ($55) {
  $57=$gfc;
  $58=(($57+85696)|0);
  $59=(($58+16)|0);
  $60=((HEAP32[(($59)>>2)])|0);
  $61=((_strlen((($60)|0)))|0);
  $64=$61;
 } else {
  $64=0;
 }

 $album_length=$64;
 $65=$gfc;
 $66=(($65+85696)|0);
 $67=(($66+20)|0);
 $68=((HEAP32[(($67)>>2)])|0);
 $69=($68|0)!=0;
 if ($69) {
  $71=$gfc;
  $72=(($71+85696)|0);
  $73=(($72+20)|0);
  $74=((HEAP32[(($73)>>2)])|0);
  $75=((_strlen((($74)|0)))|0);
  $78=$75;
 } else {
  $78=0;
 }

 $comment_length=$78;
 $79=$title_length;
 $80=($79>>>0)>((30)>>>0);
 do {
  if ($80) {
   label = 25;
  } else {
   $82=$artist_length;
   $83=($82>>>0)>((30)>>>0);
   if ($83) {
    label = 25;
    break;
   }
   $85=$album_length;
   $86=($85>>>0)>((30)>>>0);
   if ($86) {
    label = 25;
    break;
   }
   $88=$comment_length;
   $89=($88>>>0)>((30)>>>0);
   if ($89) {
    label = 25;
    break;
   }
   $91=$gfc;
   $92=(($91+85696)|0);
   $93=(($92+24)|0);
   $94=((HEAP32[(($93)>>2)])|0);
   $95=($94|0)!=0;
   if (!($95)) {
    break;
   }
   $97=$comment_length;
   $98=($97>>>0)>((28)>>>0);
   if ($98) {
    label = 25;
   }
  }
 } while(0);
 if ((label|0) == 25) {
  $usev2=1;
 }
 $101=$usev2;
 $102=($101|0)!=0;
 if (!($102)) {
  $1=0;
  $339=$1;
  STACKTOP=sp;return (($339)|0);
 }
 $albumart_mime=0;
 $104=$2;
 $105=(($104+4)|0);
 $106=((HEAP32[(($105)>>2)])|0);
 $107=($106|0)!=-1;
 if ($107) {
  $109=$2;
  $110=$2;
  $111=(($110+4)|0);
  $112=((HEAP32[(($111)>>2)])|0);
  $113=(+((($112>>>0))>>>0));
  _id3v2AddAudioDuration($109,$113);
 }
 $tag_size=10;
 $115=$gfc;
 $116=(($115+85696)|0);
 $117=(($116+32)|0);
 $118=((HEAP32[(($117)>>2)])|0);
 $119=($118|0)!=0;
 do {
  if ($119) {
   $121=$gfc;
   $122=(($121+85696)|0);
   $123=(($122+36)|0);
   $124=((HEAP32[(($123)>>2)])|0);
   $125=($124|0)!=0;
   if (!($125)) {
    break;
   }
   $127=$gfc;
   $128=(($127+85696)|0);
   $129=(($128+44)|0);
   $130=((HEAP32[(($129)>>2)])|0);
   if (((($130|0))|0)==((1)|0)) {
    $132=((HEAP32[((12184)>>2)])|0);
    $albumart_mime=$132;
   } else if (((($130|0))|0)==((2)|0)) {
    $134=((HEAP32[((12176)>>2)])|0);
    $albumart_mime=$134;
   } else if (((($130|0))|0)==((3)|0)) {
    $136=((HEAP32[((12192)>>2)])|0);
    $albumart_mime=$136;
   }
   $138=$albumart_mime;
   $139=($138|0)!=0;
   if ($139) {
    $141=$albumart_mime;
    $142=((_strlen((($141)|0)))|0);
    $143=((($142)+(14))|0);
    $144=$gfc;
    $145=(($144+85696)|0);
    $146=(($145+36)|0);
    $147=((HEAP32[(($146)>>2)])|0);
    $148=((($143)+($147))|0);
    $149=$tag_size;
    $150=((($149)+($148))|0);
    $tag_size=$150;
   }
  }
 } while(0);
 $153=$gfc;
 $154=(($153+85696)|0);
 $tag=$154;
 $155=$tag;
 $156=(($155+48)|0);
 $157=((HEAP32[(($156)>>2)])|0);
 $158=($157|0)!=0;
 if ($158) {
  $160=$tag;
  $161=(($160+48)|0);
  $162=((HEAP32[(($161)>>2)])|0);
  $node=$162;
  while(1) {
   $164=$node;
   $165=($164|0)!=0;
   if (!($165)) {
    break;
   }
   $167=$node;
   $168=(($167+4)|0);
   $169=((HEAP32[(($168)>>2)])|0);
   $170=($169|0)==1129270605;
   do {
    if ($170) {
     label = 43;
    } else {
     $172=$node;
     $173=(($172+4)|0);
     $174=((HEAP32[(($173)>>2)])|0);
     $175=($174|0)==1431520594;
     if ($175) {
      label = 43;
      break;
     }
     $182=$node;
     $183=(($182+4)|0);
     $184=((HEAP32[(($183)>>2)])|0);
     $185=((_isFrameIdMatching($184,1459617792))|0);
     $186=($185|0)!=0;
     if ($186) {
      $188=$node;
      $189=((_sizeOfWxxxNode($188))|0);
      $190=$tag_size;
      $191=((($190)+($189))|0);
      $tag_size=$191;
     } else {
      $193=$node;
      $194=((_sizeOfNode($193))|0);
      $195=$tag_size;
      $196=((($195)+($194))|0);
      $tag_size=$196;
     }
    }
   } while(0);
   if ((label|0) == 43) {
    label = 0;
    $177=$node;
    $178=((_sizeOfCommentNode($177))|0);
    $179=$tag_size;
    $180=((($179)+($178))|0);
    $tag_size=$180;
   }
   $200=$node;
   $201=(($200)|0);
   $202=((HEAP32[(($201)>>2)])|0);
   $node=$202;
  }
 }
 $205=$gfc;
 $206=((_test_tag_spec_flags($205,32))|0);
 $207=($206|0)!=0;
 if ($207) {
  $209=$gfc;
  $210=(($209+85696)|0);
  $211=(($210+40)|0);
  $212=((HEAP32[(($211)>>2)])|0);
  $213=$tag_size;
  $214=((($213)+($212))|0);
  $tag_size=$214;
 }
 $216=$4;
 $217=$tag_size;
 $218=($216>>>0)<($217>>>0);
 if ($218) {
  $220=$tag_size;
  $1=$220;
  $339=$1;
  STACKTOP=sp;return (($339)|0);
 }
 $222=$3;
 $223=($222|0)==0;
 if ($223) {
  $1=0;
  $339=$1;
  STACKTOP=sp;return (($339)|0);
 }
 $226=$3;
 $p=$226;
 $227=$p;
 $228=(($227+1)|0);
 $p=$228;
 HEAP8[($227)]=73;
 $229=$p;
 $230=(($229+1)|0);
 $p=$230;
 HEAP8[($229)]=68;
 $231=$p;
 $232=(($231+1)|0);
 $p=$232;
 HEAP8[($231)]=51;
 $233=$p;
 $234=(($233+1)|0);
 $p=$234;
 HEAP8[($233)]=3;
 $235=$p;
 $236=(($235+1)|0);
 $p=$236;
 HEAP8[($235)]=0;
 $237=$p;
 $238=(($237+1)|0);
 $p=$238;
 HEAP8[($237)]=0;
 $239=$tag_size;
 $240=((($239)-(10))|0);
 $adjusted_tag_size=$240;
 $241=$adjusted_tag_size;
 $242=$241>>>21;
 $243=$242&127;
 $244=(($243)&255);
 $245=$p;
 $246=(($245+1)|0);
 $p=$246;
 HEAP8[($245)]=$244;
 $247=$adjusted_tag_size;
 $248=$247>>>14;
 $249=$248&127;
 $250=(($249)&255);
 $251=$p;
 $252=(($251+1)|0);
 $p=$252;
 HEAP8[($251)]=$250;
 $253=$adjusted_tag_size;
 $254=$253>>>7;
 $255=$254&127;
 $256=(($255)&255);
 $257=$p;
 $258=(($257+1)|0);
 $p=$258;
 HEAP8[($257)]=$256;
 $259=$adjusted_tag_size;
 $260=$259&127;
 $261=(($260)&255);
 $262=$p;
 $263=(($262+1)|0);
 $p=$263;
 HEAP8[($262)]=$261;
 $264=$gfc;
 $265=(($264+85696)|0);
 $tag1=$265;
 $266=$tag1;
 $267=(($266+48)|0);
 $268=((HEAP32[(($267)>>2)])|0);
 $269=($268|0)!=0;
 if ($269) {
  $271=$tag1;
  $272=(($271+48)|0);
  $273=((HEAP32[(($272)>>2)])|0);
  $node2=$273;
  while(1) {
   $275=$node2;
   $276=($275|0)!=0;
   if (!($276)) {
    break;
   }
   $278=$node2;
   $279=(($278+4)|0);
   $280=((HEAP32[(($279)>>2)])|0);
   $281=($280|0)==1129270605;
   do {
    if ($281) {
     label = 62;
    } else {
     $283=$node2;
     $284=(($283+4)|0);
     $285=((HEAP32[(($284)>>2)])|0);
     $286=($285|0)==1431520594;
     if ($286) {
      label = 62;
      break;
     }
     $292=$node2;
     $293=(($292+4)|0);
     $294=((HEAP32[(($293)>>2)])|0);
     $295=((_isFrameIdMatching($294,1459617792))|0);
     $296=($295|0)!=0;
     if ($296) {
      $298=$p;
      $299=$node2;
      $300=((_set_frame_wxxx($298,$299))|0);
      $p=$300;
     } else {
      $302=$p;
      $303=$node2;
      $304=((_set_frame_custom2($302,$303))|0);
      $p=$304;
     }
    }
   } while(0);
   if ((label|0) == 62) {
    label = 0;
    $288=$p;
    $289=$node2;
    $290=((_set_frame_comment($288,$289))|0);
    $p=$290;
   }
   $308=$node2;
   $309=(($308)|0);
   $310=((HEAP32[(($309)>>2)])|0);
   $node2=$310;
  }
 }
 $313=$albumart_mime;
 $314=($313|0)!=0;
 if ($314) {
  $316=$p;
  $317=$albumart_mime;
  $318=$gfc;
  $319=(($318+85696)|0);
  $320=(($319+32)|0);
  $321=((HEAP32[(($320)>>2)])|0);
  $322=$gfc;
  $323=(($322+85696)|0);
  $324=(($323+36)|0);
  $325=((HEAP32[(($324)>>2)])|0);
  $326=((_set_frame_apic($316,$317,$321,$325))|0);
  $p=$326;
 }
 $328=$p;
 $329=$tag_size;
 $330=$p;
 $331=$3;
 $332=$330;
 $333=$331;
 $334=((($332)-($333))|0);
 $335=((($329)-($334))|0);
 _memset((((($328)|0))|0), ((((0)|0))|0), (((($335)|0))|0))|0;
 $336=$tag_size;
 $1=$336;
 $339=$1;
 STACKTOP=sp;return (($339)|0);
}


function _id3tag_write_v2($gfp){
 $gfp=($gfp)|0;
 var $1=0,$2=0,$gfc=0,$tag=0,$tag_size=0,$n=0,$i=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$11=0,$12=0,$13=0,$15=0,$16=0,$17=0,$18=0;
 var $19=0,$20=0,$23=0,$24=0,$25=0,$26=0,$27=0,$28=0,$29=0,$31=0,$34=0,$35=0,$36=0,$38=0,$39=0,$40=0,$41=0,$42=0,$44=0,$45=0;
 var $48=0,$49=0,$52=0,label=0;
 var sp=0;sp=STACKTOP;







 $2=$gfp;
 $3=$2;
 $4=(($3+288)|0);
 $5=((HEAP32[(($4)>>2)])|0);
 $gfc=$5;
 $6=$gfc;
 $7=((_test_tag_spec_flags($6,4))|0);
 $8=($7|0)!=0;
 if ($8) {
  $1=0;
  $52=$1;
  STACKTOP=sp;return (($52)|0);
 }
 $11=$gfc;
 $12=((_test_tag_spec_flags($11,1))|0);
 $13=($12|0)!=0;
 if (!($13)) {
  $1=0;
  $52=$1;
  STACKTOP=sp;return (($52)|0);
 }
 $tag=0;
 $15=$2;
 $16=((_lame_get_id3v2_tag($15,0,0))|0);
 $n=$16;
 $17=$n;
 $18=((_calloc($17,1))|0);
 $tag=$18;
 $19=$tag;
 $20=($19|0)==0;
 if ($20) {
  $1=-1;
  $52=$1;
  STACKTOP=sp;return (($52)|0);
 }
 $23=$2;
 $24=$tag;
 $25=$n;
 $26=((_lame_get_id3v2_tag($23,$24,$25))|0);
 $tag_size=$26;
 $27=$tag_size;
 $28=$n;
 $29=($27>>>0)>($28>>>0);
 if ($29) {
  $31=$tag;
  _free($31);
  $1=-1;
  $52=$1;
  STACKTOP=sp;return (($52)|0);
 }
 $i=0;
 while(1) {
  $34=$i;
  $35=$tag_size;
  $36=($34>>>0)<($35>>>0);
  if (!($36)) {
   break;
  }
  $38=$gfc;
  $39=$i;
  $40=$tag;
  $41=(($40+$39)|0);
  $42=((HEAP8[($41)])|0);
  _add_dummy_byte($38,$42,1);
  $44=$i;
  $45=((($44)+(1))|0);
  $i=$45;
 }
 $48=$tag;
 _free($48);
 $49=$tag_size;
 $1=$49;
 $52=$1;
 STACKTOP=sp;return (($52)|0);
}


function _lame_get_id3v1_tag($gfp,$buffer,$size){
 $gfp=($gfp)|0;
 $buffer=($buffer)|0;
 $size=($size)|0;
 var $1=0,$2=0,$3=0,$4=0,$tag_size=0,$gfc=0,$p=0,$pad=0,$year=0,$5=0,$6=0,$9=0,$10=0,$13=0,$14=0,$15=0,$16=0,$17=0,$20=0,$21=0;
 var $24=0,$25=0,$26=0,$29=0,$30=0,$31=0,$33=0,$34=0,$35=0,$36=0,$37=0,$38=0,$39=0,$40=0,$41=0,$42=0,$43=0,$44=0,$45=0,$46=0;
 var $47=0,$48=0,$49=0,$50=0,$51=0,$52=0,$53=0,$54=0,$55=0,$56=0,$57=0,$58=0,$59=0,$60=0,$61=0,$62=0,$63=0,$64=0,$65=0,$66=0;
 var $67=0,$68=0,$69=0,$70=0,$71=0,$72=0,$73=0,$74=0,$75=0,$76=0,$78=0,$81=0,$82=0,$83=0,$84=0,$85=0,$86=0,$87=0,$88=0,$89=0;
 var $90=0,$91=0,$92=0,$93=0,$94=0,$95=0,$96=0,$97=0,$98=0,$99=0,$100=0,$101=0,$103=0,$104=0,$105=0,$106=0,$107=0,$108=0,$109=0,$110=0;
 var $111=0,$113=0,$114=0,$115=0,$116=0,$117=0,$118=0,$119=0,$122=0,label=0;
 var tempVarArgs=0;
 var sp=0;sp=STACKTOP;STACKTOP=(STACKTOP+8)|0;








 $year=((sp)|0);
 $2=$gfp;
 $3=$buffer;
 $4=$size;
 $tag_size=128;
 $5=$2;
 $6=($5|0)==0;
 if ($6) {
  $1=0;
  $122=$1;
  STACKTOP=sp;return (($122)|0);
 }
 $9=$4;
 $10=($9>>>0)<((128)>>>0);
 if ($10) {
  $1=128;
  $122=$1;
  STACKTOP=sp;return (($122)|0);
 }
 $13=$2;
 $14=(($13+288)|0);
 $15=((HEAP32[(($14)>>2)])|0);
 $gfc=$15;
 $16=$gfc;
 $17=($16|0)==0;
 if ($17) {
  $1=0;
  $122=$1;
  STACKTOP=sp;return (($122)|0);
 }
 $20=$3;
 $21=($20|0)==0;
 if ($21) {
  $1=0;
  $122=$1;
  STACKTOP=sp;return (($122)|0);
 }
 $24=$gfc;
 $25=((_test_tag_spec_flags($24,8))|0);
 $26=($25|0)!=0;
 if ($26) {
  $1=0;
  $122=$1;
  STACKTOP=sp;return (($122)|0);
 }
 $29=$gfc;
 $30=((_test_tag_spec_flags($29,1))|0);
 $31=($30|0)!=0;
 if (!($31)) {
  $1=0;
  $122=$1;
  STACKTOP=sp;return (($122)|0);
 }
 $33=$3;
 $p=$33;
 $34=$gfc;
 $35=((_test_tag_spec_flags($34,16))|0);
 $36=($35|0)!=0;
 $37=($36?32:0);
 $pad=$37;
 $38=$p;
 $39=(($38+1)|0);
 $p=$39;
 HEAP8[($38)]=84;
 $40=$p;
 $41=(($40+1)|0);
 $p=$41;
 HEAP8[($40)]=65;
 $42=$p;
 $43=(($42+1)|0);
 $p=$43;
 HEAP8[($42)]=71;
 $44=$p;
 $45=$gfc;
 $46=(($45+85696)|0);
 $47=(($46+8)|0);
 $48=((HEAP32[(($47)>>2)])|0);
 $49=$pad;
 $50=((_set_text_field($44,$48,30,$49))|0);
 $p=$50;
 $51=$p;
 $52=$gfc;
 $53=(($52+85696)|0);
 $54=(($53+12)|0);
 $55=((HEAP32[(($54)>>2)])|0);
 $56=$pad;
 $57=((_set_text_field($51,$55,30,$56))|0);
 $p=$57;
 $58=$p;
 $59=$gfc;
 $60=(($59+85696)|0);
 $61=(($60+16)|0);
 $62=((HEAP32[(($61)>>2)])|0);
 $63=$pad;
 $64=((_set_text_field($58,$62,30,$63))|0);
 $p=$64;
 $65=(($year)|0);
 $66=$gfc;
 $67=(($66+85696)|0);
 $68=(($67+4)|0);
 $69=((HEAP32[(($68)>>2)])|0);
 $70=((_sprintf((($65)|0),((16464)|0),(((tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,HEAP32[((tempVarArgs)>>2)]=$69,tempVarArgs))|0)))|0); STACKTOP=tempVarArgs;
 $71=$p;
 $72=$gfc;
 $73=(($72+85696)|0);
 $74=(($73+4)|0);
 $75=((HEAP32[(($74)>>2)])|0);
 $76=($75|0)!=0;
 if ($76) {
  $78=(($year)|0);
  $81=$78;
 } else {
  $81=0;
 }

 $82=$pad;
 $83=((_set_text_field($71,$81,4,$82))|0);
 $p=$83;
 $84=$p;
 $85=$gfc;
 $86=(($85+85696)|0);
 $87=(($86+20)|0);
 $88=((HEAP32[(($87)>>2)])|0);
 $89=$gfc;
 $90=(($89+85696)|0);
 $91=(($90+24)|0);
 $92=((HEAP32[(($91)>>2)])|0);
 $93=($92|0)!=0;
 $94=($93?28:30);
 $95=$pad;
 $96=((_set_text_field($84,$88,$94,$95))|0);
 $p=$96;
 $97=$gfc;
 $98=(($97+85696)|0);
 $99=(($98+24)|0);
 $100=((HEAP32[(($99)>>2)])|0);
 $101=($100|0)!=0;
 if ($101) {
  $103=$p;
  $104=(($103+1)|0);
  $p=$104;
  HEAP8[($103)]=0;
  $105=$gfc;
  $106=(($105+85696)|0);
  $107=(($106+24)|0);
  $108=((HEAP32[(($107)>>2)])|0);
  $109=(($108)&255);
  $110=$p;
  $111=(($110+1)|0);
  $p=$111;
  HEAP8[($110)]=$109;
 }
 $113=$gfc;
 $114=(($113+85696)|0);
 $115=(($114+28)|0);
 $116=((HEAP32[(($115)>>2)])|0);
 $117=(($116)&255);
 $118=$p;
 $119=(($118+1)|0);
 $p=$119;
 HEAP8[($118)]=$117;
 $1=128;
 $122=$1;
 STACKTOP=sp;return (($122)|0);
}


function _id3tag_write_v1($gfp){
 $gfp=($gfp)|0;
 var $1=0,$2=0,$gfc=0,$i=0,$n=0,$m=0,$tag=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0,$16=0,$17=0,$18=0;
 var $20=0,$21=0,$22=0,$23=0,$25=0,$26=0,$28=0,$30=0,label=0;
 var sp=0;sp=STACKTOP;STACKTOP=(STACKTOP+128)|0;






 $tag=((sp)|0);
 $2=$gfp;
 $3=$2;
 $4=(($3+288)|0);
 $5=((HEAP32[(($4)>>2)])|0);
 $gfc=$5;
 $m=128;
 $6=$2;
 $7=(($tag)|0);
 $8=$m;
 $9=((_lame_get_id3v1_tag($6,$7,$8))|0);
 $n=$9;
 $10=$n;
 $11=$m;
 $12=($10>>>0)>($11>>>0);
 if ($12) {
  $1=0;
  $30=$1;
  STACKTOP=sp;return (($30)|0);
 }
 $i=0;
 while(1) {
  $16=$i;
  $17=$n;
  $18=($16>>>0)<($17>>>0);
  if (!($18)) {
   break;
  }
  $20=$gfc;
  $21=$i;
  $22=(($tag+$21)|0);
  $23=((HEAP8[($22)])|0);
  _add_dummy_byte($20,$23,1);
  $25=$i;
  $26=((($25)+(1))|0);
  $i=$26;
 }
 $28=$n;
 $1=$28;
 $30=$1;
 STACKTOP=sp;return (($30)|0);
}


function _hasUcs2ByteOrderMarker($bom){
 $bom=($bom)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$7=0,$8=0,$9=0,$13=0,label=0;
 var sp=0;sp=STACKTOP;


 $2=$bom;
 $3=$2;
 $4=($3&65535);
 $5=($4|0)==65534;
 do {
  if ($5) {
   label = 3;
  } else {
   $7=$2;
   $8=($7&65535);
   $9=($8|0)==65279;
   if ($9) {
    label = 3;
    break;
   }
   $1=0;
  }
 } while(0);
 if ((label|0) == 3) {
  $1=1;
 }
 $13=$1;
 STACKTOP=sp;return (($13)|0);
}


function _isFrameIdMatching($id,$mask){
 $id=($id)|0;
 $mask=($mask)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,label=0;
 var sp=0;sp=STACKTOP;


 $1=$id;
 $2=$mask;
 $3=$1;
 $4=$2;
 $5=((_frame_id_matches($3,$4))|0);
 $6=($5|0)==0;
 $7=($6?1:0);
 STACKTOP=sp;return (($7)|0);
}


function _id3v2_add_latin1($gfp,$frame_id,$lang,$desc,$text){
 $gfp=($gfp)|0;
 $frame_id=($frame_id)|0;
 $lang=($lang)|0;
 $desc=($desc)|0;
 $text=($text)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$gfc=0,$node=0,$7=0,$8=0,$10=0,$11=0,$12=0,$15=0,$16=0,$17=0,$19=0,$20=0,$21=0,$22=0;
 var $23=0,$24=0,$25=0,$28=0,$29=0,$31=0,$32=0,$33=0,$34=0,$35=0,$36=0,$38=0,$39=0,$40=0,$41=0,$45=0,$46=0,$47=0,$48=0,$49=0;
 var $52=0,$53=0,$55=0,$56=0,$57=0,$58=0,$61=0,$62=0,$63=0,$65=0,$66=0,$67=0,$68=0,$69=0,$70=0,$71=0,$72=0,$73=0,$74=0,$75=0;
 var $76=0,$77=0,$78=0,$79=0,$80=0,$81=0,$82=0,$83=0,$84=0,$85=0,$86=0,$87=0,$88=0,$89=0,$90=0,$91=0,$92=0,$93=0,$94=0,$95=0;
 var $96=0,$97=0,$98=0,$99=0,$100=0,$103=0,label=0;
 var sp=0;sp=STACKTOP;








 $2=$gfp;
 $3=$frame_id;
 $4=$lang;
 $5=$desc;
 $6=$text;
 $7=$2;
 $8=($7|0)!=0;
 if ($8) {
  $10=$2;
  $11=(($10+288)|0);
  $12=((HEAP32[(($11)>>2)])|0);
  $15=$12;
 } else {
  $15=0;
 }

 $gfc=$15;
 $16=$gfc;
 $17=($16|0)!=0;
 if (!($17)) {
  $1=-255;
  $103=$1;
  STACKTOP=sp;return (($103)|0);
 }
 $19=$gfc;
 $20=(($19+85696)|0);
 $21=$3;
 $22=((_findNode($20,$21,0))|0);
 $node=$22;
 $23=$3;
 $24=((_isMultiFrame($23))|0);
 $25=($24|0)!=0;
 if ($25) {
  while(1) {
   $28=$node;
   $29=($28|0)!=0;
   if (!($29)) {
    break;
   }
   $31=$node;
   $32=(($31+8)|0);
   $33=(($32)|0);
   $34=$4;
   $35=((_isSameLang($33,$34))|0);
   $36=($35|0)!=0;
   if ($36) {
    $38=$node;
    $39=$5;
    $40=((_isSameDescriptor($38,$39))|0);
    $41=($40|0)!=0;
    if ($41) {
     label = 10;
     break;
    }
   }
   $45=$gfc;
   $46=(($45+85696)|0);
   $47=$3;
   $48=$node;
   $49=((_findNode($46,$47,$48))|0);
   $node=$49;
  }
  if ((label|0) == 10) {
  }
 }
 $52=$node;
 $53=($52|0)==0;
 do {
  if ($53) {
   $55=((_calloc(1,36))|0);
   $56=$55;
   $node=$56;
   $57=$node;
   $58=($57|0)==0;
   if (!($58)) {
    $61=$gfc;
    $62=(($61+85696)|0);
    $63=$node;
    _appendNode($62,$63);
    break;
   }
   $1=-254;
   $103=$1;
   STACKTOP=sp;return (($103)|0);
  }
 } while(0);
 $65=$3;
 $66=$node;
 $67=(($66+4)|0);
 HEAP32[(($67)>>2)]=$65;
 $68=$node;
 $69=(($68+8)|0);
 $70=(($69)|0);
 $71=$4;
 _setLang($70,$71);
 $72=$node;
 $73=(($72+12)|0);
 $74=(($73)|0);
 $75=$74;
 $76=$5;
 $77=((_local_strdup($75,$76))|0);
 $78=$node;
 $79=(($78+12)|0);
 $80=(($79+4)|0);
 HEAP32[(($80)>>2)]=$77;
 $81=$node;
 $82=(($81+12)|0);
 $83=(($82+8)|0);
 HEAP32[(($83)>>2)]=0;
 $84=$node;
 $85=(($84+24)|0);
 $86=(($85)|0);
 $87=$86;
 $88=$6;
 $89=((_local_strdup($87,$88))|0);
 $90=$node;
 $91=(($90+24)|0);
 $92=(($91+4)|0);
 HEAP32[(($92)>>2)]=$89;
 $93=$node;
 $94=(($93+24)|0);
 $95=(($94+8)|0);
 HEAP32[(($95)>>2)]=0;
 $96=$gfc;
 $97=(($96+85696)|0);
 $98=(($97)|0);
 $99=((HEAP32[(($98)>>2)])|0);
 $100=$99|3;
 HEAP32[(($98)>>2)]=$100;
 $1=0;
 $103=$1;
 STACKTOP=sp;return (($103)|0);
}


function _copyV1ToV2($gfp,$frame_id,$s){
 $gfp=($gfp)|0;
 $frame_id=($frame_id)|0;
 $s=($s)|0;
 var $1=0,$2=0,$3=0,$gfc=0,$flags=0,$4=0,$5=0,$7=0,$8=0,$9=0,$12=0,$13=0,$14=0,$16=0,$17=0,$18=0,$19=0,$20=0,$21=0,$22=0;
 var $23=0,$24=0,$25=0,$26=0,$27=0,label=0;
 var sp=0;sp=STACKTOP;





 $1=$gfp;
 $2=$frame_id;
 $3=$s;
 $4=$1;
 $5=($4|0)!=0;
 if ($5) {
  $7=$1;
  $8=(($7+288)|0);
  $9=((HEAP32[(($8)>>2)])|0);
  $12=$9;
 } else {
  $12=0;
 }

 $gfc=$12;
 $13=$gfc;
 $14=($13|0)!=0;
 if (!($14)) {
  STACKTOP=sp;return;
 }
 $16=$gfc;
 $17=(($16+85696)|0);
 $18=(($17)|0);
 $19=((HEAP32[(($18)>>2)])|0);
 $flags=$19;
 $20=$1;
 $21=$2;
 $22=$3;
 $23=((_id3v2_add_latin1($20,$21,17056,0,$22))|0);
 $24=$flags;
 $25=$gfc;
 $26=(($25+85696)|0);
 $27=(($26)|0);
 HEAP32[(($27)>>2)]=$24;
 STACKTOP=sp;return;
}


function _local_strdup($dst,$src){
 $dst=($dst)|0;
 $src=($src)|0;
 var $1=0,$2=0,$3=0,$n=0,$4=0,$5=0,$8=0,$9=0,$10=0,$11=0,$12=0,$15=0,$16=0,$17=0,$18=0,$19=0,$20=0,$23=0,$24=0,$26=0;
 var $27=0,$29=0,$30=0,$31=0,$32=0,$33=0,$34=0,$35=0,$37=0,$38=0,$39=0,$40=0,$41=0,$42=0,$43=0,$44=0,$45=0,$46=0,$51=0,label=0;
 var sp=0;sp=STACKTOP;




 $2=$dst;
 $3=$src;
 $4=$2;
 $5=($4|0)==0;
 if ($5) {
  $1=0;
  $51=$1;
  STACKTOP=sp;return (($51)|0);
 }
 $8=$2;
 $9=((HEAP32[(($8)>>2)])|0);
 _free($9);
 $10=$2;
 HEAP32[(($10)>>2)]=0;
 $11=$3;
 $12=($11|0)!=0;
 if ($12) {
  $n=0;
  while(1) {
   $15=$n;
   $16=$3;
   $17=(($16+$15)|0);
   $18=((HEAP8[($17)])|0);
   $19=(($18<<24)>>24);
   $20=($19|0)!=0;
   if (!($20)) {
    break;
   }
   $23=$n;
   $24=((($23)+(1))|0);
   $n=$24;
  }
  $26=$n;
  $27=($26>>>0)>((0)>>>0);
  do {
   if ($27) {
    $29=$n;
    $30=((($29)+(1))|0);
    $31=((_calloc($30,1))|0);
    $32=$2;
    HEAP32[(($32)>>2)]=$31;
    $33=$2;
    $34=((HEAP32[(($33)>>2)])|0);
    $35=($34|0)!=0;
    if (!($35)) {
     break;
    }
    $37=$2;
    $38=((HEAP32[(($37)>>2)])|0);
    $39=$3;
    $40=$n;
    $41=$40;
    (_memcpy((($38)|0), (($39)|0), $41)|0);
    $42=$n;
    $43=$2;
    $44=((HEAP32[(($43)>>2)])|0);
    $45=(($44+$42)|0);
    HEAP8[($45)]=0;
    $46=$n;
    $1=$46;
    $51=$1;
    STACKTOP=sp;return (($51)|0);
   }
  } while(0);
 }
 $1=0;
 $51=$1;
 STACKTOP=sp;return (($51)|0);
}


function _test_tag_spec_flags($gfc,$tst){
 $gfc=($gfc)|0;
 $tst=($tst)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,label=0;
 var sp=0;sp=STACKTOP;


 $1=$gfc;
 $2=$tst;
 $3=$1;
 $4=(($3+85696)|0);
 $5=(($4)|0);
 $6=((HEAP32[(($5)>>2)])|0);
 $7=$2;
 $8=$6&$7;
 $9=($8|0)!=0;
 $10=($9?1:0);
 STACKTOP=sp;return (($10)|0);
}


function _id3v2AddAudioDuration($gfp,$ms){
 $gfp=($gfp)|0;
 $ms=+($ms);
 var $1=0,$2=.0,$gfc=0,$cfg=0,$buffer=0,$max_ulong=.0,$playlength_ms=0,$3=0,$4=0,$6=0,$7=0,$8=0,$11=0,$12=0,$13=0,$14=.0,$15=.0,$16=0,$17=0,$18=0;
 var $19=.0,$20=.0,$21=.0,$22=.0,$23=0,$26=.0,$27=0,$30=.0,$31=0,$34=0,$35=0,$36=0,$37=0,$38=0,label=0;
 var tempVarArgs=0;
 var sp=0;sp=STACKTOP;STACKTOP=(STACKTOP+1024)|0;




 $buffer=((sp)|0);


 $1=$gfp;
 $2=$ms;
 $3=$1;
 $4=($3|0)!=0;
 if ($4) {
  $6=$1;
  $7=(($6+288)|0);
  $8=((HEAP32[(($7)>>2)])|0);
  $11=$8;
 } else {
  $11=0;
 }

 $gfc=$11;
 $12=$gfc;
 $13=(($12+16)|0);
 $cfg=$13;
 $max_ulong=4294967295.0;
 $14=$2;
 $15=($14)*((1000.0));
 $2=$15;
 $16=$cfg;
 $17=(($16+44)|0);
 $18=((HEAP32[(($17)>>2)])|0);
 $19=(+((($18|0))|0));
 $20=$2;
 $21=($20)/($19);
 $2=$21;
 $22=$2;
 $23=$22>(4294967295.0);
 if ($23) {
  $playlength_ms=-1;
 } else {
  $26=$2;
  $27=$26<(0.0);
  if ($27) {
   $playlength_ms=0;
  } else {
   $30=$2;
   $31=(~~($30));
   $playlength_ms=$31;
  }
 }
 $34=(($buffer)|0);
 $35=$playlength_ms;
 $36=((_sprintf((($34)|0),((16400)|0),(((tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,HEAP32[((tempVarArgs)>>2)]=$35,tempVarArgs))|0)))|0); STACKTOP=tempVarArgs;
 $37=$1;
 $38=(($buffer)|0);
 _copyV1ToV2($37,1414284622,$38);
 STACKTOP=sp;return;
}


function _sizeOfCommentNode($node){
 $node=($node)|0;
 var $1=0,$n=0,$2=0,$3=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0,$15=0,$16=0,$17=0,$18=0,$19=0,$20=0,$21=0,$23=0;
 var $24=0,$25=0,$26=0,$27=0,$28=0,$29=0,$30=0,$32=0,$33=0,$34=0,$35=0,$38=0,$39=0,$40=0,$41=0,$42=0,$43=0,$45=0,$46=0,$47=0;
 var $48=0,$49=0,$50=0,$51=0,$54=0,label=0;
 var sp=0;sp=STACKTOP;


 $1=$node;
 $n=0;
 $2=$1;
 $3=($2|0)!=0;
 if (!($3)) {
  $54=$n;
  STACKTOP=sp;return (($54)|0);
 }
 $n=10;
 $5=$n;
 $6=((($5)+(1))|0);
 $n=$6;
 $7=$n;
 $8=((($7)+(3))|0);
 $n=$8;
 $9=$1;
 $10=(($9+12)|0);
 $11=(($10+8)|0);
 $12=((HEAP32[(($11)>>2)])|0);
 if (((($12|0))|0)==((1)|0)) {
  $23=$1;
  $24=(($23+12)|0);
  $25=(($24+4)|0);
  $26=((HEAP32[(($25)>>2)])|0);
  $27=($26<<1);
  $28=((($27)+(2))|0);
  $29=$n;
  $30=((($29)+($28))|0);
  $n=$30;
 } else if (((($12|0))|0)==((0)|0)) {
  label = 4;
 } else {
  label = 4;
 }
 if ((label|0) == 4) {
  $15=$1;
  $16=(($15+12)|0);
  $17=(($16+4)|0);
  $18=((HEAP32[(($17)>>2)])|0);
  $19=((($18)+(1))|0);
  $20=$n;
  $21=((($20)+($19))|0);
  $n=$21;
 }
 $32=$1;
 $33=(($32+24)|0);
 $34=(($33+8)|0);
 $35=((HEAP32[(($34)>>2)])|0);
 if (((($35|0))|0)==((0)|0)) {
  label = 8;
 } else if (((($35|0))|0)==((1)|0)) {
  $45=$1;
  $46=(($45+24)|0);
  $47=(($46+4)|0);
  $48=((HEAP32[(($47)>>2)])|0);
  $49=($48<<1);
  $50=$n;
  $51=((($50)+($49))|0);
  $n=$51;
 } else {
  label = 8;
 }
 if ((label|0) == 8) {
  $38=$1;
  $39=(($38+24)|0);
  $40=(($39+4)|0);
  $41=((HEAP32[(($40)>>2)])|0);
  $42=$n;
  $43=((($42)+($41))|0);
  $n=$43;
 }
 $54=$n;
 STACKTOP=sp;return (($54)|0);
}


function _sizeOfWxxxNode($node){
 $node=($node)|0;
 var $1=0,$n=0,$2=0,$3=0,$5=0,$6=0,$7=0,$8=0,$9=0,$11=0,$12=0,$13=0,$14=0,$15=0,$16=0,$19=0,$20=0,$21=0,$22=0,$23=0;
 var $24=0,$25=0,$27=0,$28=0,$29=0,$30=0,$31=0,$32=0,$33=0,$34=0,$37=0,$38=0,$39=0,$40=0,$41=0,$43=0,$44=0,$45=0,$46=0,$49=0;
 var $50=0,$51=0,$52=0,$53=0,$54=0,$56=0,$57=0,$58=0,$59=0,$60=0,$61=0,$62=0,$66=0,label=0;
 var sp=0;sp=STACKTOP;


 $1=$node;
 $n=0;
 $2=$1;
 $3=($2|0)!=0;
 if (!($3)) {
  $66=$n;
  STACKTOP=sp;return (($66)|0);
 }
 $n=10;
 $5=$1;
 $6=(($5+12)|0);
 $7=(($6+4)|0);
 $8=((HEAP32[(($7)>>2)])|0);
 $9=($8>>>0)>((0)>>>0);
 if ($9) {
  $11=$n;
  $12=((($11)+(1))|0);
  $n=$12;
  $13=$1;
  $14=(($13+12)|0);
  $15=(($14+8)|0);
  $16=((HEAP32[(($15)>>2)])|0);
  if (((($16|0))|0)==((0)|0)) {
   label = 5;
  } else if (((($16|0))|0)==((1)|0)) {
   $27=$1;
   $28=(($27+12)|0);
   $29=(($28+4)|0);
   $30=((HEAP32[(($29)>>2)])|0);
   $31=($30<<1);
   $32=((($31)+(2))|0);
   $33=$n;
   $34=((($33)+($32))|0);
   $n=$34;
  } else {
   label = 5;
  }
  if ((label|0) == 5) {
   $19=$1;
   $20=(($19+12)|0);
   $21=(($20+4)|0);
   $22=((HEAP32[(($21)>>2)])|0);
   $23=((($22)+(1))|0);
   $24=$n;
   $25=((($24)+($23))|0);
   $n=$25;
  }
 }
 $37=$1;
 $38=(($37+24)|0);
 $39=(($38+4)|0);
 $40=((HEAP32[(($39)>>2)])|0);
 $41=($40>>>0)>((0)>>>0);
 if ($41) {
  $43=$1;
  $44=(($43+24)|0);
  $45=(($44+8)|0);
  $46=((HEAP32[(($45)>>2)])|0);
  if (((($46|0))|0)==((0)|0)) {
   label = 11;
  } else if (((($46|0))|0)==((1)|0)) {
   $56=$1;
   $57=(($56+24)|0);
   $58=(($57+4)|0);
   $59=((HEAP32[(($58)>>2)])|0);
   $60=((($59)-(1))|0);
   $61=$n;
   $62=((($61)+($60))|0);
   $n=$62;
  } else {
   label = 11;
  }
  if ((label|0) == 11) {
   $49=$1;
   $50=(($49+24)|0);
   $51=(($50+4)|0);
   $52=((HEAP32[(($51)>>2)])|0);
   $53=$n;
   $54=((($53)+($52))|0);
   $n=$54;
  }
 }
 $66=$n;
 STACKTOP=sp;return (($66)|0);
}


function _sizeOfNode($node){
 $node=($node)|0;
 var $1=0,$n=0,$2=0,$3=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$13=0,$14=0,$15=0,$16=0,$17=0,$19=0,$20=0,$21=0,$22=0,$23=0;
 var $24=0,$25=0,$27=0,$28=0,$29=0,$30=0,$31=0,$32=0,$34=0,$35=0,$36=0,$37=0,$38=0,$40=0,$41=0,$42=0,$43=0,$44=0,$45=0,$46=0;
 var $47=0,$49=0,$50=0,$51=0,$52=0,$53=0,$54=0,$55=0,$58=0,label=0;
 var sp=0;sp=STACKTOP;


 $1=$node;
 $n=0;
 $2=$1;
 $3=($2|0)!=0;
 if (!($3)) {
  $58=$n;
  STACKTOP=sp;return (($58)|0);
 }
 $n=10;
 $5=$n;
 $6=((($5)+(1))|0);
 $n=$6;
 $7=$1;
 $8=(($7+24)|0);
 $9=(($8+8)|0);
 $10=((HEAP32[(($9)>>2)])|0);
 if (((($10|0))|0)==((0)|0)) {
  label = 4;
 } else if (((($10|0))|0)==((1)|0)) {
  $34=$1;
  $35=(($34+12)|0);
  $36=(($35+4)|0);
  $37=((HEAP32[(($36)>>2)])|0);
  $38=($37>>>0)>((0)>>>0);
  if ($38) {
   $40=$1;
   $41=(($40+12)|0);
   $42=(($41+4)|0);
   $43=((HEAP32[(($42)>>2)])|0);
   $44=((($43)+(1))|0);
   $45=($44<<1);
   $46=$n;
   $47=((($46)+($45))|0);
   $n=$47;
  }
  $49=$1;
  $50=(($49+24)|0);
  $51=(($50+4)|0);
  $52=((HEAP32[(($51)>>2)])|0);
  $53=($52<<1);
  $54=$n;
  $55=((($54)+($53))|0);
  $n=$55;
 } else {
  label = 4;
 }
 if ((label|0) == 4) {
  $13=$1;
  $14=(($13+12)|0);
  $15=(($14+4)|0);
  $16=((HEAP32[(($15)>>2)])|0);
  $17=($16>>>0)>((0)>>>0);
  if ($17) {
   $19=$1;
   $20=(($19+12)|0);
   $21=(($20+4)|0);
   $22=((HEAP32[(($21)>>2)])|0);
   $23=((($22)+(1))|0);
   $24=$n;
   $25=((($24)+($23))|0);
   $n=$25;
  }
  $27=$1;
  $28=(($27+24)|0);
  $29=(($28+4)|0);
  $30=((HEAP32[(($29)>>2)])|0);
  $31=$n;
  $32=((($31)+($30))|0);
  $n=$32;
 }
 $58=$n;
 STACKTOP=sp;return (($58)|0);
}


function _set_frame_comment($frame,$node){
 $frame=($frame)|0;
 $node=($node)|0;
 var $1=0,$2=0,$n=0,$3=0,$4=0,$5=0,$6=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$14=0,$15=0,$16=0,$17=0,$18=0,$19=0,$20=0;
 var $21=0,$22=0,$23=0,$24=0,$25=0,$26=0,$27=0,$28=0,$29=0,$30=0,$31=0,$32=0,$33=0,$34=0,$35=0,$36=0,$37=0,$38=0,$39=0,$40=0;
 var $41=0,$42=0,$43=0,$44=0,$45=0,$46=0,$47=0,$48=0,$49=0,$50=0,$51=0,$52=0,$54=0,$55=0,$56=0,$57=0,$58=0,$59=0,$60=0,$61=0;
 var $62=0,$63=0,$64=0,$65=0,$66=0,$68=0,$69=0,$70=0,$71=0,$72=0,$73=0,$74=0,$75=0,$76=0,$77=0,$78=0,$79=0,$80=0,$81=0,$82=0;
 var $84=0,$85=0,$86=0,$87=0,$88=0,$90=0,$91=0,$92=0,$93=0,$94=0,$95=0,$96=0,$97=0,$98=0,$99=0,$100=0,$102=0,$103=0,$104=0,$105=0;
 var $106=0,$107=0,$108=0,$109=0,$110=0,$111=0,$112=0,$115=0,label=0;
 var sp=0;sp=STACKTOP;



 $1=$frame;
 $2=$node;
 $3=$2;
 $4=((_sizeOfCommentNode($3))|0);
 $n=$4;
 $5=$n;
 $6=($5>>>0)>((10)>>>0);
 if (!($6)) {
  $115=$1;
  STACKTOP=sp;return (($115)|0);
 }
 $8=$1;
 $9=$2;
 $10=(($9+4)|0);
 $11=((HEAP32[(($10)>>2)])|0);
 $12=((_set_4_byte_value($8,$11))|0);
 $1=$12;
 $13=$1;
 $14=$n;
 $15=((($14)-(10))|0);
 $16=((_set_4_byte_value($13,$15))|0);
 $1=$16;
 $17=$1;
 $18=(($17+1)|0);
 $1=$18;
 HEAP8[($17)]=0;
 $19=$1;
 $20=(($19+1)|0);
 $1=$20;
 HEAP8[($19)]=0;
 $21=$2;
 $22=(($21+24)|0);
 $23=(($22+8)|0);
 $24=((HEAP32[(($23)>>2)])|0);
 $25=($24|0)==1;
 $26=($25?1:0);
 $27=(($26)&255);
 $28=$1;
 $29=(($28+1)|0);
 $1=$29;
 HEAP8[($28)]=$27;
 $30=$2;
 $31=(($30+8)|0);
 $32=(($31)|0);
 $33=((HEAP8[($32)])|0);
 $34=$1;
 $35=(($34+1)|0);
 $1=$35;
 HEAP8[($34)]=$33;
 $36=$2;
 $37=(($36+8)|0);
 $38=(($37+1)|0);
 $39=((HEAP8[($38)])|0);
 $40=$1;
 $41=(($40+1)|0);
 $1=$41;
 HEAP8[($40)]=$39;
 $42=$2;
 $43=(($42+8)|0);
 $44=(($43+2)|0);
 $45=((HEAP8[($44)])|0);
 $46=$1;
 $47=(($46+1)|0);
 $1=$47;
 HEAP8[($46)]=$45;
 $48=$2;
 $49=(($48+12)|0);
 $50=(($49+8)|0);
 $51=((HEAP32[(($50)>>2)])|0);
 $52=($51|0)!=1;
 if ($52) {
  $54=$1;
  $55=$2;
  $56=(($55+12)|0);
  $57=(($56)|0);
  $58=$57;
  $59=((HEAP32[(($58)>>2)])|0);
  $60=$2;
  $61=(($60+12)|0);
  $62=(($61+4)|0);
  $63=((HEAP32[(($62)>>2)])|0);
  $64=((_writeChars($54,$59,$63))|0);
  $1=$64;
  $65=$1;
  $66=(($65+1)|0);
  $1=$66;
  HEAP8[($65)]=0;
 } else {
  $68=$1;
  $69=$2;
  $70=(($69+12)|0);
  $71=(($70)|0);
  $72=$71;
  $73=((HEAP32[(($72)>>2)])|0);
  $74=$2;
  $75=(($74+12)|0);
  $76=(($75+4)|0);
  $77=((HEAP32[(($76)>>2)])|0);
  $78=((_writeUcs2s($68,$73,$77))|0);
  $1=$78;
  $79=$1;
  $80=(($79+1)|0);
  $1=$80;
  HEAP8[($79)]=0;
  $81=$1;
  $82=(($81+1)|0);
  $1=$82;
  HEAP8[($81)]=0;
 }
 $84=$2;
 $85=(($84+24)|0);
 $86=(($85+8)|0);
 $87=((HEAP32[(($86)>>2)])|0);
 $88=($87|0)!=1;
 if ($88) {
  $90=$1;
  $91=$2;
  $92=(($91+24)|0);
  $93=(($92)|0);
  $94=$93;
  $95=((HEAP32[(($94)>>2)])|0);
  $96=$2;
  $97=(($96+24)|0);
  $98=(($97+4)|0);
  $99=((HEAP32[(($98)>>2)])|0);
  $100=((_writeChars($90,$95,$99))|0);
  $1=$100;
 } else {
  $102=$1;
  $103=$2;
  $104=(($103+24)|0);
  $105=(($104)|0);
  $106=$105;
  $107=((HEAP32[(($106)>>2)])|0);
  $108=$2;
  $109=(($108+24)|0);
  $110=(($109+4)|0);
  $111=((HEAP32[(($110)>>2)])|0);
  $112=((_writeUcs2s($102,$107,$111))|0);
  $1=$112;
 }
 $115=$1;
 STACKTOP=sp;return (($115)|0);
}


function _set_frame_wxxx($frame,$node){
 $frame=($frame)|0;
 $node=($node)|0;
 var $1=0,$2=0,$n=0,$3=0,$4=0,$5=0,$6=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$14=0,$15=0,$16=0,$17=0,$18=0,$19=0,$20=0;
 var $21=0,$22=0,$23=0,$24=0,$25=0,$27=0,$28=0,$29=0,$30=0,$31=0,$32=0,$33=0,$34=0,$35=0,$36=0,$37=0,$38=0,$39=0,$40=0,$42=0;
 var $43=0,$44=0,$45=0,$46=0,$47=0,$48=0,$49=0,$50=0,$51=0,$52=0,$53=0,$54=0,$56=0,$57=0,$58=0,$59=0,$60=0,$61=0,$62=0,$63=0;
 var $64=0,$65=0,$66=0,$67=0,$68=0,$69=0,$70=0,$73=0,$74=0,$75=0,$76=0,$77=0,$79=0,$80=0,$81=0,$82=0,$83=0,$84=0,$85=0,$86=0;
 var $87=0,$88=0,$89=0,$91=0,$92=0,$93=0,$94=0,$95=0,$96=0,$97=0,$98=0,$99=0,$100=0,$101=0,$104=0,label=0;
 var sp=0;sp=STACKTOP;



 $1=$frame;
 $2=$node;
 $3=$2;
 $4=((_sizeOfWxxxNode($3))|0);
 $n=$4;
 $5=$n;
 $6=($5>>>0)>((10)>>>0);
 if (!($6)) {
  $104=$1;
  STACKTOP=sp;return (($104)|0);
 }
 $8=$1;
 $9=$2;
 $10=(($9+4)|0);
 $11=((HEAP32[(($10)>>2)])|0);
 $12=((_set_4_byte_value($8,$11))|0);
 $1=$12;
 $13=$1;
 $14=$n;
 $15=((($14)-(10))|0);
 $16=((_set_4_byte_value($13,$15))|0);
 $1=$16;
 $17=$1;
 $18=(($17+1)|0);
 $1=$18;
 HEAP8[($17)]=0;
 $19=$1;
 $20=(($19+1)|0);
 $1=$20;
 HEAP8[($19)]=0;
 $21=$2;
 $22=(($21+12)|0);
 $23=(($22+4)|0);
 $24=((HEAP32[(($23)>>2)])|0);
 $25=($24>>>0)>((0)>>>0);
 if ($25) {
  $27=$2;
  $28=(($27+12)|0);
  $29=(($28+8)|0);
  $30=((HEAP32[(($29)>>2)])|0);
  $31=($30|0)==1;
  $32=($31?1:0);
  $33=(($32)&255);
  $34=$1;
  $35=(($34+1)|0);
  $1=$35;
  HEAP8[($34)]=$33;
  $36=$2;
  $37=(($36+12)|0);
  $38=(($37+8)|0);
  $39=((HEAP32[(($38)>>2)])|0);
  $40=($39|0)!=1;
  if ($40) {
   $42=$1;
   $43=$2;
   $44=(($43+12)|0);
   $45=(($44)|0);
   $46=$45;
   $47=((HEAP32[(($46)>>2)])|0);
   $48=$2;
   $49=(($48+12)|0);
   $50=(($49+4)|0);
   $51=((HEAP32[(($50)>>2)])|0);
   $52=((_writeChars($42,$47,$51))|0);
   $1=$52;
   $53=$1;
   $54=(($53+1)|0);
   $1=$54;
   HEAP8[($53)]=0;
  } else {
   $56=$1;
   $57=$2;
   $58=(($57+12)|0);
   $59=(($58)|0);
   $60=$59;
   $61=((HEAP32[(($60)>>2)])|0);
   $62=$2;
   $63=(($62+12)|0);
   $64=(($63+4)|0);
   $65=((HEAP32[(($64)>>2)])|0);
   $66=((_writeUcs2s($56,$61,$65))|0);
   $1=$66;
   $67=$1;
   $68=(($67+1)|0);
   $1=$68;
   HEAP8[($67)]=0;
   $69=$1;
   $70=(($69+1)|0);
   $1=$70;
   HEAP8[($69)]=0;
  }
 }
 $73=$2;
 $74=(($73+24)|0);
 $75=(($74+8)|0);
 $76=((HEAP32[(($75)>>2)])|0);
 $77=($76|0)!=1;
 if ($77) {
  $79=$1;
  $80=$2;
  $81=(($80+24)|0);
  $82=(($81)|0);
  $83=$82;
  $84=((HEAP32[(($83)>>2)])|0);
  $85=$2;
  $86=(($85+24)|0);
  $87=(($86+4)|0);
  $88=((HEAP32[(($87)>>2)])|0);
  $89=((_writeChars($79,$84,$88))|0);
  $1=$89;
 } else {
  $91=$1;
  $92=$2;
  $93=(($92+24)|0);
  $94=(($93)|0);
  $95=$94;
  $96=((HEAP32[(($95)>>2)])|0);
  $97=$2;
  $98=(($97+24)|0);
  $99=(($98+4)|0);
  $100=((HEAP32[(($99)>>2)])|0);
  $101=((_writeLoBytes($91,$96,$100))|0);
  $1=$101;
 }
 $104=$1;
 STACKTOP=sp;return (($104)|0);
}


function _set_frame_custom2($frame,$node){
 $frame=($frame)|0;
 $node=($node)|0;
 var $1=0,$2=0,$n=0,$3=0,$4=0,$5=0,$6=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$14=0,$15=0,$16=0,$17=0,$18=0,$19=0,$20=0;
 var $21=0,$22=0,$23=0,$24=0,$25=0,$26=0,$27=0,$28=0,$29=0,$30=0,$31=0,$32=0,$33=0,$34=0,$36=0,$37=0,$38=0,$39=0,$40=0,$42=0;
 var $43=0,$44=0,$45=0,$46=0,$47=0,$48=0,$49=0,$50=0,$51=0,$52=0,$53=0,$54=0,$56=0,$57=0,$58=0,$59=0,$60=0,$61=0,$62=0,$63=0;
 var $64=0,$65=0,$66=0,$67=0,$68=0,$69=0,$70=0,$73=0,$74=0,$75=0,$76=0,$77=0,$79=0,$80=0,$81=0,$82=0,$83=0,$84=0,$85=0,$86=0;
 var $87=0,$88=0,$89=0,$91=0,$92=0,$93=0,$94=0,$95=0,$96=0,$97=0,$98=0,$99=0,$100=0,$101=0,$104=0,label=0;
 var sp=0;sp=STACKTOP;



 $1=$frame;
 $2=$node;
 $3=$2;
 $4=((_sizeOfNode($3))|0);
 $n=$4;
 $5=$n;
 $6=($5>>>0)>((10)>>>0);
 if (!($6)) {
  $104=$1;
  STACKTOP=sp;return (($104)|0);
 }
 $8=$1;
 $9=$2;
 $10=(($9+4)|0);
 $11=((HEAP32[(($10)>>2)])|0);
 $12=((_set_4_byte_value($8,$11))|0);
 $1=$12;
 $13=$1;
 $14=$n;
 $15=((($14)-(10))|0);
 $16=((_set_4_byte_value($13,$15))|0);
 $1=$16;
 $17=$1;
 $18=(($17+1)|0);
 $1=$18;
 HEAP8[($17)]=0;
 $19=$1;
 $20=(($19+1)|0);
 $1=$20;
 HEAP8[($19)]=0;
 $21=$2;
 $22=(($21+24)|0);
 $23=(($22+8)|0);
 $24=((HEAP32[(($23)>>2)])|0);
 $25=($24|0)==1;
 $26=($25?1:0);
 $27=(($26)&255);
 $28=$1;
 $29=(($28+1)|0);
 $1=$29;
 HEAP8[($28)]=$27;
 $30=$2;
 $31=(($30+12)|0);
 $32=(($31+4)|0);
 $33=((HEAP32[(($32)>>2)])|0);
 $34=($33>>>0)>((0)>>>0);
 if ($34) {
  $36=$2;
  $37=(($36+12)|0);
  $38=(($37+8)|0);
  $39=((HEAP32[(($38)>>2)])|0);
  $40=($39|0)!=1;
  if ($40) {
   $42=$1;
   $43=$2;
   $44=(($43+12)|0);
   $45=(($44)|0);
   $46=$45;
   $47=((HEAP32[(($46)>>2)])|0);
   $48=$2;
   $49=(($48+12)|0);
   $50=(($49+4)|0);
   $51=((HEAP32[(($50)>>2)])|0);
   $52=((_writeChars($42,$47,$51))|0);
   $1=$52;
   $53=$1;
   $54=(($53+1)|0);
   $1=$54;
   HEAP8[($53)]=0;
  } else {
   $56=$1;
   $57=$2;
   $58=(($57+12)|0);
   $59=(($58)|0);
   $60=$59;
   $61=((HEAP32[(($60)>>2)])|0);
   $62=$2;
   $63=(($62+12)|0);
   $64=(($63+4)|0);
   $65=((HEAP32[(($64)>>2)])|0);
   $66=((_writeUcs2s($56,$61,$65))|0);
   $1=$66;
   $67=$1;
   $68=(($67+1)|0);
   $1=$68;
   HEAP8[($67)]=0;
   $69=$1;
   $70=(($69+1)|0);
   $1=$70;
   HEAP8[($69)]=0;
  }
 }
 $73=$2;
 $74=(($73+24)|0);
 $75=(($74+8)|0);
 $76=((HEAP32[(($75)>>2)])|0);
 $77=($76|0)!=1;
 if ($77) {
  $79=$1;
  $80=$2;
  $81=(($80+24)|0);
  $82=(($81)|0);
  $83=$82;
  $84=((HEAP32[(($83)>>2)])|0);
  $85=$2;
  $86=(($85+24)|0);
  $87=(($86+4)|0);
  $88=((HEAP32[(($87)>>2)])|0);
  $89=((_writeChars($79,$84,$88))|0);
  $1=$89;
 } else {
  $91=$1;
  $92=$2;
  $93=(($92+24)|0);
  $94=(($93)|0);
  $95=$94;
  $96=((HEAP32[(($95)>>2)])|0);
  $97=$2;
  $98=(($97+24)|0);
  $99=(($98+4)|0);
  $100=((HEAP32[(($99)>>2)])|0);
  $101=((_writeUcs2s($91,$96,$100))|0);
  $1=$101;
 }
 $104=$1;
 STACKTOP=sp;return (($104)|0);
}


function _set_frame_apic($frame,$mimetype,$data,$size){
 $frame=($frame)|0;
 $mimetype=($mimetype)|0;
 $data=($data)|0;
 $size=($size)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$8=0,$9=0,$11=0,$12=0,$14=0,$15=0,$16=0,$17=0,$18=0,$19=0,$20=0,$21=0,$22=0,$23=0;
 var $24=0,$25=0,$26=0,$27=0,$28=0,$30=0,$31=0,$32=0,$34=0,$35=0,$36=0,$37=0,$38=0,$40=0,$41=0,$42=0,$43=0,$44=0,$45=0,$47=0;
 var $48=0,$49=0,$51=0,$52=0,$53=0,$54=0,$55=0,$58=0,label=0;
 var sp=0;sp=STACKTOP;




 $1=$frame;
 $2=$mimetype;
 $3=$data;
 $4=$size;
 $5=$2;
 $6=($5|0)!=0;
 if (!($6)) {
  $58=$1;
  STACKTOP=sp;return (($58)|0);
 }
 $8=$3;
 $9=($8|0)!=0;
 if (!($9)) {
  $58=$1;
  STACKTOP=sp;return (($58)|0);
 }
 $11=$4;
 $12=($11|0)!=0;
 if (!($12)) {
  $58=$1;
  STACKTOP=sp;return (($58)|0);
 }
 $14=$1;
 $15=((_set_4_byte_value($14,1095780675))|0);
 $1=$15;
 $16=$1;
 $17=$2;
 $18=((_strlen((($17)|0)))|0);
 $19=((($18)+(4))|0);
 $20=$4;
 $21=((($19)+($20))|0);
 $22=((_set_4_byte_value($16,$21))|0);
 $1=$22;
 $23=$1;
 $24=(($23+1)|0);
 $1=$24;
 HEAP8[($23)]=0;
 $25=$1;
 $26=(($25+1)|0);
 $1=$26;
 HEAP8[($25)]=0;
 $27=$1;
 $28=(($27+1)|0);
 $1=$28;
 HEAP8[($27)]=0;
 while(1) {
  $30=$2;
  $31=((HEAP8[($30)])|0);
  $32=(($31<<24)>>24)!=0;
  if (!($32)) {
   break;
  }
  $34=$2;
  $35=(($34+1)|0);
  $2=$35;
  $36=((HEAP8[($34)])|0);
  $37=$1;
  $38=(($37+1)|0);
  $1=$38;
  HEAP8[($37)]=$36;
 }
 $40=$1;
 $41=(($40+1)|0);
 $1=$41;
 HEAP8[($40)]=0;
 $42=$1;
 $43=(($42+1)|0);
 $1=$43;
 HEAP8[($42)]=0;
 $44=$1;
 $45=(($44+1)|0);
 $1=$45;
 HEAP8[($44)]=0;
 while(1) {
  $47=$4;
  $48=((($47)-(1))|0);
  $4=$48;
  $49=($47|0)!=0;
  if (!($49)) {
   break;
  }
  $51=$3;
  $52=(($51+1)|0);
  $3=$52;
  $53=((HEAP8[($51)])|0);
  $54=$1;
  $55=(($54+1)|0);
  $1=$55;
  HEAP8[($54)]=$53;
 }
 $58=$1;
 STACKTOP=sp;return (($58)|0);
}


function _set_text_field($field,$text,$size,$pad){
 $field=($field)|0;
 $text=($text)|0;
 $size=($size)|0;
 $pad=($pad)|0;
 var $1=0,$2=0,$3=0,$4=0,$6=0,$7=0,$8=0,$10=0,$11=0,$13=0,$14=0,$15=0,$16=0,$18=0,$19=0,$20=0,$21=0,$22=0,$24=0,$25=0;
 var $26=0,$27=0,$30=0,label=0;
 var sp=0;sp=STACKTOP;




 $1=$field;
 $2=$text;
 $3=$size;
 $4=$pad;
 while(1) {
  $6=$3;
  $7=((($6)-(1))|0);
  $3=$7;
  $8=($6|0)!=0;
  if (!($8)) {
   break;
  }
  $10=$2;
  $11=($10|0)!=0;
  do {
   if ($11) {
    $13=$2;
    $14=((HEAP8[($13)])|0);
    $15=(($14<<24)>>24);
    $16=($15|0)!=0;
    if (!($16)) {
     label = 6;
     break;
    }
    $18=$2;
    $19=(($18+1)|0);
    $2=$19;
    $20=((HEAP8[($18)])|0);
    $21=$1;
    $22=(($21+1)|0);
    $1=$22;
    HEAP8[($21)]=$20;
   } else {
    label = 6;
   }
  } while(0);
  if ((label|0) == 6) {
   label = 0;
   $24=$4;
   $25=(($24)&255);
   $26=$1;
   $27=(($26+1)|0);
   $1=$27;
   HEAP8[($26)]=$25;
  }
 }
 $30=$1;
 STACKTOP=sp;return (($30)|0);
}


function _findNode($tag,$frame_id,$last){
 $tag=($tag)|0;
 $frame_id=($frame_id)|0;
 $last=($last)|0;
 var $1=0,$2=0,$3=0,$4=0,$node=0,$5=0,$6=0,$8=0,$9=0,$10=0,$12=0,$13=0,$14=0,$16=0,$18=0,$19=0,$21=0,$22=0,$23=0,$24=0;
 var $25=0,$27=0,$29=0,$30=0,$31=0,$34=0,label=0;
 var sp=0;sp=STACKTOP;





 $2=$tag;
 $3=$frame_id;
 $4=$last;
 $5=$4;
 $6=($5|0)!=0;
 if ($6) {
  $8=$4;
  $9=(($8)|0);
  $10=((HEAP32[(($9)>>2)])|0);
  $16=$10;
 } else {
  $12=$2;
  $13=(($12+48)|0);
  $14=((HEAP32[(($13)>>2)])|0);
  $16=$14;
 }

 $node=$16;
 while(1) {
  $18=$node;
  $19=($18|0)!=0;
  if (!($19)) {
   label = 9;
   break;
  }
  $21=$node;
  $22=(($21+4)|0);
  $23=((HEAP32[(($22)>>2)])|0);
  $24=$3;
  $25=($23|0)==($24|0);
  if ($25) {
   label = 7;
   break;
  }
  $29=$node;
  $30=(($29)|0);
  $31=((HEAP32[(($30)>>2)])|0);
  $node=$31;
 }
 if ((label|0) == 7) {
  $27=$node;
  $1=$27;
  $34=$1;
  STACKTOP=sp;return (($34)|0);
 }
 else if ((label|0) == 9) {
  $1=0;
  $34=$1;
  STACKTOP=sp;return (($34)|0);
 }
  return 0;
}


function _isMultiFrame($frame_id){
 $frame_id=($frame_id)|0;
 var $1=0,$2=0,$3=0,$7=0,label=0;
 var sp=0;sp=STACKTOP;


 $2=$frame_id;
 $3=$2;
 if (((($3|0))|0)==((1415075928)|0)|((($3|0))|0)==((1465407576)|0)|((($3|0))|0)==((1129270605)|0)|((($3|0))|0)==((1398361172)|0)|((($3|0))|0)==((1095780675)|0)|((($3|0))|0)==((1195724610)|0)|((($3|0))|0)==((1346588244)|0)|((($3|0))|0)==((1095061059)|0)|((($3|0))|0)==((1279872587)|0)|((($3|0))|0)==((1162756946)|0)|((($3|0))|0)==((1196575044)|0)|((($3|0))|0)==((1347570006)|0)) {
  $1=1;
 } else {
  $1=0;
 }
 $7=$1;
 STACKTOP=sp;return (($7)|0);
}


function _isSameLang($l1,$l2){
 $l1=($l1)|0;
 $l2=($l2)|0;
 var $1=0,$2=0,$3=0,$d=0,$i=0,$a=0,$b=0,$4=0,$5=0,$7=0,$8=0,$10=0,$11=0,$12=0,$13=0,$14=0,$15=0,$16=0,$17=0,$18=0;
 var $19=0,$20=0,$21=0,$22=0,$23=0,$24=0,$25=0,$28=0,$29=0,$30=0,$33=0,$34=0,$35=0,$36=0,$37=0,$41=0,$42=0,$45=0,label=0;
 var sp=0;sp=STACKTOP;STACKTOP=(STACKTOP+8)|0;



 $d=((sp)|0);



 $2=$l1;
 $3=$l2;
 $4=(($d)|0);
 $5=$3;
 _setLang($4,$5);
 $i=0;
 while(1) {
  $7=$i;
  $8=($7|0)<3;
  if (!($8)) {
   label = 11;
   break;
  }
  $10=$i;
  $11=$2;
  $12=(($11+$10)|0);
  $13=((HEAP8[($12)])|0);
  $14=(($13<<24)>>24);
  $15=((_tolower((($14)|0)))|0);
  $16=(($15)&255);
  $a=$16;
  $17=$i;
  $18=(($d+$17)|0);
  $19=((HEAP8[($18)])|0);
  $20=(($19<<24)>>24);
  $21=((_tolower((($20)|0)))|0);
  $22=(($21)&255);
  $b=$22;
  $23=$a;
  $24=(($23<<24)>>24);
  $25=($24|0)<32;
  if ($25) {
   $a=32;
  }
  $28=$b;
  $29=(($28<<24)>>24);
  $30=($29|0)<32;
  if ($30) {
   $b=32;
  }
  $33=$a;
  $34=(($33<<24)>>24);
  $35=$b;
  $36=(($35<<24)>>24);
  $37=($34|0)!=($36|0);
  if ($37) {
   label = 8;
   break;
  }
  $41=$i;
  $42=((($41)+(1))|0);
  $i=$42;
 }
 if ((label|0) == 8) {
  $1=0;
  $45=$1;
  STACKTOP=sp;return (($45)|0);
 }
 else if ((label|0) == 11) {
  $1=1;
  $45=$1;
  STACKTOP=sp;return (($45)|0);
 }
  return 0;
}


function _appendNode($tag,$node){
 $tag=($tag)|0;
 $node=($node)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$8=0,$9=0,$10=0,$11=0,$13=0,$14=0,$15=0,$16=0,$17=0,$18=0,$20=0,$21=0,$22=0,$23=0;
 var $24=0,$25=0,$26=0,$27=0,label=0;
 var sp=0;sp=STACKTOP;


 $1=$tag;
 $2=$node;
 $3=$1;
 $4=(($3+52)|0);
 $5=((HEAP32[(($4)>>2)])|0);
 $6=($5|0)==0;
 do {
  if (!($6)) {
   $8=$1;
   $9=(($8+48)|0);
   $10=((HEAP32[(($9)>>2)])|0);
   $11=($10|0)==0;
   if ($11) {
    break;
   }
   $20=$2;
   $21=$1;
   $22=(($21+52)|0);
   $23=((HEAP32[(($22)>>2)])|0);
   $24=(($23)|0);
   HEAP32[(($24)>>2)]=$20;
   $25=$2;
   $26=$1;
   $27=(($26+52)|0);
   HEAP32[(($27)>>2)]=$25;
   STACKTOP=sp;return;
  }
 } while(0);
 $13=$2;
 $14=$1;
 $15=(($14+48)|0);
 HEAP32[(($15)>>2)]=$13;
 $16=$2;
 $17=$1;
 $18=(($17+52)|0);
 HEAP32[(($18)>>2)]=$16;
 STACKTOP=sp;return;
}


function _setLang($dst,$src){
 $dst=($dst)|0;
 $src=($src)|0;
 var $1=0,$2=0,$i=0,$3=0,$4=0,$6=0,$7=0,$8=0,$9=0,$10=0,$12=0,$13=0,$14=0,$15=0,$16=0,$17=0,$20=0,$21=0,$23=0,$24=0;
 var $26=0,$27=0,$28=0,$29=0,$31=0,$33=0,$34=0,$35=0,$36=0,$37=0,$38=0,$39=0,$41=0,$42=0,$45=0,$46=0,$48=0,$49=0,$50=0,$52=0;
 var $53=0,label=0;
 var sp=0;sp=STACKTOP;



 $1=$dst;
 $2=$src;
 $3=$2;
 $4=($3|0)==0;
 do {
  if (!($4)) {
   $6=$2;
   $7=(($6)|0);
   $8=((HEAP8[($7)])|0);
   $9=(($8<<24)>>24);
   $10=($9|0)==0;
   if ($10) {
    break;
   }
   $i=0;
   while(1) {
    $20=$i;
    $21=($20|0)<3;
    do {
     if ($21) {
      $23=$2;
      $24=($23|0)!=0;
      if (!($24)) {
       $31=0;
       break;
      }
      $26=$2;
      $27=((HEAP8[($26)])|0);
      $28=(($27<<24)>>24);
      $29=($28|0)!=0;
      $31=$29;
     } else {
      $31=0;
     }
    } while(0);

    if (!($31)) {
     break;
    }
    $33=$i;
    $34=$2;
    $35=(($34+$33)|0);
    $36=((HEAP8[($35)])|0);
    $37=$i;
    $38=$1;
    $39=(($38+$37)|0);
    HEAP8[($39)]=$36;
    $41=$i;
    $42=((($41)+(1))|0);
    $i=$42;
   }
   while(1) {
    $45=$i;
    $46=($45|0)<3;
    if (!($46)) {
     break;
    }
    $48=$i;
    $49=$1;
    $50=(($49+$48)|0);
    HEAP8[($50)]=32;
    $52=$i;
    $53=((($52)+(1))|0);
    $i=$53;
   }
   STACKTOP=sp;return;
  }
 } while(0);
 $12=$1;
 $13=(($12)|0);
 HEAP8[($13)]=88;
 $14=$1;
 $15=(($14+1)|0);
 HEAP8[($15)]=88;
 $16=$1;
 $17=(($16+2)|0);
 HEAP8[($17)]=88;
 STACKTOP=sp;return;
}


function _frame_id_matches($id,$mask){
 $id=($id)|0;
 $mask=($mask)|0;
 var $1=0,$2=0,$result=0,$i=0,$window=0,$mw=0,$iw=0,$4=0,$5=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$14=0,$16=0,$17=0,$18=0;
 var $20=0,$21=0,$22=0,$25=0,$26=0,$27=0,$28=0,$30=0,label=0;
 var sp=0;sp=STACKTOP;







 $1=$id;
 $2=$mask;
 $result=0;
 $window=255;
 $i=0;
 while(1) {
  $4=$i;
  $5=($4|0)<4;
  if (!($5)) {
   break;
  }
  $7=$2;
  $8=$window;
  $9=$7&$8;
  $mw=$9;
  $10=$1;
  $11=$window;
  $12=$10&$11;
  $iw=$12;
  $13=$mw;
  $14=($13|0)!=0;
  do {
   if ($14) {
    $16=$mw;
    $17=$iw;
    $18=($16|0)!=($17|0);
    if (!($18)) {
     break;
    }
    $20=$iw;
    $21=$result;
    $22=$21|$20;
    $result=$22;
   }
  } while(0);
  $25=$i;
  $26=((($25)+(1))|0);
  $i=$26;
  $27=$window;
  $28=$27<<8;
  $window=$28;
 }
 $30=$result;
 STACKTOP=sp;return (($30)|0);
}


function _isSameDescriptor($node,$dsc){
 $node=($node)|0;
 $dsc=($dsc)|0;
 var $1=0,$2=0,$3=0,$i=0,$4=0,$5=0,$6=0,$7=0,$8=0,$10=0,$11=0,$12=0,$13=0,$14=0,$18=0,$19=0,$20=0,$21=0,$22=0,$23=0;
 var $25=0,$26=0,$28=0,$29=0,$30=0,$31=0,$32=0,$33=0,$34=0,$35=0,$36=0,$37=0,$38=0,$39=0,$40=0,$41=0,$42=0,$46=0,$47=0,$50=0;
 var label=0;
 var sp=0;sp=STACKTOP;




 $2=$node;
 $3=$dsc;
 $4=$2;
 $5=(($4+12)|0);
 $6=(($5+8)|0);
 $7=((HEAP32[(($6)>>2)])|0);
 $8=($7|0)==1;
 do {
  if ($8) {
   $10=$2;
   $11=(($10+12)|0);
   $12=(($11+4)|0);
   $13=((HEAP32[(($12)>>2)])|0);
   $14=($13>>>0)>((0)>>>0);
   if (!($14)) {
    break;
   }
   $1=0;
   $50=$1;
   STACKTOP=sp;return (($50)|0);
  }
 } while(0);
 $i=0;
 while(1) {
  $18=$i;
  $19=$2;
  $20=(($19+12)|0);
  $21=(($20+4)|0);
  $22=((HEAP32[(($21)>>2)])|0);
  $23=($18>>>0)<($22>>>0);
  if (!($23)) {
   label = 11;
   break;
  }
  $25=$3;
  $26=($25|0)!=0;
  if (!($26)) {
   label = 8;
   break;
  }
  $28=$i;
  $29=$2;
  $30=(($29+12)|0);
  $31=(($30)|0);
  $32=$31;
  $33=((HEAP32[(($32)>>2)])|0);
  $34=(($33+$28)|0);
  $35=((HEAP8[($34)])|0);
  $36=(($35<<24)>>24);
  $37=$i;
  $38=$3;
  $39=(($38+$37)|0);
  $40=((HEAP8[($39)])|0);
  $41=(($40<<24)>>24);
  $42=($36|0)!=($41|0);
  if ($42) {
   label = 8;
   break;
  }
  $46=$i;
  $47=((($46)+(1))|0);
  $i=$47;
 }
 if ((label|0) == 8) {
  $1=0;
  $50=$1;
  STACKTOP=sp;return (($50)|0);
 }
 else if ((label|0) == 11) {
  $1=1;
  $50=$1;
  STACKTOP=sp;return (($50)|0);
 }
  return 0;
}


function _swap_bytes($w){
 $w=($w)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,label=0;
 var sp=0;sp=STACKTOP;

 $1=$w;
 $2=$1;
 $3=($2&65535);
 $4=$3<<8;
 $5=65280&$4;
 $6=$1;
 $7=($6&65535);
 $8=$7>>8;
 $9=255&$8;
 $10=$5|$9;
 $11=(($10)&65535);
 STACKTOP=sp;return (($11)|0);
}


function _toLittleEndian($bom,$c){
 $bom=($bom)|0;
 $c=($c)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$8=0,$9=0,$11=0,$13=0,label=0;
 var sp=0;sp=STACKTOP;



 $2=$bom;
 $3=$c;
 $4=$2;
 $5=($4&65535);
 $6=($5|0)==65534;
 if ($6) {
  $8=$3;
  $9=((_swap_bytes($8))|0);
  $1=$9;
 } else {
  $11=$3;
  $1=$11;
 }
 $13=$1;
 STACKTOP=sp;return (($13)|0);
}


function _set_4_byte_value($bytes,$value){
 $bytes=($bytes)|0;
 $value=($value)|0;
 var $1=0,$2=0,$i=0,$4=0,$5=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$14=0,$16=0,$17=0,$19=0,$20=0,label=0;
 var sp=0;sp=STACKTOP;



 $1=$bytes;
 $2=$value;
 $i=3;
 while(1) {
  $4=$i;
  $5=($4|0)>=0;
  if (!($5)) {
   break;
  }
  $7=$2;
  $8=$7&255;
  $9=(($8)&255);
  $10=$i;
  $11=$1;
  $12=(($11+$10)|0);
  HEAP8[($12)]=$9;
  $13=$2;
  $14=$13>>>8;
  $2=$14;
  $16=$i;
  $17=((($16)-(1))|0);
  $i=$17;
 }
 $19=$1;
 $20=(($19+4)|0);
 STACKTOP=sp;return (($20)|0);
}


function _writeChars($frame,$str,$n){
 $frame=($frame)|0;
 $str=($str)|0;
 $n=($n)|0;
 var $1=0,$2=0,$3=0,$5=0,$6=0,$7=0,$9=0,$10=0,$11=0,$12=0,$13=0,$15=0,label=0;
 var sp=0;sp=STACKTOP;



 $1=$frame;
 $2=$str;
 $3=$n;
 while(1) {
  $5=$3;
  $6=((($5)-(1))|0);
  $3=$6;
  $7=($5|0)!=0;
  if (!($7)) {
   break;
  }
  $9=$2;
  $10=(($9+1)|0);
  $2=$10;
  $11=((HEAP8[($9)])|0);
  $12=$1;
  $13=(($12+1)|0);
  $1=$13;
  HEAP8[($12)]=$11;
 }
 $15=$1;
 STACKTOP=sp;return (($15)|0);
}


function _writeUcs2s($frame,$str,$n){
 $frame=($frame)|0;
 $str=($str)|0;
 $n=($n)|0;
 var $1=0,$2=0,$3=0,$bom=0,$c=0,$4=0,$5=0,$7=0,$8=0,$10=0,$11=0,$12=0,$14=0,$15=0,$16=0,$17=0,$18=0,$19=0,$20=0,$21=0;
 var $22=0,$23=0,$24=0,$25=0,$26=0,$27=0,$28=0,$29=0,$30=0,$31=0,$34=0,label=0;
 var sp=0;sp=STACKTOP;





 $1=$frame;
 $2=$str;
 $3=$n;
 $4=$3;
 $5=($4>>>0)>((0)>>>0);
 if (!($5)) {
  $34=$1;
  STACKTOP=sp;return (($34)|0);
 }
 $7=$2;
 $8=((HEAP16[(($7)>>1)])|0);
 $bom=$8;
 while(1) {
  $10=$3;
  $11=((($10)-(1))|0);
  $3=$11;
  $12=($10|0)!=0;
  if (!($12)) {
   break;
  }
  $14=$bom;
  $15=$2;
  $16=(($15+2)|0);
  $2=$16;
  $17=((HEAP16[(($15)>>1)])|0);
  $18=((_toLittleEndian($14,$17))|0);
  $c=$18;
  $19=$c;
  $20=($19&65535);
  $21=255&$20;
  $22=(($21)&255);
  $23=$1;
  $24=(($23+1)|0);
  $1=$24;
  HEAP8[($23)]=$22;
  $25=$c;
  $26=($25&65535);
  $27=$26>>8;
  $28=255&$27;
  $29=(($28)&255);
  $30=$1;
  $31=(($30+1)|0);
  $1=$31;
  HEAP8[($30)]=$29;
 }
 $34=$1;
 STACKTOP=sp;return (($34)|0);
}


function _writeLoBytes($frame,$str,$n){
 $frame=($frame)|0;
 $str=($str)|0;
 $n=($n)|0;
 var $1=0,$2=0,$3=0,$bom=0,$c=0,$4=0,$5=0,$7=0,$8=0,$9=0,$10=0,$11=0,$13=0,$14=0,$15=0,$16=0,$19=0,$20=0,$21=0,$23=0;
 var $24=0,$25=0,$26=0,$27=0,$28=0,$29=0,$30=0,$32=0,$33=0,$34=0,$36=0,$37=0,$39=0,$40=0,$41=0,$42=0,$46=0,label=0;
 var sp=0;sp=STACKTOP;





 $1=$frame;
 $2=$str;
 $3=$n;
 $4=$3;
 $5=($4>>>0)>((0)>>>0);
 if (!($5)) {
  $46=$1;
  STACKTOP=sp;return (($46)|0);
 }
 $7=$2;
 $8=((HEAP16[(($7)>>1)])|0);
 $bom=$8;
 $9=$bom;
 $10=((_hasUcs2ByteOrderMarker($9))|0);
 $11=($10|0)!=0;
 if ($11) {
  $13=$2;
  $14=(($13+2)|0);
  $2=$14;
  $15=$3;
  $16=((($15)-(1))|0);
  $3=$16;
 }
 while(1) {
  $19=$3;
  $20=((($19)-(1))|0);
  $3=$20;
  $21=($19|0)!=0;
  if (!($21)) {
   break;
  }
  $23=$bom;
  $24=$2;
  $25=(($24+2)|0);
  $2=$25;
  $26=((HEAP16[(($24)>>1)])|0);
  $27=((_toLittleEndian($23,$26))|0);
  $c=$27;
  $28=$c;
  $29=($28&65535);
  $30=($29>>>0)<((32)>>>0);
  do {
   if ($30) {
    label = 8;
   } else {
    $32=$c;
    $33=($32&65535);
    $34=((255)>>>0)<($33>>>0);
    if ($34) {
     label = 8;
     break;
    }
    $39=$c;
    $40=(($39)&255);
    $41=$1;
    $42=(($41+1)|0);
    $1=$42;
    HEAP8[($41)]=$40;
   }
  } while(0);
  if ((label|0) == 8) {
   label = 0;
   $36=$1;
   $37=(($36+1)|0);
   $1=$37;
   HEAP8[($36)]=32;
  }
 }
 $46=$1;
 STACKTOP=sp;return (($46)|0);
}


function _getframebits($gfc){
 $gfc=($gfc)|0;
 var $1=0,$cfg=0,$eov=0,$bit_rate=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$11=0,$12=0,$13=0,$14=0,$15=0,$16=0,$17=0,$18=0;
 var $19=0,$21=0,$22=0,$23=0,$25=0,$26=0,$27=0,$28=0,$29=0,$30=0,label=0;
 var sp=0;sp=STACKTOP;




 $1=$gfc;
 $2=$1;
 $3=(($2+16)|0);
 $cfg=$3;
 $4=$1;
 $5=(($4+84040)|0);
 $eov=$5;
 $6=$eov;
 $7=(($6+704)|0);
 $8=((HEAP32[(($7)>>2)])|0);
 $9=($8|0)!=0;
 if ($9) {
  $11=$eov;
  $12=(($11+704)|0);
  $13=((HEAP32[(($12)>>2)])|0);
  $14=$cfg;
  $15=(($14)|0);
  $16=((HEAP32[(($15)>>2)])|0);
  $17=((15168+($16<<6))|0);
  $18=(($17+($13<<2))|0);
  $19=((HEAP32[(($18)>>2)])|0);
  $bit_rate=$19;
 } else {
  $21=$cfg;
  $22=(($21+104)|0);
  $23=((HEAP32[(($22)>>2)])|0);
  $bit_rate=$23;
 }
 $25=$cfg;
 $26=$bit_rate;
 $27=$eov;
 $28=(($27+712)|0);
 $29=((HEAP32[(($28)>>2)])|0);
 $30=((_calcFrameLength($25,$26,$29))|0);
 STACKTOP=sp;return (($30)|0);
}


function _get_max_frame_buffer_size_by_constraint($cfg,$constraint){
 $cfg=($cfg)|0;
 $constraint=($constraint)|0;
 var $1=0,$2=0,$maxmp3buf=0,$max_kbps=0,$3=0,$4=0,$5=0,$6=0,$8=0,$9=0,$11=0,$12=0,$13=0,$14=0,$15=0,$17=0,$18=0,$19=0,$20=0,$21=0;
 var $24=0,$25=0,$26=0,$27=0,$29=0,$30=0,$31=0,$32=0,$33=0,$34=0,$36=0,$37=0,$38=0,$39=0,$40=0,$41=0,$43=0,$47=0,$48=0,$49=0;
 var $51=0,$52=0,$53=0,$54=0,$55=0,$58=0,label=0;
 var sp=0;sp=STACKTOP;




 $1=$cfg;
 $2=$constraint;
 $maxmp3buf=0;
 $3=$1;
 $4=(($3+104)|0);
 $5=((HEAP32[(($4)>>2)])|0);
 $6=($5|0)>320;
 if ($6) {
  $8=$2;
  $9=($8|0)==1;
  if ($9) {
   $11=$1;
   $12=$1;
   $13=(($12+104)|0);
   $14=((HEAP32[(($13)>>2)])|0);
   $15=((_calcFrameLength($11,$14,0))|0);
   $maxmp3buf=$15;
  } else {
   $17=$1;
   $18=(($17)|0);
   $19=((HEAP32[(($18)>>2)])|0);
   $20=((($19)+(1))|0);
   $21=((($20)*(7680))&-1);
   $maxmp3buf=$21;
  }
  $58=$maxmp3buf;
  STACKTOP=sp;return (($58)|0);
 }
 $24=$1;
 $25=(($24+48)|0);
 $26=((HEAP32[(($25)>>2)])|0);
 $27=($26|0)<16000;
 if ($27) {
  $29=$1;
  $30=(($29)|0);
  $31=((HEAP32[(($30)>>2)])|0);
  $32=((15168+($31<<6))|0);
  $33=(($32+32)|0);
  $34=((HEAP32[(($33)>>2)])|0);
  $max_kbps=$34;
 } else {
  $36=$1;
  $37=(($36)|0);
  $38=((HEAP32[(($37)>>2)])|0);
  $39=((15168+($38<<6))|0);
  $40=(($39+56)|0);
  $41=((HEAP32[(($40)>>2)])|0);
  $max_kbps=$41;
 }
 $43=$2;
 if (((($43|0))|0)==((2)|0)) {
  $51=$1;
  $52=(($51)|0);
  $53=((HEAP32[(($52)>>2)])|0);
  $54=((($53)+(1))|0);
  $55=((($54)*(7680))&-1);
  $maxmp3buf=$55;
 } else if (((($43|0))|0)==((1)|0)) {
  $47=$1;
  $48=$max_kbps;
  $49=((_calcFrameLength($47,$48,0))|0);
  $maxmp3buf=$49;
 } else if (((($43|0))|0)==((0)|0)) {
  label = 11;
 } else {
  label = 11;
 }
 if ((label|0) == 11) {
  $maxmp3buf=11520;
 }
 $58=$maxmp3buf;
 STACKTOP=sp;return (($58)|0);
}


function _CRC_writeheader($gfc,$header){
 $gfc=($gfc)|0;
 $header=($header)|0;
 var $1=0,$2=0,$cfg=0,$crc=0,$i=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$14=0,$15=0,$16=0,$18=0;
 var $19=0,$20=0,$21=0,$22=0,$24=0,$25=0,$26=0,$27=0,$28=0,$29=0,$30=0,$32=0,$33=0,$35=0,$36=0,$37=0,$38=0,$39=0,$40=0,$41=0;
 var $42=0,$43=0,$44=0,label=0;
 var sp=0;sp=STACKTOP;





 $1=$gfc;
 $2=$header;
 $3=$1;
 $4=(($3+16)|0);
 $cfg=$4;
 $crc=65535;
 $5=$2;
 $6=(($5+2)|0);
 $7=((HEAP8[($6)])|0);
 $8=($7&255);
 $9=$crc;
 $10=((_CRC_update($8,$9))|0);
 $crc=$10;
 $11=$2;
 $12=(($11+3)|0);
 $13=((HEAP8[($12)])|0);
 $14=($13&255);
 $15=$crc;
 $16=((_CRC_update($14,$15))|0);
 $crc=$16;
 $i=6;
 while(1) {
  $18=$i;
  $19=$cfg;
  $20=(($19+8)|0);
  $21=((HEAP32[(($20)>>2)])|0);
  $22=($18|0)<($21|0);
  if (!($22)) {
   break;
  }
  $24=$i;
  $25=$2;
  $26=(($25+$24)|0);
  $27=((HEAP8[($26)])|0);
  $28=($27&255);
  $29=$crc;
  $30=((_CRC_update($28,$29))|0);
  $crc=$30;
  $32=$i;
  $33=((($32)+(1))|0);
  $i=$33;
 }
 $35=$crc;
 $36=$35>>8;
 $37=(($36)&255);
 $38=$2;
 $39=(($38+4)|0);
 HEAP8[($39)]=$37;
 $40=$crc;
 $41=$40&255;
 $42=(($41)&255);
 $43=$2;
 $44=(($43+5)|0);
 HEAP8[($44)]=$42;
 STACKTOP=sp;return;
}


function _compute_flushbits($gfc,$total_bytes_output){
 $gfc=($gfc)|0;
 $total_bytes_output=($total_bytes_output)|0;
 var $1=0,$2=0,$cfg=0,$esv=0,$flushbits=0,$remaining_headers=0,$bitsPerFrame=0,$last_ptr=0,$first_ptr=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0;
 var $14=0,$15=0,$18=0,$19=0,$20=0,$21=0,$22=0,$23=0,$24=0,$25=0,$26=0,$27=0,$28=0,$29=0,$30=0,$31=0,$32=0,$34=0,$35=0,$36=0;
 var $37=0,$38=0,$39=0,$40=0,$42=0,$43=0,$44=0,$45=0,$46=0,$48=0,$49=0,$50=0,$51=0,$52=0,$53=0,$54=0,$55=0,$57=0,$58=0,$59=0;
 var $60=0,$61=0,$62=0,$63=0,$64=0,$65=0,$66=0,$67=0,$68=0,$69=0,$71=0,$72=0,$73=0,$74=0,$75=0,$77=0,$78=0,$79=0,$80=0,$82=0;
 var $83=0,$84=0,$85=0,$86=0,$87=0,$88=0,$89=0,$90=0,$91=0,$93=0,$95=0,label=0;
 var tempVarArgs=0;
 var sp=0;sp=STACKTOP;









 $1=$gfc;
 $2=$total_bytes_output;
 $3=$1;
 $4=(($3+16)|0);
 $cfg=$4;
 $5=$1;
 $6=(($5+27824)|0);
 $esv=$6;
 $7=$esv;
 $8=(($7+24308)|0);
 $9=((HEAP32[(($8)>>2)])|0);
 $first_ptr=$9;
 $10=$esv;
 $11=(($10+24304)|0);
 $12=((HEAP32[(($11)>>2)])|0);
 $13=((($12)-(1))|0);
 $last_ptr=$13;
 $14=$last_ptr;
 $15=($14|0)==-1;
 if ($15) {
  $last_ptr=255;
 }
 $18=$last_ptr;
 $19=$esv;
 $20=(($19+12016)|0);
 $21=(($20+((($18)*(48))&-1))|0);
 $22=(($21)|0);
 $23=((HEAP32[(($22)>>2)])|0);
 $24=$1;
 $25=(($24+284)|0);
 $26=(($25+8)|0);
 $27=((HEAP32[(($26)>>2)])|0);
 $28=((($23)-($27))|0);
 $flushbits=$28;
 $29=$flushbits;
 $30=$2;
 HEAP32[(($30)>>2)]=$29;
 $31=$flushbits;
 $32=($31|0)>=0;
 if ($32) {
  $34=$last_ptr;
  $35=((($34)+(1))|0);
  $36=$first_ptr;
  $37=((($35)-($36))|0);
  $remaining_headers=$37;
  $38=$last_ptr;
  $39=$first_ptr;
  $40=($38|0)<($39|0);
  if ($40) {
   $42=$last_ptr;
   $43=((($42)+(1))|0);
   $44=$first_ptr;
   $45=((($43)-($44))|0);
   $46=((($45)+(256))|0);
   $remaining_headers=$46;
  }
  $48=$remaining_headers;
  $49=($48<<3);
  $50=$cfg;
  $51=(($50+8)|0);
  $52=((HEAP32[(($51)>>2)])|0);
  $53=(Math_imul($49,$52)|0);
  $54=$flushbits;
  $55=((($54)-($53))|0);
  $flushbits=$55;
 }
 $57=$1;
 $58=((_getframebits($57))|0);
 $bitsPerFrame=$58;
 $59=$bitsPerFrame;
 $60=$flushbits;
 $61=((($60)+($59))|0);
 $flushbits=$61;
 $62=$bitsPerFrame;
 $63=$2;
 $64=((HEAP32[(($63)>>2)])|0);
 $65=((($64)+($62))|0);
 HEAP32[(($63)>>2)]=$65;
 $66=$2;
 $67=((HEAP32[(($66)>>2)])|0);
 $68=(((($67|0))%(8))&-1);
 $69=($68|0)!=0;
 if ($69) {
  $71=$2;
  $72=((HEAP32[(($71)>>2)])|0);
  $73=(((($72|0))/(8))&-1);
  $74=((($73)+(1))|0);
  $75=$2;
  HEAP32[(($75)>>2)]=$74;
 } else {
  $77=$2;
  $78=((HEAP32[(($77)>>2)])|0);
  $79=(((($78|0))/(8))&-1);
  $80=$2;
  HEAP32[(($80)>>2)]=$79;
 }
 $82=$1;
 $83=(($82+284)|0);
 $84=(($83+12)|0);
 $85=((HEAP32[(($84)>>2)])|0);
 $86=((($85)+(1))|0);
 $87=$2;
 $88=((HEAP32[(($87)>>2)])|0);
 $89=((($88)+($86))|0);
 HEAP32[(($87)>>2)]=$89;
 $90=$flushbits;
 $91=($90|0)<0;
 if (!($91)) {
  $95=$flushbits;
  STACKTOP=sp;return (($95)|0);
 }
 $93=$1;
 _lame_errorf($93,16736,(((tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs))|0)); STACKTOP=tempVarArgs;
 $95=$flushbits;
 STACKTOP=sp;return (($95)|0);
}


function _flush_bitstream($gfc){
 $gfc=($gfc)|0;
 var $1=0,$esv=0,$l3_side=0,$nbytes=0,$flushbits=0,$last_ptr=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$12=0,$13=0,$14=0,$15=0,$16=0,$19=0;
 var $20=0,$21=0,$22=0,$23=0,$24=0,label=0;
 var sp=0;sp=STACKTOP;STACKTOP=(STACKTOP+8)|0;



 $nbytes=((sp)|0);


 $1=$gfc;
 $2=$1;
 $3=(($2+27824)|0);
 $esv=$3;
 $4=$esv;
 $5=(($4+24304)|0);
 $6=((HEAP32[(($5)>>2)])|0);
 $7=((($6)-(1))|0);
 $last_ptr=$7;
 $8=$last_ptr;
 $9=($8|0)==-1;
 if ($9) {
  $last_ptr=255;
 }
 $12=$1;
 $13=(($12+304)|0);
 $l3_side=$13;
 $14=$1;
 $15=((_compute_flushbits($14,$nbytes))|0);
 $flushbits=$15;
 $16=($15|0)<0;
 if ($16) {
  STACKTOP=sp;return;
 } else {
  $19=$1;
  $20=$flushbits;
  _drain_into_ancillary($19,$20);
  $21=$esv;
  $22=(($21+24316)|0);
  HEAP32[(($22)>>2)]=0;
  $23=$l3_side;
  $24=(($23+21008)|0);
  HEAP32[(($24)>>2)]=0;
  STACKTOP=sp;return;
 }
}


function _add_dummy_byte($gfc,$val,$n){
 $gfc=($gfc)|0;
 $val=($val)|0;
 $n=($n)|0;
 var $1=0,$2=0,$3=0,$esv=0,$i=0,$4=0,$5=0,$7=0,$8=0,$9=0,$11=0,$12=0,$13=0,$15=0,$16=0,$18=0,$19=0,$20=0,$21=0,$22=0;
 var $23=0,$24=0,$26=0,$27=0,label=0;
 var sp=0;sp=STACKTOP;





 $1=$gfc;
 $2=$val;
 $3=$n;
 $4=$1;
 $5=(($4+27824)|0);
 $esv=$5;
 while(1) {
  $7=$3;
  $8=((($7)-(1))|0);
  $3=$8;
  $9=($7>>>0)>((0)>>>0);
  if (!($9)) {
   break;
  }
  $11=$1;
  $12=$2;
  $13=($12&255);
  _putbits_noheaders($11,$13,8);
  $i=0;
  while(1) {
   $15=$i;
   $16=($15|0)<256;
   if (!($16)) {
    break;
   }
   $18=$i;
   $19=$esv;
   $20=(($19+12016)|0);
   $21=(($20+((($18)*(48))&-1))|0);
   $22=(($21)|0);
   $23=((HEAP32[(($22)>>2)])|0);
   $24=((($23)+(8))|0);
   HEAP32[(($22)>>2)]=$24;
   $26=$i;
   $27=((($26)+(1))|0);
   $i=$27;
  }
 }
 STACKTOP=sp;return;
}


function _format_bitstream($gfc){
 $gfc=($gfc)|0;
 var $1=0,$cfg=0,$esv=0,$bits=0,$nbytes=0,$l3_side=0,$bitsPerFrame=0,$i=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0;
 var $14=0,$15=0,$16=0,$17=0,$18=0,$19=0,$20=0,$21=0,$22=0,$23=0,$24=0,$25=0,$26=0,$27=0,$28=0,$29=0,$30=0,$31=0,$32=0,$33=0;
 var $34=0,$35=0,$36=0,$37=0,$38=0,$39=0,$40=0,$41=0,$42=0,$43=0,$44=0,$45=0,$46=0,$48=0,$50=0,$51=0,$52=0,$53=0,$54=0,$55=0;
 var $56=0,$57=0,$59=0,$60=0,$61=0,$62=0,$63=0,$64=0,$65=0,$66=0,$67=0,$68=0,$69=0,$70=0,$71=0,$72=0,$73=0,$74=0,$75=0,$76=0;
 var $77=0,$78=0,$79=0,$80=0,$81=0,$82=0,$83=0,$84=0,$85=0,$86=0,$87=0,$88=0,$89=0,$90=0,$91=0,$92=0,$93=0,$94=0,$95=0,$96=0;
 var $97=0,$98=0,$99=0,$100=0,$102=0,$103=0,$104=0,$105=0,$106=0,$109=0,$110=0,$112=0,$113=0,$114=0,$115=0,$116=0,$117=0,$118=0,$119=0,$120=0;
 var $121=0,$122=0,$124=0,$125=0,$127=0,$128=0,$129=0,label=0;
 var tempVarArgs=0;
 var sp=0;sp=STACKTOP;STACKTOP=(STACKTOP+8)|0;




 $nbytes=((sp)|0);



 $1=$gfc;
 $2=$1;
 $3=(($2+16)|0);
 $cfg=$3;
 $4=$1;
 $5=(($4+27824)|0);
 $esv=$5;
 $6=$1;
 $7=(($6+304)|0);
 $l3_side=$7;
 $8=$1;
 $9=((_getframebits($8))|0);
 $bitsPerFrame=$9;
 $10=$1;
 $11=$l3_side;
 $12=(($11+21016)|0);
 $13=((HEAP32[(($12)>>2)])|0);
 _drain_into_ancillary($10,$13);
 $14=$1;
 $15=$bitsPerFrame;
 _encodeSideInfo2($14,$15);
 $16=$cfg;
 $17=(($16+8)|0);
 $18=((HEAP32[(($17)>>2)])|0);
 $19=($18<<3);
 $bits=$19;
 $20=$1;
 $21=((_writeMainData($20))|0);
 $22=$bits;
 $23=((($22)+($21))|0);
 $bits=$23;
 $24=$1;
 $25=$l3_side;
 $26=(($25+21020)|0);
 $27=((HEAP32[(($26)>>2)])|0);
 _drain_into_ancillary($24,$27);
 $28=$l3_side;
 $29=(($28+21020)|0);
 $30=((HEAP32[(($29)>>2)])|0);
 $31=$bits;
 $32=((($31)+($30))|0);
 $bits=$32;
 $33=$bitsPerFrame;
 $34=$bits;
 $35=((($33)-($34))|0);
 $36=(((($35|0))/(8))&-1);
 $37=$l3_side;
 $38=(($37+21008)|0);
 $39=((HEAP32[(($38)>>2)])|0);
 $40=((($39)+($36))|0);
 HEAP32[(($38)>>2)]=$40;
 $41=$1;
 $42=((_compute_flushbits($41,$nbytes))|0);
 $43=$esv;
 $44=(($43+24316)|0);
 $45=((HEAP32[(($44)>>2)])|0);
 $46=($42|0)!=($45|0);
 if ($46) {
  $48=$1;
  _lame_errorf($48,17248,(((tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs))|0)); STACKTOP=tempVarArgs;
 }
 $50=$l3_side;
 $51=(($50+21008)|0);
 $52=((HEAP32[(($51)>>2)])|0);
 $53=($52<<3);
 $54=$esv;
 $55=(($54+24316)|0);
 $56=((HEAP32[(($55)>>2)])|0);
 $57=($53|0)!=($56|0);
 if ($57) {
  $59=$1;
  $60=$l3_side;
  $61=(($60+21008)|0);
  $62=((HEAP32[(($61)>>2)])|0);
  $63=($62<<3);
  $64=$esv;
  $65=(($64+24316)|0);
  $66=((HEAP32[(($65)>>2)])|0);
  $67=$l3_side;
  $68=(($67+21020)|0);
  $69=((HEAP32[(($68)>>2)])|0);
  $70=$l3_side;
  $71=(($70+21016)|0);
  $72=((HEAP32[(($71)>>2)])|0);
  $73=$cfg;
  $74=(($73+8)|0);
  $75=((HEAP32[(($74)>>2)])|0);
  $76=($75<<3);
  $77=$bits;
  $78=$l3_side;
  $79=(($78+21020)|0);
  $80=((HEAP32[(($79)>>2)])|0);
  $81=((($77)-($80))|0);
  $82=$cfg;
  $83=(($82+8)|0);
  $84=((HEAP32[(($83)>>2)])|0);
  $85=($84<<3);
  $86=((($81)-($85))|0);
  $87=$bits;
  $88=$bits;
  $89=(((($88|0))%(8))&-1);
  $90=$bitsPerFrame;
  _lame_errorf($59,16776,(((tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 72)|0,HEAP32[((tempVarArgs)>>2)]=$63,HEAP32[(((tempVarArgs)+(8))>>2)]=$66,HEAP32[(((tempVarArgs)+(16))>>2)]=$69,HEAP32[(((tempVarArgs)+(24))>>2)]=$72,HEAP32[(((tempVarArgs)+(32))>>2)]=$76,HEAP32[(((tempVarArgs)+(40))>>2)]=$86,HEAP32[(((tempVarArgs)+(48))>>2)]=$87,HEAP32[(((tempVarArgs)+(56))>>2)]=$89,HEAP32[(((tempVarArgs)+(64))>>2)]=$90,tempVarArgs))|0)); STACKTOP=tempVarArgs;
  $91=$1;
  _lame_errorf($91,16680,(((tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs))|0)); STACKTOP=tempVarArgs;
  $92=$1;
  _lame_errorf($92,16584,(((tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs))|0)); STACKTOP=tempVarArgs;
  $93=$1;
  _lame_errorf($93,16528,(((tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs))|0)); STACKTOP=tempVarArgs;
  $94=$1;
  _lame_errorf($94,16472,(((tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs))|0)); STACKTOP=tempVarArgs;
  $95=$l3_side;
  $96=(($95+21008)|0);
  $97=((HEAP32[(($96)>>2)])|0);
  $98=($97<<3);
  $99=$esv;
  $100=(($99+24316)|0);
  HEAP32[(($100)>>2)]=$98;
 }
 $102=$1;
 $103=(($102+284)|0);
 $104=(($103+8)|0);
 $105=((HEAP32[(($104)>>2)])|0);
 $106=($105|0)>1000000000;
 if (!($106)) {
  STACKTOP=sp;return ((0)|0);
 }
 $i=0;
 while(1) {
  $109=$i;
  $110=($109|0)<256;
  if (!($110)) {
   break;
  }
  $112=$1;
  $113=(($112+284)|0);
  $114=(($113+8)|0);
  $115=((HEAP32[(($114)>>2)])|0);
  $116=$i;
  $117=$esv;
  $118=(($117+12016)|0);
  $119=(($118+((($116)*(48))&-1))|0);
  $120=(($119)|0);
  $121=((HEAP32[(($120)>>2)])|0);
  $122=((($121)-($115))|0);
  HEAP32[(($120)>>2)]=$122;
  $124=$i;
  $125=((($124)+(1))|0);
  $i=$125;
 }
 $127=$1;
 $128=(($127+284)|0);
 $129=(($128+8)|0);
 HEAP32[(($129)>>2)]=0;
 STACKTOP=sp;return ((0)|0);
}


function _copy_buffer($gfc,$buffer,$size,$mp3data){
 $gfc=($gfc)|0;
 $buffer=($buffer)|0;
 $size=($size)|0;
 $mp3data=($mp3data)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$minimum=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$13=0,$14=0,$16=0,$17=0,$18=0,$19=0,$20=0,$21=0;
 var $22=0,$23=0,$24=0,$25=0,$26=0,$27=0,$28=0,$29=0,$31=0,$33=0,label=0;
 var sp=0;sp=STACKTOP;






 $2=$gfc;
 $3=$buffer;
 $4=$size;
 $5=$mp3data;
 $6=$2;
 $7=$3;
 $8=$4;
 $9=((_do_copy_buffer($6,$7,$8))|0);
 $minimum=$9;
 $10=$minimum;
 $11=($10|0)>0;
 do {
  if ($11) {
   $13=$5;
   $14=($13|0)!=0;
   if (!($14)) {
    break;
   }
   $16=$2;
   $17=(($16+85752)|0);
   $18=$3;
   $19=$minimum;
   _UpdateMusicCRC($17,$18,$19);
   $20=$minimum;
   $21=$2;
   $22=(($21+85760)|0);
   $23=(($22+28)|0);
   $24=((HEAP32[(($23)>>2)])|0);
   $25=((($24)+($20))|0);
   HEAP32[(($23)>>2)]=$25;
   $26=$2;
   $27=$3;
   $28=$minimum;
   $29=((_do_gain_analysis($26,$27,$28))|0);
   $1=$29;
   $33=$1;
   STACKTOP=sp;return (($33)|0);
  }
 } while(0);
 $31=$minimum;
 $1=$31;
 $33=$1;
 STACKTOP=sp;return (($33)|0);
}


function _init_bit_stream_w($gfc){
 $gfc=($gfc)|0;
 var $1=0,$esv=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$14=0,$15=0,$16=0,$17=0,$18=0,$19=0;
 var $20=0,$21=0,$22=0,$23=0,$24=0,$25=0,$26=0,$27=0,$28=0,$29=0,$30=0,label=0;
 var sp=0;sp=STACKTOP;


 $1=$gfc;
 $2=$1;
 $3=(($2+27824)|0);
 $esv=$3;
 $4=$esv;
 $5=(($4+24308)|0);
 HEAP32[(($5)>>2)]=0;
 $6=$esv;
 $7=(($6+24304)|0);
 HEAP32[(($7)>>2)]=0;
 $8=$esv;
 $9=(($8+24304)|0);
 $10=((HEAP32[(($9)>>2)])|0);
 $11=$esv;
 $12=(($11+12016)|0);
 $13=(($12+((($10)*(48))&-1))|0);
 $14=(($13)|0);
 HEAP32[(($14)>>2)]=0;
 $15=((_malloc(147456))|0);
 $16=$1;
 $17=(($16+284)|0);
 $18=(($17)|0);
 HEAP32[(($18)>>2)]=$15;
 $19=$1;
 $20=(($19+284)|0);
 $21=(($20+4)|0);
 HEAP32[(($21)>>2)]=147456;
 $22=$1;
 $23=(($22+284)|0);
 $24=(($23+12)|0);
 HEAP32[(($24)>>2)]=-1;
 $25=$1;
 $26=(($25+284)|0);
 $27=(($26+16)|0);
 HEAP32[(($27)>>2)]=0;
 $28=$1;
 $29=(($28+284)|0);
 $30=(($29+8)|0);
 HEAP32[(($30)>>2)]=0;
 STACKTOP=sp;return;
}


function _calcFrameLength($cfg,$kbps,$pad){
 $cfg=($cfg)|0;
 $kbps=($kbps)|0;
 $pad=($pad)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$14=0,$15=0,$16=0,$17=0,label=0;
 var sp=0;sp=STACKTOP;



 $1=$cfg;
 $2=$kbps;
 $3=$pad;
 $4=$1;
 $5=(($4)|0);
 $6=((HEAP32[(($5)>>2)])|0);
 $7=((($6)+(1))|0);
 $8=((($7)*(72000))&-1);
 $9=$2;
 $10=(Math_imul($8,$9)|0);
 $11=$1;
 $12=(($11+48)|0);
 $13=((HEAP32[(($12)>>2)])|0);
 $14=(((($10|0))/(($13|0)))&-1);
 $15=$3;
 $16=((($14)+($15))|0);
 $17=($16<<3);
 STACKTOP=sp;return (($17)|0);
}


function _CRC_update($value,$crc){
 $value=($value)|0;
 $crc=($crc)|0;
 var $1=0,$2=0,$i=0,$3=0,$4=0,$6=0,$7=0,$9=0,$10=0,$11=0,$12=0,$13=0,$14=0,$15=0,$16=0,$17=0,$19=0,$20=0,$23=0,$24=0;
 var $26=0,label=0;
 var sp=0;sp=STACKTOP;



 $1=$value;
 $2=$crc;
 $3=$1;
 $4=$3<<8;
 $1=$4;
 $i=0;
 while(1) {
  $6=$i;
  $7=($6|0)<8;
  if (!($7)) {
   break;
  }
  $9=$1;
  $10=$9<<1;
  $1=$10;
  $11=$2;
  $12=$11<<1;
  $2=$12;
  $13=$2;
  $14=$1;
  $15=$13^$14;
  $16=$15&65536;
  $17=($16|0)!=0;
  if ($17) {
   $19=$2;
   $20=$19^32773;
   $2=$20;
  }
  $23=$i;
  $24=((($23)+(1))|0);
  $i=$24;
 }
 $26=$2;
 STACKTOP=sp;return (($26)|0);
}


function _drain_into_ancillary($gfc,$remainingBits){
 $gfc=($gfc)|0;
 $remainingBits=($remainingBits)|0;
 var $1=0,$2=0,$cfg=0,$esv=0,$i=0,$version=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$10=0,$11=0,$12=0,$14=0,$15=0,$17=0,$18=0,$19=0;
 var $21=0,$22=0,$24=0,$25=0,$26=0,$28=0,$29=0,$31=0,$32=0,$33=0,$35=0,$36=0,$38=0,$39=0,$40=0,$43=0,$44=0,$45=0,$46=0,$48=0;
 var $49=0,$51=0,$53=0,$54=0,$55=0,$56=0,$57=0,$58=0,$59=0,$60=0,$62=0,$63=0,$68=0,$69=0,$71=0,$72=0,$73=0,$74=0,$75=0,$76=0;
 var $77=0,$78=0,$79=0,$80=0,$81=0,$82=0,$83=0,$84=0,$86=0,$87=0,label=0;
 var sp=0;sp=STACKTOP;






 $1=$gfc;
 $2=$remainingBits;
 $3=$1;
 $4=(($3+16)|0);
 $cfg=$4;
 $5=$1;
 $6=(($5+27824)|0);
 $esv=$6;
 $7=$2;
 $8=($7|0)>=8;
 if ($8) {
  $10=$1;
  _putbits2($10,76,8);
  $11=$2;
  $12=((($11)-(8))|0);
  $2=$12;
 }
 $14=$2;
 $15=($14|0)>=8;
 if ($15) {
  $17=$1;
  _putbits2($17,65,8);
  $18=$2;
  $19=((($18)-(8))|0);
  $2=$19;
 }
 $21=$2;
 $22=($21|0)>=8;
 if ($22) {
  $24=$1;
  _putbits2($24,77,8);
  $25=$2;
  $26=((($25)-(8))|0);
  $2=$26;
 }
 $28=$2;
 $29=($28|0)>=8;
 if ($29) {
  $31=$1;
  _putbits2($31,69,8);
  $32=$2;
  $33=((($32)-(8))|0);
  $2=$33;
 }
 $35=$2;
 $36=($35|0)>=32;
 if ($36) {
  $38=((_get_lame_short_version())|0);
  $version=$38;
  $39=$2;
  $40=($39|0)>=32;
  if ($40) {
   $i=0;
   while(1) {
    $43=$i;
    $44=$version;
    $45=((_strlen((($44)|0)))|0);
    $46=($43|0)<($45|0);
    if ($46) {
     $48=$2;
     $49=($48|0)>=8;
     $51=$49;
    } else {
     $51=0;
    }

    if (!($51)) {
     break;
    }
    $53=$2;
    $54=((($53)-(8))|0);
    $2=$54;
    $55=$1;
    $56=$i;
    $57=$version;
    $58=(($57+$56)|0);
    $59=((HEAP8[($58)])|0);
    $60=(($59<<24)>>24);
    _putbits2($55,$60,8);
    $62=$i;
    $63=((($62)+(1))|0);
    $i=$63;
   }
  }
 }
 while(1) {
  $68=$2;
  $69=($68|0)>=1;
  if (!($69)) {
   break;
  }
  $71=$1;
  $72=$esv;
  $73=(($72+24312)|0);
  $74=((HEAP32[(($73)>>2)])|0);
  _putbits2($71,$74,1);
  $75=$cfg;
  $76=(($75+128)|0);
  $77=((HEAP32[(($76)>>2)])|0);
  $78=($77|0)!=0;
  $79=$78^1;
  $80=($79&1);
  $81=$esv;
  $82=(($81+24312)|0);
  $83=((HEAP32[(($82)>>2)])|0);
  $84=$83^$80;
  HEAP32[(($82)>>2)]=$84;
  $86=$2;
  $87=((($86)-(1))|0);
  $2=$87;
 }
 STACKTOP=sp;return;
}


function _putbits_noheaders($gfc,$val,$j){
 $gfc=($gfc)|0;
 $val=($val)|0;
 $j=($j)|0;
 var $1=0,$2=0,$3=0,$bs=0,$k=0,$4=0,$5=0,$7=0,$8=0,$10=0,$11=0,$12=0,$13=0,$15=0,$16=0,$17=0,$18=0,$19=0,$20=0,$21=0;
 var $22=0,$23=0,$24=0,$25=0,$26=0,$27=0,$29=0,$30=0,$31=0,$32=0,$33=0,$35=0,$37=0,$38=0,$39=0,$41=0,$42=0,$43=0,$44=0,$45=0;
 var $46=0,$47=0,$48=0,$49=0,$50=0,$51=0,$52=0,$53=0,$54=0,$55=0,$56=0,$57=0,$58=0,$59=0,$60=0,$61=0,$62=0,$63=0,$64=0,$65=0;
 var $66=0,$67=0,$68=0,$69=0,$70=0,$71=0,$72=0,label=0;
 var sp=0;sp=STACKTOP;





 $1=$gfc;
 $2=$val;
 $3=$j;
 $4=$1;
 $5=(($4+284)|0);
 $bs=$5;
 while(1) {
  $7=$3;
  $8=($7|0)>0;
  if (!($8)) {
   break;
  }
  $10=$bs;
  $11=(($10+16)|0);
  $12=((HEAP32[(($11)>>2)])|0);
  $13=($12|0)==0;
  if ($13) {
   $15=$bs;
   $16=(($15+16)|0);
   HEAP32[(($16)>>2)]=8;
   $17=$bs;
   $18=(($17+12)|0);
   $19=((HEAP32[(($18)>>2)])|0);
   $20=((($19)+(1))|0);
   HEAP32[(($18)>>2)]=$20;
   $21=$bs;
   $22=(($21+12)|0);
   $23=((HEAP32[(($22)>>2)])|0);
   $24=$bs;
   $25=(($24)|0);
   $26=((HEAP32[(($25)>>2)])|0);
   $27=(($26+$23)|0);
   HEAP8[($27)]=0;
  }
  $29=$3;
  $30=$bs;
  $31=(($30+16)|0);
  $32=((HEAP32[(($31)>>2)])|0);
  $33=($29|0)<($32|0);
  if ($33) {
   $35=$3;
   $41=$35;
  } else {
   $37=$bs;
   $38=(($37+16)|0);
   $39=((HEAP32[(($38)>>2)])|0);
   $41=$39;
  }

  $k=$41;
  $42=$k;
  $43=$3;
  $44=((($43)-($42))|0);
  $3=$44;
  $45=$k;
  $46=$bs;
  $47=(($46+16)|0);
  $48=((HEAP32[(($47)>>2)])|0);
  $49=((($48)-($45))|0);
  HEAP32[(($47)>>2)]=$49;
  $50=$2;
  $51=$3;
  $52=$50>>($51|0);
  $53=$bs;
  $54=(($53+16)|0);
  $55=((HEAP32[(($54)>>2)])|0);
  $56=$52<<$55;
  $57=$bs;
  $58=(($57+12)|0);
  $59=((HEAP32[(($58)>>2)])|0);
  $60=$bs;
  $61=(($60)|0);
  $62=((HEAP32[(($61)>>2)])|0);
  $63=(($62+$59)|0);
  $64=((HEAP8[($63)])|0);
  $65=($64&255);
  $66=$65|$56;
  $67=(($66)&255);
  HEAP8[($63)]=$67;
  $68=$k;
  $69=$bs;
  $70=(($69+8)|0);
  $71=((HEAP32[(($70)>>2)])|0);
  $72=((($71)+($68))|0);
  HEAP32[(($70)>>2)]=$72;
 }
 STACKTOP=sp;return;
}


function _encodeSideInfo2($gfc,$bitsPerFrame){
 $gfc=($gfc)|0;
 $bitsPerFrame=($bitsPerFrame)|0;
 var $1=0,$2=0,$cfg=0,$eov=0,$esv=0,$l3_side=0,$gr=0,$ch=0,$band=0,$gi=0,$gi1=0,$old=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0;
 var $11=0,$12=0,$13=0,$14=0,$15=0,$16=0,$17=0,$18=0,$19=0,$20=0,$21=0,$22=0,$23=0,$24=0,$25=0,$26=0,$27=0,$28=0,$29=0,$30=0;
 var $31=0,$32=0,$34=0,$36=0,$38=0,$39=0,$40=0,$41=0,$42=0,$43=0,$44=0,$45=0,$46=0,$47=0,$48=0,$49=0,$50=0,$51=0,$52=0,$53=0;
 var $54=0,$55=0,$56=0,$57=0,$58=0,$59=0,$60=0,$61=0,$62=0,$63=0,$64=0,$65=0,$66=0,$67=0,$68=0,$69=0,$70=0,$71=0,$72=0,$73=0;
 var $74=0,$75=0,$76=0,$77=0,$78=0,$79=0,$80=0,$81=0,$82=0,$83=0,$84=0,$85=0,$86=0,$87=0,$88=0,$89=0,$91=0,$93=0,$94=0,$95=0;
 var $96=0,$98=0,$99=0,$100=0,$101=0,$102=0,$103=0,$104=0,$105=0,$107=0,$108=0,$109=0,$110=0,$112=0,$113=0,$114=0,$115=0,$118=0,$119=0,$120=0;
 var $121=0,$122=0,$125=0,$126=0,$128=0,$129=0,$130=0,$131=0,$132=0,$133=0,$134=0,$135=0,$137=0,$138=0,$141=0,$142=0,$145=0,$146=0,$149=0,$150=0;
 var $151=0,$152=0,$153=0,$155=0,$156=0,$157=0,$158=0,$159=0,$160=0,$161=0,$162=0,$163=0,$164=0,$165=0,$166=0,$167=0,$168=0,$169=0,$170=0,$171=0;
 var $172=0,$173=0,$174=0,$175=0,$176=0,$177=0,$178=0,$179=0,$180=0,$181=0,$182=0,$183=0,$184=0,$185=0,$187=0,$188=0,$189=0,$190=0,$191=0,$192=0;
 var $193=0,$194=0,$195=0,$196=0,$197=0,$198=0,$199=0,$200=0,$202=0,$203=0,$204=0,$206=0,$207=0,$208=0,$209=0,$210=0,$211=0,$212=0,$213=0,$214=0;
 var $215=0,$217=0,$218=0,$219=0,$221=0,$222=0,$223=0,$224=0,$225=0,$226=0,$227=0,$228=0,$229=0,$230=0,$231=0,$232=0,$233=0,$234=0,$235=0,$236=0;
 var $237=0,$238=0,$239=0,$240=0,$242=0,$243=0,$244=0,$245=0,$246=0,$247=0,$249=0,$250=0,$251=0,$253=0,$254=0,$255=0,$256=0,$257=0,$258=0,$259=0;
 var $260=0,$261=0,$262=0,$264=0,$265=0,$266=0,$268=0,$269=0,$270=0,$271=0,$272=0,$273=0,$274=0,$275=0,$276=0,$277=0,$279=0,$280=0,$281=0,$283=0;
 var $284=0,$285=0,$286=0,$287=0,$288=0,$289=0,$290=0,$291=0,$292=0,$293=0,$294=0,$295=0,$297=0,$298=0,$299=0,$300=0,$301=0,$302=0,$303=0,$304=0;
 var $305=0,$306=0,$307=0,$308=0,$310=0,$311=0,$314=0,$315=0,$318=0,$319=0,$320=0,$321=0,$322=0,$323=0,$324=0,$325=0,$326=0,$327=0,$328=0,$330=0;
 var $331=0,$332=0,$333=0,$334=0,$336=0,$337=0,$338=0,$339=0,$340=0,$341=0,$342=0,$343=0,$344=0,$345=0,$346=0,$347=0,$348=0,$349=0,$350=0,$351=0;
 var $352=0,$353=0,$354=0,$355=0,$356=0,$357=0,$358=0,$359=0,$360=0,$361=0,$362=0,$363=0,$364=0,$365=0,$366=0,$368=0,$369=0,$370=0,$371=0,$372=0;
 var $373=0,$374=0,$375=0,$376=0,$377=0,$378=0,$379=0,$380=0,$381=0,$383=0,$384=0,$385=0,$387=0,$388=0,$389=0,$390=0,$391=0,$392=0,$393=0,$394=0;
 var $395=0,$396=0,$398=0,$399=0,$400=0,$402=0,$403=0,$404=0,$405=0,$406=0,$407=0,$408=0,$409=0,$410=0,$411=0,$412=0,$413=0,$414=0,$415=0,$416=0;
 var $417=0,$418=0,$419=0,$420=0,$421=0,$423=0,$424=0,$425=0,$426=0,$427=0,$428=0,$430=0,$431=0,$432=0,$434=0,$435=0,$436=0,$437=0,$438=0,$439=0;
 var $440=0,$441=0,$442=0,$443=0,$445=0,$446=0,$447=0,$449=0,$450=0,$451=0,$452=0,$453=0,$454=0,$455=0,$456=0,$457=0,$458=0,$460=0,$461=0,$462=0;
 var $464=0,$465=0,$466=0,$467=0,$468=0,$469=0,$470=0,$471=0,$472=0,$473=0,$474=0,$475=0,$476=0,$478=0,$479=0,$480=0,$481=0,$482=0,$483=0,$484=0;
 var $485=0,$487=0,$488=0,$491=0,$492=0,$493=0,$494=0,$496=0,$497=0,$498=0,$499=0,$500=0,$501=0,$502=0,$503=0,$504=0,$506=0,$507=0,$508=0,$509=0;
 var $510=0,$511=0,$512=0,$513=0,$514=0,$515=0,$516=0,$517=0,$518=0,$519=0,$520=0,$521=0,$522=0,$523=0,$524=0,$525=0,$526=0,$527=0,$528=0,$529=0;
 var $530=0,$531=0,$532=0,$533=0,$534=0,$535=0,$537=0,label=0;
 var tempVarArgs=0;
 var sp=0;sp=STACKTOP;












 $1=$gfc;
 $2=$bitsPerFrame;
 $3=$1;
 $4=(($3+16)|0);
 $cfg=$4;
 $5=$1;
 $6=(($5+84040)|0);
 $eov=$6;
 $7=$1;
 $8=(($7+27824)|0);
 $esv=$8;
 $9=$1;
 $10=(($9+304)|0);
 $l3_side=$10;
 $11=$esv;
 $12=(($11+24304)|0);
 $13=((HEAP32[(($12)>>2)])|0);
 $14=$esv;
 $15=(($14+12016)|0);
 $16=(($15+((($13)*(48))&-1))|0);
 $17=(($16+4)|0);
 HEAP32[(($17)>>2)]=0;
 $18=$esv;
 $19=(($18+24304)|0);
 $20=((HEAP32[(($19)>>2)])|0);
 $21=$esv;
 $22=(($21+12016)|0);
 $23=(($22+((($20)*(48))&-1))|0);
 $24=(($23+8)|0);
 $25=$24;
 $26=$cfg;
 $27=(($26+8)|0);
 $28=((HEAP32[(($27)>>2)])|0);
 _memset((((($25)|0))|0), ((((0)|0))|0), (((($28)|0))|0))|0;
 $29=$cfg;
 $30=(($29+48)|0);
 $31=((HEAP32[(($30)>>2)])|0);
 $32=($31|0)<16000;
 if ($32) {
  $34=$1;
  _writeheader($34,4094,12);
 } else {
  $36=$1;
  _writeheader($36,4095,12);
 }
 $38=$1;
 $39=$cfg;
 $40=(($39)|0);
 $41=((HEAP32[(($40)>>2)])|0);
 _writeheader($38,$41,1);
 $42=$1;
 _writeheader($42,1,2);
 $43=$1;
 $44=$cfg;
 $45=(($44+144)|0);
 $46=((HEAP32[(($45)>>2)])|0);
 $47=($46|0)!=0;
 $48=$47^1;
 $49=($48&1);
 _writeheader($43,$49,1);
 $50=$1;
 $51=$eov;
 $52=(($51+704)|0);
 $53=((HEAP32[(($52)>>2)])|0);
 _writeheader($50,$53,4);
 $54=$1;
 $55=$cfg;
 $56=(($55+4)|0);
 $57=((HEAP32[(($56)>>2)])|0);
 _writeheader($54,$57,2);
 $58=$1;
 $59=$eov;
 $60=(($59+712)|0);
 $61=((HEAP32[(($60)>>2)])|0);
 _writeheader($58,$61,1);
 $62=$1;
 $63=$cfg;
 $64=(($63+156)|0);
 $65=((HEAP32[(($64)>>2)])|0);
 _writeheader($62,$65,1);
 $66=$1;
 $67=$cfg;
 $68=(($67+164)|0);
 $69=((HEAP32[(($68)>>2)])|0);
 _writeheader($66,$69,2);
 $70=$1;
 $71=$eov;
 $72=(($71+716)|0);
 $73=((HEAP32[(($72)>>2)])|0);
 _writeheader($70,$73,2);
 $74=$1;
 $75=$cfg;
 $76=(($75+148)|0);
 $77=((HEAP32[(($76)>>2)])|0);
 _writeheader($74,$77,1);
 $78=$1;
 $79=$cfg;
 $80=(($79+152)|0);
 $81=((HEAP32[(($80)>>2)])|0);
 _writeheader($78,$81,1);
 $82=$1;
 $83=$cfg;
 $84=(($83+160)|0);
 $85=((HEAP32[(($84)>>2)])|0);
 _writeheader($82,$85,2);
 $86=$cfg;
 $87=(($86+144)|0);
 $88=((HEAP32[(($87)>>2)])|0);
 $89=($88|0)!=0;
 if ($89) {
  $91=$1;
  _writeheader($91,0,16);
 }
 $93=$cfg;
 $94=(($93)|0);
 $95=((HEAP32[(($94)>>2)])|0);
 $96=($95|0)==1;
 if ($96) {
  $98=$1;
  $99=$l3_side;
  $100=(($99+21008)|0);
  $101=((HEAP32[(($100)>>2)])|0);
  _writeheader($98,$101,9);
  $102=$cfg;
  $103=(($102+56)|0);
  $104=((HEAP32[(($103)>>2)])|0);
  $105=($104|0)==2;
  if ($105) {
   $107=$1;
   $108=$l3_side;
   $109=(($108+21012)|0);
   $110=((HEAP32[(($109)>>2)])|0);
   _writeheader($107,$110,3);
  } else {
   $112=$1;
   $113=$l3_side;
   $114=(($113+21012)|0);
   $115=((HEAP32[(($114)>>2)])|0);
   _writeheader($112,$115,5);
  }
  $ch=0;
  while(1) {
   $118=$ch;
   $119=$cfg;
   $120=(($119+56)|0);
   $121=((HEAP32[(($120)>>2)])|0);
   $122=($118|0)<($121|0);
   if (!($122)) {
    break;
   }
   $band=0;
   while(1) {
    $125=$band;
    $126=($125|0)<4;
    if (!($126)) {
     break;
    }
    $128=$1;
    $129=$band;
    $130=$ch;
    $131=$l3_side;
    $132=(($131+21024)|0);
    $133=(($132+($130<<4))|0);
    $134=(($133+($129<<2))|0);
    $135=((HEAP32[(($134)>>2)])|0);
    _writeheader($128,$135,1);
    $137=$band;
    $138=((($137)+(1))|0);
    $band=$138;
   }
   $141=$ch;
   $142=((($141)+(1))|0);
   $ch=$142;
  }
  $gr=0;
  while(1) {
   $145=$gr;
   $146=($145|0)<2;
   if (!($146)) {
    break;
   }
   $ch=0;
   while(1) {
    $149=$ch;
    $150=$cfg;
    $151=(($150+56)|0);
    $152=((HEAP32[(($151)>>2)])|0);
    $153=($149|0)<($152|0);
    if (!($153)) {
     break;
    }
    $155=$ch;
    $156=$gr;
    $157=$l3_side;
    $158=(($157)|0);
    $159=(($158+((($156)*(10504))&-1))|0);
    $160=(($159+((($155)*(5252))&-1))|0);
    $gi=$160;
    $161=$1;
    $162=$gi;
    $163=(($162+4768)|0);
    $164=((HEAP32[(($163)>>2)])|0);
    $165=$gi;
    $166=(($165+4844)|0);
    $167=((HEAP32[(($166)>>2)])|0);
    $168=((($164)+($167))|0);
    _writeheader($161,$168,12);
    $169=$1;
    $170=$gi;
    $171=(($170+4772)|0);
    $172=((HEAP32[(($171)>>2)])|0);
    $173=(((($172|0))/(2))&-1);
    _writeheader($169,$173,9);
    $174=$1;
    $175=$gi;
    $176=(($175+4780)|0);
    $177=((HEAP32[(($176)>>2)])|0);
    _writeheader($174,$177,8);
    $178=$1;
    $179=$gi;
    $180=(($179+4784)|0);
    $181=((HEAP32[(($180)>>2)])|0);
    _writeheader($178,$181,4);
    $182=$gi;
    $183=(($182+4788)|0);
    $184=((HEAP32[(($183)>>2)])|0);
    $185=($184|0)!=0;
    if ($185) {
     $187=$1;
     _writeheader($187,1,1);
     $188=$1;
     $189=$gi;
     $190=(($189+4788)|0);
     $191=((HEAP32[(($190)>>2)])|0);
     _writeheader($188,$191,2);
     $192=$1;
     $193=$gi;
     $194=(($193+4792)|0);
     $195=((HEAP32[(($194)>>2)])|0);
     _writeheader($192,$195,1);
     $196=$gi;
     $197=(($196+4796)|0);
     $198=(($197)|0);
     $199=((HEAP32[(($198)>>2)])|0);
     $200=($199|0)==14;
     if ($200) {
      $202=$gi;
      $203=(($202+4796)|0);
      $204=(($203)|0);
      HEAP32[(($204)>>2)]=16;
     }
     $206=$1;
     $207=$gi;
     $208=(($207+4796)|0);
     $209=(($208)|0);
     $210=((HEAP32[(($209)>>2)])|0);
     _writeheader($206,$210,5);
     $211=$gi;
     $212=(($211+4796)|0);
     $213=(($212+4)|0);
     $214=((HEAP32[(($213)>>2)])|0);
     $215=($214|0)==14;
     if ($215) {
      $217=$gi;
      $218=(($217+4796)|0);
      $219=(($218+4)|0);
      HEAP32[(($219)>>2)]=16;
     }
     $221=$1;
     $222=$gi;
     $223=(($222+4796)|0);
     $224=(($223+4)|0);
     $225=((HEAP32[(($224)>>2)])|0);
     _writeheader($221,$225,5);
     $226=$1;
     $227=$gi;
     $228=(($227+4808)|0);
     $229=(($228)|0);
     $230=((HEAP32[(($229)>>2)])|0);
     _writeheader($226,$230,3);
     $231=$1;
     $232=$gi;
     $233=(($232+4808)|0);
     $234=(($233+4)|0);
     $235=((HEAP32[(($234)>>2)])|0);
     _writeheader($231,$235,3);
     $236=$1;
     $237=$gi;
     $238=(($237+4808)|0);
     $239=(($238+8)|0);
     $240=((HEAP32[(($239)>>2)])|0);
     _writeheader($236,$240,3);
    } else {
     $242=$1;
     _writeheader($242,0,1);
     $243=$gi;
     $244=(($243+4796)|0);
     $245=(($244)|0);
     $246=((HEAP32[(($245)>>2)])|0);
     $247=($246|0)==14;
     if ($247) {
      $249=$gi;
      $250=(($249+4796)|0);
      $251=(($250)|0);
      HEAP32[(($251)>>2)]=16;
     }
     $253=$1;
     $254=$gi;
     $255=(($254+4796)|0);
     $256=(($255)|0);
     $257=((HEAP32[(($256)>>2)])|0);
     _writeheader($253,$257,5);
     $258=$gi;
     $259=(($258+4796)|0);
     $260=(($259+4)|0);
     $261=((HEAP32[(($260)>>2)])|0);
     $262=($261|0)==14;
     if ($262) {
      $264=$gi;
      $265=(($264+4796)|0);
      $266=(($265+4)|0);
      HEAP32[(($266)>>2)]=16;
     }
     $268=$1;
     $269=$gi;
     $270=(($269+4796)|0);
     $271=(($270+4)|0);
     $272=((HEAP32[(($271)>>2)])|0);
     _writeheader($268,$272,5);
     $273=$gi;
     $274=(($273+4796)|0);
     $275=(($274+8)|0);
     $276=((HEAP32[(($275)>>2)])|0);
     $277=($276|0)==14;
     if ($277) {
      $279=$gi;
      $280=(($279+4796)|0);
      $281=(($280+8)|0);
      HEAP32[(($281)>>2)]=16;
     }
     $283=$1;
     $284=$gi;
     $285=(($284+4796)|0);
     $286=(($285+8)|0);
     $287=((HEAP32[(($286)>>2)])|0);
     _writeheader($283,$287,5);
     $288=$1;
     $289=$gi;
     $290=(($289+4824)|0);
     $291=((HEAP32[(($290)>>2)])|0);
     _writeheader($288,$291,4);
     $292=$1;
     $293=$gi;
     $294=(($293+4828)|0);
     $295=((HEAP32[(($294)>>2)])|0);
     _writeheader($292,$295,3);
    }
    $297=$1;
    $298=$gi;
    $299=(($298+4832)|0);
    $300=((HEAP32[(($299)>>2)])|0);
    _writeheader($297,$300,1);
    $301=$1;
    $302=$gi;
    $303=(($302+4836)|0);
    $304=((HEAP32[(($303)>>2)])|0);
    _writeheader($301,$304,1);
    $305=$1;
    $306=$gi;
    $307=(($306+4840)|0);
    $308=((HEAP32[(($307)>>2)])|0);
    _writeheader($305,$308,1);
    $310=$ch;
    $311=((($310)+(1))|0);
    $ch=$311;
   }
   $314=$gr;
   $315=((($314)+(1))|0);
   $gr=$315;
  }
 } else {
  $318=$1;
  $319=$l3_side;
  $320=(($319+21008)|0);
  $321=((HEAP32[(($320)>>2)])|0);
  _writeheader($318,$321,8);
  $322=$1;
  $323=$l3_side;
  $324=(($323+21012)|0);
  $325=((HEAP32[(($324)>>2)])|0);
  $326=$cfg;
  $327=(($326+56)|0);
  $328=((HEAP32[(($327)>>2)])|0);
  _writeheader($322,$325,$328);
  $gr=0;
  $ch=0;
  while(1) {
   $330=$ch;
   $331=$cfg;
   $332=(($331+56)|0);
   $333=((HEAP32[(($332)>>2)])|0);
   $334=($330|0)<($333|0);
   if (!($334)) {
    break;
   }
   $336=$ch;
   $337=$gr;
   $338=$l3_side;
   $339=(($338)|0);
   $340=(($339+((($337)*(10504))&-1))|0);
   $341=(($340+((($336)*(5252))&-1))|0);
   $gi1=$341;
   $342=$1;
   $343=$gi1;
   $344=(($343+4768)|0);
   $345=((HEAP32[(($344)>>2)])|0);
   $346=$gi1;
   $347=(($346+4844)|0);
   $348=((HEAP32[(($347)>>2)])|0);
   $349=((($345)+($348))|0);
   _writeheader($342,$349,12);
   $350=$1;
   $351=$gi1;
   $352=(($351+4772)|0);
   $353=((HEAP32[(($352)>>2)])|0);
   $354=(((($353|0))/(2))&-1);
   _writeheader($350,$354,9);
   $355=$1;
   $356=$gi1;
   $357=(($356+4780)|0);
   $358=((HEAP32[(($357)>>2)])|0);
   _writeheader($355,$358,8);
   $359=$1;
   $360=$gi1;
   $361=(($360+4784)|0);
   $362=((HEAP32[(($361)>>2)])|0);
   _writeheader($359,$362,9);
   $363=$gi1;
   $364=(($363+4788)|0);
   $365=((HEAP32[(($364)>>2)])|0);
   $366=($365|0)!=0;
   if ($366) {
    $368=$1;
    _writeheader($368,1,1);
    $369=$1;
    $370=$gi1;
    $371=(($370+4788)|0);
    $372=((HEAP32[(($371)>>2)])|0);
    _writeheader($369,$372,2);
    $373=$1;
    $374=$gi1;
    $375=(($374+4792)|0);
    $376=((HEAP32[(($375)>>2)])|0);
    _writeheader($373,$376,1);
    $377=$gi1;
    $378=(($377+4796)|0);
    $379=(($378)|0);
    $380=((HEAP32[(($379)>>2)])|0);
    $381=($380|0)==14;
    if ($381) {
     $383=$gi1;
     $384=(($383+4796)|0);
     $385=(($384)|0);
     HEAP32[(($385)>>2)]=16;
    }
    $387=$1;
    $388=$gi1;
    $389=(($388+4796)|0);
    $390=(($389)|0);
    $391=((HEAP32[(($390)>>2)])|0);
    _writeheader($387,$391,5);
    $392=$gi1;
    $393=(($392+4796)|0);
    $394=(($393+4)|0);
    $395=((HEAP32[(($394)>>2)])|0);
    $396=($395|0)==14;
    if ($396) {
     $398=$gi1;
     $399=(($398+4796)|0);
     $400=(($399+4)|0);
     HEAP32[(($400)>>2)]=16;
    }
    $402=$1;
    $403=$gi1;
    $404=(($403+4796)|0);
    $405=(($404+4)|0);
    $406=((HEAP32[(($405)>>2)])|0);
    _writeheader($402,$406,5);
    $407=$1;
    $408=$gi1;
    $409=(($408+4808)|0);
    $410=(($409)|0);
    $411=((HEAP32[(($410)>>2)])|0);
    _writeheader($407,$411,3);
    $412=$1;
    $413=$gi1;
    $414=(($413+4808)|0);
    $415=(($414+4)|0);
    $416=((HEAP32[(($415)>>2)])|0);
    _writeheader($412,$416,3);
    $417=$1;
    $418=$gi1;
    $419=(($418+4808)|0);
    $420=(($419+8)|0);
    $421=((HEAP32[(($420)>>2)])|0);
    _writeheader($417,$421,3);
   } else {
    $423=$1;
    _writeheader($423,0,1);
    $424=$gi1;
    $425=(($424+4796)|0);
    $426=(($425)|0);
    $427=((HEAP32[(($426)>>2)])|0);
    $428=($427|0)==14;
    if ($428) {
     $430=$gi1;
     $431=(($430+4796)|0);
     $432=(($431)|0);
     HEAP32[(($432)>>2)]=16;
    }
    $434=$1;
    $435=$gi1;
    $436=(($435+4796)|0);
    $437=(($436)|0);
    $438=((HEAP32[(($437)>>2)])|0);
    _writeheader($434,$438,5);
    $439=$gi1;
    $440=(($439+4796)|0);
    $441=(($440+4)|0);
    $442=((HEAP32[(($441)>>2)])|0);
    $443=($442|0)==14;
    if ($443) {
     $445=$gi1;
     $446=(($445+4796)|0);
     $447=(($446+4)|0);
     HEAP32[(($447)>>2)]=16;
    }
    $449=$1;
    $450=$gi1;
    $451=(($450+4796)|0);
    $452=(($451+4)|0);
    $453=((HEAP32[(($452)>>2)])|0);
    _writeheader($449,$453,5);
    $454=$gi1;
    $455=(($454+4796)|0);
    $456=(($455+8)|0);
    $457=((HEAP32[(($456)>>2)])|0);
    $458=($457|0)==14;
    if ($458) {
     $460=$gi1;
     $461=(($460+4796)|0);
     $462=(($461+8)|0);
     HEAP32[(($462)>>2)]=16;
    }
    $464=$1;
    $465=$gi1;
    $466=(($465+4796)|0);
    $467=(($466+8)|0);
    $468=((HEAP32[(($467)>>2)])|0);
    _writeheader($464,$468,5);
    $469=$1;
    $470=$gi1;
    $471=(($470+4824)|0);
    $472=((HEAP32[(($471)>>2)])|0);
    _writeheader($469,$472,4);
    $473=$1;
    $474=$gi1;
    $475=(($474+4828)|0);
    $476=((HEAP32[(($475)>>2)])|0);
    _writeheader($473,$476,3);
   }
   $478=$1;
   $479=$gi1;
   $480=(($479+4836)|0);
   $481=((HEAP32[(($480)>>2)])|0);
   _writeheader($478,$481,1);
   $482=$1;
   $483=$gi1;
   $484=(($483+4840)|0);
   $485=((HEAP32[(($484)>>2)])|0);
   _writeheader($482,$485,1);
   $487=$ch;
   $488=((($487)+(1))|0);
   $ch=$488;
  }
 }
 $491=$cfg;
 $492=(($491+144)|0);
 $493=((HEAP32[(($492)>>2)])|0);
 $494=($493|0)!=0;
 if ($494) {
  $496=$1;
  $497=$esv;
  $498=(($497+24304)|0);
  $499=((HEAP32[(($498)>>2)])|0);
  $500=$esv;
  $501=(($500+12016)|0);
  $502=(($501+((($499)*(48))&-1))|0);
  $503=(($502+8)|0);
  $504=(($503)|0);
  _CRC_writeheader($496,$504);
 }
 $506=$esv;
 $507=(($506+24304)|0);
 $508=((HEAP32[(($507)>>2)])|0);
 $old=$508;
 $509=$old;
 $510=((($509)+(1))|0);
 $511=$510&255;
 $512=$esv;
 $513=(($512+24304)|0);
 HEAP32[(($513)>>2)]=$511;
 $514=$old;
 $515=$esv;
 $516=(($515+12016)|0);
 $517=(($516+((($514)*(48))&-1))|0);
 $518=(($517)|0);
 $519=((HEAP32[(($518)>>2)])|0);
 $520=$2;
 $521=((($519)+($520))|0);
 $522=$esv;
 $523=(($522+24304)|0);
 $524=((HEAP32[(($523)>>2)])|0);
 $525=$esv;
 $526=(($525+12016)|0);
 $527=(($526+((($524)*(48))&-1))|0);
 $528=(($527)|0);
 HEAP32[(($528)>>2)]=$521;
 $529=$esv;
 $530=(($529+24304)|0);
 $531=((HEAP32[(($530)>>2)])|0);
 $532=$esv;
 $533=(($532+24308)|0);
 $534=((HEAP32[(($533)>>2)])|0);
 $535=($531|0)==($534|0);
 if (!($535)) {
  STACKTOP=sp;return;
 }
 $537=$1;
 _lame_errorf($537,16408,(((tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs))|0)); STACKTOP=tempVarArgs;
 STACKTOP=sp;return;
}


function _writeMainData($gfc){
 $gfc=($gfc)|0;
 var $1=0,$cfg=0,$l3_side=0,$gr=0,$ch=0,$sfb=0,$data_bits=0,$tot_bits=0,$gi=0,$slen1=0,$slen2=0,$gi1=0,$i=0,$sfb_partition=0,$scale_bits=0,$sfbs=0,$slen=0,$sfbs2=0,$slen3=0,$2=0;
 var $3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$12=0,$13=0,$16=0,$17=0,$18=0,$19=0,$20=0,$22=0,$23=0,$24=0,$25=0,$26=0,$27=0;
 var $28=0,$29=0,$30=0,$31=0,$32=0,$33=0,$34=0,$35=0,$36=0,$37=0,$39=0,$40=0,$41=0,$42=0,$43=0,$45=0,$46=0,$47=0,$48=0,$49=0;
 var $50=0,$53=0,$54=0,$55=0,$56=0,$57=0,$58=0,$59=0,$60=0,$61=0,$62=0,$64=0,$65=0,$68=0,$69=0,$70=0,$71=0,$72=0,$74=0,$75=0;
 var $76=0,$77=0,$78=0,$79=0,$82=0,$83=0,$84=0,$85=0,$86=0,$87=0,$88=0,$89=0,$90=0,$91=0,$93=0,$94=0,$96=0,$97=0,$98=0,$99=0;
 var $101=0,$102=0,$103=0,$104=0,$105=0,$107=0,$108=0,$109=0,$110=0,$111=0,$113=0,$114=0,$115=0,$116=0,$117=0,$118=0,$119=0,$120=0,$122=0,$123=0;
 var $126=0,$127=0,$131=0,$132=0,$133=0,$134=0,$135=0,$137=0,$138=0,$139=0,$140=0,$141=0,$142=0,$143=0,$144=0,$145=0,$146=0,$149=0,$150=0,$152=0;
 var $153=0,$154=0,$155=0,$156=0,$157=0,$158=0,$159=0,$160=0,$161=0,$162=0,$163=0,$165=0,$166=0,$167=0,$169=0,$170=0,$171=0,$172=0,$173=0,$174=0;
 var $175=0,$176=0,$177=0,$179=0,$180=0,$181=0,$182=0,$183=0,$184=0,$185=0,$188=0,$189=0,$190=0,$191=0,$192=0,$193=0,$194=0,$195=0,$196=0,$197=0;
 var $198=0,$200=0,$201=0,$202=0,$203=0,$204=0,$205=0,$206=0,$209=0,$210=0,$211=0,$212=0,$213=0,$214=0,$215=0,$216=0,$217=0,$218=0,$219=0,$221=0;
 var $222=0,$223=0,$224=0,$225=0,$226=0,$227=0,$230=0,$231=0,$232=0,$233=0,$234=0,$235=0,$237=0,$238=0,$239=0,$240=0,$243=0,$244=0,$246=0,$247=0;
 var $248=0,$249=0,$250=0,$253=0,$254=0,$256=0,$257=0,$258=0,$259=0,$260=0,$261=0,$262=0,$263=0,$264=0,$265=0,$266=0,$268=0,$269=0,$270=0,$272=0;
 var $273=0,$274=0,$275=0,$276=0,$277=0,$278=0,$280=0,$281=0,$282=0,$283=0,$284=0,$287=0,$288=0,$289=0,$290=0,$291=0,$293=0,$294=0,$295=0,$296=0;
 var $299=0,$300=0,$302=0,$303=0,$304=0,$305=0,$306=0,$308=0,$309=0,$310=0,$311=0,$312=0,$313=0,$314=0,$315=0,$316=0,$317=0,$319=0,$320=0,$323=0;
 var label=0;
 var sp=0;sp=STACKTOP;



















 $1=$gfc;
 $2=$1;
 $3=(($2+16)|0);
 $cfg=$3;
 $4=$1;
 $5=(($4+304)|0);
 $l3_side=$5;
 $tot_bits=0;
 $6=$cfg;
 $7=(($6)|0);
 $8=((HEAP32[(($7)>>2)])|0);
 $9=($8|0)==1;
 if ($9) {
  $gr=0;
  while(1) {
   $12=$gr;
   $13=($12|0)<2;
   if (!($13)) {
    break;
   }
   $ch=0;
   while(1) {
    $16=$ch;
    $17=$cfg;
    $18=(($17+56)|0);
    $19=((HEAP32[(($18)>>2)])|0);
    $20=($16|0)<($19|0);
    if (!($20)) {
     break;
    }
    $22=$ch;
    $23=$gr;
    $24=$l3_side;
    $25=(($24)|0);
    $26=(($25+((($23)*(10504))&-1))|0);
    $27=(($26+((($22)*(5252))&-1))|0);
    $gi=$27;
    $28=$gi;
    $29=(($28+4784)|0);
    $30=((HEAP32[(($29)>>2)])|0);
    $31=((7192+($30<<2))|0);
    $32=((HEAP32[(($31)>>2)])|0);
    $slen1=$32;
    $33=$gi;
    $34=(($33+4784)|0);
    $35=((HEAP32[(($34)>>2)])|0);
    $36=((7064+($35<<2))|0);
    $37=((HEAP32[(($36)>>2)])|0);
    $slen2=$37;
    $data_bits=0;
    $sfb=0;
    while(1) {
     $39=$sfb;
     $40=$gi;
     $41=(($40+4868)|0);
     $42=((HEAP32[(($41)>>2)])|0);
     $43=($39|0)<($42|0);
     if (!($43)) {
      break;
     }
     $45=$sfb;
     $46=$gi;
     $47=(($46+4608)|0);
     $48=(($47+($45<<2))|0);
     $49=((HEAP32[(($48)>>2)])|0);
     $50=($49|0)==-1;
     if ($50) {
     } else {
      $53=$1;
      $54=$sfb;
      $55=$gi;
      $56=(($55+4608)|0);
      $57=(($56+($54<<2))|0);
      $58=((HEAP32[(($57)>>2)])|0);
      $59=$slen1;
      _putbits2($53,$58,$59);
      $60=$slen1;
      $61=$data_bits;
      $62=((($61)+($60))|0);
      $data_bits=$62;
     }
     $64=$sfb;
     $65=((($64)+(1))|0);
     $sfb=$65;
    }
    while(1) {
     $68=$sfb;
     $69=$gi;
     $70=(($69+4860)|0);
     $71=((HEAP32[(($70)>>2)])|0);
     $72=($68|0)<($71|0);
     if (!($72)) {
      break;
     }
     $74=$sfb;
     $75=$gi;
     $76=(($75+4608)|0);
     $77=(($76+($74<<2))|0);
     $78=((HEAP32[(($77)>>2)])|0);
     $79=($78|0)==-1;
     if ($79) {
     } else {
      $82=$1;
      $83=$sfb;
      $84=$gi;
      $85=(($84+4608)|0);
      $86=(($85+($83<<2))|0);
      $87=((HEAP32[(($86)>>2)])|0);
      $88=$slen2;
      _putbits2($82,$87,$88);
      $89=$slen2;
      $90=$data_bits;
      $91=((($90)+($89))|0);
      $data_bits=$91;
     }
     $93=$sfb;
     $94=((($93)+(1))|0);
     $sfb=$94;
    }
    $96=$gi;
    $97=(($96+4788)|0);
    $98=((HEAP32[(($97)>>2)])|0);
    $99=($98|0)==2;
    if ($99) {
     $101=$1;
     $102=$gi;
     $103=((_ShortHuffmancodebits($101,$102))|0);
     $104=$data_bits;
     $105=((($104)+($103))|0);
     $data_bits=$105;
    } else {
     $107=$1;
     $108=$gi;
     $109=((_LongHuffmancodebits($107,$108))|0);
     $110=$data_bits;
     $111=((($110)+($109))|0);
     $data_bits=$111;
    }
    $113=$1;
    $114=$gi;
    $115=((_huffman_coder_count1($113,$114))|0);
    $116=$data_bits;
    $117=((($116)+($115))|0);
    $data_bits=$117;
    $118=$data_bits;
    $119=$tot_bits;
    $120=((($119)+($118))|0);
    $tot_bits=$120;
    $122=$ch;
    $123=((($122)+(1))|0);
    $ch=$123;
   }
   $126=$gr;
   $127=((($126)+(1))|0);
   $gr=$127;
  }
  $323=$tot_bits;
  STACKTOP=sp;return (($323)|0);
 }
 $gr=0;
 $ch=0;
 while(1) {
  $131=$ch;
  $132=$cfg;
  $133=(($132+56)|0);
  $134=((HEAP32[(($133)>>2)])|0);
  $135=($131|0)<($134|0);
  if (!($135)) {
   break;
  }
  $137=$ch;
  $138=$gr;
  $139=$l3_side;
  $140=(($139)|0);
  $141=(($140+((($138)*(10504))&-1))|0);
  $142=(($141+((($137)*(5252))&-1))|0);
  $gi1=$142;
  $scale_bits=0;
  $data_bits=0;
  $sfb=0;
  $sfb_partition=0;
  $143=$gi1;
  $144=(($143+4788)|0);
  $145=((HEAP32[(($144)>>2)])|0);
  $146=($145|0)==2;
  if ($146) {
   while(1) {
    $149=$sfb_partition;
    $150=($149|0)<4;
    if (!($150)) {
     break;
    }
    $152=$sfb_partition;
    $153=$gi1;
    $154=(($153+5188)|0);
    $155=((HEAP32[(($154)>>2)])|0);
    $156=(($155+($152<<2))|0);
    $157=((HEAP32[(($156)>>2)])|0);
    $158=(((($157|0))/(3))&-1);
    $sfbs=$158;
    $159=$sfb_partition;
    $160=$gi1;
    $161=(($160+5192)|0);
    $162=(($161+($159<<2))|0);
    $163=((HEAP32[(($162)>>2)])|0);
    $slen=$163;
    $i=0;
    while(1) {
     $165=$i;
     $166=$sfbs;
     $167=($165|0)<($166|0);
     if (!($167)) {
      break;
     }
     $169=$1;
     $170=$sfb;
     $171=((($170)*(3))&-1);
     $172=(($171)|0);
     $173=$gi1;
     $174=(($173+4608)|0);
     $175=(($174+($172<<2))|0);
     $176=((HEAP32[(($175)>>2)])|0);
     $177=($176|0)>0;
     if ($177) {
      $179=$sfb;
      $180=((($179)*(3))&-1);
      $181=(($180)|0);
      $182=$gi1;
      $183=(($182+4608)|0);
      $184=(($183+($181<<2))|0);
      $185=((HEAP32[(($184)>>2)])|0);
      $188=$185;
     } else {
      $188=0;
     }

     $189=$slen;
     _putbits2($169,$188,$189);
     $190=$1;
     $191=$sfb;
     $192=((($191)*(3))&-1);
     $193=((($192)+(1))|0);
     $194=$gi1;
     $195=(($194+4608)|0);
     $196=(($195+($193<<2))|0);
     $197=((HEAP32[(($196)>>2)])|0);
     $198=($197|0)>0;
     if ($198) {
      $200=$sfb;
      $201=((($200)*(3))&-1);
      $202=((($201)+(1))|0);
      $203=$gi1;
      $204=(($203+4608)|0);
      $205=(($204+($202<<2))|0);
      $206=((HEAP32[(($205)>>2)])|0);
      $209=$206;
     } else {
      $209=0;
     }

     $210=$slen;
     _putbits2($190,$209,$210);
     $211=$1;
     $212=$sfb;
     $213=((($212)*(3))&-1);
     $214=((($213)+(2))|0);
     $215=$gi1;
     $216=(($215+4608)|0);
     $217=(($216+($214<<2))|0);
     $218=((HEAP32[(($217)>>2)])|0);
     $219=($218|0)>0;
     if ($219) {
      $221=$sfb;
      $222=((($221)*(3))&-1);
      $223=((($222)+(2))|0);
      $224=$gi1;
      $225=(($224+4608)|0);
      $226=(($225+($223<<2))|0);
      $227=((HEAP32[(($226)>>2)])|0);
      $230=$227;
     } else {
      $230=0;
     }

     $231=$slen;
     _putbits2($211,$230,$231);
     $232=$slen;
     $233=((($232)*(3))&-1);
     $234=$scale_bits;
     $235=((($234)+($233))|0);
     $scale_bits=$235;
     $237=$i;
     $238=((($237)+(1))|0);
     $i=$238;
     $239=$sfb;
     $240=((($239)+(1))|0);
     $sfb=$240;
    }
    $243=$sfb_partition;
    $244=((($243)+(1))|0);
    $sfb_partition=$244;
   }
   $246=$1;
   $247=$gi1;
   $248=((_ShortHuffmancodebits($246,$247))|0);
   $249=$data_bits;
   $250=((($249)+($248))|0);
   $data_bits=$250;
  } else {
   while(1) {
    $253=$sfb_partition;
    $254=($253|0)<4;
    if (!($254)) {
     break;
    }
    $256=$sfb_partition;
    $257=$gi1;
    $258=(($257+5188)|0);
    $259=((HEAP32[(($258)>>2)])|0);
    $260=(($259+($256<<2))|0);
    $261=((HEAP32[(($260)>>2)])|0);
    $sfbs2=$261;
    $262=$sfb_partition;
    $263=$gi1;
    $264=(($263+5192)|0);
    $265=(($264+($262<<2))|0);
    $266=((HEAP32[(($265)>>2)])|0);
    $slen3=$266;
    $i=0;
    while(1) {
     $268=$i;
     $269=$sfbs2;
     $270=($268|0)<($269|0);
     if (!($270)) {
      break;
     }
     $272=$1;
     $273=$sfb;
     $274=$gi1;
     $275=(($274+4608)|0);
     $276=(($275+($273<<2))|0);
     $277=((HEAP32[(($276)>>2)])|0);
     $278=($277|0)>0;
     if ($278) {
      $280=$sfb;
      $281=$gi1;
      $282=(($281+4608)|0);
      $283=(($282+($280<<2))|0);
      $284=((HEAP32[(($283)>>2)])|0);
      $287=$284;
     } else {
      $287=0;
     }

     $288=$slen3;
     _putbits2($272,$287,$288);
     $289=$slen3;
     $290=$scale_bits;
     $291=((($290)+($289))|0);
     $scale_bits=$291;
     $293=$i;
     $294=((($293)+(1))|0);
     $i=$294;
     $295=$sfb;
     $296=((($295)+(1))|0);
     $sfb=$296;
    }
    $299=$sfb_partition;
    $300=((($299)+(1))|0);
    $sfb_partition=$300;
   }
   $302=$1;
   $303=$gi1;
   $304=((_LongHuffmancodebits($302,$303))|0);
   $305=$data_bits;
   $306=((($305)+($304))|0);
   $data_bits=$306;
  }
  $308=$1;
  $309=$gi1;
  $310=((_huffman_coder_count1($308,$309))|0);
  $311=$data_bits;
  $312=((($311)+($310))|0);
  $data_bits=$312;
  $313=$scale_bits;
  $314=$data_bits;
  $315=((($313)+($314))|0);
  $316=$tot_bits;
  $317=((($316)+($315))|0);
  $tot_bits=$317;
  $319=$ch;
  $320=((($319)+(1))|0);
  $ch=$320;
 }
 $323=$tot_bits;
 STACKTOP=sp;return (($323)|0);
}


function _do_copy_buffer($gfc,$buffer,$size){
 $gfc=($gfc)|0;
 $buffer=($buffer)|0;
 $size=($size)|0;
 var $1=0,$2=0,$3=0,$4=0,$bs=0,$minimum=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0,$15=0,$16=0,$18=0,$19=0,$20=0,$23=0;
 var $24=0,$25=0,$26=0,$27=0,$28=0,$29=0,$30=0,$31=0,$32=0,$34=0,label=0;
 var sp=0;sp=STACKTOP;






 $2=$gfc;
 $3=$buffer;
 $4=$size;
 $5=$2;
 $6=(($5+284)|0);
 $bs=$6;
 $7=$bs;
 $8=(($7+12)|0);
 $9=((HEAP32[(($8)>>2)])|0);
 $10=((($9)+(1))|0);
 $minimum=$10;
 $11=$minimum;
 $12=($11|0)<=0;
 if ($12) {
  $1=0;
  $34=$1;
  STACKTOP=sp;return (($34)|0);
 }
 $15=$4;
 $16=($15|0)!=0;
 do {
  if ($16) {
   $18=$minimum;
   $19=$4;
   $20=($18|0)>($19|0);
   if (!($20)) {
    break;
   }
   $1=-1;
   $34=$1;
   STACKTOP=sp;return (($34)|0);
  }
 } while(0);
 $23=$3;
 $24=$bs;
 $25=(($24)|0);
 $26=((HEAP32[(($25)>>2)])|0);
 $27=$minimum;
 (_memcpy((($23)|0), (($26)|0), $27)|0);
 $28=$bs;
 $29=(($28+12)|0);
 HEAP32[(($29)>>2)]=-1;
 $30=$bs;
 $31=(($30+16)|0);
 HEAP32[(($31)>>2)]=0;
 $32=$minimum;
 $1=$32;
 $34=$1;
 STACKTOP=sp;return (($34)|0);
}


function _do_gain_analysis($gfc,$buffer,$minimum){
 $gfc=($gfc)|0;
 $buffer=($buffer)|0;
 $minimum=($minimum)|0;
 var $1=0,$2=0,$3=0,$4=0,$cfg=0,$rsv=0,$rov=0,$pcm_buf=0,$mp3_in=0,$samples_out=0,$i=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0;
 var $14=0,$16=0,$18=0,$19=0,$21=0,$22=0,$23=0,$24=0,$25=0,$26=0,$27=0,$28=0,$29=0,$30=0,$31=0,$32=0,$35=0,$36=0,$38=0,$39=0;
 var $40=0,$41=0,$44=0,$45=0,$46=0,$48=0,$49=0,$50=0,$51=.0,$52=0,$53=0,$54=.0,$55=0,$57=0,$58=0,$59=0,$60=.0,$61=0,$62=0,$64=0;
 var $65=0,$66=0,$67=.0,$68=.0,$69=0,$70=0,$71=.0,$72=0,$74=0,$75=0,$76=0,$77=.0,$78=.0,$79=0,$80=0,$84=0,$85=0,$87=0,$88=0,$89=0;
 var $90=0,$93=0,$94=0,$95=0,$97=0,$98=0,$99=0,$100=.0,$101=0,$102=0,$103=.0,$104=0,$106=0,$107=0,$108=0,$109=.0,$110=0,$111=0,$113=0,$114=0;
 var $115=0,$116=.0,$117=.0,$118=0,$119=0,$120=.0,$121=0,$123=0,$124=0,$125=0,$126=.0,$127=.0,$128=0,$129=0,$133=0,$134=0,$138=0,$139=0,$140=0,$141=0;
 var $143=0,$144=0,$145=0,$146=0,$147=0,$148=0,$149=0,$150=0,$151=0,$152=0,$153=0,$154=0,$155=0,$162=0,$164=0,label=0;
 var sp=0;sp=STACKTOP;STACKTOP=(STACKTOP+9216)|0;







 $pcm_buf=((sp)|0);



 $2=$gfc;
 $3=$buffer;
 $4=$minimum;
 $5=$2;
 $6=(($5+16)|0);
 $cfg=$6;
 $7=$2;
 $8=(($7+85676)|0);
 $rsv=$8;
 $9=$2;
 $10=(($9+85680)|0);
 $rov=$10;
 $11=$cfg;
 $12=(($11+120)|0);
 $13=((HEAP32[(($12)>>2)])|0);
 $14=($13|0)!=0;
 do {
  if ($14) {
   $16=$4;
   $mp3_in=$16;
   $samples_out=-1;
   while(1) {
    $18=$samples_out;
    $19=($18|0)!=0;
    if (!($19)) {
     label = 35;
     break;
    }
    $21=$2;
    $22=(($21+85808)|0);
    $23=((HEAP32[(($22)>>2)])|0);
    $24=$3;
    $25=$mp3_in;
    $26=(($pcm_buf)|0);
    $27=(($26)|0);
    $28=(($pcm_buf+4608)|0);
    $29=(($28)|0);
    $30=((_hip_decode1_unclipped($23,$24,$25,$27,$29))|0);
    $samples_out=$30;
    $mp3_in=0;
    $31=$samples_out;
    $32=($31|0)==-1;
    if ($32) {
     $samples_out=0;
    }
    $35=$samples_out;
    $36=($35|0)>0;
    if ($36) {
     $38=$cfg;
     $39=(($38+116)|0);
     $40=((HEAP32[(($39)>>2)])|0);
     $41=($40|0)!=0;
     if ($41) {
      $i=0;
      while(1) {
       $44=$i;
       $45=$samples_out;
       $46=($44|0)<($45|0);
       if (!($46)) {
        break;
       }
       $48=$i;
       $49=(($pcm_buf)|0);
       $50=(($49+($48<<2))|0);
       $51=(+(HEAPF32[(($50)>>2)]));
       $52=$rov;
       $53=(($52+4)|0);
       $54=(+(HEAPF32[(($53)>>2)]));
       $55=$51>$54;
       if ($55) {
        $57=$i;
        $58=(($pcm_buf)|0);
        $59=(($58+($57<<2))|0);
        $60=(+(HEAPF32[(($59)>>2)]));
        $61=$rov;
        $62=(($61+4)|0);
        HEAPF32[(($62)>>2)]=$60;
       } else {
        $64=$i;
        $65=(($pcm_buf)|0);
        $66=(($65+($64<<2))|0);
        $67=(+(HEAPF32[(($66)>>2)]));
        $68=((-.0))-($67);
        $69=$rov;
        $70=(($69+4)|0);
        $71=(+(HEAPF32[(($70)>>2)]));
        $72=$68>$71;
        if ($72) {
         $74=$i;
         $75=(($pcm_buf)|0);
         $76=(($75+($74<<2))|0);
         $77=(+(HEAPF32[(($76)>>2)]));
         $78=((-.0))-($77);
         $79=$rov;
         $80=(($79+4)|0);
         HEAPF32[(($80)>>2)]=$78;
        }
       }
       $84=$i;
       $85=((($84)+(1))|0);
       $i=$85;
      }
      $87=$cfg;
      $88=(($87+56)|0);
      $89=((HEAP32[(($88)>>2)])|0);
      $90=($89|0)>1;
      if ($90) {
       $i=0;
       while(1) {
        $93=$i;
        $94=$samples_out;
        $95=($93|0)<($94|0);
        if (!($95)) {
         break;
        }
        $97=$i;
        $98=(($pcm_buf+4608)|0);
        $99=(($98+($97<<2))|0);
        $100=(+(HEAPF32[(($99)>>2)]));
        $101=$rov;
        $102=(($101+4)|0);
        $103=(+(HEAPF32[(($102)>>2)]));
        $104=$100>$103;
        if ($104) {
         $106=$i;
         $107=(($pcm_buf+4608)|0);
         $108=(($107+($106<<2))|0);
         $109=(+(HEAPF32[(($108)>>2)]));
         $110=$rov;
         $111=(($110+4)|0);
         HEAPF32[(($111)>>2)]=$109;
        } else {
         $113=$i;
         $114=(($pcm_buf+4608)|0);
         $115=(($114+($113<<2))|0);
         $116=(+(HEAPF32[(($115)>>2)]));
         $117=((-.0))-($116);
         $118=$rov;
         $119=(($118+4)|0);
         $120=(+(HEAPF32[(($119)>>2)]));
         $121=$117>$120;
         if ($121) {
          $123=$i;
          $124=(($pcm_buf+4608)|0);
          $125=(($124+($123<<2))|0);
          $126=(+(HEAPF32[(($125)>>2)]));
          $127=((-.0))-($126);
          $128=$rov;
          $129=(($128+4)|0);
          HEAPF32[(($129)>>2)]=$127;
         }
        }
        $133=$i;
        $134=((($133)+(1))|0);
        $i=$134;
       }
      }
     }
     $138=$cfg;
     $139=(($138+112)|0);
     $140=((HEAP32[(($139)>>2)])|0);
     $141=($140|0)!=0;
     if ($141) {
      $143=$rsv;
      $144=(($143)|0);
      $145=((HEAP32[(($144)>>2)])|0);
      $146=(($pcm_buf)|0);
      $147=(($146)|0);
      $148=(($pcm_buf+4608)|0);
      $149=(($148)|0);
      $150=$samples_out;
      $151=$cfg;
      $152=(($151+56)|0);
      $153=((HEAP32[(($152)>>2)])|0);
      $154=((_AnalyzeSamples($145,$147,$149,$150,$153))|0);
      $155=($154|0)==0;
      if ($155) {
       break;
      }
     }
    }
   }
   if ((label|0) == 35) {
    break;
   }
   $1=-6;
   $164=$1;
   STACKTOP=sp;return (($164)|0);
  }
 } while(0);
 $162=$4;
 $1=$162;
 $164=$1;
 STACKTOP=sp;return (($164)|0);
}


function _putbits2($gfc,$val,$j){
 $gfc=($gfc)|0;
 $val=($val)|0;
 $j=($j)|0;
 var $1=0,$2=0,$3=0,$esv=0,$bs=0,$k=0,$4=0,$5=0,$6=0,$7=0,$9=0,$10=0,$12=0,$13=0,$14=0,$15=0,$17=0,$18=0,$19=0,$20=0;
 var $21=0,$22=0,$23=0,$24=0,$25=0,$26=0,$27=0,$28=0,$29=0,$30=0,$31=0,$32=0,$33=0,$34=0,$36=0,$38=0,$39=0,$40=0,$41=0,$42=0;
 var $43=0,$44=0,$46=0,$47=0,$48=0,$49=0,$50=0,$52=0,$54=0,$55=0,$56=0,$58=0,$59=0,$60=0,$61=0,$62=0,$63=0,$64=0,$65=0,$66=0;
 var $67=0,$68=0,$69=0,$70=0,$71=0,$72=0,$73=0,$74=0,$75=0,$76=0,$77=0,$78=0,$79=0,$80=0,$81=0,$82=0,$83=0,$84=0,$85=0,$86=0;
 var $87=0,$88=0,$89=0,label=0;
 var sp=0;sp=STACKTOP;






 $1=$gfc;
 $2=$val;
 $3=$j;
 $4=$1;
 $5=(($4+27824)|0);
 $esv=$5;
 $6=$1;
 $7=(($6+284)|0);
 $bs=$7;
 while(1) {
  $9=$3;
  $10=($9|0)>0;
  if (!($10)) {
   break;
  }
  $12=$bs;
  $13=(($12+16)|0);
  $14=((HEAP32[(($13)>>2)])|0);
  $15=($14|0)==0;
  if ($15) {
   $17=$bs;
   $18=(($17+16)|0);
   HEAP32[(($18)>>2)]=8;
   $19=$bs;
   $20=(($19+12)|0);
   $21=((HEAP32[(($20)>>2)])|0);
   $22=((($21)+(1))|0);
   HEAP32[(($20)>>2)]=$22;
   $23=$esv;
   $24=(($23+24308)|0);
   $25=((HEAP32[(($24)>>2)])|0);
   $26=$esv;
   $27=(($26+12016)|0);
   $28=(($27+((($25)*(48))&-1))|0);
   $29=(($28)|0);
   $30=((HEAP32[(($29)>>2)])|0);
   $31=$bs;
   $32=(($31+8)|0);
   $33=((HEAP32[(($32)>>2)])|0);
   $34=($30|0)==($33|0);
   if ($34) {
    $36=$1;
    _putheader_bits($36);
   }
   $38=$bs;
   $39=(($38+12)|0);
   $40=((HEAP32[(($39)>>2)])|0);
   $41=$bs;
   $42=(($41)|0);
   $43=((HEAP32[(($42)>>2)])|0);
   $44=(($43+$40)|0);
   HEAP8[($44)]=0;
  }
  $46=$3;
  $47=$bs;
  $48=(($47+16)|0);
  $49=((HEAP32[(($48)>>2)])|0);
  $50=($46|0)<($49|0);
  if ($50) {
   $52=$3;
   $58=$52;
  } else {
   $54=$bs;
   $55=(($54+16)|0);
   $56=((HEAP32[(($55)>>2)])|0);
   $58=$56;
  }

  $k=$58;
  $59=$k;
  $60=$3;
  $61=((($60)-($59))|0);
  $3=$61;
  $62=$k;
  $63=$bs;
  $64=(($63+16)|0);
  $65=((HEAP32[(($64)>>2)])|0);
  $66=((($65)-($62))|0);
  HEAP32[(($64)>>2)]=$66;
  $67=$2;
  $68=$3;
  $69=$67>>($68|0);
  $70=$bs;
  $71=(($70+16)|0);
  $72=((HEAP32[(($71)>>2)])|0);
  $73=$69<<$72;
  $74=$bs;
  $75=(($74+12)|0);
  $76=((HEAP32[(($75)>>2)])|0);
  $77=$bs;
  $78=(($77)|0);
  $79=((HEAP32[(($78)>>2)])|0);
  $80=(($79+$76)|0);
  $81=((HEAP8[($80)])|0);
  $82=($81&255);
  $83=$82|$73;
  $84=(($83)&255);
  HEAP8[($80)]=$84;
  $85=$k;
  $86=$bs;
  $87=(($86+8)|0);
  $88=((HEAP32[(($87)>>2)])|0);
  $89=((($88)+($85))|0);
  HEAP32[(($87)>>2)]=$89;
 }
 STACKTOP=sp;return;
}


function _writeheader($gfc,$val,$j){
 $gfc=($gfc)|0;
 $val=($val)|0;
 $j=($j)|0;
 var $1=0,$2=0,$3=0,$esv=0,$ptr=0,$k=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$15=0,$16=0,$18=0,$19=0;
 var $20=0,$21=0,$22=0,$24=0,$26=0,$27=0,$28=0,$30=0,$31=0,$32=0,$33=0,$34=0,$35=0,$36=0,$37=0,$38=0,$39=0,$40=0,$41=0,$42=0;
 var $43=0,$44=0,$45=0,$46=0,$47=0,$48=0,$49=0,$50=0,$51=0,$52=0,$53=0,$54=0,$55=0,$56=0,$57=0,$58=0,$59=0,$61=0,$62=0,$63=0;
 var $64=0,$65=0,$66=0,$67=0,$68=0,label=0;
 var sp=0;sp=STACKTOP;






 $1=$gfc;
 $2=$val;
 $3=$j;
 $4=$1;
 $5=(($4+27824)|0);
 $esv=$5;
 $6=$esv;
 $7=(($6+24304)|0);
 $8=((HEAP32[(($7)>>2)])|0);
 $9=$esv;
 $10=(($9+12016)|0);
 $11=(($10+((($8)*(48))&-1))|0);
 $12=(($11+4)|0);
 $13=((HEAP32[(($12)>>2)])|0);
 $ptr=$13;
 while(1) {
  $15=$3;
  $16=($15|0)>0;
  if (!($16)) {
   break;
  }
  $18=$3;
  $19=$ptr;
  $20=$19&7;
  $21=(((8)-($20))|0);
  $22=($18|0)<($21|0);
  if ($22) {
   $24=$3;
   $30=$24;
  } else {
   $26=$ptr;
   $27=$26&7;
   $28=(((8)-($27))|0);
   $30=$28;
  }

  $k=$30;
  $31=$k;
  $32=$3;
  $33=((($32)-($31))|0);
  $3=$33;
  $34=$2;
  $35=$3;
  $36=$34>>($35|0);
  $37=$ptr;
  $38=$37&7;
  $39=(((8)-($38))|0);
  $40=$k;
  $41=((($39)-($40))|0);
  $42=$36<<$41;
  $43=$ptr;
  $44=$43>>3;
  $45=$esv;
  $46=(($45+24304)|0);
  $47=((HEAP32[(($46)>>2)])|0);
  $48=$esv;
  $49=(($48+12016)|0);
  $50=(($49+((($47)*(48))&-1))|0);
  $51=(($50+8)|0);
  $52=(($51+$44)|0);
  $53=((HEAP8[($52)])|0);
  $54=(($53<<24)>>24);
  $55=$54|$42;
  $56=(($55)&255);
  HEAP8[($52)]=$56;
  $57=$k;
  $58=$ptr;
  $59=((($58)+($57))|0);
  $ptr=$59;
 }
 $61=$ptr;
 $62=$esv;
 $63=(($62+24304)|0);
 $64=((HEAP32[(($63)>>2)])|0);
 $65=$esv;
 $66=(($65+12016)|0);
 $67=(($66+((($64)*(48))&-1))|0);
 $68=(($67+4)|0);
 HEAP32[(($68)>>2)]=$61;
 STACKTOP=sp;return;
}


function _ShortHuffmancodebits($gfc,$gi){
 $gfc=($gfc)|0;
 $gi=($gi)|0;
 var $1=0,$2=0,$bits=0,$region1Start=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$15=0,$16=0,$17=0,$19=0,$20=0;
 var $21=0,$22=0,$23=0,$24=0,$25=0,$26=0,$27=0,$28=0,$29=0,$30=0,$31=0,$32=0,$33=0,$34=0,$35=0,$36=0,$37=0,$38=0,$39=0,$40=0;
 var label=0;
 var sp=0;sp=STACKTOP;




 $1=$gfc;
 $2=$gi;
 $3=$1;
 $4=(($3+21360)|0);
 $5=(($4+92)|0);
 $6=(($5+12)|0);
 $7=((HEAP32[(($6)>>2)])|0);
 $8=((($7)*(3))&-1);
 $region1Start=$8;
 $9=$region1Start;
 $10=$2;
 $11=(($10+4772)|0);
 $12=((HEAP32[(($11)>>2)])|0);
 $13=($9|0)>($12|0);
 if ($13) {
  $15=$2;
  $16=(($15+4772)|0);
  $17=((HEAP32[(($16)>>2)])|0);
  $region1Start=$17;
 }
 $19=$1;
 $20=$2;
 $21=(($20+4796)|0);
 $22=(($21)|0);
 $23=((HEAP32[(($22)>>2)])|0);
 $24=$region1Start;
 $25=$2;
 $26=((_Huffmancode($19,$23,0,$24,$25))|0);
 $bits=$26;
 $27=$1;
 $28=$2;
 $29=(($28+4796)|0);
 $30=(($29+4)|0);
 $31=((HEAP32[(($30)>>2)])|0);
 $32=$region1Start;
 $33=$2;
 $34=(($33+4772)|0);
 $35=((HEAP32[(($34)>>2)])|0);
 $36=$2;
 $37=((_Huffmancode($27,$31,$32,$35,$36))|0);
 $38=$bits;
 $39=((($38)+($37))|0);
 $bits=$39;
 $40=$bits;
 STACKTOP=sp;return (($40)|0);
}


function _LongHuffmancodebits($gfc,$gi){
 $gfc=($gfc)|0;
 $gi=($gi)|0;
 var $1=0,$2=0,$i=0,$bigvalues=0,$bits=0,$region1Start=0,$region2Start=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$14=0,$15=0;
 var $16=0,$17=0,$18=0,$19=0,$20=0,$21=0,$22=0,$23=0,$24=0,$25=0,$26=0,$27=0,$28=0,$29=0,$30=0,$32=0,$34=0,$35=0,$36=0,$38=0;
 var $40=0,$41=0,$42=0,$43=0,$44=0,$45=0,$46=0,$47=0,$48=0,$49=0,$50=0,$51=0,$52=0,$53=0,$54=0,$55=0,$56=0,$57=0,$58=0,$59=0;
 var $60=0,$61=0,$62=0,$63=0,$64=0,$65=0,$66=0,$67=0,$68=0,$69=0,$70=0,label=0;
 var sp=0;sp=STACKTOP;







 $1=$gfc;
 $2=$gi;
 $3=$2;
 $4=(($3+4772)|0);
 $5=((HEAP32[(($4)>>2)])|0);
 $bigvalues=$5;
 $6=$2;
 $7=(($6+4824)|0);
 $8=((HEAP32[(($7)>>2)])|0);
 $9=((($8)+(1))|0);
 $i=$9;
 $10=$i;
 $11=$1;
 $12=(($11+21360)|0);
 $13=(($12)|0);
 $14=(($13+($10<<2))|0);
 $15=((HEAP32[(($14)>>2)])|0);
 $region1Start=$15;
 $16=$2;
 $17=(($16+4828)|0);
 $18=((HEAP32[(($17)>>2)])|0);
 $19=((($18)+(1))|0);
 $20=$i;
 $21=((($20)+($19))|0);
 $i=$21;
 $22=$i;
 $23=$1;
 $24=(($23+21360)|0);
 $25=(($24)|0);
 $26=(($25+($22<<2))|0);
 $27=((HEAP32[(($26)>>2)])|0);
 $region2Start=$27;
 $28=$region1Start;
 $29=$bigvalues;
 $30=($28|0)>($29|0);
 if ($30) {
  $32=$bigvalues;
  $region1Start=$32;
 }
 $34=$region2Start;
 $35=$bigvalues;
 $36=($34|0)>($35|0);
 if ($36) {
  $38=$bigvalues;
  $region2Start=$38;
 }
 $40=$1;
 $41=$2;
 $42=(($41+4796)|0);
 $43=(($42)|0);
 $44=((HEAP32[(($43)>>2)])|0);
 $45=$region1Start;
 $46=$2;
 $47=((_Huffmancode($40,$44,0,$45,$46))|0);
 $bits=$47;
 $48=$1;
 $49=$2;
 $50=(($49+4796)|0);
 $51=(($50+4)|0);
 $52=((HEAP32[(($51)>>2)])|0);
 $53=$region1Start;
 $54=$region2Start;
 $55=$2;
 $56=((_Huffmancode($48,$52,$53,$54,$55))|0);
 $57=$bits;
 $58=((($57)+($56))|0);
 $bits=$58;
 $59=$1;
 $60=$2;
 $61=(($60+4796)|0);
 $62=(($61+8)|0);
 $63=((HEAP32[(($62)>>2)])|0);
 $64=$region2Start;
 $65=$bigvalues;
 $66=$2;
 $67=((_Huffmancode($59,$63,$64,$65,$66))|0);
 $68=$bits;
 $69=((($68)+($67))|0);
 $bits=$69;
 $70=$bits;
 STACKTOP=sp;return (($70)|0);
}


function _huffman_coder_count1($gfc,$gi){
 $gfc=($gfc)|0;
 $gi=($gi)|0;
 var $1=0,$2=0,$h=0,$i=0,$bits=0,$ix=0,$xr=0,$huffbits=0,$p=0,$v=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0;
 var $13=0,$14=0,$15=0,$16=0,$17=0,$18=0,$19=0,$20=0,$21=0,$22=0,$23=0,$24=0,$25=0,$26=0,$27=0,$29=0,$30=0,$32=0,$33=0,$34=0;
 var $35=0,$36=0,$38=0,$39=0,$40=0,$41=0,$42=.0,$43=0,$45=0,$46=0,$49=0,$50=0,$51=0,$52=0,$53=0,$55=0,$56=0,$57=0,$58=0,$59=0;
 var $60=0,$61=.0,$62=0,$64=0,$65=0,$68=0,$69=0,$70=0,$71=0,$72=0,$74=0,$75=0,$76=0,$77=0,$78=0,$79=0,$80=.0,$81=0,$83=0,$84=0;
 var $87=0,$88=0,$89=0,$90=0,$91=0,$93=0,$94=0,$95=0,$96=0,$97=0,$98=0,$99=.0,$100=0,$102=0,$103=0,$106=0,$107=0,$108=0,$109=0,$110=0;
 var $111=0,$112=0,$113=0,$114=0,$115=0,$116=0,$117=0,$118=0,$119=0,$120=0,$121=0,$122=0,$123=0,$124=0,$125=0,$126=0,$127=0,$128=0,$129=0,$130=0;
 var $131=0,$132=0,$133=0,$134=0,$135=0,$137=0,$138=0,$140=0,label=0;
 var sp=0;sp=STACKTOP;










 $1=$gfc;
 $2=$gi;
 $3=$2;
 $4=(($3+4840)|0);
 $5=((HEAP32[(($4)>>2)])|0);
 $6=((($5)+(32))|0);
 $7=((12312+($6<<4))|0);
 $h=$7;
 $bits=0;
 $8=$2;
 $9=(($8+4772)|0);
 $10=((HEAP32[(($9)>>2)])|0);
 $11=$2;
 $12=(($11+2304)|0);
 $13=(($12+($10<<2))|0);
 $ix=$13;
 $14=$2;
 $15=(($14+4772)|0);
 $16=((HEAP32[(($15)>>2)])|0);
 $17=$2;
 $18=(($17)|0);
 $19=(($18+($16<<2))|0);
 $xr=$19;
 $20=$2;
 $21=(($20+4776)|0);
 $22=((HEAP32[(($21)>>2)])|0);
 $23=$2;
 $24=(($23+4772)|0);
 $25=((HEAP32[(($24)>>2)])|0);
 $26=((($22)-($25))|0);
 $27=(((($26|0))/(4))&-1);
 $i=$27;
 while(1) {
  $29=$i;
  $30=($29|0)>0;
  if (!($30)) {
   break;
  }
  $huffbits=0;
  $p=0;
  $32=$ix;
  $33=(($32)|0);
  $34=((HEAP32[(($33)>>2)])|0);
  $v=$34;
  $35=$v;
  $36=($35|0)!=0;
  if ($36) {
   $38=$p;
   $39=((($38)+(8))|0);
   $p=$39;
   $40=$xr;
   $41=(($40)|0);
   $42=(+(HEAPF32[(($41)>>2)]));
   $43=$42<(0.0);
   if ($43) {
    $45=$huffbits;
    $46=((($45)+(1))|0);
    $huffbits=$46;
   }
  }
  $49=$ix;
  $50=(($49+4)|0);
  $51=((HEAP32[(($50)>>2)])|0);
  $v=$51;
  $52=$v;
  $53=($52|0)!=0;
  if ($53) {
   $55=$p;
   $56=((($55)+(4))|0);
   $p=$56;
   $57=$huffbits;
   $58=($57<<1);
   $huffbits=$58;
   $59=$xr;
   $60=(($59+4)|0);
   $61=(+(HEAPF32[(($60)>>2)]));
   $62=$61<(0.0);
   if ($62) {
    $64=$huffbits;
    $65=((($64)+(1))|0);
    $huffbits=$65;
   }
  }
  $68=$ix;
  $69=(($68+8)|0);
  $70=((HEAP32[(($69)>>2)])|0);
  $v=$70;
  $71=$v;
  $72=($71|0)!=0;
  if ($72) {
   $74=$p;
   $75=((($74)+(2))|0);
   $p=$75;
   $76=$huffbits;
   $77=($76<<1);
   $huffbits=$77;
   $78=$xr;
   $79=(($78+8)|0);
   $80=(+(HEAPF32[(($79)>>2)]));
   $81=$80<(0.0);
   if ($81) {
    $83=$huffbits;
    $84=((($83)+(1))|0);
    $huffbits=$84;
   }
  }
  $87=$ix;
  $88=(($87+12)|0);
  $89=((HEAP32[(($88)>>2)])|0);
  $v=$89;
  $90=$v;
  $91=($90|0)!=0;
  if ($91) {
   $93=$p;
   $94=((($93)+(1))|0);
   $p=$94;
   $95=$huffbits;
   $96=($95<<1);
   $huffbits=$96;
   $97=$xr;
   $98=(($97+12)|0);
   $99=(+(HEAPF32[(($98)>>2)]));
   $100=$99<(0.0);
   if ($100) {
    $102=$huffbits;
    $103=((($102)+(1))|0);
    $huffbits=$103;
   }
  }
  $106=$ix;
  $107=(($106+16)|0);
  $ix=$107;
  $108=$xr;
  $109=(($108+16)|0);
  $xr=$109;
  $110=$1;
  $111=$huffbits;
  $112=$p;
  $113=$h;
  $114=(($113+8)|0);
  $115=((HEAP32[(($114)>>2)])|0);
  $116=(($115+($112<<1))|0);
  $117=((HEAP16[(($116)>>1)])|0);
  $118=($117&65535);
  $119=((($111)+($118))|0);
  $120=$p;
  $121=$h;
  $122=(($121+12)|0);
  $123=((HEAP32[(($122)>>2)])|0);
  $124=(($123+$120)|0);
  $125=((HEAP8[($124)])|0);
  $126=($125&255);
  _putbits2($110,$119,$126);
  $127=$p;
  $128=$h;
  $129=(($128+12)|0);
  $130=((HEAP32[(($129)>>2)])|0);
  $131=(($130+$127)|0);
  $132=((HEAP8[($131)])|0);
  $133=($132&255);
  $134=$bits;
  $135=((($134)+($133))|0);
  $bits=$135;
  $137=$i;
  $138=((($137)-(1))|0);
  $i=$138;
 }
 $140=$bits;
 STACKTOP=sp;return (($140)|0);
}


function _putheader_bits($gfc){
 $gfc=($gfc)|0;
 var $1=0,$cfg=0,$esv=0,$bs=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$14=0,$15=0,$16=0,$17=0;
 var $18=0,$19=0,$20=0,$21=0,$22=0,$23=0,$24=0,$25=0,$26=0,$27=0,$28=0,$29=0,$30=0,$31=0,$32=0,$33=0,$34=0,$35=0,$36=0,$37=0;
 var $38=0,$39=0,$40=0,$41=0,$42=0,$43=0,$44=0,$45=0,$46=0,$47=0,label=0;
 var sp=0;sp=STACKTOP;




 $1=$gfc;
 $2=$1;
 $3=(($2+16)|0);
 $cfg=$3;
 $4=$1;
 $5=(($4+27824)|0);
 $esv=$5;
 $6=$1;
 $7=(($6+284)|0);
 $bs=$7;
 $8=$bs;
 $9=(($8+12)|0);
 $10=((HEAP32[(($9)>>2)])|0);
 $11=$bs;
 $12=(($11)|0);
 $13=((HEAP32[(($12)>>2)])|0);
 $14=(($13+$10)|0);
 $15=$esv;
 $16=(($15+24308)|0);
 $17=((HEAP32[(($16)>>2)])|0);
 $18=$esv;
 $19=(($18+12016)|0);
 $20=(($19+((($17)*(48))&-1))|0);
 $21=(($20+8)|0);
 $22=$21;
 $23=$cfg;
 $24=(($23+8)|0);
 $25=((HEAP32[(($24)>>2)])|0);
 (_memcpy((($14)|0), (($22)|0), $25)|0);
 $26=$cfg;
 $27=(($26+8)|0);
 $28=((HEAP32[(($27)>>2)])|0);
 $29=$bs;
 $30=(($29+12)|0);
 $31=((HEAP32[(($30)>>2)])|0);
 $32=((($31)+($28))|0);
 HEAP32[(($30)>>2)]=$32;
 $33=$cfg;
 $34=(($33+8)|0);
 $35=((HEAP32[(($34)>>2)])|0);
 $36=($35<<3);
 $37=$bs;
 $38=(($37+8)|0);
 $39=((HEAP32[(($38)>>2)])|0);
 $40=((($39)+($36))|0);
 HEAP32[(($38)>>2)]=$40;
 $41=$esv;
 $42=(($41+24308)|0);
 $43=((HEAP32[(($42)>>2)])|0);
 $44=((($43)+(1))|0);
 $45=$44&255;
 $46=$esv;
 $47=(($46+24308)|0);
 HEAP32[(($47)>>2)]=$45;
 STACKTOP=sp;return;
}


function _Huffmancode($gfc,$tableindex,$start,$end,$gi){
 $gfc=($gfc)|0;
 $tableindex=($tableindex)|0;
 $start=($start)|0;
 $end=($end)|0;
 $gi=($gi)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$h=0,$linbits=0,$i=0,$bits=0,$cbits=0,$xbits=0,$xlen=0,$ext=0,$x1=0,$x2=0,$linbits_x1=0,$linbits_x2=0,$7=0,$8=0;
 var $9=0,$10=0,$11=0,$12=0,$13=0,$15=0,$17=0,$19=0,$20=0,$21=0,$23=0,$24=0,$25=0,$26=0,$27=0,$28=0,$29=0,$30=0,$31=0,$32=0;
 var $33=0,$34=0,$35=0,$36=0,$37=0,$38=0,$40=0,$41=0,$42=0,$43=0,$44=.0,$45=0,$47=0,$48=0,$50=0,$51=0,$53=0,$54=0,$56=0,$57=0;
 var $59=0,$60=0,$61=0,$62=0,$63=0,$64=0,$65=0,$66=0,$67=0,$68=0,$70=0,$71=0,$73=0,$74=0,$75=0,$76=0,$77=0,$78=0,$79=0,$80=0;
 var $81=0,$82=0,$83=0,$84=0,$85=0,$86=0,$87=0,$90=0,$91=0,$93=0,$94=0,$95=0,$96=0,$97=0,$98=0,$99=0,$100=.0,$101=0,$103=0,$104=0;
 var $106=0,$107=0,$109=0,$110=0,$111=0,$112=0,$113=0,$114=0,$115=0,$116=0,$117=0,$118=0,$119=0,$120=0,$121=0,$122=0,$123=0,$124=0,$125=0,$126=0;
 var $127=0,$128=0,$129=0,$130=0,$131=0,$132=0,$133=0,$134=0,$135=0,$136=0,$137=0,$138=0,$139=0,$140=0,$141=0,$142=0,$143=0,$144=0,$145=0,$146=0;
 var $147=0,$148=0,$149=0,$150=0,$151=0,$153=0,$154=0,$156=0,$158=0,label=0;
 var sp=0;sp=STACKTOP;


















 $2=$gfc;
 $3=$tableindex;
 $4=$start;
 $5=$end;
 $6=$gi;
 $7=$3;
 $8=((12312+($7<<4))|0);
 $h=$8;
 $9=$h;
 $10=(($9)|0);
 $11=((HEAP32[(($10)>>2)])|0);
 $linbits=$11;
 $bits=0;
 $12=$3;
 $13=($12|0)!=0;
 if (!($13)) {
  $15=$bits;
  $1=$15;
  $158=$1;
  STACKTOP=sp;return (($158)|0);
 }
 $17=$4;
 $i=$17;
 while(1) {
  $19=$i;
  $20=$5;
  $21=($19|0)<($20|0);
  if (!($21)) {
   break;
  }
  $cbits=0;
  $xbits=0;
  $23=$h;
  $24=(($23)|0);
  $25=((HEAP32[(($24)>>2)])|0);
  $xlen=$25;
  $ext=0;
  $26=$i;
  $27=$6;
  $28=(($27+2304)|0);
  $29=(($28+($26<<2))|0);
  $30=((HEAP32[(($29)>>2)])|0);
  $x1=$30;
  $31=$i;
  $32=((($31)+(1))|0);
  $33=$6;
  $34=(($33+2304)|0);
  $35=(($34+($32<<2))|0);
  $36=((HEAP32[(($35)>>2)])|0);
  $x2=$36;
  $37=$x1;
  $38=($37|0)!=0;
  if ($38) {
   $40=$i;
   $41=$6;
   $42=(($41)|0);
   $43=(($42+($40<<2))|0);
   $44=(+(HEAPF32[(($43)>>2)]));
   $45=$44<(0.0);
   if ($45) {
    $47=$ext;
    $48=((($47)+(1))|0);
    $ext=$48;
   }
   $50=$cbits;
   $51=((($50)-(1))&65535);
   $cbits=$51;
  }
  $53=$3;
  $54=($53>>>0)>((15)>>>0);
  if ($54) {
   $56=$x1;
   $57=($56>>>0)>=((15)>>>0);
   if ($57) {
    $59=$x1;
    $60=((($59)-(15))|0);
    $61=(($60)&65535);
    $linbits_x1=$61;
    $62=$linbits_x1;
    $63=($62&65535);
    $64=$63<<1;
    $65=$ext;
    $66=$65|$64;
    $ext=$66;
    $67=$linbits;
    $68=(($67)&65535);
    $xbits=$68;
    $x1=15;
   }
   $70=$x2;
   $71=($70>>>0)>=((15)>>>0);
   if ($71) {
    $73=$x2;
    $74=((($73)-(15))|0);
    $75=(($74)&65535);
    $linbits_x2=$75;
    $76=$linbits;
    $77=$ext;
    $78=$77<<$76;
    $ext=$78;
    $79=$linbits_x2;
    $80=($79&65535);
    $81=$ext;
    $82=$81|$80;
    $ext=$82;
    $83=$linbits;
    $84=$xbits;
    $85=($84&65535);
    $86=((($85)+($83))|0);
    $87=(($86)&65535);
    $xbits=$87;
    $x2=15;
   }
   $xlen=16;
  }
  $90=$x2;
  $91=($90|0)!=0;
  if ($91) {
   $93=$ext;
   $94=$93<<1;
   $ext=$94;
   $95=$i;
   $96=((($95)+(1))|0);
   $97=$6;
   $98=(($97)|0);
   $99=(($98+($96<<2))|0);
   $100=(+(HEAPF32[(($99)>>2)]));
   $101=$100<(0.0);
   if ($101) {
    $103=$ext;
    $104=((($103)+(1))|0);
    $ext=$104;
   }
   $106=$cbits;
   $107=((($106)-(1))&65535);
   $cbits=$107;
  }
  $109=$x1;
  $110=$xlen;
  $111=(Math_imul($109,$110)|0);
  $112=$x2;
  $113=((($111)+($112))|0);
  $x1=$113;
  $114=$cbits;
  $115=(($114<<16)>>16);
  $116=$xbits;
  $117=($116&65535);
  $118=((($117)-($115))|0);
  $119=(($118)&65535);
  $xbits=$119;
  $120=$x1;
  $121=$h;
  $122=(($121+12)|0);
  $123=((HEAP32[(($122)>>2)])|0);
  $124=(($123+$120)|0);
  $125=((HEAP8[($124)])|0);
  $126=($125&255);
  $127=$cbits;
  $128=(($127<<16)>>16);
  $129=((($128)+($126))|0);
  $130=(($129)&65535);
  $cbits=$130;
  $131=$2;
  $132=$x1;
  $133=$h;
  $134=(($133+8)|0);
  $135=((HEAP32[(($134)>>2)])|0);
  $136=(($135+($132<<1))|0);
  $137=((HEAP16[(($136)>>1)])|0);
  $138=($137&65535);
  $139=$cbits;
  $140=(($139<<16)>>16);
  _putbits2($131,$138,$140);
  $141=$2;
  $142=$ext;
  $143=$xbits;
  $144=($143&65535);
  _putbits2($141,$142,$144);
  $145=$cbits;
  $146=(($145<<16)>>16);
  $147=$xbits;
  $148=($147&65535);
  $149=((($146)+($148))|0);
  $150=$bits;
  $151=((($150)+($149))|0);
  $bits=$151;
  $153=$i;
  $154=((($153)+(2))|0);
  $i=$154;
 }
 $156=$bits;
 $1=$156;
 $158=$1;
 STACKTOP=sp;return (($158)|0);
}


function _lame_set_num_samples($gfp,$num_samples){
 $gfp=($gfp)|0;
 $num_samples=($num_samples)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$8=0,$9=0,$10=0,$13=0,label=0;
 var sp=0;sp=STACKTOP;



 $2=$gfp;
 $3=$num_samples;
 $4=$2;
 $5=((_is_lame_global_flags_valid($4))|0);
 $6=($5|0)!=0;
 if ($6) {
  $8=$3;
  $9=$2;
  $10=(($9+4)|0);
  HEAP32[(($10)>>2)]=$8;
  $1=0;
  $13=$1;
  STACKTOP=sp;return (($13)|0);
 } else {
  $1=-1;
  $13=$1;
  STACKTOP=sp;return (($13)|0);
 }
  return 0;
}


function _lame_get_num_samples($gfp){
 $gfp=($gfp)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$7=0,$8=0,$9=0,$12=0,label=0;
 var sp=0;sp=STACKTOP;


 $2=$gfp;
 $3=$2;
 $4=((_is_lame_global_flags_valid($3))|0);
 $5=($4|0)!=0;
 if ($5) {
  $7=$2;
  $8=(($7+4)|0);
  $9=((HEAP32[(($8)>>2)])|0);
  $1=$9;
 } else {
  $1=0;
 }
 $12=$1;
 STACKTOP=sp;return (($12)|0);
}


function _lame_set_in_samplerate($gfp,$in_samplerate){
 $gfp=($gfp)|0;
 $in_samplerate=($in_samplerate)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$8=0,$9=0,$10=0,$13=0,label=0;
 var sp=0;sp=STACKTOP;



 $2=$gfp;
 $3=$in_samplerate;
 $4=$2;
 $5=((_is_lame_global_flags_valid($4))|0);
 $6=($5|0)!=0;
 if ($6) {
  $8=$3;
  $9=$2;
  $10=(($9+12)|0);
  HEAP32[(($10)>>2)]=$8;
  $1=0;
  $13=$1;
  STACKTOP=sp;return (($13)|0);
 } else {
  $1=-1;
  $13=$1;
  STACKTOP=sp;return (($13)|0);
 }
  return 0;
}


function _lame_get_in_samplerate($gfp){
 $gfp=($gfp)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$7=0,$8=0,$9=0,$12=0,label=0;
 var sp=0;sp=STACKTOP;


 $2=$gfp;
 $3=$2;
 $4=((_is_lame_global_flags_valid($3))|0);
 $5=($4|0)!=0;
 if ($5) {
  $7=$2;
  $8=(($7+12)|0);
  $9=((HEAP32[(($8)>>2)])|0);
  $1=$9;
 } else {
  $1=0;
 }
 $12=$1;
 STACKTOP=sp;return (($12)|0);
}


function _lame_set_num_channels($gfp,$num_channels){
 $gfp=($gfp)|0;
 $num_channels=($num_channels)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$8=0,$9=0,$11=0,$12=0,$15=0,$16=0,$17=0,$20=0,label=0;
 var sp=0;sp=STACKTOP;



 $2=$gfp;
 $3=$num_channels;
 $4=$2;
 $5=((_is_lame_global_flags_valid($4))|0);
 $6=($5|0)!=0;
 L1: do {
  if ($6) {
   $8=$3;
   $9=2<($8|0);
   do {
    if (!($9)) {
     $11=$3;
     $12=0==($11|0);
     if ($12) {
      break;
     }
     $15=$3;
     $16=$2;
     $17=(($16+8)|0);
     HEAP32[(($17)>>2)]=$15;
     $1=0;
     break L1;
    }
   } while(0);
   $1=-1;
  } else {
   $1=-1;
  }
 } while(0);
 $20=$1;
 STACKTOP=sp;return (($20)|0);
}


function _lame_get_num_channels($gfp){
 $gfp=($gfp)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$7=0,$8=0,$9=0,$12=0,label=0;
 var sp=0;sp=STACKTOP;


 $2=$gfp;
 $3=$2;
 $4=((_is_lame_global_flags_valid($3))|0);
 $5=($4|0)!=0;
 if ($5) {
  $7=$2;
  $8=(($7+8)|0);
  $9=((HEAP32[(($8)>>2)])|0);
  $1=$9;
 } else {
  $1=0;
 }
 $12=$1;
 STACKTOP=sp;return (($12)|0);
}


function _lame_set_scale($gfp,$scale){
 $gfp=($gfp)|0;
 $scale=+($scale);
 var $1=0,$2=0,$3=.0,$4=0,$5=0,$6=0,$8=.0,$9=0,$10=0,$13=0,label=0;
 var sp=0;sp=STACKTOP;



 $2=$gfp;
 $3=$scale;
 $4=$2;
 $5=((_is_lame_global_flags_valid($4))|0);
 $6=($5|0)!=0;
 if ($6) {
  $8=$3;
  $9=$2;
  $10=(($9+20)|0);
  HEAPF32[(($10)>>2)]=$8;
  $1=0;
  $13=$1;
  STACKTOP=sp;return (($13)|0);
 } else {
  $1=-1;
  $13=$1;
  STACKTOP=sp;return (($13)|0);
 }
  return 0;
}


function _lame_get_scale($gfp){
 $gfp=($gfp)|0;
 var $1=.0,$2=0,$3=0,$4=0,$5=0,$7=0,$8=0,$9=.0,$12=.0,label=0;
 var sp=0;sp=STACKTOP;


 $2=$gfp;
 $3=$2;
 $4=((_is_lame_global_flags_valid($3))|0);
 $5=($4|0)!=0;
 if ($5) {
  $7=$2;
  $8=(($7+20)|0);
  $9=(+(HEAPF32[(($8)>>2)]));
  $1=$9;
 } else {
  $1=0.0;
 }
 $12=$1;
 STACKTOP=sp;return (+($12));
}


function _lame_set_out_samplerate($gfp,$out_samplerate){
 $gfp=($gfp)|0;
 $out_samplerate=($out_samplerate)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$8=0,$9=0,$10=0,$13=0,label=0;
 var sp=0;sp=STACKTOP;



 $2=$gfp;
 $3=$out_samplerate;
 $4=$2;
 $5=((_is_lame_global_flags_valid($4))|0);
 $6=($5|0)!=0;
 if ($6) {
  $8=$3;
  $9=$2;
  $10=(($9+16)|0);
  HEAP32[(($10)>>2)]=$8;
  $1=0;
  $13=$1;
  STACKTOP=sp;return (($13)|0);
 } else {
  $1=-1;
  $13=$1;
  STACKTOP=sp;return (($13)|0);
 }
  return 0;
}


function _lame_get_out_samplerate($gfp){
 $gfp=($gfp)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$7=0,$8=0,$9=0,$12=0,label=0;
 var sp=0;sp=STACKTOP;


 $2=$gfp;
 $3=$2;
 $4=((_is_lame_global_flags_valid($3))|0);
 $5=($4|0)!=0;
 if ($5) {
  $7=$2;
  $8=(($7+16)|0);
  $9=((HEAP32[(($8)>>2)])|0);
  $1=$9;
 } else {
  $1=0;
 }
 $12=$1;
 STACKTOP=sp;return (($12)|0);
}


function _lame_set_mode($gfp,$mode){
 $gfp=($gfp)|0;
 $mode=($mode)|0;
 var $1=0,$2=0,$3=0,$mpg_mode=0,$4=0,$5=0,$6=0,$8=0,$9=0,$10=0,$12=0,$13=0,$16=0,$17=0,$18=0,$21=0,label=0;
 var sp=0;sp=STACKTOP;




 $2=$gfp;
 $3=$mode;
 $4=$2;
 $5=((_is_lame_global_flags_valid($4))|0);
 $6=($5|0)!=0;
 L1: do {
  if ($6) {
   $8=$3;
   $mpg_mode=$8;
   $9=$mpg_mode;
   $10=($9|0)<0;
   do {
    if (!($10)) {
     $12=$mpg_mode;
     $13=5<=($12|0);
     if ($13) {
      break;
     }
     $16=$3;
     $17=$2;
     $18=(($17+48)|0);
     HEAP32[(($18)>>2)]=$16;
     $1=0;
     break L1;
    }
   } while(0);
   $1=-1;
  } else {
   $1=-1;
  }
 } while(0);
 $21=$1;
 STACKTOP=sp;return (($21)|0);
}


function _lame_get_mode($gfp){
 $gfp=($gfp)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$7=0,$8=0,$9=0,$12=0,label=0;
 var sp=0;sp=STACKTOP;


 $2=$gfp;
 $3=$2;
 $4=((_is_lame_global_flags_valid($3))|0);
 $5=($4|0)!=0;
 if ($5) {
  $7=$2;
  $8=(($7+48)|0);
  $9=((HEAP32[(($8)>>2)])|0);
  $1=$9;
 } else {
  $1=4;
 }
 $12=$1;
 STACKTOP=sp;return (($12)|0);
}


function _lame_set_brate($gfp,$brate){
 $gfp=($gfp)|0;
 $brate=($brate)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$8=0,$9=0,$10=0,$11=0,$12=0,$14=0,$15=0,$19=0,label=0;
 var sp=0;sp=STACKTOP;



 $2=$gfp;
 $3=$brate;
 $4=$2;
 $5=((_is_lame_global_flags_valid($4))|0);
 $6=($5|0)!=0;
 if (!($6)) {
  $1=-1;
  $19=$1;
  STACKTOP=sp;return (($19)|0);
 }
 $8=$3;
 $9=$2;
 $10=(($9+96)|0);
 HEAP32[(($10)>>2)]=$8;
 $11=$3;
 $12=($11|0)>320;
 if ($12) {
  $14=$2;
  $15=(($14+128)|0);
  HEAP32[(($15)>>2)]=1;
 }
 $1=0;
 $19=$1;
 STACKTOP=sp;return (($19)|0);
}


function _lame_get_brate($gfp){
 $gfp=($gfp)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$7=0,$8=0,$9=0,$12=0,label=0;
 var sp=0;sp=STACKTOP;


 $2=$gfp;
 $3=$2;
 $4=((_is_lame_global_flags_valid($3))|0);
 $5=($4|0)!=0;
 if ($5) {
  $7=$2;
  $8=(($7+96)|0);
  $9=((HEAP32[(($8)>>2)])|0);
  $1=$9;
 } else {
  $1=0;
 }
 $12=$1;
 STACKTOP=sp;return (($12)|0);
}


function _lame_set_quant_comp($gfp,$quant_type){
 $gfp=($gfp)|0;
 $quant_type=($quant_type)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$8=0,$9=0,$10=0,$13=0,label=0;
 var sp=0;sp=STACKTOP;



 $2=$gfp;
 $3=$quant_type;
 $4=$2;
 $5=((_is_lame_global_flags_valid($4))|0);
 $6=($5|0)!=0;
 if ($6) {
  $8=$3;
  $9=$2;
  $10=(($9+132)|0);
  HEAP32[(($10)>>2)]=$8;
  $1=0;
  $13=$1;
  STACKTOP=sp;return (($13)|0);
 } else {
  $1=-1;
  $13=$1;
  STACKTOP=sp;return (($13)|0);
 }
  return 0;
}


function _lame_set_quant_comp_short($gfp,$quant_type){
 $gfp=($gfp)|0;
 $quant_type=($quant_type)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$8=0,$9=0,$10=0,$13=0,label=0;
 var sp=0;sp=STACKTOP;



 $2=$gfp;
 $3=$quant_type;
 $4=$2;
 $5=((_is_lame_global_flags_valid($4))|0);
 $6=($5|0)!=0;
 if ($6) {
  $8=$3;
  $9=$2;
  $10=(($9+136)|0);
  HEAP32[(($10)>>2)]=$8;
  $1=0;
  $13=$1;
  STACKTOP=sp;return (($13)|0);
 } else {
  $1=-1;
  $13=$1;
  STACKTOP=sp;return (($13)|0);
 }
  return 0;
}


function _lame_get_quant_comp($gfp){
 $gfp=($gfp)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$7=0,$8=0,$9=0,$12=0,label=0;
 var sp=0;sp=STACKTOP;


 $2=$gfp;
 $3=$2;
 $4=((_is_lame_global_flags_valid($3))|0);
 $5=($4|0)!=0;
 if ($5) {
  $7=$2;
  $8=(($7+132)|0);
  $9=((HEAP32[(($8)>>2)])|0);
  $1=$9;
 } else {
  $1=0;
 }
 $12=$1;
 STACKTOP=sp;return (($12)|0);
}


function _lame_get_quant_comp_short($gfp){
 $gfp=($gfp)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$7=0,$8=0,$9=0,$12=0,label=0;
 var sp=0;sp=STACKTOP;


 $2=$gfp;
 $3=$2;
 $4=((_is_lame_global_flags_valid($3))|0);
 $5=($4|0)!=0;
 if ($5) {
  $7=$2;
  $8=(($7+136)|0);
  $9=((HEAP32[(($8)>>2)])|0);
  $1=$9;
 } else {
  $1=0;
 }
 $12=$1;
 STACKTOP=sp;return (($12)|0);
}


function _lame_set_experimentalY($gfp,$experimentalY){
 $gfp=($gfp)|0;
 $experimentalY=($experimentalY)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$8=0,$9=0,$10=0,$13=0,label=0;
 var sp=0;sp=STACKTOP;



 $2=$gfp;
 $3=$experimentalY;
 $4=$2;
 $5=((_is_lame_global_flags_valid($4))|0);
 $6=($5|0)!=0;
 if ($6) {
  $8=$3;
  $9=$2;
  $10=(($9+140)|0);
  HEAP32[(($10)>>2)]=$8;
  $1=0;
  $13=$1;
  STACKTOP=sp;return (($13)|0);
 } else {
  $1=-1;
  $13=$1;
  STACKTOP=sp;return (($13)|0);
 }
  return 0;
}


function _lame_set_exp_nspsytune($gfp,$exp_nspsytune){
 $gfp=($gfp)|0;
 $exp_nspsytune=($exp_nspsytune)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$8=0,$9=0,$10=0,$13=0,label=0;
 var sp=0;sp=STACKTOP;



 $2=$gfp;
 $3=$exp_nspsytune;
 $4=$2;
 $5=((_is_lame_global_flags_valid($4))|0);
 $6=($5|0)!=0;
 if ($6) {
  $8=$3;
  $9=$2;
  $10=(($9+148)|0);
  HEAP32[(($10)>>2)]=$8;
  $1=0;
  $13=$1;
  STACKTOP=sp;return (($13)|0);
 } else {
  $1=-1;
  $13=$1;
  STACKTOP=sp;return (($13)|0);
 }
  return 0;
}


function _lame_get_exp_nspsytune($gfp){
 $gfp=($gfp)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$7=0,$8=0,$9=0,$12=0,label=0;
 var sp=0;sp=STACKTOP;


 $2=$gfp;
 $3=$2;
 $4=((_is_lame_global_flags_valid($3))|0);
 $5=($4|0)!=0;
 if ($5) {
  $7=$2;
  $8=(($7+148)|0);
  $9=((HEAP32[(($8)>>2)])|0);
  $1=$9;
 } else {
  $1=0;
 }
 $12=$1;
 STACKTOP=sp;return (($12)|0);
}


function _lame_set_VBR($gfp,$VBR){
 $gfp=($gfp)|0;
 $VBR=($VBR)|0;
 var $1=0,$2=0,$3=0,$vbr_q=0,$4=0,$5=0,$6=0,$8=0,$9=0,$10=0,$12=0,$13=0,$16=0,$17=0,$18=0,$21=0,label=0;
 var sp=0;sp=STACKTOP;




 $2=$gfp;
 $3=$VBR;
 $4=$2;
 $5=((_is_lame_global_flags_valid($4))|0);
 $6=($5|0)!=0;
 L1: do {
  if ($6) {
   $8=$3;
   $vbr_q=$8;
   $9=$vbr_q;
   $10=0>($9|0);
   do {
    if (!($10)) {
     $12=$vbr_q;
     $13=5<=($12|0);
     if ($13) {
      break;
     }
     $16=$3;
     $17=$2;
     $18=(($17+156)|0);
     HEAP32[(($18)>>2)]=$16;
     $1=0;
     break L1;
    }
   } while(0);
   $1=-1;
  } else {
   $1=-1;
  }
 } while(0);
 $21=$1;
 STACKTOP=sp;return (($21)|0);
}


function _lame_get_VBR($gfp){
 $gfp=($gfp)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$7=0,$8=0,$9=0,$12=0,label=0;
 var sp=0;sp=STACKTOP;


 $2=$gfp;
 $3=$2;
 $4=((_is_lame_global_flags_valid($3))|0);
 $5=($4|0)!=0;
 if ($5) {
  $7=$2;
  $8=(($7+156)|0);
  $9=((HEAP32[(($8)>>2)])|0);
  $1=$9;
 } else {
  $1=0;
 }
 $12=$1;
 STACKTOP=sp;return (($12)|0);
}


function _lame_set_VBR_q($gfp,$VBR_q){
 $gfp=($gfp)|0;
 $VBR_q=($VBR_q)|0;
 var $1=0,$2=0,$3=0,$ret=0,$4=0,$5=0,$6=0,$8=0,$9=0,$12=0,$13=0,$16=0,$17=0,$18=0,$19=0,$20=0,$21=0,$24=0,label=0;
 var sp=0;sp=STACKTOP;




 $2=$gfp;
 $3=$VBR_q;
 $4=$2;
 $5=((_is_lame_global_flags_valid($4))|0);
 $6=($5|0)!=0;
 if (!($6)) {
  $1=-1;
  $24=$1;
  STACKTOP=sp;return (($24)|0);
 }
 $ret=0;
 $8=$3;
 $9=0>($8|0);
 if ($9) {
  $ret=-1;
  $3=0;
 }
 $12=$3;
 $13=9<($12|0);
 if ($13) {
  $ret=-1;
  $3=9;
 }
 $16=$3;
 $17=$2;
 $18=(($17+164)|0);
 HEAP32[(($18)>>2)]=$16;
 $19=$2;
 $20=(($19+160)|0);
 HEAPF32[(($20)>>2)]=0.0;
 $21=$ret;
 $1=$21;
 $24=$1;
 STACKTOP=sp;return (($24)|0);
}


function _lame_get_VBR_q($gfp){
 $gfp=($gfp)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$7=0,$8=0,$9=0,$12=0,label=0;
 var sp=0;sp=STACKTOP;


 $2=$gfp;
 $3=$2;
 $4=((_is_lame_global_flags_valid($3))|0);
 $5=($4|0)!=0;
 if ($5) {
  $7=$2;
  $8=(($7+164)|0);
  $9=((HEAP32[(($8)>>2)])|0);
  $1=$9;
 } else {
  $1=0;
 }
 $12=$1;
 STACKTOP=sp;return (($12)|0);
}


function _lame_set_VBR_mean_bitrate_kbps($gfp,$VBR_mean_bitrate_kbps){
 $gfp=($gfp)|0;
 $VBR_mean_bitrate_kbps=($VBR_mean_bitrate_kbps)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$8=0,$9=0,$10=0,$13=0,label=0;
 var sp=0;sp=STACKTOP;



 $2=$gfp;
 $3=$VBR_mean_bitrate_kbps;
 $4=$2;
 $5=((_is_lame_global_flags_valid($4))|0);
 $6=($5|0)!=0;
 if ($6) {
  $8=$3;
  $9=$2;
  $10=(($9+168)|0);
  HEAP32[(($10)>>2)]=$8;
  $1=0;
  $13=$1;
  STACKTOP=sp;return (($13)|0);
 } else {
  $1=-1;
  $13=$1;
  STACKTOP=sp;return (($13)|0);
 }
  return 0;
}


function _lame_get_VBR_mean_bitrate_kbps($gfp){
 $gfp=($gfp)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$7=0,$8=0,$9=0,$12=0,label=0;
 var sp=0;sp=STACKTOP;


 $2=$gfp;
 $3=$2;
 $4=((_is_lame_global_flags_valid($3))|0);
 $5=($4|0)!=0;
 if ($5) {
  $7=$2;
  $8=(($7+168)|0);
  $9=((HEAP32[(($8)>>2)])|0);
  $1=$9;
 } else {
  $1=0;
 }
 $12=$1;
 STACKTOP=sp;return (($12)|0);
}


function _lame_set_VBR_min_bitrate_kbps($gfp,$VBR_min_bitrate_kbps){
 $gfp=($gfp)|0;
 $VBR_min_bitrate_kbps=($VBR_min_bitrate_kbps)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$8=0,$9=0,$10=0,$13=0,label=0;
 var sp=0;sp=STACKTOP;



 $2=$gfp;
 $3=$VBR_min_bitrate_kbps;
 $4=$2;
 $5=((_is_lame_global_flags_valid($4))|0);
 $6=($5|0)!=0;
 if ($6) {
  $8=$3;
  $9=$2;
  $10=(($9+172)|0);
  HEAP32[(($10)>>2)]=$8;
  $1=0;
  $13=$1;
  STACKTOP=sp;return (($13)|0);
 } else {
  $1=-1;
  $13=$1;
  STACKTOP=sp;return (($13)|0);
 }
  return 0;
}


function _lame_get_VBR_min_bitrate_kbps($gfp){
 $gfp=($gfp)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$7=0,$8=0,$9=0,$12=0,label=0;
 var sp=0;sp=STACKTOP;


 $2=$gfp;
 $3=$2;
 $4=((_is_lame_global_flags_valid($3))|0);
 $5=($4|0)!=0;
 if ($5) {
  $7=$2;
  $8=(($7+172)|0);
  $9=((HEAP32[(($8)>>2)])|0);
  $1=$9;
 } else {
  $1=0;
 }
 $12=$1;
 STACKTOP=sp;return (($12)|0);
}


function _lame_set_VBR_max_bitrate_kbps($gfp,$VBR_max_bitrate_kbps){
 $gfp=($gfp)|0;
 $VBR_max_bitrate_kbps=($VBR_max_bitrate_kbps)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$8=0,$9=0,$10=0,$13=0,label=0;
 var sp=0;sp=STACKTOP;



 $2=$gfp;
 $3=$VBR_max_bitrate_kbps;
 $4=$2;
 $5=((_is_lame_global_flags_valid($4))|0);
 $6=($5|0)!=0;
 if ($6) {
  $8=$3;
  $9=$2;
  $10=(($9+176)|0);
  HEAP32[(($10)>>2)]=$8;
  $1=0;
  $13=$1;
  STACKTOP=sp;return (($13)|0);
 } else {
  $1=-1;
  $13=$1;
  STACKTOP=sp;return (($13)|0);
 }
  return 0;
}


function _lame_get_VBR_max_bitrate_kbps($gfp){
 $gfp=($gfp)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$7=0,$8=0,$9=0,$12=0,label=0;
 var sp=0;sp=STACKTOP;


 $2=$gfp;
 $3=$2;
 $4=((_is_lame_global_flags_valid($3))|0);
 $5=($4|0)!=0;
 if ($5) {
  $7=$2;
  $8=(($7+176)|0);
  $9=((HEAP32[(($8)>>2)])|0);
  $1=$9;
 } else {
  $1=0;
 }
 $12=$1;
 STACKTOP=sp;return (($12)|0);
}


function _lame_set_maskingadjust($gfp,$adjust){
 $gfp=($gfp)|0;
 $adjust=+($adjust);
 var $1=0,$2=0,$3=.0,$4=0,$5=0,$6=0,$8=.0,$9=0,$10=0,$13=0,label=0;
 var sp=0;sp=STACKTOP;



 $2=$gfp;
 $3=$adjust;
 $4=$2;
 $5=((_is_lame_global_flags_valid($4))|0);
 $6=($5|0)!=0;
 if ($6) {
  $8=$3;
  $9=$2;
  $10=(($9+200)|0);
  HEAPF32[(($10)>>2)]=$8;
  $1=0;
  $13=$1;
  STACKTOP=sp;return (($13)|0);
 } else {
  $1=-1;
  $13=$1;
  STACKTOP=sp;return (($13)|0);
 }
  return 0;
}


function _lame_get_maskingadjust($gfp){
 $gfp=($gfp)|0;
 var $1=.0,$2=0,$3=0,$4=0,$5=0,$7=0,$8=0,$9=.0,$12=.0,label=0;
 var sp=0;sp=STACKTOP;


 $2=$gfp;
 $3=$2;
 $4=((_is_lame_global_flags_valid($3))|0);
 $5=($4|0)!=0;
 if ($5) {
  $7=$2;
  $8=(($7+200)|0);
  $9=(+(HEAPF32[(($8)>>2)]));
  $1=$9;
 } else {
  $1=0.0;
 }
 $12=$1;
 STACKTOP=sp;return (+($12));
}


function _lame_set_maskingadjust_short($gfp,$adjust){
 $gfp=($gfp)|0;
 $adjust=+($adjust);
 var $1=0,$2=0,$3=.0,$4=0,$5=0,$6=0,$8=.0,$9=0,$10=0,$13=0,label=0;
 var sp=0;sp=STACKTOP;



 $2=$gfp;
 $3=$adjust;
 $4=$2;
 $5=((_is_lame_global_flags_valid($4))|0);
 $6=($5|0)!=0;
 if ($6) {
  $8=$3;
  $9=$2;
  $10=(($9+204)|0);
  HEAPF32[(($10)>>2)]=$8;
  $1=0;
  $13=$1;
  STACKTOP=sp;return (($13)|0);
 } else {
  $1=-1;
  $13=$1;
  STACKTOP=sp;return (($13)|0);
 }
  return 0;
}


function _lame_get_maskingadjust_short($gfp){
 $gfp=($gfp)|0;
 var $1=.0,$2=0,$3=0,$4=0,$5=0,$7=0,$8=0,$9=.0,$12=.0,label=0;
 var sp=0;sp=STACKTOP;


 $2=$gfp;
 $3=$2;
 $4=((_is_lame_global_flags_valid($3))|0);
 $5=($4|0)!=0;
 if ($5) {
  $7=$2;
  $8=(($7+204)|0);
  $9=(+(HEAPF32[(($8)>>2)]));
  $1=$9;
 } else {
  $1=0.0;
 }
 $12=$1;
 STACKTOP=sp;return (+($12));
}


function _lame_set_ATHtype($gfp,$ATHtype){
 $gfp=($gfp)|0;
 $ATHtype=($ATHtype)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$8=0,$9=0,$10=0,$13=0,label=0;
 var sp=0;sp=STACKTOP;



 $2=$gfp;
 $3=$ATHtype;
 $4=$2;
 $5=((_is_lame_global_flags_valid($4))|0);
 $6=($5|0)!=0;
 if ($6) {
  $8=$3;
  $9=$2;
  $10=(($9+220)|0);
  HEAP32[(($10)>>2)]=$8;
  $1=0;
  $13=$1;
  STACKTOP=sp;return (($13)|0);
 } else {
  $1=-1;
  $13=$1;
  STACKTOP=sp;return (($13)|0);
 }
  return 0;
}


function _lame_set_ATHcurve($gfp,$ATHcurve){
 $gfp=($gfp)|0;
 $ATHcurve=+($ATHcurve);
 var $1=0,$2=0,$3=.0,$4=0,$5=0,$6=0,$8=.0,$9=0,$10=0,$13=0,label=0;
 var sp=0;sp=STACKTOP;



 $2=$gfp;
 $3=$ATHcurve;
 $4=$2;
 $5=((_is_lame_global_flags_valid($4))|0);
 $6=($5|0)!=0;
 if ($6) {
  $8=$3;
  $9=$2;
  $10=(($9+224)|0);
  HEAPF32[(($10)>>2)]=$8;
  $1=0;
  $13=$1;
  STACKTOP=sp;return (($13)|0);
 } else {
  $1=-1;
  $13=$1;
  STACKTOP=sp;return (($13)|0);
 }
  return 0;
}


function _lame_get_ATHcurve($gfp){
 $gfp=($gfp)|0;
 var $1=.0,$2=0,$3=0,$4=0,$5=0,$7=0,$8=0,$9=.0,$12=.0,label=0;
 var sp=0;sp=STACKTOP;


 $2=$gfp;
 $3=$2;
 $4=((_is_lame_global_flags_valid($3))|0);
 $5=($4|0)!=0;
 if ($5) {
  $7=$2;
  $8=(($7+224)|0);
  $9=(+(HEAPF32[(($8)>>2)]));
  $1=$9;
 } else {
  $1=0.0;
 }
 $12=$1;
 STACKTOP=sp;return (+($12));
}


function _lame_set_ATHlower($gfp,$ATHlower){
 $gfp=($gfp)|0;
 $ATHlower=+($ATHlower);
 var $1=0,$2=0,$3=.0,$4=0,$5=0,$6=0,$8=.0,$9=0,$10=0,$13=0,label=0;
 var sp=0;sp=STACKTOP;



 $2=$gfp;
 $3=$ATHlower;
 $4=$2;
 $5=((_is_lame_global_flags_valid($4))|0);
 $6=($5|0)!=0;
 if ($6) {
  $8=$3;
  $9=$2;
  $10=(($9+228)|0);
  HEAPF32[(($10)>>2)]=$8;
  $1=0;
  $13=$1;
  STACKTOP=sp;return (($13)|0);
 } else {
  $1=-1;
  $13=$1;
  STACKTOP=sp;return (($13)|0);
 }
  return 0;
}


function _lame_get_ATHlower($gfp){
 $gfp=($gfp)|0;
 var $1=.0,$2=0,$3=0,$4=0,$5=0,$7=0,$8=0,$9=.0,$12=.0,label=0;
 var sp=0;sp=STACKTOP;


 $2=$gfp;
 $3=$2;
 $4=((_is_lame_global_flags_valid($3))|0);
 $5=($4|0)!=0;
 if ($5) {
  $7=$2;
  $8=(($7+228)|0);
  $9=(+(HEAPF32[(($8)>>2)]));
  $1=$9;
 } else {
  $1=0.0;
 }
 $12=$1;
 STACKTOP=sp;return (+($12));
}


function _lame_set_athaa_sensitivity($gfp,$athaa_sensitivity){
 $gfp=($gfp)|0;
 $athaa_sensitivity=+($athaa_sensitivity);
 var $1=0,$2=0,$3=.0,$4=0,$5=0,$6=0,$8=.0,$9=0,$10=0,$13=0,label=0;
 var sp=0;sp=STACKTOP;



 $2=$gfp;
 $3=$athaa_sensitivity;
 $4=$2;
 $5=((_is_lame_global_flags_valid($4))|0);
 $6=($5|0)!=0;
 if ($6) {
  $8=$3;
  $9=$2;
  $10=(($9+236)|0);
  HEAPF32[(($10)>>2)]=$8;
  $1=0;
  $13=$1;
  STACKTOP=sp;return (($13)|0);
 } else {
  $1=-1;
  $13=$1;
  STACKTOP=sp;return (($13)|0);
 }
  return 0;
}


function _lame_get_athaa_sensitivity($gfp){
 $gfp=($gfp)|0;
 var $1=.0,$2=0,$3=0,$4=0,$5=0,$7=0,$8=0,$9=.0,$12=.0,label=0;
 var sp=0;sp=STACKTOP;


 $2=$gfp;
 $3=$2;
 $4=((_is_lame_global_flags_valid($3))|0);
 $5=($4|0)!=0;
 if ($5) {
  $7=$2;
  $8=(($7+236)|0);
  $9=(+(HEAPF32[(($8)>>2)]));
  $1=$9;
 } else {
  $1=0.0;
 }
 $12=$1;
 STACKTOP=sp;return (+($12));
}


function _lame_set_interChRatio($gfp,$ratio){
 $gfp=($gfp)|0;
 $ratio=+($ratio);
 var $1=0,$2=0,$3=.0,$4=0,$5=0,$6=0,$8=.0,$9=0,$11=.0,$12=.0,$13=0,$15=.0,$16=0,$17=0,$21=0,label=0;
 var sp=0;sp=STACKTOP;



 $2=$gfp;
 $3=$ratio;
 $4=$2;
 $5=((_is_lame_global_flags_valid($4))|0);
 $6=($5|0)!=0;
 if ($6) {
  $8=$3;
  $9=(0.0)<=$8;
  do {
   if ($9) {
    $11=$3;
    $12=$11;
    $13=$12<=(1.0);
    if (!($13)) {
     break;
    }
    $15=$3;
    $16=$2;
    $17=(($16+248)|0);
    HEAPF32[(($17)>>2)]=$15;
    $1=0;
    $21=$1;
    STACKTOP=sp;return (($21)|0);
   }
  } while(0);
 }
 $1=-1;
 $21=$1;
 STACKTOP=sp;return (($21)|0);
}


function _lame_get_interChRatio($gfp){
 $gfp=($gfp)|0;
 var $1=.0,$2=0,$3=0,$4=0,$5=0,$7=0,$8=0,$9=.0,$12=.0,label=0;
 var sp=0;sp=STACKTOP;


 $2=$gfp;
 $3=$2;
 $4=((_is_lame_global_flags_valid($3))|0);
 $5=($4|0)!=0;
 if ($5) {
  $7=$2;
  $8=(($7+248)|0);
  $9=(+(HEAPF32[(($8)>>2)]));
  $1=$9;
 } else {
  $1=0.0;
 }
 $12=$1;
 STACKTOP=sp;return (+($12));
}


function _lame_set_sfscale($gfp,$val){
 $gfp=($gfp)|0;
 $val=($val)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$8=0,$9=0,$10=0,$11=0,$12=0,$15=0,label=0;
 var sp=0;sp=STACKTOP;



 $2=$gfp;
 $3=$val;
 $4=$2;
 $5=((_is_lame_global_flags_valid($4))|0);
 $6=($5|0)!=0;
 if ($6) {
  $8=$3;
  $9=($8|0)!=0;
  $10=($9?2:1);
  $11=$2;
  $12=(($11+84)|0);
  HEAP32[(($12)>>2)]=$10;
  $1=0;
  $15=$1;
  STACKTOP=sp;return (($15)|0);
 } else {
  $1=-1;
  $15=$1;
  STACKTOP=sp;return (($15)|0);
 }
  return 0;
}


function _lame_set_short_threshold_lrm($gfp,$lrm){
 $gfp=($gfp)|0;
 $lrm=+($lrm);
 var $1=0,$2=0,$3=.0,$4=0,$5=0,$6=0,$8=.0,$9=0,$10=0,$13=0,label=0;
 var sp=0;sp=STACKTOP;



 $2=$gfp;
 $3=$lrm;
 $4=$2;
 $5=((_is_lame_global_flags_valid($4))|0);
 $6=($5|0)!=0;
 if ($6) {
  $8=$3;
  $9=$2;
  $10=(($9+264)|0);
  HEAPF32[(($10)>>2)]=$8;
  $1=0;
  $13=$1;
  STACKTOP=sp;return (($13)|0);
 } else {
  $1=-1;
  $13=$1;
  STACKTOP=sp;return (($13)|0);
 }
  return 0;
}


function _lame_get_short_threshold_lrm($gfp){
 $gfp=($gfp)|0;
 var $1=.0,$2=0,$3=0,$4=0,$5=0,$7=0,$8=0,$9=.0,$12=.0,label=0;
 var sp=0;sp=STACKTOP;


 $2=$gfp;
 $3=$2;
 $4=((_is_lame_global_flags_valid($3))|0);
 $5=($4|0)!=0;
 if ($5) {
  $7=$2;
  $8=(($7+264)|0);
  $9=(+(HEAPF32[(($8)>>2)]));
  $1=$9;
 } else {
  $1=0.0;
 }
 $12=$1;
 STACKTOP=sp;return (+($12));
}


function _lame_set_short_threshold_s($gfp,$s){
 $gfp=($gfp)|0;
 $s=+($s);
 var $1=0,$2=0,$3=.0,$4=0,$5=0,$6=0,$8=.0,$9=0,$10=0,$13=0,label=0;
 var sp=0;sp=STACKTOP;



 $2=$gfp;
 $3=$s;
 $4=$2;
 $5=((_is_lame_global_flags_valid($4))|0);
 $6=($5|0)!=0;
 if ($6) {
  $8=$3;
  $9=$2;
  $10=(($9+268)|0);
  HEAPF32[(($10)>>2)]=$8;
  $1=0;
  $13=$1;
  STACKTOP=sp;return (($13)|0);
 } else {
  $1=-1;
  $13=$1;
  STACKTOP=sp;return (($13)|0);
 }
  return 0;
}


function _lame_get_short_threshold_s($gfp){
 $gfp=($gfp)|0;
 var $1=.0,$2=0,$3=0,$4=0,$5=0,$7=0,$8=0,$9=.0,$12=.0,label=0;
 var sp=0;sp=STACKTOP;


 $2=$gfp;
 $3=$2;
 $4=((_is_lame_global_flags_valid($3))|0);
 $5=($4|0)!=0;
 if ($5) {
  $7=$2;
  $8=(($7+268)|0);
  $9=(+(HEAPF32[(($8)>>2)]));
  $1=$9;
 } else {
  $1=0.0;
 }
 $12=$1;
 STACKTOP=sp;return (+($12));
}


function _lame_set_msfix($gfp,$msfix){
 $gfp=($gfp)|0;
 $msfix=+($msfix);
 var $1=0,$2=.0,$3=0,$4=0,$5=0,$7=.0,$8=.0,$9=0,$10=0,label=0;
 var sp=0;sp=STACKTOP;


 $1=$gfp;
 $2=$msfix;
 $3=$1;
 $4=((_is_lame_global_flags_valid($3))|0);
 $5=($4|0)!=0;
 if (!($5)) {
  STACKTOP=sp;return;
 }
 $7=$2;
 $8=$7;
 $9=$1;
 $10=(($9+252)|0);
 HEAPF32[(($10)>>2)]=$8;
 STACKTOP=sp;return;
}


function _lame_get_msfix($gfp){
 $gfp=($gfp)|0;
 var $1=.0,$2=0,$3=0,$4=0,$5=0,$7=0,$8=0,$9=.0,$12=.0,label=0;
 var sp=0;sp=STACKTOP;


 $2=$gfp;
 $3=$2;
 $4=((_is_lame_global_flags_valid($3))|0);
 $5=($4|0)!=0;
 if ($5) {
  $7=$2;
  $8=(($7+252)|0);
  $9=(+(HEAPF32[(($8)>>2)]));
  $1=$9;
 } else {
  $1=0.0;
 }
 $12=$1;
 STACKTOP=sp;return (+($12));
}


function _apply_preset($gfp,$preset,$enforce){
 $gfp=($gfp)|0;
 $preset=($preset)|0;
 $enforce=($enforce)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$7=0,$8=0,$10=0,$11=0,$13=0,$14=0,$16=0,$17=0,$19=0,$20=0,$21=0,$22=0,$23=0,$24=0,$25=0;
 var $26=0,$27=0,$28=0,$30=0,$31=0,$32=0,$33=0,$35=0,$36=0,$37=0,$39=0,$40=0,$41=0,$43=0,$44=0,$45=0,$47=0,$48=0,$49=0,$51=0;
 var $52=0,$53=0,$55=0,$56=0,$57=0,$59=0,$60=0,$61=0,$63=0,$64=0,$65=0,$67=0,$68=0,$69=0,$71=0,$72=0,$73=0,$76=0,$77=0,$79=0;
 var $80=0,$82=0,$83=0,$84=0,$85=0,$87=0,$88=0,$89=0,$91=0,label=0;
 var sp=0;sp=STACKTOP;




 $2=$gfp;
 $3=$preset;
 $4=$enforce;
 $5=$3;
 switch (($5|0)) {
 case 1003: {
  $3=320;
  $19=$3;
  $20=$2;
  $21=(($20+152)|0);
  HEAP32[(($21)>>2)]=$19;
  $22=$2;
  $23=$3;
  $24=$4;
  $25=((_apply_abr_preset($22,$23,$24))|0);
  $26=$2;
  $27=((_lame_set_VBR($26,0))|0);
  $28=$3;
  $1=$28;
  break;
 }
 case 1000: {
  $3=470;
  $7=$2;
  $8=((_lame_set_VBR($7,4))|0);
  label = 7;
  break;
 }
 case 1002:case 1005: {
  $3=500;
  $16=$2;
  $17=((_lame_set_VBR($16,4))|0);
  label = 7;
  break;
 }
 case 1006:case 1007: {
  $3=460;
  $10=$2;
  $11=((_lame_set_VBR($10,4))|0);
  label = 7;
  break;
 }
 case 1001:case 1004: {
  $3=480;
  $13=$2;
  $14=((_lame_set_VBR($13,4))|0);
  label = 7;
  break;
 }
 default: {
  label = 7;
 }
 }
 L7: do {
  if ((label|0) == 7) {
   $30=$3;
   $31=$2;
   $32=(($31+152)|0);
   HEAP32[(($32)>>2)]=$30;
   $33=$3;
   switch (($33|0)) {
   case 410: {
    $35=$2;
    $36=$4;
    _apply_vbr_preset($35,9,$36);
    $37=$3;
    $1=$37;
    break L7;
    break;
   }
   case 440: {
    $47=$2;
    $48=$4;
    _apply_vbr_preset($47,6,$48);
    $49=$3;
    $1=$49;
    break L7;
    break;
   }
   case 490: {
    $67=$2;
    $68=$4;
    _apply_vbr_preset($67,1,$68);
    $69=$3;
    $1=$69;
    break L7;
    break;
   }
   case 500: {
    $71=$2;
    $72=$4;
    _apply_vbr_preset($71,0,$72);
    $73=$3;
    $1=$73;
    break L7;
    break;
   }
   case 460: {
    $55=$2;
    $56=$4;
    _apply_vbr_preset($55,4,$56);
    $57=$3;
    $1=$57;
    break L7;
    break;
   }
   case 480: {
    $63=$2;
    $64=$4;
    _apply_vbr_preset($63,2,$64);
    $65=$3;
    $1=$65;
    break L7;
    break;
   }
   case 430: {
    $43=$2;
    $44=$4;
    _apply_vbr_preset($43,7,$44);
    $45=$3;
    $1=$45;
    break L7;
    break;
   }
   case 470: {
    $59=$2;
    $60=$4;
    _apply_vbr_preset($59,3,$60);
    $61=$3;
    $1=$61;
    break L7;
    break;
   }
   case 420: {
    $39=$2;
    $40=$4;
    _apply_vbr_preset($39,8,$40);
    $41=$3;
    $1=$41;
    break L7;
    break;
   }
   case 450: {
    $51=$2;
    $52=$4;
    _apply_vbr_preset($51,5,$52);
    $53=$3;
    $1=$53;
    break L7;
    break;
   }
   default: {
    $76=$3;
    $77=8<=($76|0);
    do {
     if ($77) {
      $79=$3;
      $80=($79|0)<=320;
      if (!($80)) {
       break;
      }
      $82=$2;
      $83=$3;
      $84=$4;
      $85=((_apply_abr_preset($82,$83,$84))|0);
      $1=$85;
      break L7;
     }
    } while(0);
    $87=$2;
    $88=(($87+152)|0);
    HEAP32[(($88)>>2)]=0;
    $89=$3;
    $1=$89;
    break L7;
   }
   }
  }
 } while(0);
 $91=$1;
 STACKTOP=sp;return (($91)|0);
}


function _apply_abr_preset($gfp,$preset,$enforce){
 $gfp=($gfp)|0;
 $preset=($preset)|0;
 $enforce=($enforce)|0;
 var $1=0,$2=0,$3=0,$r=0,$actual_bitrate=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$14=0,$15=0,$16=0,$17=0,$18=0;
 var $19=0,$20=0,$21=0,$22=0,$23=0,$24=0,$25=0,$26=0,$27=0,$28=0,$29=0,$30=0,$31=0,$33=0,$34=0,$35=0,$36=0,$37=0,$39=0,$40=0;
 var $41=0,$42=0,$43=0,$45=0,$46=0,$48=0,$49=0,$51=0,$52=0,$53=0,$54=0,$55=0,$56=0,$58=0,$59=0,$60=0,$61=.0,$62=.0,$63=0,$65=0;
 var $66=0,$67=0,$68=0,$69=0,$70=0,$73=0,$74=0,$76=0,$77=0,$78=0,$79=0,$80=0,$81=0,$83=0,$84=0,$85=0,$86=.0,$87=.0,$88=0,$90=0;
 var $91=0,$92=0,$93=0,$94=0,$95=0,$98=0,$99=0,$101=0,$102=0,$103=0,$104=0,$105=.0,$106=.0,$108=0,$109=.0,$110=.0,$111=.0,$112=.0,$113=0,$115=0;
 var $116=0,$117=0,$118=0,$119=.0,$120=.0,$123=0,$124=0,$126=0,$127=0,$128=0,$129=0,$130=.0,$131=0,$133=0,$134=.0,$135=.0,$136=.0,$137=.0,$138=0,$140=0;
 var $141=0,$142=0,$143=0,$144=.0,$145=0,$148=0,$149=0,$151=0,$152=0,$153=0,$154=0,$155=.0,$156=0,$158=0,$159=.0,$160=.0,$161=.0,$162=.0,$163=0,$165=0;
 var $166=0,$167=0,$168=0,$169=.0,$170=0,$173=0,$174=0,$175=.0,$176=0,$177=0,$178=0,$179=.0,$180=.0,$181=0,$182=0,$183=0,$185=0,$186=0,$187=0,$188=0;
 var $189=.0,$190=0,$192=0,$193=.0,$194=.0,$195=.0,$196=.0,$197=0,$199=0,$200=0,$201=0,$202=0,$203=.0,$204=0,$207=0,$208=0,$209=0,$210=.0,$211=0,$213=0;
 var $214=0,$216=0,$217=0,$218=0,$219=0,$220=.0,$221=.0,$222=.0,$223=.0,$224=0,$226=0,$227=.0,$228=.0,$229=.0,$230=.0,$231=0,$233=0,$234=0,$235=0,$236=0;
 var $237=.0,$238=.0,$239=.0,$240=.0,$241=0,$245=0,$246=0,$248=0,$249=0,$250=0,$251=0,$252=.0,$253=.0,$254=.0,$255=.0,$256=0,$258=0,$259=.0,$260=.0,$261=.0;
 var $262=.0,$263=0,$265=0,$266=0,$267=0,$268=0,$269=.0,$270=.0,$271=.0,$272=.0,$273=0,$277=0,$278=0,$280=0,$281=0,$282=0,$283=0,$284=.0,$285=0,$287=0;
 var $288=.0,$289=.0,$290=.0,$291=.0,$292=0,$294=0,$295=0,$296=0,$297=0,$298=.0,$299=0,$302=0,$303=0,$305=0,$306=0,$307=0,$308=0,$309=.0,$310=0,$312=0;
 var $313=.0,$314=.0,$315=.0,$316=.0,$317=0,$319=0,$320=0,$321=0,$322=0,$323=.0,$324=0,$327=0,$328=0,$330=0,$331=0,$332=0,$333=0,$334=.0,$335=0,$337=0;
 var $338=.0,$339=.0,$340=.0,$341=.0,$342=0,$344=0,$345=0,$346=0,$347=0,$348=.0,$349=0,$352=0,$353=0,$354=0,$355=0,$356=0,$357=0,$358=0,$359=0,$360=.0;
 var $361=.0,$362=.0,$363=.0,$364=0,$365=0,$366=0,$367=0,$368=0,$369=0,label=0;
 var sp=0;sp=STACKTOP;





 $1=$gfp;
 $2=$preset;
 $3=$enforce;
 $4=$2;
 $actual_bitrate=$4;
 $5=$2;
 $6=(($5)&65535);
 $7=((_nearestBitrateFullIndex($6))|0);
 $r=$7;
 $8=$1;
 $9=((_lame_set_VBR($8,3))|0);
 $10=$1;
 $11=$actual_bitrate;
 $12=((_lame_set_VBR_mean_bitrate_kbps($10,$11))|0);
 $13=$1;
 $14=$1;
 $15=((_lame_get_VBR_mean_bitrate_kbps($14))|0);
 $16=((_min_int($15,320))|0);
 $17=((_lame_set_VBR_mean_bitrate_kbps($13,$16))|0);
 $18=$1;
 $19=$1;
 $20=((_lame_get_VBR_mean_bitrate_kbps($19))|0);
 $21=((_max_int($20,8))|0);
 $22=((_lame_set_VBR_mean_bitrate_kbps($18,$21))|0);
 $23=$1;
 $24=$1;
 $25=((_lame_get_VBR_mean_bitrate_kbps($24))|0);
 $26=((_lame_set_brate($23,$25))|0);
 $27=$r;
 $28=((15360+((($27)*(52))&-1))|0);
 $29=(($28+12)|0);
 $30=((HEAP32[(($29)>>2)])|0);
 $31=($30|0)>0;
 if ($31) {
  $33=$1;
  $34=$1;
  $35=((_lame_get_exp_nspsytune($34))|0);
  $36=$35|2;
  $37=((_lame_set_exp_nspsytune($33,$36))|0);
 }
 $39=$r;
 $40=((15360+((($39)*(52))&-1))|0);
 $41=(($40+48)|0);
 $42=((HEAP32[(($41)>>2)])|0);
 $43=($42|0)>0;
 if ($43) {
  $45=$1;
  $46=((_lame_set_sfscale($45,1))|0);
 }
 $48=$3;
 $49=($48|0)!=0;
 if ($49) {
  $51=$1;
  $52=$r;
  $53=((15360+((($52)*(52))&-1))|0);
  $54=(($53+4)|0);
  $55=((HEAP32[(($54)>>2)])|0);
  $56=((_lame_set_quant_comp($51,$55))|0);
 } else {
  $58=$1;
  $59=((_lame_get_quant_comp($58))|0);
  $60=((($59)+(1))|0);
  $61=(+((($60|0))|0));
  $62=(+(Math_abs((+($61)))));
  $63=$62>(0.0);
  if (!($63)) {
   $65=$1;
   $66=$r;
   $67=((15360+((($66)*(52))&-1))|0);
   $68=(($67+4)|0);
   $69=((HEAP32[(($68)>>2)])|0);
   $70=((_lame_set_quant_comp($65,$69))|0);
  }
 }
 $73=$3;
 $74=($73|0)!=0;
 if ($74) {
  $76=$1;
  $77=$r;
  $78=((15360+((($77)*(52))&-1))|0);
  $79=(($78+8)|0);
  $80=((HEAP32[(($79)>>2)])|0);
  $81=((_lame_set_quant_comp_short($76,$80))|0);
 } else {
  $83=$1;
  $84=((_lame_get_quant_comp_short($83))|0);
  $85=((($84)+(1))|0);
  $86=(+((($85|0))|0));
  $87=(+(Math_abs((+($86)))));
  $88=$87>(0.0);
  if (!($88)) {
   $90=$1;
   $91=$r;
   $92=((15360+((($91)*(52))&-1))|0);
   $93=(($92+8)|0);
   $94=((HEAP32[(($93)>>2)])|0);
   $95=((_lame_set_quant_comp_short($90,$94))|0);
  }
 }
 $98=$3;
 $99=($98|0)!=0;
 if ($99) {
  $101=$1;
  $102=$r;
  $103=((15360+((($102)*(52))&-1))|0);
  $104=(($103+16)|0);
  $105=(+(HEAPF32[(($104)>>2)]));
  $106=$105;
  _lame_set_msfix($101,$106);
 } else {
  $108=$1;
  $109=(+(_lame_get_msfix($108)));
  $110=($109)-((-1.0));
  $111=$110;
  $112=(+(Math_abs((+($111)))));
  $113=$112>(0.0);
  if (!($113)) {
   $115=$1;
   $116=$r;
   $117=((15360+((($116)*(52))&-1))|0);
   $118=(($117+16)|0);
   $119=(+(HEAPF32[(($118)>>2)]));
   $120=$119;
   _lame_set_msfix($115,$120);
  }
 }
 $123=$3;
 $124=($123|0)!=0;
 if ($124) {
  $126=$1;
  $127=$r;
  $128=((15360+((($127)*(52))&-1))|0);
  $129=(($128+20)|0);
  $130=(+(HEAPF32[(($129)>>2)]));
  $131=((_lame_set_short_threshold_lrm($126,$130))|0);
 } else {
  $133=$1;
  $134=(+(_lame_get_short_threshold_lrm($133)));
  $135=($134)-((-1.0));
  $136=$135;
  $137=(+(Math_abs((+($136)))));
  $138=$137>(0.0);
  if (!($138)) {
   $140=$1;
   $141=$r;
   $142=((15360+((($141)*(52))&-1))|0);
   $143=(($142+20)|0);
   $144=(+(HEAPF32[(($143)>>2)]));
   $145=((_lame_set_short_threshold_lrm($140,$144))|0);
  }
 }
 $148=$3;
 $149=($148|0)!=0;
 if ($149) {
  $151=$1;
  $152=$r;
  $153=((15360+((($152)*(52))&-1))|0);
  $154=(($153+24)|0);
  $155=(+(HEAPF32[(($154)>>2)]));
  $156=((_lame_set_short_threshold_s($151,$155))|0);
 } else {
  $158=$1;
  $159=(+(_lame_get_short_threshold_s($158)));
  $160=($159)-((-1.0));
  $161=$160;
  $162=(+(Math_abs((+($161)))));
  $163=$162>(0.0);
  if (!($163)) {
   $165=$1;
   $166=$r;
   $167=((15360+((($166)*(52))&-1))|0);
   $168=(($167+24)|0);
   $169=(+(HEAPF32[(($168)>>2)]));
   $170=((_lame_set_short_threshold_s($165,$169))|0);
  }
 }
 $173=$1;
 $174=$1;
 $175=(+(_lame_get_scale($174)));
 $176=$r;
 $177=((15360+((($176)*(52))&-1))|0);
 $178=(($177+28)|0);
 $179=(+(HEAPF32[(($178)>>2)]));
 $180=($175)*($179);
 $181=((_lame_set_scale($173,$180))|0);
 $182=$3;
 $183=($182|0)!=0;
 if ($183) {
  $185=$1;
  $186=$r;
  $187=((15360+((($186)*(52))&-1))|0);
  $188=(($187+32)|0);
  $189=(+(HEAPF32[(($188)>>2)]));
  $190=((_lame_set_maskingadjust($185,$189))|0);
 } else {
  $192=$1;
  $193=(+(_lame_get_maskingadjust($192)));
  $194=($193)-((0.0));
  $195=$194;
  $196=(+(Math_abs((+($195)))));
  $197=$196>(0.0);
  if (!($197)) {
   $199=$1;
   $200=$r;
   $201=((15360+((($200)*(52))&-1))|0);
   $202=(($201+32)|0);
   $203=(+(HEAPF32[(($202)>>2)]));
   $204=((_lame_set_maskingadjust($199,$203))|0);
  }
 }
 $207=$r;
 $208=((15360+((($207)*(52))&-1))|0);
 $209=(($208+32)|0);
 $210=(+(HEAPF32[(($209)>>2)]));
 $211=$210>(0.0);
 if ($211) {
  $213=$3;
  $214=($213|0)!=0;
  if ($214) {
   $216=$1;
   $217=$r;
   $218=((15360+((($217)*(52))&-1))|0);
   $219=(($218+32)|0);
   $220=(+(HEAPF32[(($219)>>2)]));
   $221=$220;
   $222=($221)*((0.9));
   $223=$222;
   $224=((_lame_set_maskingadjust_short($216,$223))|0);
  } else {
   $226=$1;
   $227=(+(_lame_get_maskingadjust_short($226)));
   $228=($227)-((0.0));
   $229=$228;
   $230=(+(Math_abs((+($229)))));
   $231=$230>(0.0);
   if (!($231)) {
    $233=$1;
    $234=$r;
    $235=((15360+((($234)*(52))&-1))|0);
    $236=(($235+32)|0);
    $237=(+(HEAPF32[(($236)>>2)]));
    $238=$237;
    $239=($238)*((0.9));
    $240=$239;
    $241=((_lame_set_maskingadjust_short($233,$240))|0);
   }
  }
 } else {
  $245=$3;
  $246=($245|0)!=0;
  if ($246) {
   $248=$1;
   $249=$r;
   $250=((15360+((($249)*(52))&-1))|0);
   $251=(($250+32)|0);
   $252=(+(HEAPF32[(($251)>>2)]));
   $253=$252;
   $254=($253)*((1.1));
   $255=$254;
   $256=((_lame_set_maskingadjust_short($248,$255))|0);
  } else {
   $258=$1;
   $259=(+(_lame_get_maskingadjust_short($258)));
   $260=($259)-((0.0));
   $261=$260;
   $262=(+(Math_abs((+($261)))));
   $263=$262>(0.0);
   if (!($263)) {
    $265=$1;
    $266=$r;
    $267=((15360+((($266)*(52))&-1))|0);
    $268=(($267+32)|0);
    $269=(+(HEAPF32[(($268)>>2)]));
    $270=$269;
    $271=($270)*((1.1));
    $272=$271;
    $273=((_lame_set_maskingadjust_short($265,$272))|0);
   }
  }
 }
 $277=$3;
 $278=($277|0)!=0;
 if ($278) {
  $280=$1;
  $281=$r;
  $282=((15360+((($281)*(52))&-1))|0);
  $283=(($282+36)|0);
  $284=(+(HEAPF32[(($283)>>2)]));
  $285=((_lame_set_ATHlower($280,$284))|0);
 } else {
  $287=$1;
  $288=(+(_lame_get_ATHlower($287)));
  $289=($288)-((0.0));
  $290=$289;
  $291=(+(Math_abs((+($290)))));
  $292=$291>(0.0);
  if (!($292)) {
   $294=$1;
   $295=$r;
   $296=((15360+((($295)*(52))&-1))|0);
   $297=(($296+36)|0);
   $298=(+(HEAPF32[(($297)>>2)]));
   $299=((_lame_set_ATHlower($294,$298))|0);
  }
 }
 $302=$3;
 $303=($302|0)!=0;
 if ($303) {
  $305=$1;
  $306=$r;
  $307=((15360+((($306)*(52))&-1))|0);
  $308=(($307+40)|0);
  $309=(+(HEAPF32[(($308)>>2)]));
  $310=((_lame_set_ATHcurve($305,$309))|0);
 } else {
  $312=$1;
  $313=(+(_lame_get_ATHcurve($312)));
  $314=($313)-((-1.0));
  $315=$314;
  $316=(+(Math_abs((+($315)))));
  $317=$316>(0.0);
  if (!($317)) {
   $319=$1;
   $320=$r;
   $321=((15360+((($320)*(52))&-1))|0);
   $322=(($321+40)|0);
   $323=(+(HEAPF32[(($322)>>2)]));
   $324=((_lame_set_ATHcurve($319,$323))|0);
  }
 }
 $327=$3;
 $328=($327|0)!=0;
 if ($328) {
  $330=$1;
  $331=$r;
  $332=((15360+((($331)*(52))&-1))|0);
  $333=(($332+44)|0);
  $334=(+(HEAPF32[(($333)>>2)]));
  $335=((_lame_set_interChRatio($330,$334))|0);
  $352=$r;
  $353=((15360+((($352)*(52))&-1))|0);
  $354=(($353)|0);
  $355=((HEAP32[(($354)>>2)])|0);
  $356=$r;
  $357=((15360+((($356)*(52))&-1))|0);
  $358=(($357)|0);
  $359=((HEAP32[(($358)>>2)])|0);
  $360=(+((($359|0))|0));
  $361=($360)/((320.0));
  $362=((5.0))*($361);
  $363=$362;
  $364=$1;
  $365=(($364+288)|0);
  $366=((HEAP32[(($365)>>2)])|0);
  $367=(($366+16)|0);
  $368=(($367+264)|0);
  HEAPF32[(($368)>>2)]=$363;
  $369=$2;
  STACKTOP=sp;return (($369)|0);
 }
 $337=$1;
 $338=(+(_lame_get_interChRatio($337)));
 $339=($338)-((-1.0));
 $340=$339;
 $341=(+(Math_abs((+($340)))));
 $342=$341>(0.0);
 if (!($342)) {
  $344=$1;
  $345=$r;
  $346=((15360+((($345)*(52))&-1))|0);
  $347=(($346+44)|0);
  $348=(+(HEAPF32[(($347)>>2)]));
  $349=((_lame_set_interChRatio($344,$348))|0);
 }
 $352=$r;
 $353=((15360+((($352)*(52))&-1))|0);
 $354=(($353)|0);
 $355=((HEAP32[(($354)>>2)])|0);
 $356=$r;
 $357=((15360+((($356)*(52))&-1))|0);
 $358=(($357)|0);
 $359=((HEAP32[(($358)>>2)])|0);
 $360=(+((($359|0))|0));
 $361=($360)/((320.0));
 $362=((5.0))*($361);
 $363=$362;
 $364=$1;
 $365=(($364+288)|0);
 $366=((HEAP32[(($365)>>2)])|0);
 $367=(($366+16)|0);
 $368=(($367+264)|0);
 HEAPF32[(($368)>>2)]=$363;
 $369=$2;
 STACKTOP=sp;return (($369)|0);
}



function _apply_vbr_preset($gfp,$a,$enforce){
 $gfp=($gfp)|0;
 $a=($a)|0;
 $enforce=($enforce)|0;
 var $1=0,$2=0,$3=0,$vbr_preset=0,$x=.0,$p=0,$q=0,$set=0,$nsp=0,$val=0,$sf21mod=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=.0,$10=0,$11=0,$12=0;
 var $13=0,$14=0,$15=0,$16=0,$17=0,$18=0,$19=0,$20=0,$21=0,$22=0,$23=0,$24=0,$25=0,$26=0,$27=0,$28=0,$29=0,$30=.0,$31=.0,$32=0;
 var $33=.0,$34=0,$35=.0,$36=.0,$37=.0,$38=.0,$39=0,$40=0,$41=.0,$42=.0,$43=0,$44=.0,$45=0,$46=.0,$47=.0,$48=.0,$49=.0,$50=0,$51=0,$52=.0;
 var $53=.0,$54=0,$55=.0,$56=0,$57=.0,$58=.0,$59=.0,$60=.0,$61=0,$62=0,$63=.0,$64=.0,$65=0,$66=.0,$67=0,$68=.0,$69=.0,$70=.0,$71=.0,$72=0;
 var $73=0,$74=.0,$75=.0,$76=0,$77=.0,$78=0,$79=.0,$80=.0,$81=.0,$82=.0,$83=0,$84=0,$85=.0,$86=.0,$87=0,$88=.0,$89=0,$90=.0,$91=.0,$92=.0;
 var $93=.0,$94=0,$95=0,$96=.0,$97=.0,$98=0,$99=.0,$100=0,$101=.0,$102=.0,$103=.0,$104=.0,$105=0,$106=0,$107=.0,$108=.0,$109=0,$110=.0,$111=0,$112=.0;
 var $113=.0,$114=.0,$115=.0,$116=0,$117=0,$118=0,$119=0,$120=0,$121=.0,$122=.0,$123=0,$124=0,$125=0,$126=0,$127=0,$128=.0,$129=.0,$130=.0,$131=0,$132=0;
 var $133=0,$134=.0,$135=.0,$136=0,$137=.0,$138=0,$139=.0,$140=.0,$141=.0,$142=.0,$143=0,$144=0,$145=.0,$146=.0,$147=0,$148=.0,$149=0,$150=.0,$151=.0,$152=.0;
 var $153=.0,$154=0,$155=0,$156=.0,$157=.0,$158=0,$159=.0,$160=0,$161=.0,$162=.0,$163=.0,$164=.0,$165=0,$166=0,$167=0,$168=0,$169=0,$170=0,$171=0,$172=0;
 var $174=0,$175=0,$176=0,$177=0,$178=0,$180=0,$181=0,$182=0,$183=.0,$184=.0,$185=0,$187=0,$188=0,$189=0,$190=0,$191=0,$194=0,$195=0,$197=0,$198=0;
 var $199=0,$200=0,$201=0,$203=0,$204=0,$205=0,$206=.0,$207=.0,$208=0,$210=0,$211=0,$212=0,$213=0,$214=0,$217=0,$218=0,$219=0,$220=0,$222=0,$223=0;
 var $224=0,$225=0,$226=0,$228=0,$229=0,$231=0,$232=0,$233=0,$234=.0,$235=0,$237=0,$238=.0,$239=.0,$240=.0,$241=.0,$242=0,$244=0,$245=0,$246=0,$247=.0;
 var $248=0,$251=0,$252=0,$254=0,$255=0,$256=0,$257=.0,$258=0,$260=0,$261=.0,$262=.0,$263=.0,$264=.0,$265=0,$267=0,$268=0,$269=0,$270=.0,$271=0,$274=0;
 var $275=0,$277=0,$278=0,$279=0,$280=.0,$281=0,$283=0,$284=.0,$285=.0,$286=.0,$287=.0,$288=0,$290=0,$291=0,$292=0,$293=.0,$294=0,$297=0,$298=0,$300=0;
 var $301=0,$302=0,$303=.0,$304=0,$306=0,$307=.0,$308=.0,$309=.0,$310=.0,$311=0,$313=0,$314=0,$315=0,$316=.0,$317=0,$320=0,$321=0,$322=0,$324=0,$325=0;
 var $326=0,$328=0,$329=0,$331=0,$332=0,$334=0,$335=0,$336=0,$337=.0,$338=0,$340=0,$341=.0,$342=.0,$343=.0,$344=.0,$345=0,$347=0,$348=0,$349=0,$350=.0;
 var $351=0,$354=0,$355=0,$357=0,$358=0,$359=0,$360=.0,$361=0,$363=0,$364=.0,$365=.0,$366=.0,$367=.0,$368=0,$370=0,$371=0,$372=0,$373=.0,$374=0,$377=0;
 var $378=0,$380=0,$381=0,$382=0,$383=.0,$384=0,$386=0,$387=.0,$388=.0,$389=.0,$390=.0,$391=0,$393=0,$394=0,$395=0,$396=.0,$397=0,$400=0,$401=0,$402=.0;
 var $403=0,$405=0,$406=0,$408=0,$409=0,$410=0,$411=.0,$412=0,$414=0,$415=.0,$416=.0,$417=.0,$418=.0,$419=0,$421=0,$422=0,$423=0,$424=.0,$425=0,$429=0;
 var $430=0,$431=0,$432=0,$434=0,$435=0,$436=0,$437=0,$438=0,$440=0,$441=0,$442=0,$443=0,$445=0,$446=0,$447=0,$448=0,$449=0,$450=0,$451=0,$453=0;
 var $454=0,$455=0,$456=0,$457=0,$458=0,$459=0,$460=0,$461=0,$464=0,$465=0,$467=0,$468=0,$469=0,$470=.0,$471=.0,$473=0,$474=.0,$475=.0,$476=.0,$477=.0;
 var $478=0,$480=0,$481=0,$482=0,$483=.0,$484=.0,$487=0,$488=0,$490=0,$491=0,$492=0,$493=.0,$494=0,$495=0,$497=0,$498=0,$499=.0,$500=0,$501=0,$502=0;
 var $503=0,$504=0,$505=0,$506=0,$507=.0,$508=0,$509=0,$510=0,$511=0,$512=0,label=0;
 var sp=0;sp=STACKTOP;STACKTOP=(STACKTOP+144)|0;





 $p=((sp)|0);
 $q=(((sp)+(72))|0);




 $1=$gfp;
 $2=$a;
 $3=$enforce;
 $4=$1;
 $5=((_lame_get_VBR($4))|0);
 $6=((_get_vbr_preset($5))|0);
 $vbr_preset=$6;
 $7=$1;
 $8=(($7+160)|0);
 $9=(+(HEAPF32[(($8)>>2)]));
 $x=$9;
 $10=$2;
 $11=$vbr_preset;
 $12=(($11+((($10)*(68))&-1))|0);
 $13=$p;
 $14=$12;
 (_memcpy((($13)|0), (($14)|0), 68)|0);
 $15=$2;
 $16=((($15)+(1))|0);
 $17=$vbr_preset;
 $18=(($17+((($16)*(68))&-1))|0);
 $19=$q;
 $20=$18;
 (_memcpy((($19)|0), (($20)|0), 68)|0);
 $set=$p;
 $21=(($p)|0);
 $22=((HEAP32[(($21)>>2)])|0);
 $23=(($p+4)|0);
 $24=((HEAP32[(($23)>>2)])|0);
 $25=(($p+8)|0);
 $26=((HEAP32[(($25)>>2)])|0);
 $27=(($p+12)|0);
 $28=((HEAP32[(($27)>>2)])|0);
 $29=(($p+16)|0);
 $30=(+(HEAPF32[(($29)>>2)]));
 $31=$x;
 $32=(($q+16)|0);
 $33=(+(HEAPF32[(($32)>>2)]));
 $34=(($p+16)|0);
 $35=(+(HEAPF32[(($34)>>2)]));
 $36=($33)-($35);
 $37=($31)*($36);
 $38=($30)+($37);
 $39=(($p+16)|0);
 HEAPF32[(($39)>>2)]=$38;
 $40=(($p+20)|0);
 $41=(+(HEAPF32[(($40)>>2)]));
 $42=$x;
 $43=(($q+20)|0);
 $44=(+(HEAPF32[(($43)>>2)]));
 $45=(($p+20)|0);
 $46=(+(HEAPF32[(($45)>>2)]));
 $47=($44)-($46);
 $48=($42)*($47);
 $49=($41)+($48);
 $50=(($p+20)|0);
 HEAPF32[(($50)>>2)]=$49;
 $51=(($p+24)|0);
 $52=(+(HEAPF32[(($51)>>2)]));
 $53=$x;
 $54=(($q+24)|0);
 $55=(+(HEAPF32[(($54)>>2)]));
 $56=(($p+24)|0);
 $57=(+(HEAPF32[(($56)>>2)]));
 $58=($55)-($57);
 $59=($53)*($58);
 $60=($52)+($59);
 $61=(($p+24)|0);
 HEAPF32[(($61)>>2)]=$60;
 $62=(($p+28)|0);
 $63=(+(HEAPF32[(($62)>>2)]));
 $64=$x;
 $65=(($q+28)|0);
 $66=(+(HEAPF32[(($65)>>2)]));
 $67=(($p+28)|0);
 $68=(+(HEAPF32[(($67)>>2)]));
 $69=($66)-($68);
 $70=($64)*($69);
 $71=($63)+($70);
 $72=(($p+28)|0);
 HEAPF32[(($72)>>2)]=$71;
 $73=(($p+32)|0);
 $74=(+(HEAPF32[(($73)>>2)]));
 $75=$x;
 $76=(($q+32)|0);
 $77=(+(HEAPF32[(($76)>>2)]));
 $78=(($p+32)|0);
 $79=(+(HEAPF32[(($78)>>2)]));
 $80=($77)-($79);
 $81=($75)*($80);
 $82=($74)+($81);
 $83=(($p+32)|0);
 HEAPF32[(($83)>>2)]=$82;
 $84=(($p+36)|0);
 $85=(+(HEAPF32[(($84)>>2)]));
 $86=$x;
 $87=(($q+36)|0);
 $88=(+(HEAPF32[(($87)>>2)]));
 $89=(($p+36)|0);
 $90=(+(HEAPF32[(($89)>>2)]));
 $91=($88)-($90);
 $92=($86)*($91);
 $93=($85)+($92);
 $94=(($p+36)|0);
 HEAPF32[(($94)>>2)]=$93;
 $95=(($p+40)|0);
 $96=(+(HEAPF32[(($95)>>2)]));
 $97=$x;
 $98=(($q+40)|0);
 $99=(+(HEAPF32[(($98)>>2)]));
 $100=(($p+40)|0);
 $101=(+(HEAPF32[(($100)>>2)]));
 $102=($99)-($101);
 $103=($97)*($102);
 $104=($96)+($103);
 $105=(($p+40)|0);
 HEAPF32[(($105)>>2)]=$104;
 $106=(($p+44)|0);
 $107=(+(HEAPF32[(($106)>>2)]));
 $108=$x;
 $109=(($q+44)|0);
 $110=(+(HEAPF32[(($109)>>2)]));
 $111=(($p+44)|0);
 $112=(+(HEAPF32[(($111)>>2)]));
 $113=($110)-($112);
 $114=($108)*($113);
 $115=($107)+($114);
 $116=(($p+44)|0);
 HEAPF32[(($116)>>2)]=$115;
 $117=(($p+48)|0);
 $118=((HEAP32[(($117)>>2)])|0);
 $119=(($p+52)|0);
 $120=((HEAP32[(($119)>>2)])|0);
 $121=(+((($120|0))|0));
 $122=$x;
 $123=(($q+52)|0);
 $124=((HEAP32[(($123)>>2)])|0);
 $125=(($p+52)|0);
 $126=((HEAP32[(($125)>>2)])|0);
 $127=((($124)-($126))|0);
 $128=(+((($127|0))|0));
 $129=($122)*($128);
 $130=($121)+($129);
 $131=(~~($130));
 $132=(($p+52)|0);
 HEAP32[(($132)>>2)]=$131;
 $133=(($p+56)|0);
 $134=(+(HEAPF32[(($133)>>2)]));
 $135=$x;
 $136=(($q+56)|0);
 $137=(+(HEAPF32[(($136)>>2)]));
 $138=(($p+56)|0);
 $139=(+(HEAPF32[(($138)>>2)]));
 $140=($137)-($139);
 $141=($135)*($140);
 $142=($134)+($141);
 $143=(($p+56)|0);
 HEAPF32[(($143)>>2)]=$142;
 $144=(($p+60)|0);
 $145=(+(HEAPF32[(($144)>>2)]));
 $146=$x;
 $147=(($q+60)|0);
 $148=(+(HEAPF32[(($147)>>2)]));
 $149=(($p+60)|0);
 $150=(+(HEAPF32[(($149)>>2)]));
 $151=($148)-($150);
 $152=($146)*($151);
 $153=($145)+($152);
 $154=(($p+60)|0);
 HEAPF32[(($154)>>2)]=$153;
 $155=(($p+64)|0);
 $156=(+(HEAPF32[(($155)>>2)]));
 $157=$x;
 $158=(($q+64)|0);
 $159=(+(HEAPF32[(($158)>>2)]));
 $160=(($p+64)|0);
 $161=(+(HEAPF32[(($160)>>2)]));
 $162=($159)-($161);
 $163=($157)*($162);
 $164=($156)+($163);
 $165=(($p+64)|0);
 HEAPF32[(($165)>>2)]=$164;
 $166=$1;
 $167=$set;
 $168=(($167)|0);
 $169=((HEAP32[(($168)>>2)])|0);
 $170=((_lame_set_VBR_q($166,$169))|0);
 $171=$3;
 $172=($171|0)!=0;
 if ($172) {
  $174=$1;
  $175=$set;
  $176=(($175+4)|0);
  $177=((HEAP32[(($176)>>2)])|0);
  $178=((_lame_set_quant_comp($174,$177))|0);
 } else {
  $180=$1;
  $181=((_lame_get_quant_comp($180))|0);
  $182=((($181)+(1))|0);
  $183=(+((($182|0))|0));
  $184=(+(Math_abs((+($183)))));
  $185=$184>(0.0);
  if (!($185)) {
   $187=$1;
   $188=$set;
   $189=(($188+4)|0);
   $190=((HEAP32[(($189)>>2)])|0);
   $191=((_lame_set_quant_comp($187,$190))|0);
  }
 }
 $194=$3;
 $195=($194|0)!=0;
 if ($195) {
  $197=$1;
  $198=$set;
  $199=(($198+8)|0);
  $200=((HEAP32[(($199)>>2)])|0);
  $201=((_lame_set_quant_comp_short($197,$200))|0);
 } else {
  $203=$1;
  $204=((_lame_get_quant_comp_short($203))|0);
  $205=((($204)+(1))|0);
  $206=(+((($205|0))|0));
  $207=(+(Math_abs((+($206)))));
  $208=$207>(0.0);
  if (!($208)) {
   $210=$1;
   $211=$set;
   $212=(($211+8)|0);
   $213=((HEAP32[(($212)>>2)])|0);
   $214=((_lame_set_quant_comp_short($210,$213))|0);
  }
 }
 $217=$set;
 $218=(($217+12)|0);
 $219=((HEAP32[(($218)>>2)])|0);
 $220=($219|0)!=0;
 if ($220) {
  $222=$1;
  $223=$set;
  $224=(($223+12)|0);
  $225=((HEAP32[(($224)>>2)])|0);
  $226=((_lame_set_experimentalY($222,$225))|0);
 }
 $228=$3;
 $229=($228|0)!=0;
 if ($229) {
  $231=$1;
  $232=$set;
  $233=(($232+16)|0);
  $234=(+(HEAPF32[(($233)>>2)]));
  $235=((_lame_set_short_threshold_lrm($231,$234))|0);
 } else {
  $237=$1;
  $238=(+(_lame_get_short_threshold_lrm($237)));
  $239=($238)-((-1.0));
  $240=$239;
  $241=(+(Math_abs((+($240)))));
  $242=$241>(0.0);
  if (!($242)) {
   $244=$1;
   $245=$set;
   $246=(($245+16)|0);
   $247=(+(HEAPF32[(($246)>>2)]));
   $248=((_lame_set_short_threshold_lrm($244,$247))|0);
  }
 }
 $251=$3;
 $252=($251|0)!=0;
 if ($252) {
  $254=$1;
  $255=$set;
  $256=(($255+20)|0);
  $257=(+(HEAPF32[(($256)>>2)]));
  $258=((_lame_set_short_threshold_s($254,$257))|0);
 } else {
  $260=$1;
  $261=(+(_lame_get_short_threshold_s($260)));
  $262=($261)-((-1.0));
  $263=$262;
  $264=(+(Math_abs((+($263)))));
  $265=$264>(0.0);
  if (!($265)) {
   $267=$1;
   $268=$set;
   $269=(($268+20)|0);
   $270=(+(HEAPF32[(($269)>>2)]));
   $271=((_lame_set_short_threshold_s($267,$270))|0);
  }
 }
 $274=$3;
 $275=($274|0)!=0;
 if ($275) {
  $277=$1;
  $278=$set;
  $279=(($278+24)|0);
  $280=(+(HEAPF32[(($279)>>2)]));
  $281=((_lame_set_maskingadjust($277,$280))|0);
 } else {
  $283=$1;
  $284=(+(_lame_get_maskingadjust($283)));
  $285=($284)-((0.0));
  $286=$285;
  $287=(+(Math_abs((+($286)))));
  $288=$287>(0.0);
  if (!($288)) {
   $290=$1;
   $291=$set;
   $292=(($291+24)|0);
   $293=(+(HEAPF32[(($292)>>2)]));
   $294=((_lame_set_maskingadjust($290,$293))|0);
  }
 }
 $297=$3;
 $298=($297|0)!=0;
 if ($298) {
  $300=$1;
  $301=$set;
  $302=(($301+28)|0);
  $303=(+(HEAPF32[(($302)>>2)]));
  $304=((_lame_set_maskingadjust_short($300,$303))|0);
 } else {
  $306=$1;
  $307=(+(_lame_get_maskingadjust_short($306)));
  $308=($307)-((0.0));
  $309=$308;
  $310=(+(Math_abs((+($309)))));
  $311=$310>(0.0);
  if (!($311)) {
   $313=$1;
   $314=$set;
   $315=(($314+28)|0);
   $316=(+(HEAPF32[(($315)>>2)]));
   $317=((_lame_set_maskingadjust_short($313,$316))|0);
  }
 }
 $320=$1;
 $321=((_lame_get_VBR($320))|0);
 $322=($321|0)==1;
 if ($322) {
  label = 35;
 } else {
  $324=$1;
  $325=((_lame_get_VBR($324))|0);
  $326=($325|0)==4;
  if ($326) {
   label = 35;
  }
 }
 if ((label|0) == 35) {
  $328=$1;
  $329=((_lame_set_ATHtype($328,5))|0);
 }
 $331=$3;
 $332=($331|0)!=0;
 if ($332) {
  $334=$1;
  $335=$set;
  $336=(($335+32)|0);
  $337=(+(HEAPF32[(($336)>>2)]));
  $338=((_lame_set_ATHlower($334,$337))|0);
 } else {
  $340=$1;
  $341=(+(_lame_get_ATHlower($340)));
  $342=($341)-((0.0));
  $343=$342;
  $344=(+(Math_abs((+($343)))));
  $345=$344>(0.0);
  if (!($345)) {
   $347=$1;
   $348=$set;
   $349=(($348+32)|0);
   $350=(+(HEAPF32[(($349)>>2)]));
   $351=((_lame_set_ATHlower($347,$350))|0);
  }
 }
 $354=$3;
 $355=($354|0)!=0;
 if ($355) {
  $357=$1;
  $358=$set;
  $359=(($358+36)|0);
  $360=(+(HEAPF32[(($359)>>2)]));
  $361=((_lame_set_ATHcurve($357,$360))|0);
 } else {
  $363=$1;
  $364=(+(_lame_get_ATHcurve($363)));
  $365=($364)-((-1.0));
  $366=$365;
  $367=(+(Math_abs((+($366)))));
  $368=$367>(0.0);
  if (!($368)) {
   $370=$1;
   $371=$set;
   $372=(($371+36)|0);
   $373=(+(HEAPF32[(($372)>>2)]));
   $374=((_lame_set_ATHcurve($370,$373))|0);
  }
 }
 $377=$3;
 $378=($377|0)!=0;
 if ($378) {
  $380=$1;
  $381=$set;
  $382=(($381+40)|0);
  $383=(+(HEAPF32[(($382)>>2)]));
  $384=((_lame_set_athaa_sensitivity($380,$383))|0);
 } else {
  $386=$1;
  $387=(+(_lame_get_athaa_sensitivity($386)));
  $388=($387)-((0.0));
  $389=$388;
  $390=(+(Math_abs((+($389)))));
  $391=$390>(0.0);
  if (!($391)) {
   $393=$1;
   $394=$set;
   $395=(($394+40)|0);
   $396=(+(HEAPF32[(($395)>>2)]));
   $397=((_lame_set_athaa_sensitivity($393,$396))|0);
  }
 }
 $400=$set;
 $401=(($400+44)|0);
 $402=(+(HEAPF32[(($401)>>2)]));
 $403=$402>(0.0);
 if ($403) {
  $405=$3;
  $406=($405|0)!=0;
  if ($406) {
   $408=$1;
   $409=$set;
   $410=(($409+44)|0);
   $411=(+(HEAPF32[(($410)>>2)]));
   $412=((_lame_set_interChRatio($408,$411))|0);
  } else {
   $414=$1;
   $415=(+(_lame_get_interChRatio($414)));
   $416=($415)-((-1.0));
   $417=$416;
   $418=(+(Math_abs((+($417)))));
   $419=$418>(0.0);
   if (!($419)) {
    $421=$1;
    $422=$set;
    $423=(($422+44)|0);
    $424=(+(HEAPF32[(($423)>>2)]));
    $425=((_lame_set_interChRatio($421,$424))|0);
   }
  }
 }
 $429=$set;
 $430=(($429+48)|0);
 $431=((HEAP32[(($430)>>2)])|0);
 $432=($431|0)>0;
 if ($432) {
  $434=$1;
  $435=$1;
  $436=((_lame_get_exp_nspsytune($435))|0);
  $437=$436|2;
  $438=((_lame_set_exp_nspsytune($434,$437))|0);
 }
 $440=$set;
 $441=(($440+52)|0);
 $442=((HEAP32[(($441)>>2)])|0);
 $443=($442|0)>0;
 if ($443) {
  $445=$1;
  $446=((_lame_get_exp_nspsytune($445))|0);
  $nsp=$446;
  $447=$nsp;
  $448=$447>>20;
  $449=$448&63;
  $val=$449;
  $450=$val;
  $451=($450|0)==0;
  if ($451) {
   $453=$set;
   $454=(($453+52)|0);
   $455=((HEAP32[(($454)>>2)])|0);
   $456=$455<<20;
   $457=$nsp;
   $458=$456|$457;
   $sf21mod=$458;
   $459=$1;
   $460=$sf21mod;
   $461=((_lame_set_exp_nspsytune($459,$460))|0);
  }
 }
 $464=$3;
 $465=($464|0)!=0;
 if ($465) {
  $467=$1;
  $468=$set;
  $469=(($468+56)|0);
  $470=(+(HEAPF32[(($469)>>2)]));
  $471=$470;
  _lame_set_msfix($467,$471);
 } else {
  $473=$1;
  $474=(+(_lame_get_msfix($473)));
  $475=($474)-((-1.0));
  $476=$475;
  $477=(+(Math_abs((+($476)))));
  $478=$477>(0.0);
  if (!($478)) {
   $480=$1;
   $481=$set;
   $482=(($481+56)|0);
   $483=(+(HEAPF32[(($482)>>2)]));
   $484=$483;
   _lame_set_msfix($480,$484);
  }
 }
 $487=$3;
 $488=($487|0)==0;
 if (!($488)) {
  $497=$set;
  $498=(($497+60)|0);
  $499=(+(HEAPF32[(($498)>>2)]));
  $500=$1;
  $501=(($500+288)|0);
  $502=((HEAP32[(($501)>>2)])|0);
  $503=(($502+16)|0);
  $504=(($503+264)|0);
  HEAPF32[(($504)>>2)]=$499;
  $505=$set;
  $506=(($505+64)|0);
  $507=(+(HEAPF32[(($506)>>2)]));
  $508=$1;
  $509=(($508+288)|0);
  $510=((HEAP32[(($509)>>2)])|0);
  $511=(($510+16)|0);
  $512=(($511+208)|0);
  HEAPF32[(($512)>>2)]=$507;
  STACKTOP=sp;return;
 }
 $490=$2;
 $491=$1;
 $492=(($491+164)|0);
 HEAP32[(($492)>>2)]=$490;
 $493=$x;
 $494=$1;
 $495=(($494+160)|0);
 HEAPF32[(($495)>>2)]=$493;
 $497=$set;
 $498=(($497+60)|0);
 $499=(+(HEAPF32[(($498)>>2)]));
 $500=$1;
 $501=(($500+288)|0);
 $502=((HEAP32[(($501)>>2)])|0);
 $503=(($502+16)|0);
 $504=(($503+264)|0);
 HEAPF32[(($504)>>2)]=$499;
 $505=$set;
 $506=(($505+64)|0);
 $507=(+(HEAPF32[(($506)>>2)]));
 $508=$1;
 $509=(($508+288)|0);
 $510=((HEAP32[(($509)>>2)])|0);
 $511=(($510+16)|0);
 $512=(($511+208)|0);
 HEAPF32[(($512)>>2)]=$507;
 STACKTOP=sp;return;
}


function _min_int($a,$b){
 $a=($a)|0;
 $b=($b)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$8=0,$10=0,$12=0,label=0;
 var sp=0;sp=STACKTOP;



 $2=$a;
 $3=$b;
 $4=$2;
 $5=$3;
 $6=($4|0)<($5|0);
 if ($6) {
  $8=$2;
  $1=$8;
 } else {
  $10=$3;
  $1=$10;
 }
 $12=$1;
 STACKTOP=sp;return (($12)|0);
}


function _max_int($a,$b){
 $a=($a)|0;
 $b=($b)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$8=0,$10=0,$12=0,label=0;
 var sp=0;sp=STACKTOP;



 $2=$a;
 $3=$b;
 $4=$2;
 $5=$3;
 $6=($4|0)>($5|0);
 if ($6) {
  $8=$2;
  $1=$8;
 } else {
  $10=$3;
  $1=$10;
 }
 $12=$1;
 STACKTOP=sp;return (($12)|0);
}


function _get_vbr_preset($v){
 $v=($v)|0;
 var $1=0,$2=0,$3=0,$7=0,label=0;
 var sp=0;sp=STACKTOP;


 $2=$v;
 $3=$2;
 if (((($3|0))|0)==((4)|0)|((($3|0))|0)==((1)|0)) {
  $1=1416;
 } else {
  $1=664;
 }
 $7=$1;
 STACKTOP=sp;return (($7)|0);
}


function _mdct_sub48($gfc,$w0,$w1){
 $gfc=($gfc)|0;
 $w0=($w0)|0;
 $w1=($w1)|0;
 var $1=0,$2=0,$3=0,$cfg=0,$esv=0,$gr=0,$k=0,$ch=0,$wk=0,$band=0,$gi=0,$mdct_enc=0,$samp=0,$type=0,$band0=0,$band1=0,$w=.0,$work=0,$a=.0,$b=.0;
 var $bu=.0,$bd=.0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$11=0,$12=0,$13=0,$14=0,$15=0,$18=0,$19=0,$20=0,$21=0,$22=0,$24=0,$25=0;
 var $26=0,$27=0,$28=0,$29=0,$30=0,$31=0,$32=0,$33=0,$34=0,$35=0,$36=0,$37=0,$38=0,$39=0,$40=0,$41=0,$42=0,$44=0,$45=0,$47=0;
 var $48=0,$49=0,$50=0,$51=0,$52=0,$53=0,$54=0,$55=0,$56=0,$58=0,$59=0,$61=0,$62=0,$63=0,$64=0,$65=.0,$66=.0,$68=0,$69=0,$72=0;
 var $73=0,$76=0,$77=0,$79=0,$80=0,$81=0,$82=0,$83=0,$84=0,$85=0,$86=0,$87=0,$88=0,$89=0,$90=0,$91=0,$92=0,$93=0,$94=0,$95=0;
 var $96=0,$97=0,$98=0,$99=0,$100=0,$101=0,$102=0,$103=0,$104=0,$105=0,$106=0,$107=0,$108=0,$109=0,$110=0,$112=0,$113=0,$116=0,$117=0,$118=0;
 var $119=0,$120=.0,$121=.0,$122=0,$124=0,$125=0,$127=0,$128=0,$129=0,$130=0,$131=.0,$132=.0,$133=0,$136=0,$137=0,$139=0,$140=0,$141=0,$142=0,$143=.0;
 var $144=0,$145=0,$146=0,$147=0,$148=.0,$149=.0,$151=0,$152=0,$155=0,$156=0,$159=0,$160=0,$162=0,$163=0,$164=0,$165=.0,$166=0,$167=0,$168=0,$169=0;
 var $170=0,$171=.0,$172=.0,$173=.0,$174=0,$175=0,$176=0,$177=0,$178=0,$179=.0,$180=.0,$181=0,$182=0,$183=0,$184=0,$185=0,$186=0,$187=0,$188=0,$189=0;
 var $190=0,$191=.0,$192=.0,$193=.0,$194=0,$195=0,$196=0,$197=0,$198=0,$199=.0,$200=.0,$201=0,$202=0,$203=0,$204=0,$205=0,$206=0,$207=0,$208=0,$209=0;
 var $210=0,$211=.0,$212=.0,$213=.0,$214=0,$215=0,$216=0,$217=0,$218=0,$219=.0,$220=.0,$221=0,$222=0,$223=0,$224=0,$225=0,$226=0,$227=0,$228=0,$229=0;
 var $230=0,$231=.0,$232=.0,$233=.0,$234=0,$235=0,$236=0,$237=0,$238=0,$239=.0,$240=.0,$241=0,$242=0,$243=0,$244=0,$245=0,$246=0,$247=0,$248=0,$249=0;
 var $250=0,$251=.0,$252=.0,$253=.0,$254=0,$255=0,$256=0,$257=0,$258=0,$259=.0,$260=.0,$261=0,$262=0,$263=0,$264=0,$265=0,$266=0,$267=0,$268=0,$269=0;
 var $270=0,$271=.0,$272=.0,$273=.0,$274=0,$275=0,$276=0,$277=0,$278=0,$279=.0,$280=.0,$281=0,$282=0,$283=0,$284=0,$285=0,$287=0,$288=0,$290=0,$293=0;
 var $294=0,$296=0,$297=0,$298=0,$299=0,$300=0,$301=.0,$302=0,$303=0,$304=0,$305=0,$306=0,$307=.0,$308=.0,$309=0,$310=0,$311=0,$312=0,$313=0,$314=.0;
 var $315=0,$316=0,$317=0,$318=0,$319=0,$320=.0,$321=.0,$322=.0,$323=0,$324=0,$325=0,$326=0,$327=0,$328=.0,$329=0,$330=0,$331=0,$332=0,$333=0,$334=.0;
 var $335=.0,$336=0,$337=0,$338=0,$339=0,$340=0,$341=.0,$342=0,$343=0,$344=0,$345=0,$346=0,$347=.0,$348=.0,$349=.0,$350=.0,$351=.0,$352=0,$353=0,$354=0;
 var $355=.0,$356=.0,$357=.0,$358=0,$359=0,$360=0,$361=.0,$362=0,$363=0,$364=0,$365=.0,$366=.0,$367=.0,$368=.0,$369=0,$370=0,$371=0,$373=0,$374=0,$376=0;
 var $377=0,$380=0,$381=0,$383=0,$384=0,$387=0,$388=0,$390=0,$391=0,$392=0,$393=.0,$394=0,$395=0,$396=.0,$397=.0,$398=0,$399=0,$400=0,$401=0,$402=.0;
 var $403=0,$404=0,$405=.0,$406=.0,$407=.0,$408=0,$409=0,$410=0,$411=.0,$412=0,$413=0,$414=.0,$415=.0,$416=0,$417=0,$418=0,$419=0,$420=.0,$421=0,$422=0;
 var $423=.0,$424=.0,$425=.0,$426=.0,$427=0,$428=0,$429=0,$430=0,$431=.0,$432=0,$433=0,$434=0,$436=0,$437=0,$441=0,$442=0,$443=0,$444=0,$447=0,$448=0;
 var $450=0,$451=0,$452=0,$453=0,$454=0,$455=0,$457=0,$458=0,$459=0,$460=0,$461=0,$462=0,$463=0,$464=0,$465=0,$466=0,$467=0,$468=0,$471=0,$472=0;
 var label=0;
 var sp=0;sp=STACKTOP;STACKTOP=(STACKTOP+72)|0;

















 $work=((sp)|0);




 $1=$gfc;
 $2=$w0;
 $3=$w1;
 $4=$1;
 $5=(($4+16)|0);
 $cfg=$5;
 $6=$1;
 $7=(($6+27824)|0);
 $esv=$7;
 $8=$2;
 $9=(($8+1144)|0);
 $wk=$9;
 $ch=0;
 while(1) {
  $11=$ch;
  $12=$cfg;
  $13=(($12+56)|0);
  $14=((HEAP32[(($13)>>2)])|0);
  $15=($11|0)<($14|0);
  if (!($15)) {
   break;
  }
  $gr=0;
  while(1) {
   $18=$gr;
   $19=$cfg;
   $20=(($19+60)|0);
   $21=((HEAP32[(($20)>>2)])|0);
   $22=($18|0)<($21|0);
   if (!($22)) {
    break;
   }
   $24=$ch;
   $25=$gr;
   $26=$1;
   $27=(($26+304)|0);
   $28=(($27)|0);
   $29=(($28+((($25)*(10504))&-1))|0);
   $30=(($29+((($24)*(5252))&-1))|0);
   $gi=$30;
   $31=$gi;
   $32=(($31)|0);
   $33=(($32)|0);
   $mdct_enc=$33;
   $34=$gr;
   $35=(((1)-($34))|0);
   $36=$ch;
   $37=$esv;
   $38=(($37)|0);
   $39=(($38+((($36)*(4608))&-1))|0);
   $40=(($39+((($35)*(2304))&-1))|0);
   $41=(($40)|0);
   $42=(($41)|0);
   $samp=$42;
   $k=0;
   while(1) {
    $44=$k;
    $45=($44|0)<9;
    if (!($45)) {
     break;
    }
    $47=$wk;
    $48=$samp;
    _window_subband($47,$48);
    $49=$wk;
    $50=(($49+128)|0);
    $51=$samp;
    $52=(($51+128)|0);
    _window_subband($50,$52);
    $53=$samp;
    $54=(($53+256)|0);
    $samp=$54;
    $55=$wk;
    $56=(($55+256)|0);
    $wk=$56;
    $band=1;
    while(1) {
     $58=$band;
     $59=($58|0)<32;
     if (!($59)) {
      break;
     }
     $61=$band;
     $62=((($61)-(32))|0);
     $63=$samp;
     $64=(($63+($62<<2))|0);
     $65=(+(HEAPF32[(($64)>>2)]));
     $66=($65)*((-1.0));
     HEAPF32[(($64)>>2)]=$66;
     $68=$band;
     $69=((($68)+(2))|0);
     $band=$69;
    }
    $72=$k;
    $73=((($72)+(1))|0);
    $k=$73;
   }
   $band=0;
   while(1) {
    $76=$band;
    $77=($76|0)<32;
    if (!($77)) {
     break;
    }
    $79=$gi;
    $80=(($79+4788)|0);
    $81=((HEAP32[(($80)>>2)])|0);
    $type=$81;
    $82=$gr;
    $83=$ch;
    $84=$esv;
    $85=(($84)|0);
    $86=(($85+((($83)*(4608))&-1))|0);
    $87=(($86+((($82)*(2304))&-1))|0);
    $88=(($87)|0);
    $89=(($88)|0);
    $90=$band;
    $91=((9840+($90<<2))|0);
    $92=((HEAP32[(($91)>>2)])|0);
    $93=(($89+($92<<2))|0);
    $band0=$93;
    $94=$gr;
    $95=(((1)-($94))|0);
    $96=$ch;
    $97=$esv;
    $98=(($97)|0);
    $99=(($98+((($96)*(4608))&-1))|0);
    $100=(($99+((($95)*(2304))&-1))|0);
    $101=(($100)|0);
    $102=(($101)|0);
    $103=$band;
    $104=((9840+($103<<2))|0);
    $105=((HEAP32[(($104)>>2)])|0);
    $106=(($102+($105<<2))|0);
    $band1=$106;
    $107=$gi;
    $108=(($107+4792)|0);
    $109=((HEAP32[(($108)>>2)])|0);
    $110=($109|0)!=0;
    do {
     if ($110) {
      $112=$band;
      $113=($112|0)<2;
      if (!($113)) {
       break;
      }
      $type=0;
     }
    } while(0);
    $116=$band;
    $117=$esv;
    $118=(($117+9216)|0);
    $119=(($118+($116<<2))|0);
    $120=(+(HEAPF32[(($119)>>2)]));
    $121=$120;
    $122=$121<(1.0e-12);
    if ($122) {
     $124=$mdct_enc;
     $125=$124;
     _memset((((($125)|0))|0), ((((0)|0))|0), ((((72)|0))|0))|0;
    } else {
     $127=$band;
     $128=$esv;
     $129=(($128+9216)|0);
     $130=(($129+($127<<2))|0);
     $131=(+(HEAPF32[(($130)>>2)]));
     $132=$131;
     $133=$132<(1.0);
     if ($133) {
      $k=0;
      while(1) {
       $136=$k;
       $137=($136|0)<18;
       if (!($137)) {
        break;
       }
       $139=$band;
       $140=$esv;
       $141=(($140+9216)|0);
       $142=(($141+($139<<2))|0);
       $143=(+(HEAPF32[(($142)>>2)]));
       $144=$k;
       $145=($144<<5);
       $146=$band1;
       $147=(($146+($145<<2))|0);
       $148=(+(HEAPF32[(($147)>>2)]));
       $149=($148)*($143);
       HEAPF32[(($147)>>2)]=$149;
       $151=$k;
       $152=((($151)+(1))|0);
       $k=$152;
      }
     }
     $155=$type;
     $156=($155|0)==2;
     if ($156) {
      $k=-3;
      while(1) {
       $159=$k;
       $160=($159|0)<0;
       if (!($160)) {
        break;
       }
       $162=$k;
       $163=((($162)+(3))|0);
       $164=((296+($163<<2))|0);
       $165=(+(HEAPF32[(($164)>>2)]));
       $w=$165;
       $166=$k;
       $167=((($166)+(9))|0);
       $168=($167<<5);
       $169=$band0;
       $170=(($169+($168<<2))|0);
       $171=(+(HEAPF32[(($170)>>2)]));
       $172=$w;
       $173=($171)*($172);
       $174=$k;
       $175=(((8)-($174))|0);
       $176=($175<<5);
       $177=$band0;
       $178=(($177+($176<<2))|0);
       $179=(+(HEAPF32[(($178)>>2)]));
       $180=($173)-($179);
       $181=$k;
       $182=((($181)*(3))&-1);
       $183=((($182)+(9))|0);
       $184=$mdct_enc;
       $185=(($184+($183<<2))|0);
       HEAPF32[(($185)>>2)]=$180;
       $186=$k;
       $187=(((14)-($186))|0);
       $188=($187<<5);
       $189=$band0;
       $190=(($189+($188<<2))|0);
       $191=(+(HEAPF32[(($190)>>2)]));
       $192=$w;
       $193=($191)*($192);
       $194=$k;
       $195=((($194)+(15))|0);
       $196=($195<<5);
       $197=$band0;
       $198=(($197+($196<<2))|0);
       $199=(+(HEAPF32[(($198)>>2)]));
       $200=($193)+($199);
       $201=$k;
       $202=((($201)*(3))&-1);
       $203=((($202)+(18))|0);
       $204=$mdct_enc;
       $205=(($204+($203<<2))|0);
       HEAPF32[(($205)>>2)]=$200;
       $206=$k;
       $207=((($206)+(15))|0);
       $208=($207<<5);
       $209=$band0;
       $210=(($209+($208<<2))|0);
       $211=(+(HEAPF32[(($210)>>2)]));
       $212=$w;
       $213=($211)*($212);
       $214=$k;
       $215=(((14)-($214))|0);
       $216=($215<<5);
       $217=$band0;
       $218=(($217+($216<<2))|0);
       $219=(+(HEAPF32[(($218)>>2)]));
       $220=($213)-($219);
       $221=$k;
       $222=((($221)*(3))&-1);
       $223=((($222)+(10))|0);
       $224=$mdct_enc;
       $225=(($224+($223<<2))|0);
       HEAPF32[(($225)>>2)]=$220;
       $226=$k;
       $227=(((2)-($226))|0);
       $228=($227<<5);
       $229=$band1;
       $230=(($229+($228<<2))|0);
       $231=(+(HEAPF32[(($230)>>2)]));
       $232=$w;
       $233=($231)*($232);
       $234=$k;
       $235=((($234)+(3))|0);
       $236=($235<<5);
       $237=$band1;
       $238=(($237+($236<<2))|0);
       $239=(+(HEAPF32[(($238)>>2)]));
       $240=($233)+($239);
       $241=$k;
       $242=((($241)*(3))&-1);
       $243=((($242)+(19))|0);
       $244=$mdct_enc;
       $245=(($244+($243<<2))|0);
       HEAPF32[(($245)>>2)]=$240;
       $246=$k;
       $247=((($246)+(3))|0);
       $248=($247<<5);
       $249=$band1;
       $250=(($249+($248<<2))|0);
       $251=(+(HEAPF32[(($250)>>2)]));
       $252=$w;
       $253=($251)*($252);
       $254=$k;
       $255=(((2)-($254))|0);
       $256=($255<<5);
       $257=$band1;
       $258=(($257+($256<<2))|0);
       $259=(+(HEAPF32[(($258)>>2)]));
       $260=($253)-($259);
       $261=$k;
       $262=((($261)*(3))&-1);
       $263=((($262)+(11))|0);
       $264=$mdct_enc;
       $265=(($264+($263<<2))|0);
       HEAPF32[(($265)>>2)]=$260;
       $266=$k;
       $267=(((8)-($266))|0);
       $268=($267<<5);
       $269=$band1;
       $270=(($269+($268<<2))|0);
       $271=(+(HEAPF32[(($270)>>2)]));
       $272=$w;
       $273=($271)*($272);
       $274=$k;
       $275=((($274)+(9))|0);
       $276=($275<<5);
       $277=$band1;
       $278=(($277+($276<<2))|0);
       $279=(+(HEAPF32[(($278)>>2)]));
       $280=($273)+($279);
       $281=$k;
       $282=((($281)*(3))&-1);
       $283=((($282)+(20))|0);
       $284=$mdct_enc;
       $285=(($284+($283<<2))|0);
       HEAPF32[(($285)>>2)]=$280;
       $287=$k;
       $288=((($287)+(1))|0);
       $k=$288;
      }
      $290=$mdct_enc;
      _mdct_short($290);
     } else {
      $k=-9;
      while(1) {
       $293=$k;
       $294=($293|0)<0;
       if (!($294)) {
        break;
       }
       $296=$k;
       $297=((($296)+(27))|0);
       $298=$type;
       $299=((8+((($298)*(144))&-1))|0);
       $300=(($299+($297<<2))|0);
       $301=(+(HEAPF32[(($300)>>2)]));
       $302=$k;
       $303=((($302)+(9))|0);
       $304=($303<<5);
       $305=$band1;
       $306=(($305+($304<<2))|0);
       $307=(+(HEAPF32[(($306)>>2)]));
       $308=($301)*($307);
       $309=$k;
       $310=((($309)+(36))|0);
       $311=$type;
       $312=((8+((($311)*(144))&-1))|0);
       $313=(($312+($310<<2))|0);
       $314=(+(HEAPF32[(($313)>>2)]));
       $315=$k;
       $316=(((8)-($315))|0);
       $317=($316<<5);
       $318=$band1;
       $319=(($318+($317<<2))|0);
       $320=(+(HEAPF32[(($319)>>2)]));
       $321=($314)*($320);
       $322=($308)+($321);
       $a=$322;
       $323=$k;
       $324=((($323)+(9))|0);
       $325=$type;
       $326=((8+((($325)*(144))&-1))|0);
       $327=(($326+($324<<2))|0);
       $328=(+(HEAPF32[(($327)>>2)]));
       $329=$k;
       $330=((($329)+(9))|0);
       $331=($330<<5);
       $332=$band0;
       $333=(($332+($331<<2))|0);
       $334=(+(HEAPF32[(($333)>>2)]));
       $335=($328)*($334);
       $336=$k;
       $337=((($336)+(18))|0);
       $338=$type;
       $339=((8+((($338)*(144))&-1))|0);
       $340=(($339+($337<<2))|0);
       $341=(+(HEAPF32[(($340)>>2)]));
       $342=$k;
       $343=(((8)-($342))|0);
       $344=($343<<5);
       $345=$band0;
       $346=(($345+($344<<2))|0);
       $347=(+(HEAPF32[(($346)>>2)]));
       $348=($341)*($347);
       $349=($335)-($348);
       $b=$349;
       $350=$a;
       $351=$b;
       $352=$k;
       $353=((($352)+(9))|0);
       $354=((308+($353<<2))|0);
       $355=(+(HEAPF32[(($354)>>2)]));
       $356=($351)*($355);
       $357=($350)-($356);
       $358=$k;
       $359=((($358)+(9))|0);
       $360=(($work+($359<<2))|0);
       HEAPF32[(($360)>>2)]=$357;
       $361=$a;
       $362=$k;
       $363=((($362)+(9))|0);
       $364=((308+($363<<2))|0);
       $365=(+(HEAPF32[(($364)>>2)]));
       $366=($361)*($365);
       $367=$b;
       $368=($366)+($367);
       $369=$k;
       $370=((($369)+(18))|0);
       $371=(($work+($370<<2))|0);
       HEAPF32[(($371)>>2)]=$368;
       $373=$k;
       $374=((($373)+(1))|0);
       $k=$374;
      }
      $376=$mdct_enc;
      $377=(($work)|0);
      _mdct_long($376,$377);
     }
    }
    $380=$type;
    $381=($380|0)!=2;
    do {
     if ($381) {
      $383=$band;
      $384=($383|0)!=0;
      if (!($384)) {
       break;
      }
      $k=7;
      while(1) {
       $387=$k;
       $388=($387|0)>=0;
       if (!($388)) {
        break;
       }
       $390=$k;
       $391=$mdct_enc;
       $392=(($391+($390<<2))|0);
       $393=(+(HEAPF32[(($392)>>2)]));
       $394=$k;
       $395=((376+($394<<2))|0);
       $396=(+(HEAPF32[(($395)>>2)]));
       $397=($393)*($396);
       $398=$k;
       $399=(((-1)-($398))|0);
       $400=$mdct_enc;
       $401=(($400+($399<<2))|0);
       $402=(+(HEAPF32[(($401)>>2)]));
       $403=$k;
       $404=((408+($403<<2))|0);
       $405=(+(HEAPF32[(($404)>>2)]));
       $406=($402)*($405);
       $407=($397)+($406);
       $bu=$407;
       $408=$k;
       $409=$mdct_enc;
       $410=(($409+($408<<2))|0);
       $411=(+(HEAPF32[(($410)>>2)]));
       $412=$k;
       $413=((408+($412<<2))|0);
       $414=(+(HEAPF32[(($413)>>2)]));
       $415=($411)*($414);
       $416=$k;
       $417=(((-1)-($416))|0);
       $418=$mdct_enc;
       $419=(($418+($417<<2))|0);
       $420=(+(HEAPF32[(($419)>>2)]));
       $421=$k;
       $422=((376+($421<<2))|0);
       $423=(+(HEAPF32[(($422)>>2)]));
       $424=($420)*($423);
       $425=($415)-($424);
       $bd=$425;
       $426=$bu;
       $427=$k;
       $428=(((-1)-($427))|0);
       $429=$mdct_enc;
       $430=(($429+($428<<2))|0);
       HEAPF32[(($430)>>2)]=$426;
       $431=$bd;
       $432=$k;
       $433=$mdct_enc;
       $434=(($433+($432<<2))|0);
       HEAPF32[(($434)>>2)]=$431;
       $436=$k;
       $437=((($436)-(1))|0);
       $k=$437;
      }
     }
    } while(0);
    $441=$band;
    $442=((($441)+(1))|0);
    $band=$442;
    $443=$mdct_enc;
    $444=(($443+72)|0);
    $mdct_enc=$444;
   }
   $447=$gr;
   $448=((($447)+(1))|0);
   $gr=$448;
  }
  $450=$3;
  $451=(($450+1144)|0);
  $wk=$451;
  $452=$cfg;
  $453=(($452+60)|0);
  $454=((HEAP32[(($453)>>2)])|0);
  $455=($454|0)==1;
  if ($455) {
   $457=$ch;
   $458=$esv;
   $459=(($458)|0);
   $460=(($459+((($457)*(4608))&-1))|0);
   $461=(($460)|0);
   $462=$461;
   $463=$ch;
   $464=$esv;
   $465=(($464)|0);
   $466=(($465+((($463)*(4608))&-1))|0);
   $467=(($466+2304)|0);
   $468=$467;
   (_memcpy((($462)|0), (($468)|0), 2304)|0);
  }
  $471=$ch;
  $472=((($471)+(1))|0);
  $ch=$472;
 }
 STACKTOP=sp;return;
}


function _window_subband($x1,$a){
 $x1=($x1)|0;
 $a=($a)|0;
 var $1=0,$2=0,$i=0,$wp=0,$x2=0,$w=.0,$s=.0,$t=.0,$s1=.0,$t2=.0,$u=.0,$v=.0,$xr=.0,$3=0,$4=0,$6=0,$7=0,$9=0,$10=0,$11=.0;
 var $12=0,$13=0,$14=.0,$15=.0,$16=.0,$17=0,$18=0,$19=.0,$20=.0,$21=.0,$22=0,$23=0,$24=.0,$25=0,$26=0,$27=.0,$28=.0,$29=.0,$30=.0,$31=.0;
 var $32=0,$33=0,$34=.0,$35=.0,$36=.0,$37=.0,$38=.0,$39=0,$40=0,$41=.0,$42=0,$43=0,$44=.0,$45=.0,$46=.0,$47=.0,$48=.0,$49=0,$50=0,$51=.0;
 var $52=.0,$53=.0,$54=.0,$55=.0,$56=0,$57=0,$58=.0,$59=0,$60=0,$61=.0,$62=.0,$63=.0,$64=.0,$65=.0,$66=0,$67=0,$68=.0,$69=.0,$70=.0,$71=.0;
 var $72=.0,$73=0,$74=0,$75=.0,$76=0,$77=0,$78=.0,$79=.0,$80=.0,$81=.0,$82=.0,$83=0,$84=0,$85=.0,$86=.0,$87=.0,$88=.0,$89=.0,$90=0,$91=0;
 var $92=.0,$93=0,$94=0,$95=.0,$96=.0,$97=.0,$98=.0,$99=.0,$100=0,$101=0,$102=.0,$103=.0,$104=.0,$105=.0,$106=.0,$107=0,$108=0,$109=.0,$110=0,$111=0;
 var $112=.0,$113=.0,$114=.0,$115=.0,$116=.0,$117=0,$118=0,$119=.0,$120=.0,$121=.0,$122=.0,$123=.0,$124=0,$125=0,$126=.0,$127=0,$128=0,$129=.0,$130=.0,$131=.0;
 var $132=.0,$133=.0,$134=0,$135=0,$136=.0,$137=.0,$138=.0,$139=.0,$140=.0,$141=0,$142=0,$143=.0,$144=0,$145=0,$146=.0,$147=.0,$148=.0,$149=.0,$150=.0,$151=0;
 var $152=0,$153=.0,$154=.0,$155=.0,$156=.0,$157=.0,$158=0,$159=0,$160=.0,$161=0,$162=0,$163=.0,$164=.0,$165=.0,$166=.0,$167=.0,$168=0,$169=0,$170=.0,$171=.0;
 var $172=.0,$173=.0,$174=.0,$175=0,$176=0,$177=.0,$178=0,$179=0,$180=.0,$181=.0,$182=.0,$183=.0,$184=.0,$185=0,$186=0,$187=.0,$188=.0,$189=.0,$190=.0,$191=.0;
 var $192=0,$193=0,$194=.0,$195=0,$196=0,$197=.0,$198=.0,$199=.0,$200=.0,$201=.0,$202=0,$203=0,$204=.0,$205=.0,$206=.0,$207=.0,$208=.0,$209=0,$210=0,$211=.0;
 var $212=0,$213=0,$214=.0,$215=.0,$216=.0,$217=.0,$218=.0,$219=0,$220=0,$221=.0,$222=.0,$223=.0,$224=.0,$225=.0,$226=0,$227=0,$228=.0,$229=0,$230=0,$231=.0;
 var $232=.0,$233=.0,$234=.0,$235=.0,$236=0,$237=0,$238=.0,$239=.0,$240=.0,$241=.0,$242=.0,$243=0,$244=0,$245=.0,$246=0,$247=0,$248=.0,$249=.0,$250=.0,$251=.0;
 var $252=.0,$253=0,$254=0,$255=.0,$256=.0,$257=.0,$258=.0,$259=.0,$260=0,$261=0,$262=.0,$263=0,$264=0,$265=.0,$266=.0,$267=.0,$268=.0,$269=.0,$270=0,$271=0;
 var $272=.0,$273=.0,$274=.0,$275=.0,$276=.0,$277=0,$278=0,$279=.0,$280=.0,$281=.0,$282=.0,$283=.0,$284=.0,$285=.0,$286=.0,$287=.0,$288=0,$289=0,$290=0,$291=0;
 var $292=0,$293=0,$294=0,$295=.0,$296=.0,$297=.0,$298=0,$299=0,$300=0,$301=0,$302=0,$303=0,$304=0,$305=0,$306=0,$307=0,$308=0,$310=0,$311=0,$313=0;
 var $314=0,$315=.0,$316=0,$317=0,$318=.0,$319=.0,$320=0,$321=0,$322=.0,$323=0,$324=0,$325=.0,$326=.0,$327=0,$328=0,$329=.0,$330=0,$331=0,$332=.0,$333=.0;
 var $334=0,$335=0,$336=.0,$337=.0,$338=.0,$339=.0,$340=0,$341=0,$342=.0,$343=0,$344=0,$345=.0,$346=.0,$347=.0,$348=.0,$349=0,$350=0,$351=.0,$352=0,$353=0;
 var $354=.0,$355=.0,$356=0,$357=0,$358=.0,$359=.0,$360=.0,$361=.0,$362=0,$363=0,$364=.0,$365=0,$366=0,$367=.0,$368=.0,$369=.0,$370=.0,$371=0,$372=0,$373=.0;
 var $374=0,$375=0,$376=.0,$377=.0,$378=0,$379=0,$380=.0,$381=.0,$382=.0,$383=.0,$384=0,$385=0,$386=.0,$387=0,$388=0,$389=.0,$390=.0,$391=.0,$392=.0,$393=0;
 var $394=0,$395=.0,$396=0,$397=0,$398=.0,$399=.0,$400=0,$401=0,$402=.0,$403=.0,$404=.0,$405=.0,$406=0,$407=0,$408=.0,$409=0,$410=0,$411=.0,$412=.0,$413=.0;
 var $414=.0,$415=0,$416=0,$417=.0,$418=0,$419=0,$420=.0,$421=.0,$422=0,$423=0,$424=.0,$425=.0,$426=.0,$427=.0,$428=0,$429=0,$430=.0,$431=0,$432=0,$433=.0;
 var $434=.0,$435=.0,$436=.0,$437=0,$438=0,$439=.0,$440=0,$441=0,$442=.0,$443=.0,$444=0,$445=0,$446=.0,$447=.0,$448=.0,$449=.0,$450=0,$451=0,$452=.0,$453=0;
 var $454=0,$455=.0,$456=.0,$457=.0,$458=.0,$459=0,$460=0,$461=.0,$462=0,$463=0,$464=.0,$465=.0,$466=0,$467=0,$468=.0,$469=.0,$470=.0,$471=.0,$472=0,$473=0;
 var $474=.0,$475=.0,$476=.0,$477=.0,$478=.0,$479=.0,$480=.0,$481=.0,$482=.0,$483=0,$484=0,$485=.0,$486=0,$487=0,$488=.0,$489=.0,$490=.0,$491=.0,$492=.0,$493=.0;
 var $494=0,$495=0,$496=.0,$497=.0,$498=.0,$499=0,$500=0,$501=.0,$502=.0,$503=.0,$504=0,$505=0,$506=.0,$507=.0,$508=.0,$509=0,$510=0,$511=0,$512=0,$513=.0;
 var $514=0,$515=0,$516=.0,$517=.0,$518=0,$519=0,$520=.0,$521=0,$522=0,$523=.0,$524=.0,$525=.0,$526=0,$527=0,$528=.0,$529=.0,$530=0,$531=0,$532=0,$533=0;
 var $534=.0,$535=0,$536=0,$537=.0,$538=.0,$539=0,$540=0,$541=.0,$542=0,$543=0,$544=.0,$545=.0,$546=.0,$547=0,$548=0,$549=.0,$550=.0,$551=0,$552=0,$553=0;
 var $554=0,$555=.0,$556=0,$557=0,$558=.0,$559=.0,$560=0,$561=0,$562=.0,$563=0,$564=0,$565=.0,$566=.0,$567=.0,$568=0,$569=0,$570=.0,$571=.0,$572=0,$573=0;
 var $574=0,$575=0,$576=.0,$577=0,$578=0,$579=.0,$580=.0,$581=0,$582=0,$583=.0,$584=0,$585=0,$586=.0,$587=.0,$588=.0,$589=0,$590=0,$591=.0,$592=.0,$593=0;
 var $594=0,$595=0,$596=0,$597=.0,$598=0,$599=0,$600=.0,$601=.0,$602=0,$603=0,$604=.0,$605=0,$606=0,$607=.0,$608=.0,$609=.0,$610=0,$611=0,$612=.0,$613=.0;
 var $614=0,$615=0,$616=0,$617=0,$618=.0,$619=0,$620=0,$621=.0,$622=.0,$623=0,$624=0,$625=.0,$626=0,$627=0,$628=.0,$629=.0,$630=.0,$631=0,$632=0,$633=.0;
 var $634=.0,$635=0,$636=0,$637=0,$638=0,$639=.0,$640=0,$641=0,$642=.0,$643=.0,$644=0,$645=0,$646=.0,$647=0,$648=0,$649=.0,$650=.0,$651=.0,$652=.0,$653=.0;
 var $654=.0,$655=0,$656=0,$657=0,$658=0,$659=.0,$660=0,$661=0,$662=.0,$663=.0,$664=0,$665=0,$666=.0,$667=0,$668=0,$669=.0,$670=.0,$671=.0,$672=.0,$673=.0;
 var $674=0,$675=0,$676=.0,$677=.0,$678=.0,$679=.0,$680=0,$681=0,$682=0,$683=0,$684=.0,$685=0,$686=0,$687=.0,$688=.0,$689=0,$690=0,$691=.0,$692=0,$693=0;
 var $694=.0,$695=.0,$696=0,$697=0,$698=.0,$699=0,$700=0,$701=.0,$702=.0,$703=0,$704=0,$705=.0,$706=0,$707=0,$708=.0,$709=.0,$710=.0,$711=0,$712=0,$713=0;
 var $714=0,$715=.0,$716=.0,$717=.0,$718=0,$719=0,$720=0,$721=0,$722=.0,$723=0,$724=0,$725=.0,$726=.0,$727=.0,$728=0,$729=0,$730=0,$731=0,$732=.0,$733=.0;
 var $734=.0,$735=0,$736=0,$737=0,$738=0,$739=.0,$740=0,$741=0,$742=.0,$743=.0,$744=.0,$745=0,$746=0,$747=0,$748=0,$749=.0,$750=.0,$751=.0,$752=0,$753=0;
 var $754=0,$755=0,$756=.0,$757=0,$758=0,$759=.0,$760=.0,$761=.0,$762=0,$763=0,$764=0,$765=0,$766=.0,$767=.0,$768=.0,$769=0,$770=0,$771=0,$772=0,$773=.0;
 var $774=0,$775=0,$776=.0,$777=.0,$778=0,$779=0,$780=.0,$781=0,$782=0,$783=.0,$784=.0,$785=.0,$786=0,$787=0,$788=.0,$789=.0,$790=0,$791=0,$792=0,$793=0;
 var $794=.0,$795=0,$796=0,$797=.0,$798=.0,$799=0,$800=0,$801=.0,$802=0,$803=0,$804=.0,$805=.0,$806=.0,$807=0,$808=0,$809=.0,$810=.0,$811=0,$812=0,$813=0;
 var $814=0,$815=.0,$816=0,$817=0,$818=.0,$819=.0,$820=0,$821=0,$822=.0,$823=0,$824=0,$825=.0,$826=.0,$827=.0,$828=0,$829=0,$830=.0,$831=.0,$832=0,$833=0;
 var $834=0,$835=0,$836=.0,$837=0,$838=0,$839=.0,$840=.0,$841=0,$842=0,$843=.0,$844=0,$845=0,$846=.0,$847=.0,$848=.0,$849=0,$850=0,$851=.0,$852=.0,$853=0;
 var $854=0,$855=0,$856=0,$857=.0,$858=0,$859=0,$860=.0,$861=.0,$862=0,$863=0,$864=.0,$865=0,$866=0,$867=.0,$868=.0,$869=.0,$870=0,$871=0,$872=.0,$873=.0;
 var $874=0,$875=0,$876=0,$877=0,$878=.0,$879=0,$880=0,$881=.0,$882=.0,$883=0,$884=0,$885=.0,$886=0,$887=0,$888=.0,$889=.0,$890=.0,$891=0,$892=0,$893=.0;
 var $894=.0,$895=0,$896=0,$897=0,$898=0,$899=.0,$900=.0,$901=0,$902=0,$903=.0,$904=.0,$905=0,$906=0,$907=.0,$908=0,$909=0,$910=.0,$911=.0,$912=.0,$913=0;
 var $914=0,$915=.0,$916=.0,$917=0,$918=0,$919=0,$920=0,$921=.0,$922=.0,$923=0,$924=0,$925=.0,$926=.0,$927=0,$928=0,$929=.0,$930=0,$931=0,$932=.0,$933=.0;
 var $934=.0,$935=0,$936=0,$937=.0,$938=.0,$939=0,$940=0,$941=0,$942=0,$943=.0,$944=0,$945=0,$946=.0,$947=.0,$948=0,$949=0,$950=.0,$951=0,$952=0,$953=.0;
 var $954=.0,$955=.0,$956=0,$957=0,$958=.0,$959=.0,$960=0,$961=0,$962=0,$963=0,$964=.0,$965=0,$966=0,$967=.0,$968=.0,$969=0,$970=0,$971=.0,$972=0,$973=0;
 var $974=.0,$975=.0,$976=.0,$977=0,$978=0,$979=.0,$980=.0,$981=0,$982=0,$983=0,$984=0,$985=.0,$986=0,$987=0,$988=.0,$989=.0,$990=0,$991=0,$992=.0,$993=0;
 var $994=0,$995=.0,$996=.0,$997=.0,$998=0,$999=0,$1000=.0,$1001=.0,$1002=0,$1003=0,$1004=0,$1005=0,$1006=.0,$1007=0,$1008=0,$1009=.0,$1010=.0,$1011=0,$1012=0,$1013=.0;
 var $1014=0,$1015=0,$1016=.0,$1017=.0,$1018=.0,$1019=0,$1020=0,$1021=.0,$1022=.0,$1023=0,$1024=0,$1025=0,$1026=0,$1027=.0,$1028=0,$1029=0,$1030=.0,$1031=.0,$1032=0,$1033=0;
 var $1034=.0,$1035=0,$1036=0,$1037=.0,$1038=.0,$1039=.0,$1040=0,$1041=0,$1042=.0,$1043=.0,$1044=0,$1045=0,$1046=0,$1047=0,$1048=.0,$1049=.0,$1050=0,$1051=0,$1052=.0,$1053=.0;
 var $1054=0,$1055=0,$1056=.0,$1057=0,$1058=0,$1059=.0,$1060=.0,$1061=.0,$1062=0,$1063=0,$1064=.0,$1065=.0,$1066=0,$1067=0,$1068=0,$1069=0,$1070=.0,$1071=0,$1072=0,$1073=.0;
 var $1074=.0,$1075=.0,$1076=.0,$1077=.0,$1078=0,$1079=0,$1080=.0,$1081=0,$1082=0,$1083=.0,$1084=.0,$1085=.0,$1086=0,$1087=0,$1088=0,$1089=0,$1090=.0,$1091=0,$1092=0,$1093=.0;
 var $1094=.0,$1095=.0,$1096=.0,$1097=.0,$1098=0,$1099=0,$1100=.0,$1101=0,$1102=0,$1103=.0,$1104=.0,$1105=.0,$1106=0,$1107=0,$1108=0,$1109=0,$1110=.0,$1111=.0,$1112=0,$1113=0;
 var $1114=.0,$1115=.0,$1116=.0,$1117=.0,$1118=.0,$1119=0,$1120=0,$1121=.0,$1122=0,$1123=0,$1124=.0,$1125=.0,$1126=.0,$1127=0,$1128=0,$1129=.0,$1130=.0,$1131=0,$1132=0,$1133=0;
 var $1134=0,$1135=.0,$1136=.0,$1137=0,$1138=0,$1139=.0,$1140=.0,$1141=.0,$1142=.0,$1143=.0,$1144=0,$1145=0,$1146=.0,$1147=0,$1148=0,$1149=.0,$1150=.0,$1151=.0,$1152=0,$1153=0;
 var $1154=.0,$1155=.0,$1156=0,$1157=0,$1158=0,$1159=0,$1160=.0,$1161=0,$1162=0,$1163=.0,$1164=0,$1165=0,$1166=.0,$1167=.0,$1168=.0,$1169=0,$1170=0,$1171=.0,$1172=.0,$1173=0;
 var $1174=0,$1175=.0,$1176=.0,$1177=.0,$1178=0,$1179=0,$1180=.0,$1181=0,$1182=0,$1183=.0,$1184=.0,$1185=0,$1186=0,$1187=.0,$1188=0,$1189=0,$1190=.0,$1191=0,$1192=0,$1193=.0;
 var $1194=.0,$1195=.0,$1196=0,$1197=0,$1198=.0,$1199=.0,$1200=0,$1201=0,$1202=.0,$1203=.0,$1204=.0,$1205=0,$1206=0,$1207=.0,$1208=0,$1209=0,$1210=.0,$1211=.0,$1212=0,$1213=0;
 var $1214=.0,$1215=0,$1216=0,$1217=.0,$1218=0,$1219=0,$1220=.0,$1221=.0,$1222=.0,$1223=0,$1224=0,$1225=.0,$1226=.0,$1227=0,$1228=0,$1229=.0,$1230=.0,$1231=.0,$1232=0,$1233=0;
 var $1234=.0,$1235=0,$1236=0,$1237=.0,$1238=.0,$1239=0,$1240=0,$1241=.0,$1242=.0,$1243=0,$1244=0,$1245=.0,$1246=.0,$1247=0,$1248=0,$1249=.0,$1250=.0,$1251=.0,$1252=0,$1253=0;
 var $1254=.0,$1255=0,$1256=0,$1257=.0,$1258=.0,$1259=0,$1260=0,$1261=.0,$1262=.0,$1263=0,$1264=0,$1265=.0,$1266=.0,$1267=0,$1268=0,$1269=.0,$1270=.0,$1271=.0,$1272=0,$1273=0;
 var $1274=.0,$1275=0,$1276=0,$1277=.0,$1278=.0,$1279=0,$1280=0,$1281=.0,$1282=.0,$1283=0,$1284=0,$1285=.0,$1286=.0,$1287=0,$1288=0,$1289=.0,$1290=.0,$1291=.0,$1292=0,$1293=0;
 var $1294=.0,$1295=0,$1296=0,$1297=.0,$1298=.0,$1299=0,$1300=0,$1301=.0,$1302=.0,$1303=0,$1304=0,$1305=.0,$1306=.0,$1307=0,$1308=0,$1309=.0,$1310=.0,$1311=.0,$1312=0,$1313=0;
 var $1314=.0,$1315=0,$1316=0,$1317=.0,$1318=.0,$1319=0,$1320=0,$1321=.0,$1322=0,$1323=0,$1324=.0,$1325=.0,$1326=.0,$1327=0,$1328=0,$1329=.0,$1330=0,$1331=0,$1332=.0,$1333=.0;
 var $1334=0,$1335=0,$1336=.0,$1337=0,$1338=0,$1339=.0,$1340=.0,$1341=.0,$1342=.0,$1343=.0,$1344=0,$1345=0,$1346=.0,$1347=0,$1348=0,$1349=.0,$1350=.0,$1351=.0,$1352=0,$1353=0;
 var $1354=0,$1355=0,$1356=.0,$1357=0,$1358=0,$1359=.0,$1360=.0,$1361=.0,$1362=.0,$1363=.0,$1364=0,$1365=0,$1366=.0,$1367=0,$1368=0,$1369=.0,$1370=.0,$1371=.0,$1372=0,$1373=0;
 var $1374=0,$1375=0,$1376=.0,$1377=0,$1378=0,$1379=.0,$1380=.0,$1381=.0,$1382=.0,$1383=.0,$1384=0,$1385=0,$1386=.0,$1387=0,$1388=0,$1389=.0,$1390=.0,$1391=.0,$1392=0,$1393=0;
 var $1394=0,$1395=0,$1396=.0,$1397=0,$1398=0,$1399=.0,$1400=.0,$1401=.0,$1402=.0,$1403=.0,$1404=0,$1405=0,$1406=.0,$1407=0,$1408=0,$1409=.0,$1410=.0,$1411=.0,$1412=0,$1413=0;
 var $1414=0,$1415=0,$1416=.0,$1417=0,$1418=0,$1419=.0,$1420=.0,$1421=.0,$1422=.0,$1423=.0,$1424=0,$1425=0,$1426=.0,$1427=0,$1428=0,$1429=.0,$1430=.0,$1431=.0,$1432=0,$1433=0;
 var $1434=.0,$1435=.0,$1436=0,$1437=0,$1438=0,$1439=0,$1440=.0,$1441=0,$1442=0,$1443=.0,$1444=.0,$1445=.0,$1446=.0,$1447=.0,$1448=0,$1449=0,$1450=.0,$1451=0,$1452=0,$1453=.0;
 var $1454=.0,$1455=.0,$1456=0,$1457=0,$1458=.0,$1459=.0,$1460=0,$1461=0,$1462=0,$1463=0,$1464=.0,$1465=0,$1466=0,$1467=.0,$1468=.0,$1469=.0,$1470=.0,$1471=.0,$1472=0,$1473=0;
 var $1474=.0,$1475=0,$1476=0,$1477=.0,$1478=.0,$1479=.0,$1480=0,$1481=0,$1482=.0,$1483=.0,$1484=0,$1485=0,$1486=0,$1487=0,$1488=.0,$1489=0,$1490=0,$1491=.0,$1492=.0,$1493=.0;
 var $1494=.0,$1495=.0,$1496=0,$1497=0,$1498=.0,$1499=0,$1500=0,$1501=.0,$1502=.0,$1503=.0,$1504=0,$1505=0,$1506=.0,$1507=.0,$1508=0,$1509=0,$1510=0,$1511=0,$1512=.0,$1513=0;
 var $1514=0,$1515=.0,$1516=.0,$1517=.0,$1518=0,$1519=0,$1520=0,$1521=0,$1522=.0,$1523=.0,$1524=.0,$1525=.0,$1526=0,$1527=0,$1528=0,$1529=0,$1530=.0,$1531=.0,$1532=.0,$1533=.0;
 var $1534=0,$1535=0,$1536=0,$1537=0,$1538=.0,$1539=0,$1540=0,$1541=.0,$1542=.0,$1543=.0,$1544=0,$1545=0,$1546=0,$1547=0,$1548=.0,$1549=.0,$1550=.0,$1551=.0,$1552=0,$1553=0;
 var $1554=0,$1555=0,$1556=.0,$1557=.0,$1558=.0,$1559=.0,$1560=0,$1561=0,$1562=0,$1563=0,$1564=.0,$1565=0,$1566=0,$1567=.0,$1568=.0,$1569=.0,$1570=0,$1571=0,$1572=0,$1573=0;
 var $1574=.0,$1575=.0,$1576=.0,$1577=.0,$1578=0,$1579=0,$1580=0,$1581=0,$1582=.0,$1583=.0,$1584=.0,$1585=.0,$1586=0,$1587=0,$1588=0,$1589=0,$1590=.0,$1591=.0,$1592=.0,$1593=.0;
 var $1594=0,$1595=0,$1596=0,$1597=0,$1598=.0,$1599=.0,$1600=.0,$1601=.0,$1602=0,$1603=0,$1604=0,$1605=0,$1606=.0,$1607=.0,$1608=.0,$1609=.0,$1610=0,$1611=0,$1612=0,$1613=0;
 var $1614=.0,$1615=.0,$1616=.0,$1617=.0,$1618=0,$1619=0,$1620=0,$1621=0,$1622=.0,$1623=0,$1624=0,$1625=.0,$1626=.0,$1627=.0,$1628=0,$1629=0,$1630=0,$1631=0,$1632=.0,$1633=.0;
 var $1634=.0,$1635=.0,$1636=0,$1637=0,$1638=0,$1639=0,$1640=.0,$1641=.0,$1642=.0,$1643=.0,$1644=0,$1645=0,$1646=0,$1647=0,$1648=.0,$1649=.0,$1650=.0,$1651=.0,$1652=0,$1653=0;
 var $1654=0,$1655=0,$1656=.0,$1657=.0,$1658=.0,$1659=.0,$1660=0,$1661=0,$1662=0,$1663=0,$1664=.0,$1665=.0,$1666=.0,$1667=.0,$1668=0,$1669=0,$1670=0,$1671=0,$1672=.0,$1673=.0;
 var $1674=.0,$1675=.0,$1676=0,$1677=0,$1678=0,$1679=0,$1680=.0,$1681=.0,$1682=.0,$1683=.0,$1684=0,$1685=0,$1686=0,$1687=0,$1688=.0,$1689=.0,$1690=.0,$1691=.0,$1692=0,$1693=0;
 var $1694=0,$1695=0,$1696=.0,$1697=.0,$1698=.0,$1699=.0,$1700=0,$1701=0,$1702=0,$1703=0,$1704=.0,$1705=.0,$1706=.0,$1707=.0,$1708=0,$1709=0,$1710=0,$1711=0,$1712=.0,$1713=.0;
 var $1714=.0,$1715=.0,$1716=0,$1717=0,$1718=0,$1719=0,$1720=.0,$1721=.0,$1722=.0,$1723=.0,$1724=0,$1725=0,$1726=0,$1727=0,$1728=.0,$1729=.0,$1730=.0,$1731=.0,$1732=0,$1733=0;
 var $1734=0,$1735=0,$1736=.0,$1737=.0,$1738=.0,$1739=.0,$1740=0,$1741=0,$1742=0,$1743=0,$1744=.0,$1745=0,$1746=0,$1747=.0,$1748=0,$1749=0,$1750=.0,$1751=.0,$1752=.0,$1753=0;
 var $1754=0,$1755=.0,$1756=.0,$1757=0,$1758=0,$1759=.0,$1760=0,$1761=0,$1762=.0,$1763=0,$1764=0,$1765=.0,$1766=.0,$1767=.0,$1768=0,$1769=0,$1770=.0,$1771=.0,$1772=0,$1773=0;
 var $1774=.0,$1775=0,$1776=0,$1777=.0,$1778=0,$1779=0,$1780=.0,$1781=.0,$1782=.0,$1783=0,$1784=0,$1785=.0,$1786=.0,$1787=0,$1788=0,$1789=.0,$1790=0,$1791=0,$1792=.0,$1793=0;
 var $1794=0,$1795=.0,$1796=.0,$1797=.0,$1798=0,$1799=0,$1800=.0,$1801=.0,$1802=0,$1803=0,$1804=.0,$1805=0,$1806=0,$1807=.0,$1808=0,$1809=0,$1810=.0,$1811=.0,$1812=.0,$1813=0;
 var $1814=0,$1815=.0,$1816=.0,$1817=0,$1818=0,$1819=.0,$1820=0,$1821=0,$1822=.0,$1823=0,$1824=0,$1825=.0,$1826=.0,$1827=.0,$1828=0,$1829=0,$1830=.0,$1831=.0,$1832=0,$1833=0;
 var $1834=.0,$1835=0,$1836=0,$1837=.0,$1838=0,$1839=0,$1840=.0,$1841=.0,$1842=.0,$1843=0,$1844=0,$1845=.0,$1846=.0,$1847=0,$1848=0,$1849=.0,$1850=0,$1851=0,$1852=.0,$1853=0;
 var $1854=0,$1855=.0,$1856=.0,$1857=.0,$1858=0,$1859=0,$1860=.0,$1861=.0,$1862=0,$1863=0,$1864=.0,$1865=0,$1866=0,$1867=.0,$1868=0,$1869=0,$1870=.0,$1871=.0,$1872=.0,$1873=0;
 var $1874=0,$1875=.0,$1876=.0,$1877=0,$1878=0,$1879=.0,$1880=0,$1881=0,$1882=.0,$1883=0,$1884=0,$1885=.0,$1886=.0,$1887=.0,$1888=0,$1889=0,$1890=.0,$1891=.0,$1892=0,$1893=0;
 var $1894=.0,$1895=0,$1896=0,$1897=.0,$1898=0,$1899=0,$1900=.0,$1901=.0,$1902=.0,$1903=0,$1904=0,$1905=.0,$1906=.0,$1907=0,$1908=0,$1909=.0,$1910=0,$1911=0,$1912=.0,$1913=0;
 var $1914=0,$1915=.0,$1916=.0,$1917=.0,$1918=0,$1919=0,$1920=.0,$1921=.0,$1922=0,$1923=0,$1924=.0,$1925=0,$1926=0,$1927=.0,$1928=0,$1929=0,$1930=.0,$1931=.0,$1932=.0,$1933=0;
 var $1934=0,$1935=.0,$1936=.0,$1937=0,$1938=0,$1939=.0,$1940=0,$1941=0,$1942=.0,$1943=0,$1944=0,$1945=.0,$1946=.0,$1947=.0,$1948=0,$1949=0,$1950=.0,$1951=.0,$1952=0,$1953=0;
 var $1954=.0,$1955=0,$1956=0,$1957=.0,$1958=0,$1959=0,$1960=.0,$1961=.0,$1962=.0,$1963=0,$1964=0,$1965=.0,$1966=.0,$1967=0,$1968=0,$1969=.0,$1970=0,$1971=0,$1972=.0,$1973=0;
 var $1974=0,$1975=.0,$1976=.0,$1977=.0,$1978=0,$1979=0,$1980=.0,$1981=.0,label=0;
 var sp=0;sp=STACKTOP;













 $1=$x1;
 $2=$a;
 $wp=12912;
 $3=$1;
 $4=((($3)-(248))|0);
 $x2=$4;
 $i=-15;
 while(1) {
  $6=$i;
  $7=($6|0)<0;
  if (!($7)) {
   break;
  }
  $9=$wp;
  $10=((($9)-(40))|0);
  $11=(+(HEAPF32[(($10)>>2)]));
  $w=$11;
  $12=$x2;
  $13=((($12)-(896))|0);
  $14=(+(HEAPF32[(($13)>>2)]));
  $15=$w;
  $16=($14)*($15);
  $s=$16;
  $17=$1;
  $18=(($17+896)|0);
  $19=(+(HEAPF32[(($18)>>2)]));
  $20=$w;
  $21=($19)*($20);
  $t=$21;
  $22=$wp;
  $23=((($22)-(36))|0);
  $24=(+(HEAPF32[(($23)>>2)]));
  $w=$24;
  $25=$x2;
  $26=((($25)-(640))|0);
  $27=(+(HEAPF32[(($26)>>2)]));
  $28=$w;
  $29=($27)*($28);
  $30=$s;
  $31=($30)+($29);
  $s=$31;
  $32=$1;
  $33=(($32+640)|0);
  $34=(+(HEAPF32[(($33)>>2)]));
  $35=$w;
  $36=($34)*($35);
  $37=$t;
  $38=($37)+($36);
  $t=$38;
  $39=$wp;
  $40=((($39)-(32))|0);
  $41=(+(HEAPF32[(($40)>>2)]));
  $w=$41;
  $42=$x2;
  $43=((($42)-(384))|0);
  $44=(+(HEAPF32[(($43)>>2)]));
  $45=$w;
  $46=($44)*($45);
  $47=$s;
  $48=($47)+($46);
  $s=$48;
  $49=$1;
  $50=(($49+384)|0);
  $51=(+(HEAPF32[(($50)>>2)]));
  $52=$w;
  $53=($51)*($52);
  $54=$t;
  $55=($54)+($53);
  $t=$55;
  $56=$wp;
  $57=((($56)-(28))|0);
  $58=(+(HEAPF32[(($57)>>2)]));
  $w=$58;
  $59=$x2;
  $60=((($59)-(128))|0);
  $61=(+(HEAPF32[(($60)>>2)]));
  $62=$w;
  $63=($61)*($62);
  $64=$s;
  $65=($64)+($63);
  $s=$65;
  $66=$1;
  $67=(($66+128)|0);
  $68=(+(HEAPF32[(($67)>>2)]));
  $69=$w;
  $70=($68)*($69);
  $71=$t;
  $72=($71)+($70);
  $t=$72;
  $73=$wp;
  $74=((($73)-(24))|0);
  $75=(+(HEAPF32[(($74)>>2)]));
  $w=$75;
  $76=$x2;
  $77=(($76+128)|0);
  $78=(+(HEAPF32[(($77)>>2)]));
  $79=$w;
  $80=($78)*($79);
  $81=$s;
  $82=($81)+($80);
  $s=$82;
  $83=$1;
  $84=((($83)-(128))|0);
  $85=(+(HEAPF32[(($84)>>2)]));
  $86=$w;
  $87=($85)*($86);
  $88=$t;
  $89=($88)+($87);
  $t=$89;
  $90=$wp;
  $91=((($90)-(20))|0);
  $92=(+(HEAPF32[(($91)>>2)]));
  $w=$92;
  $93=$x2;
  $94=(($93+384)|0);
  $95=(+(HEAPF32[(($94)>>2)]));
  $96=$w;
  $97=($95)*($96);
  $98=$s;
  $99=($98)+($97);
  $s=$99;
  $100=$1;
  $101=((($100)-(384))|0);
  $102=(+(HEAPF32[(($101)>>2)]));
  $103=$w;
  $104=($102)*($103);
  $105=$t;
  $106=($105)+($104);
  $t=$106;
  $107=$wp;
  $108=((($107)-(16))|0);
  $109=(+(HEAPF32[(($108)>>2)]));
  $w=$109;
  $110=$x2;
  $111=(($110+640)|0);
  $112=(+(HEAPF32[(($111)>>2)]));
  $113=$w;
  $114=($112)*($113);
  $115=$s;
  $116=($115)+($114);
  $s=$116;
  $117=$1;
  $118=((($117)-(640))|0);
  $119=(+(HEAPF32[(($118)>>2)]));
  $120=$w;
  $121=($119)*($120);
  $122=$t;
  $123=($122)+($121);
  $t=$123;
  $124=$wp;
  $125=((($124)-(12))|0);
  $126=(+(HEAPF32[(($125)>>2)]));
  $w=$126;
  $127=$x2;
  $128=(($127+896)|0);
  $129=(+(HEAPF32[(($128)>>2)]));
  $130=$w;
  $131=($129)*($130);
  $132=$s;
  $133=($132)+($131);
  $s=$133;
  $134=$1;
  $135=((($134)-(896))|0);
  $136=(+(HEAPF32[(($135)>>2)]));
  $137=$w;
  $138=($136)*($137);
  $139=$t;
  $140=($139)+($138);
  $t=$140;
  $141=$wp;
  $142=((($141)-(8))|0);
  $143=(+(HEAPF32[(($142)>>2)]));
  $w=$143;
  $144=$1;
  $145=((($144)-(1024))|0);
  $146=(+(HEAPF32[(($145)>>2)]));
  $147=$w;
  $148=($146)*($147);
  $149=$s;
  $150=($149)+($148);
  $s=$150;
  $151=$x2;
  $152=(($151+1024)|0);
  $153=(+(HEAPF32[(($152)>>2)]));
  $154=$w;
  $155=($153)*($154);
  $156=$t;
  $157=($156)-($155);
  $t=$157;
  $158=$wp;
  $159=((($158)-(4))|0);
  $160=(+(HEAPF32[(($159)>>2)]));
  $w=$160;
  $161=$1;
  $162=((($161)-(768))|0);
  $163=(+(HEAPF32[(($162)>>2)]));
  $164=$w;
  $165=($163)*($164);
  $166=$s;
  $167=($166)+($165);
  $s=$167;
  $168=$x2;
  $169=(($168+768)|0);
  $170=(+(HEAPF32[(($169)>>2)]));
  $171=$w;
  $172=($170)*($171);
  $173=$t;
  $174=($173)-($172);
  $t=$174;
  $175=$wp;
  $176=(($175)|0);
  $177=(+(HEAPF32[(($176)>>2)]));
  $w=$177;
  $178=$1;
  $179=((($178)-(512))|0);
  $180=(+(HEAPF32[(($179)>>2)]));
  $181=$w;
  $182=($180)*($181);
  $183=$s;
  $184=($183)+($182);
  $s=$184;
  $185=$x2;
  $186=(($185+512)|0);
  $187=(+(HEAPF32[(($186)>>2)]));
  $188=$w;
  $189=($187)*($188);
  $190=$t;
  $191=($190)-($189);
  $t=$191;
  $192=$wp;
  $193=(($192+4)|0);
  $194=(+(HEAPF32[(($193)>>2)]));
  $w=$194;
  $195=$1;
  $196=((($195)-(256))|0);
  $197=(+(HEAPF32[(($196)>>2)]));
  $198=$w;
  $199=($197)*($198);
  $200=$s;
  $201=($200)+($199);
  $s=$201;
  $202=$x2;
  $203=(($202+256)|0);
  $204=(+(HEAPF32[(($203)>>2)]));
  $205=$w;
  $206=($204)*($205);
  $207=$t;
  $208=($207)-($206);
  $t=$208;
  $209=$wp;
  $210=(($209+8)|0);
  $211=(+(HEAPF32[(($210)>>2)]));
  $w=$211;
  $212=$1;
  $213=(($212)|0);
  $214=(+(HEAPF32[(($213)>>2)]));
  $215=$w;
  $216=($214)*($215);
  $217=$s;
  $218=($217)+($216);
  $s=$218;
  $219=$x2;
  $220=(($219)|0);
  $221=(+(HEAPF32[(($220)>>2)]));
  $222=$w;
  $223=($221)*($222);
  $224=$t;
  $225=($224)-($223);
  $t=$225;
  $226=$wp;
  $227=(($226+12)|0);
  $228=(+(HEAPF32[(($227)>>2)]));
  $w=$228;
  $229=$1;
  $230=(($229+256)|0);
  $231=(+(HEAPF32[(($230)>>2)]));
  $232=$w;
  $233=($231)*($232);
  $234=$s;
  $235=($234)+($233);
  $s=$235;
  $236=$x2;
  $237=((($236)-(256))|0);
  $238=(+(HEAPF32[(($237)>>2)]));
  $239=$w;
  $240=($238)*($239);
  $241=$t;
  $242=($241)-($240);
  $t=$242;
  $243=$wp;
  $244=(($243+16)|0);
  $245=(+(HEAPF32[(($244)>>2)]));
  $w=$245;
  $246=$1;
  $247=(($246+512)|0);
  $248=(+(HEAPF32[(($247)>>2)]));
  $249=$w;
  $250=($248)*($249);
  $251=$s;
  $252=($251)+($250);
  $s=$252;
  $253=$x2;
  $254=((($253)-(512))|0);
  $255=(+(HEAPF32[(($254)>>2)]));
  $256=$w;
  $257=($255)*($256);
  $258=$t;
  $259=($258)-($257);
  $t=$259;
  $260=$wp;
  $261=(($260+20)|0);
  $262=(+(HEAPF32[(($261)>>2)]));
  $w=$262;
  $263=$1;
  $264=(($263+768)|0);
  $265=(+(HEAPF32[(($264)>>2)]));
  $266=$w;
  $267=($265)*($266);
  $268=$s;
  $269=($268)+($267);
  $s=$269;
  $270=$x2;
  $271=((($270)-(768))|0);
  $272=(+(HEAPF32[(($271)>>2)]));
  $273=$w;
  $274=($272)*($273);
  $275=$t;
  $276=($275)-($274);
  $t=$276;
  $277=$wp;
  $278=(($277+24)|0);
  $279=(+(HEAPF32[(($278)>>2)]));
  $280=$s;
  $281=($280)*($279);
  $s=$281;
  $282=$t;
  $283=$s;
  $284=($282)-($283);
  $w=$284;
  $285=$t;
  $286=$s;
  $287=($285)+($286);
  $288=$i;
  $289=($288<<1);
  $290=((($289)+(30))|0);
  $291=$2;
  $292=(($291+($290<<2))|0);
  HEAPF32[(($292)>>2)]=$287;
  $293=$wp;
  $294=(($293+28)|0);
  $295=(+(HEAPF32[(($294)>>2)]));
  $296=$w;
  $297=($295)*($296);
  $298=$i;
  $299=($298<<1);
  $300=((($299)+(31))|0);
  $301=$2;
  $302=(($301+($300<<2))|0);
  HEAPF32[(($302)>>2)]=$297;
  $303=$wp;
  $304=(($303+72)|0);
  $wp=$304;
  $305=$1;
  $306=((($305)-(4))|0);
  $1=$306;
  $307=$x2;
  $308=(($307+4)|0);
  $x2=$308;
  $310=$i;
  $311=((($310)+(1))|0);
  $i=$311;
 }
 $313=$1;
 $314=((($313)-(64))|0);
 $315=(+(HEAPF32[(($314)>>2)]));
 $316=$wp;
 $317=((($316)-(40))|0);
 $318=(+(HEAPF32[(($317)>>2)]));
 $319=($315)*($318);
 $t2=$319;
 $320=$1;
 $321=((($320)-(128))|0);
 $322=(+(HEAPF32[(($321)>>2)]));
 $323=$wp;
 $324=((($323)-(8))|0);
 $325=(+(HEAPF32[(($324)>>2)]));
 $326=($322)*($325);
 $s1=$326;
 $327=$1;
 $328=((($327)-(192))|0);
 $329=(+(HEAPF32[(($328)>>2)]));
 $330=$1;
 $331=(($330+64)|0);
 $332=(+(HEAPF32[(($331)>>2)]));
 $333=($329)-($332);
 $334=$wp;
 $335=((($334)-(36))|0);
 $336=(+(HEAPF32[(($335)>>2)]));
 $337=($333)*($336);
 $338=$t2;
 $339=($338)+($337);
 $t2=$339;
 $340=$1;
 $341=((($340)-(384))|0);
 $342=(+(HEAPF32[(($341)>>2)]));
 $343=$wp;
 $344=((($343)-(4))|0);
 $345=(+(HEAPF32[(($344)>>2)]));
 $346=($342)*($345);
 $347=$s1;
 $348=($347)+($346);
 $s1=$348;
 $349=$1;
 $350=((($349)-(320))|0);
 $351=(+(HEAPF32[(($350)>>2)]));
 $352=$1;
 $353=(($352+192)|0);
 $354=(+(HEAPF32[(($353)>>2)]));
 $355=($351)+($354);
 $356=$wp;
 $357=((($356)-(32))|0);
 $358=(+(HEAPF32[(($357)>>2)]));
 $359=($355)*($358);
 $360=$t2;
 $361=($360)+($359);
 $t2=$361;
 $362=$1;
 $363=((($362)-(640))|0);
 $364=(+(HEAPF32[(($363)>>2)]));
 $365=$wp;
 $366=(($365)|0);
 $367=(+(HEAPF32[(($366)>>2)]));
 $368=($364)*($367);
 $369=$s1;
 $370=($369)+($368);
 $s1=$370;
 $371=$1;
 $372=((($371)-(448))|0);
 $373=(+(HEAPF32[(($372)>>2)]));
 $374=$1;
 $375=(($374+320)|0);
 $376=(+(HEAPF32[(($375)>>2)]));
 $377=($373)-($376);
 $378=$wp;
 $379=((($378)-(28))|0);
 $380=(+(HEAPF32[(($379)>>2)]));
 $381=($377)*($380);
 $382=$t2;
 $383=($382)+($381);
 $t2=$383;
 $384=$1;
 $385=((($384)-(896))|0);
 $386=(+(HEAPF32[(($385)>>2)]));
 $387=$wp;
 $388=(($387+4)|0);
 $389=(+(HEAPF32[(($388)>>2)]));
 $390=($386)*($389);
 $391=$s1;
 $392=($391)+($390);
 $s1=$392;
 $393=$1;
 $394=((($393)-(576))|0);
 $395=(+(HEAPF32[(($394)>>2)]));
 $396=$1;
 $397=(($396+448)|0);
 $398=(+(HEAPF32[(($397)>>2)]));
 $399=($395)+($398);
 $400=$wp;
 $401=((($400)-(24))|0);
 $402=(+(HEAPF32[(($401)>>2)]));
 $403=($399)*($402);
 $404=$t2;
 $405=($404)+($403);
 $t2=$405;
 $406=$1;
 $407=(($406+128)|0);
 $408=(+(HEAPF32[(($407)>>2)]));
 $409=$wp;
 $410=(($409+8)|0);
 $411=(+(HEAPF32[(($410)>>2)]));
 $412=($408)*($411);
 $413=$s1;
 $414=($413)-($412);
 $s1=$414;
 $415=$1;
 $416=((($415)-(704))|0);
 $417=(+(HEAPF32[(($416)>>2)]));
 $418=$1;
 $419=(($418+576)|0);
 $420=(+(HEAPF32[(($419)>>2)]));
 $421=($417)-($420);
 $422=$wp;
 $423=((($422)-(20))|0);
 $424=(+(HEAPF32[(($423)>>2)]));
 $425=($421)*($424);
 $426=$t2;
 $427=($426)+($425);
 $t2=$427;
 $428=$1;
 $429=(($428+384)|0);
 $430=(+(HEAPF32[(($429)>>2)]));
 $431=$wp;
 $432=(($431+12)|0);
 $433=(+(HEAPF32[(($432)>>2)]));
 $434=($430)*($433);
 $435=$s1;
 $436=($435)-($434);
 $s1=$436;
 $437=$1;
 $438=((($437)-(832))|0);
 $439=(+(HEAPF32[(($438)>>2)]));
 $440=$1;
 $441=(($440+704)|0);
 $442=(+(HEAPF32[(($441)>>2)]));
 $443=($439)+($442);
 $444=$wp;
 $445=((($444)-(16))|0);
 $446=(+(HEAPF32[(($445)>>2)]));
 $447=($443)*($446);
 $448=$t2;
 $449=($448)+($447);
 $t2=$449;
 $450=$1;
 $451=(($450+640)|0);
 $452=(+(HEAPF32[(($451)>>2)]));
 $453=$wp;
 $454=(($453+16)|0);
 $455=(+(HEAPF32[(($454)>>2)]));
 $456=($452)*($455);
 $457=$s1;
 $458=($457)-($456);
 $s1=$458;
 $459=$1;
 $460=((($459)-(960))|0);
 $461=(+(HEAPF32[(($460)>>2)]));
 $462=$1;
 $463=(($462+832)|0);
 $464=(+(HEAPF32[(($463)>>2)]));
 $465=($461)-($464);
 $466=$wp;
 $467=((($466)-(12))|0);
 $468=(+(HEAPF32[(($467)>>2)]));
 $469=($465)*($468);
 $470=$t2;
 $471=($470)+($469);
 $t2=$471;
 $472=$1;
 $473=(($472+896)|0);
 $474=(+(HEAPF32[(($473)>>2)]));
 $475=$s1;
 $476=($475)-($474);
 $s1=$476;
 $477=$s1;
 $478=$t2;
 $479=($477)-($478);
 $u=$479;
 $480=$s1;
 $481=$t2;
 $482=($480)+($481);
 $v=$482;
 $483=$2;
 $484=(($483+56)|0);
 $485=(+(HEAPF32[(($484)>>2)]));
 $t2=$485;
 $486=$2;
 $487=(($486+60)|0);
 $488=(+(HEAPF32[(($487)>>2)]));
 $489=$t2;
 $490=($488)-($489);
 $s1=$490;
 $491=$v;
 $492=$t2;
 $493=($491)+($492);
 $494=$2;
 $495=(($494+124)|0);
 HEAPF32[(($495)>>2)]=$493;
 $496=$u;
 $497=$s1;
 $498=($496)+($497);
 $499=$2;
 $500=(($499+120)|0);
 HEAPF32[(($500)>>2)]=$498;
 $501=$u;
 $502=$s1;
 $503=($501)-($502);
 $504=$2;
 $505=(($504+60)|0);
 HEAPF32[(($505)>>2)]=$503;
 $506=$v;
 $507=$t2;
 $508=($506)-($507);
 $509=$2;
 $510=(($509+56)|0);
 HEAPF32[(($510)>>2)]=$508;
 $511=$2;
 $512=(($511+112)|0);
 $513=(+(HEAPF32[(($512)>>2)]));
 $514=$2;
 $515=(($514)|0);
 $516=(+(HEAPF32[(($515)>>2)]));
 $517=($513)-($516);
 $xr=$517;
 $518=$2;
 $519=(($518+112)|0);
 $520=(+(HEAPF32[(($519)>>2)]));
 $521=$2;
 $522=(($521)|0);
 $523=(+(HEAPF32[(($522)>>2)]));
 $524=($523)+($520);
 HEAPF32[(($522)>>2)]=$524;
 $525=$xr;
 $526=$wp;
 $527=((($526)-(116))|0);
 $528=(+(HEAPF32[(($527)>>2)]));
 $529=($525)*($528);
 $530=$2;
 $531=(($530+112)|0);
 HEAPF32[(($531)>>2)]=$529;
 $532=$2;
 $533=(($532+116)|0);
 $534=(+(HEAPF32[(($533)>>2)]));
 $535=$2;
 $536=(($535+4)|0);
 $537=(+(HEAPF32[(($536)>>2)]));
 $538=($534)-($537);
 $xr=$538;
 $539=$2;
 $540=(($539+116)|0);
 $541=(+(HEAPF32[(($540)>>2)]));
 $542=$2;
 $543=(($542+4)|0);
 $544=(+(HEAPF32[(($543)>>2)]));
 $545=($544)+($541);
 HEAPF32[(($543)>>2)]=$545;
 $546=$xr;
 $547=$wp;
 $548=((($547)-(116))|0);
 $549=(+(HEAPF32[(($548)>>2)]));
 $550=($546)*($549);
 $551=$2;
 $552=(($551+116)|0);
 HEAPF32[(($552)>>2)]=$550;
 $553=$2;
 $554=(($553+104)|0);
 $555=(+(HEAPF32[(($554)>>2)]));
 $556=$2;
 $557=(($556+8)|0);
 $558=(+(HEAPF32[(($557)>>2)]));
 $559=($555)-($558);
 $xr=$559;
 $560=$2;
 $561=(($560+104)|0);
 $562=(+(HEAPF32[(($561)>>2)]));
 $563=$2;
 $564=(($563+8)|0);
 $565=(+(HEAPF32[(($564)>>2)]));
 $566=($565)+($562);
 HEAPF32[(($564)>>2)]=$566;
 $567=$xr;
 $568=$wp;
 $569=((($568)-(260))|0);
 $570=(+(HEAPF32[(($569)>>2)]));
 $571=($567)*($570);
 $572=$2;
 $573=(($572+104)|0);
 HEAPF32[(($573)>>2)]=$571;
 $574=$2;
 $575=(($574+108)|0);
 $576=(+(HEAPF32[(($575)>>2)]));
 $577=$2;
 $578=(($577+12)|0);
 $579=(+(HEAPF32[(($578)>>2)]));
 $580=($576)-($579);
 $xr=$580;
 $581=$2;
 $582=(($581+108)|0);
 $583=(+(HEAPF32[(($582)>>2)]));
 $584=$2;
 $585=(($584+12)|0);
 $586=(+(HEAPF32[(($585)>>2)]));
 $587=($586)+($583);
 HEAPF32[(($585)>>2)]=$587;
 $588=$xr;
 $589=$wp;
 $590=((($589)-(260))|0);
 $591=(+(HEAPF32[(($590)>>2)]));
 $592=($588)*($591);
 $593=$2;
 $594=(($593+108)|0);
 HEAPF32[(($594)>>2)]=$592;
 $595=$2;
 $596=(($595+96)|0);
 $597=(+(HEAPF32[(($596)>>2)]));
 $598=$2;
 $599=(($598+16)|0);
 $600=(+(HEAPF32[(($599)>>2)]));
 $601=($597)-($600);
 $xr=$601;
 $602=$2;
 $603=(($602+96)|0);
 $604=(+(HEAPF32[(($603)>>2)]));
 $605=$2;
 $606=(($605+16)|0);
 $607=(+(HEAPF32[(($606)>>2)]));
 $608=($607)+($604);
 HEAPF32[(($606)>>2)]=$608;
 $609=$xr;
 $610=$wp;
 $611=((($610)-(404))|0);
 $612=(+(HEAPF32[(($611)>>2)]));
 $613=($609)*($612);
 $614=$2;
 $615=(($614+96)|0);
 HEAPF32[(($615)>>2)]=$613;
 $616=$2;
 $617=(($616+100)|0);
 $618=(+(HEAPF32[(($617)>>2)]));
 $619=$2;
 $620=(($619+20)|0);
 $621=(+(HEAPF32[(($620)>>2)]));
 $622=($618)-($621);
 $xr=$622;
 $623=$2;
 $624=(($623+100)|0);
 $625=(+(HEAPF32[(($624)>>2)]));
 $626=$2;
 $627=(($626+20)|0);
 $628=(+(HEAPF32[(($627)>>2)]));
 $629=($628)+($625);
 HEAPF32[(($627)>>2)]=$629;
 $630=$xr;
 $631=$wp;
 $632=((($631)-(404))|0);
 $633=(+(HEAPF32[(($632)>>2)]));
 $634=($630)*($633);
 $635=$2;
 $636=(($635+100)|0);
 HEAPF32[(($636)>>2)]=$634;
 $637=$2;
 $638=(($637+88)|0);
 $639=(+(HEAPF32[(($638)>>2)]));
 $640=$2;
 $641=(($640+24)|0);
 $642=(+(HEAPF32[(($641)>>2)]));
 $643=($639)-($642);
 $xr=$643;
 $644=$2;
 $645=(($644+88)|0);
 $646=(+(HEAPF32[(($645)>>2)]));
 $647=$2;
 $648=(($647+24)|0);
 $649=(+(HEAPF32[(($648)>>2)]));
 $650=($649)+($646);
 HEAPF32[(($648)>>2)]=$650;
 $651=$xr;
 $652=$651;
 $653=($652)*((1.4142135623730951));
 $654=$653;
 $655=$2;
 $656=(($655+88)|0);
 HEAPF32[(($656)>>2)]=$654;
 $657=$2;
 $658=(($657+92)|0);
 $659=(+(HEAPF32[(($658)>>2)]));
 $660=$2;
 $661=(($660+28)|0);
 $662=(+(HEAPF32[(($661)>>2)]));
 $663=($659)-($662);
 $xr=$663;
 $664=$2;
 $665=(($664+92)|0);
 $666=(+(HEAPF32[(($665)>>2)]));
 $667=$2;
 $668=(($667+28)|0);
 $669=(+(HEAPF32[(($668)>>2)]));
 $670=($669)+($666);
 HEAPF32[(($668)>>2)]=$670;
 $671=$xr;
 $672=$671;
 $673=($672)*((1.4142135623730951));
 $674=$2;
 $675=(($674+28)|0);
 $676=(+(HEAPF32[(($675)>>2)]));
 $677=$676;
 $678=($673)-($677);
 $679=$678;
 $680=$2;
 $681=(($680+92)|0);
 HEAPF32[(($681)>>2)]=$679;
 $682=$2;
 $683=(($682+24)|0);
 $684=(+(HEAPF32[(($683)>>2)]));
 $685=$2;
 $686=(($685+28)|0);
 $687=(+(HEAPF32[(($686)>>2)]));
 $688=($687)-($684);
 HEAPF32[(($686)>>2)]=$688;
 $689=$2;
 $690=(($689+28)|0);
 $691=(+(HEAPF32[(($690)>>2)]));
 $692=$2;
 $693=(($692+88)|0);
 $694=(+(HEAPF32[(($693)>>2)]));
 $695=($694)-($691);
 HEAPF32[(($693)>>2)]=$695;
 $696=$2;
 $697=(($696+88)|0);
 $698=(+(HEAPF32[(($697)>>2)]));
 $699=$2;
 $700=(($699+92)|0);
 $701=(+(HEAPF32[(($700)>>2)]));
 $702=($701)-($698);
 HEAPF32[(($700)>>2)]=$702;
 $703=$2;
 $704=(($703+24)|0);
 $705=(+(HEAPF32[(($704)>>2)]));
 $xr=$705;
 $706=$2;
 $707=(($706+124)|0);
 $708=(+(HEAPF32[(($707)>>2)]));
 $709=$xr;
 $710=($708)-($709);
 $711=$2;
 $712=(($711+24)|0);
 HEAPF32[(($712)>>2)]=$710;
 $713=$2;
 $714=(($713+124)|0);
 $715=(+(HEAPF32[(($714)>>2)]));
 $716=$xr;
 $717=($715)+($716);
 $718=$2;
 $719=(($718+124)|0);
 HEAPF32[(($719)>>2)]=$717;
 $720=$2;
 $721=(($720+28)|0);
 $722=(+(HEAPF32[(($721)>>2)]));
 $xr=$722;
 $723=$2;
 $724=(($723+120)|0);
 $725=(+(HEAPF32[(($724)>>2)]));
 $726=$xr;
 $727=($725)-($726);
 $728=$2;
 $729=(($728+28)|0);
 HEAPF32[(($729)>>2)]=$727;
 $730=$2;
 $731=(($730+120)|0);
 $732=(+(HEAPF32[(($731)>>2)]));
 $733=$xr;
 $734=($732)+($733);
 $735=$2;
 $736=(($735+120)|0);
 HEAPF32[(($736)>>2)]=$734;
 $737=$2;
 $738=(($737+88)|0);
 $739=(+(HEAPF32[(($738)>>2)]));
 $xr=$739;
 $740=$2;
 $741=(($740+60)|0);
 $742=(+(HEAPF32[(($741)>>2)]));
 $743=$xr;
 $744=($742)-($743);
 $745=$2;
 $746=(($745+88)|0);
 HEAPF32[(($746)>>2)]=$744;
 $747=$2;
 $748=(($747+60)|0);
 $749=(+(HEAPF32[(($748)>>2)]));
 $750=$xr;
 $751=($749)+($750);
 $752=$2;
 $753=(($752+60)|0);
 HEAPF32[(($753)>>2)]=$751;
 $754=$2;
 $755=(($754+92)|0);
 $756=(+(HEAPF32[(($755)>>2)]));
 $xr=$756;
 $757=$2;
 $758=(($757+56)|0);
 $759=(+(HEAPF32[(($758)>>2)]));
 $760=$xr;
 $761=($759)-($760);
 $762=$2;
 $763=(($762+92)|0);
 HEAPF32[(($763)>>2)]=$761;
 $764=$2;
 $765=(($764+56)|0);
 $766=(+(HEAPF32[(($765)>>2)]));
 $767=$xr;
 $768=($766)+($767);
 $769=$2;
 $770=(($769+56)|0);
 HEAPF32[(($770)>>2)]=$768;
 $771=$2;
 $772=(($771+80)|0);
 $773=(+(HEAPF32[(($772)>>2)]));
 $774=$2;
 $775=(($774+32)|0);
 $776=(+(HEAPF32[(($775)>>2)]));
 $777=($773)-($776);
 $xr=$777;
 $778=$2;
 $779=(($778+80)|0);
 $780=(+(HEAPF32[(($779)>>2)]));
 $781=$2;
 $782=(($781+32)|0);
 $783=(+(HEAPF32[(($782)>>2)]));
 $784=($783)+($780);
 HEAPF32[(($782)>>2)]=$784;
 $785=$xr;
 $786=$wp;
 $787=((($786)-(692))|0);
 $788=(+(HEAPF32[(($787)>>2)]));
 $789=($785)*($788);
 $790=$2;
 $791=(($790+80)|0);
 HEAPF32[(($791)>>2)]=$789;
 $792=$2;
 $793=(($792+84)|0);
 $794=(+(HEAPF32[(($793)>>2)]));
 $795=$2;
 $796=(($795+36)|0);
 $797=(+(HEAPF32[(($796)>>2)]));
 $798=($794)-($797);
 $xr=$798;
 $799=$2;
 $800=(($799+84)|0);
 $801=(+(HEAPF32[(($800)>>2)]));
 $802=$2;
 $803=(($802+36)|0);
 $804=(+(HEAPF32[(($803)>>2)]));
 $805=($804)+($801);
 HEAPF32[(($803)>>2)]=$805;
 $806=$xr;
 $807=$wp;
 $808=((($807)-(692))|0);
 $809=(+(HEAPF32[(($808)>>2)]));
 $810=($806)*($809);
 $811=$2;
 $812=(($811+84)|0);
 HEAPF32[(($812)>>2)]=$810;
 $813=$2;
 $814=(($813+72)|0);
 $815=(+(HEAPF32[(($814)>>2)]));
 $816=$2;
 $817=(($816+40)|0);
 $818=(+(HEAPF32[(($817)>>2)]));
 $819=($815)-($818);
 $xr=$819;
 $820=$2;
 $821=(($820+72)|0);
 $822=(+(HEAPF32[(($821)>>2)]));
 $823=$2;
 $824=(($823+40)|0);
 $825=(+(HEAPF32[(($824)>>2)]));
 $826=($825)+($822);
 HEAPF32[(($824)>>2)]=$826;
 $827=$xr;
 $828=$wp;
 $829=((($828)-(836))|0);
 $830=(+(HEAPF32[(($829)>>2)]));
 $831=($827)*($830);
 $832=$2;
 $833=(($832+72)|0);
 HEAPF32[(($833)>>2)]=$831;
 $834=$2;
 $835=(($834+76)|0);
 $836=(+(HEAPF32[(($835)>>2)]));
 $837=$2;
 $838=(($837+44)|0);
 $839=(+(HEAPF32[(($838)>>2)]));
 $840=($836)-($839);
 $xr=$840;
 $841=$2;
 $842=(($841+76)|0);
 $843=(+(HEAPF32[(($842)>>2)]));
 $844=$2;
 $845=(($844+44)|0);
 $846=(+(HEAPF32[(($845)>>2)]));
 $847=($846)+($843);
 HEAPF32[(($845)>>2)]=$847;
 $848=$xr;
 $849=$wp;
 $850=((($849)-(836))|0);
 $851=(+(HEAPF32[(($850)>>2)]));
 $852=($848)*($851);
 $853=$2;
 $854=(($853+76)|0);
 HEAPF32[(($854)>>2)]=$852;
 $855=$2;
 $856=(($855+64)|0);
 $857=(+(HEAPF32[(($856)>>2)]));
 $858=$2;
 $859=(($858+48)|0);
 $860=(+(HEAPF32[(($859)>>2)]));
 $861=($857)-($860);
 $xr=$861;
 $862=$2;
 $863=(($862+64)|0);
 $864=(+(HEAPF32[(($863)>>2)]));
 $865=$2;
 $866=(($865+48)|0);
 $867=(+(HEAPF32[(($866)>>2)]));
 $868=($867)+($864);
 HEAPF32[(($866)>>2)]=$868;
 $869=$xr;
 $870=$wp;
 $871=((($870)-(980))|0);
 $872=(+(HEAPF32[(($871)>>2)]));
 $873=($869)*($872);
 $874=$2;
 $875=(($874+64)|0);
 HEAPF32[(($875)>>2)]=$873;
 $876=$2;
 $877=(($876+68)|0);
 $878=(+(HEAPF32[(($877)>>2)]));
 $879=$2;
 $880=(($879+52)|0);
 $881=(+(HEAPF32[(($880)>>2)]));
 $882=($878)-($881);
 $xr=$882;
 $883=$2;
 $884=(($883+68)|0);
 $885=(+(HEAPF32[(($884)>>2)]));
 $886=$2;
 $887=(($886+52)|0);
 $888=(+(HEAPF32[(($887)>>2)]));
 $889=($888)+($885);
 HEAPF32[(($887)>>2)]=$889;
 $890=$xr;
 $891=$wp;
 $892=((($891)-(980))|0);
 $893=(+(HEAPF32[(($892)>>2)]));
 $894=($890)*($893);
 $895=$2;
 $896=(($895+68)|0);
 HEAPF32[(($896)>>2)]=$894;
 $897=$2;
 $898=(($897+80)|0);
 $899=(+(HEAPF32[(($898)>>2)]));
 $900=((-.0))-($899);
 $901=$2;
 $902=(($901+96)|0);
 $903=(+(HEAPF32[(($902)>>2)]));
 $904=($900)+($903);
 $xr=$904;
 $905=$2;
 $906=(($905+96)|0);
 $907=(+(HEAPF32[(($906)>>2)]));
 $908=$2;
 $909=(($908+80)|0);
 $910=(+(HEAPF32[(($909)>>2)]));
 $911=($910)+($907);
 HEAPF32[(($909)>>2)]=$911;
 $912=$xr;
 $913=$wp;
 $914=((($913)-(836))|0);
 $915=(+(HEAPF32[(($914)>>2)]));
 $916=($912)*($915);
 $917=$2;
 $918=(($917+96)|0);
 HEAPF32[(($918)>>2)]=$916;
 $919=$2;
 $920=(($919+84)|0);
 $921=(+(HEAPF32[(($920)>>2)]));
 $922=((-.0))-($921);
 $923=$2;
 $924=(($923+100)|0);
 $925=(+(HEAPF32[(($924)>>2)]));
 $926=($922)+($925);
 $xr=$926;
 $927=$2;
 $928=(($927+100)|0);
 $929=(+(HEAPF32[(($928)>>2)]));
 $930=$2;
 $931=(($930+84)|0);
 $932=(+(HEAPF32[(($931)>>2)]));
 $933=($932)+($929);
 HEAPF32[(($931)>>2)]=$933;
 $934=$xr;
 $935=$wp;
 $936=((($935)-(836))|0);
 $937=(+(HEAPF32[(($936)>>2)]));
 $938=($934)*($937);
 $939=$2;
 $940=(($939+100)|0);
 HEAPF32[(($940)>>2)]=$938;
 $941=$2;
 $942=(($941+16)|0);
 $943=(+(HEAPF32[(($942)>>2)]));
 $944=$2;
 $945=(($944+32)|0);
 $946=(+(HEAPF32[(($945)>>2)]));
 $947=($943)-($946);
 $xr=$947;
 $948=$2;
 $949=(($948+32)|0);
 $950=(+(HEAPF32[(($949)>>2)]));
 $951=$2;
 $952=(($951+16)|0);
 $953=(+(HEAPF32[(($952)>>2)]));
 $954=($953)+($950);
 HEAPF32[(($952)>>2)]=$954;
 $955=$xr;
 $956=$wp;
 $957=((($956)-(836))|0);
 $958=(+(HEAPF32[(($957)>>2)]));
 $959=($955)*($958);
 $960=$2;
 $961=(($960+32)|0);
 HEAPF32[(($961)>>2)]=$959;
 $962=$2;
 $963=(($962+20)|0);
 $964=(+(HEAPF32[(($963)>>2)]));
 $965=$2;
 $966=(($965+36)|0);
 $967=(+(HEAPF32[(($966)>>2)]));
 $968=($964)-($967);
 $xr=$968;
 $969=$2;
 $970=(($969+36)|0);
 $971=(+(HEAPF32[(($970)>>2)]));
 $972=$2;
 $973=(($972+20)|0);
 $974=(+(HEAPF32[(($973)>>2)]));
 $975=($974)+($971);
 HEAPF32[(($973)>>2)]=$975;
 $976=$xr;
 $977=$wp;
 $978=((($977)-(836))|0);
 $979=(+(HEAPF32[(($978)>>2)]));
 $980=($976)*($979);
 $981=$2;
 $982=(($981+36)|0);
 HEAPF32[(($982)>>2)]=$980;
 $983=$2;
 $984=(($983)|0);
 $985=(+(HEAPF32[(($984)>>2)]));
 $986=$2;
 $987=(($986+48)|0);
 $988=(+(HEAPF32[(($987)>>2)]));
 $989=($985)-($988);
 $xr=$989;
 $990=$2;
 $991=(($990+48)|0);
 $992=(+(HEAPF32[(($991)>>2)]));
 $993=$2;
 $994=(($993)|0);
 $995=(+(HEAPF32[(($994)>>2)]));
 $996=($995)+($992);
 HEAPF32[(($994)>>2)]=$996;
 $997=$xr;
 $998=$wp;
 $999=((($998)-(260))|0);
 $1000=(+(HEAPF32[(($999)>>2)]));
 $1001=($997)*($1000);
 $1002=$2;
 $1003=(($1002+48)|0);
 HEAPF32[(($1003)>>2)]=$1001;
 $1004=$2;
 $1005=(($1004+4)|0);
 $1006=(+(HEAPF32[(($1005)>>2)]));
 $1007=$2;
 $1008=(($1007+52)|0);
 $1009=(+(HEAPF32[(($1008)>>2)]));
 $1010=($1006)-($1009);
 $xr=$1010;
 $1011=$2;
 $1012=(($1011+52)|0);
 $1013=(+(HEAPF32[(($1012)>>2)]));
 $1014=$2;
 $1015=(($1014+4)|0);
 $1016=(+(HEAPF32[(($1015)>>2)]));
 $1017=($1016)+($1013);
 HEAPF32[(($1015)>>2)]=$1017;
 $1018=$xr;
 $1019=$wp;
 $1020=((($1019)-(260))|0);
 $1021=(+(HEAPF32[(($1020)>>2)]));
 $1022=($1018)*($1021);
 $1023=$2;
 $1024=(($1023+52)|0);
 HEAPF32[(($1024)>>2)]=$1022;
 $1025=$2;
 $1026=(($1025+64)|0);
 $1027=(+(HEAPF32[(($1026)>>2)]));
 $1028=$2;
 $1029=(($1028+112)|0);
 $1030=(+(HEAPF32[(($1029)>>2)]));
 $1031=($1027)-($1030);
 $xr=$1031;
 $1032=$2;
 $1033=(($1032+112)|0);
 $1034=(+(HEAPF32[(($1033)>>2)]));
 $1035=$2;
 $1036=(($1035+64)|0);
 $1037=(+(HEAPF32[(($1036)>>2)]));
 $1038=($1037)+($1034);
 HEAPF32[(($1036)>>2)]=$1038;
 $1039=$xr;
 $1040=$wp;
 $1041=((($1040)-(260))|0);
 $1042=(+(HEAPF32[(($1041)>>2)]));
 $1043=($1039)*($1042);
 $1044=$2;
 $1045=(($1044+112)|0);
 HEAPF32[(($1045)>>2)]=$1043;
 $1046=$2;
 $1047=(($1046+68)|0);
 $1048=(+(HEAPF32[(($1047)>>2)]));
 $1049=((-.0))-($1048);
 $1050=$2;
 $1051=(($1050+116)|0);
 $1052=(+(HEAPF32[(($1051)>>2)]));
 $1053=($1049)+($1052);
 $xr=$1053;
 $1054=$2;
 $1055=(($1054+116)|0);
 $1056=(+(HEAPF32[(($1055)>>2)]));
 $1057=$2;
 $1058=(($1057+68)|0);
 $1059=(+(HEAPF32[(($1058)>>2)]));
 $1060=($1059)+($1056);
 HEAPF32[(($1058)>>2)]=$1060;
 $1061=$xr;
 $1062=$wp;
 $1063=((($1062)-(260))|0);
 $1064=(+(HEAPF32[(($1063)>>2)]));
 $1065=($1061)*($1064);
 $1066=$2;
 $1067=(($1066+116)|0);
 HEAPF32[(($1067)>>2)]=$1065;
 $1068=$2;
 $1069=(($1068+8)|0);
 $1070=(+(HEAPF32[(($1069)>>2)]));
 $1071=$2;
 $1072=(($1071+40)|0);
 $1073=(+(HEAPF32[(($1072)>>2)]));
 $1074=($1070)-($1073);
 $1075=$1074;
 $1076=((1.4142135623730951))*($1075);
 $1077=$1076;
 $xr=$1077;
 $1078=$2;
 $1079=(($1078+40)|0);
 $1080=(+(HEAPF32[(($1079)>>2)]));
 $1081=$2;
 $1082=(($1081+8)|0);
 $1083=(+(HEAPF32[(($1082)>>2)]));
 $1084=($1083)+($1080);
 HEAPF32[(($1082)>>2)]=$1084;
 $1085=$xr;
 $1086=$2;
 $1087=(($1086+40)|0);
 HEAPF32[(($1087)>>2)]=$1085;
 $1088=$2;
 $1089=(($1088+12)|0);
 $1090=(+(HEAPF32[(($1089)>>2)]));
 $1091=$2;
 $1092=(($1091+44)|0);
 $1093=(+(HEAPF32[(($1092)>>2)]));
 $1094=($1090)-($1093);
 $1095=$1094;
 $1096=((1.4142135623730951))*($1095);
 $1097=$1096;
 $xr=$1097;
 $1098=$2;
 $1099=(($1098+44)|0);
 $1100=(+(HEAPF32[(($1099)>>2)]));
 $1101=$2;
 $1102=(($1101+12)|0);
 $1103=(+(HEAPF32[(($1102)>>2)]));
 $1104=($1103)+($1100);
 HEAPF32[(($1102)>>2)]=$1104;
 $1105=$xr;
 $1106=$2;
 $1107=(($1106+44)|0);
 HEAPF32[(($1107)>>2)]=$1105;
 $1108=$2;
 $1109=(($1108+72)|0);
 $1110=(+(HEAPF32[(($1109)>>2)]));
 $1111=((-.0))-($1110);
 $1112=$2;
 $1113=(($1112+104)|0);
 $1114=(+(HEAPF32[(($1113)>>2)]));
 $1115=($1111)+($1114);
 $1116=$1115;
 $1117=((1.4142135623730951))*($1116);
 $1118=$1117;
 $xr=$1118;
 $1119=$2;
 $1120=(($1119+104)|0);
 $1121=(+(HEAPF32[(($1120)>>2)]));
 $1122=$2;
 $1123=(($1122+72)|0);
 $1124=(+(HEAPF32[(($1123)>>2)]));
 $1125=($1124)+($1121);
 HEAPF32[(($1123)>>2)]=$1125;
 $1126=$xr;
 $1127=$2;
 $1128=(($1127+72)|0);
 $1129=(+(HEAPF32[(($1128)>>2)]));
 $1130=($1126)-($1129);
 $1131=$2;
 $1132=(($1131+104)|0);
 HEAPF32[(($1132)>>2)]=$1130;
 $1133=$2;
 $1134=(($1133+76)|0);
 $1135=(+(HEAPF32[(($1134)>>2)]));
 $1136=((-.0))-($1135);
 $1137=$2;
 $1138=(($1137+108)|0);
 $1139=(+(HEAPF32[(($1138)>>2)]));
 $1140=($1136)+($1139);
 $1141=$1140;
 $1142=((1.4142135623730951))*($1141);
 $1143=$1142;
 $xr=$1143;
 $1144=$2;
 $1145=(($1144+108)|0);
 $1146=(+(HEAPF32[(($1145)>>2)]));
 $1147=$2;
 $1148=(($1147+76)|0);
 $1149=(+(HEAPF32[(($1148)>>2)]));
 $1150=($1149)+($1146);
 HEAPF32[(($1148)>>2)]=$1150;
 $1151=$xr;
 $1152=$2;
 $1153=(($1152+76)|0);
 $1154=(+(HEAPF32[(($1153)>>2)]));
 $1155=($1151)-($1154);
 $1156=$2;
 $1157=(($1156+108)|0);
 HEAPF32[(($1157)>>2)]=$1155;
 $1158=$2;
 $1159=(($1158+8)|0);
 $1160=(+(HEAPF32[(($1159)>>2)]));
 $xr=$1160;
 $1161=$2;
 $1162=(($1161+12)|0);
 $1163=(+(HEAPF32[(($1162)>>2)]));
 $1164=$2;
 $1165=(($1164+76)|0);
 $1166=(+(HEAPF32[(($1165)>>2)]));
 $1167=($1166)-($1163);
 HEAPF32[(($1165)>>2)]=$1167;
 $1168=$xr;
 $1169=$2;
 $1170=(($1169+12)|0);
 $1171=(+(HEAPF32[(($1170)>>2)]));
 $1172=($1171)-($1168);
 HEAPF32[(($1170)>>2)]=$1172;
 $1173=$2;
 $1174=(($1173+124)|0);
 $1175=(+(HEAPF32[(($1174)>>2)]));
 $1176=$xr;
 $1177=($1175)-($1176);
 $1178=$2;
 $1179=(($1178+8)|0);
 HEAPF32[(($1179)>>2)]=$1177;
 $1180=$xr;
 $1181=$2;
 $1182=(($1181+124)|0);
 $1183=(+(HEAPF32[(($1182)>>2)]));
 $1184=($1183)+($1180);
 HEAPF32[(($1182)>>2)]=$1184;
 $1185=$2;
 $1186=(($1185+12)|0);
 $1187=(+(HEAPF32[(($1186)>>2)]));
 $xr=$1187;
 $1188=$2;
 $1189=(($1188+76)|0);
 $1190=(+(HEAPF32[(($1189)>>2)]));
 $1191=$2;
 $1192=(($1191+44)|0);
 $1193=(+(HEAPF32[(($1192)>>2)]));
 $1194=($1193)-($1190);
 HEAPF32[(($1192)>>2)]=$1194;
 $1195=$xr;
 $1196=$2;
 $1197=(($1196+72)|0);
 $1198=(+(HEAPF32[(($1197)>>2)]));
 $1199=($1198)-($1195);
 HEAPF32[(($1197)>>2)]=$1199;
 $1200=$2;
 $1201=(($1200+120)|0);
 $1202=(+(HEAPF32[(($1201)>>2)]));
 $1203=$xr;
 $1204=($1202)-($1203);
 $1205=$2;
 $1206=(($1205+12)|0);
 HEAPF32[(($1206)>>2)]=$1204;
 $1207=$xr;
 $1208=$2;
 $1209=(($1208+120)|0);
 $1210=(+(HEAPF32[(($1209)>>2)]));
 $1211=($1210)+($1207);
 HEAPF32[(($1209)>>2)]=$1211;
 $1212=$2;
 $1213=(($1212+72)|0);
 $1214=(+(HEAPF32[(($1213)>>2)]));
 $xr=$1214;
 $1215=$2;
 $1216=(($1215+44)|0);
 $1217=(+(HEAPF32[(($1216)>>2)]));
 $1218=$2;
 $1219=(($1218+108)|0);
 $1220=(+(HEAPF32[(($1219)>>2)]));
 $1221=($1220)-($1217);
 HEAPF32[(($1219)>>2)]=$1221;
 $1222=$xr;
 $1223=$2;
 $1224=(($1223+76)|0);
 $1225=(+(HEAPF32[(($1224)>>2)]));
 $1226=($1225)-($1222);
 HEAPF32[(($1224)>>2)]=$1226;
 $1227=$2;
 $1228=(($1227+60)|0);
 $1229=(+(HEAPF32[(($1228)>>2)]));
 $1230=$xr;
 $1231=($1229)-($1230);
 $1232=$2;
 $1233=(($1232+72)|0);
 HEAPF32[(($1233)>>2)]=$1231;
 $1234=$xr;
 $1235=$2;
 $1236=(($1235+60)|0);
 $1237=(+(HEAPF32[(($1236)>>2)]));
 $1238=($1237)+($1234);
 HEAPF32[(($1236)>>2)]=$1238;
 $1239=$2;
 $1240=(($1239+76)|0);
 $1241=(+(HEAPF32[(($1240)>>2)]));
 $xr=$1241;
 $1242=$xr;
 $1243=$2;
 $1244=(($1243+40)|0);
 $1245=(+(HEAPF32[(($1244)>>2)]));
 $1246=($1245)-($1242);
 HEAPF32[(($1244)>>2)]=$1246;
 $1247=$2;
 $1248=(($1247+56)|0);
 $1249=(+(HEAPF32[(($1248)>>2)]));
 $1250=$xr;
 $1251=($1249)-($1250);
 $1252=$2;
 $1253=(($1252+76)|0);
 HEAPF32[(($1253)>>2)]=$1251;
 $1254=$xr;
 $1255=$2;
 $1256=(($1255+56)|0);
 $1257=(+(HEAPF32[(($1256)>>2)]));
 $1258=($1257)+($1254);
 HEAPF32[(($1256)>>2)]=$1258;
 $1259=$2;
 $1260=(($1259+40)|0);
 $1261=(+(HEAPF32[(($1260)>>2)]));
 $xr=$1261;
 $1262=$xr;
 $1263=$2;
 $1264=(($1263+44)|0);
 $1265=(+(HEAPF32[(($1264)>>2)]));
 $1266=($1265)-($1262);
 HEAPF32[(($1264)>>2)]=$1266;
 $1267=$2;
 $1268=(($1267+92)|0);
 $1269=(+(HEAPF32[(($1268)>>2)]));
 $1270=$xr;
 $1271=($1269)-($1270);
 $1272=$2;
 $1273=(($1272+40)|0);
 HEAPF32[(($1273)>>2)]=$1271;
 $1274=$xr;
 $1275=$2;
 $1276=(($1275+92)|0);
 $1277=(+(HEAPF32[(($1276)>>2)]));
 $1278=($1277)+($1274);
 HEAPF32[(($1276)>>2)]=$1278;
 $1279=$2;
 $1280=(($1279+44)|0);
 $1281=(+(HEAPF32[(($1280)>>2)]));
 $xr=$1281;
 $1282=$xr;
 $1283=$2;
 $1284=(($1283+104)|0);
 $1285=(+(HEAPF32[(($1284)>>2)]));
 $1286=($1285)-($1282);
 HEAPF32[(($1284)>>2)]=$1286;
 $1287=$2;
 $1288=(($1287+88)|0);
 $1289=(+(HEAPF32[(($1288)>>2)]));
 $1290=$xr;
 $1291=($1289)-($1290);
 $1292=$2;
 $1293=(($1292+44)|0);
 HEAPF32[(($1293)>>2)]=$1291;
 $1294=$xr;
 $1295=$2;
 $1296=(($1295+88)|0);
 $1297=(+(HEAPF32[(($1296)>>2)]));
 $1298=($1297)+($1294);
 HEAPF32[(($1296)>>2)]=$1298;
 $1299=$2;
 $1300=(($1299+104)|0);
 $1301=(+(HEAPF32[(($1300)>>2)]));
 $xr=$1301;
 $1302=$xr;
 $1303=$2;
 $1304=(($1303+108)|0);
 $1305=(+(HEAPF32[(($1304)>>2)]));
 $1306=($1305)-($1302);
 HEAPF32[(($1304)>>2)]=$1306;
 $1307=$2;
 $1308=(($1307+28)|0);
 $1309=(+(HEAPF32[(($1308)>>2)]));
 $1310=$xr;
 $1311=($1309)-($1310);
 $1312=$2;
 $1313=(($1312+104)|0);
 HEAPF32[(($1313)>>2)]=$1311;
 $1314=$xr;
 $1315=$2;
 $1316=(($1315+28)|0);
 $1317=(+(HEAPF32[(($1316)>>2)]));
 $1318=($1317)+($1314);
 HEAPF32[(($1316)>>2)]=$1318;
 $1319=$2;
 $1320=(($1319+108)|0);
 $1321=(+(HEAPF32[(($1320)>>2)]));
 $xr=$1321;
 $1322=$2;
 $1323=(($1322+24)|0);
 $1324=(+(HEAPF32[(($1323)>>2)]));
 $1325=$xr;
 $1326=($1324)-($1325);
 $1327=$2;
 $1328=(($1327+108)|0);
 HEAPF32[(($1328)>>2)]=$1326;
 $1329=$xr;
 $1330=$2;
 $1331=(($1330+24)|0);
 $1332=(+(HEAPF32[(($1331)>>2)]));
 $1333=($1332)+($1329);
 HEAPF32[(($1331)>>2)]=$1333;
 $1334=$2;
 $1335=(($1334)|0);
 $1336=(+(HEAPF32[(($1335)>>2)]));
 $1337=$2;
 $1338=(($1337+16)|0);
 $1339=(+(HEAPF32[(($1338)>>2)]));
 $1340=($1336)-($1339);
 $1341=$1340;
 $1342=((1.4142135623730951))*($1341);
 $1343=$1342;
 $xr=$1343;
 $1344=$2;
 $1345=(($1344+16)|0);
 $1346=(+(HEAPF32[(($1345)>>2)]));
 $1347=$2;
 $1348=(($1347)|0);
 $1349=(+(HEAPF32[(($1348)>>2)]));
 $1350=($1349)+($1346);
 HEAPF32[(($1348)>>2)]=$1350;
 $1351=$xr;
 $1352=$2;
 $1353=(($1352+16)|0);
 HEAPF32[(($1353)>>2)]=$1351;
 $1354=$2;
 $1355=(($1354+4)|0);
 $1356=(+(HEAPF32[(($1355)>>2)]));
 $1357=$2;
 $1358=(($1357+20)|0);
 $1359=(+(HEAPF32[(($1358)>>2)]));
 $1360=($1356)-($1359);
 $1361=$1360;
 $1362=((1.4142135623730951))*($1361);
 $1363=$1362;
 $xr=$1363;
 $1364=$2;
 $1365=(($1364+20)|0);
 $1366=(+(HEAPF32[(($1365)>>2)]));
 $1367=$2;
 $1368=(($1367+4)|0);
 $1369=(+(HEAPF32[(($1368)>>2)]));
 $1370=($1369)+($1366);
 HEAPF32[(($1368)>>2)]=$1370;
 $1371=$xr;
 $1372=$2;
 $1373=(($1372+20)|0);
 HEAPF32[(($1373)>>2)]=$1371;
 $1374=$2;
 $1375=(($1374+64)|0);
 $1376=(+(HEAPF32[(($1375)>>2)]));
 $1377=$2;
 $1378=(($1377+80)|0);
 $1379=(+(HEAPF32[(($1378)>>2)]));
 $1380=($1376)-($1379);
 $1381=$1380;
 $1382=((1.4142135623730951))*($1381);
 $1383=$1382;
 $xr=$1383;
 $1384=$2;
 $1385=(($1384+80)|0);
 $1386=(+(HEAPF32[(($1385)>>2)]));
 $1387=$2;
 $1388=(($1387+64)|0);
 $1389=(+(HEAPF32[(($1388)>>2)]));
 $1390=($1389)+($1386);
 HEAPF32[(($1388)>>2)]=$1390;
 $1391=$xr;
 $1392=$2;
 $1393=(($1392+80)|0);
 HEAPF32[(($1393)>>2)]=$1391;
 $1394=$2;
 $1395=(($1394+68)|0);
 $1396=(+(HEAPF32[(($1395)>>2)]));
 $1397=$2;
 $1398=(($1397+84)|0);
 $1399=(+(HEAPF32[(($1398)>>2)]));
 $1400=($1396)-($1399);
 $1401=$1400;
 $1402=((1.4142135623730951))*($1401);
 $1403=$1402;
 $xr=$1403;
 $1404=$2;
 $1405=(($1404+84)|0);
 $1406=(+(HEAPF32[(($1405)>>2)]));
 $1407=$2;
 $1408=(($1407+68)|0);
 $1409=(+(HEAPF32[(($1408)>>2)]));
 $1410=($1409)+($1406);
 HEAPF32[(($1408)>>2)]=$1410;
 $1411=$xr;
 $1412=$2;
 $1413=(($1412+84)|0);
 HEAPF32[(($1413)>>2)]=$1411;
 $1414=$2;
 $1415=(($1414+32)|0);
 $1416=(+(HEAPF32[(($1415)>>2)]));
 $1417=$2;
 $1418=(($1417+48)|0);
 $1419=(+(HEAPF32[(($1418)>>2)]));
 $1420=($1416)-($1419);
 $1421=$1420;
 $1422=((-1.4142135623730951))*($1421);
 $1423=$1422;
 $xr=$1423;
 $1424=$2;
 $1425=(($1424+48)|0);
 $1426=(+(HEAPF32[(($1425)>>2)]));
 $1427=$2;
 $1428=(($1427+32)|0);
 $1429=(+(HEAPF32[(($1428)>>2)]));
 $1430=($1429)+($1426);
 HEAPF32[(($1428)>>2)]=$1430;
 $1431=$xr;
 $1432=$2;
 $1433=(($1432+32)|0);
 $1434=(+(HEAPF32[(($1433)>>2)]));
 $1435=($1431)-($1434);
 $1436=$2;
 $1437=(($1436+48)|0);
 HEAPF32[(($1437)>>2)]=$1435;
 $1438=$2;
 $1439=(($1438+36)|0);
 $1440=(+(HEAPF32[(($1439)>>2)]));
 $1441=$2;
 $1442=(($1441+52)|0);
 $1443=(+(HEAPF32[(($1442)>>2)]));
 $1444=($1440)-($1443);
 $1445=$1444;
 $1446=((-1.4142135623730951))*($1445);
 $1447=$1446;
 $xr=$1447;
 $1448=$2;
 $1449=(($1448+52)|0);
 $1450=(+(HEAPF32[(($1449)>>2)]));
 $1451=$2;
 $1452=(($1451+36)|0);
 $1453=(+(HEAPF32[(($1452)>>2)]));
 $1454=($1453)+($1450);
 HEAPF32[(($1452)>>2)]=$1454;
 $1455=$xr;
 $1456=$2;
 $1457=(($1456+36)|0);
 $1458=(+(HEAPF32[(($1457)>>2)]));
 $1459=($1455)-($1458);
 $1460=$2;
 $1461=(($1460+52)|0);
 HEAPF32[(($1461)>>2)]=$1459;
 $1462=$2;
 $1463=(($1462+100)|0);
 $1464=(+(HEAPF32[(($1463)>>2)]));
 $1465=$2;
 $1466=(($1465+116)|0);
 $1467=(+(HEAPF32[(($1466)>>2)]));
 $1468=($1464)-($1467);
 $1469=$1468;
 $1470=((-1.4142135623730951))*($1469);
 $1471=$1470;
 $xr=$1471;
 $1472=$2;
 $1473=(($1472+116)|0);
 $1474=(+(HEAPF32[(($1473)>>2)]));
 $1475=$2;
 $1476=(($1475+100)|0);
 $1477=(+(HEAPF32[(($1476)>>2)]));
 $1478=($1477)+($1474);
 HEAPF32[(($1476)>>2)]=$1478;
 $1479=$xr;
 $1480=$2;
 $1481=(($1480+100)|0);
 $1482=(+(HEAPF32[(($1481)>>2)]));
 $1483=($1479)-($1482);
 $1484=$2;
 $1485=(($1484+116)|0);
 HEAPF32[(($1485)>>2)]=$1483;
 $1486=$2;
 $1487=(($1486+96)|0);
 $1488=(+(HEAPF32[(($1487)>>2)]));
 $1489=$2;
 $1490=(($1489+112)|0);
 $1491=(+(HEAPF32[(($1490)>>2)]));
 $1492=($1488)+($1491);
 $1493=$1492;
 $1494=((-1.4142135623730951))*($1493);
 $1495=$1494;
 $xr=$1495;
 $1496=$2;
 $1497=(($1496+112)|0);
 $1498=(+(HEAPF32[(($1497)>>2)]));
 $1499=$2;
 $1500=(($1499+96)|0);
 $1501=(+(HEAPF32[(($1500)>>2)]));
 $1502=($1501)-($1498);
 HEAPF32[(($1500)>>2)]=$1502;
 $1503=$xr;
 $1504=$2;
 $1505=(($1504+96)|0);
 $1506=(+(HEAPF32[(($1505)>>2)]));
 $1507=($1503)-($1506);
 $1508=$2;
 $1509=(($1508+112)|0);
 HEAPF32[(($1509)>>2)]=$1507;
 $1510=$2;
 $1511=(($1510+96)|0);
 $1512=(+(HEAPF32[(($1511)>>2)]));
 $1513=$2;
 $1514=(($1513+64)|0);
 $1515=(+(HEAPF32[(($1514)>>2)]));
 $1516=($1512)-($1515);
 $xr=$1516;
 $1517=$xr;
 $1518=$2;
 $1519=(($1518+96)|0);
 HEAPF32[(($1519)>>2)]=$1517;
 $1520=$2;
 $1521=(($1520+80)|0);
 $1522=(+(HEAPF32[(($1521)>>2)]));
 $1523=$xr;
 $1524=($1522)-($1523);
 $xr=$1524;
 $1525=$xr;
 $1526=$2;
 $1527=(($1526+80)|0);
 HEAPF32[(($1527)>>2)]=$1525;
 $1528=$2;
 $1529=(($1528+112)|0);
 $1530=(+(HEAPF32[(($1529)>>2)]));
 $1531=$xr;
 $1532=($1530)-($1531);
 $xr=$1532;
 $1533=$xr;
 $1534=$2;
 $1535=(($1534+112)|0);
 HEAPF32[(($1535)>>2)]=$1533;
 $1536=$2;
 $1537=(($1536+100)|0);
 $1538=(+(HEAPF32[(($1537)>>2)]));
 $1539=$2;
 $1540=(($1539+68)|0);
 $1541=(+(HEAPF32[(($1540)>>2)]));
 $1542=($1538)-($1541);
 $xr=$1542;
 $1543=$xr;
 $1544=$2;
 $1545=(($1544+100)|0);
 HEAPF32[(($1545)>>2)]=$1543;
 $1546=$2;
 $1547=(($1546+84)|0);
 $1548=(+(HEAPF32[(($1547)>>2)]));
 $1549=$xr;
 $1550=($1548)-($1549);
 $xr=$1550;
 $1551=$xr;
 $1552=$2;
 $1553=(($1552+84)|0);
 HEAPF32[(($1553)>>2)]=$1551;
 $1554=$2;
 $1555=(($1554+116)|0);
 $1556=(+(HEAPF32[(($1555)>>2)]));
 $1557=$xr;
 $1558=($1556)-($1557);
 $xr=$1558;
 $1559=$xr;
 $1560=$2;
 $1561=(($1560+116)|0);
 HEAPF32[(($1561)>>2)]=$1559;
 $1562=$2;
 $1563=(($1562+68)|0);
 $1564=(+(HEAPF32[(($1563)>>2)]));
 $1565=$2;
 $1566=(($1565+4)|0);
 $1567=(+(HEAPF32[(($1566)>>2)]));
 $1568=($1564)-($1567);
 $xr=$1568;
 $1569=$xr;
 $1570=$2;
 $1571=(($1570+68)|0);
 HEAPF32[(($1571)>>2)]=$1569;
 $1572=$2;
 $1573=(($1572+36)|0);
 $1574=(+(HEAPF32[(($1573)>>2)]));
 $1575=$xr;
 $1576=($1574)-($1575);
 $xr=$1576;
 $1577=$xr;
 $1578=$2;
 $1579=(($1578+36)|0);
 HEAPF32[(($1579)>>2)]=$1577;
 $1580=$2;
 $1581=(($1580+100)|0);
 $1582=(+(HEAPF32[(($1581)>>2)]));
 $1583=$xr;
 $1584=($1582)-($1583);
 $xr=$1584;
 $1585=$xr;
 $1586=$2;
 $1587=(($1586+100)|0);
 HEAPF32[(($1587)>>2)]=$1585;
 $1588=$2;
 $1589=(($1588+20)|0);
 $1590=(+(HEAPF32[(($1589)>>2)]));
 $1591=$xr;
 $1592=($1590)-($1591);
 $xr=$1592;
 $1593=$xr;
 $1594=$2;
 $1595=(($1594+20)|0);
 HEAPF32[(($1595)>>2)]=$1593;
 $1596=$2;
 $1597=(($1596+84)|0);
 $1598=(+(HEAPF32[(($1597)>>2)]));
 $1599=$xr;
 $1600=($1598)-($1599);
 $xr=$1600;
 $1601=$xr;
 $1602=$2;
 $1603=(($1602+84)|0);
 HEAPF32[(($1603)>>2)]=$1601;
 $1604=$2;
 $1605=(($1604+52)|0);
 $1606=(+(HEAPF32[(($1605)>>2)]));
 $1607=$xr;
 $1608=($1606)-($1607);
 $xr=$1608;
 $1609=$xr;
 $1610=$2;
 $1611=(($1610+52)|0);
 HEAPF32[(($1611)>>2)]=$1609;
 $1612=$2;
 $1613=(($1612+116)|0);
 $1614=(+(HEAPF32[(($1613)>>2)]));
 $1615=$xr;
 $1616=($1614)-($1615);
 $xr=$1616;
 $1617=$xr;
 $1618=$2;
 $1619=(($1618+116)|0);
 HEAPF32[(($1619)>>2)]=$1617;
 $1620=$2;
 $1621=(($1620+4)|0);
 $1622=(+(HEAPF32[(($1621)>>2)]));
 $1623=$2;
 $1624=(($1623)|0);
 $1625=(+(HEAPF32[(($1624)>>2)]));
 $1626=($1622)-($1625);
 $xr=$1626;
 $1627=$xr;
 $1628=$2;
 $1629=(($1628+4)|0);
 HEAPF32[(($1629)>>2)]=$1627;
 $1630=$2;
 $1631=(($1630+64)|0);
 $1632=(+(HEAPF32[(($1631)>>2)]));
 $1633=$xr;
 $1634=($1632)-($1633);
 $xr=$1634;
 $1635=$xr;
 $1636=$2;
 $1637=(($1636+64)|0);
 HEAPF32[(($1637)>>2)]=$1635;
 $1638=$2;
 $1639=(($1638+68)|0);
 $1640=(+(HEAPF32[(($1639)>>2)]));
 $1641=$xr;
 $1642=($1640)-($1641);
 $xr=$1642;
 $1643=$xr;
 $1644=$2;
 $1645=(($1644+68)|0);
 HEAPF32[(($1645)>>2)]=$1643;
 $1646=$2;
 $1647=(($1646+32)|0);
 $1648=(+(HEAPF32[(($1647)>>2)]));
 $1649=$xr;
 $1650=($1648)-($1649);
 $xr=$1650;
 $1651=$xr;
 $1652=$2;
 $1653=(($1652+32)|0);
 HEAPF32[(($1653)>>2)]=$1651;
 $1654=$2;
 $1655=(($1654+36)|0);
 $1656=(+(HEAPF32[(($1655)>>2)]));
 $1657=$xr;
 $1658=($1656)-($1657);
 $xr=$1658;
 $1659=$xr;
 $1660=$2;
 $1661=(($1660+36)|0);
 HEAPF32[(($1661)>>2)]=$1659;
 $1662=$2;
 $1663=(($1662+96)|0);
 $1664=(+(HEAPF32[(($1663)>>2)]));
 $1665=$xr;
 $1666=($1664)-($1665);
 $xr=$1666;
 $1667=$xr;
 $1668=$2;
 $1669=(($1668+96)|0);
 HEAPF32[(($1669)>>2)]=$1667;
 $1670=$2;
 $1671=(($1670+100)|0);
 $1672=(+(HEAPF32[(($1671)>>2)]));
 $1673=$xr;
 $1674=($1672)-($1673);
 $xr=$1674;
 $1675=$xr;
 $1676=$2;
 $1677=(($1676+100)|0);
 HEAPF32[(($1677)>>2)]=$1675;
 $1678=$2;
 $1679=(($1678+16)|0);
 $1680=(+(HEAPF32[(($1679)>>2)]));
 $1681=$xr;
 $1682=($1680)-($1681);
 $xr=$1682;
 $1683=$xr;
 $1684=$2;
 $1685=(($1684+16)|0);
 HEAPF32[(($1685)>>2)]=$1683;
 $1686=$2;
 $1687=(($1686+20)|0);
 $1688=(+(HEAPF32[(($1687)>>2)]));
 $1689=$xr;
 $1690=($1688)-($1689);
 $xr=$1690;
 $1691=$xr;
 $1692=$2;
 $1693=(($1692+20)|0);
 HEAPF32[(($1693)>>2)]=$1691;
 $1694=$2;
 $1695=(($1694+80)|0);
 $1696=(+(HEAPF32[(($1695)>>2)]));
 $1697=$xr;
 $1698=($1696)-($1697);
 $xr=$1698;
 $1699=$xr;
 $1700=$2;
 $1701=(($1700+80)|0);
 HEAPF32[(($1701)>>2)]=$1699;
 $1702=$2;
 $1703=(($1702+84)|0);
 $1704=(+(HEAPF32[(($1703)>>2)]));
 $1705=$xr;
 $1706=($1704)-($1705);
 $xr=$1706;
 $1707=$xr;
 $1708=$2;
 $1709=(($1708+84)|0);
 HEAPF32[(($1709)>>2)]=$1707;
 $1710=$2;
 $1711=(($1710+48)|0);
 $1712=(+(HEAPF32[(($1711)>>2)]));
 $1713=$xr;
 $1714=($1712)-($1713);
 $xr=$1714;
 $1715=$xr;
 $1716=$2;
 $1717=(($1716+48)|0);
 HEAPF32[(($1717)>>2)]=$1715;
 $1718=$2;
 $1719=(($1718+52)|0);
 $1720=(+(HEAPF32[(($1719)>>2)]));
 $1721=$xr;
 $1722=($1720)-($1721);
 $xr=$1722;
 $1723=$xr;
 $1724=$2;
 $1725=(($1724+52)|0);
 HEAPF32[(($1725)>>2)]=$1723;
 $1726=$2;
 $1727=(($1726+112)|0);
 $1728=(+(HEAPF32[(($1727)>>2)]));
 $1729=$xr;
 $1730=($1728)-($1729);
 $xr=$1730;
 $1731=$xr;
 $1732=$2;
 $1733=(($1732+112)|0);
 HEAPF32[(($1733)>>2)]=$1731;
 $1734=$2;
 $1735=(($1734+116)|0);
 $1736=(+(HEAPF32[(($1735)>>2)]));
 $1737=$xr;
 $1738=($1736)-($1737);
 $xr=$1738;
 $1739=$xr;
 $1740=$2;
 $1741=(($1740+116)|0);
 HEAPF32[(($1741)>>2)]=$1739;
 $1742=$2;
 $1743=(($1742)|0);
 $1744=(+(HEAPF32[(($1743)>>2)]));
 $xr=$1744;
 $1745=$2;
 $1746=(($1745+124)|0);
 $1747=(+(HEAPF32[(($1746)>>2)]));
 $1748=$2;
 $1749=(($1748)|0);
 $1750=(+(HEAPF32[(($1749)>>2)]));
 $1751=($1750)+($1747);
 HEAPF32[(($1749)>>2)]=$1751;
 $1752=$xr;
 $1753=$2;
 $1754=(($1753+124)|0);
 $1755=(+(HEAPF32[(($1754)>>2)]));
 $1756=($1755)-($1752);
 HEAPF32[(($1754)>>2)]=$1756;
 $1757=$2;
 $1758=(($1757+4)|0);
 $1759=(+(HEAPF32[(($1758)>>2)]));
 $xr=$1759;
 $1760=$2;
 $1761=(($1760+120)|0);
 $1762=(+(HEAPF32[(($1761)>>2)]));
 $1763=$2;
 $1764=(($1763+4)|0);
 $1765=(+(HEAPF32[(($1764)>>2)]));
 $1766=($1765)+($1762);
 HEAPF32[(($1764)>>2)]=$1766;
 $1767=$xr;
 $1768=$2;
 $1769=(($1768+120)|0);
 $1770=(+(HEAPF32[(($1769)>>2)]));
 $1771=($1770)-($1767);
 HEAPF32[(($1769)>>2)]=$1771;
 $1772=$2;
 $1773=(($1772+64)|0);
 $1774=(+(HEAPF32[(($1773)>>2)]));
 $xr=$1774;
 $1775=$2;
 $1776=(($1775+60)|0);
 $1777=(+(HEAPF32[(($1776)>>2)]));
 $1778=$2;
 $1779=(($1778+64)|0);
 $1780=(+(HEAPF32[(($1779)>>2)]));
 $1781=($1780)+($1777);
 HEAPF32[(($1779)>>2)]=$1781;
 $1782=$xr;
 $1783=$2;
 $1784=(($1783+60)|0);
 $1785=(+(HEAPF32[(($1784)>>2)]));
 $1786=($1785)-($1782);
 HEAPF32[(($1784)>>2)]=$1786;
 $1787=$2;
 $1788=(($1787+68)|0);
 $1789=(+(HEAPF32[(($1788)>>2)]));
 $xr=$1789;
 $1790=$2;
 $1791=(($1790+56)|0);
 $1792=(+(HEAPF32[(($1791)>>2)]));
 $1793=$2;
 $1794=(($1793+68)|0);
 $1795=(+(HEAPF32[(($1794)>>2)]));
 $1796=($1795)+($1792);
 HEAPF32[(($1794)>>2)]=$1796;
 $1797=$xr;
 $1798=$2;
 $1799=(($1798+56)|0);
 $1800=(+(HEAPF32[(($1799)>>2)]));
 $1801=($1800)-($1797);
 HEAPF32[(($1799)>>2)]=$1801;
 $1802=$2;
 $1803=(($1802+32)|0);
 $1804=(+(HEAPF32[(($1803)>>2)]));
 $xr=$1804;
 $1805=$2;
 $1806=(($1805+92)|0);
 $1807=(+(HEAPF32[(($1806)>>2)]));
 $1808=$2;
 $1809=(($1808+32)|0);
 $1810=(+(HEAPF32[(($1809)>>2)]));
 $1811=($1810)+($1807);
 HEAPF32[(($1809)>>2)]=$1811;
 $1812=$xr;
 $1813=$2;
 $1814=(($1813+92)|0);
 $1815=(+(HEAPF32[(($1814)>>2)]));
 $1816=($1815)-($1812);
 HEAPF32[(($1814)>>2)]=$1816;
 $1817=$2;
 $1818=(($1817+36)|0);
 $1819=(+(HEAPF32[(($1818)>>2)]));
 $xr=$1819;
 $1820=$2;
 $1821=(($1820+88)|0);
 $1822=(+(HEAPF32[(($1821)>>2)]));
 $1823=$2;
 $1824=(($1823+36)|0);
 $1825=(+(HEAPF32[(($1824)>>2)]));
 $1826=($1825)+($1822);
 HEAPF32[(($1824)>>2)]=$1826;
 $1827=$xr;
 $1828=$2;
 $1829=(($1828+88)|0);
 $1830=(+(HEAPF32[(($1829)>>2)]));
 $1831=($1830)-($1827);
 HEAPF32[(($1829)>>2)]=$1831;
 $1832=$2;
 $1833=(($1832+96)|0);
 $1834=(+(HEAPF32[(($1833)>>2)]));
 $xr=$1834;
 $1835=$2;
 $1836=(($1835+28)|0);
 $1837=(+(HEAPF32[(($1836)>>2)]));
 $1838=$2;
 $1839=(($1838+96)|0);
 $1840=(+(HEAPF32[(($1839)>>2)]));
 $1841=($1840)+($1837);
 HEAPF32[(($1839)>>2)]=$1841;
 $1842=$xr;
 $1843=$2;
 $1844=(($1843+28)|0);
 $1845=(+(HEAPF32[(($1844)>>2)]));
 $1846=($1845)-($1842);
 HEAPF32[(($1844)>>2)]=$1846;
 $1847=$2;
 $1848=(($1847+100)|0);
 $1849=(+(HEAPF32[(($1848)>>2)]));
 $xr=$1849;
 $1850=$2;
 $1851=(($1850+24)|0);
 $1852=(+(HEAPF32[(($1851)>>2)]));
 $1853=$2;
 $1854=(($1853+100)|0);
 $1855=(+(HEAPF32[(($1854)>>2)]));
 $1856=($1855)+($1852);
 HEAPF32[(($1854)>>2)]=$1856;
 $1857=$xr;
 $1858=$2;
 $1859=(($1858+24)|0);
 $1860=(+(HEAPF32[(($1859)>>2)]));
 $1861=($1860)-($1857);
 HEAPF32[(($1859)>>2)]=$1861;
 $1862=$2;
 $1863=(($1862+16)|0);
 $1864=(+(HEAPF32[(($1863)>>2)]));
 $xr=$1864;
 $1865=$2;
 $1866=(($1865+108)|0);
 $1867=(+(HEAPF32[(($1866)>>2)]));
 $1868=$2;
 $1869=(($1868+16)|0);
 $1870=(+(HEAPF32[(($1869)>>2)]));
 $1871=($1870)+($1867);
 HEAPF32[(($1869)>>2)]=$1871;
 $1872=$xr;
 $1873=$2;
 $1874=(($1873+108)|0);
 $1875=(+(HEAPF32[(($1874)>>2)]));
 $1876=($1875)-($1872);
 HEAPF32[(($1874)>>2)]=$1876;
 $1877=$2;
 $1878=(($1877+20)|0);
 $1879=(+(HEAPF32[(($1878)>>2)]));
 $xr=$1879;
 $1880=$2;
 $1881=(($1880+104)|0);
 $1882=(+(HEAPF32[(($1881)>>2)]));
 $1883=$2;
 $1884=(($1883+20)|0);
 $1885=(+(HEAPF32[(($1884)>>2)]));
 $1886=($1885)+($1882);
 HEAPF32[(($1884)>>2)]=$1886;
 $1887=$xr;
 $1888=$2;
 $1889=(($1888+104)|0);
 $1890=(+(HEAPF32[(($1889)>>2)]));
 $1891=($1890)-($1887);
 HEAPF32[(($1889)>>2)]=$1891;
 $1892=$2;
 $1893=(($1892+80)|0);
 $1894=(+(HEAPF32[(($1893)>>2)]));
 $xr=$1894;
 $1895=$2;
 $1896=(($1895+44)|0);
 $1897=(+(HEAPF32[(($1896)>>2)]));
 $1898=$2;
 $1899=(($1898+80)|0);
 $1900=(+(HEAPF32[(($1899)>>2)]));
 $1901=($1900)+($1897);
 HEAPF32[(($1899)>>2)]=$1901;
 $1902=$xr;
 $1903=$2;
 $1904=(($1903+44)|0);
 $1905=(+(HEAPF32[(($1904)>>2)]));
 $1906=($1905)-($1902);
 HEAPF32[(($1904)>>2)]=$1906;
 $1907=$2;
 $1908=(($1907+84)|0);
 $1909=(+(HEAPF32[(($1908)>>2)]));
 $xr=$1909;
 $1910=$2;
 $1911=(($1910+40)|0);
 $1912=(+(HEAPF32[(($1911)>>2)]));
 $1913=$2;
 $1914=(($1913+84)|0);
 $1915=(+(HEAPF32[(($1914)>>2)]));
 $1916=($1915)+($1912);
 HEAPF32[(($1914)>>2)]=$1916;
 $1917=$xr;
 $1918=$2;
 $1919=(($1918+40)|0);
 $1920=(+(HEAPF32[(($1919)>>2)]));
 $1921=($1920)-($1917);
 HEAPF32[(($1919)>>2)]=$1921;
 $1922=$2;
 $1923=(($1922+48)|0);
 $1924=(+(HEAPF32[(($1923)>>2)]));
 $xr=$1924;
 $1925=$2;
 $1926=(($1925+76)|0);
 $1927=(+(HEAPF32[(($1926)>>2)]));
 $1928=$2;
 $1929=(($1928+48)|0);
 $1930=(+(HEAPF32[(($1929)>>2)]));
 $1931=($1930)+($1927);
 HEAPF32[(($1929)>>2)]=$1931;
 $1932=$xr;
 $1933=$2;
 $1934=(($1933+76)|0);
 $1935=(+(HEAPF32[(($1934)>>2)]));
 $1936=($1935)-($1932);
 HEAPF32[(($1934)>>2)]=$1936;
 $1937=$2;
 $1938=(($1937+52)|0);
 $1939=(+(HEAPF32[(($1938)>>2)]));
 $xr=$1939;
 $1940=$2;
 $1941=(($1940+72)|0);
 $1942=(+(HEAPF32[(($1941)>>2)]));
 $1943=$2;
 $1944=(($1943+52)|0);
 $1945=(+(HEAPF32[(($1944)>>2)]));
 $1946=($1945)+($1942);
 HEAPF32[(($1944)>>2)]=$1946;
 $1947=$xr;
 $1948=$2;
 $1949=(($1948+72)|0);
 $1950=(+(HEAPF32[(($1949)>>2)]));
 $1951=($1950)-($1947);
 HEAPF32[(($1949)>>2)]=$1951;
 $1952=$2;
 $1953=(($1952+112)|0);
 $1954=(+(HEAPF32[(($1953)>>2)]));
 $xr=$1954;
 $1955=$2;
 $1956=(($1955+12)|0);
 $1957=(+(HEAPF32[(($1956)>>2)]));
 $1958=$2;
 $1959=(($1958+112)|0);
 $1960=(+(HEAPF32[(($1959)>>2)]));
 $1961=($1960)+($1957);
 HEAPF32[(($1959)>>2)]=$1961;
 $1962=$xr;
 $1963=$2;
 $1964=(($1963+12)|0);
 $1965=(+(HEAPF32[(($1964)>>2)]));
 $1966=($1965)-($1962);
 HEAPF32[(($1964)>>2)]=$1966;
 $1967=$2;
 $1968=(($1967+116)|0);
 $1969=(+(HEAPF32[(($1968)>>2)]));
 $xr=$1969;
 $1970=$2;
 $1971=(($1970+8)|0);
 $1972=(+(HEAPF32[(($1971)>>2)]));
 $1973=$2;
 $1974=(($1973+116)|0);
 $1975=(+(HEAPF32[(($1974)>>2)]));
 $1976=($1975)+($1972);
 HEAPF32[(($1974)>>2)]=$1976;
 $1977=$xr;
 $1978=$2;
 $1979=(($1978+8)|0);
 $1980=(+(HEAPF32[(($1979)>>2)]));
 $1981=($1980)-($1977);
 HEAPF32[(($1979)>>2)]=$1981;
 STACKTOP=sp;return;
}


function _mdct_short($inout){
 $inout=($inout)|0;
 var $1=0,$l=0,$tc0=.0,$tc1=.0,$tc2=.0,$ts0=.0,$ts1=.0,$ts2=.0,$3=0,$4=0,$6=0,$7=0,$8=.0,$9=.0,$10=.0,$11=0,$12=0,$13=.0,$14=.0,$15=0;
 var $16=0,$17=.0,$18=.0,$19=.0,$20=0,$21=0,$22=.0,$23=.0,$24=.0,$25=.0,$26=.0,$27=.0,$28=.0,$29=.0,$30=0,$31=0,$32=.0,$33=.0,$34=.0,$35=0;
 var $36=0,$37=.0,$38=.0,$39=0,$40=0,$41=.0,$42=.0,$43=.0,$44=0,$45=0,$46=.0,$47=.0,$48=.0,$49=.0,$50=.0,$51=.0,$52=.0,$53=.0,$54=.0,$55=0;
 var $56=0,$57=.0,$58=.0,$59=.0,$60=0,$61=0,$62=.0,$63=.0,$64=.0,$65=.0,$66=.0,$67=0,$68=0,$69=.0,$70=.0,$71=.0,$72=0,$73=0,$74=.0,$75=.0;
 var $76=.0,$77=.0,$78=.0,$79=.0,$80=.0,$81=.0,$82=.0,$83=.0,$84=.0,$85=.0,$86=0,$87=0,$88=.0,$89=.0,$90=.0,$91=.0,$92=.0,$93=.0,$94=.0,$95=.0;
 var $96=0,$97=0,$98=.0,$99=.0,$100=.0,$101=.0,$102=.0,$103=.0,$104=.0,$105=.0,$106=.0,$107=.0,$108=.0,$109=.0,$110=.0,$111=.0,$112=.0,$113=.0,$114=0,$115=0;
 var $116=.0,$117=.0,$118=.0,$119=0,$120=0,$121=.0,$122=.0,$123=.0,$124=.0,$125=.0,$126=.0,$127=.0,$128=.0,$129=.0,$130=.0,$131=.0,$132=.0,$133=.0,$134=.0,$135=.0;
 var $136=.0,$137=0,$138=0,$139=.0,$140=.0,$141=.0,$142=0,$143=0,$144=0,$145=0,$147=0,$148=0,label=0;
 var sp=0;sp=STACKTOP;








 $1=$inout;
 $l=0;
 while(1) {
  $3=$l;
  $4=($3|0)<3;
  if (!($4)) {
   break;
  }
  $6=$1;
  $7=(($6+24)|0);
  $8=(+(HEAPF32[(($7)>>2)]));
  $9=(+(HEAPF32[((296)>>2)]));
  $10=($8)*($9);
  $11=$1;
  $12=(($11+60)|0);
  $13=(+(HEAPF32[(($12)>>2)]));
  $14=($10)-($13);
  $ts0=$14;
  $15=$1;
  $16=(($15)|0);
  $17=(+(HEAPF32[(($16)>>2)]));
  $18=(+(HEAPF32[((304)>>2)]));
  $19=($17)*($18);
  $20=$1;
  $21=(($20+36)|0);
  $22=(+(HEAPF32[(($21)>>2)]));
  $23=($19)-($22);
  $tc0=$23;
  $24=$ts0;
  $25=$tc0;
  $26=($24)+($25);
  $tc1=$26;
  $27=$ts0;
  $28=$tc0;
  $29=($27)-($28);
  $tc2=$29;
  $30=$1;
  $31=(($30+60)|0);
  $32=(+(HEAPF32[(($31)>>2)]));
  $33=(+(HEAPF32[((296)>>2)]));
  $34=($32)*($33);
  $35=$1;
  $36=(($35+24)|0);
  $37=(+(HEAPF32[(($36)>>2)]));
  $38=($34)+($37);
  $ts0=$38;
  $39=$1;
  $40=(($39+36)|0);
  $41=(+(HEAPF32[(($40)>>2)]));
  $42=(+(HEAPF32[((304)>>2)]));
  $43=($41)*($42);
  $44=$1;
  $45=(($44)|0);
  $46=(+(HEAPF32[(($45)>>2)]));
  $47=($43)+($46);
  $tc0=$47;
  $48=$ts0;
  $49=$tc0;
  $50=($48)+($49);
  $ts1=$50;
  $51=$ts0;
  $52=((-.0))-($51);
  $53=$tc0;
  $54=($52)+($53);
  $ts2=$54;
  $55=$1;
  $56=(($55+12)|0);
  $57=(+(HEAPF32[(($56)>>2)]));
  $58=(+(HEAPF32[((300)>>2)]));
  $59=($57)*($58);
  $60=$1;
  $61=(($60+48)|0);
  $62=(+(HEAPF32[(($61)>>2)]));
  $63=($59)-($62);
  $64=$63;
  $65=($64)*((2.069978111953089e-11));
  $66=$65;
  $tc0=$66;
  $67=$1;
  $68=(($67+48)|0);
  $69=(+(HEAPF32[(($68)>>2)]));
  $70=(+(HEAPF32[((300)>>2)]));
  $71=($69)*($70);
  $72=$1;
  $73=(($72+12)|0);
  $74=(+(HEAPF32[(($73)>>2)]));
  $75=($71)+($74);
  $76=$75;
  $77=($76)*((2.069978111953089e-11));
  $78=$77;
  $ts0=$78;
  $79=$tc1;
  $80=$79;
  $81=($80)*((1.90752519173728e-11));
  $82=$tc0;
  $83=$82;
  $84=($81)+($83);
  $85=$84;
  $86=$1;
  $87=(($86)|0);
  HEAPF32[(($87)>>2)]=$85;
  $88=$ts1;
  $89=((-.0))-($88);
  $90=$89;
  $91=($90)*((1.90752519173728e-11));
  $92=$ts0;
  $93=$92;
  $94=($91)+($93);
  $95=$94;
  $96=$1;
  $97=(($96+60)|0);
  HEAPF32[(($97)>>2)]=$95;
  $98=$tc2;
  $99=$98;
  $100=($99)*((0.8660254037844387));
  $101=($100)*((1.907525191737281e-11));
  $102=$101;
  $tc2=$102;
  $103=$ts1;
  $104=$103;
  $105=($104)*((0.5));
  $106=($105)*((1.907525191737281e-11));
  $107=$ts0;
  $108=$107;
  $109=($106)+($108);
  $110=$109;
  $ts1=$110;
  $111=$tc2;
  $112=$ts1;
  $113=($111)-($112);
  $114=$1;
  $115=(($114+12)|0);
  HEAPF32[(($115)>>2)]=$113;
  $116=$tc2;
  $117=$ts1;
  $118=($116)+($117);
  $119=$1;
  $120=(($119+24)|0);
  HEAPF32[(($120)>>2)]=$118;
  $121=$tc1;
  $122=$121;
  $123=($122)*((0.5));
  $124=($123)*((1.907525191737281e-11));
  $125=$tc0;
  $126=$125;
  $127=($124)-($126);
  $128=$127;
  $tc1=$128;
  $129=$ts2;
  $130=$129;
  $131=($130)*((0.8660254037844387));
  $132=($131)*((1.907525191737281e-11));
  $133=$132;
  $ts2=$133;
  $134=$tc1;
  $135=$ts2;
  $136=($134)+($135);
  $137=$1;
  $138=(($137+36)|0);
  HEAPF32[(($138)>>2)]=$136;
  $139=$tc1;
  $140=$ts2;
  $141=($139)-($140);
  $142=$1;
  $143=(($142+48)|0);
  HEAPF32[(($143)>>2)]=$141;
  $144=$1;
  $145=(($144+4)|0);
  $1=$145;
  $147=$l;
  $148=((($147)+(1))|0);
  $l=$148;
 }
 STACKTOP=sp;return;
}


function _mdct_long($out,$in){
 $out=($out)|0;
 $in=($in)|0;
 var $1=0,$2=0,$ct=.0,$st=.0,$tc1=.0,$tc2=.0,$tc3=.0,$tc4=.0,$ts5=.0,$ts6=.0,$ts7=.0,$ts8=.0,$ts1=.0,$ts2=.0,$ts3=.0,$ts4=.0,$tc5=.0,$tc6=.0,$tc7=.0,$tc8=.0;
 var $3=0,$4=0,$5=.0,$6=0,$7=0,$8=.0,$9=.0,$10=0,$11=0,$12=.0,$13=0,$14=0,$15=.0,$16=.0,$17=0,$18=0,$19=.0,$20=0,$21=0,$22=.0;
 var $23=.0,$24=0,$25=0,$26=.0,$27=0,$28=0,$29=.0,$30=.0,$31=0,$32=0,$33=.0,$34=0,$35=0,$36=.0,$37=.0,$38=0,$39=0,$40=.0,$41=0,$42=0;
 var $43=.0,$44=.0,$45=0,$46=0,$47=.0,$48=0,$49=0,$50=.0,$51=.0,$52=.0,$53=.0,$54=.0,$55=.0,$56=.0,$57=.0,$58=0,$59=0,$60=.0,$61=.0,$62=.0;
 var $63=0,$64=0,$65=.0,$66=.0,$67=.0,$68=.0,$69=.0,$70=.0,$71=.0,$72=.0,$73=0,$74=0,$75=.0,$76=.0,$77=.0,$78=.0,$79=.0,$80=.0,$81=.0,$82=.0;
 var $83=.0,$84=.0,$85=.0,$86=.0,$87=.0,$88=0,$89=0,$90=.0,$91=.0,$92=.0,$93=0,$94=0,$95=0,$96=0,$97=.0,$98=0,$99=0,$100=.0,$101=.0,$102=.0;
 var $103=.0,$104=.0,$105=.0,$106=.0,$107=0,$108=0,$109=.0,$110=.0,$111=.0,$112=.0,$113=.0,$114=.0,$115=.0,$116=.0,$117=.0,$118=.0,$119=.0,$120=.0,$121=.0,$122=.0;
 var $123=.0,$124=.0,$125=.0,$126=.0,$127=.0,$128=.0,$129=.0,$130=.0,$131=.0,$132=.0,$133=.0,$134=.0,$135=.0,$136=.0,$137=.0,$138=.0,$139=.0,$140=.0,$141=0,$142=0;
 var $143=.0,$144=.0,$145=.0,$146=0,$147=0,$148=.0,$149=.0,$150=.0,$151=.0,$152=.0,$153=.0,$154=.0,$155=.0,$156=.0,$157=.0,$158=.0,$159=.0,$160=.0,$161=.0,$162=.0;
 var $163=.0,$164=.0,$165=.0,$166=.0,$167=.0,$168=.0,$169=.0,$170=.0,$171=.0,$172=.0,$173=.0,$174=.0,$175=.0,$176=.0,$177=.0,$178=0,$179=0,$180=.0,$181=.0,$182=.0;
 var $183=0,$184=0,$185=.0,$186=.0,$187=.0,$188=.0,$189=.0,$190=.0,$191=.0,$192=.0,$193=.0,$194=.0,$195=.0,$196=.0,$197=.0,$198=.0,$199=.0,$200=.0,$201=.0,$202=.0;
 var $203=.0,$204=.0,$205=.0,$206=.0,$207=.0,$208=.0,$209=.0,$210=.0,$211=.0,$212=.0,$213=.0,$214=0,$215=0,$216=.0,$217=.0,$218=.0,$219=0,$220=0,$221=0,$222=0;
 var $223=.0,$224=0,$225=0,$226=.0,$227=.0,$228=0,$229=0,$230=.0,$231=0,$232=0,$233=.0,$234=.0,$235=0,$236=0,$237=.0,$238=0,$239=0,$240=.0,$241=.0,$242=0;
 var $243=0,$244=.0,$245=0,$246=0,$247=.0,$248=.0,$249=0,$250=0,$251=.0,$252=0,$253=0,$254=.0,$255=.0,$256=0,$257=0,$258=.0,$259=0,$260=0,$261=.0,$262=.0;
 var $263=0,$264=0,$265=.0,$266=0,$267=0,$268=.0,$269=.0,$270=.0,$271=.0,$272=.0,$273=.0,$274=.0,$275=.0,$276=0,$277=0,$278=.0,$279=.0,$280=.0,$281=0,$282=0;
 var $283=.0,$284=.0,$285=.0,$286=.0,$287=.0,$288=.0,$289=.0,$290=.0,$291=0,$292=0,$293=.0,$294=.0,$295=.0,$296=.0,$297=.0,$298=.0,$299=.0,$300=.0,$301=.0,$302=.0;
 var $303=.0,$304=.0,$305=.0,$306=0,$307=0,$308=.0,$309=.0,$310=.0,$311=0,$312=0,$313=0,$314=0,$315=.0,$316=0,$317=0,$318=.0,$319=.0,$320=.0,$321=.0,$322=0;
 var $323=0,$324=.0,$325=.0,$326=.0,$327=.0,$328=.0,$329=.0,$330=.0,$331=.0,$332=.0,$333=.0,$334=.0,$335=.0,$336=.0,$337=.0,$338=.0,$339=.0,$340=.0,$341=.0,$342=.0;
 var $343=.0,$344=.0,$345=.0,$346=.0,$347=.0,$348=.0,$349=.0,$350=.0,$351=.0,$352=.0,$353=.0,$354=.0,$355=.0,$356=.0,$357=.0,$358=0,$359=0,$360=.0,$361=.0,$362=.0;
 var $363=0,$364=0,$365=.0,$366=.0,$367=.0,$368=.0,$369=.0,$370=.0,$371=.0,$372=.0,$373=.0,$374=.0,$375=.0,$376=.0,$377=.0,$378=.0,$379=.0,$380=.0,$381=.0,$382=.0;
 var $383=.0,$384=.0,$385=.0,$386=.0,$387=.0,$388=.0,$389=.0,$390=.0,$391=.0,$392=.0,$393=.0,$394=.0,$395=0,$396=0,$397=.0,$398=.0,$399=.0,$400=0,$401=0,$402=.0;
 var $403=.0,$404=.0,$405=.0,$406=.0,$407=.0,$408=.0,$409=.0,$410=.0,$411=.0,$412=.0,$413=.0,$414=.0,$415=.0,$416=.0,$417=.0,$418=.0,$419=.0,$420=.0,$421=.0,$422=.0;
 var $423=.0,$424=.0,$425=.0,$426=.0,$427=.0,$428=.0,$429=.0,$430=.0,$431=.0,$432=0,$433=0,$434=.0,$435=.0,$436=.0,$437=0,$438=0,label=0;
 var sp=0;sp=STACKTOP;




















 $1=$out;
 $2=$in;
 $3=$2;
 $4=(($3+68)|0);
 $5=(+(HEAPF32[(($4)>>2)]));
 $6=$2;
 $7=(($6+36)|0);
 $8=(+(HEAPF32[(($7)>>2)]));
 $9=($5)-($8);
 $tc1=$9;
 $10=$2;
 $11=(($10+60)|0);
 $12=(+(HEAPF32[(($11)>>2)]));
 $13=$2;
 $14=(($13+44)|0);
 $15=(+(HEAPF32[(($14)>>2)]));
 $16=($12)-($15);
 $tc3=$16;
 $17=$2;
 $18=(($17+56)|0);
 $19=(+(HEAPF32[(($18)>>2)]));
 $20=$2;
 $21=(($20+48)|0);
 $22=(+(HEAPF32[(($21)>>2)]));
 $23=($19)-($22);
 $tc4=$23;
 $24=$2;
 $25=(($24)|0);
 $26=(+(HEAPF32[(($25)>>2)]));
 $27=$2;
 $28=(($27+32)|0);
 $29=(+(HEAPF32[(($28)>>2)]));
 $30=($26)+($29);
 $ts5=$30;
 $31=$2;
 $32=(($31+4)|0);
 $33=(+(HEAPF32[(($32)>>2)]));
 $34=$2;
 $35=(($34+28)|0);
 $36=(+(HEAPF32[(($35)>>2)]));
 $37=($33)+($36);
 $ts6=$37;
 $38=$2;
 $39=(($38+8)|0);
 $40=(+(HEAPF32[(($39)>>2)]));
 $41=$2;
 $42=(($41+24)|0);
 $43=(+(HEAPF32[(($42)>>2)]));
 $44=($40)+($43);
 $ts7=$44;
 $45=$2;
 $46=(($45+12)|0);
 $47=(+(HEAPF32[(($46)>>2)]));
 $48=$2;
 $49=(($48+20)|0);
 $50=(+(HEAPF32[(($49)>>2)]));
 $51=($47)+($50);
 $ts8=$51;
 $52=$ts5;
 $53=$ts7;
 $54=($52)+($53);
 $55=$ts8;
 $56=($54)-($55);
 $57=$ts6;
 $58=$2;
 $59=(($58+16)|0);
 $60=(+(HEAPF32[(($59)>>2)]));
 $61=($57)-($60);
 $62=($56)-($61);
 $63=$1;
 $64=(($63+68)|0);
 HEAPF32[(($64)>>2)]=$62;
 $65=$ts5;
 $66=$ts7;
 $67=($65)+($66);
 $68=$ts8;
 $69=($67)-($68);
 $70=(+(HEAPF32[((372)>>2)]));
 $71=($69)*($70);
 $72=$ts6;
 $73=$2;
 $74=(($73+16)|0);
 $75=(+(HEAPF32[(($74)>>2)]));
 $76=($72)-($75);
 $77=($71)+($76);
 $st=$77;
 $78=$tc1;
 $79=$tc3;
 $80=($78)-($79);
 $81=$tc4;
 $82=($80)-($81);
 $83=(+(HEAPF32[((368)>>2)]));
 $84=($82)*($83);
 $ct=$84;
 $85=$ct;
 $86=$st;
 $87=($85)+($86);
 $88=$1;
 $89=(($88+20)|0);
 HEAPF32[(($89)>>2)]=$87;
 $90=$ct;
 $91=$st;
 $92=($90)-($91);
 $93=$1;
 $94=(($93+24)|0);
 HEAPF32[(($94)>>2)]=$92;
 $95=$2;
 $96=(($95+64)|0);
 $97=(+(HEAPF32[(($96)>>2)]));
 $98=$2;
 $99=(($98+40)|0);
 $100=(+(HEAPF32[(($99)>>2)]));
 $101=($97)-($100);
 $102=(+(HEAPF32[((368)>>2)]));
 $103=($101)*($102);
 $tc2=$103;
 $104=$ts6;
 $105=(+(HEAPF32[((372)>>2)]));
 $106=($104)*($105);
 $107=$2;
 $108=(($107+16)|0);
 $109=(+(HEAPF32[(($108)>>2)]));
 $110=($106)+($109);
 $ts6=$110;
 $111=$tc1;
 $112=(+(HEAPF32[((344)>>2)]));
 $113=($111)*($112);
 $114=$tc2;
 $115=($113)+($114);
 $116=$tc3;
 $117=(+(HEAPF32[((348)>>2)]));
 $118=($116)*($117);
 $119=($115)+($118);
 $120=$tc4;
 $121=(+(HEAPF32[((352)>>2)]));
 $122=($120)*($121);
 $123=($119)+($122);
 $ct=$123;
 $124=$ts5;
 $125=((-.0))-($124);
 $126=(+(HEAPF32[((360)>>2)]));
 $127=($125)*($126);
 $128=$ts6;
 $129=($127)+($128);
 $130=$ts7;
 $131=(+(HEAPF32[((364)>>2)]));
 $132=($130)*($131);
 $133=($129)-($132);
 $134=$ts8;
 $135=(+(HEAPF32[((356)>>2)]));
 $136=($134)*($135);
 $137=($133)+($136);
 $st=$137;
 $138=$ct;
 $139=$st;
 $140=($138)+($139);
 $141=$1;
 $142=(($141+4)|0);
 HEAPF32[(($142)>>2)]=$140;
 $143=$ct;
 $144=$st;
 $145=($143)-($144);
 $146=$1;
 $147=(($146+8)|0);
 HEAPF32[(($147)>>2)]=$145;
 $148=$tc1;
 $149=(+(HEAPF32[((348)>>2)]));
 $150=($148)*($149);
 $151=$tc2;
 $152=($150)-($151);
 $153=$tc3;
 $154=(+(HEAPF32[((352)>>2)]));
 $155=($153)*($154);
 $156=($152)-($155);
 $157=$tc4;
 $158=(+(HEAPF32[((344)>>2)]));
 $159=($157)*($158);
 $160=($156)+($159);
 $ct=$160;
 $161=$ts5;
 $162=((-.0))-($161);
 $163=(+(HEAPF32[((364)>>2)]));
 $164=($162)*($163);
 $165=$ts6;
 $166=($164)+($165);
 $167=$ts7;
 $168=(+(HEAPF32[((356)>>2)]));
 $169=($167)*($168);
 $170=($166)-($169);
 $171=$ts8;
 $172=(+(HEAPF32[((360)>>2)]));
 $173=($171)*($172);
 $174=($170)+($173);
 $st=$174;
 $175=$ct;
 $176=$st;
 $177=($175)+($176);
 $178=$1;
 $179=(($178+36)|0);
 HEAPF32[(($179)>>2)]=$177;
 $180=$ct;
 $181=$st;
 $182=($180)-($181);
 $183=$1;
 $184=(($183+40)|0);
 HEAPF32[(($184)>>2)]=$182;
 $185=$tc1;
 $186=(+(HEAPF32[((352)>>2)]));
 $187=($185)*($186);
 $188=$tc2;
 $189=($187)-($188);
 $190=$tc3;
 $191=(+(HEAPF32[((344)>>2)]));
 $192=($190)*($191);
 $193=($189)+($192);
 $194=$tc4;
 $195=(+(HEAPF32[((348)>>2)]));
 $196=($194)*($195);
 $197=($193)-($196);
 $ct=$197;
 $198=$ts5;
 $199=(+(HEAPF32[((356)>>2)]));
 $200=($198)*($199);
 $201=$ts6;
 $202=($200)-($201);
 $203=$ts7;
 $204=(+(HEAPF32[((360)>>2)]));
 $205=($203)*($204);
 $206=($202)+($205);
 $207=$ts8;
 $208=(+(HEAPF32[((364)>>2)]));
 $209=($207)*($208);
 $210=($206)-($209);
 $st=$210;
 $211=$ct;
 $212=$st;
 $213=($211)+($212);
 $214=$1;
 $215=(($214+52)|0);
 HEAPF32[(($215)>>2)]=$213;
 $216=$ct;
 $217=$st;
 $218=($216)-($217);
 $219=$1;
 $220=(($219+56)|0);
 HEAPF32[(($220)>>2)]=$218;
 $221=$2;
 $222=(($221+32)|0);
 $223=(+(HEAPF32[(($222)>>2)]));
 $224=$2;
 $225=(($224)|0);
 $226=(+(HEAPF32[(($225)>>2)]));
 $227=($223)-($226);
 $ts1=$227;
 $228=$2;
 $229=(($228+24)|0);
 $230=(+(HEAPF32[(($229)>>2)]));
 $231=$2;
 $232=(($231+8)|0);
 $233=(+(HEAPF32[(($232)>>2)]));
 $234=($230)-($233);
 $ts3=$234;
 $235=$2;
 $236=(($235+20)|0);
 $237=(+(HEAPF32[(($236)>>2)]));
 $238=$2;
 $239=(($238+12)|0);
 $240=(+(HEAPF32[(($239)>>2)]));
 $241=($237)-($240);
 $ts4=$241;
 $242=$2;
 $243=(($242+68)|0);
 $244=(+(HEAPF32[(($243)>>2)]));
 $245=$2;
 $246=(($245+36)|0);
 $247=(+(HEAPF32[(($246)>>2)]));
 $248=($244)+($247);
 $tc5=$248;
 $249=$2;
 $250=(($249+64)|0);
 $251=(+(HEAPF32[(($250)>>2)]));
 $252=$2;
 $253=(($252+40)|0);
 $254=(+(HEAPF32[(($253)>>2)]));
 $255=($251)+($254);
 $tc6=$255;
 $256=$2;
 $257=(($256+60)|0);
 $258=(+(HEAPF32[(($257)>>2)]));
 $259=$2;
 $260=(($259+44)|0);
 $261=(+(HEAPF32[(($260)>>2)]));
 $262=($258)+($261);
 $tc7=$262;
 $263=$2;
 $264=(($263+56)|0);
 $265=(+(HEAPF32[(($264)>>2)]));
 $266=$2;
 $267=(($266+48)|0);
 $268=(+(HEAPF32[(($267)>>2)]));
 $269=($265)+($268);
 $tc8=$269;
 $270=$tc5;
 $271=$tc7;
 $272=($270)+($271);
 $273=$tc8;
 $274=($272)+($273);
 $275=$tc6;
 $276=$2;
 $277=(($276+52)|0);
 $278=(+(HEAPF32[(($277)>>2)]));
 $279=($275)+($278);
 $280=($274)+($279);
 $281=$1;
 $282=(($281)|0);
 HEAPF32[(($282)>>2)]=$280;
 $283=$tc5;
 $284=$tc7;
 $285=($283)+($284);
 $286=$tc8;
 $287=($285)+($286);
 $288=(+(HEAPF32[((372)>>2)]));
 $289=($287)*($288);
 $290=$tc6;
 $291=$2;
 $292=(($291+52)|0);
 $293=(+(HEAPF32[(($292)>>2)]));
 $294=($290)+($293);
 $295=($289)-($294);
 $ct=$295;
 $296=$ts1;
 $297=$ts3;
 $298=($296)-($297);
 $299=$ts4;
 $300=($298)+($299);
 $301=(+(HEAPF32[((368)>>2)]));
 $302=($300)*($301);
 $st=$302;
 $303=$ct;
 $304=$st;
 $305=($303)+($304);
 $306=$1;
 $307=(($306+44)|0);
 HEAPF32[(($307)>>2)]=$305;
 $308=$ct;
 $309=$st;
 $310=($308)-($309);
 $311=$1;
 $312=(($311+48)|0);
 HEAPF32[(($312)>>2)]=$310;
 $313=$2;
 $314=(($313+28)|0);
 $315=(+(HEAPF32[(($314)>>2)]));
 $316=$2;
 $317=(($316+4)|0);
 $318=(+(HEAPF32[(($317)>>2)]));
 $319=($315)-($318);
 $320=(+(HEAPF32[((368)>>2)]));
 $321=($319)*($320);
 $ts2=$321;
 $322=$2;
 $323=(($322+52)|0);
 $324=(+(HEAPF32[(($323)>>2)]));
 $325=$tc6;
 $326=(+(HEAPF32[((372)>>2)]));
 $327=($325)*($326);
 $328=($324)-($327);
 $tc6=$328;
 $329=$tc5;
 $330=(+(HEAPF32[((356)>>2)]));
 $331=($329)*($330);
 $332=$tc6;
 $333=($331)-($332);
 $334=$tc7;
 $335=(+(HEAPF32[((360)>>2)]));
 $336=($334)*($335);
 $337=($333)+($336);
 $338=$tc8;
 $339=(+(HEAPF32[((364)>>2)]));
 $340=($338)*($339);
 $341=($337)+($340);
 $ct=$341;
 $342=$ts1;
 $343=(+(HEAPF32[((352)>>2)]));
 $344=($342)*($343);
 $345=$ts2;
 $346=($344)+($345);
 $347=$ts3;
 $348=(+(HEAPF32[((344)>>2)]));
 $349=($347)*($348);
 $350=($346)+($349);
 $351=$ts4;
 $352=(+(HEAPF32[((348)>>2)]));
 $353=($351)*($352);
 $354=($350)+($353);
 $st=$354;
 $355=$ct;
 $356=$st;
 $357=($355)+($356);
 $358=$1;
 $359=(($358+12)|0);
 HEAPF32[(($359)>>2)]=$357;
 $360=$ct;
 $361=$st;
 $362=($360)-($361);
 $363=$1;
 $364=(($363+16)|0);
 HEAPF32[(($364)>>2)]=$362;
 $365=$tc5;
 $366=((-.0))-($365);
 $367=(+(HEAPF32[((364)>>2)]));
 $368=($366)*($367);
 $369=$tc6;
 $370=($368)+($369);
 $371=$tc7;
 $372=(+(HEAPF32[((356)>>2)]));
 $373=($371)*($372);
 $374=($370)-($373);
 $375=$tc8;
 $376=(+(HEAPF32[((360)>>2)]));
 $377=($375)*($376);
 $378=($374)-($377);
 $ct=$378;
 $379=$ts1;
 $380=(+(HEAPF32[((348)>>2)]));
 $381=($379)*($380);
 $382=$ts2;
 $383=($381)+($382);
 $384=$ts3;
 $385=(+(HEAPF32[((352)>>2)]));
 $386=($384)*($385);
 $387=($383)-($386);
 $388=$ts4;
 $389=(+(HEAPF32[((344)>>2)]));
 $390=($388)*($389);
 $391=($387)-($390);
 $st=$391;
 $392=$ct;
 $393=$st;
 $394=($392)+($393);
 $395=$1;
 $396=(($395+28)|0);
 HEAPF32[(($396)>>2)]=$394;
 $397=$ct;
 $398=$st;
 $399=($397)-($398);
 $400=$1;
 $401=(($400+32)|0);
 HEAPF32[(($401)>>2)]=$399;
 $402=$tc5;
 $403=((-.0))-($402);
 $404=(+(HEAPF32[((360)>>2)]));
 $405=($403)*($404);
 $406=$tc6;
 $407=($405)+($406);
 $408=$tc7;
 $409=(+(HEAPF32[((364)>>2)]));
 $410=($408)*($409);
 $411=($407)-($410);
 $412=$tc8;
 $413=(+(HEAPF32[((356)>>2)]));
 $414=($412)*($413);
 $415=($411)-($414);
 $ct=$415;
 $416=$ts1;
 $417=(+(HEAPF32[((344)>>2)]));
 $418=($416)*($417);
 $419=$ts2;
 $420=($418)-($419);
 $421=$ts3;
 $422=(+(HEAPF32[((348)>>2)]));
 $423=($421)*($422);
 $424=($420)+($423);
 $425=$ts4;
 $426=(+(HEAPF32[((352)>>2)]));
 $427=($425)*($426);
 $428=($424)-($427);
 $st=$428;
 $429=$ct;
 $430=$st;
 $431=($429)+($430);
 $432=$1;
 $433=(($432+60)|0);
 HEAPF32[(($433)>>2)]=$431;
 $434=$ct;
 $435=$st;
 $436=($434)-($435);
 $437=$1;
 $438=(($437+64)|0);
 HEAPF32[(($438)>>2)]=$436;
 STACKTOP=sp;return;
}


function _lame_encode_mp3_frame($gfc,$inbuf_l,$inbuf_r,$mp3buf,$mp3buf_size){
 $gfc=($gfc)|0;
 $inbuf_l=($inbuf_l)|0;
 $inbuf_r=($inbuf_r)|0;
 $mp3buf=($mp3buf)|0;
 $mp3buf_size=($mp3buf_size)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$cfg=0,$mp3count=0,$masking_LR=0,$masking_MS=0,$masking=0,$inbuf=0,$tot_ener=0,$ms_ener_ratio=0,$pe=0,$pe_MS=0,$pe_use=0,$ch=0,$gr=0,$ret=0;
 var $bufp=0,$blocktype=0,$cod_info=0,$sum_pe_MS=.0,$sum_pe_LR=.0,$gi0=0,$gi1=0,$i=0,$f=.0,$framesize=0,$j=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$14=0,$15=0;
 var $16=0,$17=0,$18=0,$19=0,$21=0,$22=0,$24=0,$25=0,$26=0,$27=0,$28=0,$29=0,$30=0,$31=0,$32=0,$33=0,$34=0,$35=0,$36=0,$38=0;
 var $39=0,$40=0,$41=0,$42=0,$43=0,$44=0,$45=0,$46=0,$47=0,$48=0,$50=0,$52=0,$53=0,$54=0,$55=0,$56=0,$59=0,$60=0,$61=0,$62=0;
 var $63=0,$65=0,$66=0,$67=0,$68=0,$69=0,$70=0,$71=0,$72=0,$73=0,$74=0,$76=0,$77=0,$79=0,$80=0,$81=0,$82=0,$83=0,$84=0,$85=0;
 var $86=0,$87=0,$88=0,$89=0,$90=0,$91=0,$92=0,$93=0,$94=0,$95=0,$96=0,$99=0,$100=0,$101=0,$102=0,$104=0,$105=0,$106=0,$107=.0,$108=0;
 var $109=0,$110=0,$111=.0,$112=.0,$113=0,$114=0,$115=0,$116=0,$117=.0,$118=0,$120=0,$121=0,$122=0,$123=.0,$124=0,$125=0,$126=.0,$127=.0,$128=0,$129=0;
 var $133=0,$134=0,$135=0,$136=0,$137=0,$139=0,$140=0,$141=0,$142=0,$143=0,$144=0,$145=0,$146=0,$147=0,$148=0,$149=0,$150=0,$151=0,$152=0,$154=0;
 var $155=0,$158=0,$159=0,$161=0,$162=0,$163=0,$164=0,$165=0,$166=0,$167=0,$168=0,$169=0,$170=0,$171=0,$172=0,$173=0,$175=0,$176=0,$177=0,$179=0;
 var $180=0,$181=0,$182=0,$185=0,$186=0,$187=0,$188=0,$189=0,$192=0,$193=0,$194=0,$195=0,$196=0,$198=0,$199=0,$200=0,$201=0,$202=.0,$203=.0,$204=.0;
 var $205=0,$206=0,$207=0,$208=0,$209=.0,$210=.0,$211=.0,$213=0,$214=0,$217=0,$218=0,$220=.0,$221=.0,$222=.0,$223=.0,$224=.0,$225=0,$227=0,$228=0,$229=0;
 var $230=0,$231=0,$232=0,$233=0,$234=0,$235=0,$236=0,$237=0,$238=0,$239=0,$240=0,$241=0,$242=0,$243=0,$244=0,$245=0,$246=0,$247=0,$248=0,$249=0;
 var $251=0,$252=0,$253=0,$254=0,$255=0,$256=0,$257=0,$258=0,$259=0,$261=0,$262=0,$263=0,$268=0,$269=0,$270=0,$271=0,$272=0,$274=0,$275=0,$277=0;
 var $278=0,$280=0,$281=0,$282=0,$283=0,$285=0,$286=0,$287=0,$288=0,$291=0,$292=0,$293=0,$294=0,$295=0,$298=0,$299=0,$300=0,$301=0,$302=0,$304=0;
 var $305=0,$306=0,$307=0,$308=0,$309=0,$310=0,$311=0,$312=.0,$313=.0,$314=0,$315=0,$316=0,$317=0,$318=0,$319=0,$320=0,$321=0,$322=0,$323=0,$324=0;
 var $325=0,$326=0,$327=0,$328=0,$329=0,$330=0,$331=0,$332=0,$333=0,$334=0,$335=0,$336=0,$337=0,$338=0,$339=0,$340=0,$341=0,$342=.0,$343=.0,$344=0;
 var $345=0,$346=0,$347=0,$348=0,$349=0,$350=0,$351=0,$352=0,$353=0,$354=0,$355=0,$356=0,$357=0,$358=0,$359=0,$360=0,$361=0,$362=0,$363=0,$364=0;
 var $365=0,$366=0,$367=0,$368=0,$369=0,$370=0,$371=0,$372=0,$373=0,$374=0,$375=0,$377=0,$378=0,$379=0,$380=0,$381=0,$382=0,$383=0,$384=0,$385=0;
 var $386=.0,$387=0,$388=0,$389=0,$390=0,$391=0,$392=0,$393=0,$394=0,$395=0,$396=0,$397=0,$398=0,$399=0,$400=0,$401=0,$402=0,$403=0,$404=0,$405=0;
 var $406=0,$407=0,$408=0,$409=0,$410=0,$411=0,$412=0,$413=0,$416=0,$417=0,$420=0,$421=0,$424=0,$425=0,$426=0,$427=0,$429=0,$430=0,$431=0,$432=0;
 var $435=0,$436=0,$438=0,$439=0,$440=0,$441=0,$442=0,$443=0,$444=.0,$445=0,$446=0,$447=0,$448=0,$449=0,$451=0,$452=0,$455=0,$456=0,$457=0,$458=0;
 var $459=0,$462=0,$463=0,$464=0,$465=0,$466=0,$468=0,$469=0,$470=0,$471=0,$472=0,$473=.0,$474=.0,$475=.0,$477=0,$478=0,$481=0,$482=0,$484=.0,$485=0;
 var $486=0,$487=0,$488=0,$489=0,$490=0,$491=0,$492=0,$493=.0,$495=0,$496=0,$498=0,$499=0,$500=0,$501=0,$502=0,$503=.0,$504=0,$505=0,$506=0,$507=0;
 var $508=0,$509=0,$510=.0,$511=.0,$512=0,$513=0,$514=.0,$515=.0,$516=.0,$517=.0,$519=0,$520=0,$522=0,$523=0,$524=0,$525=0,$526=0,$527=0,$528=0,$529=0;
 var $530=.0,$531=.0,$532=.0,$534=0,$535=0,$536=0,$537=0,$538=0,$541=0,$542=0,$543=0,$544=0,$545=0,$547=.0,$548=0,$549=0,$550=0,$551=0,$552=0,$553=.0;
 var $554=.0,$556=0,$557=0,$560=0,$561=0,$564=0,$565=0,$566=0,$567=0,$568=0,$569=0,$570=0,$571=0,$572=0,$573=0,$574=0,$575=0,$576=0,$577=0,$578=0;
 var $579=0,$580=0,$582=0,$584=0,$585=0,$586=0,$587=0,$589=0,$590=0,$591=0,$592=0,$594=0,$595=0,$596=0,$597=0,$599=0,$600=0,$601=0,$602=0,$603=0;
 var $606=0,$607=0,$609=0,$610=0,$611=0,$612=0,$613=0,$614=0,$615=0,$616=0,$617=0,$618=0,$619=.0,$620=0,$621=0,$622=0,$623=0,$624=0,$625=0,$626=0;
 var $627=0,$629=0,$630=0,$633=0,$634=0,$636=0,$637=0,$638=0,$639=0,$640=0,$641=0,$642=.0,$643=.0,$644=0,$645=0,$646=0,$647=0,$648=0,$649=0,$650=0;
 var $651=0,$653=0,$654=0,$657=0,$658=0,$660=0,$661=0,$662=0,$663=0,$664=0,$666=0,$667=0,$668=0,$669=0,$670=0,$671=0,$672=0,$674=0,label=0;
 var sp=0;sp=STACKTOP;STACKTOP=(STACKTOP+4000)|0;








 $masking_LR=((sp)|0);
 $masking_MS=(((sp)+(1952))|0);

 $inbuf=(((sp)+(3904))|0);
 $tot_ener=(((sp)+(3912))|0);
 $ms_ener_ratio=(((sp)+(3944))|0);
 $pe=(((sp)+(3952))|0);
 $pe_MS=(((sp)+(3968))|0);




 $bufp=(((sp)+(3984))|0);
 $blocktype=(((sp)+(3992))|0);









 $2=$gfc;
 $3=$inbuf_l;
 $4=$inbuf_r;
 $5=$mp3buf;
 $6=$mp3buf_size;
 $7=$2;
 $8=(($7+16)|0);
 $cfg=$8;
 $9=$ms_ener_ratio;
 HEAP32[(($9)>>2)]=((HEAP32[((12200)>>2)])|0);HEAP32[((($9)+(4))>>2)]=((HEAP32[((12204)>>2)])|0);
 $10=$pe;
 _memset((((($10)|0))|0), ((((0)|0))|0), ((((16)|0))|0))|0;
 $11=$pe_MS;
 _memset((((($11)|0))|0), ((((0)|0))|0), ((((16)|0))|0))|0;
 $12=$3;
 $13=(($inbuf)|0);
 HEAP32[(($13)>>2)]=$12;
 $14=$4;
 $15=(($inbuf+4)|0);
 HEAP32[(($15)>>2)]=$14;
 $16=$2;
 $17=(($16+4)|0);
 $18=((HEAP32[(($17)>>2)])|0);
 $19=($18|0)==0;
 if ($19) {
  $21=$2;
  $22=(($inbuf)|0);
  _lame_encode_frame_init($21,$22);
 }
 $24=$2;
 $25=(($24+84040)|0);
 $26=(($25+712)|0);
 HEAP32[(($26)>>2)]=0;
 $27=$2;
 $28=(($27+27824)|0);
 $29=(($28+12008)|0);
 $30=((HEAP32[(($29)>>2)])|0);
 $31=$2;
 $32=(($31+27824)|0);
 $33=(($32+12012)|0);
 $34=((HEAP32[(($33)>>2)])|0);
 $35=((($34)-($30))|0);
 HEAP32[(($33)>>2)]=$35;
 $36=($35|0)<0;
 if ($36) {
  $38=$cfg;
  $39=(($38+48)|0);
  $40=((HEAP32[(($39)>>2)])|0);
  $41=$2;
  $42=(($41+27824)|0);
  $43=(($42+12012)|0);
  $44=((HEAP32[(($43)>>2)])|0);
  $45=((($44)+($40))|0);
  HEAP32[(($43)>>2)]=$45;
  $46=$2;
  $47=(($46+84040)|0);
  $48=(($47+712)|0);
  HEAP32[(($48)>>2)]=1;
 }
 $50=$bufp;
 _memset((((($50)|0))|0), ((((0)|0))|0), ((((8)|0))|0))|0;
 $gr=0;
 while(1) {
  $52=$gr;
  $53=$cfg;
  $54=(($53+60)|0);
  $55=((HEAP32[(($54)>>2)])|0);
  $56=($52|0)<($55|0);
  if (!($56)) {
   break;
  }
  $ch=0;
  while(1) {
   $59=$ch;
   $60=$cfg;
   $61=(($60+56)|0);
   $62=((HEAP32[(($61)>>2)])|0);
   $63=($59|0)<($62|0);
   if (!($63)) {
    break;
   }
   $65=$gr;
   $66=((($65)*(576))&-1);
   $67=((($66)+(576))|0);
   $68=((($67)-(272))|0);
   $69=$ch;
   $70=(($inbuf+($69<<2))|0);
   $71=((HEAP32[(($70)>>2)])|0);
   $72=(($71+($68<<2))|0);
   $73=$ch;
   $74=(($bufp+($73<<2))|0);
   HEAP32[(($74)>>2)]=$72;
   $76=$ch;
   $77=((($76)+(1))|0);
   $ch=$77;
  }
  $79=$2;
  $80=(($bufp)|0);
  $81=$gr;
  $82=(($masking_LR)|0);
  $83=(($masking_MS)|0);
  $84=$gr;
  $85=(($pe+($84<<3))|0);
  $86=(($85)|0);
  $87=$gr;
  $88=(($pe_MS+($87<<3))|0);
  $89=(($88)|0);
  $90=$gr;
  $91=(($tot_ener+($90<<4))|0);
  $92=(($91)|0);
  $93=(($blocktype)|0);
  $94=((_L3psycho_anal_vbr($79,$80,$81,$82,$83,$86,$89,$92,$93))|0);
  $ret=$94;
  $95=$ret;
  $96=($95|0)!=0;
  if ($96) {
   label = 12;
   break;
  }
  $99=$cfg;
  $100=(($99+164)|0);
  $101=((HEAP32[(($100)>>2)])|0);
  $102=($101|0)==1;
  if ($102) {
   $104=$gr;
   $105=(($tot_ener+($104<<4))|0);
   $106=(($105+8)|0);
   $107=(+(HEAPF32[(($106)>>2)]));
   $108=$gr;
   $109=(($tot_ener+($108<<4))|0);
   $110=(($109+12)|0);
   $111=(+(HEAPF32[(($110)>>2)]));
   $112=($107)+($111);
   $113=$gr;
   $114=(($ms_ener_ratio+($113<<2))|0);
   HEAPF32[(($114)>>2)]=$112;
   $115=$gr;
   $116=(($ms_ener_ratio+($115<<2))|0);
   $117=(+(HEAPF32[(($116)>>2)]));
   $118=$117>(0.0);
   if ($118) {
    $120=$gr;
    $121=(($tot_ener+($120<<4))|0);
    $122=(($121+12)|0);
    $123=(+(HEAPF32[(($122)>>2)]));
    $124=$gr;
    $125=(($ms_ener_ratio+($124<<2))|0);
    $126=(+(HEAPF32[(($125)>>2)]));
    $127=($123)/($126);
    $128=$gr;
    $129=(($ms_ener_ratio+($128<<2))|0);
    HEAPF32[(($129)>>2)]=$127;
   }
  }
  $ch=0;
  while(1) {
   $133=$ch;
   $134=$cfg;
   $135=(($134+56)|0);
   $136=((HEAP32[(($135)>>2)])|0);
   $137=($133|0)<($136|0);
   if (!($137)) {
    break;
   }
   $139=$ch;
   $140=$gr;
   $141=$2;
   $142=(($141+304)|0);
   $143=(($142)|0);
   $144=(($143+((($140)*(10504))&-1))|0);
   $145=(($144+((($139)*(5252))&-1))|0);
   $cod_info=$145;
   $146=$ch;
   $147=(($blocktype+($146<<2))|0);
   $148=((HEAP32[(($147)>>2)])|0);
   $149=$cod_info;
   $150=(($149+4788)|0);
   HEAP32[(($150)>>2)]=$148;
   $151=$cod_info;
   $152=(($151+4792)|0);
   HEAP32[(($152)>>2)]=0;
   $154=$ch;
   $155=((($154)+(1))|0);
   $ch=$155;
  }
  $158=$gr;
  $159=((($158)+(1))|0);
  $gr=$159;
 }
 if ((label|0) == 12) {
  $1=-4;
  $674=$1;
  STACKTOP=sp;return (($674)|0);
 }
 $161=$2;
 _adjust_ATH($161);
 $162=$2;
 $163=(($inbuf)|0);
 $164=((HEAP32[(($163)>>2)])|0);
 $165=(($inbuf+4)|0);
 $166=((HEAP32[(($165)>>2)])|0);
 _mdct_sub48($162,$164,$166);
 $167=$2;
 $168=(($167+84040)|0);
 $169=(($168+716)|0);
 HEAP32[(($169)>>2)]=0;
 $170=$cfg;
 $171=(($170+64)|0);
 $172=((HEAP32[(($171)>>2)])|0);
 $173=($172|0)!=0;
 if ($173) {
  $175=$2;
  $176=(($175+84040)|0);
  $177=(($176+716)|0);
  HEAP32[(($177)>>2)]=2;
 } else {
  $179=$cfg;
  $180=(($179+164)|0);
  $181=((HEAP32[(($180)>>2)])|0);
  $182=($181|0)==1;
  if ($182) {
   $sum_pe_MS=0.0;
   $sum_pe_LR=0.0;
   $gr=0;
   while(1) {
    $185=$gr;
    $186=$cfg;
    $187=(($186+60)|0);
    $188=((HEAP32[(($187)>>2)])|0);
    $189=($185|0)<($188|0);
    if (!($189)) {
     break;
    }
    $ch=0;
    while(1) {
     $192=$ch;
     $193=$cfg;
     $194=(($193+56)|0);
     $195=((HEAP32[(($194)>>2)])|0);
     $196=($192|0)<($195|0);
     if (!($196)) {
      break;
     }
     $198=$ch;
     $199=$gr;
     $200=(($pe_MS+($199<<3))|0);
     $201=(($200+($198<<2))|0);
     $202=(+(HEAPF32[(($201)>>2)]));
     $203=$sum_pe_MS;
     $204=($203)+($202);
     $sum_pe_MS=$204;
     $205=$ch;
     $206=$gr;
     $207=(($pe+($206<<3))|0);
     $208=(($207+($205<<2))|0);
     $209=(+(HEAPF32[(($208)>>2)]));
     $210=$sum_pe_LR;
     $211=($210)+($209);
     $sum_pe_LR=$211;
     $213=$ch;
     $214=((($213)+(1))|0);
     $ch=$214;
    }
    $217=$gr;
    $218=((($217)+(1))|0);
    $gr=$218;
   }
   $220=$sum_pe_MS;
   $221=$220;
   $222=$sum_pe_LR;
   $223=$222;
   $224=((1.0))*($223);
   $225=$221<=$224;
   if ($225) {
    $227=$2;
    $228=(($227+304)|0);
    $229=(($228)|0);
    $230=(($229)|0);
    $231=(($230)|0);
    $gi0=$231;
    $232=$cfg;
    $233=(($232+60)|0);
    $234=((HEAP32[(($233)>>2)])|0);
    $235=((($234)-(1))|0);
    $236=$2;
    $237=(($236+304)|0);
    $238=(($237)|0);
    $239=(($238+((($235)*(10504))&-1))|0);
    $240=(($239)|0);
    $gi1=$240;
    $241=$gi0;
    $242=(($241)|0);
    $243=(($242+4788)|0);
    $244=((HEAP32[(($243)>>2)])|0);
    $245=$gi0;
    $246=(($245+5252)|0);
    $247=(($246+4788)|0);
    $248=((HEAP32[(($247)>>2)])|0);
    $249=($244|0)==($248|0);
    do {
     if ($249) {
      $251=$gi1;
      $252=(($251)|0);
      $253=(($252+4788)|0);
      $254=((HEAP32[(($253)>>2)])|0);
      $255=$gi1;
      $256=(($255+5252)|0);
      $257=(($256+4788)|0);
      $258=((HEAP32[(($257)>>2)])|0);
      $259=($254|0)==($258|0);
      if (!($259)) {
       break;
      }
      $261=$2;
      $262=(($261+84040)|0);
      $263=(($262+716)|0);
      HEAP32[(($263)>>2)]=2;
     }
    } while(0);
   }
  }
 }
 $268=$2;
 $269=(($268+84040)|0);
 $270=(($269+716)|0);
 $271=((HEAP32[(($270)>>2)])|0);
 $272=($271|0)==2;
 if ($272) {
  $274=(($masking_MS)|0);
  $masking=$274;
  $275=(($pe_MS)|0);
  $pe_use=$275;
 } else {
  $277=(($masking_LR)|0);
  $masking=$277;
  $278=(($pe)|0);
  $pe_use=$278;
 }
 $280=$cfg;
 $281=(($280+124)|0);
 $282=((HEAP32[(($281)>>2)])|0);
 $283=($282|0)!=0;
 do {
  if ($283) {
   $285=$2;
   $286=(($285+85804)|0);
   $287=((HEAP32[(($286)>>2)])|0);
   $288=($287|0)!=0;
   if (!($288)) {
    break;
   }
   $gr=0;
   while(1) {
    $291=$gr;
    $292=$cfg;
    $293=(($292+60)|0);
    $294=((HEAP32[(($293)>>2)])|0);
    $295=($291|0)<($294|0);
    if (!($295)) {
     break;
    }
    $ch=0;
    while(1) {
     $298=$ch;
     $299=$cfg;
     $300=(($299+56)|0);
     $301=((HEAP32[(($300)>>2)])|0);
     $302=($298|0)<($301|0);
     if (!($302)) {
      break;
     }
     $304=$gr;
     $305=$2;
     $306=(($305+85804)|0);
     $307=((HEAP32[(($306)>>2)])|0);
     $308=(($307+90904)|0);
     $309=(($308+($304<<3))|0);
     HEAPF64[(($309)>>3)]=0.0;
     $310=$gr;
     $311=(($ms_ener_ratio+($310<<2))|0);
     $312=(+(HEAPF32[(($311)>>2)]));
     $313=$312;
     $314=$gr;
     $315=$2;
     $316=(($315+85804)|0);
     $317=((HEAP32[(($316)>>2)])|0);
     $318=(($317+90920)|0);
     $319=(($318+($314<<3))|0);
     HEAPF64[(($319)>>3)]=$313;
     $320=$ch;
     $321=$gr;
     $322=$2;
     $323=(($322+304)|0);
     $324=(($323)|0);
     $325=(($324+((($321)*(10504))&-1))|0);
     $326=(($325+((($320)*(5252))&-1))|0);
     $327=(($326+4788)|0);
     $328=((HEAP32[(($327)>>2)])|0);
     $329=$ch;
     $330=$gr;
     $331=$2;
     $332=(($331+85804)|0);
     $333=((HEAP32[(($332)>>2)])|0);
     $334=(($333+203288)|0);
     $335=(($334+($330<<3))|0);
     $336=(($335+($329<<2))|0);
     HEAP32[(($336)>>2)]=$328;
     $337=$ch;
     $338=$gr;
     $339=$pe_use;
     $340=(($339+($338<<3))|0);
     $341=(($340+($337<<2))|0);
     $342=(+(HEAPF32[(($341)>>2)]));
     $343=$342;
     $344=$ch;
     $345=$gr;
     $346=$2;
     $347=(($346+85804)|0);
     $348=((HEAP32[(($347)>>2)])|0);
     $349=(($348+189240)|0);
     $350=(($349+($345<<5))|0);
     $351=(($350+($344<<3))|0);
     HEAPF64[(($351)>>3)]=$343;
     $352=$ch;
     $353=$gr;
     $354=$2;
     $355=(($354+85804)|0);
     $356=((HEAP32[(($355)>>2)])|0);
     $357=(($356+54040)|0);
     $358=(($357+((($353)*(9216))&-1))|0);
     $359=(($358+((($352)*(4608))&-1))|0);
     $360=$359;
     $361=$ch;
     $362=$gr;
     $363=$2;
     $364=(($363+304)|0);
     $365=(($364)|0);
     $366=(($365+((($362)*(10504))&-1))|0);
     $367=(($366+((($361)*(5252))&-1))|0);
     $368=(($367)|0);
     $369=(($368)|0);
     $370=$369;
     (_memcpy((($360)|0), (($370)|0), 2304)|0);
     $371=$2;
     $372=(($371+84040)|0);
     $373=(($372+716)|0);
     $374=((HEAP32[(($373)>>2)])|0);
     $375=($374|0)==2;
     if ($375) {
      $377=$ch;
      $378=((($377)+(2))|0);
      $379=$gr;
      $380=$2;
      $381=(($380+85804)|0);
      $382=((HEAP32[(($381)>>2)])|0);
      $383=(($382+197144)|0);
      $384=(($383+($379<<5))|0);
      $385=(($384+($378<<3))|0);
      $386=(+(HEAPF64[(($385)>>3)]));
      $387=$ch;
      $388=$gr;
      $389=$2;
      $390=(($389+85804)|0);
      $391=((HEAP32[(($390)>>2)])|0);
      $392=(($391+197144)|0);
      $393=(($392+($388<<5))|0);
      $394=(($393+($387<<3))|0);
      HEAPF64[(($394)>>3)]=$386;
      $395=$ch;
      $396=$gr;
      $397=$2;
      $398=(($397+85804)|0);
      $399=((HEAP32[(($398)>>2)])|0);
      $400=(($399+123704)|0);
      $401=(($400+($396<<15))|0);
      $402=(($401+($395<<13))|0);
      $403=$402;
      $404=$ch;
      $405=((($404)+(2))|0);
      $406=$gr;
      $407=$2;
      $408=(($407+85804)|0);
      $409=((HEAP32[(($408)>>2)])|0);
      $410=(($409+123704)|0);
      $411=(($410+($406<<15))|0);
      $412=(($411+($405<<13))|0);
      $413=$412;
      (_memcpy((($403)|0), (($413)|0), 8192)|0);
     }
     $416=$ch;
     $417=((($416)+(1))|0);
     $ch=$417;
    }
    $420=$gr;
    $421=((($420)+(1))|0);
    $gr=$421;
   }
  }
 } while(0);
 $424=$cfg;
 $425=(($424+88)|0);
 $426=((HEAP32[(($425)>>2)])|0);
 $427=($426|0)==0;
 if ($427) {
  label = 59;
 } else {
  $429=$cfg;
  $430=(($429+88)|0);
  $431=((HEAP32[(($430)>>2)])|0);
  $432=($431|0)==3;
  if ($432) {
   label = 59;
  }
 }
 if ((label|0) == 59) {
  $i=0;
  while(1) {
   $435=$i;
   $436=($435|0)<18;
   if (!($436)) {
    break;
   }
   $438=$i;
   $439=((($438)+(1))|0);
   $440=$2;
   $441=(($440+27824)|0);
   $442=(($441+11932)|0);
   $443=(($442+($439<<2))|0);
   $444=(+(HEAPF32[(($443)>>2)]));
   $445=$i;
   $446=$2;
   $447=(($446+27824)|0);
   $448=(($447+11932)|0);
   $449=(($448+($445<<2))|0);
   HEAPF32[(($449)>>2)]=$444;
   $451=$i;
   $452=((($451)+(1))|0);
   $i=$452;
  }
  $f=0.0;
  $gr=0;
  while(1) {
   $455=$gr;
   $456=$cfg;
   $457=(($456+60)|0);
   $458=((HEAP32[(($457)>>2)])|0);
   $459=($455|0)<($458|0);
   if (!($459)) {
    break;
   }
   $ch=0;
   while(1) {
    $462=$ch;
    $463=$cfg;
    $464=(($463+56)|0);
    $465=((HEAP32[(($464)>>2)])|0);
    $466=($462|0)<($465|0);
    if (!($466)) {
     break;
    }
    $468=$ch;
    $469=$gr;
    $470=$pe_use;
    $471=(($470+($469<<3))|0);
    $472=(($471+($468<<2))|0);
    $473=(+(HEAPF32[(($472)>>2)]));
    $474=$f;
    $475=($474)+($473);
    $f=$475;
    $477=$ch;
    $478=((($477)+(1))|0);
    $ch=$478;
   }
   $481=$gr;
   $482=((($481)+(1))|0);
   $gr=$482;
  }
  $484=$f;
  $485=$2;
  $486=(($485+27824)|0);
  $487=(($486+11932)|0);
  $488=(($487+72)|0);
  HEAPF32[(($488)>>2)]=$484;
  $489=$2;
  $490=(($489+27824)|0);
  $491=(($490+11932)|0);
  $492=(($491+36)|0);
  $493=(+(HEAPF32[(($492)>>2)]));
  $f=$493;
  $i=0;
  while(1) {
   $495=$i;
   $496=($495|0)<9;
   if (!($496)) {
    break;
   }
   $498=$i;
   $499=$2;
   $500=(($499+27824)|0);
   $501=(($500+11932)|0);
   $502=(($501+($498<<2))|0);
   $503=(+(HEAPF32[(($502)>>2)]));
   $504=$i;
   $505=(((18)-($504))|0);
   $506=$2;
   $507=(($506+27824)|0);
   $508=(($507+11932)|0);
   $509=(($508+($505<<2))|0);
   $510=(+(HEAPF32[(($509)>>2)]));
   $511=($503)+($510);
   $512=$i;
   $513=((12208+($512<<2))|0);
   $514=(+(HEAPF32[(($513)>>2)]));
   $515=($511)*($514);
   $516=$f;
   $517=($516)+($515);
   $f=$517;
   $519=$i;
   $520=((($519)+(1))|0);
   $i=$520;
  }
  $522=$cfg;
  $523=(($522+60)|0);
  $524=((HEAP32[(($523)>>2)])|0);
  $525=((($524)*(3350))&-1);
  $526=$cfg;
  $527=(($526+56)|0);
  $528=((HEAP32[(($527)>>2)])|0);
  $529=(Math_imul($525,$528)|0);
  $530=(+((($529|0))|0));
  $531=$f;
  $532=($530)/($531);
  $f=$532;
  $gr=0;
  while(1) {
   $534=$gr;
   $535=$cfg;
   $536=(($535+60)|0);
   $537=((HEAP32[(($536)>>2)])|0);
   $538=($534|0)<($537|0);
   if (!($538)) {
    break;
   }
   $ch=0;
   while(1) {
    $541=$ch;
    $542=$cfg;
    $543=(($542+56)|0);
    $544=((HEAP32[(($543)>>2)])|0);
    $545=($541|0)<($544|0);
    if (!($545)) {
     break;
    }
    $547=$f;
    $548=$ch;
    $549=$gr;
    $550=$pe_use;
    $551=(($550+($549<<3))|0);
    $552=(($551+($548<<2))|0);
    $553=(+(HEAPF32[(($552)>>2)]));
    $554=($553)*($547);
    HEAPF32[(($552)>>2)]=$554;
    $556=$ch;
    $557=((($556)+(1))|0);
    $ch=$557;
   }
   $560=$gr;
   $561=((($560)+(1))|0);
   $gr=$561;
  }
 }
 $564=$2;
 $565=(($564+85812)|0);
 $566=((HEAP32[(($565)>>2)])|0);
 $567=$2;
 $568=$pe_use;
 $569=(($ms_ener_ratio)|0);
 $570=$masking;
 FUNCTION_TABLE_viiii[($566)&15]($567,$568,$569,$570);
 $571=$2;
 $572=((_format_bitstream($571))|0);
 $573=$2;
 $574=$5;
 $575=$6;
 $576=((_copy_buffer($573,$574,$575,1))|0);
 $mp3count=$576;
 $577=$cfg;
 $578=(($577+140)|0);
 $579=((HEAP32[(($578)>>2)])|0);
 $580=($579|0)!=0;
 if ($580) {
  $582=$2;
  _AddVbrFrame($582);
 }
 $584=$cfg;
 $585=(($584+124)|0);
 $586=((HEAP32[(($585)>>2)])|0);
 $587=($586|0)!=0;
 do {
  if ($587) {
   $589=$2;
   $590=(($589+85804)|0);
   $591=((HEAP32[(($590)>>2)])|0);
   $592=($591|0)!=0;
   if (!($592)) {
    break;
   }
   $594=$cfg;
   $595=(($594+60)|0);
   $596=((HEAP32[(($595)>>2)])|0);
   $597=((($596)*(576))&-1);
   $framesize=$597;
   $ch=0;
   while(1) {
    $599=$ch;
    $600=$cfg;
    $601=(($600+56)|0);
    $602=((HEAP32[(($601)>>2)])|0);
    $603=($599|0)<($602|0);
    if (!($603)) {
     break;
    }
    $j=0;
    while(1) {
     $606=$j;
     $607=($606|0)<272;
     if (!($607)) {
      break;
     }
     $609=$j;
     $610=$framesize;
     $611=((($609)+($610))|0);
     $612=$ch;
     $613=$2;
     $614=(($613+85804)|0);
     $615=((HEAP32[(($614)>>2)])|0);
     $616=(($615+24)|0);
     $617=(($616+((($612)*(12800))&-1))|0);
     $618=(($617+($611<<3))|0);
     $619=(+(HEAPF64[(($618)>>3)]));
     $620=$j;
     $621=$ch;
     $622=$2;
     $623=(($622+85804)|0);
     $624=((HEAP32[(($623)>>2)])|0);
     $625=(($624+24)|0);
     $626=(($625+((($621)*(12800))&-1))|0);
     $627=(($626+($620<<3))|0);
     HEAPF64[(($627)>>3)]=$619;
     $629=$j;
     $630=((($629)+(1))|0);
     $j=$630;
    }
    $j=272;
    while(1) {
     $633=$j;
     $634=($633|0)<1600;
     if (!($634)) {
      break;
     }
     $636=$j;
     $637=((($636)-(272))|0);
     $638=$ch;
     $639=(($inbuf+($638<<2))|0);
     $640=((HEAP32[(($639)>>2)])|0);
     $641=(($640+($637<<2))|0);
     $642=(+(HEAPF32[(($641)>>2)]));
     $643=$642;
     $644=$j;
     $645=$ch;
     $646=$2;
     $647=(($646+85804)|0);
     $648=((HEAP32[(($647)>>2)])|0);
     $649=(($648+24)|0);
     $650=(($649+((($645)*(12800))&-1))|0);
     $651=(($650+($644<<3))|0);
     HEAPF64[(($651)>>3)]=$643;
     $653=$j;
     $654=((($653)+(1))|0);
     $j=$654;
    }
    $657=$ch;
    $658=((($657)+(1))|0);
    $ch=$658;
   }
   $660=$2;
   $661=(($660+84768)|0);
   $662=(($661+140)|0);
   HEAPF32[(($662)>>2)]=1.0;
   $663=$2;
   $664=$masking;
   _set_frame_pinfo($663,$664);
  }
 } while(0);
 $666=$2;
 $667=(($666+84040)|0);
 $668=(($667+708)|0);
 $669=((HEAP32[(($668)>>2)])|0);
 $670=((($669)+(1))|0);
 HEAP32[(($668)>>2)]=$670;
 $671=$2;
 _updateStats($671);
 $672=$mp3count;
 $1=$672;
 $674=$1;
 STACKTOP=sp;return (($674)|0);
}


function _lame_encode_frame_init($gfc,$inbuf){
 $gfc=($gfc)|0;
 $inbuf=($inbuf)|0;
 var $1=0,$2=0,$cfg=0,$ch=0,$gr=0,$primebuff0=0,$primebuff1=0,$framesize=0,$i=0,$j=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$10=0,$11=0,$12=0,$13=0;
 var $14=0,$15=0,$16=0,$17=0,$19=0,$20=0,$21=0,$22=0,$23=0,$24=0,$25=0,$26=0,$28=0,$29=0,$30=0,$32=0,$33=0,$34=0,$35=0,$36=0;
 var $37=0,$39=0,$40=0,$43=0,$44=0,$45=0,$46=0,$47=0,$48=.0,$49=0,$50=0,$51=0,$52=0,$53=0,$54=0,$56=0,$57=0,$58=0,$59=0,$60=0;
 var $61=.0,$62=0,$63=0,$65=0,$66=0,$69=0,$70=0,$73=0,$74=0,$75=0,$76=0,$77=0,$80=0,$81=0,$82=0,$83=0,$84=0,$86=0,$87=0,$88=0;
 var $89=0,$90=0,$91=0,$92=0,$93=0,$95=0,$96=0,$99=0,$100=0,$102=0,$103=0,$104=0,label=0;
 var sp=0;sp=STACKTOP;STACKTOP=(STACKTOP+16112)|0;





 $primebuff0=((sp)|0);
 $primebuff1=(((sp)+(8056))|0);



 $1=$gfc;
 $2=$inbuf;
 $3=$1;
 $4=(($3+16)|0);
 $cfg=$4;
 $5=$1;
 $6=(($5+4)|0);
 $7=((HEAP32[(($6)>>2)])|0);
 $8=($7|0)==0;
 if (!($8)) {
  STACKTOP=sp;return;
 }
 $10=$cfg;
 $11=(($10+60)|0);
 $12=((HEAP32[(($11)>>2)])|0);
 $13=((($12)*(576))&-1);
 $framesize=$13;
 $14=$1;
 $15=(($14+4)|0);
 HEAP32[(($15)>>2)]=1;
 $16=$primebuff0;
 _memset((((($16)|0))|0), ((((0)|0))|0), ((((8056)|0))|0))|0;
 $17=$primebuff1;
 _memset((((($17)|0))|0), ((((0)|0))|0), ((((8056)|0))|0))|0;
 $i=0;
 $j=0;
 while(1) {
  $19=$i;
  $20=$cfg;
  $21=(($20+60)|0);
  $22=((HEAP32[(($21)>>2)])|0);
  $23=((($22)+(1))|0);
  $24=((($23)*(576))&-1);
  $25=((($24)+(286))|0);
  $26=($19|0)<($25|0);
  if (!($26)) {
   break;
  }
  $28=$i;
  $29=$framesize;
  $30=($28|0)<($29|0);
  if ($30) {
   $32=$i;
   $33=(($primebuff0+($32<<2))|0);
   HEAPF32[(($33)>>2)]=0.0;
   $34=$cfg;
   $35=(($34+56)|0);
   $36=((HEAP32[(($35)>>2)])|0);
   $37=($36|0)==2;
   if ($37) {
    $39=$i;
    $40=(($primebuff1+($39<<2))|0);
    HEAPF32[(($40)>>2)]=0.0;
   }
  } else {
   $43=$j;
   $44=$2;
   $45=(($44)|0);
   $46=((HEAP32[(($45)>>2)])|0);
   $47=(($46+($43<<2))|0);
   $48=(+(HEAPF32[(($47)>>2)]));
   $49=$i;
   $50=(($primebuff0+($49<<2))|0);
   HEAPF32[(($50)>>2)]=$48;
   $51=$cfg;
   $52=(($51+56)|0);
   $53=((HEAP32[(($52)>>2)])|0);
   $54=($53|0)==2;
   if ($54) {
    $56=$j;
    $57=$2;
    $58=(($57+4)|0);
    $59=((HEAP32[(($58)>>2)])|0);
    $60=(($59+($56<<2))|0);
    $61=(+(HEAPF32[(($60)>>2)]));
    $62=$i;
    $63=(($primebuff1+($62<<2))|0);
    HEAPF32[(($63)>>2)]=$61;
   }
   $65=$j;
   $66=((($65)+(1))|0);
   $j=$66;
  }
  $69=$i;
  $70=((($69)+(1))|0);
  $i=$70;
 }
 $gr=0;
 while(1) {
  $73=$gr;
  $74=$cfg;
  $75=(($74+60)|0);
  $76=((HEAP32[(($75)>>2)])|0);
  $77=($73|0)<($76|0);
  if (!($77)) {
   break;
  }
  $ch=0;
  while(1) {
   $80=$ch;
   $81=$cfg;
   $82=(($81+56)|0);
   $83=((HEAP32[(($82)>>2)])|0);
   $84=($80|0)<($83|0);
   if (!($84)) {
    break;
   }
   $86=$ch;
   $87=$gr;
   $88=$1;
   $89=(($88+304)|0);
   $90=(($89)|0);
   $91=(($90+((($87)*(10504))&-1))|0);
   $92=(($91+((($86)*(5252))&-1))|0);
   $93=(($92+4788)|0);
   HEAP32[(($93)>>2)]=2;
   $95=$ch;
   $96=((($95)+(1))|0);
   $ch=$96;
  }
  $99=$gr;
  $100=((($99)+(1))|0);
  $gr=$100;
 }
 $102=$1;
 $103=(($primebuff0)|0);
 $104=(($primebuff1)|0);
 _mdct_sub48($102,$103,$104);
 STACKTOP=sp;return;
}


function _adjust_ATH($gfc){
 $gfc=($gfc)|0;
 var $1=0,$cfg=0,$gr2_max=.0,$max_pow=.0,$adj_lim_new=.0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$11=0,$12=0,$13=0,$14=0,$16=0,$17=0,$18=0;
 var $19=0,$20=0,$21=.0,$22=0,$23=0,$24=0,$25=0,$26=0,$27=.0,$28=0,$29=0,$30=0,$31=0,$33=0,$34=0,$35=0,$36=0,$37=0,$38=.0,$39=.0;
 var $40=.0,$41=0,$42=0,$43=0,$44=0,$45=0,$46=.0,$47=.0,$48=.0,$50=.0,$51=.0,$52=.0,$53=.0,$54=.0,$55=.0,$57=0,$58=0,$59=0,$60=0,$62=.0;
 var $63=.0,$64=0,$66=.0,$68=.0,$70=.0,$72=.0,$73=.0,$74=.0,$75=.0,$76=0,$77=0,$78=0,$79=0,$80=.0,$81=.0,$82=.0,$83=.0,$84=.0,$85=0,$87=0;
 var $88=0,$89=0,$90=0,$91=.0,$92=.0,$93=0,$95=0,$96=0,$97=0,$98=0,$100=0,$101=0,$102=0,$103=0,$104=.0,$105=0,$106=0,$107=0,$108=0,$109=.0;
 var $110=0,$112=0,$113=0,$114=0,$115=0,$116=.0,$117=0,$118=0,$119=0,$120=0,$123=0,$124=0,$125=0,$126=0,$128=.0,$129=.0,$130=.0,$131=.0,$132=.0,$133=0;
 var $134=0,$135=0,$136=0,$137=.0,$138=.0,$139=0,$141=.0,$142=.0,$143=.0,$144=.0,$145=0,$146=0,$147=0,$148=0,$149=.0,$150=.0,$151=.0,$152=.0,$153=0,$154=0;
 var $155=0,$156=0,$157=.0,$158=.0,$159=0,$161=.0,$162=0,$163=0,$164=0,$165=0,$168=0,$169=0,$170=0,$171=0,$172=.0,$173=.0,$174=0,$176=.0,$177=0,$178=0;
 var $179=0,$180=0,$182=0,$183=0,$184=0,$185=0,$186=.0,$187=0,$188=0,$189=0,$190=0,$191=.0,$192=0,$194=0,$195=0,$196=0,$197=0,$198=.0,$199=0,$200=0;
 var $201=0,$202=0,$206=.0,$207=0,$208=0,$209=0,$210=0,label=0;
 var sp=0;sp=STACKTOP;





 $1=$gfc;
 $2=$1;
 $3=(($2+16)|0);
 $cfg=$3;
 $4=$1;
 $5=(($4+85796)|0);
 $6=((HEAP32[(($5)>>2)])|0);
 $7=(($6)|0);
 $8=((HEAP32[(($7)>>2)])|0);
 $9=($8|0)==0;
 if ($9) {
  $11=$1;
  $12=(($11+85796)|0);
  $13=((HEAP32[(($12)>>2)])|0);
  $14=(($13+8)|0);
  HEAPF32[(($14)>>2)]=1.0;
  STACKTOP=sp;return;
 }
 $16=$1;
 $17=(($16+27804)|0);
 $18=(($17)|0);
 $19=(($18)|0);
 $20=(($19)|0);
 $21=(+(HEAPF32[(($20)>>2)]));
 $max_pow=$21;
 $22=$1;
 $23=(($22+27804)|0);
 $24=(($23)|0);
 $25=(($24+8)|0);
 $26=(($25)|0);
 $27=(+(HEAPF32[(($26)>>2)]));
 $gr2_max=$27;
 $28=$cfg;
 $29=(($28+56)|0);
 $30=((HEAP32[(($29)>>2)])|0);
 $31=($30|0)==2;
 if ($31) {
  $33=$1;
  $34=(($33+27804)|0);
  $35=(($34)|0);
  $36=(($35)|0);
  $37=(($36+4)|0);
  $38=(+(HEAPF32[(($37)>>2)]));
  $39=$max_pow;
  $40=($39)+($38);
  $max_pow=$40;
  $41=$1;
  $42=(($41+27804)|0);
  $43=(($42)|0);
  $44=(($43+8)|0);
  $45=(($44+4)|0);
  $46=(+(HEAPF32[(($45)>>2)]));
  $47=$gr2_max;
  $48=($47)+($46);
  $gr2_max=$48;
 } else {
  $50=$max_pow;
  $51=$max_pow;
  $52=($51)+($50);
  $max_pow=$52;
  $53=$gr2_max;
  $54=$gr2_max;
  $55=($54)+($53);
  $gr2_max=$55;
 }
 $57=$cfg;
 $58=(($57+60)|0);
 $59=((HEAP32[(($58)>>2)])|0);
 $60=($59|0)==2;
 if ($60) {
  $62=$max_pow;
  $63=$gr2_max;
  $64=$62>$63;
  if ($64) {
   $66=$max_pow;
   $70=$66;
  } else {
   $68=$gr2_max;
   $70=$68;
  }

  $max_pow=$70;
 }
 $72=$max_pow;
 $73=$72;
 $74=($73)*((0.5));
 $75=$74;
 $max_pow=$75;
 $76=$1;
 $77=(($76+85796)|0);
 $78=((HEAP32[(($77)>>2)])|0);
 $79=(($78+4)|0);
 $80=(+(HEAPF32[(($79)>>2)]));
 $81=$max_pow;
 $82=($81)*($80);
 $max_pow=$82;
 $83=$max_pow;
 $84=$83;
 $85=$84>(0.03125);
 if ($85) {
  $87=$1;
  $88=(($87+85796)|0);
  $89=((HEAP32[(($88)>>2)])|0);
  $90=(($89+8)|0);
  $91=(+(HEAPF32[(($90)>>2)]));
  $92=$91;
  $93=$92>=(1.0);
  if ($93) {
   $95=$1;
   $96=(($95+85796)|0);
   $97=((HEAP32[(($96)>>2)])|0);
   $98=(($97+8)|0);
   HEAPF32[(($98)>>2)]=1.0;
  } else {
   $100=$1;
   $101=(($100+85796)|0);
   $102=((HEAP32[(($101)>>2)])|0);
   $103=(($102+8)|0);
   $104=(+(HEAPF32[(($103)>>2)]));
   $105=$1;
   $106=(($105+85796)|0);
   $107=((HEAP32[(($106)>>2)])|0);
   $108=(($107+12)|0);
   $109=(+(HEAPF32[(($108)>>2)]));
   $110=$104<$109;
   if ($110) {
    $112=$1;
    $113=(($112+85796)|0);
    $114=((HEAP32[(($113)>>2)])|0);
    $115=(($114+12)|0);
    $116=(+(HEAPF32[(($115)>>2)]));
    $117=$1;
    $118=(($117+85796)|0);
    $119=((HEAP32[(($118)>>2)])|0);
    $120=(($119+8)|0);
    HEAPF32[(($120)>>2)]=$116;
   }
  }
  $123=$1;
  $124=(($123+85796)|0);
  $125=((HEAP32[(($124)>>2)])|0);
  $126=(($125+12)|0);
  HEAPF32[(($126)>>2)]=1.0;
  STACKTOP=sp;return;
 }
 $128=$max_pow;
 $129=$128;
 $130=((31.98))*($129);
 $131=($130)+((0.000625));
 $132=$131;
 $adj_lim_new=$132;
 $133=$1;
 $134=(($133+85796)|0);
 $135=((HEAP32[(($134)>>2)])|0);
 $136=(($135+8)|0);
 $137=(+(HEAPF32[(($136)>>2)]));
 $138=$adj_lim_new;
 $139=$137>=$138;
 if ($139) {
  $141=$adj_lim_new;
  $142=$141;
  $143=($142)*((0.075));
  $144=($143)+((0.925));
  $145=$1;
  $146=(($145+85796)|0);
  $147=((HEAP32[(($146)>>2)])|0);
  $148=(($147+8)|0);
  $149=(+(HEAPF32[(($148)>>2)]));
  $150=$149;
  $151=($150)*($144);
  $152=$151;
  HEAPF32[(($148)>>2)]=$152;
  $153=$1;
  $154=(($153+85796)|0);
  $155=((HEAP32[(($154)>>2)])|0);
  $156=(($155+8)|0);
  $157=(+(HEAPF32[(($156)>>2)]));
  $158=$adj_lim_new;
  $159=$157<$158;
  if ($159) {
   $161=$adj_lim_new;
   $162=$1;
   $163=(($162+85796)|0);
   $164=((HEAP32[(($163)>>2)])|0);
   $165=(($164+8)|0);
   HEAPF32[(($165)>>2)]=$161;
  }
 } else {
  $168=$1;
  $169=(($168+85796)|0);
  $170=((HEAP32[(($169)>>2)])|0);
  $171=(($170+12)|0);
  $172=(+(HEAPF32[(($171)>>2)]));
  $173=$adj_lim_new;
  $174=$172>=$173;
  if ($174) {
   $176=$adj_lim_new;
   $177=$1;
   $178=(($177+85796)|0);
   $179=((HEAP32[(($178)>>2)])|0);
   $180=(($179+8)|0);
   HEAPF32[(($180)>>2)]=$176;
  } else {
   $182=$1;
   $183=(($182+85796)|0);
   $184=((HEAP32[(($183)>>2)])|0);
   $185=(($184+8)|0);
   $186=(+(HEAPF32[(($185)>>2)]));
   $187=$1;
   $188=(($187+85796)|0);
   $189=((HEAP32[(($188)>>2)])|0);
   $190=(($189+12)|0);
   $191=(+(HEAPF32[(($190)>>2)]));
   $192=$186<$191;
   if ($192) {
    $194=$1;
    $195=(($194+85796)|0);
    $196=((HEAP32[(($195)>>2)])|0);
    $197=(($196+12)|0);
    $198=(+(HEAPF32[(($197)>>2)]));
    $199=$1;
    $200=(($199+85796)|0);
    $201=((HEAP32[(($200)>>2)])|0);
    $202=(($201+8)|0);
    HEAPF32[(($202)>>2)]=$198;
   }
  }
 }
 $206=$adj_lim_new;
 $207=$1;
 $208=(($207+85796)|0);
 $209=((HEAP32[(($208)>>2)])|0);
 $210=(($209+12)|0);
 HEAPF32[(($210)>>2)]=$206;
 STACKTOP=sp;return;
}


function _updateStats($gfc){
 $gfc=($gfc)|0;
 var $1=0,$cfg=0,$eov=0,$gr=0,$ch=0,$bt=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$14=0,$15=0;
 var $16=0,$17=0,$18=0,$19=0,$20=0,$21=0,$22=0,$23=0,$24=0,$26=0,$27=0,$28=0,$29=0,$30=0,$31=0,$32=0,$33=0,$34=0,$35=0,$36=0;
 var $37=0,$38=0,$39=0,$40=0,$41=0,$42=0,$43=0,$44=0,$45=0,$46=0,$49=0,$50=0,$51=0,$52=0,$53=0,$56=0,$57=0,$58=0,$59=0,$60=0;
 var $62=0,$63=0,$64=0,$65=0,$66=0,$67=0,$68=0,$69=0,$70=0,$71=0,$72=0,$73=0,$74=0,$75=0,$76=0,$77=0,$78=0,$79=0,$80=0,$83=0;
 var $84=0,$85=0,$86=0,$87=0,$88=0,$89=0,$90=0,$91=0,$92=0,$93=0,$94=0,$95=0,$96=0,$97=0,$98=0,$99=0,$100=0,$101=0,$102=0,$103=0;
 var $104=0,$105=0,$106=0,$107=0,$108=0,$109=0,$110=0,$111=0,$112=0,$113=0,$114=0,$116=0,$117=0,$120=0,$121=0,label=0;
 var sp=0;sp=STACKTOP;






 $1=$gfc;
 $2=$1;
 $3=(($2+16)|0);
 $cfg=$3;
 $4=$1;
 $5=(($4+84040)|0);
 $eov=$5;
 $6=$eov;
 $7=(($6+704)|0);
 $8=((HEAP32[(($7)>>2)])|0);
 $9=$eov;
 $10=(($9)|0);
 $11=(($10+((($8)*(20))&-1))|0);
 $12=(($11+16)|0);
 $13=((HEAP32[(($12)>>2)])|0);
 $14=((($13)+(1))|0);
 HEAP32[(($12)>>2)]=$14;
 $15=$eov;
 $16=(($15)|0);
 $17=(($16+300)|0);
 $18=(($17+16)|0);
 $19=((HEAP32[(($18)>>2)])|0);
 $20=((($19)+(1))|0);
 HEAP32[(($18)>>2)]=$20;
 $21=$cfg;
 $22=(($21+56)|0);
 $23=((HEAP32[(($22)>>2)])|0);
 $24=($23|0)==2;
 if ($24) {
  $26=$eov;
  $27=(($26+716)|0);
  $28=((HEAP32[(($27)>>2)])|0);
  $29=$eov;
  $30=(($29+704)|0);
  $31=((HEAP32[(($30)>>2)])|0);
  $32=$eov;
  $33=(($32)|0);
  $34=(($33+((($31)*(20))&-1))|0);
  $35=(($34+($28<<2))|0);
  $36=((HEAP32[(($35)>>2)])|0);
  $37=((($36)+(1))|0);
  HEAP32[(($35)>>2)]=$37;
  $38=$eov;
  $39=(($38+716)|0);
  $40=((HEAP32[(($39)>>2)])|0);
  $41=$eov;
  $42=(($41)|0);
  $43=(($42+300)|0);
  $44=(($43+($40<<2))|0);
  $45=((HEAP32[(($44)>>2)])|0);
  $46=((($45)+(1))|0);
  HEAP32[(($44)>>2)]=$46;
 }
 $gr=0;
 while(1) {
  $49=$gr;
  $50=$cfg;
  $51=(($50+60)|0);
  $52=((HEAP32[(($51)>>2)])|0);
  $53=($49|0)<($52|0);
  if (!($53)) {
   break;
  }
  $ch=0;
  while(1) {
   $56=$ch;
   $57=$cfg;
   $58=(($57+56)|0);
   $59=((HEAP32[(($58)>>2)])|0);
   $60=($56|0)<($59|0);
   if (!($60)) {
    break;
   }
   $62=$ch;
   $63=$gr;
   $64=$1;
   $65=(($64+304)|0);
   $66=(($65)|0);
   $67=(($66+((($63)*(10504))&-1))|0);
   $68=(($67+((($62)*(5252))&-1))|0);
   $69=(($68+4788)|0);
   $70=((HEAP32[(($69)>>2)])|0);
   $bt=$70;
   $71=$ch;
   $72=$gr;
   $73=$1;
   $74=(($73+304)|0);
   $75=(($74)|0);
   $76=(($75+((($72)*(10504))&-1))|0);
   $77=(($76+((($71)*(5252))&-1))|0);
   $78=(($77+4792)|0);
   $79=((HEAP32[(($78)>>2)])|0);
   $80=($79|0)!=0;
   if ($80) {
    $bt=4;
   }
   $83=$bt;
   $84=$eov;
   $85=(($84+704)|0);
   $86=((HEAP32[(($85)>>2)])|0);
   $87=$eov;
   $88=(($87+320)|0);
   $89=(($88+((($86)*(24))&-1))|0);
   $90=(($89+($83<<2))|0);
   $91=((HEAP32[(($90)>>2)])|0);
   $92=((($91)+(1))|0);
   HEAP32[(($90)>>2)]=$92;
   $93=$eov;
   $94=(($93+704)|0);
   $95=((HEAP32[(($94)>>2)])|0);
   $96=$eov;
   $97=(($96+320)|0);
   $98=(($97+((($95)*(24))&-1))|0);
   $99=(($98+20)|0);
   $100=((HEAP32[(($99)>>2)])|0);
   $101=((($100)+(1))|0);
   HEAP32[(($99)>>2)]=$101;
   $102=$bt;
   $103=$eov;
   $104=(($103+320)|0);
   $105=(($104+360)|0);
   $106=(($105+($102<<2))|0);
   $107=((HEAP32[(($106)>>2)])|0);
   $108=((($107)+(1))|0);
   HEAP32[(($106)>>2)]=$108;
   $109=$eov;
   $110=(($109+320)|0);
   $111=(($110+360)|0);
   $112=(($111+20)|0);
   $113=((HEAP32[(($112)>>2)])|0);
   $114=((($113)+(1))|0);
   HEAP32[(($112)>>2)]=$114;
   $116=$ch;
   $117=((($116)+(1))|0);
   $ch=$117;
  }
  $120=$gr;
  $121=((($120)+(1))|0);
  $gr=$121;
 }
 STACKTOP=sp;return;
}


function _malloc($bytes){
 $bytes=($bytes)|0;
 var $1=0,$3=0,$5=0,$6=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$15=0,$16=0,$17=0,$18=0,$19=0,$20=0,$_sum11=0,$21=0,$22=0,$23=0;
 var $24=0,$25=0,$27=0,$28=0,$29=0,$31=0,$32=0,$33=0,$35=0,$36=0,$37=0,$40=0,$41=0,$42=0,$43=0,$_sum1314=0,$44=0,$45=0,$46=0,$47=0;
 var $48=0,$50=0,$51=0,$53=0,$55=0,$56=0,$57=0,$58=0,$59=0,$60=0,$61=0,$62=0,$63=0,$64=0,$65=0,$66=0,$67=0,$68=0,$69=0,$70=0;
 var $71=0,$72=0,$73=0,$74=0,$75=0,$76=0,$77=0,$78=0,$79=0,$80=0,$81=0,$82=0,$83=0,$84=0,$85=0,$_sum4=0,$86=0,$87=0,$88=0,$89=0;
 var $90=0,$92=0,$93=0,$94=0,$96=0,$97=0,$98=0,$100=0,$101=0,$102=0,$105=0,$106=0,$107=0,$108=0,$109=0,$110=0,$111=0,$112=0,$_sum67=0,$113=0;
 var $114=0,$115=0,$116=0,$117=0,$118=0,$120=0,$121=0,$122=0,$123=0,$124=0,$125=0,$126=0,$127=0,$128=0,$130=0,$_sum9_pre=0,$_pre=0,$_sum10=0,$132=0,$133=0;
 var $134=0,$135=0,$136=0,$_pre_phi=0,$F4_0=0,$139=0,$140=0,$141=0,$143=0,$145=0,$146=0,$148=0,$149=0,$150=0,$151=0,$152=0,$153=0,$154=0,$155=0,$156=0;
 var $157=0,$158=0,$159=0,$160=0,$161=0,$162=0,$163=0,$164=0,$165=0,$166=0,$167=0,$168=0,$169=0,$170=0,$171=0,$172=0,$173=0,$174=0,$175=0,$176=0;
 var $rsize_0_i=0,$v_0_i=0,$t_0_i=0,$178=0,$179=0,$180=0,$182=0,$183=0,$184=0,$185=0,$186=0,$187=0,$188=0,$189=0,$190=0,$_rsize_0_i=0,$_v_0_i=0,$v_0_i_lcssa=0,$rsize_0_i_lcssa=0,$192=0;
 var $193=0,$194=0,$196=0,$197=0,$198=0,$200=0,$201=0,$202=0,$203=0,$204=0,$206=0,$207=0,$208=0,$209=0,$211=0,$212=0,$213=0,$215=0,$216=0,$217=0;
 var $220=0,$221=0,$222=0,$224=0,$225=0,$226=0,$RP_0_i_ph=0,$R_0_i_ph=0,$RP_0_i=0,$R_0_i=0,$227=0,$228=0,$229=0,$RP_0_i_be=0,$R_0_i_be=0,$231=0,$232=0,$233=0,$R_0_i_lcssa=0,$RP_0_i_lcssa=0;
 var $235=0,$236=0,$R_1_i=0,$240=0,$242=0,$243=0,$244=0,$245=0,$246=0,$cond_i=0,$248=0,$249=0,$250=0,$251=0,$252=0,$254=0,$255=0,$256=0,$258=0,$259=0;
 var $260=0,$263=0,$266=0,$268=0,$269=0,$270=0,$272=0,$273=0,$274=0,$275=0,$277=0,$278=0,$279=0,$281=0,$282=0,$285=0,$286=0,$287=0,$289=0,$290=0;
 var $291=0,$293=0,$294=0,$298=0,$300=0,$301=0,$302=0,$_sum4_i=0,$303=0,$304=0,$305=0,$306=0,$308=0,$309=0,$310=0,$_sum_i41=0,$311=0,$312=0,$_sum1_i=0,$313=0;
 var $314=0,$315=0,$316=0,$318=0,$319=0,$320=0,$321=0,$322=0,$323=0,$324=0,$325=0,$326=0,$328=0,$_sum2_pre_i=0,$_pre_i=0,$_sum3_i=0,$330=0,$331=0,$332=0,$333=0;
 var $334=0,$_pre_phi_i=0,$F1_0_i=0,$337=0,$338=0,$339=0,$342=0,$343=0,$345=0,$347=0,$348=0,$349=0,$350=0,$352=0,$353=0,$354=0,$356=0,$358=0,$359=0,$360=0;
 var $361=0,$362=0,$363=0,$364=0,$365=0,$366=0,$367=0,$368=0,$369=0,$370=0,$371=0,$372=0,$373=0,$374=0,$375=0,$376=0,$377=0,$378=0,$379=0,$idx_0_i=0;
 var $381=0,$382=0,$383=0,$385=0,$387=0,$388=0,$390=0,$391=0,$rst_0_i=0,$sizebits_0_i=0,$t_0_i16=0,$rsize_0_i17=0,$v_0_i18=0,$393=0,$394=0,$395=0,$396=0,$397=0,$399=0,$rsize_1_i=0;
 var $v_1_i=0,$401=0,$402=0,$403=0,$404=0,$405=0,$406=0,$407=0,$or_cond21_i=0,$rst_1_i=0,$408=0,$409=0,$t_1_i_ph=0,$rsize_2_i_ph=0,$v_2_i_ph=0,$t_1_i=0,$rsize_2_i=0,$v_2_i=0,$410=0,$411=0;
 var $or_cond_i=0,$413=0,$414=0,$415=0,$416=0,$417=0,$419=0,$420=0,$421=0,$422=0,$423=0,$424=0,$425=0,$426=0,$427=0,$428=0,$429=0,$430=0,$431=0,$432=0;
 var $433=0,$434=0,$435=0,$436=0,$437=0,$438=0,$439=0,$440=0,$441=0,$442=0,$443=0,$t_2_ph_i=0,$444=0,$v_334_i=0,$rsize_333_i=0,$t_232_i=0,$445=0,$446=0,$447=0,$448=0;
 var $449=0,$_rsize_3_i=0,$t_2_v_3_i=0,$450=0,$451=0,$452=0,$t_232_i_be=0,$453=0,$454=0,$455=0,$t_2_v_3_i_lcssa=0,$_rsize_3_i_lcssa=0,$v_3_lcssa_i=0,$rsize_3_lcssa_i=0,$456=0,$458=0,$459=0,$460=0,$462=0,$463=0;
 var $464=0,$466=0,$467=0,$468=0,$470=0,$471=0,$472=0,$473=0,$474=0,$476=0,$477=0,$478=0,$479=0,$481=0,$482=0,$483=0,$485=0,$486=0,$487=0,$490=0;
 var $491=0,$492=0,$494=0,$495=0,$496=0,$RP_0_i19_ph=0,$R_0_i20_ph=0,$RP_0_i19=0,$R_0_i20=0,$497=0,$498=0,$499=0,$RP_0_i19_be=0,$R_0_i20_be=0,$501=0,$502=0,$503=0,$R_0_i20_lcssa=0,$RP_0_i19_lcssa=0,$505=0;
 var $506=0,$R_1_i22=0,$510=0,$512=0,$513=0,$514=0,$515=0,$516=0,$cond_i23=0,$518=0,$519=0,$520=0,$521=0,$522=0,$524=0,$525=0,$526=0,$528=0,$529=0,$530=0;
 var $533=0,$536=0,$538=0,$539=0,$540=0,$542=0,$543=0,$544=0,$545=0,$547=0,$548=0,$549=0,$551=0,$552=0,$555=0,$556=0,$557=0,$559=0,$560=0,$561=0;
 var $563=0,$564=0,$568=0,$570=0,$571=0,$572=0,$_sum19_i=0,$573=0,$574=0,$575=0,$576=0,$578=0,$579=0,$580=0,$_sum_i2540=0,$581=0,$582=0,$_sum1_i26=0,$583=0,$584=0;
 var $585=0,$586=0,$588=0,$589=0,$590=0,$591=0,$592=0,$593=0,$594=0,$596=0,$_sum15_pre_i=0,$_pre_i27=0,$_sum18_i=0,$598=0,$599=0,$600=0,$601=0,$602=0,$_pre_phi_i28=0,$F5_0_i=0;
 var $605=0,$_sum16_i=0,$606=0,$607=0,$_sum17_i=0,$608=0,$609=0,$611=0,$612=0,$613=0,$615=0,$617=0,$618=0,$619=0,$620=0,$621=0,$622=0,$623=0,$624=0,$625=0;
 var $626=0,$627=0,$628=0,$629=0,$630=0,$631=0,$632=0,$633=0,$634=0,$635=0,$636=0,$637=0,$638=0,$I7_0_i=0,$640=0,$_sum2_i=0,$641=0,$642=0,$_sum3_i29=0,$643=0;
 var $_sum4_i30=0,$644=0,$645=0,$646=0,$647=0,$648=0,$649=0,$650=0,$652=0,$653=0,$_sum5_i=0,$654=0,$655=0,$_sum6_i=0,$656=0,$657=0,$_sum7_i=0,$658=0,$659=0,$661=0;
 var $662=0,$664=0,$665=0,$667=0,$668=0,$669=0,$670=0,$671=0,$672=0,$674=0,$675=0,$676=0,$677=0,$678=0,$K12_031_i=0,$T_030_i=0,$680=0,$681=0,$682=0,$683=0;
 var $_lcssa166=0,$T_030_i_lcssa=0,$685=0,$686=0,$687=0,$_sum12_i=0,$689=0,$690=0,$_sum13_i=0,$691=0,$692=0,$_sum14_i=0,$693=0,$694=0,$_lcssa169=0,$T_0_lcssa_i=0,$696=0,$697=0,$698=0,$699=0;
 var $700=0,$701=0,$702=0,$or_cond26_i=0,$704=0,$_sum9_i=0,$705=0,$706=0,$_sum10_i=0,$707=0,$708=0,$_sum11_i=0,$709=0,$710=0,$712=0,$713=0,$nb_0=0,$714=0,$715=0,$717=0;
 var $718=0,$719=0,$721=0,$722=0,$723=0,$724=0,$_sum2=0,$725=0,$726=0,$727=0,$728=0,$729=0,$730=0,$732=0,$733=0,$734=0,$_sum1=0,$735=0,$736=0,$737=0;
 var $738=0,$740=0,$741=0,$743=0,$744=0,$746=0,$747=0,$748=0,$749=0,$750=0,$751=0,$_sum=0,$752=0,$753=0,$754=0,$755=0,$756=0,$757=0,$759=0,$760=0;
 var $762=0,$763=0,$764=0,$765=0,$767=0,$768=0,$769=0,$771=0,$772=0,$773=0,$774=0,$775=0,$776=0,$777=0,$779=0,$780=0,$782=0,$783=0,$784=0,$785=0;
 var $or_cond1_i=0,$787=0,$788=0,$789=0,$791=0,$792=0,$794=0,$sp_0_i_i=0,$796=0,$797=0,$798=0,$800=0,$801=0,$802=0,$803=0,$805=0,$806=0,$807=0,$_lcssa164=0,$_lcssa162=0;
 var $sp_0_i_i_lcssa=0,$808=0,$809=0,$810=0,$812=0,$813=0,$814=0,$815=0,$816=0,$818=0,$819=0,$820=0,$821=0,$822=0,$ssize_0_i=0,$824=0,$825=0,$826=0,$827=0,$or_cond_i31=0;
 var $829=0,$830=0,$832=0,$833=0,$or_cond2_i=0,$835=0,$836=0,$838=0,$839=0,$840=0,$841=0,$843=0,$844=0,$845=0,$846=0,$847=0,$ssize_1_i=0,$br_0_i=0,$849=0,$br_030_i=0;
 var $ssize_129_i=0,$850=0,$851=0,$852=0,$or_cond5_i=0,$853=0,$or_cond4_i=0,$855=0,$856=0,$857=0,$858=0,$859=0,$860=0,$862=0,$863=0,$865=0,$866=0,$ssize_2_i=0,$868=0,$tsize_03141_i=0;
 var $869=0,$870=0,$tsize_1_i=0,$872=0,$874=0,$875=0,$876=0,$877=0,$or_cond3_i=0,$878=0,$or_cond6_i=0,$880=0,$881=0,$882=0,$883=0,$884=0,$_tsize_1_i=0,$tbase_245_i=0,$tsize_244_i=0,$885=0;
 var $886=0,$887=0,$888=0,$891=0,$892=0,$894=0,$895=0,$896=0,$or_cond8_i=0,$899=0,$i_02_i_i=0,$901=0,$902=0,$903=0,$_sum_i_i=0,$904=0,$_sum1_i_i=0,$905=0,$906=0,$907=0;
 var $908=0,$909=0,$910=0,$911=0,$912=0,$914=0,$915=0,$916=0,$917=0,$918=0,$919=0,$920=0,$_sum_i12_i=0,$921=0,$922=0,$_sum2_i_i=0,$923=0,$924=0,$925=0,$sp_074_i=0;
 var $926=0,$927=0,$928=0,$929=0,$930=0,$931=0,$933=0,$934=0,$935=0,$_lcssa159=0,$_lcssa157=0,$_lcssa155=0,$sp_074_i_lcssa=0,$936=0,$937=0,$938=0,$939=0,$941=0,$942=0,$943=0;
 var $or_cond47_i=0,$945=0,$946=0,$947=0,$948=0,$949=0,$950=0,$951=0,$952=0,$953=0,$955=0,$956=0,$957=0,$958=0,$959=0,$960=0,$961=0,$_sum_i16_i=0,$962=0,$963=0;
 var $_sum2_i17_i=0,$964=0,$965=0,$966=0,$967=0,$968=0,$970=0,$sp_173_i=0,$972=0,$973=0,$974=0,$976=0,$977=0,$978=0,$_lcssa152=0,$sp_173_i_lcssa=0,$979=0,$980=0,$981=0,$982=0;
 var $984=0,$985=0,$986=0,$987=0,$988=0,$989=0,$990=0,$992=0,$993=0,$995=0,$996=0,$_sum102_i=0,$997=0,$998=0,$999=0,$1000=0,$1002=0,$1003=0,$1005=0,$_sum103_i=0;
 var $1006=0,$1007=0,$1008=0,$1009=0,$1010=0,$_sum_i19_i=0,$1011=0,$1012=0,$1013=0,$1014=0,$_sum1_i20_i=0,$1015=0,$1016=0,$1017=0,$1018=0,$1020=0,$1021=0,$1022=0,$_sum46_i_i=0,$1023=0;
 var $1024=0,$1026=0,$1027=0,$1029=0,$1030=0,$1031=0,$_sum44_i_i=0,$1032=0,$1033=0,$_sum45_i_i=0,$1034=0,$1035=0,$_sum2_i21_i=0,$_sum104_i=0,$1037=0,$1038=0,$1039=0,$1040=0,$1041=0,$1043=0;
 var $1044=0,$1045=0,$_sum3940_i_i=0,$_sum114_i=0,$1047=0,$1048=0,$1049=0,$_sum41_i_i=0,$_sum115_i=0,$1050=0,$1051=0,$1052=0,$1053=0,$1054=0,$1055=0,$1056=0,$1058=0,$1059=0,$1060=0,$1062=0;
 var $1063=0,$1064=0,$1065=0,$1067=0,$1068=0,$1069=0,$1070=0,$1072=0,$_pre62_i_i=0,$1074=0,$1075=0,$1076=0,$1078=0,$1079=0,$1080=0,$_pre_phi63_i_i=0,$1081=0,$1083=0,$_sum34_i_i=0,$_sum105_i=0;
 var $1084=0,$1085=0,$1086=0,$_sum5_i_i=0,$_sum106_i=0,$1087=0,$1088=0,$1089=0,$1090=0,$_sum3637_i_i=0,$_sum107_i=0,$1092=0,$1093=0,$1094=0,$1095=0,$1096=0,$1097=0,$1099=0,$1100=0,$1101=0;
 var $1103=0,$1104=0,$1105=0,$_sum67_i_i=0,$_sum112_i=0,$1108=0,$1109=0,$1110=0,$1111=0,$_sum113_i=0,$1113=0,$1114=0,$1115=0,$1116=0,$RP_0_i_i_ph=0,$R_0_i_i_ph=0,$RP_0_i_i=0,$R_0_i_i=0,$1117=0,$1118=0;
 var $1119=0,$RP_0_i_i_be=0,$R_0_i_i_be=0,$1121=0,$1122=0,$1123=0,$R_0_i_i_lcssa=0,$RP_0_i_i_lcssa=0,$1125=0,$1126=0,$1127=0,$R_1_i_i=0,$1131=0,$_sum31_i_i=0,$_sum108_i=0,$1133=0,$1134=0,$1135=0,$1136=0,$1137=0;
 var $1138=0,$cond_i_i=0,$1140=0,$1141=0,$1142=0,$1143=0,$1144=0,$1146=0,$1147=0,$1148=0,$1150=0,$1151=0,$1152=0,$1155=0,$1158=0,$1160=0,$1161=0,$1162=0,$1164=0,$_sum3233_i_i=0;
 var $_sum109_i=0,$1165=0,$1166=0,$1167=0,$1168=0,$1170=0,$1171=0,$1172=0,$1174=0,$1175=0,$_sum110_i=0,$1178=0,$1179=0,$1180=0,$1181=0,$1183=0,$1184=0,$1185=0,$1187=0,$1188=0;
 var $_sum9_i_i=0,$_sum111_i=0,$1192=0,$1193=0,$1194=0,$qsize_0_i_i=0,$oldfirst_0_i_i=0,$1196=0,$1197=0,$1198=0,$1199=0,$_sum10_i_i=0,$1200=0,$1201=0,$_sum11_i_i=0,$1202=0,$1203=0,$1204=0,$1205=0,$1207=0;
 var $1208=0,$1209=0,$1210=0,$1211=0,$1212=0,$1213=0,$1215=0,$_sum27_pre_i_i=0,$_pre_i22_i=0,$_sum30_i_i=0,$1217=0,$1218=0,$1219=0,$1220=0,$1221=0,$_pre_phi_i23_i=0,$F4_0_i_i=0,$1224=0,$_sum28_i_i=0,$1225=0;
 var $1226=0,$_sum29_i_i=0,$1227=0,$1228=0,$1230=0,$1231=0,$1232=0,$1234=0,$1236=0,$1237=0,$1238=0,$1239=0,$1240=0,$1241=0,$1242=0,$1243=0,$1244=0,$1245=0,$1246=0,$1247=0;
 var $1248=0,$1249=0,$1250=0,$1251=0,$1252=0,$1253=0,$1254=0,$1255=0,$1256=0,$1257=0,$I7_0_i_i=0,$1259=0,$_sum12_i24_i=0,$1260=0,$1261=0,$_sum13_i_i=0,$1262=0,$_sum14_i_i=0,$1263=0,$1264=0;
 var $1265=0,$1266=0,$1267=0,$1268=0,$1269=0,$1271=0,$1272=0,$_sum15_i_i=0,$1273=0,$1274=0,$_sum16_i_i=0,$1275=0,$1276=0,$_sum17_i_i=0,$1277=0,$1278=0,$1280=0,$1281=0,$1283=0,$1284=0;
 var $1286=0,$1287=0,$1288=0,$1289=0,$1290=0,$1291=0,$1293=0,$1294=0,$1295=0,$1296=0,$1297=0,$K8_057_i_i=0,$T_056_i_i=0,$1299=0,$1300=0,$1301=0,$1302=0,$_lcssa=0,$T_056_i_i_lcssa=0,$1304=0;
 var $1305=0,$1306=0,$_sum24_i_i=0,$1308=0,$1309=0,$_sum25_i_i=0,$1310=0,$1311=0,$_sum26_i_i=0,$1312=0,$1313=0,$_lcssa142=0,$T_0_lcssa_i26_i=0,$1315=0,$1316=0,$1317=0,$1318=0,$1319=0,$1320=0,$1321=0;
 var $or_cond_i27_i=0,$1323=0,$_sum21_i_i=0,$1324=0,$1325=0,$_sum22_i_i=0,$1326=0,$1327=0,$_sum23_i_i=0,$1328=0,$1329=0,$_sum1819_i_i=0,$1330=0,$1331=0,$sp_0_i_i_i=0,$1333=0,$1334=0,$1335=0,$1337=0,$1338=0;
 var $1339=0,$1340=0,$1342=0,$1343=0,$_lcssa150=0,$_lcssa149=0,$_lcssa148=0,$_sum_i13_i=0,$_sum1_i14_i=0,$1344=0,$1345=0,$1346=0,$1347=0,$1349=0,$1350=0,$1352=0,$_sum2_i15_i=0,$1353=0,$1354=0,$1355=0;
 var $1356=0,$1357=0,$1358=0,$1359=0,$1360=0,$1361=0,$1362=0,$1363=0,$1364=0,$1366=0,$1367=0,$1368=0,$1369=0,$1370=0,$1371=0,$1372=0,$_sum_i_i_i=0,$1373=0,$1374=0,$_sum2_i_i_i=0;
 var $1375=0,$1376=0,$1377=0,$1378=0,$1379=0,$1380=0,$1381=0,$1382=0,$1383=0,$1384=0,$1385=0,$1386=0,$1387=0,$1388=0,$1389=0,$1391=0,$1392=0,$1393=0,$1394=0,$_sum3_i_i=0;
 var $1395=0,$1396=0,$1397=0,$1398=0,$1399=0,$1400=0,$1401=0,$1402=0,$1403=0,$1405=0,$1406=0,$1407=0,$1408=0,$1409=0,$1410=0,$1411=0,$1413=0,$_sum11_pre_i_i=0,$_pre_i_i=0,$_sum12_i_i=0;
 var $1415=0,$1416=0,$1417=0,$1418=0,$1419=0,$_pre_phi_i_i=0,$F_0_i_i=0,$1422=0,$1423=0,$1424=0,$1426=0,$1427=0,$1428=0,$1430=0,$1432=0,$1433=0,$1434=0,$1435=0,$1436=0,$1437=0;
 var $1438=0,$1439=0,$1440=0,$1441=0,$1442=0,$1443=0,$1444=0,$1445=0,$1446=0,$1447=0,$1448=0,$1449=0,$1450=0,$1451=0,$1452=0,$1453=0,$I1_0_i_i=0,$1455=0,$1456=0,$I1_0_c_i_i=0;
 var $1457=0,$1458=0,$1459=0,$1460=0,$1461=0,$1462=0,$1464=0,$1465=0,$_c_i_i=0,$1466=0,$1467=0,$1469=0,$1470=0,$1472=0,$1473=0,$1475=0,$1476=0,$1477=0,$1478=0,$1479=0;
 var $1480=0,$1482=0,$1483=0,$1484=0,$1485=0,$1486=0,$K2_016_i_i=0,$T_015_i_i=0,$1488=0,$1489=0,$1490=0,$1491=0,$_lcssa144=0,$T_015_i_i_lcssa=0,$1493=0,$1494=0,$1495=0,$1497=0,$T_0_c8_i_i=0,$1498=0;
 var $1499=0,$_lcssa147=0,$T_0_lcssa_i_i=0,$1501=0,$1502=0,$1503=0,$1504=0,$1505=0,$1506=0,$1507=0,$or_cond_i_i=0,$1509=0,$1510=0,$_c7_i_i=0,$1511=0,$T_0_c_i_i=0,$1512=0,$1513=0,$1514=0,$1516=0;
 var $1517=0,$1518=0,$1519=0,$1520=0,$1521=0,$_sum_i34=0,$1522=0,$1523=0,$1524=0,$1525=0,$1526=0,$1527=0,$1528=0,$mem_0=0,label=0;

 $1=($bytes>>>0)<((245)>>>0);
 do {
  if ($1) {
   $3=($bytes>>>0)<((11)>>>0);
   if ($3) {
    $8=16;
   } else {
    $5=((($bytes)+(11))|0);
    $6=$5&-8;
    $8=$6;
   }

   $9=$8>>>3;
   $10=((HEAP32[((102448)>>2)])|0);
   $11=$10>>>($9>>>0);
   $12=$11&3;
   $13=($12|0)==0;
   if (!($13)) {
    $15=$11&1;
    $16=$15^1;
    $17=((($16)+($9))|0);
    $18=$17<<1;
    $19=((102488+($18<<2))|0);
    $20=$19;
    $_sum11=((($18)+(2))|0);
    $21=((102488+($_sum11<<2))|0);
    $22=((HEAP32[(($21)>>2)])|0);
    $23=(($22+8)|0);
    $24=((HEAP32[(($23)>>2)])|0);
    $25=($20|0)==($24|0);
    do {
     if ($25) {
      $27=1<<$17;
      $28=$27^-1;
      $29=$10&$28;
      HEAP32[((102448)>>2)]=$29;
     } else {
      $31=$24;
      $32=((HEAP32[((102464)>>2)])|0);
      $33=($31>>>0)<($32>>>0);
      if ($33) {
       _abort(); return ((0)|0);
       return ((0)|0);
      }
      $35=(($24+12)|0);
      $36=((HEAP32[(($35)>>2)])|0);
      $37=($36|0)==($22|0);
      if ($37) {
       HEAP32[(($35)>>2)]=$20;
       HEAP32[(($21)>>2)]=$24;
       break;
      } else {
       _abort(); return ((0)|0);
       return ((0)|0);
      }
     }
    } while(0);
    $40=$17<<3;
    $41=$40|3;
    $42=(($22+4)|0);
    HEAP32[(($42)>>2)]=$41;
    $43=$22;
    $_sum1314=$40|4;
    $44=(($43+$_sum1314)|0);
    $45=$44;
    $46=((HEAP32[(($45)>>2)])|0);
    $47=$46|1;
    HEAP32[(($45)>>2)]=$47;
    $48=$23;
    $mem_0=$48;

    return (($mem_0)|0);
   }
   $50=((HEAP32[((102456)>>2)])|0);
   $51=($8>>>0)>($50>>>0);
   if (!($51)) {
    $nb_0=$8;
    break;
   }
   $53=($11|0)==0;
   if (!($53)) {
    $55=$11<<$9;
    $56=2<<$9;
    $57=(((-$56))|0);
    $58=$56|$57;
    $59=$55&$58;
    $60=(((-$59))|0);
    $61=$59&$60;
    $62=((($61)-(1))|0);
    $63=$62>>>12;
    $64=$63&16;
    $65=$62>>>($64>>>0);
    $66=$65>>>5;
    $67=$66&8;
    $68=$67|$64;
    $69=$65>>>($67>>>0);
    $70=$69>>>2;
    $71=$70&4;
    $72=$68|$71;
    $73=$69>>>($71>>>0);
    $74=$73>>>1;
    $75=$74&2;
    $76=$72|$75;
    $77=$73>>>($75>>>0);
    $78=$77>>>1;
    $79=$78&1;
    $80=$76|$79;
    $81=$77>>>($79>>>0);
    $82=((($80)+($81))|0);
    $83=$82<<1;
    $84=((102488+($83<<2))|0);
    $85=$84;
    $_sum4=((($83)+(2))|0);
    $86=((102488+($_sum4<<2))|0);
    $87=((HEAP32[(($86)>>2)])|0);
    $88=(($87+8)|0);
    $89=((HEAP32[(($88)>>2)])|0);
    $90=($85|0)==($89|0);
    do {
     if ($90) {
      $92=1<<$82;
      $93=$92^-1;
      $94=$10&$93;
      HEAP32[((102448)>>2)]=$94;
     } else {
      $96=$89;
      $97=((HEAP32[((102464)>>2)])|0);
      $98=($96>>>0)<($97>>>0);
      if ($98) {
       _abort(); return ((0)|0);
       return ((0)|0);
      }
      $100=(($89+12)|0);
      $101=((HEAP32[(($100)>>2)])|0);
      $102=($101|0)==($87|0);
      if ($102) {
       HEAP32[(($100)>>2)]=$85;
       HEAP32[(($86)>>2)]=$89;
       break;
      } else {
       _abort(); return ((0)|0);
       return ((0)|0);
      }
     }
    } while(0);
    $105=$82<<3;
    $106=((($105)-($8))|0);
    $107=$8|3;
    $108=(($87+4)|0);
    HEAP32[(($108)>>2)]=$107;
    $109=$87;
    $110=(($109+$8)|0);
    $111=$110;
    $112=$106|1;
    $_sum67=$8|4;
    $113=(($109+$_sum67)|0);
    $114=$113;
    HEAP32[(($114)>>2)]=$112;
    $115=(($109+$105)|0);
    $116=$115;
    HEAP32[(($116)>>2)]=$106;
    $117=((HEAP32[((102456)>>2)])|0);
    $118=($117|0)==0;
    if (!($118)) {
     $120=((HEAP32[((102468)>>2)])|0);
     $121=$117>>>3;
     $122=$121<<1;
     $123=((102488+($122<<2))|0);
     $124=$123;
     $125=((HEAP32[((102448)>>2)])|0);
     $126=1<<$121;
     $127=$125&$126;
     $128=($127|0)==0;
     do {
      if ($128) {
       $130=$125|$126;
       HEAP32[((102448)>>2)]=$130;
       $_sum9_pre=((($122)+(2))|0);
       $_pre=((102488+($_sum9_pre<<2))|0);
       $F4_0=$124;$_pre_phi=$_pre;
      } else {
       $_sum10=((($122)+(2))|0);
       $132=((102488+($_sum10<<2))|0);
       $133=((HEAP32[(($132)>>2)])|0);
       $134=$133;
       $135=((HEAP32[((102464)>>2)])|0);
       $136=($134>>>0)<($135>>>0);
       if (!($136)) {
        $F4_0=$133;$_pre_phi=$132;
        break;
       }
       _abort(); return ((0)|0);
       return ((0)|0);
      }
     } while(0);


     HEAP32[(($_pre_phi)>>2)]=$120;
     $139=(($F4_0+12)|0);
     HEAP32[(($139)>>2)]=$120;
     $140=(($120+8)|0);
     HEAP32[(($140)>>2)]=$F4_0;
     $141=(($120+12)|0);
     HEAP32[(($141)>>2)]=$124;
    }
    HEAP32[((102456)>>2)]=$106;
    HEAP32[((102468)>>2)]=$111;
    $143=$88;
    $mem_0=$143;

    return (($mem_0)|0);
   }
   $145=((HEAP32[((102452)>>2)])|0);
   $146=($145|0)==0;
   if ($146) {
    $nb_0=$8;
    break;
   }
   $148=(((-$145))|0);
   $149=$145&$148;
   $150=((($149)-(1))|0);
   $151=$150>>>12;
   $152=$151&16;
   $153=$150>>>($152>>>0);
   $154=$153>>>5;
   $155=$154&8;
   $156=$155|$152;
   $157=$153>>>($155>>>0);
   $158=$157>>>2;
   $159=$158&4;
   $160=$156|$159;
   $161=$157>>>($159>>>0);
   $162=$161>>>1;
   $163=$162&2;
   $164=$160|$163;
   $165=$161>>>($163>>>0);
   $166=$165>>>1;
   $167=$166&1;
   $168=$164|$167;
   $169=$165>>>($167>>>0);
   $170=((($168)+($169))|0);
   $171=((102752+($170<<2))|0);
   $172=((HEAP32[(($171)>>2)])|0);
   $173=(($172+4)|0);
   $174=((HEAP32[(($173)>>2)])|0);
   $175=$174&-8;
   $176=((($175)-($8))|0);
   $t_0_i=$172;$v_0_i=$172;$rsize_0_i=$176;
   while(1) {



    $178=(($t_0_i+16)|0);
    $179=((HEAP32[(($178)>>2)])|0);
    $180=($179|0)==0;
    if ($180) {
     $182=(($t_0_i+20)|0);
     $183=((HEAP32[(($182)>>2)])|0);
     $184=($183|0)==0;
     if ($184) {
      $rsize_0_i_lcssa=$rsize_0_i;$v_0_i_lcssa=$v_0_i;
      break;
     } else {
      $185=$183;
     }
    } else {
     $185=$179;
    }

    $186=(($185+4)|0);
    $187=((HEAP32[(($186)>>2)])|0);
    $188=$187&-8;
    $189=((($188)-($8))|0);
    $190=($189>>>0)<($rsize_0_i>>>0);
    $_rsize_0_i=($190?$189:$rsize_0_i);
    $_v_0_i=($190?$185:$v_0_i);
    $t_0_i=$185;$v_0_i=$_v_0_i;$rsize_0_i=$_rsize_0_i;
   }


   $192=$v_0_i_lcssa;
   $193=((HEAP32[((102464)>>2)])|0);
   $194=($192>>>0)<($193>>>0);
   if ($194) {
    _abort(); return ((0)|0);
    return ((0)|0);
   }
   $196=(($192+$8)|0);
   $197=$196;
   $198=($192>>>0)<($196>>>0);
   if (!($198)) {
    _abort(); return ((0)|0);
    return ((0)|0);
   }
   $200=(($v_0_i_lcssa+24)|0);
   $201=((HEAP32[(($200)>>2)])|0);
   $202=(($v_0_i_lcssa+12)|0);
   $203=((HEAP32[(($202)>>2)])|0);
   $204=($203|0)==($v_0_i_lcssa|0);
   do {
    if ($204) {
     $220=(($v_0_i_lcssa+20)|0);
     $221=((HEAP32[(($220)>>2)])|0);
     $222=($221|0)==0;
     if ($222) {
      $224=(($v_0_i_lcssa+16)|0);
      $225=((HEAP32[(($224)>>2)])|0);
      $226=($225|0)==0;
      if ($226) {
       $R_1_i=0;
       break;
      } else {
       $R_0_i_ph=$225;$RP_0_i_ph=$224;
      }
     } else {
      $R_0_i_ph=$221;$RP_0_i_ph=$220;
     }


     $R_0_i=$R_0_i_ph;$RP_0_i=$RP_0_i_ph;
     while(1) {


      $227=(($R_0_i+20)|0);
      $228=((HEAP32[(($227)>>2)])|0);
      $229=($228|0)==0;
      if ($229) {
       $231=(($R_0_i+16)|0);
       $232=((HEAP32[(($231)>>2)])|0);
       $233=($232|0)==0;
       if ($233) {
        $RP_0_i_lcssa=$RP_0_i;$R_0_i_lcssa=$R_0_i;
        break;
       } else {
        $R_0_i_be=$232;$RP_0_i_be=$231;
       }
      } else {
       $R_0_i_be=$228;$RP_0_i_be=$227;
      }


      $R_0_i=$R_0_i_be;$RP_0_i=$RP_0_i_be;
     }


     $235=$RP_0_i_lcssa;
     $236=($235>>>0)<($193>>>0);
     if ($236) {
      _abort(); return ((0)|0);
      return ((0)|0);
     } else {
      HEAP32[(($RP_0_i_lcssa)>>2)]=0;
      $R_1_i=$R_0_i_lcssa;
      break;
     }
    } else {
     $206=(($v_0_i_lcssa+8)|0);
     $207=((HEAP32[(($206)>>2)])|0);
     $208=$207;
     $209=($208>>>0)<($193>>>0);
     if ($209) {
      _abort(); return ((0)|0);
      return ((0)|0);
     }
     $211=(($207+12)|0);
     $212=((HEAP32[(($211)>>2)])|0);
     $213=($212|0)==($v_0_i_lcssa|0);
     if (!($213)) {
      _abort(); return ((0)|0);
      return ((0)|0);
     }
     $215=(($203+8)|0);
     $216=((HEAP32[(($215)>>2)])|0);
     $217=($216|0)==($v_0_i_lcssa|0);
     if ($217) {
      HEAP32[(($211)>>2)]=$203;
      HEAP32[(($215)>>2)]=$207;
      $R_1_i=$203;
      break;
     } else {
      _abort(); return ((0)|0);
      return ((0)|0);
     }
    }
   } while(0);

   $240=($201|0)==0;
   L81: do {
    if (!($240)) {
     $242=(($v_0_i_lcssa+28)|0);
     $243=((HEAP32[(($242)>>2)])|0);
     $244=((102752+($243<<2))|0);
     $245=((HEAP32[(($244)>>2)])|0);
     $246=($v_0_i_lcssa|0)==($245|0);
     do {
      if ($246) {
       HEAP32[(($244)>>2)]=$R_1_i;
       $cond_i=($R_1_i|0)==0;
       if (!($cond_i)) {
        break;
       }
       $248=((HEAP32[(($242)>>2)])|0);
       $249=1<<$248;
       $250=$249^-1;
       $251=((HEAP32[((102452)>>2)])|0);
       $252=$251&$250;
       HEAP32[((102452)>>2)]=$252;
       break L81;
      } else {
       $254=$201;
       $255=((HEAP32[((102464)>>2)])|0);
       $256=($254>>>0)<($255>>>0);
       if ($256) {
        _abort(); return ((0)|0);
        return ((0)|0);
       }
       $258=(($201+16)|0);
       $259=((HEAP32[(($258)>>2)])|0);
       $260=($259|0)==($v_0_i_lcssa|0);
       if ($260) {
        HEAP32[(($258)>>2)]=$R_1_i;
       } else {
        $263=(($201+20)|0);
        HEAP32[(($263)>>2)]=$R_1_i;
       }
       $266=($R_1_i|0)==0;
       if ($266) {
        break L81;
       }
      }
     } while(0);
     $268=$R_1_i;
     $269=((HEAP32[((102464)>>2)])|0);
     $270=($268>>>0)<($269>>>0);
     if ($270) {
      _abort(); return ((0)|0);
      return ((0)|0);
     }
     $272=(($R_1_i+24)|0);
     HEAP32[(($272)>>2)]=$201;
     $273=(($v_0_i_lcssa+16)|0);
     $274=((HEAP32[(($273)>>2)])|0);
     $275=($274|0)==0;
     do {
      if (!($275)) {
       $277=$274;
       $278=((HEAP32[((102464)>>2)])|0);
       $279=($277>>>0)<($278>>>0);
       if ($279) {
        _abort(); return ((0)|0);
        return ((0)|0);
       } else {
        $281=(($R_1_i+16)|0);
        HEAP32[(($281)>>2)]=$274;
        $282=(($274+24)|0);
        HEAP32[(($282)>>2)]=$R_1_i;
        break;
       }
      }
     } while(0);
     $285=(($v_0_i_lcssa+20)|0);
     $286=((HEAP32[(($285)>>2)])|0);
     $287=($286|0)==0;
     if ($287) {
      break;
     }
     $289=$286;
     $290=((HEAP32[((102464)>>2)])|0);
     $291=($289>>>0)<($290>>>0);
     if ($291) {
      _abort(); return ((0)|0);
      return ((0)|0);
     } else {
      $293=(($R_1_i+20)|0);
      HEAP32[(($293)>>2)]=$286;
      $294=(($286+24)|0);
      HEAP32[(($294)>>2)]=$R_1_i;
      break;
     }
    }
   } while(0);
   $298=($rsize_0_i_lcssa>>>0)<((16)>>>0);
   if ($298) {
    $300=((($rsize_0_i_lcssa)+($8))|0);
    $301=$300|3;
    $302=(($v_0_i_lcssa+4)|0);
    HEAP32[(($302)>>2)]=$301;
    $_sum4_i=((($300)+(4))|0);
    $303=(($192+$_sum4_i)|0);
    $304=$303;
    $305=((HEAP32[(($304)>>2)])|0);
    $306=$305|1;
    HEAP32[(($304)>>2)]=$306;
   } else {
    $308=$8|3;
    $309=(($v_0_i_lcssa+4)|0);
    HEAP32[(($309)>>2)]=$308;
    $310=$rsize_0_i_lcssa|1;
    $_sum_i41=$8|4;
    $311=(($192+$_sum_i41)|0);
    $312=$311;
    HEAP32[(($312)>>2)]=$310;
    $_sum1_i=((($rsize_0_i_lcssa)+($8))|0);
    $313=(($192+$_sum1_i)|0);
    $314=$313;
    HEAP32[(($314)>>2)]=$rsize_0_i_lcssa;
    $315=((HEAP32[((102456)>>2)])|0);
    $316=($315|0)==0;
    if (!($316)) {
     $318=((HEAP32[((102468)>>2)])|0);
     $319=$315>>>3;
     $320=$319<<1;
     $321=((102488+($320<<2))|0);
     $322=$321;
     $323=((HEAP32[((102448)>>2)])|0);
     $324=1<<$319;
     $325=$323&$324;
     $326=($325|0)==0;
     do {
      if ($326) {
       $328=$323|$324;
       HEAP32[((102448)>>2)]=$328;
       $_sum2_pre_i=((($320)+(2))|0);
       $_pre_i=((102488+($_sum2_pre_i<<2))|0);
       $F1_0_i=$322;$_pre_phi_i=$_pre_i;
      } else {
       $_sum3_i=((($320)+(2))|0);
       $330=((102488+($_sum3_i<<2))|0);
       $331=((HEAP32[(($330)>>2)])|0);
       $332=$331;
       $333=((HEAP32[((102464)>>2)])|0);
       $334=($332>>>0)<($333>>>0);
       if (!($334)) {
        $F1_0_i=$331;$_pre_phi_i=$330;
        break;
       }
       _abort(); return ((0)|0);
       return ((0)|0);
      }
     } while(0);


     HEAP32[(($_pre_phi_i)>>2)]=$318;
     $337=(($F1_0_i+12)|0);
     HEAP32[(($337)>>2)]=$318;
     $338=(($318+8)|0);
     HEAP32[(($338)>>2)]=$F1_0_i;
     $339=(($318+12)|0);
     HEAP32[(($339)>>2)]=$322;
    }
    HEAP32[((102456)>>2)]=$rsize_0_i_lcssa;
    HEAP32[((102468)>>2)]=$197;
   }
   $342=(($v_0_i_lcssa+8)|0);
   $343=$342;
   $mem_0=$343;

   return (($mem_0)|0);
  } else {
   $345=($bytes>>>0)>((4294967231)>>>0);
   if ($345) {
    $nb_0=-1;
    break;
   }
   $347=((($bytes)+(11))|0);
   $348=$347&-8;
   $349=((HEAP32[((102452)>>2)])|0);
   $350=($349|0)==0;
   if ($350) {
    $nb_0=$348;
    break;
   }
   $352=(((-$348))|0);
   $353=$347>>>8;
   $354=($353|0)==0;
   do {
    if ($354) {
     $idx_0_i=0;
    } else {
     $356=($348>>>0)>((16777215)>>>0);
     if ($356) {
      $idx_0_i=31;
      break;
     }
     $358=((($353)+(1048320))|0);
     $359=$358>>>16;
     $360=$359&8;
     $361=$353<<$360;
     $362=((($361)+(520192))|0);
     $363=$362>>>16;
     $364=$363&4;
     $365=$364|$360;
     $366=$361<<$364;
     $367=((($366)+(245760))|0);
     $368=$367>>>16;
     $369=$368&2;
     $370=$365|$369;
     $371=(((14)-($370))|0);
     $372=$366<<$369;
     $373=$372>>>15;
     $374=((($371)+($373))|0);
     $375=$374<<1;
     $376=((($374)+(7))|0);
     $377=$348>>>($376>>>0);
     $378=$377&1;
     $379=$378|$375;
     $idx_0_i=$379;
    }
   } while(0);

   $381=((102752+($idx_0_i<<2))|0);
   $382=((HEAP32[(($381)>>2)])|0);
   $383=($382|0)==0;
   if ($383) {
    $v_2_i=0;$rsize_2_i=$352;$t_1_i=0;
   } else {
    $385=($idx_0_i|0)==31;
    if ($385) {
     $390=0;
    } else {
     $387=$idx_0_i>>>1;
     $388=(((25)-($387))|0);
     $390=$388;
    }

    $391=$348<<$390;
    $v_0_i18=0;$rsize_0_i17=$352;$t_0_i16=$382;$sizebits_0_i=$391;$rst_0_i=0;
    while(1) {





     $393=(($t_0_i16+4)|0);
     $394=((HEAP32[(($393)>>2)])|0);
     $395=$394&-8;
     $396=((($395)-($348))|0);
     $397=($396>>>0)<($rsize_0_i17>>>0);
     if ($397) {
      $399=($395|0)==($348|0);
      if ($399) {
       $v_2_i_ph=$t_0_i16;$rsize_2_i_ph=$396;$t_1_i_ph=$t_0_i16;
       break;
      } else {
       $v_1_i=$t_0_i16;$rsize_1_i=$396;
      }
     } else {
      $v_1_i=$v_0_i18;$rsize_1_i=$rsize_0_i17;
     }


     $401=(($t_0_i16+20)|0);
     $402=((HEAP32[(($401)>>2)])|0);
     $403=$sizebits_0_i>>>31;
     $404=(($t_0_i16+16+($403<<2))|0);
     $405=((HEAP32[(($404)>>2)])|0);
     $406=($402|0)==0;
     $407=($402|0)==($405|0);
     $or_cond21_i=$406|$407;
     $rst_1_i=($or_cond21_i?$rst_0_i:$402);
     $408=($405|0)==0;
     $409=$sizebits_0_i<<1;
     if ($408) {
      $v_2_i_ph=$v_1_i;$rsize_2_i_ph=$rsize_1_i;$t_1_i_ph=$rst_1_i;
      break;
     } else {
      $v_0_i18=$v_1_i;$rsize_0_i17=$rsize_1_i;$t_0_i16=$405;$sizebits_0_i=$409;$rst_0_i=$rst_1_i;
     }
    }



    $v_2_i=$v_2_i_ph;$rsize_2_i=$rsize_2_i_ph;$t_1_i=$t_1_i_ph;
   }



   $410=($t_1_i|0)==0;
   $411=($v_2_i|0)==0;
   $or_cond_i=$410&$411;
   if ($or_cond_i) {
    $413=2<<$idx_0_i;
    $414=(((-$413))|0);
    $415=$413|$414;
    $416=$349&$415;
    $417=($416|0)==0;
    if ($417) {
     $nb_0=$348;
     break;
    }
    $419=(((-$416))|0);
    $420=$416&$419;
    $421=((($420)-(1))|0);
    $422=$421>>>12;
    $423=$422&16;
    $424=$421>>>($423>>>0);
    $425=$424>>>5;
    $426=$425&8;
    $427=$426|$423;
    $428=$424>>>($426>>>0);
    $429=$428>>>2;
    $430=$429&4;
    $431=$427|$430;
    $432=$428>>>($430>>>0);
    $433=$432>>>1;
    $434=$433&2;
    $435=$431|$434;
    $436=$432>>>($434>>>0);
    $437=$436>>>1;
    $438=$437&1;
    $439=$435|$438;
    $440=$436>>>($438>>>0);
    $441=((($439)+($440))|0);
    $442=((102752+($441<<2))|0);
    $443=((HEAP32[(($442)>>2)])|0);
    $t_2_ph_i=$443;
   } else {
    $t_2_ph_i=$t_1_i;
   }

   $444=($t_2_ph_i|0)==0;
   if ($444) {
    $rsize_3_lcssa_i=$rsize_2_i;$v_3_lcssa_i=$v_2_i;
   } else {
    $t_232_i=$t_2_ph_i;$rsize_333_i=$rsize_2_i;$v_334_i=$v_2_i;
    while(1) {



     $445=(($t_232_i+4)|0);
     $446=((HEAP32[(($445)>>2)])|0);
     $447=$446&-8;
     $448=((($447)-($348))|0);
     $449=($448>>>0)<($rsize_333_i>>>0);
     $_rsize_3_i=($449?$448:$rsize_333_i);
     $t_2_v_3_i=($449?$t_232_i:$v_334_i);
     $450=(($t_232_i+16)|0);
     $451=((HEAP32[(($450)>>2)])|0);
     $452=($451|0)==0;
     if ($452) {
      $453=(($t_232_i+20)|0);
      $454=((HEAP32[(($453)>>2)])|0);
      $455=($454|0)==0;
      if ($455) {
       $_rsize_3_i_lcssa=$_rsize_3_i;$t_2_v_3_i_lcssa=$t_2_v_3_i;
       break;
      } else {
       $t_232_i_be=$454;
      }
     } else {
      $t_232_i_be=$451;
     }

     $t_232_i=$t_232_i_be;$rsize_333_i=$_rsize_3_i;$v_334_i=$t_2_v_3_i;
    }


    $rsize_3_lcssa_i=$_rsize_3_i_lcssa;$v_3_lcssa_i=$t_2_v_3_i_lcssa;
   }


   $456=($v_3_lcssa_i|0)==0;
   if ($456) {
    $nb_0=$348;
    break;
   }
   $458=((HEAP32[((102456)>>2)])|0);
   $459=((($458)-($348))|0);
   $460=($rsize_3_lcssa_i>>>0)<($459>>>0);
   if (!($460)) {
    $nb_0=$348;
    break;
   }
   $462=$v_3_lcssa_i;
   $463=((HEAP32[((102464)>>2)])|0);
   $464=($462>>>0)<($463>>>0);
   if ($464) {
    _abort(); return ((0)|0);
    return ((0)|0);
   }
   $466=(($462+$348)|0);
   $467=$466;
   $468=($462>>>0)<($466>>>0);
   if (!($468)) {
    _abort(); return ((0)|0);
    return ((0)|0);
   }
   $470=(($v_3_lcssa_i+24)|0);
   $471=((HEAP32[(($470)>>2)])|0);
   $472=(($v_3_lcssa_i+12)|0);
   $473=((HEAP32[(($472)>>2)])|0);
   $474=($473|0)==($v_3_lcssa_i|0);
   do {
    if ($474) {
     $490=(($v_3_lcssa_i+20)|0);
     $491=((HEAP32[(($490)>>2)])|0);
     $492=($491|0)==0;
     if ($492) {
      $494=(($v_3_lcssa_i+16)|0);
      $495=((HEAP32[(($494)>>2)])|0);
      $496=($495|0)==0;
      if ($496) {
       $R_1_i22=0;
       break;
      } else {
       $R_0_i20_ph=$495;$RP_0_i19_ph=$494;
      }
     } else {
      $R_0_i20_ph=$491;$RP_0_i19_ph=$490;
     }


     $R_0_i20=$R_0_i20_ph;$RP_0_i19=$RP_0_i19_ph;
     while(1) {


      $497=(($R_0_i20+20)|0);
      $498=((HEAP32[(($497)>>2)])|0);
      $499=($498|0)==0;
      if ($499) {
       $501=(($R_0_i20+16)|0);
       $502=((HEAP32[(($501)>>2)])|0);
       $503=($502|0)==0;
       if ($503) {
        $RP_0_i19_lcssa=$RP_0_i19;$R_0_i20_lcssa=$R_0_i20;
        break;
       } else {
        $R_0_i20_be=$502;$RP_0_i19_be=$501;
       }
      } else {
       $R_0_i20_be=$498;$RP_0_i19_be=$497;
      }


      $R_0_i20=$R_0_i20_be;$RP_0_i19=$RP_0_i19_be;
     }


     $505=$RP_0_i19_lcssa;
     $506=($505>>>0)<($463>>>0);
     if ($506) {
      _abort(); return ((0)|0);
      return ((0)|0);
     } else {
      HEAP32[(($RP_0_i19_lcssa)>>2)]=0;
      $R_1_i22=$R_0_i20_lcssa;
      break;
     }
    } else {
     $476=(($v_3_lcssa_i+8)|0);
     $477=((HEAP32[(($476)>>2)])|0);
     $478=$477;
     $479=($478>>>0)<($463>>>0);
     if ($479) {
      _abort(); return ((0)|0);
      return ((0)|0);
     }
     $481=(($477+12)|0);
     $482=((HEAP32[(($481)>>2)])|0);
     $483=($482|0)==($v_3_lcssa_i|0);
     if (!($483)) {
      _abort(); return ((0)|0);
      return ((0)|0);
     }
     $485=(($473+8)|0);
     $486=((HEAP32[(($485)>>2)])|0);
     $487=($486|0)==($v_3_lcssa_i|0);
     if ($487) {
      HEAP32[(($481)>>2)]=$473;
      HEAP32[(($485)>>2)]=$477;
      $R_1_i22=$473;
      break;
     } else {
      _abort(); return ((0)|0);
      return ((0)|0);
     }
    }
   } while(0);

   $510=($471|0)==0;
   L187: do {
    if (!($510)) {
     $512=(($v_3_lcssa_i+28)|0);
     $513=((HEAP32[(($512)>>2)])|0);
     $514=((102752+($513<<2))|0);
     $515=((HEAP32[(($514)>>2)])|0);
     $516=($v_3_lcssa_i|0)==($515|0);
     do {
      if ($516) {
       HEAP32[(($514)>>2)]=$R_1_i22;
       $cond_i23=($R_1_i22|0)==0;
       if (!($cond_i23)) {
        break;
       }
       $518=((HEAP32[(($512)>>2)])|0);
       $519=1<<$518;
       $520=$519^-1;
       $521=((HEAP32[((102452)>>2)])|0);
       $522=$521&$520;
       HEAP32[((102452)>>2)]=$522;
       break L187;
      } else {
       $524=$471;
       $525=((HEAP32[((102464)>>2)])|0);
       $526=($524>>>0)<($525>>>0);
       if ($526) {
        _abort(); return ((0)|0);
        return ((0)|0);
       }
       $528=(($471+16)|0);
       $529=((HEAP32[(($528)>>2)])|0);
       $530=($529|0)==($v_3_lcssa_i|0);
       if ($530) {
        HEAP32[(($528)>>2)]=$R_1_i22;
       } else {
        $533=(($471+20)|0);
        HEAP32[(($533)>>2)]=$R_1_i22;
       }
       $536=($R_1_i22|0)==0;
       if ($536) {
        break L187;
       }
      }
     } while(0);
     $538=$R_1_i22;
     $539=((HEAP32[((102464)>>2)])|0);
     $540=($538>>>0)<($539>>>0);
     if ($540) {
      _abort(); return ((0)|0);
      return ((0)|0);
     }
     $542=(($R_1_i22+24)|0);
     HEAP32[(($542)>>2)]=$471;
     $543=(($v_3_lcssa_i+16)|0);
     $544=((HEAP32[(($543)>>2)])|0);
     $545=($544|0)==0;
     do {
      if (!($545)) {
       $547=$544;
       $548=((HEAP32[((102464)>>2)])|0);
       $549=($547>>>0)<($548>>>0);
       if ($549) {
        _abort(); return ((0)|0);
        return ((0)|0);
       } else {
        $551=(($R_1_i22+16)|0);
        HEAP32[(($551)>>2)]=$544;
        $552=(($544+24)|0);
        HEAP32[(($552)>>2)]=$R_1_i22;
        break;
       }
      }
     } while(0);
     $555=(($v_3_lcssa_i+20)|0);
     $556=((HEAP32[(($555)>>2)])|0);
     $557=($556|0)==0;
     if ($557) {
      break;
     }
     $559=$556;
     $560=((HEAP32[((102464)>>2)])|0);
     $561=($559>>>0)<($560>>>0);
     if ($561) {
      _abort(); return ((0)|0);
      return ((0)|0);
     } else {
      $563=(($R_1_i22+20)|0);
      HEAP32[(($563)>>2)]=$556;
      $564=(($556+24)|0);
      HEAP32[(($564)>>2)]=$R_1_i22;
      break;
     }
    }
   } while(0);
   $568=($rsize_3_lcssa_i>>>0)<((16)>>>0);
   L215: do {
    if ($568) {
     $570=((($rsize_3_lcssa_i)+($348))|0);
     $571=$570|3;
     $572=(($v_3_lcssa_i+4)|0);
     HEAP32[(($572)>>2)]=$571;
     $_sum19_i=((($570)+(4))|0);
     $573=(($462+$_sum19_i)|0);
     $574=$573;
     $575=((HEAP32[(($574)>>2)])|0);
     $576=$575|1;
     HEAP32[(($574)>>2)]=$576;
    } else {
     $578=$348|3;
     $579=(($v_3_lcssa_i+4)|0);
     HEAP32[(($579)>>2)]=$578;
     $580=$rsize_3_lcssa_i|1;
     $_sum_i2540=$348|4;
     $581=(($462+$_sum_i2540)|0);
     $582=$581;
     HEAP32[(($582)>>2)]=$580;
     $_sum1_i26=((($rsize_3_lcssa_i)+($348))|0);
     $583=(($462+$_sum1_i26)|0);
     $584=$583;
     HEAP32[(($584)>>2)]=$rsize_3_lcssa_i;
     $585=$rsize_3_lcssa_i>>>3;
     $586=($rsize_3_lcssa_i>>>0)<((256)>>>0);
     if ($586) {
      $588=$585<<1;
      $589=((102488+($588<<2))|0);
      $590=$589;
      $591=((HEAP32[((102448)>>2)])|0);
      $592=1<<$585;
      $593=$591&$592;
      $594=($593|0)==0;
      do {
       if ($594) {
        $596=$591|$592;
        HEAP32[((102448)>>2)]=$596;
        $_sum15_pre_i=((($588)+(2))|0);
        $_pre_i27=((102488+($_sum15_pre_i<<2))|0);
        $F5_0_i=$590;$_pre_phi_i28=$_pre_i27;
       } else {
        $_sum18_i=((($588)+(2))|0);
        $598=((102488+($_sum18_i<<2))|0);
        $599=((HEAP32[(($598)>>2)])|0);
        $600=$599;
        $601=((HEAP32[((102464)>>2)])|0);
        $602=($600>>>0)<($601>>>0);
        if (!($602)) {
         $F5_0_i=$599;$_pre_phi_i28=$598;
         break;
        }
        _abort(); return ((0)|0);
        return ((0)|0);
       }
      } while(0);


      HEAP32[(($_pre_phi_i28)>>2)]=$467;
      $605=(($F5_0_i+12)|0);
      HEAP32[(($605)>>2)]=$467;
      $_sum16_i=((($348)+(8))|0);
      $606=(($462+$_sum16_i)|0);
      $607=$606;
      HEAP32[(($607)>>2)]=$F5_0_i;
      $_sum17_i=((($348)+(12))|0);
      $608=(($462+$_sum17_i)|0);
      $609=$608;
      HEAP32[(($609)>>2)]=$590;
      break;
     }
     $611=$466;
     $612=$rsize_3_lcssa_i>>>8;
     $613=($612|0)==0;
     do {
      if ($613) {
       $I7_0_i=0;
      } else {
       $615=($rsize_3_lcssa_i>>>0)>((16777215)>>>0);
       if ($615) {
        $I7_0_i=31;
        break;
       }
       $617=((($612)+(1048320))|0);
       $618=$617>>>16;
       $619=$618&8;
       $620=$612<<$619;
       $621=((($620)+(520192))|0);
       $622=$621>>>16;
       $623=$622&4;
       $624=$623|$619;
       $625=$620<<$623;
       $626=((($625)+(245760))|0);
       $627=$626>>>16;
       $628=$627&2;
       $629=$624|$628;
       $630=(((14)-($629))|0);
       $631=$625<<$628;
       $632=$631>>>15;
       $633=((($630)+($632))|0);
       $634=$633<<1;
       $635=((($633)+(7))|0);
       $636=$rsize_3_lcssa_i>>>($635>>>0);
       $637=$636&1;
       $638=$637|$634;
       $I7_0_i=$638;
      }
     } while(0);

     $640=((102752+($I7_0_i<<2))|0);
     $_sum2_i=((($348)+(28))|0);
     $641=(($462+$_sum2_i)|0);
     $642=$641;
     HEAP32[(($642)>>2)]=$I7_0_i;
     $_sum3_i29=((($348)+(16))|0);
     $643=(($462+$_sum3_i29)|0);
     $_sum4_i30=((($348)+(20))|0);
     $644=(($462+$_sum4_i30)|0);
     $645=$644;
     HEAP32[(($645)>>2)]=0;
     $646=$643;
     HEAP32[(($646)>>2)]=0;
     $647=((HEAP32[((102452)>>2)])|0);
     $648=1<<$I7_0_i;
     $649=$647&$648;
     $650=($649|0)==0;
     if ($650) {
      $652=$647|$648;
      HEAP32[((102452)>>2)]=$652;
      HEAP32[(($640)>>2)]=$611;
      $653=$640;
      $_sum5_i=((($348)+(24))|0);
      $654=(($462+$_sum5_i)|0);
      $655=$654;
      HEAP32[(($655)>>2)]=$653;
      $_sum6_i=((($348)+(12))|0);
      $656=(($462+$_sum6_i)|0);
      $657=$656;
      HEAP32[(($657)>>2)]=$611;
      $_sum7_i=((($348)+(8))|0);
      $658=(($462+$_sum7_i)|0);
      $659=$658;
      HEAP32[(($659)>>2)]=$611;
      break;
     }
     $661=((HEAP32[(($640)>>2)])|0);
     $662=($I7_0_i|0)==31;
     if ($662) {
      $667=0;
     } else {
      $664=$I7_0_i>>>1;
      $665=(((25)-($664))|0);
      $667=$665;
     }

     $668=(($661+4)|0);
     $669=((HEAP32[(($668)>>2)])|0);
     $670=$669&-8;
     $671=($670|0)==($rsize_3_lcssa_i|0);
     do {
      if ($671) {
       $T_0_lcssa_i=$661;
      } else {
       $672=$rsize_3_lcssa_i<<$667;
       $T_030_i=$661;$K12_031_i=$672;
       while(1) {


        $680=$K12_031_i>>>31;
        $681=(($T_030_i+16+($680<<2))|0);
        $682=((HEAP32[(($681)>>2)])|0);
        $683=($682|0)==0;
        if ($683) {
         $T_030_i_lcssa=$T_030_i;$_lcssa166=$681;
         break;
        }
        $674=$K12_031_i<<1;
        $675=(($682+4)|0);
        $676=((HEAP32[(($675)>>2)])|0);
        $677=$676&-8;
        $678=($677|0)==($rsize_3_lcssa_i|0);
        if ($678) {
         $_lcssa169=$682;
         label = 163;
         break;
        } else {
         $T_030_i=$682;$K12_031_i=$674;
        }
       }
       if ((label|0) == 163) {

        $T_0_lcssa_i=$_lcssa169;
        break;
       }


       $685=$_lcssa166;
       $686=((HEAP32[((102464)>>2)])|0);
       $687=($685>>>0)<($686>>>0);
       if ($687) {
        _abort(); return ((0)|0);
        return ((0)|0);
       } else {
        HEAP32[(($_lcssa166)>>2)]=$611;
        $_sum12_i=((($348)+(24))|0);
        $689=(($462+$_sum12_i)|0);
        $690=$689;
        HEAP32[(($690)>>2)]=$T_030_i_lcssa;
        $_sum13_i=((($348)+(12))|0);
        $691=(($462+$_sum13_i)|0);
        $692=$691;
        HEAP32[(($692)>>2)]=$611;
        $_sum14_i=((($348)+(8))|0);
        $693=(($462+$_sum14_i)|0);
        $694=$693;
        HEAP32[(($694)>>2)]=$611;
        break L215;
       }
      }
     } while(0);

     $696=(($T_0_lcssa_i+8)|0);
     $697=((HEAP32[(($696)>>2)])|0);
     $698=$T_0_lcssa_i;
     $699=((HEAP32[((102464)>>2)])|0);
     $700=($698>>>0)>=($699>>>0);
     $701=$697;
     $702=($701>>>0)>=($699>>>0);
     $or_cond26_i=$700&$702;
     if ($or_cond26_i) {
      $704=(($697+12)|0);
      HEAP32[(($704)>>2)]=$611;
      HEAP32[(($696)>>2)]=$611;
      $_sum9_i=((($348)+(8))|0);
      $705=(($462+$_sum9_i)|0);
      $706=$705;
      HEAP32[(($706)>>2)]=$697;
      $_sum10_i=((($348)+(12))|0);
      $707=(($462+$_sum10_i)|0);
      $708=$707;
      HEAP32[(($708)>>2)]=$T_0_lcssa_i;
      $_sum11_i=((($348)+(24))|0);
      $709=(($462+$_sum11_i)|0);
      $710=$709;
      HEAP32[(($710)>>2)]=0;
      break;
     } else {
      _abort(); return ((0)|0);
      return ((0)|0);
     }
    }
   } while(0);
   $712=(($v_3_lcssa_i+8)|0);
   $713=$712;
   $mem_0=$713;

   return (($mem_0)|0);
  }
 } while(0);

 $714=((HEAP32[((102456)>>2)])|0);
 $715=($714>>>0)<($nb_0>>>0);
 if (!($715)) {
  $717=((($714)-($nb_0))|0);
  $718=((HEAP32[((102468)>>2)])|0);
  $719=($717>>>0)>((15)>>>0);
  if ($719) {
   $721=$718;
   $722=(($721+$nb_0)|0);
   $723=$722;
   HEAP32[((102468)>>2)]=$723;
   HEAP32[((102456)>>2)]=$717;
   $724=$717|1;
   $_sum2=((($nb_0)+(4))|0);
   $725=(($721+$_sum2)|0);
   $726=$725;
   HEAP32[(($726)>>2)]=$724;
   $727=(($721+$714)|0);
   $728=$727;
   HEAP32[(($728)>>2)]=$717;
   $729=$nb_0|3;
   $730=(($718+4)|0);
   HEAP32[(($730)>>2)]=$729;
  } else {
   HEAP32[((102456)>>2)]=0;
   HEAP32[((102468)>>2)]=0;
   $732=$714|3;
   $733=(($718+4)|0);
   HEAP32[(($733)>>2)]=$732;
   $734=$718;
   $_sum1=((($714)+(4))|0);
   $735=(($734+$_sum1)|0);
   $736=$735;
   $737=((HEAP32[(($736)>>2)])|0);
   $738=$737|1;
   HEAP32[(($736)>>2)]=$738;
  }
  $740=(($718+8)|0);
  $741=$740;
  $mem_0=$741;

  return (($mem_0)|0);
 }
 $743=((HEAP32[((102460)>>2)])|0);
 $744=($743>>>0)>($nb_0>>>0);
 if ($744) {
  $746=((($743)-($nb_0))|0);
  HEAP32[((102460)>>2)]=$746;
  $747=((HEAP32[((102472)>>2)])|0);
  $748=$747;
  $749=(($748+$nb_0)|0);
  $750=$749;
  HEAP32[((102472)>>2)]=$750;
  $751=$746|1;
  $_sum=((($nb_0)+(4))|0);
  $752=(($748+$_sum)|0);
  $753=$752;
  HEAP32[(($753)>>2)]=$751;
  $754=$nb_0|3;
  $755=(($747+4)|0);
  HEAP32[(($755)>>2)]=$754;
  $756=(($747+8)|0);
  $757=$756;
  $mem_0=$757;

  return (($mem_0)|0);
 }
 $759=((HEAP32[((57280)>>2)])|0);
 $760=($759|0)==0;
 do {
  if ($760) {
   $762=((_sysconf(((30)|0)))|0);
   $763=((($762)-(1))|0);
   $764=$763&$762;
   $765=($764|0)==0;
   if ($765) {
    HEAP32[((57288)>>2)]=$762;
    HEAP32[((57284)>>2)]=$762;
    HEAP32[((57292)>>2)]=-1;
    HEAP32[((57296)>>2)]=-1;
    HEAP32[((57300)>>2)]=0;
    HEAP32[((102892)>>2)]=0;
    $767=((_time(((0)|0)))|0);
    $768=$767&-16;
    $769=$768^1431655768;
    HEAP32[((57280)>>2)]=$769;
    break;
   } else {
    _abort(); return ((0)|0);
    return ((0)|0);
   }
  }
 } while(0);
 $771=((($nb_0)+(48))|0);
 $772=((HEAP32[((57288)>>2)])|0);
 $773=((($nb_0)+(47))|0);
 $774=((($772)+($773))|0);
 $775=(((-$772))|0);
 $776=$774&$775;
 $777=($776>>>0)>($nb_0>>>0);
 if (!($777)) {
  $mem_0=0;

  return (($mem_0)|0);
 }
 $779=((HEAP32[((102888)>>2)])|0);
 $780=($779|0)==0;
 do {
  if (!($780)) {
   $782=((HEAP32[((102880)>>2)])|0);
   $783=((($782)+($776))|0);
   $784=($783>>>0)<=($782>>>0);
   $785=($783>>>0)>($779>>>0);
   $or_cond1_i=$784|$785;
   if ($or_cond1_i) {
    $mem_0=0;
   } else {
    break;
   }

   return (($mem_0)|0);
  }
 } while(0);
 $787=((HEAP32[((102892)>>2)])|0);
 $788=$787&4;
 $789=($788|0)==0;
 L279: do {
  if ($789) {
   $791=((HEAP32[((102472)>>2)])|0);
   $792=($791|0)==0;
   do {
    if ($792) {
     label = 191;
    } else {
     $794=$791;
     $sp_0_i_i=102896;
     while(1) {

      $796=(($sp_0_i_i)|0);
      $797=((HEAP32[(($796)>>2)])|0);
      $798=($797>>>0)>($794>>>0);
      if (!($798)) {
       $800=(($sp_0_i_i+4)|0);
       $801=((HEAP32[(($800)>>2)])|0);
       $802=(($797+$801)|0);
       $803=($802>>>0)>($794>>>0);
       if ($803) {
        $sp_0_i_i_lcssa=$sp_0_i_i;$_lcssa162=$796;$_lcssa164=$800;
        break;
       }
      }
      $805=(($sp_0_i_i+8)|0);
      $806=((HEAP32[(($805)>>2)])|0);
      $807=($806|0)==0;
      if ($807) {
       label = 190;
       break;
      } else {
       $sp_0_i_i=$806;
      }
     }
     if ((label|0) == 190) {
      label = 191;
      break;
     }



     $808=($sp_0_i_i_lcssa|0)==0;
     if ($808) {
      label = 191;
      break;
     }
     $838=((HEAP32[((102460)>>2)])|0);
     $839=((($774)-($838))|0);
     $840=$839&$775;
     $841=($840>>>0)<((2147483647)>>>0);
     if (!($841)) {
      $tsize_03141_i=0;
      break;
     }
     $843=((_sbrk((($840)|0)))|0);
     $844=((HEAP32[(($_lcssa162)>>2)])|0);
     $845=((HEAP32[(($_lcssa164)>>2)])|0);
     $846=(($844+$845)|0);
     $847=($843|0)==($846|0);
     if ($847) {
      $br_0_i=$843;$ssize_1_i=$840;
      label = 200;
     } else {
      $ssize_129_i=$840;$br_030_i=$843;
      label = 201;
     }
    }
   } while(0);
   do {
    if ((label|0) == 191) {
     $809=((_sbrk(((0)|0)))|0);
     $810=($809|0)==-1;
     if ($810) {
      $tsize_03141_i=0;
      break;
     }
     $812=$809;
     $813=((HEAP32[((57284)>>2)])|0);
     $814=((($813)-(1))|0);
     $815=$814&$812;
     $816=($815|0)==0;
     if ($816) {
      $ssize_0_i=$776;
     } else {
      $818=((($814)+($812))|0);
      $819=(((-$813))|0);
      $820=$818&$819;
      $821=((($776)-($812))|0);
      $822=((($821)+($820))|0);
      $ssize_0_i=$822;
     }

     $824=((HEAP32[((102880)>>2)])|0);
     $825=((($824)+($ssize_0_i))|0);
     $826=($ssize_0_i>>>0)>($nb_0>>>0);
     $827=($ssize_0_i>>>0)<((2147483647)>>>0);
     $or_cond_i31=$826&$827;
     if (!($or_cond_i31)) {
      $tsize_03141_i=0;
      break;
     }
     $829=((HEAP32[((102888)>>2)])|0);
     $830=($829|0)==0;
     if (!($830)) {
      $832=($825>>>0)<=($824>>>0);
      $833=($825>>>0)>($829>>>0);
      $or_cond2_i=$832|$833;
      if ($or_cond2_i) {
       $tsize_03141_i=0;
       break;
      }
     }
     $835=((_sbrk((($ssize_0_i)|0)))|0);
     $836=($835|0)==($809|0);
     if ($836) {
      $br_0_i=$809;$ssize_1_i=$ssize_0_i;
      label = 200;
     } else {
      $ssize_129_i=$ssize_0_i;$br_030_i=$835;
      label = 201;
     }
    }
   } while(0);
   L303: do {
    if ((label|0) == 200) {


     $849=($br_0_i|0)==-1;
     if ($849) {
      $tsize_03141_i=$ssize_1_i;
     } else {
      $tsize_244_i=$ssize_1_i;$tbase_245_i=$br_0_i;
      label = 211;
      break L279;
     }
    }
    else if ((label|0) == 201) {


     $850=(((-$ssize_129_i))|0);
     $851=($br_030_i|0)!=-1;
     $852=($ssize_129_i>>>0)<((2147483647)>>>0);
     $or_cond5_i=$851&$852;
     $853=($771>>>0)>($ssize_129_i>>>0);
     $or_cond4_i=$or_cond5_i&$853;
     do {
      if ($or_cond4_i) {
       $855=((HEAP32[((57288)>>2)])|0);
       $856=((($773)-($ssize_129_i))|0);
       $857=((($856)+($855))|0);
       $858=(((-$855))|0);
       $859=$857&$858;
       $860=($859>>>0)<((2147483647)>>>0);
       if (!($860)) {
        $ssize_2_i=$ssize_129_i;
        break;
       }
       $862=((_sbrk((($859)|0)))|0);
       $863=($862|0)==-1;
       if ($863) {
        $866=((_sbrk((($850)|0)))|0);
        $tsize_03141_i=0;
        break L303;
       } else {
        $865=((($859)+($ssize_129_i))|0);
        $ssize_2_i=$865;
        break;
       }
      } else {
       $ssize_2_i=$ssize_129_i;
      }
     } while(0);

     $868=($br_030_i|0)==-1;
     if ($868) {
      $tsize_03141_i=0;
     } else {
      $tsize_244_i=$ssize_2_i;$tbase_245_i=$br_030_i;
      label = 211;
      break L279;
     }
    }
   } while(0);

   $869=((HEAP32[((102892)>>2)])|0);
   $870=$869|4;
   HEAP32[((102892)>>2)]=$870;
   $tsize_1_i=$tsize_03141_i;
   label = 208;
  } else {
   $tsize_1_i=0;
   label = 208;
  }
 } while(0);
 do {
  if ((label|0) == 208) {

   $872=($776>>>0)<((2147483647)>>>0);
   if (!($872)) {
    break;
   }
   $874=((_sbrk((($776)|0)))|0);
   $875=((_sbrk(((0)|0)))|0);
   $876=($874|0)!=-1;
   $877=($875|0)!=-1;
   $or_cond3_i=$876&$877;
   $878=($874>>>0)<($875>>>0);
   $or_cond6_i=$or_cond3_i&$878;
   if (!($or_cond6_i)) {
    break;
   }
   $880=$875;
   $881=$874;
   $882=((($880)-($881))|0);
   $883=((($nb_0)+(40))|0);
   $884=($882>>>0)>($883>>>0);
   $_tsize_1_i=($884?$882:$tsize_1_i);
   if ($884) {
    $tsize_244_i=$_tsize_1_i;$tbase_245_i=$874;
    label = 211;
   }
  }
 } while(0);
 do {
  if ((label|0) == 211) {


   $885=((HEAP32[((102880)>>2)])|0);
   $886=((($885)+($tsize_244_i))|0);
   HEAP32[((102880)>>2)]=$886;
   $887=((HEAP32[((102884)>>2)])|0);
   $888=($886>>>0)>($887>>>0);
   if ($888) {
    HEAP32[((102884)>>2)]=$886;
   }
   $891=((HEAP32[((102472)>>2)])|0);
   $892=($891|0)==0;
   L323: do {
    if ($892) {
     $894=((HEAP32[((102464)>>2)])|0);
     $895=($894|0)==0;
     $896=($tbase_245_i>>>0)<($894>>>0);
     $or_cond8_i=$895|$896;
     if ($or_cond8_i) {
      HEAP32[((102464)>>2)]=$tbase_245_i;
     }
     HEAP32[((102896)>>2)]=$tbase_245_i;
     HEAP32[((102900)>>2)]=$tsize_244_i;
     HEAP32[((102908)>>2)]=0;
     $899=((HEAP32[((57280)>>2)])|0);
     HEAP32[((102484)>>2)]=$899;
     HEAP32[((102480)>>2)]=-1;
     $i_02_i_i=0;
     while(1) {

      $901=$i_02_i_i<<1;
      $902=((102488+($901<<2))|0);
      $903=$902;
      $_sum_i_i=((($901)+(3))|0);
      $904=((102488+($_sum_i_i<<2))|0);
      HEAP32[(($904)>>2)]=$903;
      $_sum1_i_i=((($901)+(2))|0);
      $905=((102488+($_sum1_i_i<<2))|0);
      HEAP32[(($905)>>2)]=$903;
      $906=((($i_02_i_i)+(1))|0);
      $907=($906>>>0)<((32)>>>0);
      if ($907) {
       $i_02_i_i=$906;
      } else {
       break;
      }
     }
     $908=((($tsize_244_i)-(40))|0);
     $909=(($tbase_245_i+8)|0);
     $910=$909;
     $911=$910&7;
     $912=($911|0)==0;
     if ($912) {
      $916=0;
     } else {
      $914=(((-$910))|0);
      $915=$914&7;
      $916=$915;
     }

     $917=(($tbase_245_i+$916)|0);
     $918=$917;
     $919=((($908)-($916))|0);
     HEAP32[((102472)>>2)]=$918;
     HEAP32[((102460)>>2)]=$919;
     $920=$919|1;
     $_sum_i12_i=((($916)+(4))|0);
     $921=(($tbase_245_i+$_sum_i12_i)|0);
     $922=$921;
     HEAP32[(($922)>>2)]=$920;
     $_sum2_i_i=((($tsize_244_i)-(36))|0);
     $923=(($tbase_245_i+$_sum2_i_i)|0);
     $924=$923;
     HEAP32[(($924)>>2)]=40;
     $925=((HEAP32[((57296)>>2)])|0);
     HEAP32[((102476)>>2)]=$925;
    } else {
     $sp_074_i=102896;
     while(1) {

      $926=(($sp_074_i)|0);
      $927=((HEAP32[(($926)>>2)])|0);
      $928=(($sp_074_i+4)|0);
      $929=((HEAP32[(($928)>>2)])|0);
      $930=(($927+$929)|0);
      $931=($tbase_245_i|0)==($930|0);
      if ($931) {
       $sp_074_i_lcssa=$sp_074_i;$_lcssa155=$927;$_lcssa157=$928;$_lcssa159=$929;
       label = 224;
       break;
      }
      $933=(($sp_074_i+8)|0);
      $934=((HEAP32[(($933)>>2)])|0);
      $935=($934|0)==0;
      if ($935) {
       label = 229;
       break;
      } else {
       $sp_074_i=$934;
      }
     }
     do {
      if ((label|0) == 224) {




       $936=(($sp_074_i_lcssa+12)|0);
       $937=((HEAP32[(($936)>>2)])|0);
       $938=$937&8;
       $939=($938|0)==0;
       if (!($939)) {
        break;
       }
       $941=$891;
       $942=($941>>>0)>=($_lcssa155>>>0);
       $943=($941>>>0)<($tbase_245_i>>>0);
       $or_cond47_i=$942&$943;
       if (!($or_cond47_i)) {
        break;
       }
       $945=((($_lcssa159)+($tsize_244_i))|0);
       HEAP32[(($_lcssa157)>>2)]=$945;
       $946=((HEAP32[((102472)>>2)])|0);
       $947=((HEAP32[((102460)>>2)])|0);
       $948=((($947)+($tsize_244_i))|0);
       $949=$946;
       $950=(($946+8)|0);
       $951=$950;
       $952=$951&7;
       $953=($952|0)==0;
       if ($953) {
        $957=0;
       } else {
        $955=(((-$951))|0);
        $956=$955&7;
        $957=$956;
       }

       $958=(($949+$957)|0);
       $959=$958;
       $960=((($948)-($957))|0);
       HEAP32[((102472)>>2)]=$959;
       HEAP32[((102460)>>2)]=$960;
       $961=$960|1;
       $_sum_i16_i=((($957)+(4))|0);
       $962=(($949+$_sum_i16_i)|0);
       $963=$962;
       HEAP32[(($963)>>2)]=$961;
       $_sum2_i17_i=((($948)+(4))|0);
       $964=(($949+$_sum2_i17_i)|0);
       $965=$964;
       HEAP32[(($965)>>2)]=40;
       $966=((HEAP32[((57296)>>2)])|0);
       HEAP32[((102476)>>2)]=$966;
       break L323;
      }
      else if ((label|0) == 229) {
      }
     } while(0);
     $967=((HEAP32[((102464)>>2)])|0);
     $968=($tbase_245_i>>>0)<($967>>>0);
     if ($968) {
      HEAP32[((102464)>>2)]=$tbase_245_i;
     }
     $970=(($tbase_245_i+$tsize_244_i)|0);
     $sp_173_i=102896;
     while(1) {

      $972=(($sp_173_i)|0);
      $973=((HEAP32[(($972)>>2)])|0);
      $974=($973|0)==($970|0);
      if ($974) {
       $sp_173_i_lcssa=$sp_173_i;$_lcssa152=$972;
       label = 235;
       break;
      }
      $976=(($sp_173_i+8)|0);
      $977=((HEAP32[(($976)>>2)])|0);
      $978=($977|0)==0;
      if ($978) {
       label = 319;
       break;
      } else {
       $sp_173_i=$977;
      }
     }
     do {
      if ((label|0) == 235) {


       $979=(($sp_173_i_lcssa+12)|0);
       $980=((HEAP32[(($979)>>2)])|0);
       $981=$980&8;
       $982=($981|0)==0;
       if (!($982)) {
        break;
       }
       HEAP32[(($_lcssa152)>>2)]=$tbase_245_i;
       $984=(($sp_173_i_lcssa+4)|0);
       $985=((HEAP32[(($984)>>2)])|0);
       $986=((($985)+($tsize_244_i))|0);
       HEAP32[(($984)>>2)]=$986;
       $987=(($tbase_245_i+8)|0);
       $988=$987;
       $989=$988&7;
       $990=($989|0)==0;
       if ($990) {
        $995=0;
       } else {
        $992=(((-$988))|0);
        $993=$992&7;
        $995=$993;
       }

       $996=(($tbase_245_i+$995)|0);
       $_sum102_i=((($tsize_244_i)+(8))|0);
       $997=(($tbase_245_i+$_sum102_i)|0);
       $998=$997;
       $999=$998&7;
       $1000=($999|0)==0;
       if ($1000) {
        $1005=0;
       } else {
        $1002=(((-$998))|0);
        $1003=$1002&7;
        $1005=$1003;
       }

       $_sum103_i=((($1005)+($tsize_244_i))|0);
       $1006=(($tbase_245_i+$_sum103_i)|0);
       $1007=$1006;
       $1008=$1006;
       $1009=$996;
       $1010=((($1008)-($1009))|0);
       $_sum_i19_i=((($995)+($nb_0))|0);
       $1011=(($tbase_245_i+$_sum_i19_i)|0);
       $1012=$1011;
       $1013=((($1010)-($nb_0))|0);
       $1014=$nb_0|3;
       $_sum1_i20_i=((($995)+(4))|0);
       $1015=(($tbase_245_i+$_sum1_i20_i)|0);
       $1016=$1015;
       HEAP32[(($1016)>>2)]=$1014;
       $1017=((HEAP32[((102472)>>2)])|0);
       $1018=($1007|0)==($1017|0);
       L352: do {
        if ($1018) {
         $1020=((HEAP32[((102460)>>2)])|0);
         $1021=((($1020)+($1013))|0);
         HEAP32[((102460)>>2)]=$1021;
         HEAP32[((102472)>>2)]=$1012;
         $1022=$1021|1;
         $_sum46_i_i=((($_sum_i19_i)+(4))|0);
         $1023=(($tbase_245_i+$_sum46_i_i)|0);
         $1024=$1023;
         HEAP32[(($1024)>>2)]=$1022;
        } else {
         $1026=((HEAP32[((102468)>>2)])|0);
         $1027=($1007|0)==($1026|0);
         if ($1027) {
          $1029=((HEAP32[((102456)>>2)])|0);
          $1030=((($1029)+($1013))|0);
          HEAP32[((102456)>>2)]=$1030;
          HEAP32[((102468)>>2)]=$1012;
          $1031=$1030|1;
          $_sum44_i_i=((($_sum_i19_i)+(4))|0);
          $1032=(($tbase_245_i+$_sum44_i_i)|0);
          $1033=$1032;
          HEAP32[(($1033)>>2)]=$1031;
          $_sum45_i_i=((($1030)+($_sum_i19_i))|0);
          $1034=(($tbase_245_i+$_sum45_i_i)|0);
          $1035=$1034;
          HEAP32[(($1035)>>2)]=$1030;
          break;
         }
         $_sum2_i21_i=((($tsize_244_i)+(4))|0);
         $_sum104_i=((($_sum2_i21_i)+($1005))|0);
         $1037=(($tbase_245_i+$_sum104_i)|0);
         $1038=$1037;
         $1039=((HEAP32[(($1038)>>2)])|0);
         $1040=$1039&3;
         $1041=($1040|0)==1;
         if ($1041) {
          $1043=$1039&-8;
          $1044=$1039>>>3;
          $1045=($1039>>>0)<((256)>>>0);
          L360: do {
           if ($1045) {
            $_sum3940_i_i=$1005|8;
            $_sum114_i=((($_sum3940_i_i)+($tsize_244_i))|0);
            $1047=(($tbase_245_i+$_sum114_i)|0);
            $1048=$1047;
            $1049=((HEAP32[(($1048)>>2)])|0);
            $_sum41_i_i=((($tsize_244_i)+(12))|0);
            $_sum115_i=((($_sum41_i_i)+($1005))|0);
            $1050=(($tbase_245_i+$_sum115_i)|0);
            $1051=$1050;
            $1052=((HEAP32[(($1051)>>2)])|0);
            $1053=$1044<<1;
            $1054=((102488+($1053<<2))|0);
            $1055=$1054;
            $1056=($1049|0)==($1055|0);
            do {
             if (!($1056)) {
              $1058=$1049;
              $1059=((HEAP32[((102464)>>2)])|0);
              $1060=($1058>>>0)<($1059>>>0);
              if ($1060) {
               _abort(); return ((0)|0);
               return ((0)|0);
              }
              $1062=(($1049+12)|0);
              $1063=((HEAP32[(($1062)>>2)])|0);
              $1064=($1063|0)==($1007|0);
              if ($1064) {
               break;
              }
              _abort(); return ((0)|0);
              return ((0)|0);
             }
            } while(0);
            $1065=($1052|0)==($1049|0);
            if ($1065) {
             $1067=1<<$1044;
             $1068=$1067^-1;
             $1069=((HEAP32[((102448)>>2)])|0);
             $1070=$1069&$1068;
             HEAP32[((102448)>>2)]=$1070;
             break;
            }
            $1072=($1052|0)==($1055|0);
            do {
             if ($1072) {
              $_pre62_i_i=(($1052+8)|0);
              $_pre_phi63_i_i=$_pre62_i_i;
             } else {
              $1074=$1052;
              $1075=((HEAP32[((102464)>>2)])|0);
              $1076=($1074>>>0)<($1075>>>0);
              if ($1076) {
               _abort(); return ((0)|0);
               return ((0)|0);
              }
              $1078=(($1052+8)|0);
              $1079=((HEAP32[(($1078)>>2)])|0);
              $1080=($1079|0)==($1007|0);
              if ($1080) {
               $_pre_phi63_i_i=$1078;
               break;
              }
              _abort(); return ((0)|0);
              return ((0)|0);
             }
            } while(0);

            $1081=(($1049+12)|0);
            HEAP32[(($1081)>>2)]=$1052;
            HEAP32[(($_pre_phi63_i_i)>>2)]=$1049;
           } else {
            $1083=$1006;
            $_sum34_i_i=$1005|24;
            $_sum105_i=((($_sum34_i_i)+($tsize_244_i))|0);
            $1084=(($tbase_245_i+$_sum105_i)|0);
            $1085=$1084;
            $1086=((HEAP32[(($1085)>>2)])|0);
            $_sum5_i_i=((($tsize_244_i)+(12))|0);
            $_sum106_i=((($_sum5_i_i)+($1005))|0);
            $1087=(($tbase_245_i+$_sum106_i)|0);
            $1088=$1087;
            $1089=((HEAP32[(($1088)>>2)])|0);
            $1090=($1089|0)==($1083|0);
            do {
             if ($1090) {
              $_sum67_i_i=$1005|16;
              $_sum112_i=((($_sum2_i21_i)+($_sum67_i_i))|0);
              $1108=(($tbase_245_i+$_sum112_i)|0);
              $1109=$1108;
              $1110=((HEAP32[(($1109)>>2)])|0);
              $1111=($1110|0)==0;
              if ($1111) {
               $_sum113_i=((($_sum67_i_i)+($tsize_244_i))|0);
               $1113=(($tbase_245_i+$_sum113_i)|0);
               $1114=$1113;
               $1115=((HEAP32[(($1114)>>2)])|0);
               $1116=($1115|0)==0;
               if ($1116) {
                $R_1_i_i=0;
                break;
               } else {
                $R_0_i_i_ph=$1115;$RP_0_i_i_ph=$1114;
               }
              } else {
               $R_0_i_i_ph=$1110;$RP_0_i_i_ph=$1109;
              }


              $R_0_i_i=$R_0_i_i_ph;$RP_0_i_i=$RP_0_i_i_ph;
              while(1) {


               $1117=(($R_0_i_i+20)|0);
               $1118=((HEAP32[(($1117)>>2)])|0);
               $1119=($1118|0)==0;
               if ($1119) {
                $1121=(($R_0_i_i+16)|0);
                $1122=((HEAP32[(($1121)>>2)])|0);
                $1123=($1122|0)==0;
                if ($1123) {
                 $RP_0_i_i_lcssa=$RP_0_i_i;$R_0_i_i_lcssa=$R_0_i_i;
                 break;
                } else {
                 $R_0_i_i_be=$1122;$RP_0_i_i_be=$1121;
                }
               } else {
                $R_0_i_i_be=$1118;$RP_0_i_i_be=$1117;
               }


               $R_0_i_i=$R_0_i_i_be;$RP_0_i_i=$RP_0_i_i_be;
              }


              $1125=$RP_0_i_i_lcssa;
              $1126=((HEAP32[((102464)>>2)])|0);
              $1127=($1125>>>0)<($1126>>>0);
              if ($1127) {
               _abort(); return ((0)|0);
               return ((0)|0);
              } else {
               HEAP32[(($RP_0_i_i_lcssa)>>2)]=0;
               $R_1_i_i=$R_0_i_i_lcssa;
               break;
              }
             } else {
              $_sum3637_i_i=$1005|8;
              $_sum107_i=((($_sum3637_i_i)+($tsize_244_i))|0);
              $1092=(($tbase_245_i+$_sum107_i)|0);
              $1093=$1092;
              $1094=((HEAP32[(($1093)>>2)])|0);
              $1095=$1094;
              $1096=((HEAP32[((102464)>>2)])|0);
              $1097=($1095>>>0)<($1096>>>0);
              if ($1097) {
               _abort(); return ((0)|0);
               return ((0)|0);
              }
              $1099=(($1094+12)|0);
              $1100=((HEAP32[(($1099)>>2)])|0);
              $1101=($1100|0)==($1083|0);
              if (!($1101)) {
               _abort(); return ((0)|0);
               return ((0)|0);
              }
              $1103=(($1089+8)|0);
              $1104=((HEAP32[(($1103)>>2)])|0);
              $1105=($1104|0)==($1083|0);
              if ($1105) {
               HEAP32[(($1099)>>2)]=$1089;
               HEAP32[(($1103)>>2)]=$1094;
               $R_1_i_i=$1089;
               break;
              } else {
               _abort(); return ((0)|0);
               return ((0)|0);
              }
             }
            } while(0);

            $1131=($1086|0)==0;
            if ($1131) {
             break;
            }
            $_sum31_i_i=((($tsize_244_i)+(28))|0);
            $_sum108_i=((($_sum31_i_i)+($1005))|0);
            $1133=(($tbase_245_i+$_sum108_i)|0);
            $1134=$1133;
            $1135=((HEAP32[(($1134)>>2)])|0);
            $1136=((102752+($1135<<2))|0);
            $1137=((HEAP32[(($1136)>>2)])|0);
            $1138=($1083|0)==($1137|0);
            do {
             if ($1138) {
              HEAP32[(($1136)>>2)]=$R_1_i_i;
              $cond_i_i=($R_1_i_i|0)==0;
              if (!($cond_i_i)) {
               break;
              }
              $1140=((HEAP32[(($1134)>>2)])|0);
              $1141=1<<$1140;
              $1142=$1141^-1;
              $1143=((HEAP32[((102452)>>2)])|0);
              $1144=$1143&$1142;
              HEAP32[((102452)>>2)]=$1144;
              break L360;
             } else {
              $1146=$1086;
              $1147=((HEAP32[((102464)>>2)])|0);
              $1148=($1146>>>0)<($1147>>>0);
              if ($1148) {
               _abort(); return ((0)|0);
               return ((0)|0);
              }
              $1150=(($1086+16)|0);
              $1151=((HEAP32[(($1150)>>2)])|0);
              $1152=($1151|0)==($1083|0);
              if ($1152) {
               HEAP32[(($1150)>>2)]=$R_1_i_i;
              } else {
               $1155=(($1086+20)|0);
               HEAP32[(($1155)>>2)]=$R_1_i_i;
              }
              $1158=($R_1_i_i|0)==0;
              if ($1158) {
               break L360;
              }
             }
            } while(0);
            $1160=$R_1_i_i;
            $1161=((HEAP32[((102464)>>2)])|0);
            $1162=($1160>>>0)<($1161>>>0);
            if ($1162) {
             _abort(); return ((0)|0);
             return ((0)|0);
            }
            $1164=(($R_1_i_i+24)|0);
            HEAP32[(($1164)>>2)]=$1086;
            $_sum3233_i_i=$1005|16;
            $_sum109_i=((($_sum3233_i_i)+($tsize_244_i))|0);
            $1165=(($tbase_245_i+$_sum109_i)|0);
            $1166=$1165;
            $1167=((HEAP32[(($1166)>>2)])|0);
            $1168=($1167|0)==0;
            do {
             if (!($1168)) {
              $1170=$1167;
              $1171=((HEAP32[((102464)>>2)])|0);
              $1172=($1170>>>0)<($1171>>>0);
              if ($1172) {
               _abort(); return ((0)|0);
               return ((0)|0);
              } else {
               $1174=(($R_1_i_i+16)|0);
               HEAP32[(($1174)>>2)]=$1167;
               $1175=(($1167+24)|0);
               HEAP32[(($1175)>>2)]=$R_1_i_i;
               break;
              }
             }
            } while(0);
            $_sum110_i=((($_sum2_i21_i)+($_sum3233_i_i))|0);
            $1178=(($tbase_245_i+$_sum110_i)|0);
            $1179=$1178;
            $1180=((HEAP32[(($1179)>>2)])|0);
            $1181=($1180|0)==0;
            if ($1181) {
             break;
            }
            $1183=$1180;
            $1184=((HEAP32[((102464)>>2)])|0);
            $1185=($1183>>>0)<($1184>>>0);
            if ($1185) {
             _abort(); return ((0)|0);
             return ((0)|0);
            } else {
             $1187=(($R_1_i_i+20)|0);
             HEAP32[(($1187)>>2)]=$1180;
             $1188=(($1180+24)|0);
             HEAP32[(($1188)>>2)]=$R_1_i_i;
             break;
            }
           }
          } while(0);
          $_sum9_i_i=$1043|$1005;
          $_sum111_i=((($_sum9_i_i)+($tsize_244_i))|0);
          $1192=(($tbase_245_i+$_sum111_i)|0);
          $1193=$1192;
          $1194=((($1043)+($1013))|0);
          $oldfirst_0_i_i=$1193;$qsize_0_i_i=$1194;
         } else {
          $oldfirst_0_i_i=$1007;$qsize_0_i_i=$1013;
         }


         $1196=(($oldfirst_0_i_i+4)|0);
         $1197=((HEAP32[(($1196)>>2)])|0);
         $1198=$1197&-2;
         HEAP32[(($1196)>>2)]=$1198;
         $1199=$qsize_0_i_i|1;
         $_sum10_i_i=((($_sum_i19_i)+(4))|0);
         $1200=(($tbase_245_i+$_sum10_i_i)|0);
         $1201=$1200;
         HEAP32[(($1201)>>2)]=$1199;
         $_sum11_i_i=((($qsize_0_i_i)+($_sum_i19_i))|0);
         $1202=(($tbase_245_i+$_sum11_i_i)|0);
         $1203=$1202;
         HEAP32[(($1203)>>2)]=$qsize_0_i_i;
         $1204=$qsize_0_i_i>>>3;
         $1205=($qsize_0_i_i>>>0)<((256)>>>0);
         if ($1205) {
          $1207=$1204<<1;
          $1208=((102488+($1207<<2))|0);
          $1209=$1208;
          $1210=((HEAP32[((102448)>>2)])|0);
          $1211=1<<$1204;
          $1212=$1210&$1211;
          $1213=($1212|0)==0;
          do {
           if ($1213) {
            $1215=$1210|$1211;
            HEAP32[((102448)>>2)]=$1215;
            $_sum27_pre_i_i=((($1207)+(2))|0);
            $_pre_i22_i=((102488+($_sum27_pre_i_i<<2))|0);
            $F4_0_i_i=$1209;$_pre_phi_i23_i=$_pre_i22_i;
           } else {
            $_sum30_i_i=((($1207)+(2))|0);
            $1217=((102488+($_sum30_i_i<<2))|0);
            $1218=((HEAP32[(($1217)>>2)])|0);
            $1219=$1218;
            $1220=((HEAP32[((102464)>>2)])|0);
            $1221=($1219>>>0)<($1220>>>0);
            if (!($1221)) {
             $F4_0_i_i=$1218;$_pre_phi_i23_i=$1217;
             break;
            }
            _abort(); return ((0)|0);
            return ((0)|0);
           }
          } while(0);


          HEAP32[(($_pre_phi_i23_i)>>2)]=$1012;
          $1224=(($F4_0_i_i+12)|0);
          HEAP32[(($1224)>>2)]=$1012;
          $_sum28_i_i=((($_sum_i19_i)+(8))|0);
          $1225=(($tbase_245_i+$_sum28_i_i)|0);
          $1226=$1225;
          HEAP32[(($1226)>>2)]=$F4_0_i_i;
          $_sum29_i_i=((($_sum_i19_i)+(12))|0);
          $1227=(($tbase_245_i+$_sum29_i_i)|0);
          $1228=$1227;
          HEAP32[(($1228)>>2)]=$1209;
          break;
         }
         $1230=$1011;
         $1231=$qsize_0_i_i>>>8;
         $1232=($1231|0)==0;
         do {
          if ($1232) {
           $I7_0_i_i=0;
          } else {
           $1234=($qsize_0_i_i>>>0)>((16777215)>>>0);
           if ($1234) {
            $I7_0_i_i=31;
            break;
           }
           $1236=((($1231)+(1048320))|0);
           $1237=$1236>>>16;
           $1238=$1237&8;
           $1239=$1231<<$1238;
           $1240=((($1239)+(520192))|0);
           $1241=$1240>>>16;
           $1242=$1241&4;
           $1243=$1242|$1238;
           $1244=$1239<<$1242;
           $1245=((($1244)+(245760))|0);
           $1246=$1245>>>16;
           $1247=$1246&2;
           $1248=$1243|$1247;
           $1249=(((14)-($1248))|0);
           $1250=$1244<<$1247;
           $1251=$1250>>>15;
           $1252=((($1249)+($1251))|0);
           $1253=$1252<<1;
           $1254=((($1252)+(7))|0);
           $1255=$qsize_0_i_i>>>($1254>>>0);
           $1256=$1255&1;
           $1257=$1256|$1253;
           $I7_0_i_i=$1257;
          }
         } while(0);

         $1259=((102752+($I7_0_i_i<<2))|0);
         $_sum12_i24_i=((($_sum_i19_i)+(28))|0);
         $1260=(($tbase_245_i+$_sum12_i24_i)|0);
         $1261=$1260;
         HEAP32[(($1261)>>2)]=$I7_0_i_i;
         $_sum13_i_i=((($_sum_i19_i)+(16))|0);
         $1262=(($tbase_245_i+$_sum13_i_i)|0);
         $_sum14_i_i=((($_sum_i19_i)+(20))|0);
         $1263=(($tbase_245_i+$_sum14_i_i)|0);
         $1264=$1263;
         HEAP32[(($1264)>>2)]=0;
         $1265=$1262;
         HEAP32[(($1265)>>2)]=0;
         $1266=((HEAP32[((102452)>>2)])|0);
         $1267=1<<$I7_0_i_i;
         $1268=$1266&$1267;
         $1269=($1268|0)==0;
         if ($1269) {
          $1271=$1266|$1267;
          HEAP32[((102452)>>2)]=$1271;
          HEAP32[(($1259)>>2)]=$1230;
          $1272=$1259;
          $_sum15_i_i=((($_sum_i19_i)+(24))|0);
          $1273=(($tbase_245_i+$_sum15_i_i)|0);
          $1274=$1273;
          HEAP32[(($1274)>>2)]=$1272;
          $_sum16_i_i=((($_sum_i19_i)+(12))|0);
          $1275=(($tbase_245_i+$_sum16_i_i)|0);
          $1276=$1275;
          HEAP32[(($1276)>>2)]=$1230;
          $_sum17_i_i=((($_sum_i19_i)+(8))|0);
          $1277=(($tbase_245_i+$_sum17_i_i)|0);
          $1278=$1277;
          HEAP32[(($1278)>>2)]=$1230;
          break;
         }
         $1280=((HEAP32[(($1259)>>2)])|0);
         $1281=($I7_0_i_i|0)==31;
         if ($1281) {
          $1286=0;
         } else {
          $1283=$I7_0_i_i>>>1;
          $1284=(((25)-($1283))|0);
          $1286=$1284;
         }

         $1287=(($1280+4)|0);
         $1288=((HEAP32[(($1287)>>2)])|0);
         $1289=$1288&-8;
         $1290=($1289|0)==($qsize_0_i_i|0);
         do {
          if ($1290) {
           $T_0_lcssa_i26_i=$1280;
          } else {
           $1291=$qsize_0_i_i<<$1286;
           $T_056_i_i=$1280;$K8_057_i_i=$1291;
           while(1) {


            $1299=$K8_057_i_i>>>31;
            $1300=(($T_056_i_i+16+($1299<<2))|0);
            $1301=((HEAP32[(($1300)>>2)])|0);
            $1302=($1301|0)==0;
            if ($1302) {
             $T_056_i_i_lcssa=$T_056_i_i;$_lcssa=$1300;
             break;
            }
            $1293=$K8_057_i_i<<1;
            $1294=(($1301+4)|0);
            $1295=((HEAP32[(($1294)>>2)])|0);
            $1296=$1295&-8;
            $1297=($1296|0)==($qsize_0_i_i|0);
            if ($1297) {
             $_lcssa142=$1301;
             label = 314;
             break;
            } else {
             $T_056_i_i=$1301;$K8_057_i_i=$1293;
            }
           }
           if ((label|0) == 314) {

            $T_0_lcssa_i26_i=$_lcssa142;
            break;
           }


           $1304=$_lcssa;
           $1305=((HEAP32[((102464)>>2)])|0);
           $1306=($1304>>>0)<($1305>>>0);
           if ($1306) {
            _abort(); return ((0)|0);
            return ((0)|0);
           } else {
            HEAP32[(($_lcssa)>>2)]=$1230;
            $_sum24_i_i=((($_sum_i19_i)+(24))|0);
            $1308=(($tbase_245_i+$_sum24_i_i)|0);
            $1309=$1308;
            HEAP32[(($1309)>>2)]=$T_056_i_i_lcssa;
            $_sum25_i_i=((($_sum_i19_i)+(12))|0);
            $1310=(($tbase_245_i+$_sum25_i_i)|0);
            $1311=$1310;
            HEAP32[(($1311)>>2)]=$1230;
            $_sum26_i_i=((($_sum_i19_i)+(8))|0);
            $1312=(($tbase_245_i+$_sum26_i_i)|0);
            $1313=$1312;
            HEAP32[(($1313)>>2)]=$1230;
            break L352;
           }
          }
         } while(0);

         $1315=(($T_0_lcssa_i26_i+8)|0);
         $1316=((HEAP32[(($1315)>>2)])|0);
         $1317=$T_0_lcssa_i26_i;
         $1318=((HEAP32[((102464)>>2)])|0);
         $1319=($1317>>>0)>=($1318>>>0);
         $1320=$1316;
         $1321=($1320>>>0)>=($1318>>>0);
         $or_cond_i27_i=$1319&$1321;
         if ($or_cond_i27_i) {
          $1323=(($1316+12)|0);
          HEAP32[(($1323)>>2)]=$1230;
          HEAP32[(($1315)>>2)]=$1230;
          $_sum21_i_i=((($_sum_i19_i)+(8))|0);
          $1324=(($tbase_245_i+$_sum21_i_i)|0);
          $1325=$1324;
          HEAP32[(($1325)>>2)]=$1316;
          $_sum22_i_i=((($_sum_i19_i)+(12))|0);
          $1326=(($tbase_245_i+$_sum22_i_i)|0);
          $1327=$1326;
          HEAP32[(($1327)>>2)]=$T_0_lcssa_i26_i;
          $_sum23_i_i=((($_sum_i19_i)+(24))|0);
          $1328=(($tbase_245_i+$_sum23_i_i)|0);
          $1329=$1328;
          HEAP32[(($1329)>>2)]=0;
          break;
         } else {
          _abort(); return ((0)|0);
          return ((0)|0);
         }
        }
       } while(0);
       $_sum1819_i_i=$995|8;
       $1330=(($tbase_245_i+$_sum1819_i_i)|0);
       $mem_0=$1330;

       return (($mem_0)|0);
      }
      else if ((label|0) == 319) {
      }
     } while(0);
     $1331=$891;
     $sp_0_i_i_i=102896;
     while(1) {

      $1333=(($sp_0_i_i_i)|0);
      $1334=((HEAP32[(($1333)>>2)])|0);
      $1335=($1334>>>0)>($1331>>>0);
      if (!($1335)) {
       $1337=(($sp_0_i_i_i+4)|0);
       $1338=((HEAP32[(($1337)>>2)])|0);
       $1339=(($1334+$1338)|0);
       $1340=($1339>>>0)>($1331>>>0);
       if ($1340) {
        $_lcssa148=$1334;$_lcssa149=$1338;$_lcssa150=$1339;
        break;
       }
      }
      $1342=(($sp_0_i_i_i+8)|0);
      $1343=((HEAP32[(($1342)>>2)])|0);
      $sp_0_i_i_i=$1343;
     }



     $_sum_i13_i=((($_lcssa149)-(47))|0);
     $_sum1_i14_i=((($_lcssa149)-(39))|0);
     $1344=(($_lcssa148+$_sum1_i14_i)|0);
     $1345=$1344;
     $1346=$1345&7;
     $1347=($1346|0)==0;
     if ($1347) {
      $1352=0;
     } else {
      $1349=(((-$1345))|0);
      $1350=$1349&7;
      $1352=$1350;
     }

     $_sum2_i15_i=((($_sum_i13_i)+($1352))|0);
     $1353=(($_lcssa148+$_sum2_i15_i)|0);
     $1354=(($891+16)|0);
     $1355=$1354;
     $1356=($1353>>>0)<($1355>>>0);
     $1357=($1356?$1331:$1353);
     $1358=(($1357+8)|0);
     $1359=$1358;
     $1360=((($tsize_244_i)-(40))|0);
     $1361=(($tbase_245_i+8)|0);
     $1362=$1361;
     $1363=$1362&7;
     $1364=($1363|0)==0;
     if ($1364) {
      $1368=0;
     } else {
      $1366=(((-$1362))|0);
      $1367=$1366&7;
      $1368=$1367;
     }

     $1369=(($tbase_245_i+$1368)|0);
     $1370=$1369;
     $1371=((($1360)-($1368))|0);
     HEAP32[((102472)>>2)]=$1370;
     HEAP32[((102460)>>2)]=$1371;
     $1372=$1371|1;
     $_sum_i_i_i=((($1368)+(4))|0);
     $1373=(($tbase_245_i+$_sum_i_i_i)|0);
     $1374=$1373;
     HEAP32[(($1374)>>2)]=$1372;
     $_sum2_i_i_i=((($tsize_244_i)-(36))|0);
     $1375=(($tbase_245_i+$_sum2_i_i_i)|0);
     $1376=$1375;
     HEAP32[(($1376)>>2)]=40;
     $1377=((HEAP32[((57296)>>2)])|0);
     HEAP32[((102476)>>2)]=$1377;
     $1378=(($1357+4)|0);
     $1379=$1378;
     HEAP32[(($1379)>>2)]=27;
     HEAP32[(($1358)>>2)]=((HEAP32[((102896)>>2)])|0);HEAP32[((($1358)+(4))>>2)]=((HEAP32[((102900)>>2)])|0);HEAP32[((($1358)+(8))>>2)]=((HEAP32[((102904)>>2)])|0);HEAP32[((($1358)+(12))>>2)]=((HEAP32[((102908)>>2)])|0);
     HEAP32[((102896)>>2)]=$tbase_245_i;
     HEAP32[((102900)>>2)]=$tsize_244_i;
     HEAP32[((102908)>>2)]=0;
     HEAP32[((102904)>>2)]=$1359;
     $1380=(($1357+28)|0);
     $1381=$1380;
     HEAP32[(($1381)>>2)]=7;
     $1382=(($1357+32)|0);
     $1383=($1382>>>0)<($_lcssa150>>>0);
     if ($1383) {
      $1384=$1381;
      while(1) {

       $1385=(($1384+4)|0);
       HEAP32[(($1385)>>2)]=7;
       $1386=(($1384+8)|0);
       $1387=$1386;
       $1388=($1387>>>0)<($_lcssa150>>>0);
       if ($1388) {
        $1384=$1385;
       } else {
        break;
       }
      }
     }
     $1389=($1357|0)==($1331|0);
     if ($1389) {
      break;
     }
     $1391=$1357;
     $1392=$891;
     $1393=((($1391)-($1392))|0);
     $1394=(($1331+$1393)|0);
     $_sum3_i_i=((($1393)+(4))|0);
     $1395=(($1331+$_sum3_i_i)|0);
     $1396=$1395;
     $1397=((HEAP32[(($1396)>>2)])|0);
     $1398=$1397&-2;
     HEAP32[(($1396)>>2)]=$1398;
     $1399=$1393|1;
     $1400=(($891+4)|0);
     HEAP32[(($1400)>>2)]=$1399;
     $1401=$1394;
     HEAP32[(($1401)>>2)]=$1393;
     $1402=$1393>>>3;
     $1403=($1393>>>0)<((256)>>>0);
     if ($1403) {
      $1405=$1402<<1;
      $1406=((102488+($1405<<2))|0);
      $1407=$1406;
      $1408=((HEAP32[((102448)>>2)])|0);
      $1409=1<<$1402;
      $1410=$1408&$1409;
      $1411=($1410|0)==0;
      do {
       if ($1411) {
        $1413=$1408|$1409;
        HEAP32[((102448)>>2)]=$1413;
        $_sum11_pre_i_i=((($1405)+(2))|0);
        $_pre_i_i=((102488+($_sum11_pre_i_i<<2))|0);
        $F_0_i_i=$1407;$_pre_phi_i_i=$_pre_i_i;
       } else {
        $_sum12_i_i=((($1405)+(2))|0);
        $1415=((102488+($_sum12_i_i<<2))|0);
        $1416=((HEAP32[(($1415)>>2)])|0);
        $1417=$1416;
        $1418=((HEAP32[((102464)>>2)])|0);
        $1419=($1417>>>0)<($1418>>>0);
        if (!($1419)) {
         $F_0_i_i=$1416;$_pre_phi_i_i=$1415;
         break;
        }
        _abort(); return ((0)|0);
        return ((0)|0);
       }
      } while(0);


      HEAP32[(($_pre_phi_i_i)>>2)]=$891;
      $1422=(($F_0_i_i+12)|0);
      HEAP32[(($1422)>>2)]=$891;
      $1423=(($891+8)|0);
      HEAP32[(($1423)>>2)]=$F_0_i_i;
      $1424=(($891+12)|0);
      HEAP32[(($1424)>>2)]=$1407;
      break;
     }
     $1426=$891;
     $1427=$1393>>>8;
     $1428=($1427|0)==0;
     do {
      if ($1428) {
       $I1_0_i_i=0;
      } else {
       $1430=($1393>>>0)>((16777215)>>>0);
       if ($1430) {
        $I1_0_i_i=31;
        break;
       }
       $1432=((($1427)+(1048320))|0);
       $1433=$1432>>>16;
       $1434=$1433&8;
       $1435=$1427<<$1434;
       $1436=((($1435)+(520192))|0);
       $1437=$1436>>>16;
       $1438=$1437&4;
       $1439=$1438|$1434;
       $1440=$1435<<$1438;
       $1441=((($1440)+(245760))|0);
       $1442=$1441>>>16;
       $1443=$1442&2;
       $1444=$1439|$1443;
       $1445=(((14)-($1444))|0);
       $1446=$1440<<$1443;
       $1447=$1446>>>15;
       $1448=((($1445)+($1447))|0);
       $1449=$1448<<1;
       $1450=((($1448)+(7))|0);
       $1451=$1393>>>($1450>>>0);
       $1452=$1451&1;
       $1453=$1452|$1449;
       $I1_0_i_i=$1453;
      }
     } while(0);

     $1455=((102752+($I1_0_i_i<<2))|0);
     $1456=(($891+28)|0);
     $I1_0_c_i_i=$I1_0_i_i;
     HEAP32[(($1456)>>2)]=$I1_0_c_i_i;
     $1457=(($891+20)|0);
     HEAP32[(($1457)>>2)]=0;
     $1458=(($891+16)|0);
     HEAP32[(($1458)>>2)]=0;
     $1459=((HEAP32[((102452)>>2)])|0);
     $1460=1<<$I1_0_i_i;
     $1461=$1459&$1460;
     $1462=($1461|0)==0;
     if ($1462) {
      $1464=$1459|$1460;
      HEAP32[((102452)>>2)]=$1464;
      HEAP32[(($1455)>>2)]=$1426;
      $1465=(($891+24)|0);
      $_c_i_i=$1455;
      HEAP32[(($1465)>>2)]=$_c_i_i;
      $1466=(($891+12)|0);
      HEAP32[(($1466)>>2)]=$891;
      $1467=(($891+8)|0);
      HEAP32[(($1467)>>2)]=$891;
      break;
     }
     $1469=((HEAP32[(($1455)>>2)])|0);
     $1470=($I1_0_i_i|0)==31;
     if ($1470) {
      $1475=0;
     } else {
      $1472=$I1_0_i_i>>>1;
      $1473=(((25)-($1472))|0);
      $1475=$1473;
     }

     $1476=(($1469+4)|0);
     $1477=((HEAP32[(($1476)>>2)])|0);
     $1478=$1477&-8;
     $1479=($1478|0)==($1393|0);
     do {
      if ($1479) {
       $T_0_lcssa_i_i=$1469;
      } else {
       $1480=$1393<<$1475;
       $T_015_i_i=$1469;$K2_016_i_i=$1480;
       while(1) {


        $1488=$K2_016_i_i>>>31;
        $1489=(($T_015_i_i+16+($1488<<2))|0);
        $1490=((HEAP32[(($1489)>>2)])|0);
        $1491=($1490|0)==0;
        if ($1491) {
         $T_015_i_i_lcssa=$T_015_i_i;$_lcssa144=$1489;
         break;
        }
        $1482=$K2_016_i_i<<1;
        $1483=(($1490+4)|0);
        $1484=((HEAP32[(($1483)>>2)])|0);
        $1485=$1484&-8;
        $1486=($1485|0)==($1393|0);
        if ($1486) {
         $_lcssa147=$1490;
         label = 353;
         break;
        } else {
         $T_015_i_i=$1490;$K2_016_i_i=$1482;
        }
       }
       if ((label|0) == 353) {

        $T_0_lcssa_i_i=$_lcssa147;
        break;
       }


       $1493=$_lcssa144;
       $1494=((HEAP32[((102464)>>2)])|0);
       $1495=($1493>>>0)<($1494>>>0);
       if ($1495) {
        _abort(); return ((0)|0);
        return ((0)|0);
       } else {
        HEAP32[(($_lcssa144)>>2)]=$1426;
        $1497=(($891+24)|0);
        $T_0_c8_i_i=$T_015_i_i_lcssa;
        HEAP32[(($1497)>>2)]=$T_0_c8_i_i;
        $1498=(($891+12)|0);
        HEAP32[(($1498)>>2)]=$891;
        $1499=(($891+8)|0);
        HEAP32[(($1499)>>2)]=$891;
        break L323;
       }
      }
     } while(0);

     $1501=(($T_0_lcssa_i_i+8)|0);
     $1502=((HEAP32[(($1501)>>2)])|0);
     $1503=$T_0_lcssa_i_i;
     $1504=((HEAP32[((102464)>>2)])|0);
     $1505=($1503>>>0)>=($1504>>>0);
     $1506=$1502;
     $1507=($1506>>>0)>=($1504>>>0);
     $or_cond_i_i=$1505&$1507;
     if ($or_cond_i_i) {
      $1509=(($1502+12)|0);
      HEAP32[(($1509)>>2)]=$1426;
      HEAP32[(($1501)>>2)]=$1426;
      $1510=(($891+8)|0);
      $_c7_i_i=$1502;
      HEAP32[(($1510)>>2)]=$_c7_i_i;
      $1511=(($891+12)|0);
      $T_0_c_i_i=$T_0_lcssa_i_i;
      HEAP32[(($1511)>>2)]=$T_0_c_i_i;
      $1512=(($891+24)|0);
      HEAP32[(($1512)>>2)]=0;
      break;
     } else {
      _abort(); return ((0)|0);
      return ((0)|0);
     }
    }
   } while(0);
   $1513=((HEAP32[((102460)>>2)])|0);
   $1514=($1513>>>0)>($nb_0>>>0);
   if (!($1514)) {
    break;
   }
   $1516=((($1513)-($nb_0))|0);
   HEAP32[((102460)>>2)]=$1516;
   $1517=((HEAP32[((102472)>>2)])|0);
   $1518=$1517;
   $1519=(($1518+$nb_0)|0);
   $1520=$1519;
   HEAP32[((102472)>>2)]=$1520;
   $1521=$1516|1;
   $_sum_i34=((($nb_0)+(4))|0);
   $1522=(($1518+$_sum_i34)|0);
   $1523=$1522;
   HEAP32[(($1523)>>2)]=$1521;
   $1524=$nb_0|3;
   $1525=(($1517+4)|0);
   HEAP32[(($1525)>>2)]=$1524;
   $1526=(($1517+8)|0);
   $1527=$1526;
   $mem_0=$1527;

   return (($mem_0)|0);
  }
 } while(0);
 $1528=((___errno_location())|0);
 HEAP32[(($1528)>>2)]=12;
 $mem_0=0;

 return (($mem_0)|0);
}


function _free($mem){
 $mem=($mem)|0;
 var $1=0,$3=0,$4=0,$5=0,$6=0,$8=0,$9=0,$10=0,$11=0,$12=0,$14=0,$_sum=0,$15=0,$16=0,$17=0,$18=0,$20=0,$21=0,$22=0,$_sum3=0;
 var $24=0,$25=0,$26=0,$27=0,$29=0,$30=0,$32=0,$33=0,$_sum47=0,$35=0,$36=0,$37=0,$_sum48=0,$38=0,$39=0,$40=0,$41=0,$42=0,$43=0,$44=0;
 var $46=0,$47=0,$49=0,$50=0,$51=0,$52=0,$54=0,$55=0,$56=0,$57=0,$59=0,$_pre82=0,$61=0,$62=0,$64=0,$65=0,$66=0,$_pre_phi83=0,$67=0,$69=0;
 var $_sum37=0,$70=0,$71=0,$72=0,$_sum38=0,$73=0,$74=0,$75=0,$76=0,$_sum44=0,$78=0,$79=0,$80=0,$81=0,$82=0,$84=0,$85=0,$86=0,$88=0,$89=0;
 var $90=0,$_sum40=0,$93=0,$94=0,$95=0,$96=0,$_sum39=0,$98=0,$99=0,$100=0,$101=0,$RP_0_ph=0,$R_0_ph=0,$RP_0=0,$R_0=0,$102=0,$103=0,$104=0,$106=0,$107=0;
 var $108=0,$RP_0_be=0,$R_0_be=0,$R_0_lcssa=0,$RP_0_lcssa=0,$110=0,$111=0,$R_1=0,$115=0,$_sum41=0,$117=0,$118=0,$119=0,$120=0,$121=0,$122=0,$cond=0,$124=0,$125=0,$126=0;
 var $127=0,$128=0,$130=0,$131=0,$132=0,$134=0,$135=0,$136=0,$139=0,$142=0,$144=0,$145=0,$146=0,$148=0,$_sum42=0,$149=0,$150=0,$151=0,$152=0,$154=0;
 var $155=0,$156=0,$158=0,$159=0,$_sum43=0,$162=0,$163=0,$164=0,$165=0,$167=0,$168=0,$169=0,$171=0,$172=0,$_sum4=0,$176=0,$177=0,$178=0,$179=0,$180=0;
 var $182=0,$183=0,$184=0,$_sum35=0,$185=0,$186=0,$187=0,$psize_0=0,$p_0=0,$189=0,$190=0,$_sum34=0,$192=0,$193=0,$194=0,$195=0,$phitmp=0,$197=0,$198=0,$200=0;
 var $201=0,$203=0,$204=0,$205=0,$206=0,$207=0,$208=0,$211=0,$212=0,$214=0,$215=0,$216=0,$217=0,$218=0,$219=0,$221=0,$222=0,$223=0,$224=0,$226=0;
 var $227=0,$228=0,$_sum2829=0,$229=0,$230=0,$231=0,$232=0,$233=0,$234=0,$235=0,$237=0,$238=0,$239=0,$241=0,$242=0,$243=0,$244=0,$246=0,$247=0,$248=0;
 var $249=0,$251=0,$_pre80=0,$253=0,$254=0,$255=0,$257=0,$258=0,$259=0,$_pre_phi81=0,$260=0,$262=0,$_sum6=0,$263=0,$264=0,$265=0,$_sum78=0,$266=0,$267=0,$268=0;
 var $269=0,$271=0,$272=0,$273=0,$274=0,$275=0,$276=0,$278=0,$279=0,$280=0,$282=0,$283=0,$284=0,$_sum10=0,$287=0,$288=0,$289=0,$290=0,$_sum9=0,$292=0;
 var $293=0,$294=0,$295=0,$RP9_0_ph=0,$R7_0_ph=0,$RP9_0=0,$R7_0=0,$296=0,$297=0,$298=0,$300=0,$301=0,$302=0,$RP9_0_be=0,$R7_0_be=0,$R7_0_lcssa=0,$RP9_0_lcssa=0,$304=0,$305=0,$306=0;
 var $R7_1=0,$310=0,$_sum21=0,$312=0,$313=0,$314=0,$315=0,$316=0,$317=0,$cond69=0,$319=0,$320=0,$321=0,$322=0,$323=0,$325=0,$326=0,$327=0,$329=0,$330=0;
 var $331=0,$334=0,$337=0,$339=0,$340=0,$341=0,$343=0,$_sum22=0,$344=0,$345=0,$346=0,$347=0,$349=0,$350=0,$351=0,$353=0,$354=0,$_sum23=0,$357=0,$358=0;
 var $359=0,$360=0,$362=0,$363=0,$364=0,$366=0,$367=0,$371=0,$372=0,$373=0,$374=0,$375=0,$376=0,$379=0,$380=0,$381=0,$382=0,$383=0,$psize_1=0,$385=0;
 var $386=0,$388=0,$389=0,$390=0,$391=0,$392=0,$393=0,$394=0,$396=0,$_sum19_pre=0,$_pre=0,$_sum20=0,$398=0,$399=0,$400=0,$401=0,$402=0,$_pre_phi=0,$F16_0=0,$405=0;
 var $406=0,$407=0,$409=0,$410=0,$411=0,$413=0,$415=0,$416=0,$417=0,$418=0,$419=0,$420=0,$421=0,$422=0,$423=0,$424=0,$425=0,$426=0,$427=0,$428=0;
 var $429=0,$430=0,$431=0,$432=0,$433=0,$434=0,$435=0,$436=0,$I18_0=0,$438=0,$439=0,$I18_0_c=0,$440=0,$441=0,$442=0,$443=0,$444=0,$445=0,$447=0,$448=0;
 var $_c=0,$449=0,$450=0,$452=0,$453=0,$455=0,$456=0,$458=0,$459=0,$460=0,$461=0,$462=0,$463=0,$465=0,$466=0,$467=0,$468=0,$469=0,$K19_075=0,$T_074=0;
 var $471=0,$472=0,$473=0,$474=0,$_lcssa=0,$T_074_lcssa=0,$476=0,$477=0,$478=0,$480=0,$T_0_c16=0,$481=0,$482=0,$_lcssa92=0,$T_0_lcssa=0,$484=0,$485=0,$486=0,$487=0,$488=0;
 var $489=0,$490=0,$or_cond=0,$492=0,$493=0,$_c15=0,$494=0,$T_0_c=0,$495=0,$497=0,$498=0,$499=0,$sp_0_in_i=0,$sp_0_i=0,$500=0,$501=0,label=0;

 $1=($mem|0)==0;
 if ($1) {
  return;
 }
 $3=((($mem)-(8))|0);
 $4=$3;
 $5=((HEAP32[((102464)>>2)])|0);
 $6=($3>>>0)<($5>>>0);
 if ($6) {
  _abort();

 }
 $8=((($mem)-(4))|0);
 $9=$8;
 $10=((HEAP32[(($9)>>2)])|0);
 $11=$10&3;
 $12=($11|0)==1;
 if ($12) {
  _abort();

 }
 $14=$10&-8;
 $_sum=((($14)-(8))|0);
 $15=(($mem+$_sum)|0);
 $16=$15;
 $17=$10&1;
 $18=($17|0)==0;
 L10: do {
  if ($18) {
   $20=$3;
   $21=((HEAP32[(($20)>>2)])|0);
   $22=($11|0)==0;
   if ($22) {
    return;
   }
   $_sum3=(((-8)-($21))|0);
   $24=(($mem+$_sum3)|0);
   $25=$24;
   $26=((($21)+($14))|0);
   $27=($24>>>0)<($5>>>0);
   if ($27) {
    _abort();

   }
   $29=((HEAP32[((102468)>>2)])|0);
   $30=($25|0)==($29|0);
   if ($30) {
    $_sum4=((($14)-(4))|0);
    $176=(($mem+$_sum4)|0);
    $177=$176;
    $178=((HEAP32[(($177)>>2)])|0);
    $179=$178&3;
    $180=($179|0)==3;
    if (!($180)) {
     $p_0=$25;$psize_0=$26;
     break;
    }
    HEAP32[((102456)>>2)]=$26;
    $182=((HEAP32[(($177)>>2)])|0);
    $183=$182&-2;
    HEAP32[(($177)>>2)]=$183;
    $184=$26|1;
    $_sum35=((($_sum3)+(4))|0);
    $185=(($mem+$_sum35)|0);
    $186=$185;
    HEAP32[(($186)>>2)]=$184;
    $187=$15;
    HEAP32[(($187)>>2)]=$26;
    return;
   }
   $32=$21>>>3;
   $33=($21>>>0)<((256)>>>0);
   if ($33) {
    $_sum47=((($_sum3)+(8))|0);
    $35=(($mem+$_sum47)|0);
    $36=$35;
    $37=((HEAP32[(($36)>>2)])|0);
    $_sum48=((($_sum3)+(12))|0);
    $38=(($mem+$_sum48)|0);
    $39=$38;
    $40=((HEAP32[(($39)>>2)])|0);
    $41=$32<<1;
    $42=((102488+($41<<2))|0);
    $43=$42;
    $44=($37|0)==($43|0);
    do {
     if (!($44)) {
      $46=$37;
      $47=($46>>>0)<($5>>>0);
      if ($47) {
       _abort();

      }
      $49=(($37+12)|0);
      $50=((HEAP32[(($49)>>2)])|0);
      $51=($50|0)==($25|0);
      if ($51) {
       break;
      }
      _abort();

     }
    } while(0);
    $52=($40|0)==($37|0);
    if ($52) {
     $54=1<<$32;
     $55=$54^-1;
     $56=((HEAP32[((102448)>>2)])|0);
     $57=$56&$55;
     HEAP32[((102448)>>2)]=$57;
     $p_0=$25;$psize_0=$26;
     break;
    }
    $59=($40|0)==($43|0);
    do {
     if ($59) {
      $_pre82=(($40+8)|0);
      $_pre_phi83=$_pre82;
     } else {
      $61=$40;
      $62=($61>>>0)<($5>>>0);
      if ($62) {
       _abort();

      }
      $64=(($40+8)|0);
      $65=((HEAP32[(($64)>>2)])|0);
      $66=($65|0)==($25|0);
      if ($66) {
       $_pre_phi83=$64;
       break;
      }
      _abort();

     }
    } while(0);

    $67=(($37+12)|0);
    HEAP32[(($67)>>2)]=$40;
    HEAP32[(($_pre_phi83)>>2)]=$37;
    $p_0=$25;$psize_0=$26;
    break;
   }
   $69=$24;
   $_sum37=((($_sum3)+(24))|0);
   $70=(($mem+$_sum37)|0);
   $71=$70;
   $72=((HEAP32[(($71)>>2)])|0);
   $_sum38=((($_sum3)+(12))|0);
   $73=(($mem+$_sum38)|0);
   $74=$73;
   $75=((HEAP32[(($74)>>2)])|0);
   $76=($75|0)==($69|0);
   do {
    if ($76) {
     $_sum40=((($_sum3)+(20))|0);
     $93=(($mem+$_sum40)|0);
     $94=$93;
     $95=((HEAP32[(($94)>>2)])|0);
     $96=($95|0)==0;
     if ($96) {
      $_sum39=((($_sum3)+(16))|0);
      $98=(($mem+$_sum39)|0);
      $99=$98;
      $100=((HEAP32[(($99)>>2)])|0);
      $101=($100|0)==0;
      if ($101) {
       $R_1=0;
       break;
      } else {
       $R_0_ph=$100;$RP_0_ph=$99;
      }
     } else {
      $R_0_ph=$95;$RP_0_ph=$94;
     }


     $R_0=$R_0_ph;$RP_0=$RP_0_ph;
     while(1) {


      $102=(($R_0+20)|0);
      $103=((HEAP32[(($102)>>2)])|0);
      $104=($103|0)==0;
      if ($104) {
       $106=(($R_0+16)|0);
       $107=((HEAP32[(($106)>>2)])|0);
       $108=($107|0)==0;
       if ($108) {
        $RP_0_lcssa=$RP_0;$R_0_lcssa=$R_0;
        break;
       } else {
        $R_0_be=$107;$RP_0_be=$106;
       }
      } else {
       $R_0_be=$103;$RP_0_be=$102;
      }


      $R_0=$R_0_be;$RP_0=$RP_0_be;
     }


     $110=$RP_0_lcssa;
     $111=($110>>>0)<($5>>>0);
     if ($111) {
      _abort();

     } else {
      HEAP32[(($RP_0_lcssa)>>2)]=0;
      $R_1=$R_0_lcssa;
      break;
     }
    } else {
     $_sum44=((($_sum3)+(8))|0);
     $78=(($mem+$_sum44)|0);
     $79=$78;
     $80=((HEAP32[(($79)>>2)])|0);
     $81=$80;
     $82=($81>>>0)<($5>>>0);
     if ($82) {
      _abort();

     }
     $84=(($80+12)|0);
     $85=((HEAP32[(($84)>>2)])|0);
     $86=($85|0)==($69|0);
     if (!($86)) {
      _abort();

     }
     $88=(($75+8)|0);
     $89=((HEAP32[(($88)>>2)])|0);
     $90=($89|0)==($69|0);
     if ($90) {
      HEAP32[(($84)>>2)]=$75;
      HEAP32[(($88)>>2)]=$80;
      $R_1=$75;
      break;
     } else {
      _abort();

     }
    }
   } while(0);

   $115=($72|0)==0;
   if ($115) {
    $p_0=$25;$psize_0=$26;
    break;
   }
   $_sum41=((($_sum3)+(28))|0);
   $117=(($mem+$_sum41)|0);
   $118=$117;
   $119=((HEAP32[(($118)>>2)])|0);
   $120=((102752+($119<<2))|0);
   $121=((HEAP32[(($120)>>2)])|0);
   $122=($69|0)==($121|0);
   do {
    if ($122) {
     HEAP32[(($120)>>2)]=$R_1;
     $cond=($R_1|0)==0;
     if (!($cond)) {
      break;
     }
     $124=((HEAP32[(($118)>>2)])|0);
     $125=1<<$124;
     $126=$125^-1;
     $127=((HEAP32[((102452)>>2)])|0);
     $128=$127&$126;
     HEAP32[((102452)>>2)]=$128;
     $p_0=$25;$psize_0=$26;
     break L10;
    } else {
     $130=$72;
     $131=((HEAP32[((102464)>>2)])|0);
     $132=($130>>>0)<($131>>>0);
     if ($132) {
      _abort();

     }
     $134=(($72+16)|0);
     $135=((HEAP32[(($134)>>2)])|0);
     $136=($135|0)==($69|0);
     if ($136) {
      HEAP32[(($134)>>2)]=$R_1;
     } else {
      $139=(($72+20)|0);
      HEAP32[(($139)>>2)]=$R_1;
     }
     $142=($R_1|0)==0;
     if ($142) {
      $p_0=$25;$psize_0=$26;
      break L10;
     }
    }
   } while(0);
   $144=$R_1;
   $145=((HEAP32[((102464)>>2)])|0);
   $146=($144>>>0)<($145>>>0);
   if ($146) {
    _abort();

   }
   $148=(($R_1+24)|0);
   HEAP32[(($148)>>2)]=$72;
   $_sum42=((($_sum3)+(16))|0);
   $149=(($mem+$_sum42)|0);
   $150=$149;
   $151=((HEAP32[(($150)>>2)])|0);
   $152=($151|0)==0;
   do {
    if (!($152)) {
     $154=$151;
     $155=((HEAP32[((102464)>>2)])|0);
     $156=($154>>>0)<($155>>>0);
     if ($156) {
      _abort();

     } else {
      $158=(($R_1+16)|0);
      HEAP32[(($158)>>2)]=$151;
      $159=(($151+24)|0);
      HEAP32[(($159)>>2)]=$R_1;
      break;
     }
    }
   } while(0);
   $_sum43=((($_sum3)+(20))|0);
   $162=(($mem+$_sum43)|0);
   $163=$162;
   $164=((HEAP32[(($163)>>2)])|0);
   $165=($164|0)==0;
   if ($165) {
    $p_0=$25;$psize_0=$26;
    break;
   }
   $167=$164;
   $168=((HEAP32[((102464)>>2)])|0);
   $169=($167>>>0)<($168>>>0);
   if ($169) {
    _abort();

   } else {
    $171=(($R_1+20)|0);
    HEAP32[(($171)>>2)]=$164;
    $172=(($164+24)|0);
    HEAP32[(($172)>>2)]=$R_1;
    $p_0=$25;$psize_0=$26;
    break;
   }
  } else {
   $p_0=$4;$psize_0=$14;
  }
 } while(0);


 $189=$p_0;
 $190=($189>>>0)<($15>>>0);
 if (!($190)) {
  _abort();

 }
 $_sum34=((($14)-(4))|0);
 $192=(($mem+$_sum34)|0);
 $193=$192;
 $194=((HEAP32[(($193)>>2)])|0);
 $195=$194&1;
 $phitmp=($195|0)==0;
 if ($phitmp) {
  _abort();

 }
 $197=$194&2;
 $198=($197|0)==0;
 do {
  if ($198) {
   $200=((HEAP32[((102472)>>2)])|0);
   $201=($16|0)==($200|0);
   if ($201) {
    $203=((HEAP32[((102460)>>2)])|0);
    $204=((($203)+($psize_0))|0);
    HEAP32[((102460)>>2)]=$204;
    HEAP32[((102472)>>2)]=$p_0;
    $205=$204|1;
    $206=(($p_0+4)|0);
    HEAP32[(($206)>>2)]=$205;
    $207=((HEAP32[((102468)>>2)])|0);
    $208=($p_0|0)==($207|0);
    if (!($208)) {
     return;
    }
    HEAP32[((102468)>>2)]=0;
    HEAP32[((102456)>>2)]=0;
    return;
   }
   $211=((HEAP32[((102468)>>2)])|0);
   $212=($16|0)==($211|0);
   if ($212) {
    $214=((HEAP32[((102456)>>2)])|0);
    $215=((($214)+($psize_0))|0);
    HEAP32[((102456)>>2)]=$215;
    HEAP32[((102468)>>2)]=$p_0;
    $216=$215|1;
    $217=(($p_0+4)|0);
    HEAP32[(($217)>>2)]=$216;
    $218=(($189+$215)|0);
    $219=$218;
    HEAP32[(($219)>>2)]=$215;
    return;
   }
   $221=$194&-8;
   $222=((($221)+($psize_0))|0);
   $223=$194>>>3;
   $224=($194>>>0)<((256)>>>0);
   L115: do {
    if ($224) {
     $226=(($mem+$14)|0);
     $227=$226;
     $228=((HEAP32[(($227)>>2)])|0);
     $_sum2829=$14|4;
     $229=(($mem+$_sum2829)|0);
     $230=$229;
     $231=((HEAP32[(($230)>>2)])|0);
     $232=$223<<1;
     $233=((102488+($232<<2))|0);
     $234=$233;
     $235=($228|0)==($234|0);
     do {
      if (!($235)) {
       $237=$228;
       $238=((HEAP32[((102464)>>2)])|0);
       $239=($237>>>0)<($238>>>0);
       if ($239) {
        _abort();

       }
       $241=(($228+12)|0);
       $242=((HEAP32[(($241)>>2)])|0);
       $243=($242|0)==($16|0);
       if ($243) {
        break;
       }
       _abort();

      }
     } while(0);
     $244=($231|0)==($228|0);
     if ($244) {
      $246=1<<$223;
      $247=$246^-1;
      $248=((HEAP32[((102448)>>2)])|0);
      $249=$248&$247;
      HEAP32[((102448)>>2)]=$249;
      break;
     }
     $251=($231|0)==($234|0);
     do {
      if ($251) {
       $_pre80=(($231+8)|0);
       $_pre_phi81=$_pre80;
      } else {
       $253=$231;
       $254=((HEAP32[((102464)>>2)])|0);
       $255=($253>>>0)<($254>>>0);
       if ($255) {
        _abort();

       }
       $257=(($231+8)|0);
       $258=((HEAP32[(($257)>>2)])|0);
       $259=($258|0)==($16|0);
       if ($259) {
        $_pre_phi81=$257;
        break;
       }
       _abort();

      }
     } while(0);

     $260=(($228+12)|0);
     HEAP32[(($260)>>2)]=$231;
     HEAP32[(($_pre_phi81)>>2)]=$228;
    } else {
     $262=$15;
     $_sum6=((($14)+(16))|0);
     $263=(($mem+$_sum6)|0);
     $264=$263;
     $265=((HEAP32[(($264)>>2)])|0);
     $_sum78=$14|4;
     $266=(($mem+$_sum78)|0);
     $267=$266;
     $268=((HEAP32[(($267)>>2)])|0);
     $269=($268|0)==($262|0);
     do {
      if ($269) {
       $_sum10=((($14)+(12))|0);
       $287=(($mem+$_sum10)|0);
       $288=$287;
       $289=((HEAP32[(($288)>>2)])|0);
       $290=($289|0)==0;
       if ($290) {
        $_sum9=((($14)+(8))|0);
        $292=(($mem+$_sum9)|0);
        $293=$292;
        $294=((HEAP32[(($293)>>2)])|0);
        $295=($294|0)==0;
        if ($295) {
         $R7_1=0;
         break;
        } else {
         $R7_0_ph=$294;$RP9_0_ph=$293;
        }
       } else {
        $R7_0_ph=$289;$RP9_0_ph=$288;
       }


       $R7_0=$R7_0_ph;$RP9_0=$RP9_0_ph;
       while(1) {


        $296=(($R7_0+20)|0);
        $297=((HEAP32[(($296)>>2)])|0);
        $298=($297|0)==0;
        if ($298) {
         $300=(($R7_0+16)|0);
         $301=((HEAP32[(($300)>>2)])|0);
         $302=($301|0)==0;
         if ($302) {
          $RP9_0_lcssa=$RP9_0;$R7_0_lcssa=$R7_0;
          break;
         } else {
          $R7_0_be=$301;$RP9_0_be=$300;
         }
        } else {
         $R7_0_be=$297;$RP9_0_be=$296;
        }


        $R7_0=$R7_0_be;$RP9_0=$RP9_0_be;
       }


       $304=$RP9_0_lcssa;
       $305=((HEAP32[((102464)>>2)])|0);
       $306=($304>>>0)<($305>>>0);
       if ($306) {
        _abort();

       } else {
        HEAP32[(($RP9_0_lcssa)>>2)]=0;
        $R7_1=$R7_0_lcssa;
        break;
       }
      } else {
       $271=(($mem+$14)|0);
       $272=$271;
       $273=((HEAP32[(($272)>>2)])|0);
       $274=$273;
       $275=((HEAP32[((102464)>>2)])|0);
       $276=($274>>>0)<($275>>>0);
       if ($276) {
        _abort();

       }
       $278=(($273+12)|0);
       $279=((HEAP32[(($278)>>2)])|0);
       $280=($279|0)==($262|0);
       if (!($280)) {
        _abort();

       }
       $282=(($268+8)|0);
       $283=((HEAP32[(($282)>>2)])|0);
       $284=($283|0)==($262|0);
       if ($284) {
        HEAP32[(($278)>>2)]=$268;
        HEAP32[(($282)>>2)]=$273;
        $R7_1=$268;
        break;
       } else {
        _abort();

       }
      }
     } while(0);

     $310=($265|0)==0;
     if ($310) {
      break;
     }
     $_sum21=((($14)+(20))|0);
     $312=(($mem+$_sum21)|0);
     $313=$312;
     $314=((HEAP32[(($313)>>2)])|0);
     $315=((102752+($314<<2))|0);
     $316=((HEAP32[(($315)>>2)])|0);
     $317=($262|0)==($316|0);
     do {
      if ($317) {
       HEAP32[(($315)>>2)]=$R7_1;
       $cond69=($R7_1|0)==0;
       if (!($cond69)) {
        break;
       }
       $319=((HEAP32[(($313)>>2)])|0);
       $320=1<<$319;
       $321=$320^-1;
       $322=((HEAP32[((102452)>>2)])|0);
       $323=$322&$321;
       HEAP32[((102452)>>2)]=$323;
       break L115;
      } else {
       $325=$265;
       $326=((HEAP32[((102464)>>2)])|0);
       $327=($325>>>0)<($326>>>0);
       if ($327) {
        _abort();

       }
       $329=(($265+16)|0);
       $330=((HEAP32[(($329)>>2)])|0);
       $331=($330|0)==($262|0);
       if ($331) {
        HEAP32[(($329)>>2)]=$R7_1;
       } else {
        $334=(($265+20)|0);
        HEAP32[(($334)>>2)]=$R7_1;
       }
       $337=($R7_1|0)==0;
       if ($337) {
        break L115;
       }
      }
     } while(0);
     $339=$R7_1;
     $340=((HEAP32[((102464)>>2)])|0);
     $341=($339>>>0)<($340>>>0);
     if ($341) {
      _abort();

     }
     $343=(($R7_1+24)|0);
     HEAP32[(($343)>>2)]=$265;
     $_sum22=((($14)+(8))|0);
     $344=(($mem+$_sum22)|0);
     $345=$344;
     $346=((HEAP32[(($345)>>2)])|0);
     $347=($346|0)==0;
     do {
      if (!($347)) {
       $349=$346;
       $350=((HEAP32[((102464)>>2)])|0);
       $351=($349>>>0)<($350>>>0);
       if ($351) {
        _abort();

       } else {
        $353=(($R7_1+16)|0);
        HEAP32[(($353)>>2)]=$346;
        $354=(($346+24)|0);
        HEAP32[(($354)>>2)]=$R7_1;
        break;
       }
      }
     } while(0);
     $_sum23=((($14)+(12))|0);
     $357=(($mem+$_sum23)|0);
     $358=$357;
     $359=((HEAP32[(($358)>>2)])|0);
     $360=($359|0)==0;
     if ($360) {
      break;
     }
     $362=$359;
     $363=((HEAP32[((102464)>>2)])|0);
     $364=($362>>>0)<($363>>>0);
     if ($364) {
      _abort();

     } else {
      $366=(($R7_1+20)|0);
      HEAP32[(($366)>>2)]=$359;
      $367=(($359+24)|0);
      HEAP32[(($367)>>2)]=$R7_1;
      break;
     }
    }
   } while(0);
   $371=$222|1;
   $372=(($p_0+4)|0);
   HEAP32[(($372)>>2)]=$371;
   $373=(($189+$222)|0);
   $374=$373;
   HEAP32[(($374)>>2)]=$222;
   $375=((HEAP32[((102468)>>2)])|0);
   $376=($p_0|0)==($375|0);
   if (!($376)) {
    $psize_1=$222;
    break;
   }
   HEAP32[((102456)>>2)]=$222;
   return;
  } else {
   $379=$194&-2;
   HEAP32[(($193)>>2)]=$379;
   $380=$psize_0|1;
   $381=(($p_0+4)|0);
   HEAP32[(($381)>>2)]=$380;
   $382=(($189+$psize_0)|0);
   $383=$382;
   HEAP32[(($383)>>2)]=$psize_0;
   $psize_1=$psize_0;
  }
 } while(0);

 $385=$psize_1>>>3;
 $386=($psize_1>>>0)<((256)>>>0);
 if ($386) {
  $388=$385<<1;
  $389=((102488+($388<<2))|0);
  $390=$389;
  $391=((HEAP32[((102448)>>2)])|0);
  $392=1<<$385;
  $393=$391&$392;
  $394=($393|0)==0;
  do {
   if ($394) {
    $396=$391|$392;
    HEAP32[((102448)>>2)]=$396;
    $_sum19_pre=((($388)+(2))|0);
    $_pre=((102488+($_sum19_pre<<2))|0);
    $F16_0=$390;$_pre_phi=$_pre;
   } else {
    $_sum20=((($388)+(2))|0);
    $398=((102488+($_sum20<<2))|0);
    $399=((HEAP32[(($398)>>2)])|0);
    $400=$399;
    $401=((HEAP32[((102464)>>2)])|0);
    $402=($400>>>0)<($401>>>0);
    if (!($402)) {
     $F16_0=$399;$_pre_phi=$398;
     break;
    }
    _abort();

   }
  } while(0);


  HEAP32[(($_pre_phi)>>2)]=$p_0;
  $405=(($F16_0+12)|0);
  HEAP32[(($405)>>2)]=$p_0;
  $406=(($p_0+8)|0);
  HEAP32[(($406)>>2)]=$F16_0;
  $407=(($p_0+12)|0);
  HEAP32[(($407)>>2)]=$390;
  return;
 }
 $409=$p_0;
 $410=$psize_1>>>8;
 $411=($410|0)==0;
 do {
  if ($411) {
   $I18_0=0;
  } else {
   $413=($psize_1>>>0)>((16777215)>>>0);
   if ($413) {
    $I18_0=31;
    break;
   }
   $415=((($410)+(1048320))|0);
   $416=$415>>>16;
   $417=$416&8;
   $418=$410<<$417;
   $419=((($418)+(520192))|0);
   $420=$419>>>16;
   $421=$420&4;
   $422=$421|$417;
   $423=$418<<$421;
   $424=((($423)+(245760))|0);
   $425=$424>>>16;
   $426=$425&2;
   $427=$422|$426;
   $428=(((14)-($427))|0);
   $429=$423<<$426;
   $430=$429>>>15;
   $431=((($428)+($430))|0);
   $432=$431<<1;
   $433=((($431)+(7))|0);
   $434=$psize_1>>>($433>>>0);
   $435=$434&1;
   $436=$435|$432;
   $I18_0=$436;
  }
 } while(0);

 $438=((102752+($I18_0<<2))|0);
 $439=(($p_0+28)|0);
 $I18_0_c=$I18_0;
 HEAP32[(($439)>>2)]=$I18_0_c;
 $440=(($p_0+20)|0);
 HEAP32[(($440)>>2)]=0;
 $441=(($p_0+16)|0);
 HEAP32[(($441)>>2)]=0;
 $442=((HEAP32[((102452)>>2)])|0);
 $443=1<<$I18_0;
 $444=$442&$443;
 $445=($444|0)==0;
 L205: do {
  if ($445) {
   $447=$442|$443;
   HEAP32[((102452)>>2)]=$447;
   HEAP32[(($438)>>2)]=$409;
   $448=(($p_0+24)|0);
   $_c=$438;
   HEAP32[(($448)>>2)]=$_c;
   $449=(($p_0+12)|0);
   HEAP32[(($449)>>2)]=$p_0;
   $450=(($p_0+8)|0);
   HEAP32[(($450)>>2)]=$p_0;
  } else {
   $452=((HEAP32[(($438)>>2)])|0);
   $453=($I18_0|0)==31;
   if ($453) {
    $458=0;
   } else {
    $455=$I18_0>>>1;
    $456=(((25)-($455))|0);
    $458=$456;
   }

   $459=(($452+4)|0);
   $460=((HEAP32[(($459)>>2)])|0);
   $461=$460&-8;
   $462=($461|0)==($psize_1|0);
   do {
    if ($462) {
     $T_0_lcssa=$452;
    } else {
     $463=$psize_1<<$458;
     $T_074=$452;$K19_075=$463;
     while(1) {


      $471=$K19_075>>>31;
      $472=(($T_074+16+($471<<2))|0);
      $473=((HEAP32[(($472)>>2)])|0);
      $474=($473|0)==0;
      if ($474) {
       $T_074_lcssa=$T_074;$_lcssa=$472;
       break;
      }
      $465=$K19_075<<1;
      $466=(($473+4)|0);
      $467=((HEAP32[(($466)>>2)])|0);
      $468=$467&-8;
      $469=($468|0)==($psize_1|0);
      if ($469) {
       $_lcssa92=$473;
       label = 137;
       break;
      } else {
       $T_074=$473;$K19_075=$465;
      }
     }
     if ((label|0) == 137) {

      $T_0_lcssa=$_lcssa92;
      break;
     }


     $476=$_lcssa;
     $477=((HEAP32[((102464)>>2)])|0);
     $478=($476>>>0)<($477>>>0);
     if ($478) {
      _abort();

     } else {
      HEAP32[(($_lcssa)>>2)]=$409;
      $480=(($p_0+24)|0);
      $T_0_c16=$T_074_lcssa;
      HEAP32[(($480)>>2)]=$T_0_c16;
      $481=(($p_0+12)|0);
      HEAP32[(($481)>>2)]=$p_0;
      $482=(($p_0+8)|0);
      HEAP32[(($482)>>2)]=$p_0;
      break L205;
     }
    }
   } while(0);

   $484=(($T_0_lcssa+8)|0);
   $485=((HEAP32[(($484)>>2)])|0);
   $486=$T_0_lcssa;
   $487=((HEAP32[((102464)>>2)])|0);
   $488=($486>>>0)>=($487>>>0);
   $489=$485;
   $490=($489>>>0)>=($487>>>0);
   $or_cond=$488&$490;
   if ($or_cond) {
    $492=(($485+12)|0);
    HEAP32[(($492)>>2)]=$409;
    HEAP32[(($484)>>2)]=$409;
    $493=(($p_0+8)|0);
    $_c15=$485;
    HEAP32[(($493)>>2)]=$_c15;
    $494=(($p_0+12)|0);
    $T_0_c=$T_0_lcssa;
    HEAP32[(($494)>>2)]=$T_0_c;
    $495=(($p_0+24)|0);
    HEAP32[(($495)>>2)]=0;
    break;
   } else {
    _abort();

   }
  }
 } while(0);
 $497=((HEAP32[((102480)>>2)])|0);
 $498=((($497)-(1))|0);
 HEAP32[((102480)>>2)]=$498;
 $499=($498|0)==0;
 if (!($499)) {
  return;
 }
 $sp_0_in_i=102904;
 while(1) {

  $sp_0_i=((HEAP32[(($sp_0_in_i)>>2)])|0);
  $500=($sp_0_i|0)==0;
  $501=(($sp_0_i+8)|0);
  if ($500) {
   break;
  } else {
   $sp_0_in_i=$501;
  }
 }
 HEAP32[((102480)>>2)]=-1;
 return;
}


function _calloc($n_elements,$elem_size){
 $n_elements=($n_elements)|0;
 $elem_size=($elem_size)|0;
 var $1=0,$3=0,$4=0,$5=0,$7=0,$8=0,$_=0,$req_0=0,$10=0,$11=0,$13=0,$14=0,$15=0,$16=0,$17=0,label=0;

 $1=($n_elements|0)==0;
 do {
  if ($1) {
   $req_0=0;
  } else {
   $3=(Math_imul($elem_size,$n_elements)|0);
   $4=$elem_size|$n_elements;
   $5=($4>>>0)>((65535)>>>0);
   if (!($5)) {
    $req_0=$3;
    break;
   }
   $7=(((($3>>>0))/(($n_elements>>>0)))&-1);
   $8=($7|0)==($elem_size|0);
   $_=($8?$3:-1);
   $req_0=$_;
  }
 } while(0);

 $10=((_malloc($req_0))|0);
 $11=($10|0)==0;
 if ($11) {
  return (($10)|0);
 }
 $13=((($10)-(4))|0);
 $14=$13;
 $15=((HEAP32[(($14)>>2)])|0);
 $16=$15&3;
 $17=($16|0)==0;
 if ($17) {
  return (($10)|0);
 }
 _memset((((($10)|0))|0), ((((0)|0))|0), (((($req_0)|0))|0))|0;
 return (($10)|0);
}


function _memset(ptr, value, num) {
    ptr = ptr|0; value = value|0; num = num|0;
    var stop = 0, value4 = 0, stop4 = 0, unaligned = 0;
    stop = (ptr + num)|0;
    if ((num|0) >= 20) {
      // This is unaligned, but quite large, so work hard to get to aligned settings
      value = value & 0xff;
      unaligned = ptr & 3;
      value4 = value | (value << 8) | (value << 16) | (value << 24);
      stop4 = stop & ~3;
      if (unaligned) {
        unaligned = (ptr + 4 - unaligned)|0;
        while ((ptr|0) < (unaligned|0)) { // no need to check for stop, since we have large num
          HEAP8[(ptr)]=value;
          ptr = (ptr+1)|0;
        }
      }
      while ((ptr|0) < (stop4|0)) {
        HEAP32[((ptr)>>2)]=value4;
        ptr = (ptr+4)|0;
      }
    }
    while ((ptr|0) < (stop|0)) {
      HEAP8[(ptr)]=value;
      ptr = (ptr+1)|0;
    }
    return (ptr-num)|0;
}
function _memcpy(dest, src, num) {
    dest = dest|0; src = src|0; num = num|0;
    var ret = 0;
    ret = dest|0;
    if ((dest&3) == (src&3)) {
      while (dest & 3) {
        if ((num|0) == 0) return ret|0;
        HEAP8[(dest)]=((HEAP8[(src)])|0);
        dest = (dest+1)|0;
        src = (src+1)|0;
        num = (num-1)|0;
      }
      while ((num|0) >= 4) {
        HEAP32[((dest)>>2)]=((HEAP32[((src)>>2)])|0);
        dest = (dest+4)|0;
        src = (src+4)|0;
        num = (num-4)|0;
      }
    }
    while ((num|0) > 0) {
      HEAP8[(dest)]=((HEAP8[(src)])|0);
      dest = (dest+1)|0;
      src = (src+1)|0;
      num = (num-1)|0;
    }
    return ret|0;
}
function _strlen(ptr) {
    ptr = ptr|0;
    var curr = 0;
    curr = ptr;
    while (((HEAP8[(curr)])|0)) {
      curr = (curr + 1)|0;
    }
    return (curr - ptr)|0;
}
function _memmove(dest, src, num) {
    dest = dest|0; src = src|0; num = num|0;
    var ret = 0;
    if (((src|0) < (dest|0)) & ((dest|0) < ((src + num)|0))) {
      // Unlikely case: Copy backwards in a safe manner
      ret = dest;
      src = (src + num)|0;
      dest = (dest + num)|0;
      while ((num|0) > 0) {
        dest = (dest - 1)|0;
        src = (src - 1)|0;
        num = (num - 1)|0;
        HEAP8[(dest)]=((HEAP8[(src)])|0);
      }
      dest = ret;
    } else {
      _memcpy(dest, src, num) | 0;
    }
    return dest | 0;
}
function _tolower(chr) {
    chr = chr|0;
    if ((chr|0) < 65) return chr|0;
    if ((chr|0) > 90) return chr|0;
    return (chr - 65 + 97)|0;
}


// EMSCRIPTEN_END_FUNCS

  function iiiiiii__decodeMP3_unclipped__wrapper(a1,a2,a3,a4,a5,a6) { a1=((a1)|0);a2=((a2)|0);a3=((a3)|0);a4=((a4)|0);a5=((a5)|0);a6=((a6)|0); ; return ((_decodeMP3_unclipped(((a1)|0),((a2)|0),((a3)|0),((a4)|0),((a5)|0),((a6)|0)))|0) }

  function dynCall_ii(index,a1) {
    index = index|0;
    a1=a1|0;
    return FUNCTION_TABLE_ii[index&1](a1|0)|0;
  }


  function dynCall_iiifii(index,a1,a2,a3,a4,a5) {
    index = index|0;
    a1=a1|0; a2=a2|0; a3=+a3; a4=a4|0; a5=a5|0;
    return FUNCTION_TABLE_iiifii[index&7](a1|0,a2|0,+a3,a4|0,a5|0)|0;
  }


  function dynCall_vi(index,a1) {
    index = index|0;
    a1=a1|0;
    FUNCTION_TABLE_vi[index&1](a1|0);
  }


  function dynCall_vii(index,a1,a2) {
    index = index|0;
    a1=a1|0; a2=a2|0;
    FUNCTION_TABLE_vii[index&7](a1|0,a2|0);
  }


  function dynCall_iiiiiii(index,a1,a2,a3,a4,a5,a6) {
    index = index|0;
    a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0;
    return FUNCTION_TABLE_iiiiiii[index&3](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0)|0;
  }


  function dynCall_iiii(index,a1,a2,a3) {
    index = index|0;
    a1=a1|0; a2=a2|0; a3=a3|0;
    return FUNCTION_TABLE_iiii[index&3](a1|0,a2|0,a3|0)|0;
  }


  function dynCall_v(index) {
    index = index|0;
    
    FUNCTION_TABLE_v[index&1]();
  }


  function dynCall_iiiii(index,a1,a2,a3,a4) {
    index = index|0;
    a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
    return FUNCTION_TABLE_iiiii[index&15](a1|0,a2|0,a3|0,a4|0)|0;
  }


  function dynCall_iii(index,a1,a2) {
    index = index|0;
    a1=a1|0; a2=a2|0;
    return FUNCTION_TABLE_iii[index&3](a1|0,a2|0)|0;
  }


  function dynCall_viiii(index,a1,a2,a3,a4) {
    index = index|0;
    a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
    FUNCTION_TABLE_viiii[index&15](a1|0,a2|0,a3|0,a4|0);
  }

function b0(p0) { p0 = p0|0; abort(0); return 0 }
  function b1(p0,p1,p2,p3,p4) { p0 = p0|0;p1 = p1|0;p2 = +p2;p3 = p3|0;p4 = p4|0; abort(1); return 0 }
  function b2(p0) { p0 = p0|0; abort(2);  }
  function b3(p0,p1) { p0 = p0|0;p1 = p1|0; abort(3);  }
  function b4(p0,p1,p2,p3,p4,p5) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; abort(4); return 0 }
  function b5(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; abort(5); return 0 }
  function b6() { ; abort(6);  }
  function b7(p0,p1,p2,p3) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; abort(7); return 0 }
  function b8(p0,p1) { p0 = p0|0;p1 = p1|0; abort(8); return 0 }
  function b9(p0,p1,p2,p3) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; abort(9);  }
  // EMSCRIPTEN_END_FUNCS
  var FUNCTION_TABLE_ii = [b0,b0];
  
  var FUNCTION_TABLE_iiifii = [b1,b1,_guess_scalefac_x34,b1,_find_scalefac_x34,b1,b1,b1];
  
  var FUNCTION_TABLE_vi = [b2,b2];
  
  var FUNCTION_TABLE_vii = [b3,b3,_fht,b3,_lame_report_def,b3,b3,b3];
  
  var FUNCTION_TABLE_iiiiiii = [b4,b4,iiiiiii__decodeMP3_unclipped__wrapper,b4];
  
  var FUNCTION_TABLE_iiii = [b5,b5,_choose_table_nonMMX,b5];
  
  var FUNCTION_TABLE_v = [b6,b6];
  
  var FUNCTION_TABLE_iiiii = [b7,b7,_count_bit_noESC_from2,b7,_count_bit_noESC_from3,b7,_count_bit_null,b7,_count_bit_noESC,b7,b7,b7,b7,b7,b7,b7];
  
  var FUNCTION_TABLE_iii = [b8,b8,_floatcompare,b8];
  
  var FUNCTION_TABLE_viiii = [b9,b9,_short_block_constrain,b9,_long_block_constrain,b9,_ABR_iteration_loop,b9,_CBR_iteration_loop,b9,_VBR_old_iteration_loop,b9,_init_xrpow_core_c,b9,_VBR_new_iteration_loop,b9];
  

  return { _strlen: _strlen, _tolower: _tolower, _lame_get_num_channels: _lame_get_num_channels, _lame_get_in_samplerate: _lame_get_in_samplerate, _lame_init: _lame_init, _lame_set_VBR_max_bitrate_kbps: _lame_set_VBR_max_bitrate_kbps, _calloc: _calloc, _lame_get_VBR_max_bitrate_kbps: _lame_get_VBR_max_bitrate_kbps, _lame_get_num_samples: _lame_get_num_samples, _lame_set_num_samples: _lame_set_num_samples, _memset: _memset, _memcpy: _memcpy, _lame_get_VBR_mean_bitrate_kbps: _lame_get_VBR_mean_bitrate_kbps, _lame_init_params: _lame_init_params, _lame_encode_flush: _lame_encode_flush, _lame_set_mode: _lame_set_mode, _lame_set_VBR_mean_bitrate_kbps: _lame_set_VBR_mean_bitrate_kbps, _lame_set_brate: _lame_set_brate, _lame_set_VBR_q: _lame_set_VBR_q, _lame_get_brate: _lame_get_brate, _lame_encode_buffer_ieee_float: _lame_encode_buffer_ieee_float, _lame_set_VBR_min_bitrate_kbps: _lame_set_VBR_min_bitrate_kbps, _lame_get_VBR_min_bitrate_kbps: _lame_get_VBR_min_bitrate_kbps, _lame_get_out_samplerate: _lame_get_out_samplerate, _lame_set_out_samplerate: _lame_set_out_samplerate, _free: _free, _lame_close: _lame_close, _lame_set_in_samplerate: _lame_set_in_samplerate, _get_lame_version: _get_lame_version, _lame_set_VBR: _lame_set_VBR, _lame_get_VBR: _lame_get_VBR, _malloc: _malloc, _memmove: _memmove, _lame_set_num_channels: _lame_set_num_channels, _lame_get_VBR_q: _lame_get_VBR_q, _lame_get_mode: _lame_get_mode, runPostSets: runPostSets, stackAlloc: stackAlloc, stackSave: stackSave, stackRestore: stackRestore, setThrew: setThrew, setTempRet0: setTempRet0, setTempRet1: setTempRet1, setTempRet2: setTempRet2, setTempRet3: setTempRet3, setTempRet4: setTempRet4, setTempRet5: setTempRet5, setTempRet6: setTempRet6, setTempRet7: setTempRet7, setTempRet8: setTempRet8, setTempRet9: setTempRet9, dynCall_ii: dynCall_ii, dynCall_iiifii: dynCall_iiifii, dynCall_vi: dynCall_vi, dynCall_vii: dynCall_vii, dynCall_iiiiiii: dynCall_iiiiiii, dynCall_iiii: dynCall_iiii, dynCall_v: dynCall_v, dynCall_iiiii: dynCall_iiiii, dynCall_iii: dynCall_iii, dynCall_viiii: dynCall_viiii };
})
// EMSCRIPTEN_END_ASM
({ "Math": Math, "Int8Array": Int8Array, "Int16Array": Int16Array, "Int32Array": Int32Array, "Uint8Array": Uint8Array, "Uint16Array": Uint16Array, "Uint32Array": Uint32Array, "Float32Array": Float32Array, "Float64Array": Float64Array }, { "abort": abort, "assert": assert, "asmPrintInt": asmPrintInt, "asmPrintFloat": asmPrintFloat, "min": Math_min, "invoke_ii": invoke_ii, "invoke_iiifii": invoke_iiifii, "invoke_vi": invoke_vi, "invoke_vii": invoke_vii, "invoke_iiiiiii": invoke_iiiiiii, "invoke_iiii": invoke_iiii, "invoke_v": invoke_v, "invoke_iiiii": invoke_iiiii, "invoke_iii": invoke_iii, "invoke_viiii": invoke_viiii, "_llvm_va_end": _llvm_va_end, "_fabsf": _fabsf, "_snprintf": _snprintf, "_abort": _abort, "_fprintf": _fprintf, "_sqrt": _sqrt, "_fflush": _fflush, "__reallyNegative": __reallyNegative, "_llvm_pow_f32": _llvm_pow_f32, "_log": _log, "_fabs": _fabs, "_floor": _floor, "___setErrNo": ___setErrNo, "_fwrite": _fwrite, "_decodeMP3_unclipped": _decodeMP3_unclipped, "_qsort": _qsort, "_send": _send, "_write": _write, "_abs": _abs, "_exit": _exit, "_sprintf": _sprintf, "_log10": _log10, "_sin": _sin, "_ExitMP3": _ExitMP3, "_InitMP3": _InitMP3, "_atan": _atan, "_time": _time, "__formatString": __formatString, "_ceil": _ceil, "_vfprintf": _vfprintf, "_cos": _cos, "_pwrite": _pwrite, "_llvm_pow_f64": _llvm_pow_f64, "_sbrk": _sbrk, "___errno_location": ___errno_location, "_exp": _exp, "_sysconf": _sysconf, "__exit": __exit, "STACKTOP": STACKTOP, "STACK_MAX": STACK_MAX, "tempDoublePtr": tempDoublePtr, "ABORT": ABORT, "NaN": NaN, "Infinity": Infinity, "_stderr": _stderr, "_freqs": _freqs, "_tabsel_123": _tabsel_123 }, buffer);
var _strlen = Module["_strlen"] = asm["_strlen"];
var _tolower = Module["_tolower"] = asm["_tolower"];
var _lame_get_num_channels = Module["_lame_get_num_channels"] = asm["_lame_get_num_channels"];
var _lame_get_in_samplerate = Module["_lame_get_in_samplerate"] = asm["_lame_get_in_samplerate"];
var _lame_init = Module["_lame_init"] = asm["_lame_init"];
var _lame_set_VBR_max_bitrate_kbps = Module["_lame_set_VBR_max_bitrate_kbps"] = asm["_lame_set_VBR_max_bitrate_kbps"];
var _calloc = Module["_calloc"] = asm["_calloc"];
var _lame_get_VBR_max_bitrate_kbps = Module["_lame_get_VBR_max_bitrate_kbps"] = asm["_lame_get_VBR_max_bitrate_kbps"];
var _lame_get_num_samples = Module["_lame_get_num_samples"] = asm["_lame_get_num_samples"];
var _lame_set_num_samples = Module["_lame_set_num_samples"] = asm["_lame_set_num_samples"];
var _memset = Module["_memset"] = asm["_memset"];
var _memcpy = Module["_memcpy"] = asm["_memcpy"];
var _lame_get_VBR_mean_bitrate_kbps = Module["_lame_get_VBR_mean_bitrate_kbps"] = asm["_lame_get_VBR_mean_bitrate_kbps"];
var _lame_init_params = Module["_lame_init_params"] = asm["_lame_init_params"];
var _lame_encode_flush = Module["_lame_encode_flush"] = asm["_lame_encode_flush"];
var _lame_set_mode = Module["_lame_set_mode"] = asm["_lame_set_mode"];
var _lame_set_VBR_mean_bitrate_kbps = Module["_lame_set_VBR_mean_bitrate_kbps"] = asm["_lame_set_VBR_mean_bitrate_kbps"];
var _lame_set_brate = Module["_lame_set_brate"] = asm["_lame_set_brate"];
var _lame_set_VBR_q = Module["_lame_set_VBR_q"] = asm["_lame_set_VBR_q"];
var _lame_get_brate = Module["_lame_get_brate"] = asm["_lame_get_brate"];
var _lame_encode_buffer_ieee_float = Module["_lame_encode_buffer_ieee_float"] = asm["_lame_encode_buffer_ieee_float"];
var _lame_set_VBR_min_bitrate_kbps = Module["_lame_set_VBR_min_bitrate_kbps"] = asm["_lame_set_VBR_min_bitrate_kbps"];
var _lame_get_VBR_min_bitrate_kbps = Module["_lame_get_VBR_min_bitrate_kbps"] = asm["_lame_get_VBR_min_bitrate_kbps"];
var _lame_get_out_samplerate = Module["_lame_get_out_samplerate"] = asm["_lame_get_out_samplerate"];
var _lame_set_out_samplerate = Module["_lame_set_out_samplerate"] = asm["_lame_set_out_samplerate"];
var _free = Module["_free"] = asm["_free"];
var _lame_close = Module["_lame_close"] = asm["_lame_close"];
var _lame_set_in_samplerate = Module["_lame_set_in_samplerate"] = asm["_lame_set_in_samplerate"];
var _get_lame_version = Module["_get_lame_version"] = asm["_get_lame_version"];
var _lame_set_VBR = Module["_lame_set_VBR"] = asm["_lame_set_VBR"];
var _lame_get_VBR = Module["_lame_get_VBR"] = asm["_lame_get_VBR"];
var _malloc = Module["_malloc"] = asm["_malloc"];
var _memmove = Module["_memmove"] = asm["_memmove"];
var _lame_set_num_channels = Module["_lame_set_num_channels"] = asm["_lame_set_num_channels"];
var _lame_get_VBR_q = Module["_lame_get_VBR_q"] = asm["_lame_get_VBR_q"];
var _lame_get_mode = Module["_lame_get_mode"] = asm["_lame_get_mode"];
var runPostSets = Module["runPostSets"] = asm["runPostSets"];
var dynCall_ii = Module["dynCall_ii"] = asm["dynCall_ii"];
var dynCall_iiifii = Module["dynCall_iiifii"] = asm["dynCall_iiifii"];
var dynCall_vi = Module["dynCall_vi"] = asm["dynCall_vi"];
var dynCall_vii = Module["dynCall_vii"] = asm["dynCall_vii"];
var dynCall_iiiiiii = Module["dynCall_iiiiiii"] = asm["dynCall_iiiiiii"];
var dynCall_iiii = Module["dynCall_iiii"] = asm["dynCall_iiii"];
var dynCall_v = Module["dynCall_v"] = asm["dynCall_v"];
var dynCall_iiiii = Module["dynCall_iiiii"] = asm["dynCall_iiiii"];
var dynCall_iii = Module["dynCall_iii"] = asm["dynCall_iii"];
var dynCall_viiii = Module["dynCall_viiii"] = asm["dynCall_viiii"];

Runtime.stackAlloc = function(size) { return asm['stackAlloc'](size) };
Runtime.stackSave = function() { return asm['stackSave']() };
Runtime.stackRestore = function(top) { asm['stackRestore'](top) };

// Warning: printing of i64 values may be slightly rounded! No deep i64 math used, so precise i64 code not included
var i64Math = null;

// === Auto-generated postamble setup entry stuff ===

if (memoryInitializer) {
  function applyData(data) {
    HEAPU8.set(data, STATIC_BASE);
  }
  if (ENVIRONMENT_IS_NODE || ENVIRONMENT_IS_SHELL) {
    applyData(Module['readBinary'](memoryInitializer));
  } else {
    addRunDependency('memory initializer');
    Browser.asyncLoad(memoryInitializer, function(data) {
      applyData(data);
      removeRunDependency('memory initializer');
    }, function(data) {
      throw 'could not load memory initializer ' + memoryInitializer;
    });
  }
}

function ExitStatus(status) {
  this.name = "ExitStatus";
  this.message = "Program terminated with exit(" + status + ")";
  this.status = status;
};
ExitStatus.prototype = new Error();
ExitStatus.prototype.constructor = ExitStatus;

var initialStackTop;
var preloadStartTime = null;
var calledMain = false;

dependenciesFulfilled = function runCaller() {
  // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
  if (!Module['calledRun'] && shouldRunNow) run();
  if (!Module['calledRun']) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled
}

Module['callMain'] = Module.callMain = function callMain(args) {
  assert(runDependencies == 0, 'cannot call main when async dependencies remain! (listen on __ATMAIN__)');
  assert(__ATPRERUN__.length == 0, 'cannot call main when preRun functions remain to be called');

  args = args || [];

  if (ENVIRONMENT_IS_WEB && preloadStartTime !== null) {
    Module.printErr('preload time: ' + (Date.now() - preloadStartTime) + ' ms');
  }

  ensureInitRuntime();

  var argc = args.length+1;
  function pad() {
    for (var i = 0; i < 4-1; i++) {
      argv.push(0);
    }
  }
  var argv = [allocate(intArrayFromString("/bin/this.program"), 'i8', ALLOC_NORMAL) ];
  pad();
  for (var i = 0; i < argc-1; i = i + 1) {
    argv.push(allocate(intArrayFromString(args[i]), 'i8', ALLOC_NORMAL));
    pad();
  }
  argv.push(0);
  argv = allocate(argv, 'i32', ALLOC_NORMAL);

  initialStackTop = STACKTOP;

  try {

    var ret = Module['_main'](argc, argv, 0);


    // if we're not running an evented main loop, it's time to exit
    if (!Module['noExitRuntime']) {
      exit(ret);
    }
  }
  catch(e) {
    if (e instanceof ExitStatus) {
      // exit() throws this once it's done to make sure execution
      // has been stopped completely
      return;
    } else if (e == 'SimulateInfiniteLoop') {
      // running an evented main loop, don't immediately exit
      Module['noExitRuntime'] = true;
      return;
    } else {
      if (e && typeof e === 'object' && e.stack) Module.printErr('exception thrown: ' + [e, e.stack]);
      throw e;
    }
  } finally {
    calledMain = true;
  }
}




function run(args) {
  args = args || Module['arguments'];

  if (preloadStartTime === null) preloadStartTime = Date.now();

  if (runDependencies > 0) {
    Module.printErr('run() called, but dependencies remain, so not running');
    return;
  }

  preRun();

  if (runDependencies > 0) return; // a preRun added a dependency, run will be called later
  if (Module['calledRun']) return; // run may have just been called through dependencies being fulfilled just in this very frame

  function doRun() {
    if (Module['calledRun']) return; // run may have just been called while the async setStatus time below was happening
    Module['calledRun'] = true;

    ensureInitRuntime();

    preMain();

    if (Module['_main'] && shouldRunNow) {
      Module['callMain'](args);
    }

    postRun();
  }

  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      if (!ABORT) doRun();
    }, 1);
  } else {
    doRun();
  }
}
Module['run'] = Module.run = run;

function exit(status) {
  ABORT = true;
  EXITSTATUS = status;
  STACKTOP = initialStackTop;

  // exit the runtime
  exitRuntime();

  // TODO We should handle this differently based on environment.
  // In the browser, the best we can do is throw an exception
  // to halt execution, but in node we could process.exit and
  // I'd imagine SM shell would have something equivalent.
  // This would let us set a proper exit status (which
  // would be great for checking test exit statuses).
  // https://github.com/kripken/emscripten/issues/1371

  // throw an exception to halt the current execution
  throw new ExitStatus(status);
}
Module['exit'] = Module.exit = exit;

function abort(text) {
  if (text) {
    Module.print(text);
    Module.printErr(text);
  }

  ABORT = true;
  EXITSTATUS = 1;

  throw 'abort() at ' + stackTrace();
}
Module['abort'] = Module.abort = abort;

// {{PRE_RUN_ADDITIONS}}

if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}

// shouldRunNow refers to calling main(), not run().
var shouldRunNow = true;
if (Module['noInitialRun']) {
  shouldRunNow = false;
}

run();

// {{POST_RUN_ADDITIONS}}






// {{MODULE_ADDITIONS}}



// libmp3lame function wrappers

var BUFSIZE = 8192;

return {
	STEREO: 0, 
	JOINT_STEREO: 1, 
	MONO: 3,

	get_version: Module.cwrap('get_lame_version', 'string'),

	init: Module.cwrap('lame_init', 'number'),
	init_params: Module.cwrap('lame_init_params', 'number', [ 'number' ]),

	set_mode: Module.cwrap('lame_set_mode', 'number', [ 'number', 'number' ]),
	get_mode: Module.cwrap('lame_get_mode', 'number', [ 'number' ]),

	set_num_samples: Module.cwrap('lame_set_num_samples', 'number', [ 'number', 'number' ]),
	get_num_samples: Module.cwrap('lame_get_num_samples', 'number', [ 'number' ]),

	set_num_channels: Module.cwrap('lame_set_num_channels', 'number', [ 'number', 'number' ]),
	get_num_channels: Module.cwrap('lame_get_num_channels', 'number', [ 'number' ]),

	set_in_samplerate: Module.cwrap('lame_set_in_samplerate', 'number', [ 'number', 'number' ]),
	get_in_samplerate: Module.cwrap('lame_get_in_samplerate', 'number', [ 'number' ]),

	set_out_samplerate: Module.cwrap('lame_set_out_samplerate', 'number', [ 'number', 'number' ]),
	get_out_samplerate: Module.cwrap('lame_get_out_samplerate', 'number', [ 'number' ]),

	set_bitrate: Module.cwrap('lame_set_brate', 'number', [ 'number', 'number' ]),
	get_bitrate: Module.cwrap('lame_get_brate', 'number', [ 'number' ]),
	
	set_VBR: Module.cwrap('lame_set_VBR', 'number', [ 'number', 'number' ]),
	get_VBR: Module.cwrap('lame_get_VBR', 'number', [ 'number' ]),
	
	set_VBR_q: Module.cwrap('lame_set_VBR_q', 'number', [ 'number', 'number' ]),
	get_VBR_q: Module.cwrap('lame_get_VBR_q', 'number', [ 'number' ]),
	
	set_VBR_mean_bitrate_kbps: Module.cwrap('lame_set_VBR_mean_bitrate_kbps', 'number', [ 'number', 'number' ]),
	get_VBR_mean_bitrate_kbps: Module.cwrap('lame_get_VBR_mean_bitrate_kbps', 'number', [ 'number' ]),
	
	set_VBR_min_bitrate_kbps: Module.cwrap('lame_set_VBR_min_bitrate_kbps', 'number', [ 'number', 'number' ]),
	get_VBR_min_bitrate_kbps: Module.cwrap('lame_get_VBR_min_bitrate_kbps', 'number', [ 'number' ]),
	
	set_VBR_max_bitrate_kbps: Module.cwrap('lame_set_VBR_max_bitrate_kbps', 'number', [ 'number', 'number' ]),
	get_VBR_max_bitrate_kbps: Module.cwrap('lame_get_VBR_max_bitrate_kbps', 'number', [ 'number' ]),

	encode_buffer_ieee_float: function(handle, channel_l, channel_r) {
		var outbuf = _malloc(BUFSIZE);
		var inbuf_l = _malloc(channel_l.length * 4);
		var inbuf_r = _malloc(channel_r.length * 4);
		for (var i=0;i<channel_l.length;i++) {
			setValue(inbuf_l + (i*4), channel_l[i], 'float');
		}
		for (var i=0;i<channel_r.length;i++) {
			setValue(inbuf_r + (i*4), channel_r[i], 'float');
		}
		var nread = Module.ccall('lame_encode_buffer_ieee_float', 'number', [ 'number', 'number', 'number', 'number', 'number', 'number' ], [ handle, inbuf_l, inbuf_r, channel_l.length, outbuf, BUFSIZE ]);
		var arraybuf = new ArrayBuffer(nread);
		var retdata = new Uint8Array(arraybuf);
		retdata.set(HEAPU8.subarray(outbuf, outbuf + nread));
		_free(outbuf);
		_free(inbuf_l);
		_free(inbuf_r);
		return { size: nread, data: retdata };
	},

	encode_flush: function(handle) {
		var outbuf = _malloc(BUFSIZE);
		var nread = Module.ccall('lame_encode_flush', 'number', [ 'number', 'number', 'number' ], [ handle, outbuf, BUFSIZE ]);
		var arraybuf = new ArrayBuffer(nread);
		var retdata = new Uint8Array(arraybuf);
		retdata.set(HEAPU8.subarray(outbuf, outbuf + nread));
		_free(outbuf);
		return { size: nread, data: retdata };
	},

	close: Module.cwrap('lame_close', 'number', [ 'number' ])
};

})();

self.Lame = Lame; // make Lame accessible to other webworker scripts.



